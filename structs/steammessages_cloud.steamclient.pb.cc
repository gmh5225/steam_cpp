// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamclient.proto

#include "steammessages_cloud.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CCloud_ClientLogUploadCheck_Notification::CCloud_ClientLogUploadCheck_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(uint64_t{0u}){}
struct CCloud_ClientLogUploadCheck_NotificationDefaultTypeInternal {
  constexpr CCloud_ClientLogUploadCheck_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientLogUploadCheck_NotificationDefaultTypeInternal() {}
  union {
    CCloud_ClientLogUploadCheck_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientLogUploadCheck_NotificationDefaultTypeInternal _CCloud_ClientLogUploadCheck_Notification_default_instance_;
constexpr CCloud_ClientLogUploadComplete_Notification::CCloud_ClientLogUploadComplete_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(uint64_t{0u})
  , request_id_(uint64_t{0u}){}
struct CCloud_ClientLogUploadComplete_NotificationDefaultTypeInternal {
  constexpr CCloud_ClientLogUploadComplete_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientLogUploadComplete_NotificationDefaultTypeInternal() {}
  union {
    CCloud_ClientLogUploadComplete_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientLogUploadComplete_NotificationDefaultTypeInternal _CCloud_ClientLogUploadComplete_Notification_default_instance_;
constexpr CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CCloud_GetUploadServerInfo_RequestDefaultTypeInternal {
  constexpr CCloud_GetUploadServerInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetUploadServerInfo_RequestDefaultTypeInternal() {}
  union {
    CCloud_GetUploadServerInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetUploadServerInfo_RequestDefaultTypeInternal _CCloud_GetUploadServerInfo_Request_default_instance_;
constexpr CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal {
  constexpr CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal() {}
  union {
    CCloud_GetUploadServerInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal _CCloud_GetUploadServerInfo_Response_default_instance_;
constexpr CCloud_BeginHTTPUpload_Request::CCloud_BeginHTTPUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : platforms_to_sync_()
  , request_headers_names_()
  , request_headers_values_()
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , file_size_(0u)
  , upload_batch_id_(uint64_t{0u})
  , is_public_(false){}
struct CCloud_BeginHTTPUpload_RequestDefaultTypeInternal {
  constexpr CCloud_BeginHTTPUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginHTTPUpload_RequestDefaultTypeInternal() {}
  union {
    CCloud_BeginHTTPUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginHTTPUpload_RequestDefaultTypeInternal _CCloud_BeginHTTPUpload_Request_default_instance_;
constexpr CCloud_BeginHTTPUpload_Response_HTTPHeaders::CCloud_BeginHTTPUpload_Response_HTTPHeaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal {
  constexpr CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal() {}
  union {
    CCloud_BeginHTTPUpload_Response_HTTPHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal _CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_;
constexpr CCloud_BeginHTTPUpload_Response::CCloud_BeginHTTPUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_headers_()
  , url_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ugcid_(uint64_t{0u})
  , timestamp_(0u)
  , use_https_(false){}
struct CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal {
  constexpr CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal() {}
  union {
    CCloud_BeginHTTPUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal _CCloud_BeginHTTPUpload_Response_default_instance_;
constexpr CCloud_CommitHTTPUpload_Request::CCloud_CommitHTTPUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transfer_succeeded_(false)
  , appid_(0u){}
struct CCloud_CommitHTTPUpload_RequestDefaultTypeInternal {
  constexpr CCloud_CommitHTTPUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CommitHTTPUpload_RequestDefaultTypeInternal() {}
  union {
    CCloud_CommitHTTPUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CommitHTTPUpload_RequestDefaultTypeInternal _CCloud_CommitHTTPUpload_Request_default_instance_;
constexpr CCloud_CommitHTTPUpload_Response::CCloud_CommitHTTPUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_committed_(false){}
struct CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal {
  constexpr CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal() {}
  union {
    CCloud_CommitHTTPUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal _CCloud_CommitHTTPUpload_Response_default_instance_;
constexpr CCloud_BeginUGCUpload_Request::CCloud_BeginUGCUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , file_size_(0u){}
struct CCloud_BeginUGCUpload_RequestDefaultTypeInternal {
  constexpr CCloud_BeginUGCUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginUGCUpload_RequestDefaultTypeInternal() {}
  union {
    CCloud_BeginUGCUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginUGCUpload_RequestDefaultTypeInternal _CCloud_BeginUGCUpload_Request_default_instance_;
constexpr CCloud_BeginUGCUpload_Response_HTTPHeaders::CCloud_BeginUGCUpload_Response_HTTPHeaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCloud_BeginUGCUpload_Response_HTTPHeadersDefaultTypeInternal {
  constexpr CCloud_BeginUGCUpload_Response_HTTPHeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginUGCUpload_Response_HTTPHeadersDefaultTypeInternal() {}
  union {
    CCloud_BeginUGCUpload_Response_HTTPHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginUGCUpload_Response_HTTPHeadersDefaultTypeInternal _CCloud_BeginUGCUpload_Response_HTTPHeaders_default_instance_;
constexpr CCloud_BeginUGCUpload_Response::CCloud_BeginUGCUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_headers_()
  , url_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ugcid_(uint64_t{0u})
  , storage_system_(0)

  , timestamp_(0u)
  , use_https_(false){}
struct CCloud_BeginUGCUpload_ResponseDefaultTypeInternal {
  constexpr CCloud_BeginUGCUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginUGCUpload_ResponseDefaultTypeInternal() {}
  union {
    CCloud_BeginUGCUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginUGCUpload_ResponseDefaultTypeInternal _CCloud_BeginUGCUpload_Response_default_instance_;
constexpr CCloud_CommitUGCUpload_Request::CCloud_CommitUGCUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transfer_succeeded_(false)
  , appid_(0u)
  , ugcid_(uint64_t{0u}){}
struct CCloud_CommitUGCUpload_RequestDefaultTypeInternal {
  constexpr CCloud_CommitUGCUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CommitUGCUpload_RequestDefaultTypeInternal() {}
  union {
    CCloud_CommitUGCUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CommitUGCUpload_RequestDefaultTypeInternal _CCloud_CommitUGCUpload_Request_default_instance_;
constexpr CCloud_CommitUGCUpload_Response::CCloud_CommitUGCUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_committed_(false){}
struct CCloud_CommitUGCUpload_ResponseDefaultTypeInternal {
  constexpr CCloud_CommitUGCUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CommitUGCUpload_ResponseDefaultTypeInternal() {}
  union {
    CCloud_CommitUGCUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CommitUGCUpload_ResponseDefaultTypeInternal _CCloud_CommitUGCUpload_Response_default_instance_;
constexpr CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ugcid_(uint64_t{0u})
  , appid_(0u){}
struct CCloud_GetFileDetails_RequestDefaultTypeInternal {
  constexpr CCloud_GetFileDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetFileDetails_RequestDefaultTypeInternal() {}
  union {
    CCloud_GetFileDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetFileDetails_RequestDefaultTypeInternal _CCloud_GetFileDetails_Request_default_instance_;
constexpr CCloud_UserFile::CCloud_UserFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : platforms_to_sync_()
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ugcid_(uint64_t{0u})
  , appid_(0u)
  , file_size_(0u)
  , timestamp_(uint64_t{0u})
  , steamid_creator_(uint64_t{0u})
  , flags_(0u){}
struct CCloud_UserFileDefaultTypeInternal {
  constexpr CCloud_UserFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_UserFileDefaultTypeInternal() {}
  union {
    CCloud_UserFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_UserFileDefaultTypeInternal _CCloud_UserFile_default_instance_;
constexpr CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : details_(nullptr){}
struct CCloud_GetFileDetails_ResponseDefaultTypeInternal {
  constexpr CCloud_GetFileDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetFileDetails_ResponseDefaultTypeInternal() {}
  union {
    CCloud_GetFileDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetFileDetails_ResponseDefaultTypeInternal _CCloud_GetFileDetails_Response_default_instance_;
constexpr CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , extended_details_(false)
  , count_(0u)
  , start_index_(0u){}
struct CCloud_EnumerateUserFiles_RequestDefaultTypeInternal {
  constexpr CCloud_EnumerateUserFiles_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_EnumerateUserFiles_RequestDefaultTypeInternal() {}
  union {
    CCloud_EnumerateUserFiles_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_EnumerateUserFiles_RequestDefaultTypeInternal _CCloud_EnumerateUserFiles_Request_default_instance_;
constexpr CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_()
  , total_files_(0u){}
struct CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal {
  constexpr CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal() {}
  union {
    CCloud_EnumerateUserFiles_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal _CCloud_EnumerateUserFiles_Response_default_instance_;
constexpr CCloud_Delete_Request::CCloud_Delete_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , upload_batch_id_(uint64_t{0u})
  , appid_(0u){}
struct CCloud_Delete_RequestDefaultTypeInternal {
  constexpr CCloud_Delete_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_Delete_RequestDefaultTypeInternal() {}
  union {
    CCloud_Delete_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_Delete_RequestDefaultTypeInternal _CCloud_Delete_Request_default_instance_;
constexpr CCloud_Delete_Response::CCloud_Delete_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCloud_Delete_ResponseDefaultTypeInternal {
  constexpr CCloud_Delete_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_Delete_ResponseDefaultTypeInternal() {}
  union {
    CCloud_Delete_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_Delete_ResponseDefaultTypeInternal _CCloud_Delete_Response_default_instance_;
constexpr CCloud_GetClientEncryptionKey_Request::CCloud_GetClientEncryptionKey_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal {
  constexpr CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal() {}
  union {
    CCloud_GetClientEncryptionKey_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal _CCloud_GetClientEncryptionKey_Request_default_instance_;
constexpr CCloud_GetClientEncryptionKey_Response::CCloud_GetClientEncryptionKey_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , crc_(0){}
struct CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal {
  constexpr CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal() {}
  union {
    CCloud_GetClientEncryptionKey_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal _CCloud_GetClientEncryptionKey_Response_default_instance_;
constexpr CCloud_CDNReport_Notification::CCloud_CDNReport_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , success_(false)
  , http_status_code_(0u)
  , expected_bytes_(uint64_t{0u})
  , received_bytes_(uint64_t{0u})
  , duration_(0u){}
struct CCloud_CDNReport_NotificationDefaultTypeInternal {
  constexpr CCloud_CDNReport_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CDNReport_NotificationDefaultTypeInternal() {}
  union {
    CCloud_CDNReport_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CDNReport_NotificationDefaultTypeInternal _CCloud_CDNReport_Notification_default_instance_;
constexpr CCloud_ExternalStorageTransferReport_Notification::CCloud_ExternalStorageTransferReport_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_expected_(uint64_t{0u})
  , http_status_code_(0u)
  , is_upload_(false)
  , success_(false)
  , proxied_(false)
  , ipv6_local_(false)
  , bytes_actual_(uint64_t{0u})
  , duration_ms_(0u)
  , cellid_(0u)
  , ipv6_remote_(false)
  , time_to_connect_ms_(0u)
  , time_to_send_req_ms_(0u)
  , time_to_first_byte_ms_(0u)
  , time_to_last_byte_ms_(0u){}
struct CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal {
  constexpr CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal() {}
  union {
    CCloud_ExternalStorageTransferReport_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal _CCloud_ExternalStorageTransferReport_Notification_default_instance_;
constexpr CCloud_BeginAppUploadBatch_Request::CCloud_BeginAppUploadBatch_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_to_upload_()
  , files_to_delete_()
  , machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(uint64_t{0u})
  , app_build_id_(uint64_t{0u})
  , appid_(0u){}
struct CCloud_BeginAppUploadBatch_RequestDefaultTypeInternal {
  constexpr CCloud_BeginAppUploadBatch_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginAppUploadBatch_RequestDefaultTypeInternal() {}
  union {
    CCloud_BeginAppUploadBatch_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginAppUploadBatch_RequestDefaultTypeInternal _CCloud_BeginAppUploadBatch_Request_default_instance_;
constexpr CCloud_BeginAppUploadBatch_Response::CCloud_BeginAppUploadBatch_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batch_id_(uint64_t{0u})
  , app_change_number_(uint64_t{0u}){}
struct CCloud_BeginAppUploadBatch_ResponseDefaultTypeInternal {
  constexpr CCloud_BeginAppUploadBatch_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_BeginAppUploadBatch_ResponseDefaultTypeInternal() {}
  union {
    CCloud_BeginAppUploadBatch_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_BeginAppUploadBatch_ResponseDefaultTypeInternal _CCloud_BeginAppUploadBatch_Response_default_instance_;
constexpr CCloud_CompleteAppUploadBatch_Notification::CCloud_CompleteAppUploadBatch_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batch_id_(uint64_t{0u})
  , appid_(0u)
  , batch_eresult_(0u){}
struct CCloud_CompleteAppUploadBatch_NotificationDefaultTypeInternal {
  constexpr CCloud_CompleteAppUploadBatch_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CompleteAppUploadBatch_NotificationDefaultTypeInternal() {}
  union {
    CCloud_CompleteAppUploadBatch_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CompleteAppUploadBatch_NotificationDefaultTypeInternal _CCloud_CompleteAppUploadBatch_Notification_default_instance_;
constexpr CCloud_CompleteAppUploadBatch_Request::CCloud_CompleteAppUploadBatch_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batch_id_(uint64_t{0u})
  , appid_(0u)
  , batch_eresult_(0u){}
struct CCloud_CompleteAppUploadBatch_RequestDefaultTypeInternal {
  constexpr CCloud_CompleteAppUploadBatch_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CompleteAppUploadBatch_RequestDefaultTypeInternal() {}
  union {
    CCloud_CompleteAppUploadBatch_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CompleteAppUploadBatch_RequestDefaultTypeInternal _CCloud_CompleteAppUploadBatch_Request_default_instance_;
constexpr CCloud_CompleteAppUploadBatch_Response::CCloud_CompleteAppUploadBatch_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCloud_CompleteAppUploadBatch_ResponseDefaultTypeInternal {
  constexpr CCloud_CompleteAppUploadBatch_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_CompleteAppUploadBatch_ResponseDefaultTypeInternal() {}
  union {
    CCloud_CompleteAppUploadBatch_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_CompleteAppUploadBatch_ResponseDefaultTypeInternal _CCloud_CompleteAppUploadBatch_Response_default_instance_;
constexpr CCloud_ClientBeginFileUpload_Request::CCloud_ClientBeginFileUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , file_size_(0u)
  , time_stamp_(uint64_t{0u})
  , raw_file_size_(0u)
  , cell_id_(0u)
  , can_encrypt_(false)
  , is_shared_file_(false)
  , deprecated_realm_(0u)
  , upload_batch_id_(uint64_t{0u})
  , platforms_to_sync_(4294967295u){}
struct CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal {
  constexpr CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal() {}
  union {
    CCloud_ClientBeginFileUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal _CCloud_ClientBeginFileUpload_Request_default_instance_;
constexpr ClientCloudFileUploadBlockDetails_HTTPHeaders::ClientCloudFileUploadBlockDetails_HTTPHeaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal {
  constexpr ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal() {}
  union {
    ClientCloudFileUploadBlockDetails_HTTPHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal _ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_;
constexpr ClientCloudFileUploadBlockDetails::ClientCloudFileUploadBlockDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_headers_()
  , url_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , explicit_body_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , http_method_(0)
  , use_https_(false)
  , may_parallelize_(false)
  , block_offset_(uint64_t{0u})
  , block_length_(0u){}
struct ClientCloudFileUploadBlockDetailsDefaultTypeInternal {
  constexpr ClientCloudFileUploadBlockDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientCloudFileUploadBlockDetailsDefaultTypeInternal() {}
  union {
    ClientCloudFileUploadBlockDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientCloudFileUploadBlockDetailsDefaultTypeInternal _ClientCloudFileUploadBlockDetails_default_instance_;
constexpr CCloud_ClientBeginFileUpload_Response::CCloud_ClientBeginFileUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_requests_()
  , encrypt_file_(false){}
struct CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal {
  constexpr CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal() {}
  union {
    CCloud_ClientBeginFileUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal _CCloud_ClientBeginFileUpload_Response_default_instance_;
constexpr CCloud_ClientCommitFileUpload_Request::CCloud_ClientCommitFileUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transfer_succeeded_(false)
  , appid_(0u){}
struct CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal {
  constexpr CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal() {}
  union {
    CCloud_ClientCommitFileUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal _CCloud_ClientCommitFileUpload_Request_default_instance_;
constexpr CCloud_ClientCommitFileUpload_Response::CCloud_ClientCommitFileUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_committed_(false){}
struct CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal {
  constexpr CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal() {}
  union {
    CCloud_ClientCommitFileUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal _CCloud_ClientCommitFileUpload_Response_default_instance_;
constexpr CCloud_ClientFileDownload_Request::CCloud_ClientFileDownload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , realm_(0u){}
struct CCloud_ClientFileDownload_RequestDefaultTypeInternal {
  constexpr CCloud_ClientFileDownload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientFileDownload_RequestDefaultTypeInternal() {}
  union {
    CCloud_ClientFileDownload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientFileDownload_RequestDefaultTypeInternal _CCloud_ClientFileDownload_Request_default_instance_;
constexpr CCloud_ClientFileDownload_Response_HTTPHeaders::CCloud_ClientFileDownload_Response_HTTPHeaders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal {
  constexpr CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal() {}
  union {
    CCloud_ClientFileDownload_Response_HTTPHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal _CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_;
constexpr CCloud_ClientFileDownload_Response::CCloud_ClientFileDownload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_headers_()
  , sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , file_size_(0u)
  , time_stamp_(uint64_t{0u})
  , raw_file_size_(0u)
  , is_explicit_delete_(false)
  , use_https_(false)
  , encrypted_(false){}
struct CCloud_ClientFileDownload_ResponseDefaultTypeInternal {
  constexpr CCloud_ClientFileDownload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientFileDownload_ResponseDefaultTypeInternal() {}
  union {
    CCloud_ClientFileDownload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientFileDownload_ResponseDefaultTypeInternal _CCloud_ClientFileDownload_Response_default_instance_;
constexpr CCloud_ClientDeleteFile_Request::CCloud_ClientDeleteFile_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , is_explicit_delete_(false)
  , upload_batch_id_(uint64_t{0u}){}
struct CCloud_ClientDeleteFile_RequestDefaultTypeInternal {
  constexpr CCloud_ClientDeleteFile_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientDeleteFile_RequestDefaultTypeInternal() {}
  union {
    CCloud_ClientDeleteFile_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientDeleteFile_RequestDefaultTypeInternal _CCloud_ClientDeleteFile_Request_default_instance_;
constexpr CCloud_ClientDeleteFile_Response::CCloud_ClientDeleteFile_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCloud_ClientDeleteFile_ResponseDefaultTypeInternal {
  constexpr CCloud_ClientDeleteFile_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientDeleteFile_ResponseDefaultTypeInternal() {}
  union {
    CCloud_ClientDeleteFile_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientDeleteFile_ResponseDefaultTypeInternal _CCloud_ClientDeleteFile_Response_default_instance_;
constexpr CCloud_ClientConflictResolution_Notification::CCloud_ClientConflictResolution_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , chose_local_files_(false){}
struct CCloud_ClientConflictResolution_NotificationDefaultTypeInternal {
  constexpr CCloud_ClientConflictResolution_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientConflictResolution_NotificationDefaultTypeInternal() {}
  union {
    CCloud_ClientConflictResolution_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientConflictResolution_NotificationDefaultTypeInternal _CCloud_ClientConflictResolution_Notification_default_instance_;
constexpr CCloud_EnumerateUserApps_Request::CCloud_EnumerateUserApps_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCloud_EnumerateUserApps_RequestDefaultTypeInternal {
  constexpr CCloud_EnumerateUserApps_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_EnumerateUserApps_RequestDefaultTypeInternal() {}
  union {
    CCloud_EnumerateUserApps_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_EnumerateUserApps_RequestDefaultTypeInternal _CCloud_EnumerateUserApps_Request_default_instance_;
constexpr CCloud_EnumerateUserApps_Response_Apps::CCloud_EnumerateUserApps_Response_Apps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , totalcount_(0)
  , totalsize_(int64_t{0}){}
struct CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal {
  constexpr CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal() {}
  union {
    CCloud_EnumerateUserApps_Response_Apps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_EnumerateUserApps_Response_AppsDefaultTypeInternal _CCloud_EnumerateUserApps_Response_Apps_default_instance_;
constexpr CCloud_EnumerateUserApps_Response::CCloud_EnumerateUserApps_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_(){}
struct CCloud_EnumerateUserApps_ResponseDefaultTypeInternal {
  constexpr CCloud_EnumerateUserApps_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_EnumerateUserApps_ResponseDefaultTypeInternal() {}
  union {
    CCloud_EnumerateUserApps_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_EnumerateUserApps_ResponseDefaultTypeInternal _CCloud_EnumerateUserApps_Response_default_instance_;
constexpr CCloud_GetAppFileChangelist_Request::CCloud_GetAppFileChangelist_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : synced_change_number_(uint64_t{0u})
  , appid_(0u){}
struct CCloud_GetAppFileChangelist_RequestDefaultTypeInternal {
  constexpr CCloud_GetAppFileChangelist_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetAppFileChangelist_RequestDefaultTypeInternal() {}
  union {
    CCloud_GetAppFileChangelist_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetAppFileChangelist_RequestDefaultTypeInternal _CCloud_GetAppFileChangelist_Request_default_instance_;
constexpr CCloud_AppFileInfo::CCloud_AppFileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_stamp_(uint64_t{0u})
  , raw_file_size_(0u)
  , persist_state_(0)

  , platforms_to_sync_(0u)
  , path_prefix_index_(0u)
  , machine_name_index_(0u){}
struct CCloud_AppFileInfoDefaultTypeInternal {
  constexpr CCloud_AppFileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppFileInfoDefaultTypeInternal() {}
  union {
    CCloud_AppFileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppFileInfoDefaultTypeInternal _CCloud_AppFileInfo_default_instance_;
constexpr CCloud_GetAppFileChangelist_Response::CCloud_GetAppFileChangelist_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_()
  , path_prefixes_()
  , machine_names_()
  , current_change_number_(uint64_t{0u})
  , app_buildid_hwm_(uint64_t{0u})
  , is_only_delta_(false){}
struct CCloud_GetAppFileChangelist_ResponseDefaultTypeInternal {
  constexpr CCloud_GetAppFileChangelist_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_GetAppFileChangelist_ResponseDefaultTypeInternal() {}
  union {
    CCloud_GetAppFileChangelist_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_GetAppFileChangelist_ResponseDefaultTypeInternal _CCloud_GetAppFileChangelist_Response_default_instance_;
constexpr CCloud_AppSessionSuspend_Request::CCloud_AppSessionSuspend_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(uint64_t{0u})
  , appid_(0u)
  , cloud_sync_completed_(false){}
struct CCloud_AppSessionSuspend_RequestDefaultTypeInternal {
  constexpr CCloud_AppSessionSuspend_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppSessionSuspend_RequestDefaultTypeInternal() {}
  union {
    CCloud_AppSessionSuspend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppSessionSuspend_RequestDefaultTypeInternal _CCloud_AppSessionSuspend_Request_default_instance_;
constexpr CCloud_AppSessionSuspend_Response::CCloud_AppSessionSuspend_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCloud_AppSessionSuspend_ResponseDefaultTypeInternal {
  constexpr CCloud_AppSessionSuspend_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppSessionSuspend_ResponseDefaultTypeInternal() {}
  union {
    CCloud_AppSessionSuspend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppSessionSuspend_ResponseDefaultTypeInternal _CCloud_AppSessionSuspend_Response_default_instance_;
constexpr CCloud_AppSessionResume_Request::CCloud_AppSessionResume_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(uint64_t{0u})
  , appid_(0u){}
struct CCloud_AppSessionResume_RequestDefaultTypeInternal {
  constexpr CCloud_AppSessionResume_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppSessionResume_RequestDefaultTypeInternal() {}
  union {
    CCloud_AppSessionResume_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppSessionResume_RequestDefaultTypeInternal _CCloud_AppSessionResume_Request_default_instance_;
constexpr CCloud_AppSessionResume_Response::CCloud_AppSessionResume_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCloud_AppSessionResume_ResponseDefaultTypeInternal {
  constexpr CCloud_AppSessionResume_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppSessionResume_ResponseDefaultTypeInternal() {}
  union {
    CCloud_AppSessionResume_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppSessionResume_ResponseDefaultTypeInternal _CCloud_AppSessionResume_Response_default_instance_;
constexpr CCloud_AppLaunchIntent_Request::CCloud_AppLaunchIntent_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(uint64_t{0u})
  , appid_(0u)
  , ignore_pending_operations_(false){}
struct CCloud_AppLaunchIntent_RequestDefaultTypeInternal {
  constexpr CCloud_AppLaunchIntent_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppLaunchIntent_RequestDefaultTypeInternal() {}
  union {
    CCloud_AppLaunchIntent_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppLaunchIntent_RequestDefaultTypeInternal _CCloud_AppLaunchIntent_Request_default_instance_;
constexpr CCloud_AppLaunchIntent_Response::CCloud_AppLaunchIntent_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pending_remote_operations_(){}
struct CCloud_AppLaunchIntent_ResponseDefaultTypeInternal {
  constexpr CCloud_AppLaunchIntent_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppLaunchIntent_ResponseDefaultTypeInternal() {}
  union {
    CCloud_AppLaunchIntent_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppLaunchIntent_ResponseDefaultTypeInternal _CCloud_AppLaunchIntent_Response_default_instance_;
constexpr CCloud_AppExitSyncDone_Notification::CCloud_AppExitSyncDone_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(uint64_t{0u})
  , appid_(0u)
  , uploads_completed_(false)
  , uploads_required_(false){}
struct CCloud_AppExitSyncDone_NotificationDefaultTypeInternal {
  constexpr CCloud_AppExitSyncDone_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppExitSyncDone_NotificationDefaultTypeInternal() {}
  union {
    CCloud_AppExitSyncDone_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppExitSyncDone_NotificationDefaultTypeInternal _CCloud_AppExitSyncDone_Notification_default_instance_;
constexpr CCloud_ClientGetAppQuotaUsage_Request::CCloud_ClientGetAppQuotaUsage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CCloud_ClientGetAppQuotaUsage_RequestDefaultTypeInternal {
  constexpr CCloud_ClientGetAppQuotaUsage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientGetAppQuotaUsage_RequestDefaultTypeInternal() {}
  union {
    CCloud_ClientGetAppQuotaUsage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientGetAppQuotaUsage_RequestDefaultTypeInternal _CCloud_ClientGetAppQuotaUsage_Request_default_instance_;
constexpr CCloud_ClientGetAppQuotaUsage_Response::CCloud_ClientGetAppQuotaUsage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : existing_bytes_(uint64_t{0u})
  , existing_files_(0u)
  , max_num_files_(0u)
  , max_num_bytes_(uint64_t{0u}){}
struct CCloud_ClientGetAppQuotaUsage_ResponseDefaultTypeInternal {
  constexpr CCloud_ClientGetAppQuotaUsage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientGetAppQuotaUsage_ResponseDefaultTypeInternal() {}
  union {
    CCloud_ClientGetAppQuotaUsage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientGetAppQuotaUsage_ResponseDefaultTypeInternal _CCloud_ClientGetAppQuotaUsage_Response_default_instance_;
constexpr CCloud_AppCloudStateChange_Notification::CCloud_AppCloudStateChange_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_change_number_(uint64_t{0u})
  , appid_(0u){}
struct CCloud_AppCloudStateChange_NotificationDefaultTypeInternal {
  constexpr CCloud_AppCloudStateChange_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_AppCloudStateChange_NotificationDefaultTypeInternal() {}
  union {
    CCloud_AppCloudStateChange_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_AppCloudStateChange_NotificationDefaultTypeInternal _CCloud_AppCloudStateChange_Notification_default_instance_;
constexpr CCloud_ClientLogUploadRequest_Notification::CCloud_ClientLogUploadRequest_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(uint64_t{0u}){}
struct CCloud_ClientLogUploadRequest_NotificationDefaultTypeInternal {
  constexpr CCloud_ClientLogUploadRequest_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCloud_ClientLogUploadRequest_NotificationDefaultTypeInternal() {}
  union {
    CCloud_ClientLogUploadRequest_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCloud_ClientLogUploadRequest_NotificationDefaultTypeInternal _CCloud_ClientLogUploadRequest_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[59];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fcloud_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5fcloud_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadCheck_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadCheck_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadCheck_Notification, client_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadComplete_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadComplete_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadComplete_Notification, client_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadComplete_Notification, request_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetUploadServerInfo_Response, server_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, is_public_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, request_headers_names_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, request_headers_values_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Request, upload_batch_id_),
  2,
  3,
  0,
  1,
  5,
  ~0u,
  ~0u,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, ugcid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, url_host_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, url_path_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, use_https_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginHTTPUpload_Response, request_headers_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Request, transfer_succeeded_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Request, filename_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitHTTPUpload_Response, file_committed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Request, file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Request, content_type_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, storage_system_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, ugcid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, url_host_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, url_path_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, use_https_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginUGCUpload_Response, request_headers_),
  3,
  2,
  4,
  0,
  1,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Request, transfer_succeeded_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Request, ugcid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_CommitUGCUpload_Response, file_committed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, ugcid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Request, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, ugcid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, filename_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, url_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, steamid_creator_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, flags_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::CCloud_UserFile, file_sha_),
  4,
  3,
  0,
  6,
  5,
  1,
  7,
  8,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetFileDetails_Response, details_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, extended_details_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Request, start_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, files_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserFiles_Response, total_files_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Request, upload_batch_id_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_Delete_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetClientEncryptionKey_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetClientEncryptionKey_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetClientEncryptionKey_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetClientEncryptionKey_Response, key_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetClientEncryptionKey_Response, crc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, url_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, success_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, http_status_code_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, expected_bytes_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, received_bytes_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CDNReport_Notification, duration_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, host_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, path_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, is_upload_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, success_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, http_status_code_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, bytes_expected_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, bytes_actual_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, cellid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, proxied_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, ipv6_local_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, ipv6_remote_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, time_to_connect_ms_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, time_to_send_req_ms_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, time_to_first_byte_ms_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ExternalStorageTransferReport_Notification, time_to_last_byte_ms_),
  0,
  1,
  4,
  5,
  3,
  2,
  8,
  9,
  10,
  6,
  7,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, files_to_upload_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, files_to_delete_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, client_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Request, app_build_id_),
  3,
  0,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Response, batch_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_BeginAppUploadBatch_Response, app_change_number_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Notification, batch_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Notification, batch_eresult_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Request, batch_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Request, batch_eresult_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_CompleteAppUploadBatch_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, can_encrypt_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, is_shared_file_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, deprecated_realm_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Request, upload_batch_id_),
  2,
  3,
  5,
  0,
  4,
  1,
  11,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, url_host_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, url_path_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, use_https_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, http_method_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, request_headers_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, block_offset_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, block_length_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, explicit_body_data_),
  PROTOBUF_FIELD_OFFSET(::ClientCloudFileUploadBlockDetails, may_parallelize_),
  0,
  1,
  4,
  3,
  ~0u,
  6,
  7,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Response, encrypt_file_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientBeginFileUpload_Response, block_requests_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Request, transfer_succeeded_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Request, file_sha_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Request, filename_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientCommitFileUpload_Response, file_committed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Request, realm_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response_HTTPHeaders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response_HTTPHeaders, name_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response_HTTPHeaders, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, is_explicit_delete_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, url_host_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, url_path_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, use_https_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, request_headers_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientFileDownload_Response, encrypted_),
  3,
  4,
  6,
  0,
  5,
  7,
  1,
  2,
  8,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientDeleteFile_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientDeleteFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientDeleteFile_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientDeleteFile_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientDeleteFile_Request, is_explicit_delete_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientDeleteFile_Request, upload_batch_id_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientDeleteFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientConflictResolution_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientConflictResolution_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientConflictResolution_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientConflictResolution_Notification, chose_local_files_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Response_Apps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Response_Apps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Response_Apps, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Response_Apps, totalcount_),
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Response_Apps, totalsize_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_EnumerateUserApps_Response, apps_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Request, synced_change_number_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, file_name_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, raw_file_size_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, persist_state_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, platforms_to_sync_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, path_prefix_index_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppFileInfo, machine_name_index_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, current_change_number_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, files_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, is_only_delta_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, path_prefixes_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, machine_names_),
  PROTOBUF_FIELD_OFFSET(::CCloud_GetAppFileChangelist_Response, app_buildid_hwm_),
  0,
  ~0u,
  2,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionSuspend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionSuspend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionSuspend_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionSuspend_Request, client_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionSuspend_Request, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionSuspend_Request, cloud_sync_completed_),
  2,
  1,
  0,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionSuspend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionResume_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionResume_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionResume_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionResume_Request, client_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppSessionResume_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Request, client_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Request, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Request, ignore_pending_operations_),
  2,
  1,
  0,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppLaunchIntent_Response, pending_remote_operations_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppExitSyncDone_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppExitSyncDone_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppExitSyncDone_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppExitSyncDone_Notification, client_id_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppExitSyncDone_Notification, uploads_completed_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppExitSyncDone_Notification, uploads_required_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Response, existing_files_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Response, existing_bytes_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Response, max_num_files_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientGetAppQuotaUsage_Response, max_num_bytes_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCloud_AppCloudStateChange_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppCloudStateChange_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_AppCloudStateChange_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::CCloud_AppCloudStateChange_Notification, app_change_number_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadRequest_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadRequest_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCloud_ClientLogUploadRequest_Notification, request_id_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CCloud_ClientLogUploadCheck_Notification)},
  { 8, 16, -1, sizeof(::CCloud_ClientLogUploadComplete_Notification)},
  { 18, 25, -1, sizeof(::CCloud_GetUploadServerInfo_Request)},
  { 26, 33, -1, sizeof(::CCloud_GetUploadServerInfo_Response)},
  { 34, 49, -1, sizeof(::CCloud_BeginHTTPUpload_Request)},
  { 58, 66, -1, sizeof(::CCloud_BeginHTTPUpload_Response_HTTPHeaders)},
  { 68, 80, -1, sizeof(::CCloud_BeginHTTPUpload_Response)},
  { 86, 96, -1, sizeof(::CCloud_CommitHTTPUpload_Request)},
  { 100, 107, -1, sizeof(::CCloud_CommitHTTPUpload_Response)},
  { 108, 119, -1, sizeof(::CCloud_BeginUGCUpload_Request)},
  { 124, 132, -1, sizeof(::CCloud_BeginUGCUpload_Response_HTTPHeaders)},
  { 134, 147, -1, sizeof(::CCloud_BeginUGCUpload_Response)},
  { 154, 163, -1, sizeof(::CCloud_CommitUGCUpload_Request)},
  { 166, 173, -1, sizeof(::CCloud_CommitUGCUpload_Response)},
  { 174, 182, -1, sizeof(::CCloud_GetFileDetails_Request)},
  { 184, 200, -1, sizeof(::CCloud_UserFile)},
  { 210, 217, -1, sizeof(::CCloud_GetFileDetails_Response)},
  { 218, 228, -1, sizeof(::CCloud_EnumerateUserFiles_Request)},
  { 232, 240, -1, sizeof(::CCloud_EnumerateUserFiles_Response)},
  { 242, 251, -1, sizeof(::CCloud_Delete_Request)},
  { 254, -1, -1, sizeof(::CCloud_Delete_Response)},
  { 260, -1, -1, sizeof(::CCloud_GetClientEncryptionKey_Request)},
  { 266, 274, -1, sizeof(::CCloud_GetClientEncryptionKey_Response)},
  { 276, 289, -1, sizeof(::CCloud_CDNReport_Notification)},
  { 296, 318, -1, sizeof(::CCloud_ExternalStorageTransferReport_Notification)},
  { 334, 346, -1, sizeof(::CCloud_BeginAppUploadBatch_Request)},
  { 352, 360, -1, sizeof(::CCloud_BeginAppUploadBatch_Response)},
  { 362, 371, -1, sizeof(::CCloud_CompleteAppUploadBatch_Notification)},
  { 374, 383, -1, sizeof(::CCloud_CompleteAppUploadBatch_Request)},
  { 386, -1, -1, sizeof(::CCloud_CompleteAppUploadBatch_Response)},
  { 392, 410, -1, sizeof(::CCloud_ClientBeginFileUpload_Request)},
  { 422, 430, -1, sizeof(::ClientCloudFileUploadBlockDetails_HTTPHeaders)},
  { 432, 447, -1, sizeof(::ClientCloudFileUploadBlockDetails)},
  { 456, 464, -1, sizeof(::CCloud_ClientBeginFileUpload_Response)},
  { 466, 476, -1, sizeof(::CCloud_ClientCommitFileUpload_Request)},
  { 480, 487, -1, sizeof(::CCloud_ClientCommitFileUpload_Response)},
  { 488, 497, -1, sizeof(::CCloud_ClientFileDownload_Request)},
  { 500, 508, -1, sizeof(::CCloud_ClientFileDownload_Response_HTTPHeaders)},
  { 510, 527, -1, sizeof(::CCloud_ClientFileDownload_Response)},
  { 538, 548, -1, sizeof(::CCloud_ClientDeleteFile_Request)},
  { 552, -1, -1, sizeof(::CCloud_ClientDeleteFile_Response)},
  { 558, 566, -1, sizeof(::CCloud_ClientConflictResolution_Notification)},
  { 568, -1, -1, sizeof(::CCloud_EnumerateUserApps_Request)},
  { 574, 583, -1, sizeof(::CCloud_EnumerateUserApps_Response_Apps)},
  { 586, -1, -1, sizeof(::CCloud_EnumerateUserApps_Response)},
  { 593, 601, -1, sizeof(::CCloud_GetAppFileChangelist_Request)},
  { 603, 617, -1, sizeof(::CCloud_AppFileInfo)},
  { 625, 637, -1, sizeof(::CCloud_GetAppFileChangelist_Response)},
  { 643, 653, -1, sizeof(::CCloud_AppSessionSuspend_Request)},
  { 657, -1, -1, sizeof(::CCloud_AppSessionSuspend_Response)},
  { 663, 671, -1, sizeof(::CCloud_AppSessionResume_Request)},
  { 673, -1, -1, sizeof(::CCloud_AppSessionResume_Response)},
  { 679, 689, -1, sizeof(::CCloud_AppLaunchIntent_Request)},
  { 693, -1, -1, sizeof(::CCloud_AppLaunchIntent_Response)},
  { 700, 710, -1, sizeof(::CCloud_AppExitSyncDone_Notification)},
  { 714, 721, -1, sizeof(::CCloud_ClientGetAppQuotaUsage_Request)},
  { 722, 732, -1, sizeof(::CCloud_ClientGetAppQuotaUsage_Response)},
  { 736, 744, -1, sizeof(::CCloud_AppCloudStateChange_Notification)},
  { 746, 753, -1, sizeof(::CCloud_ClientLogUploadRequest_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientLogUploadCheck_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientLogUploadComplete_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetUploadServerInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetUploadServerInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginHTTPUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginHTTPUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CommitHTTPUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CommitHTTPUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginUGCUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginUGCUpload_Response_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginUGCUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CommitUGCUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CommitUGCUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetFileDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_UserFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetFileDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_EnumerateUserFiles_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_EnumerateUserFiles_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_Delete_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_Delete_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetClientEncryptionKey_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetClientEncryptionKey_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CDNReport_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ExternalStorageTransferReport_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginAppUploadBatch_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_BeginAppUploadBatch_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CompleteAppUploadBatch_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CompleteAppUploadBatch_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_CompleteAppUploadBatch_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientBeginFileUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientCloudFileUploadBlockDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientBeginFileUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientCommitFileUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientCommitFileUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientFileDownload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientFileDownload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientDeleteFile_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientDeleteFile_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientConflictResolution_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_EnumerateUserApps_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_EnumerateUserApps_Response_Apps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_EnumerateUserApps_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetAppFileChangelist_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppFileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_GetAppFileChangelist_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppSessionSuspend_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppSessionSuspend_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppSessionResume_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppSessionResume_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppLaunchIntent_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppLaunchIntent_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppExitSyncDone_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientGetAppQuotaUsage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientGetAppQuotaUsage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_AppCloudStateChange_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCloud_ClientLogUploadRequest_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fcloud_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%steammessages_cloud.steamclient.proto\032"
  "\030steammessages_base.proto\032,steammessages"
  "_unified_base.steamclient.proto\032\013enums.p"
  "roto\032\"steammessages_client_objects.proto"
  "\"=\n(CCloud_ClientLogUploadCheck_Notifica"
  "tion\022\021\n\tclient_id\030\001 \001(\004\"T\n+CCloud_Client"
  "LogUploadComplete_Notification\022\021\n\tclient"
  "_id\030\001 \001(\004\022\022\n\nrequest_id\030\002 \001(\004\"d\n\"CCloud_"
  "GetUploadServerInfo_Request\022>\n\005appid\030\001 \001"
  "(\rB/\202\265\030+App ID to which a file will be u"
  "ploaded to.\"9\n#CCloud_GetUploadServerInf"
  "o_Response\022\022\n\nserver_url\030\001 \001(\t\"\215\007\n\036CClou"
  "d_BeginHTTPUpload_Request\022\?\n\005appid\030\001 \001(\r"
  "B0\202\265\030,App ID for which the file is being"
  " uploaded.\0223\n\tfile_size\030\002 \001(\rB \202\265\030\034Origi"
  "nal file size in bytes.\022=\n\010filename\030\003 \001("
  "\tB+\202\265\030\'Name of the file to store in the "
  "cloud.\022V\n\010file_sha\030\004 \001(\tBD\202\265\030@Hex string"
  " (40 digits) representing the SHA1 diges"
  "t of the file.\022\\\n\tis_public\030\005 \001(\010BI\202\265\030ET"
  "rue if the file should be marked public "
  "on the UFS, false otherwise.\022\227\001\n\021platfor"
  "ms_to_sync\030\006 \003(\tB|\202\265\030xArray of string sp"
  "ecifying which platforms to sync; value "
  "values: all, Windows, MacOS, linux, Swit"
  "ch, iPhoneOS, Android.\022r\n\025request_header"
  "s_names\030\007 \003(\tBS\202\265\030ONames for headers you"
  "\'ll want to set on your upload request. "
  "May be left blank.\022\226\001\n\026request_headers_v"
  "alues\030\010 \003(\tBv\202\265\030rValues for headers you\'"
  "ll want to set on your upload request. T"
  "he number of names must equal the number"
  " of values.\022Y\n\017upload_batch_id\030\t \001(\004B@\202\265"
  "\030<ID of this batch returned by prior Beg"
  "inAppUploadBatch call.\"\230\004\n\037CCloud_BeginH"
  "TTPUpload_Response\022/\n\005ugcid\030\001 \001(\006B \202\265\030\034U"
  "GC ID of the uploaded file.\0220\n\ttimestamp"
  "\030\002 \001(\007B\035\202\265\030\031Server timestamp of file.\022X\n"
  "\010url_host\030\003 \001(\tBF\202\265\030BHost name of server"
  " to which file should be uploaded via HT"
  "TP PUT.\022O\n\010url_path\030\004 \001(\tB=\202\265\0309Relative "
  "path on server to which file should be u"
  "ploaded.\022>\n\tuse_https\030\005 \001(\010B+\202\265\030\'If true"
  ", use https, otherwise use http.\022{\n\017requ"
  "est_headers\030\006 \003(\0132,.CCloud_BeginHTTPUplo"
  "ad_Response.HTTPHeadersB4\202\265\0300Name-value "
  "pairs to be sent in HTTP PUT request.\032*\n"
  "\013HTTPHeaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t\"\255\004\n\037CCloud_CommitHTTPUpload_Request\022\244\001"
  "\n\022transfer_succeeded\030\001 \001(\010B\207\001\202\265\030\202\001True i"
  "f the HTTP PUT to the upload URL succeed"
  "ed (URL provided in response to Cloud.Be"
  "ginHTTPUpload), false if a failure occur"
  "red.\022x\n\005appid\030\002 \001(\rBi\202\265\030eApp ID for whic"
  "h the file is being uploaded. Must match"
  " the app ID provided to Cloud.BeginHTTPU"
  "pload.\022\225\001\n\010file_sha\030\003 \001(\tB\202\001\202\265\030~Hex stri"
  "ng (40 digits) representing the SHA1 dig"
  "est of the file. Must match the SHA1 dig"
  "est provided to Cloud.BeginHTTPUpload.\022Q"
  "\n\010filename\030\004 \001(\tB\?\202\265\030;Filename as specif"
  "ied in the Cloud.BeginHTTPUpload request"
  ".\"}\n CCloud_CommitHTTPUpload_Response\022Y\n"
  "\016file_committed\030\001 \001(\010BA\202\265\030=True if the f"
  "ile was successfully committed, false ot"
  "herwise.\"\265\002\n\035CCloud_BeginUGCUpload_Reque"
  "st\022.\n\005appid\030\001 \001(\rB\037\202\265\030\033App ID this UGC b"
  "elongs to.\022*\n\tfile_size\030\002 \001(\rB\027\202\265\030\023File "
  "size in bytes.\022\'\n\010filename\030\003 \001(\tB\025\202\265\030\021Na"
  "me of the file.\022V\n\010file_sha\030\004 \001(\tBD\202\265\030@H"
  "ex string (40 digits) representing the S"
  "HA1 digest of the file.\0227\n\014content_type\030"
  "\005 \001(\tB!\202\265\030\035MIME content type of the file"
  "\"\240\005\n\036CCloud_BeginUGCUpload_Response\022\207\001\n\016"
  "storage_system\030\001 \001(\0162\034.EPublishedFileSto"
  "rageSystem:$k_EPublishedFileStorageSyste"
  "mInvalidB+\202\265\030\'UGC Storage system chosen "
  "for this file\022/\n\005ugcid\030\002 \001(\006B \202\265\030\034UGC ID"
  " of the uploaded file.\0220\n\ttimestamp\030\003 \001("
  "\007B\035\202\265\030\031Server timestamp of file.\022X\n\010url_"
  "host\030\004 \001(\tBF\202\265\030BHost name of server to w"
  "hich file should be uploaded via HTTP PU"
  "T.\022O\n\010url_path\030\005 \001(\tB=\202\265\0309Relative path "
  "on server to which file should be upload"
  "ed.\022>\n\tuse_https\030\006 \001(\010B+\202\265\030\'If true, use"
  " https, otherwise use http.\022z\n\017request_h"
  "eaders\030\007 \003(\0132+.CCloud_BeginUGCUpload_Res"
  "ponse.HTTPHeadersB4\202\265\0300Name-value pairs "
  "to be sent in HTTP PUT request.\032*\n\013HTTPH"
  "eaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\360\002\n\036"
  "CCloud_CommitUGCUpload_Request\022\243\001\n\022trans"
  "fer_succeeded\030\001 \001(\010B\206\001\202\265\030\201\001True if the H"
  "TTP PUT to the upload URL succeeded (URL"
  " provided in response to Cloud.BeginUGCU"
  "pload), false if a failure occurred.\022w\n\005"
  "appid\030\002 \001(\rBh\202\265\030dApp ID for which the fi"
  "le is being uploaded. Must match the app"
  " ID provided to Cloud.BeginUGCUpload.\022/\n"
  "\005ugcid\030\003 \001(\006B \202\265\030\034UGC ID of the uploaded"
  " file.\"|\n\037CCloud_CommitUGCUpload_Respons"
  "e\022Y\n\016file_committed\030\001 \001(\010BA\202\265\030=True if t"
  "he file was successfully committed, fals"
  "e otherwise.\"\214\001\n\035CCloud_GetFileDetails_R"
  "equest\022;\n\005ugcid\030\001 \001(\004B,\202\265\030(ID of the Clo"
  "ud file to get details for.\022.\n\005appid\030\002 \001"
  "(\rB\037\202\265\030\033App ID the file belongs to.\"\216\003\n\017"
  "CCloud_UserFile\022\r\n\005appid\030\001 \001(\r\022\r\n\005ugcid\030"
  "\002 \001(\004\022\020\n\010filename\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001"
  "(\004\022\021\n\tfile_size\030\005 \001(\r\022\013\n\003url\030\006 \001(\t\022\027\n\017st"
  "eamid_creator\030\007 \001(\006\022\r\n\005flags\030\010 \001(\r\022\227\001\n\021p"
  "latforms_to_sync\030\t \003(\tB|\202\265\030xArray of str"
  "ing specifying which platforms to sync; "
  "value values: all, Windows, MacOS, linux"
  ", Switch, iPhoneOS, Android.\022V\n\010file_sha"
  "\030\n \001(\tBD\202\265\030@Hex string (40 digits) repre"
  "senting the SHA1 digest of the file.\"C\n\036"
  "CCloud_GetFileDetails_Response\022!\n\007detail"
  "s\030\001 \001(\0132\020.CCloud_UserFile\"\351\003\n!CCloud_Enu"
  "merateUserFiles_Request\0224\n\005appid\030\001 \001(\rB%"
  "\202\265\030!App ID to enumerate the files of.\022\233\001"
  "\n\020extended_details\030\002 \001(\010B\200\001\202\265\030|(Optional"
  ") Get extended details back on the files"
  " found. Defaults to only returned the ap"
  "p Id and UGC Id of the files found.\022|\n\005c"
  "ount\030\003 \001(\rBm\202\265\030i(Optional) Maximum numbe"
  "r of results to return on this call. Def"
  "aults to a maximum of 500 files returned"
  ".\022r\n\013start_index\030\004 \001(\rB]\202\265\030Y(Optional) S"
  "tarting index to begin enumeration at. D"
  "efaults to the beginning of the list.\"Z\n"
  "\"CCloud_EnumerateUserFiles_Response\022\037\n\005f"
  "iles\030\001 \003(\0132\020.CCloud_UserFile\022\023\n\013total_fi"
  "les\030\002 \001(\r\"\264\001\n\025CCloud_Delete_Request\022\020\n\010f"
  "ilename\030\001 \001(\t\022.\n\005appid\030\002 \001(\rB\037\202\265\030\033App ID"
  " the file belongs to.\022Y\n\017upload_batch_id"
  "\030\003 \001(\004B@\202\265\030<ID of this batch returned by"
  " prior BeginAppUploadBatch call.\"\030\n\026CClo"
  "ud_Delete_Response\"\'\n%CCloud_GetClientEn"
  "cryptionKey_Request\"n\n&CCloud_GetClientE"
  "ncryptionKey_Response\022\'\n\003key\030\001 \001(\014B\032\202\265\030\026"
  "AES-256 encryption key\022\033\n\003crc\030\002 \001(\005B\016\202\265\030"
  "\nCRC of key\"\252\001\n\035CCloud_CDNReport_Notific"
  "ation\022\017\n\007steamid\030\001 \001(\006\022\013\n\003url\030\002 \001(\t\022\017\n\007s"
  "uccess\030\003 \001(\010\022\030\n\020http_status_code\030\004 \001(\r\022\026"
  "\n\016expected_bytes\030\005 \001(\004\022\026\n\016received_bytes"
  "\030\006 \001(\004\022\020\n\010duration\030\007 \001(\r\"\220\003\n1CCloud_Exte"
  "rnalStorageTransferReport_Notification\022\014"
  "\n\004host\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\021\n\tis_upload\030"
  "\003 \001(\010\022\017\n\007success\030\004 \001(\010\022\030\n\020http_status_co"
  "de\030\005 \001(\r\022\026\n\016bytes_expected\030\006 \001(\004\022\024\n\014byte"
  "s_actual\030\007 \001(\004\022\023\n\013duration_ms\030\010 \001(\r\022\016\n\006c"
  "ellid\030\t \001(\r\022\017\n\007proxied\030\n \001(\010\022\022\n\nipv6_loc"
  "al\030\013 \001(\010\022\023\n\013ipv6_remote\030\014 \001(\010\022\032\n\022time_to"
  "_connect_ms\030\r \001(\r\022\033\n\023time_to_send_req_ms"
  "\030\016 \001(\r\022\035\n\025time_to_first_byte_ms\030\017 \001(\r\022\034\n"
  "\024time_to_last_byte_ms\030\020 \001(\r\"\252\003\n\"CCloud_B"
  "eginAppUploadBatch_Request\0220\n\005appid\030\001 \001("
  "\rB!\202\265\030\035App ID for this batch is for.\022D\n\014"
  "machine_name\030\002 \001(\tB.\202\265\030*Client machine n"
  "ame (may be user\'s alias).\022G\n\017files_to_u"
  "pload\030\003 \003(\tB.\202\265\030*Filenames of files to u"
  "pload in this batch\022G\n\017files_to_delete\030\004"
  " \003(\tB.\202\265\030*Filenames of files to delete i"
  "n this batch\022\'\n\tclient_id\030\005 \001(\004B\024\202\265\030\020Cli"
  "ent ID number\022Q\n\014app_build_id\030\006 \001(\004B;\202\265\030"
  "7Current local build of the app which ma"
  "de these changes\"\204\001\n#CCloud_BeginAppUplo"
  "adBatch_Response\022\'\n\010batch_id\030\001 \001(\004B\025\202\265\030\021"
  "ID of this batch.\0224\n\021app_change_number\030\004"
  " \001(\004B\031\202\265\030\025New App Change Number\"\271\001\n*CClo"
  "ud_CompleteAppUploadBatch_Notification\0220"
  "\n\005appid\030\001 \001(\rB!\202\265\030\035App ID for this batch"
  " is for.\022\'\n\010batch_id\030\002 \001(\004B\025\202\265\030\021ID of th"
  "is batch.\0220\n\rbatch_eresult\030\003 \001(\rB\031\202\265\030\025re"
  "sult of this batch.\"\264\001\n%CCloud_CompleteA"
  "ppUploadBatch_Request\0220\n\005appid\030\001 \001(\rB!\202\265"
  "\030\035App ID for this batch is for.\022\'\n\010batch"
  "_id\030\002 \001(\004B\025\202\265\030\021ID of this batch.\0220\n\rbatc"
  "h_eresult\030\003 \001(\rB\031\202\265\030\025result of this batc"
  "h.\"(\n&CCloud_CompleteAppUploadBatch_Resp"
  "onse\"\222\006\n$CCloud_ClientBeginFileUpload_Re"
  "quest\022\?\n\005appid\030\001 \001(\rB0\202\265\030,App ID for whi"
  "ch the file is being uploaded.\022D\n\tfile_s"
  "ize\030\002 \001(\rB1\202\265\030-file size as transmitted "
  "and stored in Cloud.\022N\n\rraw_file_size\030\003 "
  "\001(\rB7\202\265\0303file size before any compressio"
  "n and/or encryption.\022(\n\010file_sha\030\004 \001(\014B\026"
  "\202\265\030\022SHA-1 of raw file.\022*\n\ntime_stamp\030\005 \001"
  "(\004B\026\202\265\030\022Timestamp of file.\022=\n\010filename\030\006"
  " \001(\tB+\202\265\030\'Name of the file to store in t"
  "he cloud.\022%\n\021platforms_to_sync\030\007 \001(\r:\n42"
  "94967295\022F\n\007cell_id\030\t \001(\rB5\202\265\0301Client\'s "
  "cell ID so we can pick storage location."
  "\022Q\n\013can_encrypt\030\n \001(\010B<\202\265\0308if true, clie"
  "nt can encrypt the file before uploading"
  " it\022f\n\016is_shared_file\030\013 \001(\010BN\202\265\030Jif true"
  ", this is going to be UGC or a screensho"
  "t or some other shared file\022$\n\020deprecate"
  "d_realm\030\014 \001(\rB\n\202\265\030\006unused\022.\n\017upload_batc"
  "h_id\030\r \001(\004B\025\202\265\030\021ID of this batch.\"\361\006\n!Cl"
  "ientCloudFileUploadBlockDetails\022X\n\010url_h"
  "ost\030\001 \001(\tBF\202\265\030BHost name of server to wh"
  "ich file should be uploaded via HTTP PUT"
  ".\022O\n\010url_path\030\002 \001(\tB=\202\265\0309Relative path o"
  "n server to which file should be uploade"
  "d.\022>\n\tuse_https\030\003 \001(\010B+\202\265\030\'If true, use "
  "https, otherwise use http.\022;\n\013http_metho"
  "d\030\004 \001(\005B&\202\265\030\"EHTTPMethod to use for this"
  " block.\022}\n\017request_headers\030\005 \003(\0132..Clien"
  "tCloudFileUploadBlockDetails.HTTPHeaders"
  "B4\202\265\0300Name-value pairs to be sent in HTT"
  "P PUT request.\0228\n\014block_offset\030\006 \001(\004B\"\202\265"
  "\030\036offset of file block to upload\022m\n\014bloc"
  "k_length\030\007 \001(\rBW\202\265\030Slength of file block"
  " to upload - if zero, no part of the fil"
  "e is part of this block\022_\n\022explicit_body"
  "_data\030\010 \001(\014BC\202\265\030\?explicit body data to u"
  "se, instead of file data, for this block"
  "\022o\n\017may_parallelize\030\t \001(\010BV\202\265\030Rif true, "
  "this request may be done in parallel wit"
  "h other similarly-marked requests\032*\n\013HTT"
  "PHeaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\355\001"
  "\n%CCloud_ClientBeginFileUpload_Response\022"
  "[\n\014encrypt_file\030\001 \001(\010BE\202\265\030AIf true, the "
  "file should be encrypted by the client b"
  "efore upload\022g\n\016block_requests\030\002 \003(\0132\".C"
  "lientCloudFileUploadBlockDetailsB+\202\265\030\'HT"
  "TP requests to make to perform upload\"\311\003"
  "\n%CCloud_ClientCommitFileUpload_Request\022"
  "a\n\022transfer_succeeded\030\001 \001(\010BE\202\265\030ATrue if"
  " all block uploads succeeded, false if a"
  "ny of them failed.\022x\n\005appid\030\002 \001(\rBi\202\265\030eA"
  "pp ID for which the file is being upload"
  "ed. Must match the app ID provided to Cl"
  "oud.BeginFileUpload.\022p\n\010file_sha\030\003 \001(\014B^"
  "\202\265\030ZSHA1 digest of the raw file. Must ma"
  "tch the SHA1 digest provided to Cloud.Be"
  "ginFileUpload.\022Q\n\010filename\030\004 \001(\tB\?\202\265\030;Fi"
  "lename as specified in the Cloud.BeginFi"
  "leUpload request.\"\203\001\n&CCloud_ClientCommi"
  "tFileUpload_Response\022Y\n\016file_committed\030\001"
  " \001(\010BA\202\265\030=True if the file was successfu"
  "lly committed, false otherwise.\"\240\001\n!CClo"
  "ud_ClientFileDownload_Request\022.\n\005appid\030\001"
  " \001(\rB\037\202\265\030\033App ID the file is part of.\022+\n"
  "\010filename\030\002 \001(\tB\031\202\265\030\025Filename of the fil"
  "e.\022\036\n\005realm\030\003 \001(\rB\017\202\265\030\013Steam Realm\"\376\005\n\"C"
  "Cloud_ClientFileDownload_Response\0222\n\005app"
  "id\030\001 \001(\rB#\202\265\030\037Application the file belon"
  "gs to\022G\n\tfile_size\030\002 \001(\rB4\202\265\0300file size "
  "as transmitted and stored in the Cloud\022G"
  "\n\rraw_file_size\030\003 \001(\rB0\202\265\030,file size whe"
  "n decompressed and/or decrypted\022!\n\010sha_f"
  "ile\030\004 \001(\014B\017\202\265\030\013SHA of file\022)\n\ntime_stamp"
  "\030\005 \001(\004B\025\202\265\030\021Timestamp of file\022J\n\022is_expl"
  "icit_delete\030\006 \001(\010B.\202\265\030*True if this is a"
  "n explicitly deleted file\022/\n\010url_host\030\007 "
  "\001(\tB\035\202\265\030\031Host to GET the file from\022O\n\010ur"
  "l_path\030\010 \001(\tB=\202\265\0309Path on that host to u"
  "se, including URL parameters if any\0227\n\tu"
  "se_https\030\t \001(\010B$\202\265\030 If set, use HTTPS, e"
  "lse use HTTP\022~\n\017request_headers\030\n \003(\0132/."
  "CCloud_ClientFileDownload_Response.HTTPH"
  "eadersB4\202\265\0300Name-value pairs to be sent "
  "in HTTP GET request.\022\021\n\tencrypted\030\013 \001(\010\032"
  "*\n\013HTTPHeaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t\"\223\002\n\037CCloud_ClientDeleteFile_Request\022"
  ">\n\005appid\030\001 \001(\rB/\202\265\030+App ID for which the"
  " file is being deleted.\022\'\n\010filename\030\002 \001("
  "\tB\025\202\265\030\021Filename of file.\022W\n\022is_explicit_"
  "delete\030\003 \001(\010B;\202\265\0307If true, this is a \'de"
  "lete\'; if false, it is a \'forget\'\022.\n\017upl"
  "oad_batch_id\030\004 \001(\004B\025\202\265\030\021ID of this batch"
  ".\"\"\n CCloud_ClientDeleteFile_Response\"\340\001"
  "\n,CCloud_ClientConflictResolution_Notifi"
  "cation\022>\n\005appid\030\001 \001(\rB/\202\265\030+App ID for wh"
  "ich the conflict was resolved.\022p\n\021chose_"
  "local_files\030\002 \001(\010BU\202\265\030QDid the user choo"
  "se to keep the files local to the machin"
  "e they are on right now\?\"\"\n CCloud_Enume"
  "rateUserApps_Request\"\230\001\n!CCloud_Enumerat"
  "eUserApps_Response\0225\n\004apps\030\001 \003(\0132\'.CClou"
  "d_EnumerateUserApps_Response.Apps\032<\n\004App"
  "s\022\r\n\005appid\030\001 \001(\r\022\022\n\ntotalcount\030\002 \001(\005\022\021\n\t"
  "totalsize\030\003 \001(\003\"\245\001\n#CCloud_GetAppFileCha"
  "ngelist_Request\022\031\n\005appid\030\001 \001(\rB\n\202\265\030\006App "
  "ID\022c\n\024synced_change_number\030\002 \001(\004BE\202\265\030ACh"
  "ange Number to which local machine was l"
  "ast successfully synced\"\233\004\n\022CCloud_AppFi"
  "leInfo\022+\n\tfile_name\030\001 \001(\tB\030\202\265\030\024unqualifi"
  "ed filename\022!\n\010sha_file\030\002 \001(\014B\017\202\265\030\013SHA o"
  "f file\022=\n\ntime_stamp\030\003 \001(\004B)\202\265\030%server t"
  "imestamp of last modification\022+\n\rraw_fil"
  "e_size\030\004 \001(\rB\024\202\265\030\020size of raw file\022~\n\rpe"
  "rsist_state\030\005 \001(\0162\032.ECloudStoragePersist"
  "State:$k_ECloudStoragePersistStatePersis"
  "tedB%\202\265\030!current persist state of the fi"
  "le\022:\n\021platforms_to_sync\030\006 \001(\rB\037\202\265\030\033ERemo"
  "teStoragePlatform bits\022G\n\021path_prefix_in"
  "dex\030\007 \001(\rB,\202\265\030(index into string table o"
  "f path prefixes\022D\n\022machine_name_index\030\010 "
  "\001(\rB(\202\265\030$what machine last modified this"
  " file\"\241\004\n$CCloud_GetAppFileChangelist_Re"
  "sponse\022B\n\025current_change_number\030\001 \001(\004B#\202"
  "\265\030\037Change Number current on server\022\211\001\n\005f"
  "iles\030\002 \003(\0132\023.CCloud_AppFileInfoBe\202\265\030aLis"
  "t of files; may be the full list of exta"
  "nt/deleted files, or just a delta from t"
  "he client list\022j\n\ris_only_delta\030\003 \001(\010BS\202"
  "\265\030OIf true, \'files\' omits any files that"
  " have not changed since client\'s change "
  "ID\0228\n\rpath_prefixes\030\004 \003(\tB!\202\265\030\035string ta"
  "ble of path prefixes\0228\n\rmachine_names\030\005 "
  "\003(\tB!\202\265\030\035string table of machine names\022I"
  "\n\017app_buildid_hwm\030\006 \001(\004B0\202\265\030,highest app"
  " build ID which has uploaded data\"x\n CCl"
  "oud_AppSessionSuspend_Request\022\r\n\005appid\030\001"
  " \001(\r\022\021\n\tclient_id\030\002 \001(\004\022\024\n\014machine_name\030"
  "\003 \001(\t\022\034\n\024cloud_sync_completed\030\004 \001(\010\"#\n!C"
  "Cloud_AppSessionSuspend_Response\"C\n\037CClo"
  "ud_AppSessionResume_Request\022\r\n\005appid\030\001 \001"
  "(\r\022\021\n\tclient_id\030\002 \001(\004\"\"\n CCloud_AppSessi"
  "onResume_Response\"{\n\036CCloud_AppLaunchInt"
  "ent_Request\022\r\n\005appid\030\001 \001(\r\022\021\n\tclient_id\030"
  "\002 \001(\004\022\024\n\014machine_name\030\003 \001(\t\022!\n\031ignore_pe"
  "nding_operations\030\004 \001(\010\"\232\001\n\037CCloud_AppLau"
  "nchIntent_Response\022w\n\031pending_remote_ope"
  "rations\030\001 \003(\0132\036.CCloud_PendingRemoteOper"
  "ationB4\202\265\0300pending remote operations you"
  " should be aware of\"|\n#CCloud_AppExitSyn"
  "cDone_Notification\022\r\n\005appid\030\001 \001(\r\022\021\n\tcli"
  "ent_id\030\002 \001(\004\022\031\n\021uploads_completed\030\003 \001(\010\022"
  "\030\n\020uploads_required\030\004 \001(\010\"6\n%CCloud_Clie"
  "ntGetAppQuotaUsage_Request\022\r\n\005appid\030\001 \001("
  "\r\"\206\001\n&CCloud_ClientGetAppQuotaUsage_Resp"
  "onse\022\026\n\016existing_files\030\001 \001(\r\022\026\n\016existing"
  "_bytes\030\002 \001(\004\022\025\n\rmax_num_files\030\003 \001(\r\022\025\n\rm"
  "ax_num_bytes\030\004 \001(\004\"\235\001\n\'CCloud_AppCloudSt"
  "ateChange_Notification\022<\n\005appid\030\001 \001(\rB-\202"
  "\265\030)App which has had a change in cloud s"
  "tate\0224\n\021app_change_number\030\002 \001(\004B\031\202\265\030\025New"
  " App Change Number\"@\n*CCloud_ClientLogUp"
  "loadRequest_Notification\022\022\n\nrequest_id\030\001"
  " \001(\0042\215#\n\005Cloud\022\204\001\n\024ClientLogUploadCheck\022"
  ").CCloud_ClientLogUploadCheck_Notificati"
  "on\032\013.NoResponse\"4\202\265\0300Client checking for"
  " pending log upload requests.\022\217\001\n\027Client"
  "LogUploadComplete\022,.CCloud_ClientLogUplo"
  "adComplete_Notification\032\013.NoResponse\"9\202\265"
  "\0305Client is flagging a log upload reques"
  "t as completed.\022\234\001\n\023GetUploadServerInfo\022"
  "#.CCloud_GetUploadServerInfo_Request\032$.C"
  "Cloud_GetUploadServerInfo_Response\":\202\265\0306"
  "Returns the URL of the proper cloud serv"
  "er for a user.\022\250\002\n\017BeginHTTPUpload\022\037.CCl"
  "oud_BeginHTTPUpload_Request\032 .CCloud_Beg"
  "inHTTPUpload_Response\"\321\001\202\265\030\314\001Begins the "
  "process of uploading a file to Steam ext"
  "ernal storage services. File should be u"
  "ploaded via HTTP PUT to the returned URL"
  ", after which the upload must be finaliz"
  "ed by a call to CommitHTTPUpload.\022\255\001\n\020Co"
  "mmitHTTPUpload\022 .CCloud_CommitHTTPUpload"
  "_Request\032!.CCloud_CommitHTTPUpload_Respo"
  "nse\"T\202\265\030PCommits a file upload initiated"
  " by BeginHTTPUpload and transferred via "
  "HTTP PUT.\022\245\002\n\016BeginUGCUpload\022\036.CCloud_Be"
  "ginUGCUpload_Request\032\037.CCloud_BeginUGCUp"
  "load_Response\"\321\001\202\265\030\314\001Begins the process "
  "of uploading a file to Steam external st"
  "orage services. File should be uploaded "
  "via HTTP PUT to the returned URL, after "
  "which the upload must be finalized by a "
  "call to CommitHTTPUpload.\022\251\001\n\017CommitUGCU"
  "pload\022\037.CCloud_CommitUGCUpload_Request\032 "
  ".CCloud_CommitUGCUpload_Response\"S\202\265\030OCo"
  "mmits a file upload initiated by BeginUG"
  "CUpload and transferred via HTTP PUT.\022w\n"
  "\016GetFileDetails\022\036.CCloud_GetFileDetails_"
  "Request\032\037.CCloud_GetFileDetails_Response"
  "\"$\202\265\030 Returns details on a Cloud file.\022\272"
  "\001\n\022EnumerateUserFiles\022\".CCloud_Enumerate"
  "UserFiles_Request\032#.CCloud_EnumerateUser"
  "Files_Response\"[\202\265\030WEnumerates Cloud fil"
  "es for a user of a given app ID. Returns"
  " up to 500 files at a time.\022d\n\006Delete\022\026."
  "CCloud_Delete_Request\032\027.CCloud_Delete_Re"
  "sponse\")\202\265\030%Deletes a file from the user"
  "\'s cloud.\022\231\001\n\026GetClientEncryptionKey\022&.C"
  "Cloud_GetClientEncryptionKey_Request\032\'.C"
  "Cloud_GetClientEncryptionKey_Response\".\202"
  "\265\030*Gets the user\'s Cloud file encryption"
  " key.\022c\n\tCDNReport\022\036.CCloud_CDNReport_No"
  "tification\032\013.NoResponse\")\202\265\030%Reports the"
  " result of a CDN transfer.\022\237\001\n\035ExternalS"
  "torageTransferReport\0222.CCloud_ExternalSt"
  "orageTransferReport_Notification\032\013.NoRes"
  "ponse\"=\202\265\0309Reports the result of an exte"
  "rnal Cloud storage transfer.\022\253\001\n\023BeginAp"
  "pUploadBatch\022#.CCloud_BeginAppUploadBatc"
  "h_Request\032$.CCloud_BeginAppUploadBatch_R"
  "esponse\"I\202\265\030EIndicate a batch of files t"
  "hat will be uploaded / deleted for an ap"
  "p.\022\243\001\n\026CompleteAppUploadBatch\022+.CCloud_C"
  "ompleteAppUploadBatch_Notification\032\013.NoR"
  "esponse\"O\202\265\030KIndicate that the batch is "
  "complete or being stopped for some other"
  " reason.\022\302\001\n\036CompleteAppUploadBatchBlock"
  "ing\022&.CCloud_CompleteAppUploadBatch_Requ"
  "est\032\'.CCloud_CompleteAppUploadBatch_Resp"
  "onse\"O\202\265\030KIndicate that the batch is com"
  "plete or being stopped for some other re"
  "ason.\022\210\001\n\025ClientBeginFileUpload\022%.CCloud"
  "_ClientBeginFileUpload_Request\032&.CCloud_"
  "ClientBeginFileUpload_Response\" \202\265\030\034Init"
  "iate an upload to Cloud.\022\232\001\n\026ClientCommi"
  "tFileUpload\022&.CCloud_ClientCommitFileUpl"
  "oad_Request\032\'.CCloud_ClientCommitFileUpl"
  "oad_Response\"/\202\265\030+Commit the file upload"
  " or indicate failure.\022|\n\022ClientFileDownl"
  "oad\022\".CCloud_ClientFileDownload_Request\032"
  "#.CCloud_ClientFileDownload_Response\"\035\202\265"
  "\030\031Initiate a file download.\022u\n\020ClientDel"
  "eteFile\022 .CCloud_ClientDeleteFile_Reques"
  "t\032!.CCloud_ClientDeleteFile_Response\"\034\202\265"
  "\030\030Delete or forget a file.\022\216\001\n\030ClientCon"
  "flictResolution\022-.CCloud_ClientConflictR"
  "esolution_Notification\032\013.NoResponse\"6\202\265\030"
  "2User has picked a resolution for a Clou"
  "d conflict.\022\217\001\n\021EnumerateUserApps\022!.CClo"
  "ud_EnumerateUserApps_Request\032\".CCloud_En"
  "umerateUserApps_Response\"3\202\265\030/Enumerates"
  " apps stroing cloud files for a user.\022\264\001"
  "\n\024GetAppFileChangelist\022$.CCloud_GetAppFi"
  "leChangelist_Request\032%.CCloud_GetAppFile"
  "Changelist_Response\"O\202\265\030KGet a list of C"
  "loud file changes for an app given a sta"
  "rting Change Number.\022\201\001\n\021SuspendAppSessi"
  "on\022!.CCloud_AppSessionSuspend_Request\032\"."
  "CCloud_AppSessionSuspend_Response\"%\202\265\030!A"
  "n app session is being suspended\022|\n\020Resu"
  "meAppSession\022 .CCloud_AppSessionResume_R"
  "equest\032!.CCloud_AppSessionResume_Respons"
  "e\"#\202\265\030\037An app session is being resumed\022\177"
  "\n\025SignalAppLaunchIntent\022\037.CCloud_AppLaun"
  "chIntent_Request\032 .CCloud_AppLaunchInten"
  "t_Response\"#\202\265\030\037Client intends to launch"
  " an app\022\202\001\n\025SignalAppExitSyncDone\022$.CClo"
  "ud_AppExitSyncDone_Notification\032\013.NoResp"
  "onse\"6\202\265\0302Client is done trying to sync "
  "after a game session\022\232\001\n\026ClientGetAppQuo"
  "taUsage\022&.CCloud_ClientGetAppQuotaUsage_"
  "Request\032\'.CCloud_ClientGetAppQuotaUsage_"
  "Response\"/\202\265\030+Client is requesting quota"
  " usage for an app\032)\202\265\030%A service for Ste"
  "am Cloud operations.2\330\002\n\013CloudClient\022}\n\024"
  "NotifyAppStateChange\022(.CCloud_AppCloudSt"
  "ateChange_Notification\032\013.NoResponse\".\202\265\030"
  "*Cloud state for the given app has chang"
  "ed.\022\224\001\n\026ClientLogUploadRequest\022+.CCloud_"
  "ClientLogUploadRequest_Notification\032\013.No"
  "Response\"@\202\265\030<Server is requesting log f"
  "ile uploads from the given client.\0323\202\265\030+"
  "Client notifications for Steam cloud eve"
  "nts\300\265\030\002B\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_deps[4] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5fclient_5fobjects_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fcloud_2esteamclient_2eproto = {
  false, false, 18572, descriptor_table_protodef_steammessages_5fcloud_2esteamclient_2eproto, "steammessages_cloud.steamclient.proto", 
  &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once, descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_deps, 4, 59,
  schemas, file_default_instances, TableStruct_steammessages_5fcloud_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fcloud_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fcloud_2esteamclient_2eproto(&descriptor_table_steammessages_5fcloud_2esteamclient_2eproto);

// ===================================================================

class CCloud_ClientLogUploadCheck_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientLogUploadCheck_Notification>()._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_ClientLogUploadCheck_Notification::CCloud_ClientLogUploadCheck_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientLogUploadCheck_Notification)
}
CCloud_ClientLogUploadCheck_Notification::CCloud_ClientLogUploadCheck_Notification(const CCloud_ClientLogUploadCheck_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientLogUploadCheck_Notification)
}

inline void CCloud_ClientLogUploadCheck_Notification::SharedCtor() {
client_id_ = uint64_t{0u};
}

CCloud_ClientLogUploadCheck_Notification::~CCloud_ClientLogUploadCheck_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_ClientLogUploadCheck_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientLogUploadCheck_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientLogUploadCheck_Notification::ArenaDtor(void* object) {
  CCloud_ClientLogUploadCheck_Notification* _this = reinterpret_cast< CCloud_ClientLogUploadCheck_Notification* >(object);
  (void)_this;
}
void CCloud_ClientLogUploadCheck_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientLogUploadCheck_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientLogUploadCheck_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientLogUploadCheck_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientLogUploadCheck_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientLogUploadCheck_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientLogUploadCheck_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientLogUploadCheck_Notification)
  return target;
}

size_t CCloud_ClientLogUploadCheck_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientLogUploadCheck_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 client_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientLogUploadCheck_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientLogUploadCheck_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientLogUploadCheck_Notification::GetClassData() const { return &_class_data_; }

void CCloud_ClientLogUploadCheck_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientLogUploadCheck_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_ClientLogUploadCheck_Notification &>(from));
}


void CCloud_ClientLogUploadCheck_Notification::MergeFrom(const CCloud_ClientLogUploadCheck_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientLogUploadCheck_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_id()) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientLogUploadCheck_Notification::CopyFrom(const CCloud_ClientLogUploadCheck_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientLogUploadCheck_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientLogUploadCheck_Notification::IsInitialized() const {
  return true;
}

void CCloud_ClientLogUploadCheck_Notification::InternalSwap(CCloud_ClientLogUploadCheck_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientLogUploadCheck_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[0]);
}

// ===================================================================

class CCloud_ClientLogUploadComplete_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientLogUploadComplete_Notification>()._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_ClientLogUploadComplete_Notification::CCloud_ClientLogUploadComplete_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientLogUploadComplete_Notification)
}
CCloud_ClientLogUploadComplete_Notification::CCloud_ClientLogUploadComplete_Notification(const CCloud_ClientLogUploadComplete_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(request_id_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientLogUploadComplete_Notification)
}

inline void CCloud_ClientLogUploadComplete_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(request_id_));
}

CCloud_ClientLogUploadComplete_Notification::~CCloud_ClientLogUploadComplete_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_ClientLogUploadComplete_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientLogUploadComplete_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientLogUploadComplete_Notification::ArenaDtor(void* object) {
  CCloud_ClientLogUploadComplete_Notification* _this = reinterpret_cast< CCloud_ClientLogUploadComplete_Notification* >(object);
  (void)_this;
}
void CCloud_ClientLogUploadComplete_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientLogUploadComplete_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientLogUploadComplete_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientLogUploadComplete_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_id_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientLogUploadComplete_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientLogUploadComplete_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientLogUploadComplete_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  // optional uint64 request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientLogUploadComplete_Notification)
  return target;
}

size_t CCloud_ClientLogUploadComplete_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientLogUploadComplete_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 client_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
    }

    // optional uint64 request_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_request_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientLogUploadComplete_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientLogUploadComplete_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientLogUploadComplete_Notification::GetClassData() const { return &_class_data_; }

void CCloud_ClientLogUploadComplete_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientLogUploadComplete_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_ClientLogUploadComplete_Notification &>(from));
}


void CCloud_ClientLogUploadComplete_Notification::MergeFrom(const CCloud_ClientLogUploadComplete_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientLogUploadComplete_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientLogUploadComplete_Notification::CopyFrom(const CCloud_ClientLogUploadComplete_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientLogUploadComplete_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientLogUploadComplete_Notification::IsInitialized() const {
  return true;
}

void CCloud_ClientLogUploadComplete_Notification::InternalSwap(CCloud_ClientLogUploadComplete_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientLogUploadComplete_Notification, request_id_)
      + sizeof(CCloud_ClientLogUploadComplete_Notification::request_id_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientLogUploadComplete_Notification, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientLogUploadComplete_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[1]);
}

// ===================================================================

class CCloud_GetUploadServerInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetUploadServerInfo_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_GetUploadServerInfo_Request)
}
CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCloud_GetUploadServerInfo_Request)
}

inline void CCloud_GetUploadServerInfo_Request::SharedCtor() {
appid_ = 0u;
}

CCloud_GetUploadServerInfo_Request::~CCloud_GetUploadServerInfo_Request() {
  // @@protoc_insertion_point(destructor:CCloud_GetUploadServerInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_GetUploadServerInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_GetUploadServerInfo_Request::ArenaDtor(void* object) {
  CCloud_GetUploadServerInfo_Request* _this = reinterpret_cast< CCloud_GetUploadServerInfo_Request* >(object);
  (void)_this;
}
void CCloud_GetUploadServerInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_GetUploadServerInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_GetUploadServerInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetUploadServerInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_GetUploadServerInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_GetUploadServerInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetUploadServerInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetUploadServerInfo_Request)
  return target;
}

size_t CCloud_GetUploadServerInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetUploadServerInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetUploadServerInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_GetUploadServerInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetUploadServerInfo_Request::GetClassData() const { return &_class_data_; }

void CCloud_GetUploadServerInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_GetUploadServerInfo_Request *>(to)->MergeFrom(
      static_cast<const CCloud_GetUploadServerInfo_Request &>(from));
}


void CCloud_GetUploadServerInfo_Request::MergeFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Request::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Request::InternalSwap(CCloud_GetUploadServerInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetUploadServerInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[2]);
}

// ===================================================================

class CCloud_GetUploadServerInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetUploadServerInfo_Response>()._has_bits_);
  static void set_has_server_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_GetUploadServerInfo_Response)
}
CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_url()) {
    server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCloud_GetUploadServerInfo_Response)
}

inline void CCloud_GetUploadServerInfo_Response::SharedCtor() {
server_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCloud_GetUploadServerInfo_Response::~CCloud_GetUploadServerInfo_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetUploadServerInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_GetUploadServerInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetUploadServerInfo_Response::ArenaDtor(void* object) {
  CCloud_GetUploadServerInfo_Response* _this = reinterpret_cast< CCloud_GetUploadServerInfo_Response* >(object);
  (void)_this;
}
void CCloud_GetUploadServerInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_GetUploadServerInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_GetUploadServerInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetUploadServerInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_GetUploadServerInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string server_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_GetUploadServerInfo_Response.server_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_GetUploadServerInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetUploadServerInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_url().data(), static_cast<int>(this->_internal_server_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_GetUploadServerInfo_Response.server_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetUploadServerInfo_Response)
  return target;
}

size_t CCloud_GetUploadServerInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetUploadServerInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string server_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetUploadServerInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_GetUploadServerInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetUploadServerInfo_Response::GetClassData() const { return &_class_data_; }

void CCloud_GetUploadServerInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_GetUploadServerInfo_Response *>(to)->MergeFrom(
      static_cast<const CCloud_GetUploadServerInfo_Response &>(from));
}


void CCloud_GetUploadServerInfo_Response::MergeFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_url()) {
    _internal_set_server_url(from._internal_server_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Response::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Response::InternalSwap(CCloud_GetUploadServerInfo_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_url_, lhs_arena,
      &other->server_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetUploadServerInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[3]);
}

// ===================================================================

class CCloud_BeginHTTPUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginHTTPUpload_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_public(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_upload_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCloud_BeginHTTPUpload_Request::CCloud_BeginHTTPUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  platforms_to_sync_(arena),
  request_headers_names_(arena),
  request_headers_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginHTTPUpload_Request)
}
CCloud_BeginHTTPUpload_Request::CCloud_BeginHTTPUpload_Request(const CCloud_BeginHTTPUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      platforms_to_sync_(from.platforms_to_sync_),
      request_headers_names_(from.request_headers_names_),
      request_headers_values_(from.request_headers_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_sha()) {
    file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_sha(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_public_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_public_));
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginHTTPUpload_Request)
}

inline void CCloud_BeginHTTPUpload_Request::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_public_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(is_public_));
}

CCloud_BeginHTTPUpload_Request::~CCloud_BeginHTTPUpload_Request() {
  // @@protoc_insertion_point(destructor:CCloud_BeginHTTPUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginHTTPUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Request::ArenaDtor(void* object) {
  CCloud_BeginHTTPUpload_Request* _this = reinterpret_cast< CCloud_BeginHTTPUpload_Request* >(object);
  (void)_this;
}
void CCloud_BeginHTTPUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginHTTPUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginHTTPUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginHTTPUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  platforms_to_sync_.Clear();
  request_headers_names_.Clear();
  request_headers_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_sha_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_public_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_public_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginHTTPUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 2 [(.description) = "Original file size in bytes."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 3 [(.description) = "Name of the file to store in the cloud."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Request.file_sha");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_public = 5 [(.description) = "True if the file should be marked public on the UFS, false otherwise."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_public(&has_bits);
          is_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string platforms_to_sync = 6 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_platforms_to_sync();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Request.platforms_to_sync");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string request_headers_names = 7 [(.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_request_headers_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Request.request_headers_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string request_headers_values = 8 [(.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_request_headers_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Request.request_headers_values");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upload_batch_id = 9 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_upload_batch_id(&has_bits);
          upload_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginHTTPUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginHTTPUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 file_size = 2 [(.description) = "Original file size in bytes."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size(), target);
  }

  // optional string filename = 3 [(.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Request.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_sha().data(), static_cast<int>(this->_internal_file_sha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Request.file_sha");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_sha(), target);
  }

  // optional bool is_public = 5 [(.description) = "True if the file should be marked public on the UFS, false otherwise."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_public(), target);
  }

  // repeated string platforms_to_sync = 6 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
  for (int i = 0, n = this->_internal_platforms_to_sync_size(); i < n; i++) {
    const auto& s = this->_internal_platforms_to_sync(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Request.platforms_to_sync");
    target = stream->WriteString(6, s, target);
  }

  // repeated string request_headers_names = 7 [(.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  for (int i = 0, n = this->_internal_request_headers_names_size(); i < n; i++) {
    const auto& s = this->_internal_request_headers_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Request.request_headers_names");
    target = stream->WriteString(7, s, target);
  }

  // repeated string request_headers_values = 8 [(.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  for (int i = 0, n = this->_internal_request_headers_values_size(); i < n; i++) {
    const auto& s = this->_internal_request_headers_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Request.request_headers_values");
    target = stream->WriteString(8, s, target);
  }

  // optional uint64 upload_batch_id = 9 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_upload_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginHTTPUpload_Request)
  return target;
}

size_t CCloud_BeginHTTPUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginHTTPUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string platforms_to_sync = 6 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(platforms_to_sync_.size());
  for (int i = 0, n = platforms_to_sync_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      platforms_to_sync_.Get(i));
  }

  // repeated string request_headers_names = 7 [(.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(request_headers_names_.size());
  for (int i = 0, n = request_headers_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      request_headers_names_.Get(i));
  }

  // repeated string request_headers_values = 8 [(.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(request_headers_values_.size());
  for (int i = 0, n = request_headers_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      request_headers_values_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string filename = 3 [(.description) = "Name of the file to store in the cloud."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_sha());
    }

    // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 file_size = 2 [(.description) = "Original file size in bytes."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional uint64 upload_batch_id = 9 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_batch_id());
    }

    // optional bool is_public = 5 [(.description) = "True if the file should be marked public on the UFS, false otherwise."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginHTTPUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginHTTPUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginHTTPUpload_Request::GetClassData() const { return &_class_data_; }

void CCloud_BeginHTTPUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginHTTPUpload_Request *>(to)->MergeFrom(
      static_cast<const CCloud_BeginHTTPUpload_Request &>(from));
}


void CCloud_BeginHTTPUpload_Request::MergeFrom(const CCloud_BeginHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  platforms_to_sync_.MergeFrom(from.platforms_to_sync_);
  request_headers_names_.MergeFrom(from.request_headers_names_);
  request_headers_values_.MergeFrom(from.request_headers_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_sha(from._internal_file_sha());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_batch_id_ = from.upload_batch_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_public_ = from.is_public_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginHTTPUpload_Request::CopyFrom(const CCloud_BeginHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Request::InternalSwap(CCloud_BeginHTTPUpload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platforms_to_sync_.InternalSwap(&other->platforms_to_sync_);
  request_headers_names_.InternalSwap(&other->request_headers_names_);
  request_headers_values_.InternalSwap(&other->request_headers_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_sha_, lhs_arena,
      &other->file_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, is_public_)
      + sizeof(CCloud_BeginHTTPUpload_Request::is_public_)
      - PROTOBUF_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginHTTPUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[4]);
}

// ===================================================================

class CCloud_BeginHTTPUpload_Response_HTTPHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginHTTPUpload_Response_HTTPHeaders>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_BeginHTTPUpload_Response_HTTPHeaders::CCloud_BeginHTTPUpload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}
CCloud_BeginHTTPUpload_Response_HTTPHeaders::CCloud_BeginHTTPUpload_Response_HTTPHeaders(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}

inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCloud_BeginHTTPUpload_Response_HTTPHeaders::~CCloud_BeginHTTPUpload_Response_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::ArenaDtor(void* object) {
  CCloud_BeginHTTPUpload_Response_HTTPHeaders* _this = reinterpret_cast< CCloud_BeginHTTPUpload_Response_HTTPHeaders* >(object);
  (void)_this;
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginHTTPUpload_Response_HTTPHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginHTTPUpload_Response_HTTPHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  return target;
}

size_t CCloud_BeginHTTPUpload_Response_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginHTTPUpload_Response_HTTPHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginHTTPUpload_Response_HTTPHeaders::GetClassData() const { return &_class_data_; }

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginHTTPUpload_Response_HTTPHeaders *>(to)->MergeFrom(
      static_cast<const CCloud_BeginHTTPUpload_Response_HTTPHeaders &>(from));
}


void CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergeFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::CopyFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::InternalSwap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginHTTPUpload_Response_HTTPHeaders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[5]);
}

// ===================================================================

class CCloud_BeginHTTPUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginHTTPUpload_Response>()._has_bits_);
  static void set_has_ugcid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCloud_BeginHTTPUpload_Response::CCloud_BeginHTTPUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  request_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginHTTPUpload_Response)
}
CCloud_BeginHTTPUpload_Response::CCloud_BeginHTTPUpload_Response(const CCloud_BeginHTTPUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_host()) {
    url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_host(), 
      GetArenaForAllocation());
  }
  url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_path()) {
    url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginHTTPUpload_Response)
}

inline void CCloud_BeginHTTPUpload_Response::SharedCtor() {
url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ugcid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
}

CCloud_BeginHTTPUpload_Response::~CCloud_BeginHTTPUpload_Response() {
  // @@protoc_insertion_point(destructor:CCloud_BeginHTTPUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginHTTPUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Response::ArenaDtor(void* object) {
  CCloud_BeginHTTPUpload_Response* _this = reinterpret_cast< CCloud_BeginHTTPUpload_Response* >(object);
  (void)_this;
}
void CCloud_BeginHTTPUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginHTTPUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginHTTPUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginHTTPUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_https_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginHTTPUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 ugcid = 1 [(.description) = "UGC ID of the uploaded file."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_ugcid(&has_bits);
          ugcid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 timestamp = 2 [(.description) = "Server timestamp of file."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string url_host = 3 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Response.url_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_path = 4 [(.description) = "Relative path on server to which file should be uploaded."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginHTTPUpload_Response.url_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_https = 5 [(.description) = "If true, use https, otherwise use http."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginHTTPUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginHTTPUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ugcid = 1 [(.description) = "UGC ID of the uploaded file."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_ugcid(), target);
  }

  // optional fixed32 timestamp = 2 [(.description) = "Server timestamp of file."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional string url_host = 3 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_host().data(), static_cast<int>(this->_internal_url_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Response.url_host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url_host(), target);
  }

  // optional string url_path = 4 [(.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_path().data(), static_cast<int>(this->_internal_url_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginHTTPUpload_Response.url_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url_path(), target);
  }

  // optional bool use_https = 5 [(.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_https(), target);
  }

  // repeated .CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_request_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginHTTPUpload_Response)
  return target;
}

size_t CCloud_BeginHTTPUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginHTTPUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string url_host = 3 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_host());
    }

    // optional string url_path = 4 [(.description) = "Relative path on server to which file should be uploaded."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_path());
    }

    // optional fixed64 ugcid = 1 [(.description) = "UGC ID of the uploaded file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 timestamp = 2 [(.description) = "Server timestamp of file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool use_https = 5 [(.description) = "If true, use https, otherwise use http."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginHTTPUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginHTTPUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginHTTPUpload_Response::GetClassData() const { return &_class_data_; }

void CCloud_BeginHTTPUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginHTTPUpload_Response *>(to)->MergeFrom(
      static_cast<const CCloud_BeginHTTPUpload_Response &>(from));
}


void CCloud_BeginHTTPUpload_Response::MergeFrom(const CCloud_BeginHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_host(from._internal_url_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_path(from._internal_url_path());
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_https_ = from.use_https_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginHTTPUpload_Response::CopyFrom(const CCloud_BeginHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Response::InternalSwap(CCloud_BeginHTTPUpload_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_headers_.InternalSwap(&other->request_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_host_, lhs_arena,
      &other->url_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_path_, lhs_arena,
      &other->url_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, use_https_)
      + sizeof(CCloud_BeginHTTPUpload_Response::use_https_)
      - PROTOBUF_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, ugcid_)>(
          reinterpret_cast<char*>(&ugcid_),
          reinterpret_cast<char*>(&other->ugcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginHTTPUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[6]);
}

// ===================================================================

class CCloud_CommitHTTPUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_CommitHTTPUpload_Request>()._has_bits_);
  static void set_has_transfer_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_CommitHTTPUpload_Request::CCloud_CommitHTTPUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_CommitHTTPUpload_Request)
}
CCloud_CommitHTTPUpload_Request::CCloud_CommitHTTPUpload_Request(const CCloud_CommitHTTPUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_sha()) {
    file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_sha(), 
      GetArenaForAllocation());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&transfer_succeeded_, &from.transfer_succeeded_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_CommitHTTPUpload_Request)
}

inline void CCloud_CommitHTTPUpload_Request::SharedCtor() {
file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transfer_succeeded_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
}

CCloud_CommitHTTPUpload_Request::~CCloud_CommitHTTPUpload_Request() {
  // @@protoc_insertion_point(destructor:CCloud_CommitHTTPUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_CommitHTTPUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_CommitHTTPUpload_Request::ArenaDtor(void* object) {
  CCloud_CommitHTTPUpload_Request* _this = reinterpret_cast< CCloud_CommitHTTPUpload_Request* >(object);
  (void)_this;
}
void CCloud_CommitHTTPUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_CommitHTTPUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_CommitHTTPUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_CommitHTTPUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&transfer_succeeded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_CommitHTTPUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_transfer_succeeded(&has_bits);
          transfer_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_sha = 3 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_CommitHTTPUpload_Request.file_sha");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_CommitHTTPUpload_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_CommitHTTPUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_CommitHTTPUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_transfer_succeeded(), target);
  }

  // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional string file_sha = 3 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_sha().data(), static_cast<int>(this->_internal_file_sha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_CommitHTTPUpload_Request.file_sha");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_sha(), target);
  }

  // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_CommitHTTPUpload_Request.filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_CommitHTTPUpload_Request)
  return target;
}

size_t CCloud_CommitHTTPUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_CommitHTTPUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string file_sha = 3 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_sha());
    }

    // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CommitHTTPUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_CommitHTTPUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CommitHTTPUpload_Request::GetClassData() const { return &_class_data_; }

void CCloud_CommitHTTPUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_CommitHTTPUpload_Request *>(to)->MergeFrom(
      static_cast<const CCloud_CommitHTTPUpload_Request &>(from));
}


void CCloud_CommitHTTPUpload_Request::MergeFrom(const CCloud_CommitHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_CommitHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_sha(from._internal_file_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_succeeded_ = from.transfer_succeeded_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_CommitHTTPUpload_Request::CopyFrom(const CCloud_CommitHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_CommitHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitHTTPUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_CommitHTTPUpload_Request::InternalSwap(CCloud_CommitHTTPUpload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_sha_, lhs_arena,
      &other->file_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, appid_)
      + sizeof(CCloud_CommitHTTPUpload_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, transfer_succeeded_)>(
          reinterpret_cast<char*>(&transfer_succeeded_),
          reinterpret_cast<char*>(&other->transfer_succeeded_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CommitHTTPUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[7]);
}

// ===================================================================

class CCloud_CommitHTTPUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_CommitHTTPUpload_Response>()._has_bits_);
  static void set_has_file_committed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_CommitHTTPUpload_Response::CCloud_CommitHTTPUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_CommitHTTPUpload_Response)
}
CCloud_CommitHTTPUpload_Response::CCloud_CommitHTTPUpload_Response(const CCloud_CommitHTTPUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_committed_ = from.file_committed_;
  // @@protoc_insertion_point(copy_constructor:CCloud_CommitHTTPUpload_Response)
}

inline void CCloud_CommitHTTPUpload_Response::SharedCtor() {
file_committed_ = false;
}

CCloud_CommitHTTPUpload_Response::~CCloud_CommitHTTPUpload_Response() {
  // @@protoc_insertion_point(destructor:CCloud_CommitHTTPUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_CommitHTTPUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_CommitHTTPUpload_Response::ArenaDtor(void* object) {
  CCloud_CommitHTTPUpload_Response* _this = reinterpret_cast< CCloud_CommitHTTPUpload_Response* >(object);
  (void)_this;
}
void CCloud_CommitHTTPUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_CommitHTTPUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_CommitHTTPUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_CommitHTTPUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_committed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_CommitHTTPUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_file_committed(&has_bits);
          file_committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_CommitHTTPUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_CommitHTTPUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_file_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_CommitHTTPUpload_Response)
  return target;
}

size_t CCloud_CommitHTTPUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_CommitHTTPUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CommitHTTPUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_CommitHTTPUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CommitHTTPUpload_Response::GetClassData() const { return &_class_data_; }

void CCloud_CommitHTTPUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_CommitHTTPUpload_Response *>(to)->MergeFrom(
      static_cast<const CCloud_CommitHTTPUpload_Response &>(from));
}


void CCloud_CommitHTTPUpload_Response::MergeFrom(const CCloud_CommitHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_CommitHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_committed()) {
    _internal_set_file_committed(from._internal_file_committed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_CommitHTTPUpload_Response::CopyFrom(const CCloud_CommitHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_CommitHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitHTTPUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_CommitHTTPUpload_Response::InternalSwap(CCloud_CommitHTTPUpload_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_committed_, other->file_committed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CommitHTTPUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[8]);
}

// ===================================================================

class CCloud_BeginUGCUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginUGCUpload_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_BeginUGCUpload_Request::CCloud_BeginUGCUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginUGCUpload_Request)
}
CCloud_BeginUGCUpload_Request::CCloud_BeginUGCUpload_Request(const CCloud_BeginUGCUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_sha()) {
    file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_sha(), 
      GetArenaForAllocation());
  }
  content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content_type()) {
    content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(file_size_));
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginUGCUpload_Request)
}

inline void CCloud_BeginUGCUpload_Request::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(file_size_));
}

CCloud_BeginUGCUpload_Request::~CCloud_BeginUGCUpload_Request() {
  // @@protoc_insertion_point(destructor:CCloud_BeginUGCUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginUGCUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginUGCUpload_Request::ArenaDtor(void* object) {
  CCloud_BeginUGCUpload_Request* _this = reinterpret_cast< CCloud_BeginUGCUpload_Request* >(object);
  (void)_this;
}
void CCloud_BeginUGCUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginUGCUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginUGCUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginUGCUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      content_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(file_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginUGCUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID this UGC belongs to."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 2 [(.description) = "File size in bytes."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 3 [(.description) = "Name of the file."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginUGCUpload_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginUGCUpload_Request.file_sha");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string content_type = 5 [(.description) = "MIME content type of the file"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginUGCUpload_Request.content_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginUGCUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginUGCUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID this UGC belongs to."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 file_size = 2 [(.description) = "File size in bytes."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size(), target);
  }

  // optional string filename = 3 [(.description) = "Name of the file."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginUGCUpload_Request.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_sha().data(), static_cast<int>(this->_internal_file_sha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginUGCUpload_Request.file_sha");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_sha(), target);
  }

  // optional string content_type = 5 [(.description) = "MIME content type of the file"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginUGCUpload_Request.content_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginUGCUpload_Request)
  return target;
}

size_t CCloud_BeginUGCUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginUGCUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string filename = 3 [(.description) = "Name of the file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string file_sha = 4 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_sha());
    }

    // optional string content_type = 5 [(.description) = "MIME content type of the file"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content_type());
    }

    // optional uint32 appid = 1 [(.description) = "App ID this UGC belongs to."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 file_size = 2 [(.description) = "File size in bytes."];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginUGCUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginUGCUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginUGCUpload_Request::GetClassData() const { return &_class_data_; }

void CCloud_BeginUGCUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginUGCUpload_Request *>(to)->MergeFrom(
      static_cast<const CCloud_BeginUGCUpload_Request &>(from));
}


void CCloud_BeginUGCUpload_Request::MergeFrom(const CCloud_BeginUGCUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginUGCUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_sha(from._internal_file_sha());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_content_type(from._internal_content_type());
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginUGCUpload_Request::CopyFrom(const CCloud_BeginUGCUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginUGCUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginUGCUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_BeginUGCUpload_Request::InternalSwap(CCloud_BeginUGCUpload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_sha_, lhs_arena,
      &other->file_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_type_, lhs_arena,
      &other->content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_BeginUGCUpload_Request, file_size_)
      + sizeof(CCloud_BeginUGCUpload_Request::file_size_)
      - PROTOBUF_FIELD_OFFSET(CCloud_BeginUGCUpload_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginUGCUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[9]);
}

// ===================================================================

class CCloud_BeginUGCUpload_Response_HTTPHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginUGCUpload_Response_HTTPHeaders>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_BeginUGCUpload_Response_HTTPHeaders::CCloud_BeginUGCUpload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginUGCUpload_Response.HTTPHeaders)
}
CCloud_BeginUGCUpload_Response_HTTPHeaders::CCloud_BeginUGCUpload_Response_HTTPHeaders(const CCloud_BeginUGCUpload_Response_HTTPHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginUGCUpload_Response.HTTPHeaders)
}

inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCloud_BeginUGCUpload_Response_HTTPHeaders::~CCloud_BeginUGCUpload_Response_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:CCloud_BeginUGCUpload_Response.HTTPHeaders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginUGCUpload_Response_HTTPHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginUGCUpload_Response_HTTPHeaders::ArenaDtor(void* object) {
  CCloud_BeginUGCUpload_Response_HTTPHeaders* _this = reinterpret_cast< CCloud_BeginUGCUpload_Response_HTTPHeaders* >(object);
  (void)_this;
}
void CCloud_BeginUGCUpload_Response_HTTPHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginUGCUpload_Response_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginUGCUpload_Response_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginUGCUpload_Response.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginUGCUpload_Response_HTTPHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginUGCUpload_Response.HTTPHeaders.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginUGCUpload_Response.HTTPHeaders.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginUGCUpload_Response_HTTPHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginUGCUpload_Response.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginUGCUpload_Response.HTTPHeaders.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginUGCUpload_Response.HTTPHeaders.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginUGCUpload_Response.HTTPHeaders)
  return target;
}

size_t CCloud_BeginUGCUpload_Response_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginUGCUpload_Response.HTTPHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginUGCUpload_Response_HTTPHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginUGCUpload_Response_HTTPHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginUGCUpload_Response_HTTPHeaders::GetClassData() const { return &_class_data_; }

void CCloud_BeginUGCUpload_Response_HTTPHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginUGCUpload_Response_HTTPHeaders *>(to)->MergeFrom(
      static_cast<const CCloud_BeginUGCUpload_Response_HTTPHeaders &>(from));
}


void CCloud_BeginUGCUpload_Response_HTTPHeaders::MergeFrom(const CCloud_BeginUGCUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginUGCUpload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginUGCUpload_Response_HTTPHeaders::CopyFrom(const CCloud_BeginUGCUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginUGCUpload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginUGCUpload_Response_HTTPHeaders::IsInitialized() const {
  return true;
}

void CCloud_BeginUGCUpload_Response_HTTPHeaders::InternalSwap(CCloud_BeginUGCUpload_Response_HTTPHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginUGCUpload_Response_HTTPHeaders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[10]);
}

// ===================================================================

class CCloud_BeginUGCUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginUGCUpload_Response>()._has_bits_);
  static void set_has_storage_system(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ugcid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CCloud_BeginUGCUpload_Response::CCloud_BeginUGCUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  request_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginUGCUpload_Response)
}
CCloud_BeginUGCUpload_Response::CCloud_BeginUGCUpload_Response(const CCloud_BeginUGCUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_host()) {
    url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_host(), 
      GetArenaForAllocation());
  }
  url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_path()) {
    url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginUGCUpload_Response)
}

inline void CCloud_BeginUGCUpload_Response::SharedCtor() {
url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ugcid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
}

CCloud_BeginUGCUpload_Response::~CCloud_BeginUGCUpload_Response() {
  // @@protoc_insertion_point(destructor:CCloud_BeginUGCUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginUGCUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginUGCUpload_Response::ArenaDtor(void* object) {
  CCloud_BeginUGCUpload_Response* _this = reinterpret_cast< CCloud_BeginUGCUpload_Response* >(object);
  (void)_this;
}
void CCloud_BeginUGCUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginUGCUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginUGCUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginUGCUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_https_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(use_https_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginUGCUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EPublishedFileStorageSystem storage_system = 1 [default = k_EPublishedFileStorageSystemInvalid, (.description) = "UGC Storage system chosen for this file"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileStorageSystem_IsValid(val))) {
            _internal_set_storage_system(static_cast<::EPublishedFileStorageSystem>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ugcid = 2 [(.description) = "UGC ID of the uploaded file."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_ugcid(&has_bits);
          ugcid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 timestamp = 3 [(.description) = "Server timestamp of file."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string url_host = 4 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginUGCUpload_Response.url_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_path = 5 [(.description) = "Relative path on server to which file should be uploaded."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginUGCUpload_Response.url_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_https = 6 [(.description) = "If true, use https, otherwise use http."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCloud_BeginUGCUpload_Response.HTTPHeaders request_headers = 7 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginUGCUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginUGCUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EPublishedFileStorageSystem storage_system = 1 [default = k_EPublishedFileStorageSystemInvalid, (.description) = "UGC Storage system chosen for this file"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_storage_system(), target);
  }

  // optional fixed64 ugcid = 2 [(.description) = "UGC ID of the uploaded file."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_ugcid(), target);
  }

  // optional fixed32 timestamp = 3 [(.description) = "Server timestamp of file."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional string url_host = 4 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_host().data(), static_cast<int>(this->_internal_url_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginUGCUpload_Response.url_host");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url_host(), target);
  }

  // optional string url_path = 5 [(.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_path().data(), static_cast<int>(this->_internal_url_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginUGCUpload_Response.url_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url_path(), target);
  }

  // optional bool use_https = 6 [(.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_https(), target);
  }

  // repeated .CCloud_BeginUGCUpload_Response.HTTPHeaders request_headers = 7 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_request_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginUGCUpload_Response)
  return target;
}

size_t CCloud_BeginUGCUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginUGCUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_BeginUGCUpload_Response.HTTPHeaders request_headers = 7 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url_host = 4 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_host());
    }

    // optional string url_path = 5 [(.description) = "Relative path on server to which file should be uploaded."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_path());
    }

    // optional fixed64 ugcid = 2 [(.description) = "UGC ID of the uploaded file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .EPublishedFileStorageSystem storage_system = 1 [default = k_EPublishedFileStorageSystemInvalid, (.description) = "UGC Storage system chosen for this file"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_storage_system());
    }

    // optional fixed32 timestamp = 3 [(.description) = "Server timestamp of file."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool use_https = 6 [(.description) = "If true, use https, otherwise use http."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginUGCUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginUGCUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginUGCUpload_Response::GetClassData() const { return &_class_data_; }

void CCloud_BeginUGCUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginUGCUpload_Response *>(to)->MergeFrom(
      static_cast<const CCloud_BeginUGCUpload_Response &>(from));
}


void CCloud_BeginUGCUpload_Response::MergeFrom(const CCloud_BeginUGCUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginUGCUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_host(from._internal_url_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_path(from._internal_url_path());
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      storage_system_ = from.storage_system_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_https_ = from.use_https_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginUGCUpload_Response::CopyFrom(const CCloud_BeginUGCUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginUGCUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginUGCUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_BeginUGCUpload_Response::InternalSwap(CCloud_BeginUGCUpload_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_headers_.InternalSwap(&other->request_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_host_, lhs_arena,
      &other->url_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_path_, lhs_arena,
      &other->url_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_BeginUGCUpload_Response, use_https_)
      + sizeof(CCloud_BeginUGCUpload_Response::use_https_)
      - PROTOBUF_FIELD_OFFSET(CCloud_BeginUGCUpload_Response, ugcid_)>(
          reinterpret_cast<char*>(&ugcid_),
          reinterpret_cast<char*>(&other->ugcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginUGCUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[11]);
}

// ===================================================================

class CCloud_CommitUGCUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_CommitUGCUpload_Request>()._has_bits_);
  static void set_has_transfer_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ugcid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_CommitUGCUpload_Request::CCloud_CommitUGCUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_CommitUGCUpload_Request)
}
CCloud_CommitUGCUpload_Request::CCloud_CommitUGCUpload_Request(const CCloud_CommitUGCUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transfer_succeeded_, &from.transfer_succeeded_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugcid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(ugcid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_CommitUGCUpload_Request)
}

inline void CCloud_CommitUGCUpload_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transfer_succeeded_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ugcid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(ugcid_));
}

CCloud_CommitUGCUpload_Request::~CCloud_CommitUGCUpload_Request() {
  // @@protoc_insertion_point(destructor:CCloud_CommitUGCUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_CommitUGCUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_CommitUGCUpload_Request::ArenaDtor(void* object) {
  CCloud_CommitUGCUpload_Request* _this = reinterpret_cast< CCloud_CommitUGCUpload_Request* >(object);
  (void)_this;
}
void CCloud_CommitUGCUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_CommitUGCUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_CommitUGCUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_CommitUGCUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&transfer_succeeded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ugcid_) -
        reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(ugcid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_CommitUGCUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginUGCUpload), false if a failure occurred."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_transfer_succeeded(&has_bits);
          transfer_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginUGCUpload."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ugcid = 3 [(.description) = "UGC ID of the uploaded file."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_ugcid(&has_bits);
          ugcid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_CommitUGCUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_CommitUGCUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginUGCUpload), false if a failure occurred."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_transfer_succeeded(), target);
  }

  // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginUGCUpload."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional fixed64 ugcid = 3 [(.description) = "UGC ID of the uploaded file."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_ugcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_CommitUGCUpload_Request)
  return target;
}

size_t CCloud_CommitUGCUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_CommitUGCUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool transfer_succeeded = 1 [(.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginUGCUpload), false if a failure occurred."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginUGCUpload."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional fixed64 ugcid = 3 [(.description) = "UGC ID of the uploaded file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CommitUGCUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_CommitUGCUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CommitUGCUpload_Request::GetClassData() const { return &_class_data_; }

void CCloud_CommitUGCUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_CommitUGCUpload_Request *>(to)->MergeFrom(
      static_cast<const CCloud_CommitUGCUpload_Request &>(from));
}


void CCloud_CommitUGCUpload_Request::MergeFrom(const CCloud_CommitUGCUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_CommitUGCUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      transfer_succeeded_ = from.transfer_succeeded_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_CommitUGCUpload_Request::CopyFrom(const CCloud_CommitUGCUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_CommitUGCUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitUGCUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_CommitUGCUpload_Request::InternalSwap(CCloud_CommitUGCUpload_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_CommitUGCUpload_Request, ugcid_)
      + sizeof(CCloud_CommitUGCUpload_Request::ugcid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_CommitUGCUpload_Request, transfer_succeeded_)>(
          reinterpret_cast<char*>(&transfer_succeeded_),
          reinterpret_cast<char*>(&other->transfer_succeeded_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CommitUGCUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[12]);
}

// ===================================================================

class CCloud_CommitUGCUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_CommitUGCUpload_Response>()._has_bits_);
  static void set_has_file_committed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_CommitUGCUpload_Response::CCloud_CommitUGCUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_CommitUGCUpload_Response)
}
CCloud_CommitUGCUpload_Response::CCloud_CommitUGCUpload_Response(const CCloud_CommitUGCUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_committed_ = from.file_committed_;
  // @@protoc_insertion_point(copy_constructor:CCloud_CommitUGCUpload_Response)
}

inline void CCloud_CommitUGCUpload_Response::SharedCtor() {
file_committed_ = false;
}

CCloud_CommitUGCUpload_Response::~CCloud_CommitUGCUpload_Response() {
  // @@protoc_insertion_point(destructor:CCloud_CommitUGCUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_CommitUGCUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_CommitUGCUpload_Response::ArenaDtor(void* object) {
  CCloud_CommitUGCUpload_Response* _this = reinterpret_cast< CCloud_CommitUGCUpload_Response* >(object);
  (void)_this;
}
void CCloud_CommitUGCUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_CommitUGCUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_CommitUGCUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_CommitUGCUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_committed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_CommitUGCUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_file_committed(&has_bits);
          file_committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_CommitUGCUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_CommitUGCUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_file_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_CommitUGCUpload_Response)
  return target;
}

size_t CCloud_CommitUGCUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_CommitUGCUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CommitUGCUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_CommitUGCUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CommitUGCUpload_Response::GetClassData() const { return &_class_data_; }

void CCloud_CommitUGCUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_CommitUGCUpload_Response *>(to)->MergeFrom(
      static_cast<const CCloud_CommitUGCUpload_Response &>(from));
}


void CCloud_CommitUGCUpload_Response::MergeFrom(const CCloud_CommitUGCUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_CommitUGCUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_committed()) {
    _internal_set_file_committed(from._internal_file_committed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_CommitUGCUpload_Response::CopyFrom(const CCloud_CommitUGCUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_CommitUGCUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitUGCUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_CommitUGCUpload_Response::InternalSwap(CCloud_CommitUGCUpload_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_committed_, other->file_committed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CommitUGCUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[13]);
}

// ===================================================================

class CCloud_GetFileDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetFileDetails_Request>()._has_bits_);
  static void set_has_ugcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_GetFileDetails_Request)
}
CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_GetFileDetails_Request)
}

inline void CCloud_GetFileDetails_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ugcid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
}

CCloud_GetFileDetails_Request::~CCloud_GetFileDetails_Request() {
  // @@protoc_insertion_point(destructor:CCloud_GetFileDetails_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_GetFileDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_GetFileDetails_Request::ArenaDtor(void* object) {
  CCloud_GetFileDetails_Request* _this = reinterpret_cast< CCloud_GetFileDetails_Request* >(object);
  (void)_this;
}
void CCloud_GetFileDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_GetFileDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_GetFileDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetFileDetails_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_GetFileDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ugcid(&has_bits);
          ugcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_GetFileDetails_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetFileDetails_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ugcid(), target);
  }

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetFileDetails_Request)
  return target;
}

size_t CCloud_GetFileDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetFileDetails_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ugcid());
    }

    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetFileDetails_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_GetFileDetails_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetFileDetails_Request::GetClassData() const { return &_class_data_; }

void CCloud_GetFileDetails_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_GetFileDetails_Request *>(to)->MergeFrom(
      static_cast<const CCloud_GetFileDetails_Request &>(from));
}


void CCloud_GetFileDetails_Request::MergeFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetFileDetails_Request::CopyFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Request::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Request::InternalSwap(CCloud_GetFileDetails_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, appid_)
      + sizeof(CCloud_GetFileDetails_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_GetFileDetails_Request, ugcid_)>(
          reinterpret_cast<char*>(&ugcid_),
          reinterpret_cast<char*>(&other->ugcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetFileDetails_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[14]);
}

// ===================================================================

class CCloud_UserFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_UserFile>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ugcid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_file_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_UserFile::CCloud_UserFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  platforms_to_sync_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_UserFile)
}
CCloud_UserFile::CCloud_UserFile(const CCloud_UserFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      platforms_to_sync_(from.platforms_to_sync_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_sha()) {
    file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_sha(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CCloud_UserFile)
}

inline void CCloud_UserFile::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ugcid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&ugcid_)) + sizeof(flags_));
}

CCloud_UserFile::~CCloud_UserFile() {
  // @@protoc_insertion_point(destructor:CCloud_UserFile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_UserFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_UserFile::ArenaDtor(void* object) {
  CCloud_UserFile* _this = reinterpret_cast< CCloud_UserFile* >(object);
  (void)_this;
}
void CCloud_UserFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_UserFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_UserFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_UserFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  platforms_to_sync_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      file_sha_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&ugcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_creator_) -
        reinterpret_cast<char*>(&ugcid_)) + sizeof(steamid_creator_));
  }
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_UserFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ugcid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ugcid(&has_bits);
          ugcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_UserFile.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_UserFile.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_creator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_steamid_creator(&has_bits);
          steamid_creator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string platforms_to_sync = 9 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_platforms_to_sync();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_UserFile.platforms_to_sync");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string file_sha = 10 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_file_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_UserFile.file_sha");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_UserFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_UserFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ugcid(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_UserFile.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_file_size(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_UserFile.url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_url(), target);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_steamid_creator(), target);
  }

  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  // repeated string platforms_to_sync = 9 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
  for (int i = 0, n = this->_internal_platforms_to_sync_size(); i < n; i++) {
    const auto& s = this->_internal_platforms_to_sync(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_UserFile.platforms_to_sync");
    target = stream->WriteString(9, s, target);
  }

  // optional string file_sha = 10 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_sha().data(), static_cast<int>(this->_internal_file_sha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_UserFile.file_sha");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_file_sha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_UserFile)
  return target;
}

size_t CCloud_UserFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_UserFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string platforms_to_sync = 9 [(.description) = "Array of string specifying which platforms to sync; value values: all, Windows, MacOS, linux, Switch, iPhoneOS, Android."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(platforms_to_sync_.size());
  for (int i = 0, n = platforms_to_sync_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      platforms_to_sync_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string url = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string file_sha = 10 [(.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_sha());
    }

    // optional uint64 ugcid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ugcid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 file_size = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
    }

    // optional fixed64 steamid_creator = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_UserFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_UserFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_UserFile::GetClassData() const { return &_class_data_; }

void CCloud_UserFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_UserFile *>(to)->MergeFrom(
      static_cast<const CCloud_UserFile &>(from));
}


void CCloud_UserFile::MergeFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  platforms_to_sync_.MergeFrom(from.platforms_to_sync_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_file_sha(from._internal_file_sha());
    }
    if (cached_has_bits & 0x00000008u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamid_creator_ = from.steamid_creator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_UserFile::CopyFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_UserFile::IsInitialized() const {
  return true;
}

void CCloud_UserFile::InternalSwap(CCloud_UserFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  platforms_to_sync_.InternalSwap(&other->platforms_to_sync_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_sha_, lhs_arena,
      &other->file_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_UserFile, flags_)
      + sizeof(CCloud_UserFile::flags_)
      - PROTOBUF_FIELD_OFFSET(CCloud_UserFile, ugcid_)>(
          reinterpret_cast<char*>(&ugcid_),
          reinterpret_cast<char*>(&other->ugcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_UserFile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[15]);
}

// ===================================================================

class CCloud_GetFileDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetFileDetails_Response>()._has_bits_);
  static const ::CCloud_UserFile& details(const CCloud_GetFileDetails_Response* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CCloud_UserFile&
CCloud_GetFileDetails_Response::_Internal::details(const CCloud_GetFileDetails_Response* msg) {
  return *msg->details_;
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_GetFileDetails_Response)
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_details()) {
    details_ = new ::CCloud_UserFile(*from.details_);
  } else {
    details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CCloud_GetFileDetails_Response)
}

inline void CCloud_GetFileDetails_Response::SharedCtor() {
details_ = nullptr;
}

CCloud_GetFileDetails_Response::~CCloud_GetFileDetails_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetFileDetails_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_GetFileDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete details_;
}

void CCloud_GetFileDetails_Response::ArenaDtor(void* object) {
  CCloud_GetFileDetails_Response* _this = reinterpret_cast< CCloud_GetFileDetails_Response* >(object);
  (void)_this;
}
void CCloud_GetFileDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_GetFileDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_GetFileDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetFileDetails_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(details_ != nullptr);
    details_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_GetFileDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CCloud_UserFile details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_GetFileDetails_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetFileDetails_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetFileDetails_Response)
  return target;
}

size_t CCloud_GetFileDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetFileDetails_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CCloud_UserFile details = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetFileDetails_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_GetFileDetails_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetFileDetails_Response::GetClassData() const { return &_class_data_; }

void CCloud_GetFileDetails_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_GetFileDetails_Response *>(to)->MergeFrom(
      static_cast<const CCloud_GetFileDetails_Response &>(from));
}


void CCloud_GetFileDetails_Response::MergeFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_details()) {
    _internal_mutable_details()->::CCloud_UserFile::MergeFrom(from._internal_details());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetFileDetails_Response::CopyFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Response::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Response::InternalSwap(CCloud_GetFileDetails_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(details_, other->details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetFileDetails_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[16]);
}

// ===================================================================

class CCloud_EnumerateUserFiles_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_EnumerateUserFiles_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extended_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_EnumerateUserFiles_Request)
}
CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserFiles_Request)
}

inline void CCloud_EnumerateUserFiles_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
}

CCloud_EnumerateUserFiles_Request::~CCloud_EnumerateUserFiles_Request() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserFiles_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_EnumerateUserFiles_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_EnumerateUserFiles_Request::ArenaDtor(void* object) {
  CCloud_EnumerateUserFiles_Request* _this = reinterpret_cast< CCloud_EnumerateUserFiles_Request* >(object);
  (void)_this;
}
void CCloud_EnumerateUserFiles_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_EnumerateUserFiles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_EnumerateUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_EnumerateUserFiles_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_index_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(start_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_EnumerateUserFiles_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_extended_details(&has_bits);
          extended_details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_start_index(&has_bits);
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_EnumerateUserFiles_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserFiles_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_extended_details(), target);
  }

  // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserFiles_Request)
  return target;
}

size_t CCloud_EnumerateUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_EnumerateUserFiles_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

    // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_EnumerateUserFiles_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_EnumerateUserFiles_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_EnumerateUserFiles_Request::GetClassData() const { return &_class_data_; }

void CCloud_EnumerateUserFiles_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_EnumerateUserFiles_Request *>(to)->MergeFrom(
      static_cast<const CCloud_EnumerateUserFiles_Request &>(from));
}


void CCloud_EnumerateUserFiles_Request::MergeFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      extended_details_ = from.extended_details_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_index_ = from.start_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Request::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Request::InternalSwap(CCloud_EnumerateUserFiles_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, start_index_)
      + sizeof(CCloud_EnumerateUserFiles_Request::start_index_)
      - PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_EnumerateUserFiles_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[17]);
}

// ===================================================================

class CCloud_EnumerateUserFiles_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_EnumerateUserFiles_Response>()._has_bits_);
  static void set_has_total_files(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_EnumerateUserFiles_Response)
}
CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_files_ = from.total_files_;
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserFiles_Response)
}

inline void CCloud_EnumerateUserFiles_Response::SharedCtor() {
total_files_ = 0u;
}

CCloud_EnumerateUserFiles_Response::~CCloud_EnumerateUserFiles_Response() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserFiles_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_EnumerateUserFiles_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_EnumerateUserFiles_Response::ArenaDtor(void* object) {
  CCloud_EnumerateUserFiles_Response* _this = reinterpret_cast< CCloud_EnumerateUserFiles_Response* >(object);
  (void)_this;
}
void CCloud_EnumerateUserFiles_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_EnumerateUserFiles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_EnumerateUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_EnumerateUserFiles_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  total_files_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_EnumerateUserFiles_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCloud_UserFile files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_files(&has_bits);
          total_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_EnumerateUserFiles_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserFiles_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCloud_UserFile files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_files(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_files(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserFiles_Response)
  return target;
}

size_t CCloud_EnumerateUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_EnumerateUserFiles_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_UserFile files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 total_files = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_files());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_EnumerateUserFiles_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_EnumerateUserFiles_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_EnumerateUserFiles_Response::GetClassData() const { return &_class_data_; }

void CCloud_EnumerateUserFiles_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_EnumerateUserFiles_Response *>(to)->MergeFrom(
      static_cast<const CCloud_EnumerateUserFiles_Response &>(from));
}


void CCloud_EnumerateUserFiles_Response::MergeFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from._internal_has_total_files()) {
    _internal_set_total_files(from._internal_total_files());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Response::InternalSwap(CCloud_EnumerateUserFiles_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  files_.InternalSwap(&other->files_);
  swap(total_files_, other->total_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_EnumerateUserFiles_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[18]);
}

// ===================================================================

class CCloud_Delete_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_Delete_Request>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upload_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_Delete_Request::CCloud_Delete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_Delete_Request)
}
CCloud_Delete_Request::CCloud_Delete_Request(const CCloud_Delete_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&upload_batch_id_, &from.upload_batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&upload_batch_id_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_Delete_Request)
}

inline void CCloud_Delete_Request::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_batch_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&upload_batch_id_)) + sizeof(appid_));
}

CCloud_Delete_Request::~CCloud_Delete_Request() {
  // @@protoc_insertion_point(destructor:CCloud_Delete_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_Delete_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_Delete_Request::ArenaDtor(void* object) {
  CCloud_Delete_Request* _this = reinterpret_cast< CCloud_Delete_Request* >(object);
  (void)_this;
}
void CCloud_Delete_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_Delete_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_Delete_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&upload_batch_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&upload_batch_id_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_Delete_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_Delete_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upload_batch_id = 3 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upload_batch_id(&has_bits);
          upload_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_Delete_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_Delete_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_Delete_Request.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint64 upload_batch_id = 3 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_upload_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_Delete_Request)
  return target;
}

size_t CCloud_Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_Delete_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint64 upload_batch_id = 3 [(.description) = "ID of this batch returned by prior BeginAppUploadBatch call."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_batch_id());
    }

    // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_Delete_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_Delete_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_Delete_Request::GetClassData() const { return &_class_data_; }

void CCloud_Delete_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_Delete_Request *>(to)->MergeFrom(
      static_cast<const CCloud_Delete_Request &>(from));
}


void CCloud_Delete_Request::MergeFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      upload_batch_id_ = from.upload_batch_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_Delete_Request::CopyFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Request::IsInitialized() const {
  return true;
}

void CCloud_Delete_Request::InternalSwap(CCloud_Delete_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, appid_)
      + sizeof(CCloud_Delete_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_Delete_Request, upload_batch_id_)>(
          reinterpret_cast<char*>(&upload_batch_id_),
          reinterpret_cast<char*>(&other->upload_batch_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_Delete_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[19]);
}

// ===================================================================

class CCloud_Delete_Response::_Internal {
 public:
};

CCloud_Delete_Response::CCloud_Delete_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCloud_Delete_Response)
}
CCloud_Delete_Response::CCloud_Delete_Response(const CCloud_Delete_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_Delete_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_Delete_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_Delete_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCloud_Delete_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[20]);
}

// ===================================================================

class CCloud_GetClientEncryptionKey_Request::_Internal {
 public:
};

CCloud_GetClientEncryptionKey_Request::CCloud_GetClientEncryptionKey_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCloud_GetClientEncryptionKey_Request)
}
CCloud_GetClientEncryptionKey_Request::CCloud_GetClientEncryptionKey_Request(const CCloud_GetClientEncryptionKey_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_GetClientEncryptionKey_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetClientEncryptionKey_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetClientEncryptionKey_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetClientEncryptionKey_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[21]);
}

// ===================================================================

class CCloud_GetClientEncryptionKey_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetClientEncryptionKey_Response>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_GetClientEncryptionKey_Response::CCloud_GetClientEncryptionKey_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_GetClientEncryptionKey_Response)
}
CCloud_GetClientEncryptionKey_Response::CCloud_GetClientEncryptionKey_Response(const CCloud_GetClientEncryptionKey_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  crc_ = from.crc_;
  // @@protoc_insertion_point(copy_constructor:CCloud_GetClientEncryptionKey_Response)
}

inline void CCloud_GetClientEncryptionKey_Response::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
crc_ = 0;
}

CCloud_GetClientEncryptionKey_Response::~CCloud_GetClientEncryptionKey_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetClientEncryptionKey_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_GetClientEncryptionKey_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetClientEncryptionKey_Response::ArenaDtor(void* object) {
  CCloud_GetClientEncryptionKey_Response* _this = reinterpret_cast< CCloud_GetClientEncryptionKey_Response* >(object);
  (void)_this;
}
void CCloud_GetClientEncryptionKey_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_GetClientEncryptionKey_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_GetClientEncryptionKey_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetClientEncryptionKey_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  crc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_GetClientEncryptionKey_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes key = 1 [(.description) = "AES-256 encryption key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 crc = 2 [(.description) = "CRC of key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_GetClientEncryptionKey_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetClientEncryptionKey_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1 [(.description) = "AES-256 encryption key"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional int32 crc = 2 [(.description) = "CRC of key"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetClientEncryptionKey_Response)
  return target;
}

size_t CCloud_GetClientEncryptionKey_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetClientEncryptionKey_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes key = 1 [(.description) = "AES-256 encryption key"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key());
    }

    // optional int32 crc = 2 [(.description) = "CRC of key"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_crc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetClientEncryptionKey_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_GetClientEncryptionKey_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetClientEncryptionKey_Response::GetClassData() const { return &_class_data_; }

void CCloud_GetClientEncryptionKey_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_GetClientEncryptionKey_Response *>(to)->MergeFrom(
      static_cast<const CCloud_GetClientEncryptionKey_Response &>(from));
}


void CCloud_GetClientEncryptionKey_Response::MergeFrom(const CCloud_GetClientEncryptionKey_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetClientEncryptionKey_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetClientEncryptionKey_Response::CopyFrom(const CCloud_GetClientEncryptionKey_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetClientEncryptionKey_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetClientEncryptionKey_Response::IsInitialized() const {
  return true;
}

void CCloud_GetClientEncryptionKey_Response::InternalSwap(CCloud_GetClientEncryptionKey_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(crc_, other->crc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetClientEncryptionKey_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[22]);
}

// ===================================================================

class CCloud_CDNReport_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_CDNReport_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_http_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expected_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_received_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCloud_CDNReport_Notification::CCloud_CDNReport_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_CDNReport_Notification)
}
CCloud_CDNReport_Notification::CCloud_CDNReport_Notification(const CCloud_CDNReport_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CCloud_CDNReport_Notification)
}

inline void CCloud_CDNReport_Notification::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(duration_));
}

CCloud_CDNReport_Notification::~CCloud_CDNReport_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_CDNReport_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_CDNReport_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_CDNReport_Notification::ArenaDtor(void* object) {
  CCloud_CDNReport_Notification* _this = reinterpret_cast< CCloud_CDNReport_Notification* >(object);
  (void)_this;
}
void CCloud_CDNReport_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_CDNReport_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_CDNReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_CDNReport_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_CDNReport_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_CDNReport_Notification.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 http_status_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_http_status_code(&has_bits);
          http_status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 expected_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_expected_bytes(&has_bits);
          expected_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 received_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_received_bytes(&has_bits);
          received_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_CDNReport_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_CDNReport_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_CDNReport_Notification.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // optional uint32 http_status_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_http_status_code(), target);
  }

  // optional uint64 expected_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_expected_bytes(), target);
  }

  // optional uint64 received_bytes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_received_bytes(), target);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_CDNReport_Notification)
  return target;
}

size_t CCloud_CDNReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_CDNReport_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool success = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 http_status_code = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_http_status_code());
    }

    // optional uint64 expected_bytes = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_expected_bytes());
    }

    // optional uint64 received_bytes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_received_bytes());
    }

    // optional uint32 duration = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CDNReport_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_CDNReport_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CDNReport_Notification::GetClassData() const { return &_class_data_; }

void CCloud_CDNReport_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_CDNReport_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_CDNReport_Notification &>(from));
}


void CCloud_CDNReport_Notification::MergeFrom(const CCloud_CDNReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_CDNReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      expected_bytes_ = from.expected_bytes_;
    }
    if (cached_has_bits & 0x00000020u) {
      received_bytes_ = from.received_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_CDNReport_Notification::CopyFrom(const CCloud_CDNReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_CDNReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CDNReport_Notification::IsInitialized() const {
  return true;
}

void CCloud_CDNReport_Notification::InternalSwap(CCloud_CDNReport_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_CDNReport_Notification, duration_)
      + sizeof(CCloud_CDNReport_Notification::duration_)
      - PROTOBUF_FIELD_OFFSET(CCloud_CDNReport_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CDNReport_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[23]);
}

// ===================================================================

class CCloud_ExternalStorageTransferReport_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ExternalStorageTransferReport_Notification>()._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_upload(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_http_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_expected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bytes_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_proxied(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipv6_local(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipv6_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_time_to_connect_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_time_to_send_req_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_time_to_first_byte_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_time_to_last_byte_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CCloud_ExternalStorageTransferReport_Notification::CCloud_ExternalStorageTransferReport_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ExternalStorageTransferReport_Notification)
}
CCloud_ExternalStorageTransferReport_Notification::CCloud_ExternalStorageTransferReport_Notification(const CCloud_ExternalStorageTransferReport_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bytes_expected_, &from.bytes_expected_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_to_last_byte_ms_) -
    reinterpret_cast<char*>(&bytes_expected_)) + sizeof(time_to_last_byte_ms_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ExternalStorageTransferReport_Notification)
}

inline void CCloud_ExternalStorageTransferReport_Notification::SharedCtor() {
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bytes_expected_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_to_last_byte_ms_) -
    reinterpret_cast<char*>(&bytes_expected_)) + sizeof(time_to_last_byte_ms_));
}

CCloud_ExternalStorageTransferReport_Notification::~CCloud_ExternalStorageTransferReport_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_ExternalStorageTransferReport_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ExternalStorageTransferReport_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ExternalStorageTransferReport_Notification::ArenaDtor(void* object) {
  CCloud_ExternalStorageTransferReport_Notification* _this = reinterpret_cast< CCloud_ExternalStorageTransferReport_Notification* >(object);
  (void)_this;
}
void CCloud_ExternalStorageTransferReport_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ExternalStorageTransferReport_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ExternalStorageTransferReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ExternalStorageTransferReport_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&bytes_expected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipv6_local_) -
        reinterpret_cast<char*>(&bytes_expected_)) + sizeof(ipv6_local_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bytes_actual_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_to_last_byte_ms_) -
        reinterpret_cast<char*>(&bytes_actual_)) + sizeof(time_to_last_byte_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ExternalStorageTransferReport_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ExternalStorageTransferReport_Notification.host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ExternalStorageTransferReport_Notification.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_upload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_upload(&has_bits);
          is_upload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 http_status_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_http_status_code(&has_bits);
          http_status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_expected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bytes_expected(&has_bits);
          bytes_expected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_actual = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bytes_actual(&has_bits);
          bytes_actual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cellid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_cellid(&has_bits);
          cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool proxied = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_proxied(&has_bits);
          proxied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ipv6_local = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ipv6_local(&has_bits);
          ipv6_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ipv6_remote = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ipv6_remote(&has_bits);
          ipv6_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_to_connect_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_time_to_connect_ms(&has_bits);
          time_to_connect_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_to_send_req_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_time_to_send_req_ms(&has_bits);
          time_to_send_req_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_to_first_byte_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_time_to_first_byte_ms(&has_bits);
          time_to_first_byte_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_to_last_byte_ms = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_time_to_last_byte_ms(&has_bits);
          time_to_last_byte_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ExternalStorageTransferReport_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ExternalStorageTransferReport_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ExternalStorageTransferReport_Notification.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ExternalStorageTransferReport_Notification.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // optional bool is_upload = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_upload(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // optional uint32 http_status_code = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_http_status_code(), target);
  }

  // optional uint64 bytes_expected = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bytes_expected(), target);
  }

  // optional uint64 bytes_actual = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_bytes_actual(), target);
  }

  // optional uint32 duration_ms = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_duration_ms(), target);
  }

  // optional uint32 cellid = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cellid(), target);
  }

  // optional bool proxied = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_proxied(), target);
  }

  // optional bool ipv6_local = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_ipv6_local(), target);
  }

  // optional bool ipv6_remote = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_ipv6_remote(), target);
  }

  // optional uint32 time_to_connect_ms = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_time_to_connect_ms(), target);
  }

  // optional uint32 time_to_send_req_ms = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_time_to_send_req_ms(), target);
  }

  // optional uint32 time_to_first_byte_ms = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_time_to_first_byte_ms(), target);
  }

  // optional uint32 time_to_last_byte_ms = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_time_to_last_byte_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ExternalStorageTransferReport_Notification)
  return target;
}

size_t CCloud_ExternalStorageTransferReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ExternalStorageTransferReport_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional string path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional uint64 bytes_expected = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_expected());
    }

    // optional uint32 http_status_code = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_http_status_code());
    }

    // optional bool is_upload = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool proxied = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool ipv6_local = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 bytes_actual = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_actual());
    }

    // optional uint32 duration_ms = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_ms());
    }

    // optional uint32 cellid = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cellid());
    }

    // optional bool ipv6_remote = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_to_connect_ms = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_to_connect_ms());
    }

    // optional uint32 time_to_send_req_ms = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_to_send_req_ms());
    }

    // optional uint32 time_to_first_byte_ms = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_to_first_byte_ms());
    }

    // optional uint32 time_to_last_byte_ms = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_to_last_byte_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ExternalStorageTransferReport_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ExternalStorageTransferReport_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ExternalStorageTransferReport_Notification::GetClassData() const { return &_class_data_; }

void CCloud_ExternalStorageTransferReport_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ExternalStorageTransferReport_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_ExternalStorageTransferReport_Notification &>(from));
}


void CCloud_ExternalStorageTransferReport_Notification::MergeFrom(const CCloud_ExternalStorageTransferReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ExternalStorageTransferReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_expected_ = from.bytes_expected_;
    }
    if (cached_has_bits & 0x00000008u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_upload_ = from.is_upload_;
    }
    if (cached_has_bits & 0x00000020u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000040u) {
      proxied_ = from.proxied_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipv6_local_ = from.ipv6_local_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_actual_ = from.bytes_actual_;
    }
    if (cached_has_bits & 0x00000200u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipv6_remote_ = from.ipv6_remote_;
    }
    if (cached_has_bits & 0x00001000u) {
      time_to_connect_ms_ = from.time_to_connect_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      time_to_send_req_ms_ = from.time_to_send_req_ms_;
    }
    if (cached_has_bits & 0x00004000u) {
      time_to_first_byte_ms_ = from.time_to_first_byte_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      time_to_last_byte_ms_ = from.time_to_last_byte_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ExternalStorageTransferReport_Notification::CopyFrom(const CCloud_ExternalStorageTransferReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ExternalStorageTransferReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ExternalStorageTransferReport_Notification::IsInitialized() const {
  return true;
}

void CCloud_ExternalStorageTransferReport_Notification::InternalSwap(CCloud_ExternalStorageTransferReport_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, time_to_last_byte_ms_)
      + sizeof(CCloud_ExternalStorageTransferReport_Notification::time_to_last_byte_ms_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, bytes_expected_)>(
          reinterpret_cast<char*>(&bytes_expected_),
          reinterpret_cast<char*>(&other->bytes_expected_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ExternalStorageTransferReport_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[24]);
}

// ===================================================================

class CCloud_BeginAppUploadBatch_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginAppUploadBatch_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_BeginAppUploadBatch_Request::CCloud_BeginAppUploadBatch_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_to_upload_(arena),
  files_to_delete_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginAppUploadBatch_Request)
}
CCloud_BeginAppUploadBatch_Request::CCloud_BeginAppUploadBatch_Request(const CCloud_BeginAppUploadBatch_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      files_to_upload_(from.files_to_upload_),
      files_to_delete_(from.files_to_delete_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginAppUploadBatch_Request)
}

inline void CCloud_BeginAppUploadBatch_Request::SharedCtor() {
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(appid_));
}

CCloud_BeginAppUploadBatch_Request::~CCloud_BeginAppUploadBatch_Request() {
  // @@protoc_insertion_point(destructor:CCloud_BeginAppUploadBatch_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginAppUploadBatch_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginAppUploadBatch_Request::ArenaDtor(void* object) {
  CCloud_BeginAppUploadBatch_Request* _this = reinterpret_cast< CCloud_BeginAppUploadBatch_Request* >(object);
  (void)_this;
}
void CCloud_BeginAppUploadBatch_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginAppUploadBatch_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginAppUploadBatch_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginAppUploadBatch_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_to_upload_.Clear();
  files_to_delete_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginAppUploadBatch_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 2 [(.description) = "Client machine name (may be user\'s alias)."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginAppUploadBatch_Request.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string files_to_upload = 3 [(.description) = "Filenames of files to upload in this batch"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files_to_upload();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginAppUploadBatch_Request.files_to_upload");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string files_to_delete = 4 [(.description) = "Filenames of files to delete in this batch"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files_to_delete();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_BeginAppUploadBatch_Request.files_to_delete");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_id = 5 [(.description) = "Client ID number"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 app_build_id = 6 [(.description) = "Current local build of the app which made these changes"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_app_build_id(&has_bits);
          app_build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginAppUploadBatch_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginAppUploadBatch_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string machine_name = 2 [(.description) = "Client machine name (may be user\'s alias)."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginAppUploadBatch_Request.machine_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_machine_name(), target);
  }

  // repeated string files_to_upload = 3 [(.description) = "Filenames of files to upload in this batch"];
  for (int i = 0, n = this->_internal_files_to_upload_size(); i < n; i++) {
    const auto& s = this->_internal_files_to_upload(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginAppUploadBatch_Request.files_to_upload");
    target = stream->WriteString(3, s, target);
  }

  // repeated string files_to_delete = 4 [(.description) = "Filenames of files to delete in this batch"];
  for (int i = 0, n = this->_internal_files_to_delete_size(); i < n; i++) {
    const auto& s = this->_internal_files_to_delete(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_BeginAppUploadBatch_Request.files_to_delete");
    target = stream->WriteString(4, s, target);
  }

  // optional uint64 client_id = 5 [(.description) = "Client ID number"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_client_id(), target);
  }

  // optional uint64 app_build_id = 6 [(.description) = "Current local build of the app which made these changes"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_app_build_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginAppUploadBatch_Request)
  return target;
}

size_t CCloud_BeginAppUploadBatch_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginAppUploadBatch_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files_to_upload = 3 [(.description) = "Filenames of files to upload in this batch"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(files_to_upload_.size());
  for (int i = 0, n = files_to_upload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      files_to_upload_.Get(i));
  }

  // repeated string files_to_delete = 4 [(.description) = "Filenames of files to delete in this batch"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(files_to_delete_.size());
  for (int i = 0, n = files_to_delete_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      files_to_delete_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string machine_name = 2 [(.description) = "Client machine name (may be user\'s alias)."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional uint64 client_id = 5 [(.description) = "Client ID number"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
    }

    // optional uint64 app_build_id = 6 [(.description) = "Current local build of the app which made these changes"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_app_build_id());
    }

    // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginAppUploadBatch_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginAppUploadBatch_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginAppUploadBatch_Request::GetClassData() const { return &_class_data_; }

void CCloud_BeginAppUploadBatch_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginAppUploadBatch_Request *>(to)->MergeFrom(
      static_cast<const CCloud_BeginAppUploadBatch_Request &>(from));
}


void CCloud_BeginAppUploadBatch_Request::MergeFrom(const CCloud_BeginAppUploadBatch_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginAppUploadBatch_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_to_upload_.MergeFrom(from.files_to_upload_);
  files_to_delete_.MergeFrom(from.files_to_delete_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_build_id_ = from.app_build_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginAppUploadBatch_Request::CopyFrom(const CCloud_BeginAppUploadBatch_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginAppUploadBatch_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginAppUploadBatch_Request::IsInitialized() const {
  return true;
}

void CCloud_BeginAppUploadBatch_Request::InternalSwap(CCloud_BeginAppUploadBatch_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  files_to_upload_.InternalSwap(&other->files_to_upload_);
  files_to_delete_.InternalSwap(&other->files_to_delete_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_, lhs_arena,
      &other->machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_BeginAppUploadBatch_Request, appid_)
      + sizeof(CCloud_BeginAppUploadBatch_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_BeginAppUploadBatch_Request, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginAppUploadBatch_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[25]);
}

// ===================================================================

class CCloud_BeginAppUploadBatch_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_BeginAppUploadBatch_Response>()._has_bits_);
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_BeginAppUploadBatch_Response::CCloud_BeginAppUploadBatch_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_BeginAppUploadBatch_Response)
}
CCloud_BeginAppUploadBatch_Response::CCloud_BeginAppUploadBatch_Response(const CCloud_BeginAppUploadBatch_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&batch_id_, &from.batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_change_number_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(app_change_number_));
  // @@protoc_insertion_point(copy_constructor:CCloud_BeginAppUploadBatch_Response)
}

inline void CCloud_BeginAppUploadBatch_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_change_number_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(app_change_number_));
}

CCloud_BeginAppUploadBatch_Response::~CCloud_BeginAppUploadBatch_Response() {
  // @@protoc_insertion_point(destructor:CCloud_BeginAppUploadBatch_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_BeginAppUploadBatch_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_BeginAppUploadBatch_Response::ArenaDtor(void* object) {
  CCloud_BeginAppUploadBatch_Response* _this = reinterpret_cast< CCloud_BeginAppUploadBatch_Response* >(object);
  (void)_this;
}
void CCloud_BeginAppUploadBatch_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_BeginAppUploadBatch_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_BeginAppUploadBatch_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_BeginAppUploadBatch_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&batch_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_change_number_) -
        reinterpret_cast<char*>(&batch_id_)) + sizeof(app_change_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_BeginAppUploadBatch_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 batch_id = 1 [(.description) = "ID of this batch."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 app_change_number = 4 [(.description) = "New App Change Number"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_app_change_number(&has_bits);
          app_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_BeginAppUploadBatch_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_BeginAppUploadBatch_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 batch_id = 1 [(.description) = "ID of this batch."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_batch_id(), target);
  }

  // optional uint64 app_change_number = 4 [(.description) = "New App Change Number"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_app_change_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_BeginAppUploadBatch_Response)
  return target;
}

size_t CCloud_BeginAppUploadBatch_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_BeginAppUploadBatch_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 batch_id = 1 [(.description) = "ID of this batch."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_batch_id());
    }

    // optional uint64 app_change_number = 4 [(.description) = "New App Change Number"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_app_change_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_BeginAppUploadBatch_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_BeginAppUploadBatch_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_BeginAppUploadBatch_Response::GetClassData() const { return &_class_data_; }

void CCloud_BeginAppUploadBatch_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_BeginAppUploadBatch_Response *>(to)->MergeFrom(
      static_cast<const CCloud_BeginAppUploadBatch_Response &>(from));
}


void CCloud_BeginAppUploadBatch_Response::MergeFrom(const CCloud_BeginAppUploadBatch_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_BeginAppUploadBatch_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      batch_id_ = from.batch_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_change_number_ = from.app_change_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_BeginAppUploadBatch_Response::CopyFrom(const CCloud_BeginAppUploadBatch_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_BeginAppUploadBatch_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginAppUploadBatch_Response::IsInitialized() const {
  return true;
}

void CCloud_BeginAppUploadBatch_Response::InternalSwap(CCloud_BeginAppUploadBatch_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_BeginAppUploadBatch_Response, app_change_number_)
      + sizeof(CCloud_BeginAppUploadBatch_Response::app_change_number_)
      - PROTOBUF_FIELD_OFFSET(CCloud_BeginAppUploadBatch_Response, batch_id_)>(
          reinterpret_cast<char*>(&batch_id_),
          reinterpret_cast<char*>(&other->batch_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_BeginAppUploadBatch_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[26]);
}

// ===================================================================

class CCloud_CompleteAppUploadBatch_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_CompleteAppUploadBatch_Notification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_CompleteAppUploadBatch_Notification::CCloud_CompleteAppUploadBatch_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_CompleteAppUploadBatch_Notification)
}
CCloud_CompleteAppUploadBatch_Notification::CCloud_CompleteAppUploadBatch_Notification(const CCloud_CompleteAppUploadBatch_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&batch_id_, &from.batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_eresult_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(batch_eresult_));
  // @@protoc_insertion_point(copy_constructor:CCloud_CompleteAppUploadBatch_Notification)
}

inline void CCloud_CompleteAppUploadBatch_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_eresult_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(batch_eresult_));
}

CCloud_CompleteAppUploadBatch_Notification::~CCloud_CompleteAppUploadBatch_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_CompleteAppUploadBatch_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_CompleteAppUploadBatch_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_CompleteAppUploadBatch_Notification::ArenaDtor(void* object) {
  CCloud_CompleteAppUploadBatch_Notification* _this = reinterpret_cast< CCloud_CompleteAppUploadBatch_Notification* >(object);
  (void)_this;
}
void CCloud_CompleteAppUploadBatch_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_CompleteAppUploadBatch_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_CompleteAppUploadBatch_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_CompleteAppUploadBatch_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&batch_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_eresult_) -
        reinterpret_cast<char*>(&batch_id_)) + sizeof(batch_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_CompleteAppUploadBatch_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_batch_eresult(&has_bits);
          batch_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_CompleteAppUploadBatch_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_CompleteAppUploadBatch_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_batch_id(), target);
  }

  // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_CompleteAppUploadBatch_Notification)
  return target;
}

size_t CCloud_CompleteAppUploadBatch_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_CompleteAppUploadBatch_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_batch_id());
    }

    // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CompleteAppUploadBatch_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_CompleteAppUploadBatch_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CompleteAppUploadBatch_Notification::GetClassData() const { return &_class_data_; }

void CCloud_CompleteAppUploadBatch_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_CompleteAppUploadBatch_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_CompleteAppUploadBatch_Notification &>(from));
}


void CCloud_CompleteAppUploadBatch_Notification::MergeFrom(const CCloud_CompleteAppUploadBatch_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_CompleteAppUploadBatch_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      batch_id_ = from.batch_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      batch_eresult_ = from.batch_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_CompleteAppUploadBatch_Notification::CopyFrom(const CCloud_CompleteAppUploadBatch_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_CompleteAppUploadBatch_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CompleteAppUploadBatch_Notification::IsInitialized() const {
  return true;
}

void CCloud_CompleteAppUploadBatch_Notification::InternalSwap(CCloud_CompleteAppUploadBatch_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_CompleteAppUploadBatch_Notification, batch_eresult_)
      + sizeof(CCloud_CompleteAppUploadBatch_Notification::batch_eresult_)
      - PROTOBUF_FIELD_OFFSET(CCloud_CompleteAppUploadBatch_Notification, batch_id_)>(
          reinterpret_cast<char*>(&batch_id_),
          reinterpret_cast<char*>(&other->batch_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CompleteAppUploadBatch_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[27]);
}

// ===================================================================

class CCloud_CompleteAppUploadBatch_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_CompleteAppUploadBatch_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_CompleteAppUploadBatch_Request::CCloud_CompleteAppUploadBatch_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_CompleteAppUploadBatch_Request)
}
CCloud_CompleteAppUploadBatch_Request::CCloud_CompleteAppUploadBatch_Request(const CCloud_CompleteAppUploadBatch_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&batch_id_, &from.batch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_eresult_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(batch_eresult_));
  // @@protoc_insertion_point(copy_constructor:CCloud_CompleteAppUploadBatch_Request)
}

inline void CCloud_CompleteAppUploadBatch_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&batch_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_eresult_) -
    reinterpret_cast<char*>(&batch_id_)) + sizeof(batch_eresult_));
}

CCloud_CompleteAppUploadBatch_Request::~CCloud_CompleteAppUploadBatch_Request() {
  // @@protoc_insertion_point(destructor:CCloud_CompleteAppUploadBatch_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_CompleteAppUploadBatch_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_CompleteAppUploadBatch_Request::ArenaDtor(void* object) {
  CCloud_CompleteAppUploadBatch_Request* _this = reinterpret_cast< CCloud_CompleteAppUploadBatch_Request* >(object);
  (void)_this;
}
void CCloud_CompleteAppUploadBatch_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_CompleteAppUploadBatch_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_CompleteAppUploadBatch_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_CompleteAppUploadBatch_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&batch_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_eresult_) -
        reinterpret_cast<char*>(&batch_id_)) + sizeof(batch_eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_CompleteAppUploadBatch_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_batch_id(&has_bits);
          batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_batch_eresult(&has_bits);
          batch_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_CompleteAppUploadBatch_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_CompleteAppUploadBatch_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_batch_id(), target);
  }

  // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_CompleteAppUploadBatch_Request)
  return target;
}

size_t CCloud_CompleteAppUploadBatch_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_CompleteAppUploadBatch_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 batch_id = 2 [(.description) = "ID of this batch."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_batch_id());
    }

    // optional uint32 appid = 1 [(.description) = "App ID for this batch is for."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 batch_eresult = 3 [(.description) = "result of this batch."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CompleteAppUploadBatch_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_CompleteAppUploadBatch_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CompleteAppUploadBatch_Request::GetClassData() const { return &_class_data_; }

void CCloud_CompleteAppUploadBatch_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_CompleteAppUploadBatch_Request *>(to)->MergeFrom(
      static_cast<const CCloud_CompleteAppUploadBatch_Request &>(from));
}


void CCloud_CompleteAppUploadBatch_Request::MergeFrom(const CCloud_CompleteAppUploadBatch_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_CompleteAppUploadBatch_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      batch_id_ = from.batch_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      batch_eresult_ = from.batch_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_CompleteAppUploadBatch_Request::CopyFrom(const CCloud_CompleteAppUploadBatch_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_CompleteAppUploadBatch_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CompleteAppUploadBatch_Request::IsInitialized() const {
  return true;
}

void CCloud_CompleteAppUploadBatch_Request::InternalSwap(CCloud_CompleteAppUploadBatch_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_CompleteAppUploadBatch_Request, batch_eresult_)
      + sizeof(CCloud_CompleteAppUploadBatch_Request::batch_eresult_)
      - PROTOBUF_FIELD_OFFSET(CCloud_CompleteAppUploadBatch_Request, batch_id_)>(
          reinterpret_cast<char*>(&batch_id_),
          reinterpret_cast<char*>(&other->batch_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CompleteAppUploadBatch_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[28]);
}

// ===================================================================

class CCloud_CompleteAppUploadBatch_Response::_Internal {
 public:
};

CCloud_CompleteAppUploadBatch_Response::CCloud_CompleteAppUploadBatch_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCloud_CompleteAppUploadBatch_Response)
}
CCloud_CompleteAppUploadBatch_Response::CCloud_CompleteAppUploadBatch_Response(const CCloud_CompleteAppUploadBatch_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_CompleteAppUploadBatch_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_CompleteAppUploadBatch_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_CompleteAppUploadBatch_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCloud_CompleteAppUploadBatch_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[29]);
}

// ===================================================================

class CCloud_ClientBeginFileUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientBeginFileUpload_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_file_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platforms_to_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_encrypt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_shared_file(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deprecated_realm(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_upload_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CCloud_ClientBeginFileUpload_Request::CCloud_ClientBeginFileUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientBeginFileUpload_Request)
}
CCloud_ClientBeginFileUpload_Request::CCloud_ClientBeginFileUpload_Request(const CCloud_ClientBeginFileUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_sha()) {
    file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_sha(), 
      GetArenaForAllocation());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&platforms_to_sync_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(platforms_to_sync_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientBeginFileUpload_Request)
}

inline void CCloud_ClientBeginFileUpload_Request::SharedCtor() {
file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upload_batch_id_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(upload_batch_id_));
platforms_to_sync_ = 4294967295u;
}

CCloud_ClientBeginFileUpload_Request::~CCloud_ClientBeginFileUpload_Request() {
  // @@protoc_insertion_point(destructor:CCloud_ClientBeginFileUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientBeginFileUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientBeginFileUpload_Request::ArenaDtor(void* object) {
  CCloud_ClientBeginFileUpload_Request* _this = reinterpret_cast< CCloud_ClientBeginFileUpload_Request* >(object);
  (void)_this;
}
void CCloud_ClientBeginFileUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientBeginFileUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientBeginFileUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientBeginFileUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_encrypt_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(can_encrypt_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_shared_file_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_batch_id_) -
        reinterpret_cast<char*>(&is_shared_file_)) + sizeof(upload_batch_id_));
    platforms_to_sync_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientBeginFileUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in Cloud."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raw_file_size = 3 [(.description) = "file size before any compression and/or encryption."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_raw_file_size(&has_bits);
          raw_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes file_sha = 4 [(.description) = "SHA-1 of raw file."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 6 [(.description) = "Name of the file to store in the cloud."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientBeginFileUpload_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platforms_to_sync = 7 [default = 4294967295];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_platforms_to_sync(&has_bits);
          platforms_to_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cell_id = 9 [(.description) = "Client\'s cell ID so we can pick storage location."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_encrypt = 10 [(.description) = "if true, client can encrypt the file before uploading it"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_can_encrypt(&has_bits);
          can_encrypt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_shared_file = 11 [(.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_shared_file(&has_bits);
          is_shared_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deprecated_realm = 12 [(.description) = "unused"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_deprecated_realm(&has_bits);
          deprecated_realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upload_batch_id = 13 [(.description) = "ID of this batch."];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_upload_batch_id(&has_bits);
          upload_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientBeginFileUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientBeginFileUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in Cloud."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size(), target);
  }

  // optional uint32 raw_file_size = 3 [(.description) = "file size before any compression and/or encryption."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_raw_file_size(), target);
  }

  // optional bytes file_sha = 4 [(.description) = "SHA-1 of raw file."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_file_sha(), target);
  }

  // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time_stamp(), target);
  }

  // optional string filename = 6 [(.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientBeginFileUpload_Request.filename");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_filename(), target);
  }

  // optional uint32 platforms_to_sync = 7 [default = 4294967295];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_platforms_to_sync(), target);
  }

  // optional uint32 cell_id = 9 [(.description) = "Client\'s cell ID so we can pick storage location."];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cell_id(), target);
  }

  // optional bool can_encrypt = 10 [(.description) = "if true, client can encrypt the file before uploading it"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_can_encrypt(), target);
  }

  // optional bool is_shared_file = 11 [(.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_shared_file(), target);
  }

  // optional uint32 deprecated_realm = 12 [(.description) = "unused"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_deprecated_realm(), target);
  }

  // optional uint64 upload_batch_id = 13 [(.description) = "ID of this batch."];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_upload_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientBeginFileUpload_Request)
  return target;
}

size_t CCloud_ClientBeginFileUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientBeginFileUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes file_sha = 4 [(.description) = "SHA-1 of raw file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_file_sha());
    }

    // optional string filename = 6 [(.description) = "Name of the file to store in the cloud."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 appid = 1 [(.description) = "App ID for which the file is being uploaded."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in Cloud."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file."];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
    }

    // optional uint32 raw_file_size = 3 [(.description) = "file size before any compression and/or encryption."];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_raw_file_size());
    }

    // optional uint32 cell_id = 9 [(.description) = "Client\'s cell ID so we can pick storage location."];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id());
    }

    // optional bool can_encrypt = 10 [(.description) = "if true, client can encrypt the file before uploading it"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_shared_file = 11 [(.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 deprecated_realm = 12 [(.description) = "unused"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deprecated_realm());
    }

    // optional uint64 upload_batch_id = 13 [(.description) = "ID of this batch."];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_batch_id());
    }

    // optional uint32 platforms_to_sync = 7 [default = 4294967295];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_platforms_to_sync());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientBeginFileUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientBeginFileUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientBeginFileUpload_Request::GetClassData() const { return &_class_data_; }

void CCloud_ClientBeginFileUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientBeginFileUpload_Request *>(to)->MergeFrom(
      static_cast<const CCloud_ClientBeginFileUpload_Request &>(from));
}


void CCloud_ClientBeginFileUpload_Request::MergeFrom(const CCloud_ClientBeginFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientBeginFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_sha(from._internal_file_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_encrypt_ = from.can_encrypt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_shared_file_ = from.is_shared_file_;
    }
    if (cached_has_bits & 0x00000200u) {
      deprecated_realm_ = from.deprecated_realm_;
    }
    if (cached_has_bits & 0x00000400u) {
      upload_batch_id_ = from.upload_batch_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientBeginFileUpload_Request::CopyFrom(const CCloud_ClientBeginFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientBeginFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientBeginFileUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientBeginFileUpload_Request::InternalSwap(CCloud_ClientBeginFileUpload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_sha_, lhs_arena,
      &other->file_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, upload_batch_id_)
      + sizeof(CCloud_ClientBeginFileUpload_Request::upload_batch_id_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
  swap(platforms_to_sync_, other->platforms_to_sync_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientBeginFileUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[30]);
}

// ===================================================================

class ClientCloudFileUploadBlockDetails_HTTPHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCloudFileUploadBlockDetails_HTTPHeaders>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientCloudFileUploadBlockDetails_HTTPHeaders::ClientCloudFileUploadBlockDetails_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientCloudFileUploadBlockDetails.HTTPHeaders)
}
ClientCloudFileUploadBlockDetails_HTTPHeaders::ClientCloudFileUploadBlockDetails_HTTPHeaders(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientCloudFileUploadBlockDetails.HTTPHeaders)
}

inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientCloudFileUploadBlockDetails_HTTPHeaders::~ClientCloudFileUploadBlockDetails_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:ClientCloudFileUploadBlockDetails.HTTPHeaders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientCloudFileUploadBlockDetails_HTTPHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::ArenaDtor(void* object) {
  ClientCloudFileUploadBlockDetails_HTTPHeaders* _this = reinterpret_cast< ClientCloudFileUploadBlockDetails_HTTPHeaders* >(object);
  (void)_this;
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientCloudFileUploadBlockDetails.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCloudFileUploadBlockDetails_HTTPHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCloudFileUploadBlockDetails_HTTPHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientCloudFileUploadBlockDetails.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientCloudFileUploadBlockDetails.HTTPHeaders)
  return target;
}

size_t ClientCloudFileUploadBlockDetails_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientCloudFileUploadBlockDetails.HTTPHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientCloudFileUploadBlockDetails_HTTPHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientCloudFileUploadBlockDetails_HTTPHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientCloudFileUploadBlockDetails_HTTPHeaders::GetClassData() const { return &_class_data_; }

void ClientCloudFileUploadBlockDetails_HTTPHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientCloudFileUploadBlockDetails_HTTPHeaders *>(to)->MergeFrom(
      static_cast<const ClientCloudFileUploadBlockDetails_HTTPHeaders &>(from));
}


void ClientCloudFileUploadBlockDetails_HTTPHeaders::MergeFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientCloudFileUploadBlockDetails.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::CopyFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientCloudFileUploadBlockDetails.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCloudFileUploadBlockDetails_HTTPHeaders::IsInitialized() const {
  return true;
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::InternalSwap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCloudFileUploadBlockDetails_HTTPHeaders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[31]);
}

// ===================================================================

class ClientCloudFileUploadBlockDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCloudFileUploadBlockDetails>()._has_bits_);
  static void set_has_url_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_http_method(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_block_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_block_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_explicit_body_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_may_parallelize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ClientCloudFileUploadBlockDetails::ClientCloudFileUploadBlockDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  request_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientCloudFileUploadBlockDetails)
}
ClientCloudFileUploadBlockDetails::ClientCloudFileUploadBlockDetails(const ClientCloudFileUploadBlockDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_host()) {
    url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_host(), 
      GetArenaForAllocation());
  }
  url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_path()) {
    url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_path(), 
      GetArenaForAllocation());
  }
  explicit_body_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    explicit_body_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_explicit_body_data()) {
    explicit_body_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explicit_body_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&http_method_, &from.http_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_length_) -
    reinterpret_cast<char*>(&http_method_)) + sizeof(block_length_));
  // @@protoc_insertion_point(copy_constructor:ClientCloudFileUploadBlockDetails)
}

inline void ClientCloudFileUploadBlockDetails::SharedCtor() {
url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
explicit_body_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  explicit_body_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&http_method_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_length_) -
    reinterpret_cast<char*>(&http_method_)) + sizeof(block_length_));
}

ClientCloudFileUploadBlockDetails::~ClientCloudFileUploadBlockDetails() {
  // @@protoc_insertion_point(destructor:ClientCloudFileUploadBlockDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientCloudFileUploadBlockDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  explicit_body_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientCloudFileUploadBlockDetails::ArenaDtor(void* object) {
  ClientCloudFileUploadBlockDetails* _this = reinterpret_cast< ClientCloudFileUploadBlockDetails* >(object);
  (void)_this;
}
void ClientCloudFileUploadBlockDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientCloudFileUploadBlockDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCloudFileUploadBlockDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientCloudFileUploadBlockDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      explicit_body_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&http_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_length_) -
        reinterpret_cast<char*>(&http_method_)) + sizeof(block_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCloudFileUploadBlockDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url_host = 1 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientCloudFileUploadBlockDetails.url_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_path = 2 [(.description) = "Relative path on server to which file should be uploaded."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientCloudFileUploadBlockDetails.url_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_https = 3 [(.description) = "If true, use https, otherwise use http."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 http_method = 4 [(.description) = "EHTTPMethod to use for this block."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_http_method(&has_bits);
          http_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 block_offset = 6 [(.description) = "offset of file block to upload"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_block_offset(&has_bits);
          block_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 block_length = 7 [(.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_block_length(&has_bits);
          block_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes explicit_body_data = 8 [(.description) = "explicit body data to use, instead of file data, for this block"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_explicit_body_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool may_parallelize = 9 [(.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_may_parallelize(&has_bits);
          may_parallelize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCloudFileUploadBlockDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientCloudFileUploadBlockDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url_host = 1 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_host().data(), static_cast<int>(this->_internal_url_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ClientCloudFileUploadBlockDetails.url_host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url_host(), target);
  }

  // optional string url_path = 2 [(.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_path().data(), static_cast<int>(this->_internal_url_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ClientCloudFileUploadBlockDetails.url_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url_path(), target);
  }

  // optional bool use_https = 3 [(.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_https(), target);
  }

  // optional int32 http_method = 4 [(.description) = "EHTTPMethod to use for this block."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_http_method(), target);
  }

  // repeated .ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_request_headers(i), target, stream);
  }

  // optional uint64 block_offset = 6 [(.description) = "offset of file block to upload"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_block_offset(), target);
  }

  // optional uint32 block_length = 7 [(.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_block_length(), target);
  }

  // optional bytes explicit_body_data = 8 [(.description) = "explicit body data to use, instead of file data, for this block"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_explicit_body_data(), target);
  }

  // optional bool may_parallelize = 9 [(.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_may_parallelize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientCloudFileUploadBlockDetails)
  return target;
}

size_t ClientCloudFileUploadBlockDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientCloudFileUploadBlockDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url_host = 1 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_host());
    }

    // optional string url_path = 2 [(.description) = "Relative path on server to which file should be uploaded."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_path());
    }

    // optional bytes explicit_body_data = 8 [(.description) = "explicit body data to use, instead of file data, for this block"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_explicit_body_data());
    }

    // optional int32 http_method = 4 [(.description) = "EHTTPMethod to use for this block."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_http_method());
    }

    // optional bool use_https = 3 [(.description) = "If true, use https, otherwise use http."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool may_parallelize = 9 [(.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint64 block_offset = 6 [(.description) = "offset of file block to upload"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_block_offset());
    }

    // optional uint32 block_length = 7 [(.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_block_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientCloudFileUploadBlockDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientCloudFileUploadBlockDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientCloudFileUploadBlockDetails::GetClassData() const { return &_class_data_; }

void ClientCloudFileUploadBlockDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientCloudFileUploadBlockDetails *>(to)->MergeFrom(
      static_cast<const ClientCloudFileUploadBlockDetails &>(from));
}


void ClientCloudFileUploadBlockDetails::MergeFrom(const ClientCloudFileUploadBlockDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientCloudFileUploadBlockDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url_host(from._internal_url_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_path(from._internal_url_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_explicit_body_data(from._internal_explicit_body_data());
    }
    if (cached_has_bits & 0x00000008u) {
      http_method_ = from.http_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000020u) {
      may_parallelize_ = from.may_parallelize_;
    }
    if (cached_has_bits & 0x00000040u) {
      block_offset_ = from.block_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      block_length_ = from.block_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientCloudFileUploadBlockDetails::CopyFrom(const ClientCloudFileUploadBlockDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientCloudFileUploadBlockDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCloudFileUploadBlockDetails::IsInitialized() const {
  return true;
}

void ClientCloudFileUploadBlockDetails::InternalSwap(ClientCloudFileUploadBlockDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_headers_.InternalSwap(&other->request_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_host_, lhs_arena,
      &other->url_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_path_, lhs_arena,
      &other->url_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explicit_body_data_, lhs_arena,
      &other->explicit_body_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, block_length_)
      + sizeof(ClientCloudFileUploadBlockDetails::block_length_)
      - PROTOBUF_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, http_method_)>(
          reinterpret_cast<char*>(&http_method_),
          reinterpret_cast<char*>(&other->http_method_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCloudFileUploadBlockDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[32]);
}

// ===================================================================

class CCloud_ClientBeginFileUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientBeginFileUpload_Response>()._has_bits_);
  static void set_has_encrypt_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_ClientBeginFileUpload_Response::CCloud_ClientBeginFileUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientBeginFileUpload_Response)
}
CCloud_ClientBeginFileUpload_Response::CCloud_ClientBeginFileUpload_Response(const CCloud_ClientBeginFileUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      block_requests_(from.block_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypt_file_ = from.encrypt_file_;
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientBeginFileUpload_Response)
}

inline void CCloud_ClientBeginFileUpload_Response::SharedCtor() {
encrypt_file_ = false;
}

CCloud_ClientBeginFileUpload_Response::~CCloud_ClientBeginFileUpload_Response() {
  // @@protoc_insertion_point(destructor:CCloud_ClientBeginFileUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientBeginFileUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientBeginFileUpload_Response::ArenaDtor(void* object) {
  CCloud_ClientBeginFileUpload_Response* _this = reinterpret_cast< CCloud_ClientBeginFileUpload_Response* >(object);
  (void)_this;
}
void CCloud_ClientBeginFileUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientBeginFileUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientBeginFileUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientBeginFileUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_requests_.Clear();
  encrypt_file_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientBeginFileUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool encrypt_file = 1 [(.description) = "If true, the file should be encrypted by the client before upload"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_encrypt_file(&has_bits);
          encrypt_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ClientCloudFileUploadBlockDetails block_requests = 2 [(.description) = "HTTP requests to make to perform upload"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientBeginFileUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientBeginFileUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool encrypt_file = 1 [(.description) = "If true, the file should be encrypted by the client before upload"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_encrypt_file(), target);
  }

  // repeated .ClientCloudFileUploadBlockDetails block_requests = 2 [(.description) = "HTTP requests to make to perform upload"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_block_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientBeginFileUpload_Response)
  return target;
}

size_t CCloud_ClientBeginFileUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientBeginFileUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClientCloudFileUploadBlockDetails block_requests = 2 [(.description) = "HTTP requests to make to perform upload"];
  total_size += 1UL * this->_internal_block_requests_size();
  for (const auto& msg : this->block_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool encrypt_file = 1 [(.description) = "If true, the file should be encrypted by the client before upload"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientBeginFileUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientBeginFileUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientBeginFileUpload_Response::GetClassData() const { return &_class_data_; }

void CCloud_ClientBeginFileUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientBeginFileUpload_Response *>(to)->MergeFrom(
      static_cast<const CCloud_ClientBeginFileUpload_Response &>(from));
}


void CCloud_ClientBeginFileUpload_Response::MergeFrom(const CCloud_ClientBeginFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientBeginFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  block_requests_.MergeFrom(from.block_requests_);
  if (from._internal_has_encrypt_file()) {
    _internal_set_encrypt_file(from._internal_encrypt_file());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientBeginFileUpload_Response::CopyFrom(const CCloud_ClientBeginFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientBeginFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientBeginFileUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientBeginFileUpload_Response::InternalSwap(CCloud_ClientBeginFileUpload_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  block_requests_.InternalSwap(&other->block_requests_);
  swap(encrypt_file_, other->encrypt_file_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientBeginFileUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[33]);
}

// ===================================================================

class CCloud_ClientCommitFileUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientCommitFileUpload_Request>()._has_bits_);
  static void set_has_transfer_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_ClientCommitFileUpload_Request::CCloud_ClientCommitFileUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientCommitFileUpload_Request)
}
CCloud_ClientCommitFileUpload_Request::CCloud_ClientCommitFileUpload_Request(const CCloud_ClientCommitFileUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_sha()) {
    file_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_sha(), 
      GetArenaForAllocation());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&transfer_succeeded_, &from.transfer_succeeded_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientCommitFileUpload_Request)
}

inline void CCloud_ClientCommitFileUpload_Request::SharedCtor() {
file_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transfer_succeeded_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
}

CCloud_ClientCommitFileUpload_Request::~CCloud_ClientCommitFileUpload_Request() {
  // @@protoc_insertion_point(destructor:CCloud_ClientCommitFileUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientCommitFileUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientCommitFileUpload_Request::ArenaDtor(void* object) {
  CCloud_ClientCommitFileUpload_Request* _this = reinterpret_cast< CCloud_ClientCommitFileUpload_Request* >(object);
  (void)_this;
}
void CCloud_ClientCommitFileUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientCommitFileUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientCommitFileUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientCommitFileUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&transfer_succeeded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&transfer_succeeded_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientCommitFileUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool transfer_succeeded = 1 [(.description) = "True if all block uploads succeeded, false if any of them failed."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_transfer_succeeded(&has_bits);
          transfer_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes file_sha = 3 [(.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientCommitFileUpload_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientCommitFileUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientCommitFileUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.description) = "True if all block uploads succeeded, false if any of them failed."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_transfer_succeeded(), target);
  }

  // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional bytes file_sha = 3 [(.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_file_sha(), target);
  }

  // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientCommitFileUpload_Request.filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientCommitFileUpload_Request)
  return target;
}

size_t CCloud_ClientCommitFileUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientCommitFileUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes file_sha = 3 [(.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_file_sha());
    }

    // optional string filename = 4 [(.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bool transfer_succeeded = 1 [(.description) = "True if all block uploads succeeded, false if any of them failed."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 2 [(.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientCommitFileUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientCommitFileUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientCommitFileUpload_Request::GetClassData() const { return &_class_data_; }

void CCloud_ClientCommitFileUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientCommitFileUpload_Request *>(to)->MergeFrom(
      static_cast<const CCloud_ClientCommitFileUpload_Request &>(from));
}


void CCloud_ClientCommitFileUpload_Request::MergeFrom(const CCloud_ClientCommitFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientCommitFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_sha(from._internal_file_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_succeeded_ = from.transfer_succeeded_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientCommitFileUpload_Request::CopyFrom(const CCloud_ClientCommitFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientCommitFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientCommitFileUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientCommitFileUpload_Request::InternalSwap(CCloud_ClientCommitFileUpload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_sha_, lhs_arena,
      &other->file_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, appid_)
      + sizeof(CCloud_ClientCommitFileUpload_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, transfer_succeeded_)>(
          reinterpret_cast<char*>(&transfer_succeeded_),
          reinterpret_cast<char*>(&other->transfer_succeeded_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientCommitFileUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[34]);
}

// ===================================================================

class CCloud_ClientCommitFileUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientCommitFileUpload_Response>()._has_bits_);
  static void set_has_file_committed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_ClientCommitFileUpload_Response::CCloud_ClientCommitFileUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientCommitFileUpload_Response)
}
CCloud_ClientCommitFileUpload_Response::CCloud_ClientCommitFileUpload_Response(const CCloud_ClientCommitFileUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_committed_ = from.file_committed_;
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientCommitFileUpload_Response)
}

inline void CCloud_ClientCommitFileUpload_Response::SharedCtor() {
file_committed_ = false;
}

CCloud_ClientCommitFileUpload_Response::~CCloud_ClientCommitFileUpload_Response() {
  // @@protoc_insertion_point(destructor:CCloud_ClientCommitFileUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientCommitFileUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientCommitFileUpload_Response::ArenaDtor(void* object) {
  CCloud_ClientCommitFileUpload_Response* _this = reinterpret_cast< CCloud_ClientCommitFileUpload_Response* >(object);
  (void)_this;
}
void CCloud_ClientCommitFileUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientCommitFileUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientCommitFileUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientCommitFileUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_committed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientCommitFileUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_file_committed(&has_bits);
          file_committed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientCommitFileUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientCommitFileUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_file_committed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientCommitFileUpload_Response)
  return target;
}

size_t CCloud_ClientCommitFileUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientCommitFileUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool file_committed = 1 [(.description) = "True if the file was successfully committed, false otherwise."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientCommitFileUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientCommitFileUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientCommitFileUpload_Response::GetClassData() const { return &_class_data_; }

void CCloud_ClientCommitFileUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientCommitFileUpload_Response *>(to)->MergeFrom(
      static_cast<const CCloud_ClientCommitFileUpload_Response &>(from));
}


void CCloud_ClientCommitFileUpload_Response::MergeFrom(const CCloud_ClientCommitFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientCommitFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_committed()) {
    _internal_set_file_committed(from._internal_file_committed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientCommitFileUpload_Response::CopyFrom(const CCloud_ClientCommitFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientCommitFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientCommitFileUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientCommitFileUpload_Response::InternalSwap(CCloud_ClientCommitFileUpload_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_committed_, other->file_committed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientCommitFileUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[35]);
}

// ===================================================================

class CCloud_ClientFileDownload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientFileDownload_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_realm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_ClientFileDownload_Request::CCloud_ClientFileDownload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientFileDownload_Request)
}
CCloud_ClientFileDownload_Request::CCloud_ClientFileDownload_Request(const CCloud_ClientFileDownload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&realm_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(realm_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientFileDownload_Request)
}

inline void CCloud_ClientFileDownload_Request::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&realm_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(realm_));
}

CCloud_ClientFileDownload_Request::~CCloud_ClientFileDownload_Request() {
  // @@protoc_insertion_point(destructor:CCloud_ClientFileDownload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientFileDownload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Request::ArenaDtor(void* object) {
  CCloud_ClientFileDownload_Request* _this = reinterpret_cast< CCloud_ClientFileDownload_Request* >(object);
  (void)_this;
}
void CCloud_ClientFileDownload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientFileDownload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientFileDownload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientFileDownload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&realm_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(realm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientFileDownload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID the file is part of."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 2 [(.description) = "Filename of the file."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientFileDownload_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 realm = 3 [(.description) = "Steam Realm"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_realm(&has_bits);
          realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientFileDownload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientFileDownload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID the file is part of."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string filename = 2 [(.description) = "Filename of the file."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientFileDownload_Request.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // optional uint32 realm = 3 [(.description) = "Steam Realm"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_realm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientFileDownload_Request)
  return target;
}

size_t CCloud_ClientFileDownload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientFileDownload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string filename = 2 [(.description) = "Filename of the file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 appid = 1 [(.description) = "App ID the file is part of."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 realm = 3 [(.description) = "Steam Realm"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_realm());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientFileDownload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientFileDownload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientFileDownload_Request::GetClassData() const { return &_class_data_; }

void CCloud_ClientFileDownload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientFileDownload_Request *>(to)->MergeFrom(
      static_cast<const CCloud_ClientFileDownload_Request &>(from));
}


void CCloud_ClientFileDownload_Request::MergeFrom(const CCloud_ClientFileDownload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientFileDownload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      realm_ = from.realm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientFileDownload_Request::CopyFrom(const CCloud_ClientFileDownload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientFileDownload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Request::InternalSwap(CCloud_ClientFileDownload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientFileDownload_Request, realm_)
      + sizeof(CCloud_ClientFileDownload_Request::realm_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientFileDownload_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientFileDownload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[36]);
}

// ===================================================================

class CCloud_ClientFileDownload_Response_HTTPHeaders::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientFileDownload_Response_HTTPHeaders>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_ClientFileDownload_Response_HTTPHeaders::CCloud_ClientFileDownload_Response_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientFileDownload_Response.HTTPHeaders)
}
CCloud_ClientFileDownload_Response_HTTPHeaders::CCloud_ClientFileDownload_Response_HTTPHeaders(const CCloud_ClientFileDownload_Response_HTTPHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientFileDownload_Response.HTTPHeaders)
}

inline void CCloud_ClientFileDownload_Response_HTTPHeaders::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCloud_ClientFileDownload_Response_HTTPHeaders::~CCloud_ClientFileDownload_Response_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:CCloud_ClientFileDownload_Response.HTTPHeaders)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientFileDownload_Response_HTTPHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::ArenaDtor(void* object) {
  CCloud_ClientFileDownload_Response_HTTPHeaders* _this = reinterpret_cast< CCloud_ClientFileDownload_Response_HTTPHeaders* >(object);
  (void)_this;
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientFileDownload_Response.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientFileDownload_Response_HTTPHeaders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientFileDownload_Response.HTTPHeaders.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientFileDownload_Response.HTTPHeaders.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientFileDownload_Response_HTTPHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientFileDownload_Response.HTTPHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientFileDownload_Response.HTTPHeaders.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientFileDownload_Response.HTTPHeaders.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientFileDownload_Response.HTTPHeaders)
  return target;
}

size_t CCloud_ClientFileDownload_Response_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientFileDownload_Response.HTTPHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientFileDownload_Response_HTTPHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientFileDownload_Response_HTTPHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientFileDownload_Response_HTTPHeaders::GetClassData() const { return &_class_data_; }

void CCloud_ClientFileDownload_Response_HTTPHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientFileDownload_Response_HTTPHeaders *>(to)->MergeFrom(
      static_cast<const CCloud_ClientFileDownload_Response_HTTPHeaders &>(from));
}


void CCloud_ClientFileDownload_Response_HTTPHeaders::MergeFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientFileDownload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::CopyFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientFileDownload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Response_HTTPHeaders::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::InternalSwap(CCloud_ClientFileDownload_Response_HTTPHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientFileDownload_Response_HTTPHeaders::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[37]);
}

// ===================================================================

class CCloud_ClientFileDownload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientFileDownload_Response>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_explicit_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_url_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_encrypted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CCloud_ClientFileDownload_Response::CCloud_ClientFileDownload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  request_headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientFileDownload_Response)
}
CCloud_ClientFileDownload_Response::CCloud_ClientFileDownload_Response(const CCloud_ClientFileDownload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArenaForAllocation());
  }
  url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_host()) {
    url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_host(), 
      GetArenaForAllocation());
  }
  url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_path()) {
    url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&encrypted_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(encrypted_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientFileDownload_Response)
}

inline void CCloud_ClientFileDownload_Response::SharedCtor() {
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encrypted_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(encrypted_));
}

CCloud_ClientFileDownload_Response::~CCloud_ClientFileDownload_Response() {
  // @@protoc_insertion_point(destructor:CCloud_ClientFileDownload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientFileDownload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Response::ArenaDtor(void* object) {
  CCloud_ClientFileDownload_Response* _this = reinterpret_cast< CCloud_ClientFileDownload_Response* >(object);
  (void)_this;
}
void CCloud_ClientFileDownload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientFileDownload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientFileDownload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientFileDownload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      url_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_explicit_delete_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(is_explicit_delete_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&use_https_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypted_) -
        reinterpret_cast<char*>(&use_https_)) + sizeof(encrypted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientFileDownload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "Application the file belongs to"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in the Cloud"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raw_file_size = 3 [(.description) = "file size when decompressed and/or decrypted"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_raw_file_size(&has_bits);
          raw_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_file = 4 [(.description) = "SHA of file"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_explicit_delete = 6 [(.description) = "True if this is an explicitly deleted file"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_explicit_delete(&has_bits);
          is_explicit_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_host = 7 [(.description) = "Host to GET the file from"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_url_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientFileDownload_Response.url_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_path = 8 [(.description) = "Path on that host to use, including URL parameters if any"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_url_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientFileDownload_Response.url_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_https = 9 [(.description) = "If set, use HTTPS, else use HTTP"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_use_https(&has_bits);
          use_https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.description) = "Name-value pairs to be sent in HTTP GET request."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool encrypted = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_encrypted(&has_bits);
          encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientFileDownload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientFileDownload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "Application the file belongs to"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in the Cloud"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size(), target);
  }

  // optional uint32 raw_file_size = 3 [(.description) = "file size when decompressed and/or decrypted"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_raw_file_size(), target);
  }

  // optional bytes sha_file = 4 [(.description) = "SHA of file"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_file(), target);
  }

  // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time_stamp(), target);
  }

  // optional bool is_explicit_delete = 6 [(.description) = "True if this is an explicitly deleted file"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_explicit_delete(), target);
  }

  // optional string url_host = 7 [(.description) = "Host to GET the file from"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_host().data(), static_cast<int>(this->_internal_url_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientFileDownload_Response.url_host");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_url_host(), target);
  }

  // optional string url_path = 8 [(.description) = "Path on that host to use, including URL parameters if any"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_path().data(), static_cast<int>(this->_internal_url_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientFileDownload_Response.url_path");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url_path(), target);
  }

  // optional bool use_https = 9 [(.description) = "If set, use HTTPS, else use HTTP"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_use_https(), target);
  }

  // repeated .CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.description) = "Name-value pairs to be sent in HTTP GET request."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_request_headers(i), target, stream);
  }

  // optional bool encrypted = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_encrypted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientFileDownload_Response)
  return target;
}

size_t CCloud_ClientFileDownload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientFileDownload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.description) = "Name-value pairs to be sent in HTTP GET request."];
  total_size += 1UL * this->_internal_request_headers_size();
  for (const auto& msg : this->request_headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sha_file = 4 [(.description) = "SHA of file"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional string url_host = 7 [(.description) = "Host to GET the file from"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_host());
    }

    // optional string url_path = 8 [(.description) = "Path on that host to use, including URL parameters if any"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_path());
    }

    // optional uint32 appid = 1 [(.description) = "Application the file belongs to"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 file_size = 2 [(.description) = "file size as transmitted and stored in the Cloud"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional uint64 time_stamp = 5 [(.description) = "Timestamp of file"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
    }

    // optional uint32 raw_file_size = 3 [(.description) = "file size when decompressed and/or decrypted"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_raw_file_size());
    }

    // optional bool is_explicit_delete = 6 [(.description) = "True if this is an explicitly deleted file"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool use_https = 9 [(.description) = "If set, use HTTPS, else use HTTP"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool encrypted = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientFileDownload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientFileDownload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientFileDownload_Response::GetClassData() const { return &_class_data_; }

void CCloud_ClientFileDownload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientFileDownload_Response *>(to)->MergeFrom(
      static_cast<const CCloud_ClientFileDownload_Response &>(from));
}


void CCloud_ClientFileDownload_Response::MergeFrom(const CCloud_ClientFileDownload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientFileDownload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_host(from._internal_url_host());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_url_path(from._internal_url_path());
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000200u) {
      encrypted_ = from.encrypted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientFileDownload_Response::CopyFrom(const CCloud_ClientFileDownload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientFileDownload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Response::InternalSwap(CCloud_ClientFileDownload_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_headers_.InternalSwap(&other->request_headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_file_, lhs_arena,
      &other->sha_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_host_, lhs_arena,
      &other->url_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_path_, lhs_arena,
      &other->url_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientFileDownload_Response, encrypted_)
      + sizeof(CCloud_ClientFileDownload_Response::encrypted_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientFileDownload_Response, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientFileDownload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[38]);
}

// ===================================================================

class CCloud_ClientDeleteFile_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientDeleteFile_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_explicit_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upload_batch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCloud_ClientDeleteFile_Request::CCloud_ClientDeleteFile_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientDeleteFile_Request)
}
CCloud_ClientDeleteFile_Request::CCloud_ClientDeleteFile_Request(const CCloud_ClientDeleteFile_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_batch_id_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(upload_batch_id_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientDeleteFile_Request)
}

inline void CCloud_ClientDeleteFile_Request::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upload_batch_id_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(upload_batch_id_));
}

CCloud_ClientDeleteFile_Request::~CCloud_ClientDeleteFile_Request() {
  // @@protoc_insertion_point(destructor:CCloud_ClientDeleteFile_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientDeleteFile_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientDeleteFile_Request::ArenaDtor(void* object) {
  CCloud_ClientDeleteFile_Request* _this = reinterpret_cast< CCloud_ClientDeleteFile_Request* >(object);
  (void)_this;
}
void CCloud_ClientDeleteFile_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientDeleteFile_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientDeleteFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientDeleteFile_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_batch_id_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(upload_batch_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientDeleteFile_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID for which the file is being deleted."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 2 [(.description) = "Filename of file."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_ClientDeleteFile_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_explicit_delete = 3 [(.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_explicit_delete(&has_bits);
          is_explicit_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upload_batch_id = 4 [(.description) = "ID of this batch."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_upload_batch_id(&has_bits);
          upload_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientDeleteFile_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientDeleteFile_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID for which the file is being deleted."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string filename = 2 [(.description) = "Filename of file."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_ClientDeleteFile_Request.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // optional bool is_explicit_delete = 3 [(.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_explicit_delete(), target);
  }

  // optional uint64 upload_batch_id = 4 [(.description) = "ID of this batch."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_upload_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientDeleteFile_Request)
  return target;
}

size_t CCloud_ClientDeleteFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientDeleteFile_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string filename = 2 [(.description) = "Filename of file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 appid = 1 [(.description) = "App ID for which the file is being deleted."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_explicit_delete = 3 [(.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 upload_batch_id = 4 [(.description) = "ID of this batch."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_batch_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientDeleteFile_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientDeleteFile_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientDeleteFile_Request::GetClassData() const { return &_class_data_; }

void CCloud_ClientDeleteFile_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientDeleteFile_Request *>(to)->MergeFrom(
      static_cast<const CCloud_ClientDeleteFile_Request &>(from));
}


void CCloud_ClientDeleteFile_Request::MergeFrom(const CCloud_ClientDeleteFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientDeleteFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    if (cached_has_bits & 0x00000008u) {
      upload_batch_id_ = from.upload_batch_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientDeleteFile_Request::CopyFrom(const CCloud_ClientDeleteFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientDeleteFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientDeleteFile_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientDeleteFile_Request::InternalSwap(CCloud_ClientDeleteFile_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientDeleteFile_Request, upload_batch_id_)
      + sizeof(CCloud_ClientDeleteFile_Request::upload_batch_id_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientDeleteFile_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientDeleteFile_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[39]);
}

// ===================================================================

class CCloud_ClientDeleteFile_Response::_Internal {
 public:
};

CCloud_ClientDeleteFile_Response::CCloud_ClientDeleteFile_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientDeleteFile_Response)
}
CCloud_ClientDeleteFile_Response::CCloud_ClientDeleteFile_Response(const CCloud_ClientDeleteFile_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientDeleteFile_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientDeleteFile_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientDeleteFile_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientDeleteFile_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[40]);
}

// ===================================================================

class CCloud_ClientConflictResolution_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientConflictResolution_Notification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chose_local_files(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_ClientConflictResolution_Notification::CCloud_ClientConflictResolution_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientConflictResolution_Notification)
}
CCloud_ClientConflictResolution_Notification::CCloud_ClientConflictResolution_Notification(const CCloud_ClientConflictResolution_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chose_local_files_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(chose_local_files_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientConflictResolution_Notification)
}

inline void CCloud_ClientConflictResolution_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chose_local_files_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(chose_local_files_));
}

CCloud_ClientConflictResolution_Notification::~CCloud_ClientConflictResolution_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_ClientConflictResolution_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientConflictResolution_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientConflictResolution_Notification::ArenaDtor(void* object) {
  CCloud_ClientConflictResolution_Notification* _this = reinterpret_cast< CCloud_ClientConflictResolution_Notification* >(object);
  (void)_this;
}
void CCloud_ClientConflictResolution_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientConflictResolution_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientConflictResolution_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientConflictResolution_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chose_local_files_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(chose_local_files_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientConflictResolution_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID for which the conflict was resolved."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool chose_local_files = 2 [(.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chose_local_files(&has_bits);
          chose_local_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientConflictResolution_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientConflictResolution_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID for which the conflict was resolved."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional bool chose_local_files = 2 [(.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_chose_local_files(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientConflictResolution_Notification)
  return target;
}

size_t CCloud_ClientConflictResolution_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientConflictResolution_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1 [(.description) = "App ID for which the conflict was resolved."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool chose_local_files = 2 [(.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientConflictResolution_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientConflictResolution_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientConflictResolution_Notification::GetClassData() const { return &_class_data_; }

void CCloud_ClientConflictResolution_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientConflictResolution_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_ClientConflictResolution_Notification &>(from));
}


void CCloud_ClientConflictResolution_Notification::MergeFrom(const CCloud_ClientConflictResolution_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientConflictResolution_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      chose_local_files_ = from.chose_local_files_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientConflictResolution_Notification::CopyFrom(const CCloud_ClientConflictResolution_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientConflictResolution_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientConflictResolution_Notification::IsInitialized() const {
  return true;
}

void CCloud_ClientConflictResolution_Notification::InternalSwap(CCloud_ClientConflictResolution_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientConflictResolution_Notification, chose_local_files_)
      + sizeof(CCloud_ClientConflictResolution_Notification::chose_local_files_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientConflictResolution_Notification, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientConflictResolution_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[41]);
}

// ===================================================================

class CCloud_EnumerateUserApps_Request::_Internal {
 public:
};

CCloud_EnumerateUserApps_Request::CCloud_EnumerateUserApps_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCloud_EnumerateUserApps_Request)
}
CCloud_EnumerateUserApps_Request::CCloud_EnumerateUserApps_Request(const CCloud_EnumerateUserApps_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserApps_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_EnumerateUserApps_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_EnumerateUserApps_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCloud_EnumerateUserApps_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[42]);
}

// ===================================================================

class CCloud_EnumerateUserApps_Response_Apps::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_EnumerateUserApps_Response_Apps>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_totalcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_totalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCloud_EnumerateUserApps_Response_Apps::CCloud_EnumerateUserApps_Response_Apps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_EnumerateUserApps_Response.Apps)
}
CCloud_EnumerateUserApps_Response_Apps::CCloud_EnumerateUserApps_Response_Apps(const CCloud_EnumerateUserApps_Response_Apps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalsize_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(totalsize_));
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserApps_Response.Apps)
}

inline void CCloud_EnumerateUserApps_Response_Apps::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totalsize_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(totalsize_));
}

CCloud_EnumerateUserApps_Response_Apps::~CCloud_EnumerateUserApps_Response_Apps() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserApps_Response.Apps)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_EnumerateUserApps_Response_Apps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_EnumerateUserApps_Response_Apps::ArenaDtor(void* object) {
  CCloud_EnumerateUserApps_Response_Apps* _this = reinterpret_cast< CCloud_EnumerateUserApps_Response_Apps* >(object);
  (void)_this;
}
void CCloud_EnumerateUserApps_Response_Apps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_EnumerateUserApps_Response_Apps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_EnumerateUserApps_Response_Apps::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_EnumerateUserApps_Response.Apps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalsize_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(totalsize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_EnumerateUserApps_Response_Apps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 totalcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_totalcount(&has_bits);
          totalcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 totalsize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_totalsize(&has_bits);
          totalsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_EnumerateUserApps_Response_Apps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserApps_Response.Apps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional int32 totalcount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totalcount(), target);
  }

  // optional int64 totalsize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_totalsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserApps_Response.Apps)
  return target;
}

size_t CCloud_EnumerateUserApps_Response_Apps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_EnumerateUserApps_Response.Apps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional int32 totalcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_totalcount());
    }

    // optional int64 totalsize = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_totalsize());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_EnumerateUserApps_Response_Apps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_EnumerateUserApps_Response_Apps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_EnumerateUserApps_Response_Apps::GetClassData() const { return &_class_data_; }

void CCloud_EnumerateUserApps_Response_Apps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_EnumerateUserApps_Response_Apps *>(to)->MergeFrom(
      static_cast<const CCloud_EnumerateUserApps_Response_Apps &>(from));
}


void CCloud_EnumerateUserApps_Response_Apps::MergeFrom(const CCloud_EnumerateUserApps_Response_Apps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_EnumerateUserApps_Response.Apps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      totalcount_ = from.totalcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalsize_ = from.totalsize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_EnumerateUserApps_Response_Apps::CopyFrom(const CCloud_EnumerateUserApps_Response_Apps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_EnumerateUserApps_Response.Apps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserApps_Response_Apps::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserApps_Response_Apps::InternalSwap(CCloud_EnumerateUserApps_Response_Apps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserApps_Response_Apps, totalsize_)
      + sizeof(CCloud_EnumerateUserApps_Response_Apps::totalsize_)
      - PROTOBUF_FIELD_OFFSET(CCloud_EnumerateUserApps_Response_Apps, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_EnumerateUserApps_Response_Apps::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[43]);
}

// ===================================================================

class CCloud_EnumerateUserApps_Response::_Internal {
 public:
};

CCloud_EnumerateUserApps_Response::CCloud_EnumerateUserApps_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_EnumerateUserApps_Response)
}
CCloud_EnumerateUserApps_Response::CCloud_EnumerateUserApps_Response(const CCloud_EnumerateUserApps_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_EnumerateUserApps_Response)
}

inline void CCloud_EnumerateUserApps_Response::SharedCtor() {
}

CCloud_EnumerateUserApps_Response::~CCloud_EnumerateUserApps_Response() {
  // @@protoc_insertion_point(destructor:CCloud_EnumerateUserApps_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_EnumerateUserApps_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_EnumerateUserApps_Response::ArenaDtor(void* object) {
  CCloud_EnumerateUserApps_Response* _this = reinterpret_cast< CCloud_EnumerateUserApps_Response* >(object);
  (void)_this;
}
void CCloud_EnumerateUserApps_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_EnumerateUserApps_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_EnumerateUserApps_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_EnumerateUserApps_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_EnumerateUserApps_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCloud_EnumerateUserApps_Response.Apps apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_EnumerateUserApps_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_EnumerateUserApps_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCloud_EnumerateUserApps_Response.Apps apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_EnumerateUserApps_Response)
  return target;
}

size_t CCloud_EnumerateUserApps_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_EnumerateUserApps_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_EnumerateUserApps_Response.Apps apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_EnumerateUserApps_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_EnumerateUserApps_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_EnumerateUserApps_Response::GetClassData() const { return &_class_data_; }

void CCloud_EnumerateUserApps_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_EnumerateUserApps_Response *>(to)->MergeFrom(
      static_cast<const CCloud_EnumerateUserApps_Response &>(from));
}


void CCloud_EnumerateUserApps_Response::MergeFrom(const CCloud_EnumerateUserApps_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_EnumerateUserApps_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_EnumerateUserApps_Response::CopyFrom(const CCloud_EnumerateUserApps_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_EnumerateUserApps_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserApps_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserApps_Response::InternalSwap(CCloud_EnumerateUserApps_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_EnumerateUserApps_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[44]);
}

// ===================================================================

class CCloud_GetAppFileChangelist_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetAppFileChangelist_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_synced_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_GetAppFileChangelist_Request::CCloud_GetAppFileChangelist_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_GetAppFileChangelist_Request)
}
CCloud_GetAppFileChangelist_Request::CCloud_GetAppFileChangelist_Request(const CCloud_GetAppFileChangelist_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&synced_change_number_, &from.synced_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&synced_change_number_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_GetAppFileChangelist_Request)
}

inline void CCloud_GetAppFileChangelist_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&synced_change_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&synced_change_number_)) + sizeof(appid_));
}

CCloud_GetAppFileChangelist_Request::~CCloud_GetAppFileChangelist_Request() {
  // @@protoc_insertion_point(destructor:CCloud_GetAppFileChangelist_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_GetAppFileChangelist_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_GetAppFileChangelist_Request::ArenaDtor(void* object) {
  CCloud_GetAppFileChangelist_Request* _this = reinterpret_cast< CCloud_GetAppFileChangelist_Request* >(object);
  (void)_this;
}
void CCloud_GetAppFileChangelist_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_GetAppFileChangelist_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_GetAppFileChangelist_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetAppFileChangelist_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&synced_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&synced_change_number_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_GetAppFileChangelist_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 synced_change_number = 2 [(.description) = "Change Number to which local machine was last successfully synced"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_synced_change_number(&has_bits);
          synced_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_GetAppFileChangelist_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetAppFileChangelist_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App ID"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 synced_change_number = 2 [(.description) = "Change Number to which local machine was last successfully synced"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_synced_change_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetAppFileChangelist_Request)
  return target;
}

size_t CCloud_GetAppFileChangelist_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetAppFileChangelist_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 synced_change_number = 2 [(.description) = "Change Number to which local machine was last successfully synced"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_synced_change_number());
    }

    // optional uint32 appid = 1 [(.description) = "App ID"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetAppFileChangelist_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_GetAppFileChangelist_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetAppFileChangelist_Request::GetClassData() const { return &_class_data_; }

void CCloud_GetAppFileChangelist_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_GetAppFileChangelist_Request *>(to)->MergeFrom(
      static_cast<const CCloud_GetAppFileChangelist_Request &>(from));
}


void CCloud_GetAppFileChangelist_Request::MergeFrom(const CCloud_GetAppFileChangelist_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetAppFileChangelist_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      synced_change_number_ = from.synced_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetAppFileChangelist_Request::CopyFrom(const CCloud_GetAppFileChangelist_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetAppFileChangelist_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetAppFileChangelist_Request::IsInitialized() const {
  return true;
}

void CCloud_GetAppFileChangelist_Request::InternalSwap(CCloud_GetAppFileChangelist_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_GetAppFileChangelist_Request, appid_)
      + sizeof(CCloud_GetAppFileChangelist_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_GetAppFileChangelist_Request, synced_change_number_)>(
          reinterpret_cast<char*>(&synced_change_number_),
          reinterpret_cast<char*>(&other->synced_change_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetAppFileChangelist_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[45]);
}

// ===================================================================

class CCloud_AppFileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_AppFileInfo>()._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_raw_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_persist_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_platforms_to_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_path_prefix_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_machine_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CCloud_AppFileInfo::CCloud_AppFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_AppFileInfo)
}
CCloud_AppFileInfo::CCloud_AppFileInfo(const CCloud_AppFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArenaForAllocation());
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&machine_name_index_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(machine_name_index_));
  // @@protoc_insertion_point(copy_constructor:CCloud_AppFileInfo)
}

inline void CCloud_AppFileInfo::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_stamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&machine_name_index_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(machine_name_index_));
}

CCloud_AppFileInfo::~CCloud_AppFileInfo() {
  // @@protoc_insertion_point(destructor:CCloud_AppFileInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_AppFileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_AppFileInfo::ArenaDtor(void* object) {
  CCloud_AppFileInfo* _this = reinterpret_cast< CCloud_AppFileInfo* >(object);
  (void)_this;
}
void CCloud_AppFileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_AppFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_AppFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_AppFileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&machine_name_index_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(machine_name_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_AppFileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_name = 1 [(.description) = "unqualified filename"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_AppFileInfo.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_file = 2 [(.description) = "SHA of file"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 time_stamp = 3 [(.description) = "server timestamp of last modification"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raw_file_size = 4 [(.description) = "size of raw file"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_raw_file_size(&has_bits);
          raw_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECloudStoragePersistState persist_state = 5 [default = k_ECloudStoragePersistStatePersisted, (.description) = "current persist state of the file"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECloudStoragePersistState_IsValid(val))) {
            _internal_set_persist_state(static_cast<::ECloudStoragePersistState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platforms_to_sync = 6 [(.description) = "ERemoteStoragePlatform bits"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_platforms_to_sync(&has_bits);
          platforms_to_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 path_prefix_index = 7 [(.description) = "index into string table of path prefixes"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_path_prefix_index(&has_bits);
          path_prefix_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 machine_name_index = 8 [(.description) = "what machine last modified this file"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_machine_name_index(&has_bits);
          machine_name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_AppFileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_AppFileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1 [(.description) = "unqualified filename"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_AppFileInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // optional bytes sha_file = 2 [(.description) = "SHA of file"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha_file(), target);
  }

  // optional uint64 time_stamp = 3 [(.description) = "server timestamp of last modification"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_time_stamp(), target);
  }

  // optional uint32 raw_file_size = 4 [(.description) = "size of raw file"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_raw_file_size(), target);
  }

  // optional .ECloudStoragePersistState persist_state = 5 [default = k_ECloudStoragePersistStatePersisted, (.description) = "current persist state of the file"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_persist_state(), target);
  }

  // optional uint32 platforms_to_sync = 6 [(.description) = "ERemoteStoragePlatform bits"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_platforms_to_sync(), target);
  }

  // optional uint32 path_prefix_index = 7 [(.description) = "index into string table of path prefixes"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_path_prefix_index(), target);
  }

  // optional uint32 machine_name_index = 8 [(.description) = "what machine last modified this file"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_machine_name_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_AppFileInfo)
  return target;
}

size_t CCloud_AppFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_AppFileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_name = 1 [(.description) = "unqualified filename"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional bytes sha_file = 2 [(.description) = "SHA of file"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional uint64 time_stamp = 3 [(.description) = "server timestamp of last modification"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
    }

    // optional uint32 raw_file_size = 4 [(.description) = "size of raw file"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_raw_file_size());
    }

    // optional .ECloudStoragePersistState persist_state = 5 [default = k_ECloudStoragePersistStatePersisted, (.description) = "current persist state of the file"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_persist_state());
    }

    // optional uint32 platforms_to_sync = 6 [(.description) = "ERemoteStoragePlatform bits"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_platforms_to_sync());
    }

    // optional uint32 path_prefix_index = 7 [(.description) = "index into string table of path prefixes"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_path_prefix_index());
    }

    // optional uint32 machine_name_index = 8 [(.description) = "what machine last modified this file"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_machine_name_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppFileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_AppFileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppFileInfo::GetClassData() const { return &_class_data_; }

void CCloud_AppFileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_AppFileInfo *>(to)->MergeFrom(
      static_cast<const CCloud_AppFileInfo &>(from));
}


void CCloud_AppFileInfo::MergeFrom(const CCloud_AppFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_AppFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000004u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      persist_state_ = from.persist_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    if (cached_has_bits & 0x00000040u) {
      path_prefix_index_ = from.path_prefix_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      machine_name_index_ = from.machine_name_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_AppFileInfo::CopyFrom(const CCloud_AppFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_AppFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_AppFileInfo::IsInitialized() const {
  return true;
}

void CCloud_AppFileInfo::InternalSwap(CCloud_AppFileInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_file_, lhs_arena,
      &other->sha_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_AppFileInfo, machine_name_index_)
      + sizeof(CCloud_AppFileInfo::machine_name_index_)
      - PROTOBUF_FIELD_OFFSET(CCloud_AppFileInfo, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppFileInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[46]);
}

// ===================================================================

class CCloud_GetAppFileChangelist_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_GetAppFileChangelist_Response>()._has_bits_);
  static void set_has_current_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_only_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_buildid_hwm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCloud_GetAppFileChangelist_Response::CCloud_GetAppFileChangelist_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_(arena),
  path_prefixes_(arena),
  machine_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_GetAppFileChangelist_Response)
}
CCloud_GetAppFileChangelist_Response::CCloud_GetAppFileChangelist_Response(const CCloud_GetAppFileChangelist_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      files_(from.files_),
      path_prefixes_(from.path_prefixes_),
      machine_names_(from.machine_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_change_number_, &from.current_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_only_delta_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(is_only_delta_));
  // @@protoc_insertion_point(copy_constructor:CCloud_GetAppFileChangelist_Response)
}

inline void CCloud_GetAppFileChangelist_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_change_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_only_delta_) -
    reinterpret_cast<char*>(&current_change_number_)) + sizeof(is_only_delta_));
}

CCloud_GetAppFileChangelist_Response::~CCloud_GetAppFileChangelist_Response() {
  // @@protoc_insertion_point(destructor:CCloud_GetAppFileChangelist_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_GetAppFileChangelist_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_GetAppFileChangelist_Response::ArenaDtor(void* object) {
  CCloud_GetAppFileChangelist_Response* _this = reinterpret_cast< CCloud_GetAppFileChangelist_Response* >(object);
  (void)_this;
}
void CCloud_GetAppFileChangelist_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_GetAppFileChangelist_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_GetAppFileChangelist_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_GetAppFileChangelist_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  path_prefixes_.Clear();
  machine_names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&current_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_only_delta_) -
        reinterpret_cast<char*>(&current_change_number_)) + sizeof(is_only_delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_GetAppFileChangelist_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 current_change_number = 1 [(.description) = "Change Number current on server"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_current_change_number(&has_bits);
          current_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCloud_AppFileInfo files = 2 [(.description) = "List of files; may be the full list of extant/deleted files, or just a delta from the client list"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_only_delta = 3 [(.description) = "If true, \'files\' omits any files that have not changed since client\'s change ID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_only_delta(&has_bits);
          is_only_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string path_prefixes = 4 [(.description) = "string table of path prefixes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_path_prefixes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_GetAppFileChangelist_Response.path_prefixes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string machine_names = 5 [(.description) = "string table of machine names"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_machine_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_GetAppFileChangelist_Response.machine_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 app_buildid_hwm = 6 [(.description) = "highest app build ID which has uploaded data"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_app_buildid_hwm(&has_bits);
          app_buildid_hwm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_GetAppFileChangelist_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_GetAppFileChangelist_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 current_change_number = 1 [(.description) = "Change Number current on server"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_change_number(), target);
  }

  // repeated .CCloud_AppFileInfo files = 2 [(.description) = "List of files; may be the full list of extant/deleted files, or just a delta from the client list"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_files(i), target, stream);
  }

  // optional bool is_only_delta = 3 [(.description) = "If true, \'files\' omits any files that have not changed since client\'s change ID"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_only_delta(), target);
  }

  // repeated string path_prefixes = 4 [(.description) = "string table of path prefixes"];
  for (int i = 0, n = this->_internal_path_prefixes_size(); i < n; i++) {
    const auto& s = this->_internal_path_prefixes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_GetAppFileChangelist_Response.path_prefixes");
    target = stream->WriteString(4, s, target);
  }

  // repeated string machine_names = 5 [(.description) = "string table of machine names"];
  for (int i = 0, n = this->_internal_machine_names_size(); i < n; i++) {
    const auto& s = this->_internal_machine_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_GetAppFileChangelist_Response.machine_names");
    target = stream->WriteString(5, s, target);
  }

  // optional uint64 app_buildid_hwm = 6 [(.description) = "highest app build ID which has uploaded data"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_app_buildid_hwm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_GetAppFileChangelist_Response)
  return target;
}

size_t CCloud_GetAppFileChangelist_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_GetAppFileChangelist_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_AppFileInfo files = 2 [(.description) = "List of files; may be the full list of extant/deleted files, or just a delta from the client list"];
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string path_prefixes = 4 [(.description) = "string table of path prefixes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(path_prefixes_.size());
  for (int i = 0, n = path_prefixes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      path_prefixes_.Get(i));
  }

  // repeated string machine_names = 5 [(.description) = "string table of machine names"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(machine_names_.size());
  for (int i = 0, n = machine_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      machine_names_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 current_change_number = 1 [(.description) = "Change Number current on server"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_current_change_number());
    }

    // optional uint64 app_buildid_hwm = 6 [(.description) = "highest app build ID which has uploaded data"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_app_buildid_hwm());
    }

    // optional bool is_only_delta = 3 [(.description) = "If true, \'files\' omits any files that have not changed since client\'s change ID"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_GetAppFileChangelist_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_GetAppFileChangelist_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_GetAppFileChangelist_Response::GetClassData() const { return &_class_data_; }

void CCloud_GetAppFileChangelist_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_GetAppFileChangelist_Response *>(to)->MergeFrom(
      static_cast<const CCloud_GetAppFileChangelist_Response &>(from));
}


void CCloud_GetAppFileChangelist_Response::MergeFrom(const CCloud_GetAppFileChangelist_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_GetAppFileChangelist_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  path_prefixes_.MergeFrom(from.path_prefixes_);
  machine_names_.MergeFrom(from.machine_names_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      current_change_number_ = from.current_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_buildid_hwm_ = from.app_buildid_hwm_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_only_delta_ = from.is_only_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_GetAppFileChangelist_Response::CopyFrom(const CCloud_GetAppFileChangelist_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_GetAppFileChangelist_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetAppFileChangelist_Response::IsInitialized() const {
  return true;
}

void CCloud_GetAppFileChangelist_Response::InternalSwap(CCloud_GetAppFileChangelist_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  files_.InternalSwap(&other->files_);
  path_prefixes_.InternalSwap(&other->path_prefixes_);
  machine_names_.InternalSwap(&other->machine_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_GetAppFileChangelist_Response, is_only_delta_)
      + sizeof(CCloud_GetAppFileChangelist_Response::is_only_delta_)
      - PROTOBUF_FIELD_OFFSET(CCloud_GetAppFileChangelist_Response, current_change_number_)>(
          reinterpret_cast<char*>(&current_change_number_),
          reinterpret_cast<char*>(&other->current_change_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_GetAppFileChangelist_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[47]);
}

// ===================================================================

class CCloud_AppSessionSuspend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_AppSessionSuspend_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cloud_sync_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCloud_AppSessionSuspend_Request::CCloud_AppSessionSuspend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_AppSessionSuspend_Request)
}
CCloud_AppSessionSuspend_Request::CCloud_AppSessionSuspend_Request(const CCloud_AppSessionSuspend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cloud_sync_completed_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(cloud_sync_completed_));
  // @@protoc_insertion_point(copy_constructor:CCloud_AppSessionSuspend_Request)
}

inline void CCloud_AppSessionSuspend_Request::SharedCtor() {
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cloud_sync_completed_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(cloud_sync_completed_));
}

CCloud_AppSessionSuspend_Request::~CCloud_AppSessionSuspend_Request() {
  // @@protoc_insertion_point(destructor:CCloud_AppSessionSuspend_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_AppSessionSuspend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_AppSessionSuspend_Request::ArenaDtor(void* object) {
  CCloud_AppSessionSuspend_Request* _this = reinterpret_cast< CCloud_AppSessionSuspend_Request* >(object);
  (void)_this;
}
void CCloud_AppSessionSuspend_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_AppSessionSuspend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_AppSessionSuspend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_AppSessionSuspend_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cloud_sync_completed_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(cloud_sync_completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_AppSessionSuspend_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_AppSessionSuspend_Request.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cloud_sync_completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cloud_sync_completed(&has_bits);
          cloud_sync_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_AppSessionSuspend_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_AppSessionSuspend_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_AppSessionSuspend_Request.machine_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_machine_name(), target);
  }

  // optional bool cloud_sync_completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_cloud_sync_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_AppSessionSuspend_Request)
  return target;
}

size_t CCloud_AppSessionSuspend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_AppSessionSuspend_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string machine_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional uint64 client_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool cloud_sync_completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppSessionSuspend_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_AppSessionSuspend_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppSessionSuspend_Request::GetClassData() const { return &_class_data_; }

void CCloud_AppSessionSuspend_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_AppSessionSuspend_Request *>(to)->MergeFrom(
      static_cast<const CCloud_AppSessionSuspend_Request &>(from));
}


void CCloud_AppSessionSuspend_Request::MergeFrom(const CCloud_AppSessionSuspend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_AppSessionSuspend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cloud_sync_completed_ = from.cloud_sync_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_AppSessionSuspend_Request::CopyFrom(const CCloud_AppSessionSuspend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_AppSessionSuspend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_AppSessionSuspend_Request::IsInitialized() const {
  return true;
}

void CCloud_AppSessionSuspend_Request::InternalSwap(CCloud_AppSessionSuspend_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_, lhs_arena,
      &other->machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_AppSessionSuspend_Request, cloud_sync_completed_)
      + sizeof(CCloud_AppSessionSuspend_Request::cloud_sync_completed_)
      - PROTOBUF_FIELD_OFFSET(CCloud_AppSessionSuspend_Request, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppSessionSuspend_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[48]);
}

// ===================================================================

class CCloud_AppSessionSuspend_Response::_Internal {
 public:
};

CCloud_AppSessionSuspend_Response::CCloud_AppSessionSuspend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCloud_AppSessionSuspend_Response)
}
CCloud_AppSessionSuspend_Response::CCloud_AppSessionSuspend_Response(const CCloud_AppSessionSuspend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_AppSessionSuspend_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppSessionSuspend_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppSessionSuspend_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppSessionSuspend_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[49]);
}

// ===================================================================

class CCloud_AppSessionResume_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_AppSessionResume_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_AppSessionResume_Request::CCloud_AppSessionResume_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_AppSessionResume_Request)
}
CCloud_AppSessionResume_Request::CCloud_AppSessionResume_Request(const CCloud_AppSessionResume_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_AppSessionResume_Request)
}

inline void CCloud_AppSessionResume_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(appid_));
}

CCloud_AppSessionResume_Request::~CCloud_AppSessionResume_Request() {
  // @@protoc_insertion_point(destructor:CCloud_AppSessionResume_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_AppSessionResume_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_AppSessionResume_Request::ArenaDtor(void* object) {
  CCloud_AppSessionResume_Request* _this = reinterpret_cast< CCloud_AppSessionResume_Request* >(object);
  (void)_this;
}
void CCloud_AppSessionResume_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_AppSessionResume_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_AppSessionResume_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_AppSessionResume_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_AppSessionResume_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_AppSessionResume_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_AppSessionResume_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 client_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_AppSessionResume_Request)
  return target;
}

size_t CCloud_AppSessionResume_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_AppSessionResume_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 client_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppSessionResume_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_AppSessionResume_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppSessionResume_Request::GetClassData() const { return &_class_data_; }

void CCloud_AppSessionResume_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_AppSessionResume_Request *>(to)->MergeFrom(
      static_cast<const CCloud_AppSessionResume_Request &>(from));
}


void CCloud_AppSessionResume_Request::MergeFrom(const CCloud_AppSessionResume_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_AppSessionResume_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_AppSessionResume_Request::CopyFrom(const CCloud_AppSessionResume_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_AppSessionResume_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_AppSessionResume_Request::IsInitialized() const {
  return true;
}

void CCloud_AppSessionResume_Request::InternalSwap(CCloud_AppSessionResume_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_AppSessionResume_Request, appid_)
      + sizeof(CCloud_AppSessionResume_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_AppSessionResume_Request, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppSessionResume_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[50]);
}

// ===================================================================

class CCloud_AppSessionResume_Response::_Internal {
 public:
};

CCloud_AppSessionResume_Response::CCloud_AppSessionResume_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCloud_AppSessionResume_Response)
}
CCloud_AppSessionResume_Response::CCloud_AppSessionResume_Response(const CCloud_AppSessionResume_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_AppSessionResume_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppSessionResume_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppSessionResume_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppSessionResume_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[51]);
}

// ===================================================================

class CCloud_AppLaunchIntent_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_AppLaunchIntent_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_pending_operations(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCloud_AppLaunchIntent_Request::CCloud_AppLaunchIntent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_AppLaunchIntent_Request)
}
CCloud_AppLaunchIntent_Request::CCloud_AppLaunchIntent_Request(const CCloud_AppLaunchIntent_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_pending_operations_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(ignore_pending_operations_));
  // @@protoc_insertion_point(copy_constructor:CCloud_AppLaunchIntent_Request)
}

inline void CCloud_AppLaunchIntent_Request::SharedCtor() {
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ignore_pending_operations_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(ignore_pending_operations_));
}

CCloud_AppLaunchIntent_Request::~CCloud_AppLaunchIntent_Request() {
  // @@protoc_insertion_point(destructor:CCloud_AppLaunchIntent_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_AppLaunchIntent_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCloud_AppLaunchIntent_Request::ArenaDtor(void* object) {
  CCloud_AppLaunchIntent_Request* _this = reinterpret_cast< CCloud_AppLaunchIntent_Request* >(object);
  (void)_this;
}
void CCloud_AppLaunchIntent_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_AppLaunchIntent_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_AppLaunchIntent_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_AppLaunchIntent_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_pending_operations_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(ignore_pending_operations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_AppLaunchIntent_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCloud_AppLaunchIntent_Request.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_pending_operations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ignore_pending_operations(&has_bits);
          ignore_pending_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_AppLaunchIntent_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_AppLaunchIntent_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCloud_AppLaunchIntent_Request.machine_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_machine_name(), target);
  }

  // optional bool ignore_pending_operations = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ignore_pending_operations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_AppLaunchIntent_Request)
  return target;
}

size_t CCloud_AppLaunchIntent_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_AppLaunchIntent_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string machine_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional uint64 client_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool ignore_pending_operations = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppLaunchIntent_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_AppLaunchIntent_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppLaunchIntent_Request::GetClassData() const { return &_class_data_; }

void CCloud_AppLaunchIntent_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_AppLaunchIntent_Request *>(to)->MergeFrom(
      static_cast<const CCloud_AppLaunchIntent_Request &>(from));
}


void CCloud_AppLaunchIntent_Request::MergeFrom(const CCloud_AppLaunchIntent_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_AppLaunchIntent_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      ignore_pending_operations_ = from.ignore_pending_operations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_AppLaunchIntent_Request::CopyFrom(const CCloud_AppLaunchIntent_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_AppLaunchIntent_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_AppLaunchIntent_Request::IsInitialized() const {
  return true;
}

void CCloud_AppLaunchIntent_Request::InternalSwap(CCloud_AppLaunchIntent_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_, lhs_arena,
      &other->machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_AppLaunchIntent_Request, ignore_pending_operations_)
      + sizeof(CCloud_AppLaunchIntent_Request::ignore_pending_operations_)
      - PROTOBUF_FIELD_OFFSET(CCloud_AppLaunchIntent_Request, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppLaunchIntent_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[52]);
}

// ===================================================================

class CCloud_AppLaunchIntent_Response::_Internal {
 public:
};

void CCloud_AppLaunchIntent_Response::clear_pending_remote_operations() {
  pending_remote_operations_.Clear();
}
CCloud_AppLaunchIntent_Response::CCloud_AppLaunchIntent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pending_remote_operations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_AppLaunchIntent_Response)
}
CCloud_AppLaunchIntent_Response::CCloud_AppLaunchIntent_Response(const CCloud_AppLaunchIntent_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pending_remote_operations_(from.pending_remote_operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCloud_AppLaunchIntent_Response)
}

inline void CCloud_AppLaunchIntent_Response::SharedCtor() {
}

CCloud_AppLaunchIntent_Response::~CCloud_AppLaunchIntent_Response() {
  // @@protoc_insertion_point(destructor:CCloud_AppLaunchIntent_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_AppLaunchIntent_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_AppLaunchIntent_Response::ArenaDtor(void* object) {
  CCloud_AppLaunchIntent_Response* _this = reinterpret_cast< CCloud_AppLaunchIntent_Response* >(object);
  (void)_this;
}
void CCloud_AppLaunchIntent_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_AppLaunchIntent_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_AppLaunchIntent_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_AppLaunchIntent_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_remote_operations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_AppLaunchIntent_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCloud_PendingRemoteOperation pending_remote_operations = 1 [(.description) = "pending remote operations you should be aware of"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_remote_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_AppLaunchIntent_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_AppLaunchIntent_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCloud_PendingRemoteOperation pending_remote_operations = 1 [(.description) = "pending remote operations you should be aware of"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_remote_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pending_remote_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_AppLaunchIntent_Response)
  return target;
}

size_t CCloud_AppLaunchIntent_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_AppLaunchIntent_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCloud_PendingRemoteOperation pending_remote_operations = 1 [(.description) = "pending remote operations you should be aware of"];
  total_size += 1UL * this->_internal_pending_remote_operations_size();
  for (const auto& msg : this->pending_remote_operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppLaunchIntent_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_AppLaunchIntent_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppLaunchIntent_Response::GetClassData() const { return &_class_data_; }

void CCloud_AppLaunchIntent_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_AppLaunchIntent_Response *>(to)->MergeFrom(
      static_cast<const CCloud_AppLaunchIntent_Response &>(from));
}


void CCloud_AppLaunchIntent_Response::MergeFrom(const CCloud_AppLaunchIntent_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_AppLaunchIntent_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pending_remote_operations_.MergeFrom(from.pending_remote_operations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_AppLaunchIntent_Response::CopyFrom(const CCloud_AppLaunchIntent_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_AppLaunchIntent_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_AppLaunchIntent_Response::IsInitialized() const {
  return true;
}

void CCloud_AppLaunchIntent_Response::InternalSwap(CCloud_AppLaunchIntent_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pending_remote_operations_.InternalSwap(&other->pending_remote_operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppLaunchIntent_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[53]);
}

// ===================================================================

class CCloud_AppExitSyncDone_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_AppExitSyncDone_Notification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uploads_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uploads_required(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCloud_AppExitSyncDone_Notification::CCloud_AppExitSyncDone_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_AppExitSyncDone_Notification)
}
CCloud_AppExitSyncDone_Notification::CCloud_AppExitSyncDone_Notification(const CCloud_AppExitSyncDone_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uploads_required_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(uploads_required_));
  // @@protoc_insertion_point(copy_constructor:CCloud_AppExitSyncDone_Notification)
}

inline void CCloud_AppExitSyncDone_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uploads_required_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(uploads_required_));
}

CCloud_AppExitSyncDone_Notification::~CCloud_AppExitSyncDone_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_AppExitSyncDone_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_AppExitSyncDone_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_AppExitSyncDone_Notification::ArenaDtor(void* object) {
  CCloud_AppExitSyncDone_Notification* _this = reinterpret_cast< CCloud_AppExitSyncDone_Notification* >(object);
  (void)_this;
}
void CCloud_AppExitSyncDone_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_AppExitSyncDone_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_AppExitSyncDone_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_AppExitSyncDone_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&client_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uploads_required_) -
        reinterpret_cast<char*>(&client_id_)) + sizeof(uploads_required_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_AppExitSyncDone_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uploads_completed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uploads_completed(&has_bits);
          uploads_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uploads_required = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uploads_required(&has_bits);
          uploads_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_AppExitSyncDone_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_AppExitSyncDone_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 client_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_id(), target);
  }

  // optional bool uploads_completed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_uploads_completed(), target);
  }

  // optional bool uploads_required = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_uploads_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_AppExitSyncDone_Notification)
  return target;
}

size_t CCloud_AppExitSyncDone_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_AppExitSyncDone_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 client_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool uploads_completed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool uploads_required = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppExitSyncDone_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_AppExitSyncDone_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppExitSyncDone_Notification::GetClassData() const { return &_class_data_; }

void CCloud_AppExitSyncDone_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_AppExitSyncDone_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_AppExitSyncDone_Notification &>(from));
}


void CCloud_AppExitSyncDone_Notification::MergeFrom(const CCloud_AppExitSyncDone_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_AppExitSyncDone_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      uploads_completed_ = from.uploads_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      uploads_required_ = from.uploads_required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_AppExitSyncDone_Notification::CopyFrom(const CCloud_AppExitSyncDone_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_AppExitSyncDone_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_AppExitSyncDone_Notification::IsInitialized() const {
  return true;
}

void CCloud_AppExitSyncDone_Notification::InternalSwap(CCloud_AppExitSyncDone_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_AppExitSyncDone_Notification, uploads_required_)
      + sizeof(CCloud_AppExitSyncDone_Notification::uploads_required_)
      - PROTOBUF_FIELD_OFFSET(CCloud_AppExitSyncDone_Notification, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppExitSyncDone_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[54]);
}

// ===================================================================

class CCloud_ClientGetAppQuotaUsage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientGetAppQuotaUsage_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_ClientGetAppQuotaUsage_Request::CCloud_ClientGetAppQuotaUsage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientGetAppQuotaUsage_Request)
}
CCloud_ClientGetAppQuotaUsage_Request::CCloud_ClientGetAppQuotaUsage_Request(const CCloud_ClientGetAppQuotaUsage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientGetAppQuotaUsage_Request)
}

inline void CCloud_ClientGetAppQuotaUsage_Request::SharedCtor() {
appid_ = 0u;
}

CCloud_ClientGetAppQuotaUsage_Request::~CCloud_ClientGetAppQuotaUsage_Request() {
  // @@protoc_insertion_point(destructor:CCloud_ClientGetAppQuotaUsage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientGetAppQuotaUsage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientGetAppQuotaUsage_Request::ArenaDtor(void* object) {
  CCloud_ClientGetAppQuotaUsage_Request* _this = reinterpret_cast< CCloud_ClientGetAppQuotaUsage_Request* >(object);
  (void)_this;
}
void CCloud_ClientGetAppQuotaUsage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientGetAppQuotaUsage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientGetAppQuotaUsage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientGetAppQuotaUsage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientGetAppQuotaUsage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientGetAppQuotaUsage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientGetAppQuotaUsage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientGetAppQuotaUsage_Request)
  return target;
}

size_t CCloud_ClientGetAppQuotaUsage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientGetAppQuotaUsage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientGetAppQuotaUsage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientGetAppQuotaUsage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientGetAppQuotaUsage_Request::GetClassData() const { return &_class_data_; }

void CCloud_ClientGetAppQuotaUsage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientGetAppQuotaUsage_Request *>(to)->MergeFrom(
      static_cast<const CCloud_ClientGetAppQuotaUsage_Request &>(from));
}


void CCloud_ClientGetAppQuotaUsage_Request::MergeFrom(const CCloud_ClientGetAppQuotaUsage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientGetAppQuotaUsage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientGetAppQuotaUsage_Request::CopyFrom(const CCloud_ClientGetAppQuotaUsage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientGetAppQuotaUsage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientGetAppQuotaUsage_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientGetAppQuotaUsage_Request::InternalSwap(CCloud_ClientGetAppQuotaUsage_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientGetAppQuotaUsage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[55]);
}

// ===================================================================

class CCloud_ClientGetAppQuotaUsage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientGetAppQuotaUsage_Response>()._has_bits_);
  static void set_has_existing_files(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_existing_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_num_files(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_num_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCloud_ClientGetAppQuotaUsage_Response::CCloud_ClientGetAppQuotaUsage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientGetAppQuotaUsage_Response)
}
CCloud_ClientGetAppQuotaUsage_Response::CCloud_ClientGetAppQuotaUsage_Response(const CCloud_ClientGetAppQuotaUsage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&existing_bytes_, &from.existing_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_bytes_) -
    reinterpret_cast<char*>(&existing_bytes_)) + sizeof(max_num_bytes_));
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientGetAppQuotaUsage_Response)
}

inline void CCloud_ClientGetAppQuotaUsage_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&existing_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_num_bytes_) -
    reinterpret_cast<char*>(&existing_bytes_)) + sizeof(max_num_bytes_));
}

CCloud_ClientGetAppQuotaUsage_Response::~CCloud_ClientGetAppQuotaUsage_Response() {
  // @@protoc_insertion_point(destructor:CCloud_ClientGetAppQuotaUsage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientGetAppQuotaUsage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientGetAppQuotaUsage_Response::ArenaDtor(void* object) {
  CCloud_ClientGetAppQuotaUsage_Response* _this = reinterpret_cast< CCloud_ClientGetAppQuotaUsage_Response* >(object);
  (void)_this;
}
void CCloud_ClientGetAppQuotaUsage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientGetAppQuotaUsage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientGetAppQuotaUsage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientGetAppQuotaUsage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&existing_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_num_bytes_) -
        reinterpret_cast<char*>(&existing_bytes_)) + sizeof(max_num_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientGetAppQuotaUsage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 existing_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_existing_files(&has_bits);
          existing_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 existing_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_existing_bytes(&has_bits);
          existing_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_num_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_num_files(&has_bits);
          max_num_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_num_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_num_bytes(&has_bits);
          max_num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientGetAppQuotaUsage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientGetAppQuotaUsage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 existing_files = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_existing_files(), target);
  }

  // optional uint64 existing_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_existing_bytes(), target);
  }

  // optional uint32 max_num_files = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_num_files(), target);
  }

  // optional uint64 max_num_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_max_num_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientGetAppQuotaUsage_Response)
  return target;
}

size_t CCloud_ClientGetAppQuotaUsage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientGetAppQuotaUsage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 existing_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_existing_bytes());
    }

    // optional uint32 existing_files = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_existing_files());
    }

    // optional uint32 max_num_files = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_num_files());
    }

    // optional uint64 max_num_bytes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_max_num_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientGetAppQuotaUsage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientGetAppQuotaUsage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientGetAppQuotaUsage_Response::GetClassData() const { return &_class_data_; }

void CCloud_ClientGetAppQuotaUsage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientGetAppQuotaUsage_Response *>(to)->MergeFrom(
      static_cast<const CCloud_ClientGetAppQuotaUsage_Response &>(from));
}


void CCloud_ClientGetAppQuotaUsage_Response::MergeFrom(const CCloud_ClientGetAppQuotaUsage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientGetAppQuotaUsage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      existing_bytes_ = from.existing_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      existing_files_ = from.existing_files_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_num_files_ = from.max_num_files_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_num_bytes_ = from.max_num_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientGetAppQuotaUsage_Response::CopyFrom(const CCloud_ClientGetAppQuotaUsage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientGetAppQuotaUsage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientGetAppQuotaUsage_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientGetAppQuotaUsage_Response::InternalSwap(CCloud_ClientGetAppQuotaUsage_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_ClientGetAppQuotaUsage_Response, max_num_bytes_)
      + sizeof(CCloud_ClientGetAppQuotaUsage_Response::max_num_bytes_)
      - PROTOBUF_FIELD_OFFSET(CCloud_ClientGetAppQuotaUsage_Response, existing_bytes_)>(
          reinterpret_cast<char*>(&existing_bytes_),
          reinterpret_cast<char*>(&other->existing_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientGetAppQuotaUsage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[56]);
}

// ===================================================================

class CCloud_AppCloudStateChange_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_AppCloudStateChange_Notification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_change_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_AppCloudStateChange_Notification::CCloud_AppCloudStateChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_AppCloudStateChange_Notification)
}
CCloud_AppCloudStateChange_Notification::CCloud_AppCloudStateChange_Notification(const CCloud_AppCloudStateChange_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_change_number_, &from.app_change_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&app_change_number_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCloud_AppCloudStateChange_Notification)
}

inline void CCloud_AppCloudStateChange_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_change_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&app_change_number_)) + sizeof(appid_));
}

CCloud_AppCloudStateChange_Notification::~CCloud_AppCloudStateChange_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_AppCloudStateChange_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_AppCloudStateChange_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_AppCloudStateChange_Notification::ArenaDtor(void* object) {
  CCloud_AppCloudStateChange_Notification* _this = reinterpret_cast< CCloud_AppCloudStateChange_Notification* >(object);
  (void)_this;
}
void CCloud_AppCloudStateChange_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_AppCloudStateChange_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_AppCloudStateChange_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_AppCloudStateChange_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_change_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&app_change_number_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_AppCloudStateChange_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App which has had a change in cloud state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 app_change_number = 2 [(.description) = "New App Change Number"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_change_number(&has_bits);
          app_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_AppCloudStateChange_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_AppCloudStateChange_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App which has had a change in cloud state"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 app_change_number = 2 [(.description) = "New App Change Number"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_app_change_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_AppCloudStateChange_Notification)
  return target;
}

size_t CCloud_AppCloudStateChange_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_AppCloudStateChange_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 app_change_number = 2 [(.description) = "New App Change Number"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_app_change_number());
    }

    // optional uint32 appid = 1 [(.description) = "App which has had a change in cloud state"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_AppCloudStateChange_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_AppCloudStateChange_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_AppCloudStateChange_Notification::GetClassData() const { return &_class_data_; }

void CCloud_AppCloudStateChange_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_AppCloudStateChange_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_AppCloudStateChange_Notification &>(from));
}


void CCloud_AppCloudStateChange_Notification::MergeFrom(const CCloud_AppCloudStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_AppCloudStateChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_change_number_ = from.app_change_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_AppCloudStateChange_Notification::CopyFrom(const CCloud_AppCloudStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_AppCloudStateChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_AppCloudStateChange_Notification::IsInitialized() const {
  return true;
}

void CCloud_AppCloudStateChange_Notification::InternalSwap(CCloud_AppCloudStateChange_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCloud_AppCloudStateChange_Notification, appid_)
      + sizeof(CCloud_AppCloudStateChange_Notification::appid_)
      - PROTOBUF_FIELD_OFFSET(CCloud_AppCloudStateChange_Notification, app_change_number_)>(
          reinterpret_cast<char*>(&app_change_number_),
          reinterpret_cast<char*>(&other->app_change_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_AppCloudStateChange_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[57]);
}

// ===================================================================

class CCloud_ClientLogUploadRequest_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CCloud_ClientLogUploadRequest_Notification>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCloud_ClientLogUploadRequest_Notification::CCloud_ClientLogUploadRequest_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCloud_ClientLogUploadRequest_Notification)
}
CCloud_ClientLogUploadRequest_Notification::CCloud_ClientLogUploadRequest_Notification(const CCloud_ClientLogUploadRequest_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:CCloud_ClientLogUploadRequest_Notification)
}

inline void CCloud_ClientLogUploadRequest_Notification::SharedCtor() {
request_id_ = uint64_t{0u};
}

CCloud_ClientLogUploadRequest_Notification::~CCloud_ClientLogUploadRequest_Notification() {
  // @@protoc_insertion_point(destructor:CCloud_ClientLogUploadRequest_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCloud_ClientLogUploadRequest_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCloud_ClientLogUploadRequest_Notification::ArenaDtor(void* object) {
  CCloud_ClientLogUploadRequest_Notification* _this = reinterpret_cast< CCloud_ClientLogUploadRequest_Notification* >(object);
  (void)_this;
}
void CCloud_ClientLogUploadRequest_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCloud_ClientLogUploadRequest_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCloud_ClientLogUploadRequest_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CCloud_ClientLogUploadRequest_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCloud_ClientLogUploadRequest_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCloud_ClientLogUploadRequest_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCloud_ClientLogUploadRequest_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCloud_ClientLogUploadRequest_Notification)
  return target;
}

size_t CCloud_ClientLogUploadRequest_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCloud_ClientLogUploadRequest_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 request_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCloud_ClientLogUploadRequest_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCloud_ClientLogUploadRequest_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCloud_ClientLogUploadRequest_Notification::GetClassData() const { return &_class_data_; }

void CCloud_ClientLogUploadRequest_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCloud_ClientLogUploadRequest_Notification *>(to)->MergeFrom(
      static_cast<const CCloud_ClientLogUploadRequest_Notification &>(from));
}


void CCloud_ClientLogUploadRequest_Notification::MergeFrom(const CCloud_ClientLogUploadRequest_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCloud_ClientLogUploadRequest_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request_id()) {
    _internal_set_request_id(from._internal_request_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCloud_ClientLogUploadRequest_Notification::CopyFrom(const CCloud_ClientLogUploadRequest_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCloud_ClientLogUploadRequest_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientLogUploadRequest_Notification::IsInitialized() const {
  return true;
}

void CCloud_ClientLogUploadRequest_Notification::InternalSwap(CCloud_ClientLogUploadRequest_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(request_id_, other->request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCloud_ClientLogUploadRequest_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fcloud_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fcloud_2esteamclient_2eproto[58]);
}

// ===================================================================

Cloud::~Cloud() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Cloud::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fcloud_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Cloud::GetDescriptor() {
  return descriptor();
}

void Cloud::ClientLogUploadCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientLogUploadCheck_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientLogUploadCheck() not implemented.");
  done->Run();
}

void Cloud::ClientLogUploadComplete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientLogUploadComplete_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientLogUploadComplete() not implemented.");
  done->Run();
}

void Cloud::GetUploadServerInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_GetUploadServerInfo_Request*,
                         ::CCloud_GetUploadServerInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUploadServerInfo() not implemented.");
  done->Run();
}

void Cloud::BeginHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_BeginHTTPUpload_Request*,
                         ::CCloud_BeginHTTPUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginHTTPUpload() not implemented.");
  done->Run();
}

void Cloud::CommitHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_CommitHTTPUpload_Request*,
                         ::CCloud_CommitHTTPUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitHTTPUpload() not implemented.");
  done->Run();
}

void Cloud::BeginUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_BeginUGCUpload_Request*,
                         ::CCloud_BeginUGCUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginUGCUpload() not implemented.");
  done->Run();
}

void Cloud::CommitUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_CommitUGCUpload_Request*,
                         ::CCloud_CommitUGCUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitUGCUpload() not implemented.");
  done->Run();
}

void Cloud::GetFileDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_GetFileDetails_Request*,
                         ::CCloud_GetFileDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFileDetails() not implemented.");
  done->Run();
}

void Cloud::EnumerateUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_EnumerateUserFiles_Request*,
                         ::CCloud_EnumerateUserFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnumerateUserFiles() not implemented.");
  done->Run();
}

void Cloud::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_Delete_Request*,
                         ::CCloud_Delete_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void Cloud::GetClientEncryptionKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_GetClientEncryptionKey_Request*,
                         ::CCloud_GetClientEncryptionKey_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClientEncryptionKey() not implemented.");
  done->Run();
}

void Cloud::CDNReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_CDNReport_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CDNReport() not implemented.");
  done->Run();
}

void Cloud::ExternalStorageTransferReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ExternalStorageTransferReport_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExternalStorageTransferReport() not implemented.");
  done->Run();
}

void Cloud::BeginAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_BeginAppUploadBatch_Request*,
                         ::CCloud_BeginAppUploadBatch_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginAppUploadBatch() not implemented.");
  done->Run();
}

void Cloud::CompleteAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_CompleteAppUploadBatch_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CompleteAppUploadBatch() not implemented.");
  done->Run();
}

void Cloud::CompleteAppUploadBatchBlocking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_CompleteAppUploadBatch_Request*,
                         ::CCloud_CompleteAppUploadBatch_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CompleteAppUploadBatchBlocking() not implemented.");
  done->Run();
}

void Cloud::ClientBeginFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientBeginFileUpload_Request*,
                         ::CCloud_ClientBeginFileUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientBeginFileUpload() not implemented.");
  done->Run();
}

void Cloud::ClientCommitFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientCommitFileUpload_Request*,
                         ::CCloud_ClientCommitFileUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientCommitFileUpload() not implemented.");
  done->Run();
}

void Cloud::ClientFileDownload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientFileDownload_Request*,
                         ::CCloud_ClientFileDownload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientFileDownload() not implemented.");
  done->Run();
}

void Cloud::ClientDeleteFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientDeleteFile_Request*,
                         ::CCloud_ClientDeleteFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientDeleteFile() not implemented.");
  done->Run();
}

void Cloud::ClientConflictResolution(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientConflictResolution_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientConflictResolution() not implemented.");
  done->Run();
}

void Cloud::EnumerateUserApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_EnumerateUserApps_Request*,
                         ::CCloud_EnumerateUserApps_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnumerateUserApps() not implemented.");
  done->Run();
}

void Cloud::GetAppFileChangelist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_GetAppFileChangelist_Request*,
                         ::CCloud_GetAppFileChangelist_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAppFileChangelist() not implemented.");
  done->Run();
}

void Cloud::SuspendAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_AppSessionSuspend_Request*,
                         ::CCloud_AppSessionSuspend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SuspendAppSession() not implemented.");
  done->Run();
}

void Cloud::ResumeAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_AppSessionResume_Request*,
                         ::CCloud_AppSessionResume_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ResumeAppSession() not implemented.");
  done->Run();
}

void Cloud::SignalAppLaunchIntent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_AppLaunchIntent_Request*,
                         ::CCloud_AppLaunchIntent_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SignalAppLaunchIntent() not implemented.");
  done->Run();
}

void Cloud::SignalAppExitSyncDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_AppExitSyncDone_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SignalAppExitSyncDone() not implemented.");
  done->Run();
}

void Cloud::ClientGetAppQuotaUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientGetAppQuotaUsage_Request*,
                         ::CCloud_ClientGetAppQuotaUsage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetAppQuotaUsage() not implemented.");
  done->Run();
}

void Cloud::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      ClientLogUploadCheck(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientLogUploadCheck_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      ClientLogUploadComplete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientLogUploadComplete_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      GetUploadServerInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_GetUploadServerInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_GetUploadServerInfo_Response*>(
                 response),
             done);
      break;
    case 3:
      BeginHTTPUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_BeginHTTPUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_BeginHTTPUpload_Response*>(
                 response),
             done);
      break;
    case 4:
      CommitHTTPUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_CommitHTTPUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_CommitHTTPUpload_Response*>(
                 response),
             done);
      break;
    case 5:
      BeginUGCUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_BeginUGCUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_BeginUGCUpload_Response*>(
                 response),
             done);
      break;
    case 6:
      CommitUGCUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_CommitUGCUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_CommitUGCUpload_Response*>(
                 response),
             done);
      break;
    case 7:
      GetFileDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_GetFileDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_GetFileDetails_Response*>(
                 response),
             done);
      break;
    case 8:
      EnumerateUserFiles(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_EnumerateUserFiles_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_EnumerateUserFiles_Response*>(
                 response),
             done);
      break;
    case 9:
      Delete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_Delete_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_Delete_Response*>(
                 response),
             done);
      break;
    case 10:
      GetClientEncryptionKey(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_GetClientEncryptionKey_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_GetClientEncryptionKey_Response*>(
                 response),
             done);
      break;
    case 11:
      CDNReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_CDNReport_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 12:
      ExternalStorageTransferReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ExternalStorageTransferReport_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 13:
      BeginAppUploadBatch(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_BeginAppUploadBatch_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_BeginAppUploadBatch_Response*>(
                 response),
             done);
      break;
    case 14:
      CompleteAppUploadBatch(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_CompleteAppUploadBatch_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 15:
      CompleteAppUploadBatchBlocking(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_CompleteAppUploadBatch_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_CompleteAppUploadBatch_Response*>(
                 response),
             done);
      break;
    case 16:
      ClientBeginFileUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientBeginFileUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_ClientBeginFileUpload_Response*>(
                 response),
             done);
      break;
    case 17:
      ClientCommitFileUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientCommitFileUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_ClientCommitFileUpload_Response*>(
                 response),
             done);
      break;
    case 18:
      ClientFileDownload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientFileDownload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_ClientFileDownload_Response*>(
                 response),
             done);
      break;
    case 19:
      ClientDeleteFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientDeleteFile_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_ClientDeleteFile_Response*>(
                 response),
             done);
      break;
    case 20:
      ClientConflictResolution(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientConflictResolution_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 21:
      EnumerateUserApps(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_EnumerateUserApps_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_EnumerateUserApps_Response*>(
                 response),
             done);
      break;
    case 22:
      GetAppFileChangelist(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_GetAppFileChangelist_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_GetAppFileChangelist_Response*>(
                 response),
             done);
      break;
    case 23:
      SuspendAppSession(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_AppSessionSuspend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_AppSessionSuspend_Response*>(
                 response),
             done);
      break;
    case 24:
      ResumeAppSession(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_AppSessionResume_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_AppSessionResume_Response*>(
                 response),
             done);
      break;
    case 25:
      SignalAppLaunchIntent(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_AppLaunchIntent_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_AppLaunchIntent_Response*>(
                 response),
             done);
      break;
    case 26:
      SignalAppExitSyncDone(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_AppExitSyncDone_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 27:
      ClientGetAppQuotaUsage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientGetAppQuotaUsage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CCloud_ClientGetAppQuotaUsage_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Cloud::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCloud_ClientLogUploadCheck_Notification::default_instance();
    case 1:
      return ::CCloud_ClientLogUploadComplete_Notification::default_instance();
    case 2:
      return ::CCloud_GetUploadServerInfo_Request::default_instance();
    case 3:
      return ::CCloud_BeginHTTPUpload_Request::default_instance();
    case 4:
      return ::CCloud_CommitHTTPUpload_Request::default_instance();
    case 5:
      return ::CCloud_BeginUGCUpload_Request::default_instance();
    case 6:
      return ::CCloud_CommitUGCUpload_Request::default_instance();
    case 7:
      return ::CCloud_GetFileDetails_Request::default_instance();
    case 8:
      return ::CCloud_EnumerateUserFiles_Request::default_instance();
    case 9:
      return ::CCloud_Delete_Request::default_instance();
    case 10:
      return ::CCloud_GetClientEncryptionKey_Request::default_instance();
    case 11:
      return ::CCloud_CDNReport_Notification::default_instance();
    case 12:
      return ::CCloud_ExternalStorageTransferReport_Notification::default_instance();
    case 13:
      return ::CCloud_BeginAppUploadBatch_Request::default_instance();
    case 14:
      return ::CCloud_CompleteAppUploadBatch_Notification::default_instance();
    case 15:
      return ::CCloud_CompleteAppUploadBatch_Request::default_instance();
    case 16:
      return ::CCloud_ClientBeginFileUpload_Request::default_instance();
    case 17:
      return ::CCloud_ClientCommitFileUpload_Request::default_instance();
    case 18:
      return ::CCloud_ClientFileDownload_Request::default_instance();
    case 19:
      return ::CCloud_ClientDeleteFile_Request::default_instance();
    case 20:
      return ::CCloud_ClientConflictResolution_Notification::default_instance();
    case 21:
      return ::CCloud_EnumerateUserApps_Request::default_instance();
    case 22:
      return ::CCloud_GetAppFileChangelist_Request::default_instance();
    case 23:
      return ::CCloud_AppSessionSuspend_Request::default_instance();
    case 24:
      return ::CCloud_AppSessionResume_Request::default_instance();
    case 25:
      return ::CCloud_AppLaunchIntent_Request::default_instance();
    case 26:
      return ::CCloud_AppExitSyncDone_Notification::default_instance();
    case 27:
      return ::CCloud_ClientGetAppQuotaUsage_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Cloud::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::CCloud_GetUploadServerInfo_Response::default_instance();
    case 3:
      return ::CCloud_BeginHTTPUpload_Response::default_instance();
    case 4:
      return ::CCloud_CommitHTTPUpload_Response::default_instance();
    case 5:
      return ::CCloud_BeginUGCUpload_Response::default_instance();
    case 6:
      return ::CCloud_CommitUGCUpload_Response::default_instance();
    case 7:
      return ::CCloud_GetFileDetails_Response::default_instance();
    case 8:
      return ::CCloud_EnumerateUserFiles_Response::default_instance();
    case 9:
      return ::CCloud_Delete_Response::default_instance();
    case 10:
      return ::CCloud_GetClientEncryptionKey_Response::default_instance();
    case 11:
      return ::NoResponse::default_instance();
    case 12:
      return ::NoResponse::default_instance();
    case 13:
      return ::CCloud_BeginAppUploadBatch_Response::default_instance();
    case 14:
      return ::NoResponse::default_instance();
    case 15:
      return ::CCloud_CompleteAppUploadBatch_Response::default_instance();
    case 16:
      return ::CCloud_ClientBeginFileUpload_Response::default_instance();
    case 17:
      return ::CCloud_ClientCommitFileUpload_Response::default_instance();
    case 18:
      return ::CCloud_ClientFileDownload_Response::default_instance();
    case 19:
      return ::CCloud_ClientDeleteFile_Response::default_instance();
    case 20:
      return ::NoResponse::default_instance();
    case 21:
      return ::CCloud_EnumerateUserApps_Response::default_instance();
    case 22:
      return ::CCloud_GetAppFileChangelist_Response::default_instance();
    case 23:
      return ::CCloud_AppSessionSuspend_Response::default_instance();
    case 24:
      return ::CCloud_AppSessionResume_Response::default_instance();
    case 25:
      return ::CCloud_AppLaunchIntent_Response::default_instance();
    case 26:
      return ::NoResponse::default_instance();
    case 27:
      return ::CCloud_ClientGetAppQuotaUsage_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Cloud_Stub::Cloud_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Cloud_Stub::Cloud_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Cloud_Stub::~Cloud_Stub() {
  if (owns_channel_) delete channel_;
}

void Cloud_Stub::ClientLogUploadCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientLogUploadCheck_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Cloud_Stub::ClientLogUploadComplete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientLogUploadComplete_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Cloud_Stub::GetUploadServerInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_GetUploadServerInfo_Request* request,
                              ::CCloud_GetUploadServerInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Cloud_Stub::BeginHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_BeginHTTPUpload_Request* request,
                              ::CCloud_BeginHTTPUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Cloud_Stub::CommitHTTPUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_CommitHTTPUpload_Request* request,
                              ::CCloud_CommitHTTPUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Cloud_Stub::BeginUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_BeginUGCUpload_Request* request,
                              ::CCloud_BeginUGCUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Cloud_Stub::CommitUGCUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_CommitUGCUpload_Request* request,
                              ::CCloud_CommitUGCUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Cloud_Stub::GetFileDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_GetFileDetails_Request* request,
                              ::CCloud_GetFileDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Cloud_Stub::EnumerateUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_EnumerateUserFiles_Request* request,
                              ::CCloud_EnumerateUserFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Cloud_Stub::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_Delete_Request* request,
                              ::CCloud_Delete_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Cloud_Stub::GetClientEncryptionKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_GetClientEncryptionKey_Request* request,
                              ::CCloud_GetClientEncryptionKey_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Cloud_Stub::CDNReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_CDNReport_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Cloud_Stub::ExternalStorageTransferReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ExternalStorageTransferReport_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Cloud_Stub::BeginAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_BeginAppUploadBatch_Request* request,
                              ::CCloud_BeginAppUploadBatch_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Cloud_Stub::CompleteAppUploadBatch(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_CompleteAppUploadBatch_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Cloud_Stub::CompleteAppUploadBatchBlocking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_CompleteAppUploadBatch_Request* request,
                              ::CCloud_CompleteAppUploadBatch_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void Cloud_Stub::ClientBeginFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientBeginFileUpload_Request* request,
                              ::CCloud_ClientBeginFileUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void Cloud_Stub::ClientCommitFileUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientCommitFileUpload_Request* request,
                              ::CCloud_ClientCommitFileUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void Cloud_Stub::ClientFileDownload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientFileDownload_Request* request,
                              ::CCloud_ClientFileDownload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void Cloud_Stub::ClientDeleteFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientDeleteFile_Request* request,
                              ::CCloud_ClientDeleteFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void Cloud_Stub::ClientConflictResolution(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientConflictResolution_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void Cloud_Stub::EnumerateUserApps(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_EnumerateUserApps_Request* request,
                              ::CCloud_EnumerateUserApps_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void Cloud_Stub::GetAppFileChangelist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_GetAppFileChangelist_Request* request,
                              ::CCloud_GetAppFileChangelist_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void Cloud_Stub::SuspendAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_AppSessionSuspend_Request* request,
                              ::CCloud_AppSessionSuspend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void Cloud_Stub::ResumeAppSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_AppSessionResume_Request* request,
                              ::CCloud_AppSessionResume_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void Cloud_Stub::SignalAppLaunchIntent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_AppLaunchIntent_Request* request,
                              ::CCloud_AppLaunchIntent_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void Cloud_Stub::SignalAppExitSyncDone(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_AppExitSyncDone_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void Cloud_Stub::ClientGetAppQuotaUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientGetAppQuotaUsage_Request* request,
                              ::CCloud_ClientGetAppQuotaUsage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
// ===================================================================

CloudClient::~CloudClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CloudClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fcloud_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CloudClient::GetDescriptor() {
  return descriptor();
}

void CloudClient::NotifyAppStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_AppCloudStateChange_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyAppStateChange() not implemented.");
  done->Run();
}

void CloudClient::ClientLogUploadRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CCloud_ClientLogUploadRequest_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientLogUploadRequest() not implemented.");
  done->Run();
}

void CloudClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fcloud_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyAppStateChange(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_AppCloudStateChange_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      ClientLogUploadRequest(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CCloud_ClientLogUploadRequest_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CloudClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CCloud_AppCloudStateChange_Notification::default_instance();
    case 1:
      return ::CCloud_ClientLogUploadRequest_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CloudClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CloudClient_Stub::CloudClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CloudClient_Stub::CloudClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
CloudClient_Stub::~CloudClient_Stub() {
  if (owns_channel_) delete channel_;
}

void CloudClient_Stub::NotifyAppStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_AppCloudStateChange_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CloudClient_Stub::ClientLogUploadRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CCloud_ClientLogUploadRequest_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCloud_ClientLogUploadCheck_Notification* Arena::CreateMaybeMessage< ::CCloud_ClientLogUploadCheck_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientLogUploadCheck_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientLogUploadComplete_Notification* Arena::CreateMaybeMessage< ::CCloud_ClientLogUploadComplete_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientLogUploadComplete_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetUploadServerInfo_Request* Arena::CreateMaybeMessage< ::CCloud_GetUploadServerInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetUploadServerInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetUploadServerInfo_Response* Arena::CreateMaybeMessage< ::CCloud_GetUploadServerInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetUploadServerInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginHTTPUpload_Request* Arena::CreateMaybeMessage< ::CCloud_BeginHTTPUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginHTTPUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginHTTPUpload_Response_HTTPHeaders* Arena::CreateMaybeMessage< ::CCloud_BeginHTTPUpload_Response_HTTPHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginHTTPUpload_Response_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginHTTPUpload_Response* Arena::CreateMaybeMessage< ::CCloud_BeginHTTPUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginHTTPUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CommitHTTPUpload_Request* Arena::CreateMaybeMessage< ::CCloud_CommitHTTPUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CommitHTTPUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CommitHTTPUpload_Response* Arena::CreateMaybeMessage< ::CCloud_CommitHTTPUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CommitHTTPUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginUGCUpload_Request* Arena::CreateMaybeMessage< ::CCloud_BeginUGCUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginUGCUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginUGCUpload_Response_HTTPHeaders* Arena::CreateMaybeMessage< ::CCloud_BeginUGCUpload_Response_HTTPHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginUGCUpload_Response_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginUGCUpload_Response* Arena::CreateMaybeMessage< ::CCloud_BeginUGCUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginUGCUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CommitUGCUpload_Request* Arena::CreateMaybeMessage< ::CCloud_CommitUGCUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CommitUGCUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CommitUGCUpload_Response* Arena::CreateMaybeMessage< ::CCloud_CommitUGCUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CommitUGCUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetFileDetails_Request* Arena::CreateMaybeMessage< ::CCloud_GetFileDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetFileDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_UserFile* Arena::CreateMaybeMessage< ::CCloud_UserFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_UserFile >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetFileDetails_Response* Arena::CreateMaybeMessage< ::CCloud_GetFileDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetFileDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_EnumerateUserFiles_Request* Arena::CreateMaybeMessage< ::CCloud_EnumerateUserFiles_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_EnumerateUserFiles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_EnumerateUserFiles_Response* Arena::CreateMaybeMessage< ::CCloud_EnumerateUserFiles_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_EnumerateUserFiles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_Delete_Request* Arena::CreateMaybeMessage< ::CCloud_Delete_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_Delete_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_Delete_Response* Arena::CreateMaybeMessage< ::CCloud_Delete_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_Delete_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetClientEncryptionKey_Request* Arena::CreateMaybeMessage< ::CCloud_GetClientEncryptionKey_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetClientEncryptionKey_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetClientEncryptionKey_Response* Arena::CreateMaybeMessage< ::CCloud_GetClientEncryptionKey_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetClientEncryptionKey_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CDNReport_Notification* Arena::CreateMaybeMessage< ::CCloud_CDNReport_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CDNReport_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ExternalStorageTransferReport_Notification* Arena::CreateMaybeMessage< ::CCloud_ExternalStorageTransferReport_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ExternalStorageTransferReport_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginAppUploadBatch_Request* Arena::CreateMaybeMessage< ::CCloud_BeginAppUploadBatch_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginAppUploadBatch_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_BeginAppUploadBatch_Response* Arena::CreateMaybeMessage< ::CCloud_BeginAppUploadBatch_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_BeginAppUploadBatch_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CompleteAppUploadBatch_Notification* Arena::CreateMaybeMessage< ::CCloud_CompleteAppUploadBatch_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CompleteAppUploadBatch_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CompleteAppUploadBatch_Request* Arena::CreateMaybeMessage< ::CCloud_CompleteAppUploadBatch_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CompleteAppUploadBatch_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_CompleteAppUploadBatch_Response* Arena::CreateMaybeMessage< ::CCloud_CompleteAppUploadBatch_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_CompleteAppUploadBatch_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientBeginFileUpload_Request* Arena::CreateMaybeMessage< ::CCloud_ClientBeginFileUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientBeginFileUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientCloudFileUploadBlockDetails_HTTPHeaders* Arena::CreateMaybeMessage< ::ClientCloudFileUploadBlockDetails_HTTPHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientCloudFileUploadBlockDetails_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientCloudFileUploadBlockDetails* Arena::CreateMaybeMessage< ::ClientCloudFileUploadBlockDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientCloudFileUploadBlockDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientBeginFileUpload_Response* Arena::CreateMaybeMessage< ::CCloud_ClientBeginFileUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientBeginFileUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientCommitFileUpload_Request* Arena::CreateMaybeMessage< ::CCloud_ClientCommitFileUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientCommitFileUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientCommitFileUpload_Response* Arena::CreateMaybeMessage< ::CCloud_ClientCommitFileUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientCommitFileUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientFileDownload_Request* Arena::CreateMaybeMessage< ::CCloud_ClientFileDownload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientFileDownload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientFileDownload_Response_HTTPHeaders* Arena::CreateMaybeMessage< ::CCloud_ClientFileDownload_Response_HTTPHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientFileDownload_Response_HTTPHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientFileDownload_Response* Arena::CreateMaybeMessage< ::CCloud_ClientFileDownload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientFileDownload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientDeleteFile_Request* Arena::CreateMaybeMessage< ::CCloud_ClientDeleteFile_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientDeleteFile_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientDeleteFile_Response* Arena::CreateMaybeMessage< ::CCloud_ClientDeleteFile_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientDeleteFile_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientConflictResolution_Notification* Arena::CreateMaybeMessage< ::CCloud_ClientConflictResolution_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientConflictResolution_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_EnumerateUserApps_Request* Arena::CreateMaybeMessage< ::CCloud_EnumerateUserApps_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_EnumerateUserApps_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_EnumerateUserApps_Response_Apps* Arena::CreateMaybeMessage< ::CCloud_EnumerateUserApps_Response_Apps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_EnumerateUserApps_Response_Apps >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_EnumerateUserApps_Response* Arena::CreateMaybeMessage< ::CCloud_EnumerateUserApps_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_EnumerateUserApps_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetAppFileChangelist_Request* Arena::CreateMaybeMessage< ::CCloud_GetAppFileChangelist_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetAppFileChangelist_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppFileInfo* Arena::CreateMaybeMessage< ::CCloud_AppFileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_GetAppFileChangelist_Response* Arena::CreateMaybeMessage< ::CCloud_GetAppFileChangelist_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_GetAppFileChangelist_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppSessionSuspend_Request* Arena::CreateMaybeMessage< ::CCloud_AppSessionSuspend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppSessionSuspend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppSessionSuspend_Response* Arena::CreateMaybeMessage< ::CCloud_AppSessionSuspend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppSessionSuspend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppSessionResume_Request* Arena::CreateMaybeMessage< ::CCloud_AppSessionResume_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppSessionResume_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppSessionResume_Response* Arena::CreateMaybeMessage< ::CCloud_AppSessionResume_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppSessionResume_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppLaunchIntent_Request* Arena::CreateMaybeMessage< ::CCloud_AppLaunchIntent_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppLaunchIntent_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppLaunchIntent_Response* Arena::CreateMaybeMessage< ::CCloud_AppLaunchIntent_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppLaunchIntent_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppExitSyncDone_Notification* Arena::CreateMaybeMessage< ::CCloud_AppExitSyncDone_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppExitSyncDone_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientGetAppQuotaUsage_Request* Arena::CreateMaybeMessage< ::CCloud_ClientGetAppQuotaUsage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientGetAppQuotaUsage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientGetAppQuotaUsage_Response* Arena::CreateMaybeMessage< ::CCloud_ClientGetAppQuotaUsage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientGetAppQuotaUsage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_AppCloudStateChange_Notification* Arena::CreateMaybeMessage< ::CCloud_AppCloudStateChange_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_AppCloudStateChange_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CCloud_ClientLogUploadRequest_Notification* Arena::CreateMaybeMessage< ::CCloud_ClientLogUploadRequest_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCloud_ClientLogUploadRequest_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
