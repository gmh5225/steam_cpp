// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_chat.steamclient.proto

#include "steammessages_chat.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CChat_RequestFriendPersonaStates_Request::CChat_RequestFriendPersonaStates_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChat_RequestFriendPersonaStates_RequestDefaultTypeInternal {
  constexpr CChat_RequestFriendPersonaStates_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChat_RequestFriendPersonaStates_RequestDefaultTypeInternal() {}
  union {
    CChat_RequestFriendPersonaStates_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChat_RequestFriendPersonaStates_RequestDefaultTypeInternal _CChat_RequestFriendPersonaStates_Request_default_instance_;
constexpr CChat_RequestFriendPersonaStates_Response::CChat_RequestFriendPersonaStates_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChat_RequestFriendPersonaStates_ResponseDefaultTypeInternal {
  constexpr CChat_RequestFriendPersonaStates_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChat_RequestFriendPersonaStates_ResponseDefaultTypeInternal() {}
  union {
    CChat_RequestFriendPersonaStates_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChat_RequestFriendPersonaStates_ResponseDefaultTypeInternal _CChat_RequestFriendPersonaStates_Response_default_instance_;
constexpr CChatRoom_CreateChatRoomGroup_Request::CChatRoom_CreateChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_invitees_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_partner_(uint64_t{0u})
  , steamid_invited_(uint64_t{0u})
  , watching_broadcast_channel_id_(uint64_t{0u})
  , watching_broadcast_accountid_(0u){}
struct CChatRoom_CreateChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_CreateChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_CreateChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_CreateChatRoomGroup_Request_default_instance_;
constexpr CChatRole::CChatRole(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_id_(uint64_t{0u})
  , ordinal_(0u){}
struct CChatRoleDefaultTypeInternal {
  constexpr CChatRoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoleDefaultTypeInternal() {}
  union {
    CChatRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoleDefaultTypeInternal _CChatRole_default_instance_;
constexpr CChatRoleActions::CChatRoleActions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_id_(uint64_t{0u})
  , can_create_rename_delete_channel_(false)
  , can_kick_(false)
  , can_ban_(false)
  , can_invite_(false)
  , can_change_tagline_avatar_name_(false)
  , can_chat_(false)
  , can_view_history_(false)
  , can_change_group_roles_(false)
  , can_change_user_roles_(false)
  , can_mention_all_(false)
  , can_set_watching_broadcast_(false){}
struct CChatRoleActionsDefaultTypeInternal {
  constexpr CChatRoleActionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoleActionsDefaultTypeInternal() {}
  union {
    CChatRoleActions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoleActionsDefaultTypeInternal _CChatRoleActions_default_instance_;
constexpr CChatPartyBeacon::CChatPartyBeacon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_owner_(uint64_t{0u})
  , beacon_id_(uint64_t{0u})
  , app_id_(0u){}
struct CChatPartyBeaconDefaultTypeInternal {
  constexpr CChatPartyBeaconDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatPartyBeaconDefaultTypeInternal() {}
  union {
    CChatPartyBeacon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatPartyBeaconDefaultTypeInternal _CChatPartyBeacon_default_instance_;
constexpr CChatRoomGroupHeaderState::CChatRoomGroupHeaderState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_()
  , role_actions_()
  , party_beacons_()
  , chat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tagline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_ugc_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , clanid_(0u)
  , accountid_owner_(0u)
  , default_role_id_(uint64_t{0u})
  , disabled_(false)
  , watching_broadcast_accountid_(0u)
  , appid_(0u)
  , watching_broadcast_channel_id_(uint64_t{0u})
  , active_minigame_id_(uint64_t{0u}){}
struct CChatRoomGroupHeaderStateDefaultTypeInternal {
  constexpr CChatRoomGroupHeaderStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomGroupHeaderStateDefaultTypeInternal() {}
  union {
    CChatRoomGroupHeaderState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomGroupHeaderStateDefaultTypeInternal _CChatRoomGroupHeaderState_default_instance_;
constexpr CChatRoomMember::CChatRoomMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_ids_()
  , accountid_(0u)
  , state_(0)

  , rank_(0)

  , time_kick_expire_(0u){}
struct CChatRoomMemberDefaultTypeInternal {
  constexpr CChatRoomMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomMemberDefaultTypeInternal() {}
  union {
    CChatRoomMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomMemberDefaultTypeInternal _CChatRoomMember_default_instance_;
constexpr CChatRoomState::CChatRoomState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_in_voice_()
  , chat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_id_(uint64_t{0u})
  , voice_allowed_(false)
  , time_last_message_(0u)
  , sort_order_(0u)
  , accountid_last_message_(0u){}
struct CChatRoomStateDefaultTypeInternal {
  constexpr CChatRoomStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomStateDefaultTypeInternal() {}
  union {
    CChatRoomState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomStateDefaultTypeInternal _CChatRoomState_default_instance_;
constexpr CChatRoomGroupState::CChatRoomGroupState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , chat_rooms_()
  , kicked_()
  , header_state_(nullptr)
  , default_chat_id_(uint64_t{0u}){}
struct CChatRoomGroupStateDefaultTypeInternal {
  constexpr CChatRoomGroupStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomGroupStateDefaultTypeInternal() {}
  union {
    CChatRoomGroupState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomGroupStateDefaultTypeInternal _CChatRoomGroupState_default_instance_;
constexpr CUserChatRoomState::CUserChatRoomState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_id_(uint64_t{0u})
  , time_joined_(0u)
  , time_last_ack_(0u)
  , desktop_notification_level_(0)

  , mobile_notification_level_(0)

  , time_last_mention_(0u)
  , unread_indicator_muted_(false)
  , time_first_unread_(0u){}
struct CUserChatRoomStateDefaultTypeInternal {
  constexpr CUserChatRoomStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserChatRoomStateDefaultTypeInternal() {}
  union {
    CUserChatRoomState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserChatRoomStateDefaultTypeInternal _CUserChatRoomState_default_instance_;
constexpr CUserChatRoomGroupState::CUserChatRoomGroupState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_chat_room_state_()
  , chat_group_id_(uint64_t{0u})
  , time_joined_(0u)
  , desktop_notification_level_(0)

  , mobile_notification_level_(0)

  , time_last_group_ack_(0u)
  , unread_indicator_muted_(false){}
struct CUserChatRoomGroupStateDefaultTypeInternal {
  constexpr CUserChatRoomGroupStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUserChatRoomGroupStateDefaultTypeInternal() {}
  union {
    CUserChatRoomGroupState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUserChatRoomGroupStateDefaultTypeInternal _CUserChatRoomGroupState_default_instance_;
constexpr CChatRoom_CreateChatRoomGroup_Response::CChatRoom_CreateChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr)
  , user_chat_state_(nullptr)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_CreateChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_CreateChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_CreateChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_CreateChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_SaveChatRoomGroup_Request::CChatRoom_SaveChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_SaveChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_SaveChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SaveChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SaveChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SaveChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_SaveChatRoomGroup_Request_default_instance_;
constexpr CChatRoom_SaveChatRoomGroup_Response::CChatRoom_SaveChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_SaveChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SaveChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SaveChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SaveChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SaveChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_SaveChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_RenameChatRoomGroup_Request::CChatRoom_RenameChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_RenameChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_RenameChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RenameChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_RenameChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RenameChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_RenameChatRoomGroup_Request_default_instance_;
constexpr CChatRoom_RenameChatRoomGroup_Response::CChatRoom_RenameChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CChatRoom_RenameChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_RenameChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RenameChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_RenameChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RenameChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_RenameChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_SetChatRoomGroupTagline_Request::CChatRoom_SetChatRoomGroupTagline_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tagline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_SetChatRoomGroupTagline_RequestDefaultTypeInternal {
  constexpr CChatRoom_SetChatRoomGroupTagline_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetChatRoomGroupTagline_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SetChatRoomGroupTagline_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetChatRoomGroupTagline_RequestDefaultTypeInternal _CChatRoom_SetChatRoomGroupTagline_Request_default_instance_;
constexpr CChatRoom_SetChatRoomGroupTagline_Response::CChatRoom_SetChatRoomGroupTagline_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_SetChatRoomGroupTagline_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SetChatRoomGroupTagline_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetChatRoomGroupTagline_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SetChatRoomGroupTagline_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetChatRoomGroupTagline_ResponseDefaultTypeInternal _CChatRoom_SetChatRoomGroupTagline_Response_default_instance_;
constexpr CChatRoom_SetChatRoomGroupAvatar_Request::CChatRoom_SetChatRoomGroupAvatar_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_SetChatRoomGroupAvatar_RequestDefaultTypeInternal {
  constexpr CChatRoom_SetChatRoomGroupAvatar_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetChatRoomGroupAvatar_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SetChatRoomGroupAvatar_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetChatRoomGroupAvatar_RequestDefaultTypeInternal _CChatRoom_SetChatRoomGroupAvatar_Request_default_instance_;
constexpr CChatRoom_SetChatRoomGroupAvatar_Response::CChatRoom_SetChatRoomGroupAvatar_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_SetChatRoomGroupAvatar_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SetChatRoomGroupAvatar_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetChatRoomGroupAvatar_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SetChatRoomGroupAvatar_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetChatRoomGroupAvatar_ResponseDefaultTypeInternal _CChatRoom_SetChatRoomGroupAvatar_Response_default_instance_;
constexpr CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , watching_broadcast_channel_id_(uint64_t{0u})
  , watching_broadcast_accountid_(0u){}
struct CChatRoom_SetChatRoomGroupWatchingBroadcast_RequestDefaultTypeInternal {
  constexpr CChatRoom_SetChatRoomGroupWatchingBroadcast_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetChatRoomGroupWatchingBroadcast_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SetChatRoomGroupWatchingBroadcast_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetChatRoomGroupWatchingBroadcast_RequestDefaultTypeInternal _CChatRoom_SetChatRoomGroupWatchingBroadcast_Request_default_instance_;
constexpr CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_SetChatRoomGroupWatchingBroadcast_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SetChatRoomGroupWatchingBroadcast_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetChatRoomGroupWatchingBroadcast_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SetChatRoomGroupWatchingBroadcast_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetChatRoomGroupWatchingBroadcast_ResponseDefaultTypeInternal _CChatRoom_SetChatRoomGroupWatchingBroadcast_Response_default_instance_;
constexpr CChatRoom_JoinMiniGameForChatRoomGroup_Request::CChatRoom_JoinMiniGameForChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_JoinMiniGameForChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_JoinMiniGameForChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_JoinMiniGameForChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_JoinMiniGameForChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_JoinMiniGameForChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_JoinMiniGameForChatRoomGroup_Request_default_instance_;
constexpr CChatRoom_JoinMiniGameForChatRoomGroup_Response::CChatRoom_JoinMiniGameForChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minigame_id_(uint64_t{0u}){}
struct CChatRoom_JoinMiniGameForChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_JoinMiniGameForChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_JoinMiniGameForChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_JoinMiniGameForChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_JoinMiniGameForChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_JoinMiniGameForChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_EndMiniGameForChatRoomGroup_Request::CChatRoom_EndMiniGameForChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , minigame_id_(uint64_t{0u}){}
struct CChatRoom_EndMiniGameForChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_EndMiniGameForChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_EndMiniGameForChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_EndMiniGameForChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_EndMiniGameForChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_EndMiniGameForChatRoomGroup_Request_default_instance_;
constexpr CChatRoom_EndMiniGameForChatRoomGroup_Response::CChatRoom_EndMiniGameForChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_EndMiniGameForChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_EndMiniGameForChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_EndMiniGameForChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_EndMiniGameForChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_EndMiniGameForChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_EndMiniGameForChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_MuteUser_Request::CChatRoom_MuteUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , expiration_(0){}
struct CChatRoom_MuteUser_RequestDefaultTypeInternal {
  constexpr CChatRoom_MuteUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_MuteUser_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_MuteUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_MuteUser_RequestDefaultTypeInternal _CChatRoom_MuteUser_Request_default_instance_;
constexpr CChatRoom_MuteUser_Response::CChatRoom_MuteUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_MuteUser_ResponseDefaultTypeInternal {
  constexpr CChatRoom_MuteUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_MuteUser_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_MuteUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_MuteUser_ResponseDefaultTypeInternal _CChatRoom_MuteUser_Response_default_instance_;
constexpr CChatRoom_KickUser_Request::CChatRoom_KickUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , expiration_(0){}
struct CChatRoom_KickUser_RequestDefaultTypeInternal {
  constexpr CChatRoom_KickUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_KickUser_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_KickUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_KickUser_RequestDefaultTypeInternal _CChatRoom_KickUser_Request_default_instance_;
constexpr CChatRoom_KickUser_Response::CChatRoom_KickUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_KickUser_ResponseDefaultTypeInternal {
  constexpr CChatRoom_KickUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_KickUser_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_KickUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_KickUser_ResponseDefaultTypeInternal _CChatRoom_KickUser_Response_default_instance_;
constexpr CChatRoom_SetUserBanState_Request::CChatRoom_SetUserBanState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , ban_state_(false){}
struct CChatRoom_SetUserBanState_RequestDefaultTypeInternal {
  constexpr CChatRoom_SetUserBanState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetUserBanState_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SetUserBanState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetUserBanState_RequestDefaultTypeInternal _CChatRoom_SetUserBanState_Request_default_instance_;
constexpr CChatRoom_SetUserBanState_Response::CChatRoom_SetUserBanState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_SetUserBanState_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SetUserBanState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetUserBanState_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SetUserBanState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetUserBanState_ResponseDefaultTypeInternal _CChatRoom_SetUserBanState_Response_default_instance_;
constexpr CChatRoom_RevokeInvite_Request::CChatRoom_RevokeInvite_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CChatRoom_RevokeInvite_RequestDefaultTypeInternal {
  constexpr CChatRoom_RevokeInvite_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RevokeInvite_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_RevokeInvite_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RevokeInvite_RequestDefaultTypeInternal _CChatRoom_RevokeInvite_Request_default_instance_;
constexpr CChatRoom_RevokeInvite_Response::CChatRoom_RevokeInvite_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_RevokeInvite_ResponseDefaultTypeInternal {
  constexpr CChatRoom_RevokeInvite_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RevokeInvite_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_RevokeInvite_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RevokeInvite_ResponseDefaultTypeInternal _CChatRoom_RevokeInvite_Response_default_instance_;
constexpr CChatRoom_CreateRole_Request::CChatRoom_CreateRole_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_CreateRole_RequestDefaultTypeInternal {
  constexpr CChatRoom_CreateRole_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateRole_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_CreateRole_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateRole_RequestDefaultTypeInternal _CChatRoom_CreateRole_Request_default_instance_;
constexpr CChatRoom_CreateRole_Response::CChatRoom_CreateRole_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_(nullptr){}
struct CChatRoom_CreateRole_ResponseDefaultTypeInternal {
  constexpr CChatRoom_CreateRole_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateRole_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_CreateRole_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateRole_ResponseDefaultTypeInternal _CChatRoom_CreateRole_Response_default_instance_;
constexpr CChatRoom_GetRoles_Request::CChatRoom_GetRoles_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u}){}
struct CChatRoom_GetRoles_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetRoles_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetRoles_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetRoles_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetRoles_RequestDefaultTypeInternal _CChatRoom_GetRoles_Request_default_instance_;
constexpr CChatRoom_GetRoles_Response::CChatRoom_GetRoles_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_(){}
struct CChatRoom_GetRoles_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetRoles_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetRoles_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetRoles_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetRoles_ResponseDefaultTypeInternal _CChatRoom_GetRoles_Response_default_instance_;
constexpr CChatRoom_RenameRole_Request::CChatRoom_RenameRole_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , role_id_(uint64_t{0u}){}
struct CChatRoom_RenameRole_RequestDefaultTypeInternal {
  constexpr CChatRoom_RenameRole_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RenameRole_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_RenameRole_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RenameRole_RequestDefaultTypeInternal _CChatRoom_RenameRole_Request_default_instance_;
constexpr CChatRoom_RenameRole_Response::CChatRoom_RenameRole_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_RenameRole_ResponseDefaultTypeInternal {
  constexpr CChatRoom_RenameRole_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RenameRole_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_RenameRole_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RenameRole_ResponseDefaultTypeInternal _CChatRoom_RenameRole_Response_default_instance_;
constexpr CChatRoom_ReorderRole_Request::CChatRoom_ReorderRole_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , role_id_(uint64_t{0u})
  , ordinal_(0u){}
struct CChatRoom_ReorderRole_RequestDefaultTypeInternal {
  constexpr CChatRoom_ReorderRole_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ReorderRole_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_ReorderRole_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ReorderRole_RequestDefaultTypeInternal _CChatRoom_ReorderRole_Request_default_instance_;
constexpr CChatRoom_ReorderRole_Response::CChatRoom_ReorderRole_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_ReorderRole_ResponseDefaultTypeInternal {
  constexpr CChatRoom_ReorderRole_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ReorderRole_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_ReorderRole_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ReorderRole_ResponseDefaultTypeInternal _CChatRoom_ReorderRole_Response_default_instance_;
constexpr CChatRoom_DeleteRole_Request::CChatRoom_DeleteRole_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , role_id_(uint64_t{0u}){}
struct CChatRoom_DeleteRole_RequestDefaultTypeInternal {
  constexpr CChatRoom_DeleteRole_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteRole_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteRole_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteRole_RequestDefaultTypeInternal _CChatRoom_DeleteRole_Request_default_instance_;
constexpr CChatRoom_DeleteRole_Response::CChatRoom_DeleteRole_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_DeleteRole_ResponseDefaultTypeInternal {
  constexpr CChatRoom_DeleteRole_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteRole_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteRole_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteRole_ResponseDefaultTypeInternal _CChatRoom_DeleteRole_Response_default_instance_;
constexpr CChatRoom_GetRoleActions_Request::CChatRoom_GetRoleActions_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , role_id_(uint64_t{0u}){}
struct CChatRoom_GetRoleActions_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetRoleActions_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetRoleActions_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetRoleActions_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetRoleActions_RequestDefaultTypeInternal _CChatRoom_GetRoleActions_Request_default_instance_;
constexpr CChatRoom_GetRoleActions_Response::CChatRoom_GetRoleActions_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_(){}
struct CChatRoom_GetRoleActions_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetRoleActions_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetRoleActions_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetRoleActions_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetRoleActions_ResponseDefaultTypeInternal _CChatRoom_GetRoleActions_Response_default_instance_;
constexpr CChatRoom_ReplaceRoleActions_Request::CChatRoom_ReplaceRoleActions_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_(nullptr)
  , chat_group_id_(uint64_t{0u})
  , role_id_(uint64_t{0u}){}
struct CChatRoom_ReplaceRoleActions_RequestDefaultTypeInternal {
  constexpr CChatRoom_ReplaceRoleActions_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ReplaceRoleActions_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_ReplaceRoleActions_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ReplaceRoleActions_RequestDefaultTypeInternal _CChatRoom_ReplaceRoleActions_Request_default_instance_;
constexpr CChatRoom_ReplaceRoleActions_Response::CChatRoom_ReplaceRoleActions_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_ReplaceRoleActions_ResponseDefaultTypeInternal {
  constexpr CChatRoom_ReplaceRoleActions_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ReplaceRoleActions_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_ReplaceRoleActions_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ReplaceRoleActions_ResponseDefaultTypeInternal _CChatRoom_ReplaceRoleActions_Response_default_instance_;
constexpr CChatRoom_AddRoleToUser_Request::CChatRoom_AddRoleToUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , role_id_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CChatRoom_AddRoleToUser_RequestDefaultTypeInternal {
  constexpr CChatRoom_AddRoleToUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_AddRoleToUser_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_AddRoleToUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_AddRoleToUser_RequestDefaultTypeInternal _CChatRoom_AddRoleToUser_Request_default_instance_;
constexpr CChatRoom_AddRoleToUser_Response::CChatRoom_AddRoleToUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_AddRoleToUser_ResponseDefaultTypeInternal {
  constexpr CChatRoom_AddRoleToUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_AddRoleToUser_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_AddRoleToUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_AddRoleToUser_ResponseDefaultTypeInternal _CChatRoom_AddRoleToUser_Response_default_instance_;
constexpr CChatRoom_GetRolesForUser_Request::CChatRoom_GetRolesForUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CChatRoom_GetRolesForUser_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetRolesForUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetRolesForUser_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetRolesForUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetRolesForUser_RequestDefaultTypeInternal _CChatRoom_GetRolesForUser_Request_default_instance_;
constexpr CChatRoom_GetRolesForUser_Response::CChatRoom_GetRolesForUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_ids_(){}
struct CChatRoom_GetRolesForUser_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetRolesForUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetRolesForUser_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetRolesForUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetRolesForUser_ResponseDefaultTypeInternal _CChatRoom_GetRolesForUser_Response_default_instance_;
constexpr CChatRoom_DeleteRoleFromUser_Request::CChatRoom_DeleteRoleFromUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , role_id_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CChatRoom_DeleteRoleFromUser_RequestDefaultTypeInternal {
  constexpr CChatRoom_DeleteRoleFromUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteRoleFromUser_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteRoleFromUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteRoleFromUser_RequestDefaultTypeInternal _CChatRoom_DeleteRoleFromUser_Request_default_instance_;
constexpr CChatRoom_DeleteRoleFromUser_Response::CChatRoom_DeleteRoleFromUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_DeleteRoleFromUser_ResponseDefaultTypeInternal {
  constexpr CChatRoom_DeleteRoleFromUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteRoleFromUser_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteRoleFromUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteRoleFromUser_ResponseDefaultTypeInternal _CChatRoom_DeleteRoleFromUser_Response_default_instance_;
constexpr CChatRoom_JoinChatRoomGroup_Request::CChatRoom_JoinChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_JoinChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_JoinChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_JoinChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_JoinChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_JoinChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_JoinChatRoomGroup_Request_default_instance_;
constexpr CChatRoom_JoinChatRoomGroup_Response::CChatRoom_JoinChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr)
  , user_chat_state_(nullptr)
  , join_chat_id_(uint64_t{0u})
  , time_expire_(0u){}
struct CChatRoom_JoinChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_JoinChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_JoinChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_JoinChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_JoinChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_JoinChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_InviteFriendToChatRoomGroup_Request::CChatRoom_InviteFriendToChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , skip_friendsui_check_(false){}
struct CChatRoom_InviteFriendToChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_InviteFriendToChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_InviteFriendToChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_InviteFriendToChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_InviteFriendToChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_InviteFriendToChatRoomGroup_Request_default_instance_;
constexpr CChatRoom_InviteFriendToChatRoomGroup_Response::CChatRoom_InviteFriendToChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_InviteFriendToChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_InviteFriendToChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_InviteFriendToChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_InviteFriendToChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_InviteFriendToChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_InviteFriendToChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_LeaveChatRoomGroup_Request::CChatRoom_LeaveChatRoomGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u}){}
struct CChatRoom_LeaveChatRoomGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_LeaveChatRoomGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_LeaveChatRoomGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_LeaveChatRoomGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_LeaveChatRoomGroup_RequestDefaultTypeInternal _CChatRoom_LeaveChatRoomGroup_Request_default_instance_;
constexpr CChatRoom_LeaveChatRoomGroup_Response::CChatRoom_LeaveChatRoomGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_LeaveChatRoomGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_LeaveChatRoomGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_LeaveChatRoomGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_LeaveChatRoomGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_LeaveChatRoomGroup_ResponseDefaultTypeInternal _CChatRoom_LeaveChatRoomGroup_Response_default_instance_;
constexpr CChatRoom_CreateChatRoom_Request::CChatRoom_CreateChatRoom_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , allow_voice_(false){}
struct CChatRoom_CreateChatRoom_RequestDefaultTypeInternal {
  constexpr CChatRoom_CreateChatRoom_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateChatRoom_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_CreateChatRoom_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateChatRoom_RequestDefaultTypeInternal _CChatRoom_CreateChatRoom_Request_default_instance_;
constexpr CChatRoom_CreateChatRoom_Response::CChatRoom_CreateChatRoom_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_room_(nullptr){}
struct CChatRoom_CreateChatRoom_ResponseDefaultTypeInternal {
  constexpr CChatRoom_CreateChatRoom_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateChatRoom_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_CreateChatRoom_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateChatRoom_ResponseDefaultTypeInternal _CChatRoom_CreateChatRoom_Response_default_instance_;
constexpr CChatRoom_DeleteChatRoom_Request::CChatRoom_DeleteChatRoom_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_DeleteChatRoom_RequestDefaultTypeInternal {
  constexpr CChatRoom_DeleteChatRoom_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteChatRoom_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteChatRoom_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteChatRoom_RequestDefaultTypeInternal _CChatRoom_DeleteChatRoom_Request_default_instance_;
constexpr CChatRoom_DeleteChatRoom_Response::CChatRoom_DeleteChatRoom_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_DeleteChatRoom_ResponseDefaultTypeInternal {
  constexpr CChatRoom_DeleteChatRoom_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteChatRoom_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteChatRoom_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteChatRoom_ResponseDefaultTypeInternal _CChatRoom_DeleteChatRoom_Response_default_instance_;
constexpr CChatRoom_RenameChatRoom_Request::CChatRoom_RenameChatRoom_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_RenameChatRoom_RequestDefaultTypeInternal {
  constexpr CChatRoom_RenameChatRoom_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RenameChatRoom_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_RenameChatRoom_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RenameChatRoom_RequestDefaultTypeInternal _CChatRoom_RenameChatRoom_Request_default_instance_;
constexpr CChatRoom_RenameChatRoom_Response::CChatRoom_RenameChatRoom_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_RenameChatRoom_ResponseDefaultTypeInternal {
  constexpr CChatRoom_RenameChatRoom_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_RenameChatRoom_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_RenameChatRoom_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_RenameChatRoom_ResponseDefaultTypeInternal _CChatRoom_RenameChatRoom_Response_default_instance_;
constexpr CChatRoom_ReorderChatRoom_Request::CChatRoom_ReorderChatRoom_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , move_after_chat_id_(uint64_t{0u}){}
struct CChatRoom_ReorderChatRoom_RequestDefaultTypeInternal {
  constexpr CChatRoom_ReorderChatRoom_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ReorderChatRoom_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_ReorderChatRoom_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ReorderChatRoom_RequestDefaultTypeInternal _CChatRoom_ReorderChatRoom_Request_default_instance_;
constexpr CChatRoom_ReorderChatRoom_Response::CChatRoom_ReorderChatRoom_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_ReorderChatRoom_ResponseDefaultTypeInternal {
  constexpr CChatRoom_ReorderChatRoom_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ReorderChatRoom_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_ReorderChatRoom_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ReorderChatRoom_ResponseDefaultTypeInternal _CChatRoom_ReorderChatRoom_Response_default_instance_;
constexpr CChatRoom_SendChatMessage_Request::CChatRoom_SendChatMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , echo_to_sender_(false){}
struct CChatRoom_SendChatMessage_RequestDefaultTypeInternal {
  constexpr CChatRoom_SendChatMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SendChatMessage_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SendChatMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SendChatMessage_RequestDefaultTypeInternal _CChatRoom_SendChatMessage_Request_default_instance_;
constexpr CChatRoom_SendChatMessage_Response::CChatRoom_SendChatMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modified_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_without_bb_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_timestamp_(0u)
  , ordinal_(0u){}
struct CChatRoom_SendChatMessage_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SendChatMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SendChatMessage_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SendChatMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SendChatMessage_ResponseDefaultTypeInternal _CChatRoom_SendChatMessage_Response_default_instance_;
constexpr CChatRoom_JoinVoiceChat_Request::CChatRoom_JoinVoiceChat_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_JoinVoiceChat_RequestDefaultTypeInternal {
  constexpr CChatRoom_JoinVoiceChat_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_JoinVoiceChat_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_JoinVoiceChat_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_JoinVoiceChat_RequestDefaultTypeInternal _CChatRoom_JoinVoiceChat_Request_default_instance_;
constexpr CChatRoom_JoinVoiceChat_Response::CChatRoom_JoinVoiceChat_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voice_chatid_(uint64_t{0u}){}
struct CChatRoom_JoinVoiceChat_ResponseDefaultTypeInternal {
  constexpr CChatRoom_JoinVoiceChat_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_JoinVoiceChat_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_JoinVoiceChat_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_JoinVoiceChat_ResponseDefaultTypeInternal _CChatRoom_JoinVoiceChat_Response_default_instance_;
constexpr CChatRoom_LeaveVoiceChat_Request::CChatRoom_LeaveVoiceChat_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_LeaveVoiceChat_RequestDefaultTypeInternal {
  constexpr CChatRoom_LeaveVoiceChat_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_LeaveVoiceChat_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_LeaveVoiceChat_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_LeaveVoiceChat_RequestDefaultTypeInternal _CChatRoom_LeaveVoiceChat_Request_default_instance_;
constexpr CChatRoom_LeaveVoiceChat_Response::CChatRoom_LeaveVoiceChat_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_LeaveVoiceChat_ResponseDefaultTypeInternal {
  constexpr CChatRoom_LeaveVoiceChat_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_LeaveVoiceChat_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_LeaveVoiceChat_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_LeaveVoiceChat_ResponseDefaultTypeInternal _CChatRoom_LeaveVoiceChat_Response_default_instance_;
constexpr CChatRoom_GetMessageHistory_Request::CChatRoom_GetMessageHistory_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , last_time_(0u)
  , last_ordinal_(0u)
  , start_time_(0u)
  , start_ordinal_(0u)
  , max_count_(0u){}
struct CChatRoom_GetMessageHistory_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetMessageHistory_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMessageHistory_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetMessageHistory_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMessageHistory_RequestDefaultTypeInternal _CChatRoom_GetMessageHistory_Request_default_instance_;
constexpr ServerMessage::ServerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(0)

  , accountid_param_(0u){}
struct ServerMessageDefaultTypeInternal {
  constexpr ServerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerMessageDefaultTypeInternal() {}
  union {
    ServerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
constexpr CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reaction_type_(0)

  , num_reactors_(0u)
  , has_user_reacted_(false){}
struct CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReactionDefaultTypeInternal {
  constexpr CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReactionDefaultTypeInternal() {}
  union {
    CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReactionDefaultTypeInternal _CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction_default_instance_;
constexpr CChatRoom_GetMessageHistory_Response_ChatMessage::CChatRoom_GetMessageHistory_Response_ChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactions_()
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_message_(nullptr)
  , sender_(0u)
  , server_timestamp_(0u)
  , ordinal_(0u)
  , deleted_(false){}
struct CChatRoom_GetMessageHistory_Response_ChatMessageDefaultTypeInternal {
  constexpr CChatRoom_GetMessageHistory_Response_ChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMessageHistory_Response_ChatMessageDefaultTypeInternal() {}
  union {
    CChatRoom_GetMessageHistory_Response_ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMessageHistory_Response_ChatMessageDefaultTypeInternal _CChatRoom_GetMessageHistory_Response_ChatMessage_default_instance_;
constexpr CChatRoom_GetMessageHistory_Response::CChatRoom_GetMessageHistory_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , more_available_(false){}
struct CChatRoom_GetMessageHistory_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetMessageHistory_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMessageHistory_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetMessageHistory_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMessageHistory_ResponseDefaultTypeInternal _CChatRoom_GetMessageHistory_Response_default_instance_;
constexpr CChatRoom_GetMyChatRoomGroups_Request::CChatRoom_GetMyChatRoomGroups_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_GetMyChatRoomGroups_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetMyChatRoomGroups_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMyChatRoomGroups_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetMyChatRoomGroups_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMyChatRoomGroups_RequestDefaultTypeInternal _CChatRoom_GetMyChatRoomGroups_Request_default_instance_;
constexpr CChatRoom_GetChatRoomGroupSummary_Response::CChatRoom_GetChatRoomGroupSummary_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_rooms_()
  , top_members_()
  , role_ids_()
  , role_actions_()
  , party_beacons_()
  , chat_group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_tagline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_avatar_sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_ugc_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , active_member_count_(0u)
  , active_voice_member_count_(0u)
  , default_chat_id_(uint64_t{0u})
  , clanid_(0u)
  , accountid_owner_(0u)
  , default_role_id_(uint64_t{0u})
  , rank_(0)

  , watching_broadcast_accountid_(0u)
  , watching_broadcast_channel_id_(uint64_t{0u})
  , appid_(0u)
  , disabled_(false)
  , active_minigame_id_(uint64_t{0u}){}
struct CChatRoom_GetChatRoomGroupSummary_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetChatRoomGroupSummary_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetChatRoomGroupSummary_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetChatRoomGroupSummary_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetChatRoomGroupSummary_ResponseDefaultTypeInternal _CChatRoom_GetChatRoomGroupSummary_Response_default_instance_;
constexpr CChatRoomSummaryPair::CChatRoomSummaryPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_chat_group_state_(nullptr)
  , group_summary_(nullptr){}
struct CChatRoomSummaryPairDefaultTypeInternal {
  constexpr CChatRoomSummaryPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomSummaryPairDefaultTypeInternal() {}
  union {
    CChatRoomSummaryPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomSummaryPairDefaultTypeInternal _CChatRoomSummaryPair_default_instance_;
constexpr CChatRoom_GetMyChatRoomGroups_Response::CChatRoom_GetMyChatRoomGroups_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_room_groups_(){}
struct CChatRoom_GetMyChatRoomGroups_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetMyChatRoomGroups_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMyChatRoomGroups_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetMyChatRoomGroups_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMyChatRoomGroups_ResponseDefaultTypeInternal _CChatRoom_GetMyChatRoomGroups_Response_default_instance_;
constexpr CChatRoom_GetChatRoomGroupState_Request::CChatRoom_GetChatRoomGroupState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u}){}
struct CChatRoom_GetChatRoomGroupState_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetChatRoomGroupState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetChatRoomGroupState_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetChatRoomGroupState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetChatRoomGroupState_RequestDefaultTypeInternal _CChatRoom_GetChatRoomGroupState_Request_default_instance_;
constexpr CChatRoom_GetChatRoomGroupState_Response::CChatRoom_GetChatRoomGroupState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr){}
struct CChatRoom_GetChatRoomGroupState_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetChatRoomGroupState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetChatRoomGroupState_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetChatRoomGroupState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetChatRoomGroupState_ResponseDefaultTypeInternal _CChatRoom_GetChatRoomGroupState_Response_default_instance_;
constexpr CChatRoom_GetChatRoomGroupSummary_Request::CChatRoom_GetChatRoomGroupSummary_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u}){}
struct CChatRoom_GetChatRoomGroupSummary_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetChatRoomGroupSummary_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetChatRoomGroupSummary_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetChatRoomGroupSummary_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetChatRoomGroupSummary_RequestDefaultTypeInternal _CChatRoom_GetChatRoomGroupSummary_Request_default_instance_;
constexpr CChatRoom_SetAppChatRoomGroupForceActive_Request::CChatRoom_SetAppChatRoomGroupForceActive_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , requesting_app_id_(0u){}
struct CChatRoom_SetAppChatRoomGroupForceActive_RequestDefaultTypeInternal {
  constexpr CChatRoom_SetAppChatRoomGroupForceActive_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetAppChatRoomGroupForceActive_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SetAppChatRoomGroupForceActive_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetAppChatRoomGroupForceActive_RequestDefaultTypeInternal _CChatRoom_SetAppChatRoomGroupForceActive_Request_default_instance_;
constexpr CChatRoom_SetAppChatRoomGroupForceActive_Response::CChatRoom_SetAppChatRoomGroupForceActive_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_in_channel_()
  , result_(0u){}
struct CChatRoom_SetAppChatRoomGroupForceActive_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SetAppChatRoomGroupForceActive_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetAppChatRoomGroupForceActive_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SetAppChatRoomGroupForceActive_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetAppChatRoomGroupForceActive_ResponseDefaultTypeInternal _CChatRoom_SetAppChatRoomGroupForceActive_Response_default_instance_;
constexpr CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , requesting_app_id_(0u){}
struct CChatRoom_SetAppChatRoomGroupStopForceActive_NotificationDefaultTypeInternal {
  constexpr CChatRoom_SetAppChatRoomGroupStopForceActive_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetAppChatRoomGroupStopForceActive_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_SetAppChatRoomGroupStopForceActive_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetAppChatRoomGroupStopForceActive_NotificationDefaultTypeInternal _CChatRoom_SetAppChatRoomGroupStopForceActive_Notification_default_instance_;
constexpr CChatRoom_AckChatMessage_Notification::CChatRoom_AckChatMessage_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , timestamp_(0u){}
struct CChatRoom_AckChatMessage_NotificationDefaultTypeInternal {
  constexpr CChatRoom_AckChatMessage_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_AckChatMessage_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_AckChatMessage_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_AckChatMessage_NotificationDefaultTypeInternal _CChatRoom_AckChatMessage_Notification_default_instance_;
constexpr CChatRoom_CreateInviteLink_Request::CChatRoom_CreateInviteLink_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , seconds_valid_(0u){}
struct CChatRoom_CreateInviteLink_RequestDefaultTypeInternal {
  constexpr CChatRoom_CreateInviteLink_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateInviteLink_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_CreateInviteLink_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateInviteLink_RequestDefaultTypeInternal _CChatRoom_CreateInviteLink_Request_default_instance_;
constexpr CChatRoom_CreateInviteLink_Response::CChatRoom_CreateInviteLink_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seconds_valid_(0u){}
struct CChatRoom_CreateInviteLink_ResponseDefaultTypeInternal {
  constexpr CChatRoom_CreateInviteLink_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_CreateInviteLink_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_CreateInviteLink_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_CreateInviteLink_ResponseDefaultTypeInternal _CChatRoom_CreateInviteLink_Response_default_instance_;
constexpr CChatRoom_GetInviteLinkInfo_Request::CChatRoom_GetInviteLinkInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CChatRoom_GetInviteLinkInfo_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetInviteLinkInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteLinkInfo_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteLinkInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteLinkInfo_RequestDefaultTypeInternal _CChatRoom_GetInviteLinkInfo_Request_default_instance_;
constexpr CChatRoom_GetInviteLinkInfo_Response::CChatRoom_GetInviteLinkInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_summary_(nullptr)
  , user_chat_group_state_(nullptr)
  , steamid_sender_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , time_expires_(0u)
  , time_kick_expire_(0u)
  , banned_(false){}
struct CChatRoom_GetInviteLinkInfo_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetInviteLinkInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteLinkInfo_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteLinkInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteLinkInfo_ResponseDefaultTypeInternal _CChatRoom_GetInviteLinkInfo_Response_default_instance_;
constexpr CChatRoom_GetInviteInfo_Request::CChatRoom_GetInviteInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_invitee_(uint64_t{0u})
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_GetInviteInfo_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetInviteInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteInfo_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteInfo_RequestDefaultTypeInternal _CChatRoom_GetInviteInfo_Request_default_instance_;
constexpr CChatRoom_GetInviteInfo_Response::CChatRoom_GetInviteInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_summary_(nullptr)
  , time_kick_expire_(0u)
  , banned_(false){}
struct CChatRoom_GetInviteInfo_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetInviteInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteInfo_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteInfo_ResponseDefaultTypeInternal _CChatRoom_GetInviteInfo_Response_default_instance_;
constexpr CChatRoom_GetInviteLinksForGroup_Request::CChatRoom_GetInviteLinksForGroup_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u}){}
struct CChatRoom_GetInviteLinksForGroup_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetInviteLinksForGroup_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteLinksForGroup_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteLinksForGroup_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteLinksForGroup_RequestDefaultTypeInternal _CChatRoom_GetInviteLinksForGroup_Request_default_instance_;
constexpr CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_creator_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , time_expires_(0u){}
struct CChatRoom_GetInviteLinksForGroup_Response_LinkInfoDefaultTypeInternal {
  constexpr CChatRoom_GetInviteLinksForGroup_Response_LinkInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteLinksForGroup_Response_LinkInfoDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteLinksForGroup_Response_LinkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteLinksForGroup_Response_LinkInfoDefaultTypeInternal _CChatRoom_GetInviteLinksForGroup_Response_LinkInfo_default_instance_;
constexpr CChatRoom_GetInviteLinksForGroup_Response::CChatRoom_GetInviteLinksForGroup_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_links_(){}
struct CChatRoom_GetInviteLinksForGroup_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetInviteLinksForGroup_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteLinksForGroup_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteLinksForGroup_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteLinksForGroup_ResponseDefaultTypeInternal _CChatRoom_GetInviteLinksForGroup_Response_default_instance_;
constexpr CChatRoom_GetBanList_Request::CChatRoom_GetBanList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u}){}
struct CChatRoom_GetBanList_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetBanList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetBanList_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetBanList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetBanList_RequestDefaultTypeInternal _CChatRoom_GetBanList_Request_default_instance_;
constexpr CChatRoom_GetBanList_Response_BanInfo::CChatRoom_GetBanList_Response_BanInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ban_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , accountid_actor_(0u)
  , time_banned_(0u){}
struct CChatRoom_GetBanList_Response_BanInfoDefaultTypeInternal {
  constexpr CChatRoom_GetBanList_Response_BanInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetBanList_Response_BanInfoDefaultTypeInternal() {}
  union {
    CChatRoom_GetBanList_Response_BanInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetBanList_Response_BanInfoDefaultTypeInternal _CChatRoom_GetBanList_Response_BanInfo_default_instance_;
constexpr CChatRoom_GetBanList_Response::CChatRoom_GetBanList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bans_(){}
struct CChatRoom_GetBanList_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetBanList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetBanList_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetBanList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetBanList_ResponseDefaultTypeInternal _CChatRoom_GetBanList_Response_default_instance_;
constexpr CChatRoom_GetInviteList_Request::CChatRoom_GetInviteList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u}){}
struct CChatRoom_GetInviteList_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetInviteList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteList_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteList_RequestDefaultTypeInternal _CChatRoom_GetInviteList_Request_default_instance_;
constexpr CChatRoomGroupInvite::CChatRoomGroupInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_(0u)
  , accountid_actor_(0u)
  , time_invited_(0u){}
struct CChatRoomGroupInviteDefaultTypeInternal {
  constexpr CChatRoomGroupInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomGroupInviteDefaultTypeInternal() {}
  union {
    CChatRoomGroupInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomGroupInviteDefaultTypeInternal _CChatRoomGroupInvite_default_instance_;
constexpr CChatRoom_GetInviteList_Response::CChatRoom_GetInviteList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invites_(){}
struct CChatRoom_GetInviteList_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetInviteList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetInviteList_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetInviteList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetInviteList_ResponseDefaultTypeInternal _CChatRoom_GetInviteList_Response_default_instance_;
constexpr CChatRoom_DeleteInviteLink_Request::CChatRoom_DeleteInviteLink_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_DeleteInviteLink_RequestDefaultTypeInternal {
  constexpr CChatRoom_DeleteInviteLink_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteInviteLink_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteInviteLink_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteInviteLink_RequestDefaultTypeInternal _CChatRoom_DeleteInviteLink_Request_default_instance_;
constexpr CChatRoom_DeleteInviteLink_Response::CChatRoom_DeleteInviteLink_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_DeleteInviteLink_ResponseDefaultTypeInternal {
  constexpr CChatRoom_DeleteInviteLink_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteInviteLink_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteInviteLink_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteInviteLink_ResponseDefaultTypeInternal _CChatRoom_DeleteInviteLink_Response_default_instance_;
constexpr CChatRoom_SetSessionActiveChatRoomGroups_Request::CChatRoom_SetSessionActiveChatRoomGroups_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_ids_()
  , chat_groups_data_requested_()
  , virtualize_members_threshold_(0){}
struct CChatRoom_SetSessionActiveChatRoomGroups_RequestDefaultTypeInternal {
  constexpr CChatRoom_SetSessionActiveChatRoomGroups_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetSessionActiveChatRoomGroups_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SetSessionActiveChatRoomGroups_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetSessionActiveChatRoomGroups_RequestDefaultTypeInternal _CChatRoom_SetSessionActiveChatRoomGroups_Request_default_instance_;
constexpr CChatRoom_SetSessionActiveChatRoomGroups_Response::CChatRoom_SetSessionActiveChatRoomGroups_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_states_()
  , virtualize_members_chat_group_ids_(){}
struct CChatRoom_SetSessionActiveChatRoomGroups_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SetSessionActiveChatRoomGroups_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetSessionActiveChatRoomGroups_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SetSessionActiveChatRoomGroups_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetSessionActiveChatRoomGroups_ResponseDefaultTypeInternal _CChatRoom_SetSessionActiveChatRoomGroups_Response_default_instance_;
constexpr CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desktop_notification_level_(0)

  , mobile_notification_level_(0)

  , unread_indicator_muted_(false){}
struct CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferencesDefaultTypeInternal {
  constexpr CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferencesDefaultTypeInternal() {}
  union {
    CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferencesDefaultTypeInternal _CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_default_instance_;
constexpr CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_id_(uint64_t{0u})
  , desktop_notification_level_(0)

  , mobile_notification_level_(0)

  , unread_indicator_muted_(false){}
struct CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferencesDefaultTypeInternal {
  constexpr CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferencesDefaultTypeInternal() {}
  union {
    CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferencesDefaultTypeInternal _CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_default_instance_;
constexpr CChatRoom_SetUserChatGroupPreferences_Request::CChatRoom_SetUserChatGroupPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_room_preferences_()
  , chat_group_preferences_(nullptr)
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_SetUserChatGroupPreferences_RequestDefaultTypeInternal {
  constexpr CChatRoom_SetUserChatGroupPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetUserChatGroupPreferences_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SetUserChatGroupPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetUserChatGroupPreferences_RequestDefaultTypeInternal _CChatRoom_SetUserChatGroupPreferences_Request_default_instance_;
constexpr CChatRoom_SetUserChatGroupPreferences_Response::CChatRoom_SetUserChatGroupPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_SetUserChatGroupPreferences_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SetUserChatGroupPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SetUserChatGroupPreferences_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SetUserChatGroupPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SetUserChatGroupPreferences_ResponseDefaultTypeInternal _CChatRoom_SetUserChatGroupPreferences_Response_default_instance_;
constexpr CChatRoom_DeleteChatMessages_Request_Message::CChatRoom_DeleteChatMessages_Request_Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_timestamp_(0u)
  , ordinal_(0u){}
struct CChatRoom_DeleteChatMessages_Request_MessageDefaultTypeInternal {
  constexpr CChatRoom_DeleteChatMessages_Request_MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteChatMessages_Request_MessageDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteChatMessages_Request_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteChatMessages_Request_MessageDefaultTypeInternal _CChatRoom_DeleteChatMessages_Request_Message_default_instance_;
constexpr CChatRoom_DeleteChatMessages_Request::CChatRoom_DeleteChatMessages_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_DeleteChatMessages_RequestDefaultTypeInternal {
  constexpr CChatRoom_DeleteChatMessages_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteChatMessages_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteChatMessages_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteChatMessages_RequestDefaultTypeInternal _CChatRoom_DeleteChatMessages_Request_default_instance_;
constexpr CChatRoom_DeleteChatMessages_Response::CChatRoom_DeleteChatMessages_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CChatRoom_DeleteChatMessages_ResponseDefaultTypeInternal {
  constexpr CChatRoom_DeleteChatMessages_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_DeleteChatMessages_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_DeleteChatMessages_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_DeleteChatMessages_ResponseDefaultTypeInternal _CChatRoom_DeleteChatMessages_Response_default_instance_;
constexpr CChatRoom_UpdateMemberListView_Notification::CChatRoom_UpdateMemberListView_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_subscribe_accountids_()
  , persona_unsubscribe_accountids_()
  , chat_group_id_(uint64_t{0u})
  , view_id_(uint64_t{0u})
  , start_(0)
  , end_(0)
  , client_changenumber_(0)
  , delete_view_(false){}
struct CChatRoom_UpdateMemberListView_NotificationDefaultTypeInternal {
  constexpr CChatRoom_UpdateMemberListView_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_UpdateMemberListView_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_UpdateMemberListView_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_UpdateMemberListView_NotificationDefaultTypeInternal _CChatRoom_UpdateMemberListView_Notification_default_instance_;
constexpr CChatRoom_SearchMembers_Request::CChatRoom_SearchMembers_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , search_id_(uint64_t{0u})
  , max_results_(0){}
struct CChatRoom_SearchMembers_RequestDefaultTypeInternal {
  constexpr CChatRoom_SearchMembers_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SearchMembers_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_SearchMembers_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SearchMembers_RequestDefaultTypeInternal _CChatRoom_SearchMembers_Request_default_instance_;
constexpr CChatRoom_SearchMembers_Response_MemberMatch::CChatRoom_SearchMembers_Response_MemberMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_(nullptr)
  , accountid_(0){}
struct CChatRoom_SearchMembers_Response_MemberMatchDefaultTypeInternal {
  constexpr CChatRoom_SearchMembers_Response_MemberMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SearchMembers_Response_MemberMatchDefaultTypeInternal() {}
  union {
    CChatRoom_SearchMembers_Response_MemberMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SearchMembers_Response_MemberMatchDefaultTypeInternal _CChatRoom_SearchMembers_Response_MemberMatch_default_instance_;
constexpr CChatRoom_SearchMembers_Response::CChatRoom_SearchMembers_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matching_members_()
  , status_flags_(0u){}
struct CChatRoom_SearchMembers_ResponseDefaultTypeInternal {
  constexpr CChatRoom_SearchMembers_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_SearchMembers_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_SearchMembers_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_SearchMembers_ResponseDefaultTypeInternal _CChatRoom_SearchMembers_Response_default_instance_;
constexpr CChatRoom_UpdateMessageReaction_Request::CChatRoom_UpdateMessageReaction_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , server_timestamp_(0u)
  , ordinal_(0u)
  , reaction_type_(0)

  , is_add_(false){}
struct CChatRoom_UpdateMessageReaction_RequestDefaultTypeInternal {
  constexpr CChatRoom_UpdateMessageReaction_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_UpdateMessageReaction_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_UpdateMessageReaction_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_UpdateMessageReaction_RequestDefaultTypeInternal _CChatRoom_UpdateMessageReaction_Request_default_instance_;
constexpr CChatRoom_UpdateMessageReaction_Response::CChatRoom_UpdateMessageReaction_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_reactors_(0u){}
struct CChatRoom_UpdateMessageReaction_ResponseDefaultTypeInternal {
  constexpr CChatRoom_UpdateMessageReaction_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_UpdateMessageReaction_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_UpdateMessageReaction_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_UpdateMessageReaction_ResponseDefaultTypeInternal _CChatRoom_UpdateMessageReaction_Response_default_instance_;
constexpr CChatRoom_GetMessageReactionReactors_Request::CChatRoom_GetMessageReactionReactors_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , server_timestamp_(0u)
  , ordinal_(0u)
  , reaction_type_(0)

  , limit_(0u){}
struct CChatRoom_GetMessageReactionReactors_RequestDefaultTypeInternal {
  constexpr CChatRoom_GetMessageReactionReactors_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMessageReactionReactors_RequestDefaultTypeInternal() {}
  union {
    CChatRoom_GetMessageReactionReactors_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMessageReactionReactors_RequestDefaultTypeInternal _CChatRoom_GetMessageReactionReactors_Request_default_instance_;
constexpr CChatRoom_GetMessageReactionReactors_Response::CChatRoom_GetMessageReactionReactors_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactors_(){}
struct CChatRoom_GetMessageReactionReactors_ResponseDefaultTypeInternal {
  constexpr CChatRoom_GetMessageReactionReactors_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_GetMessageReactionReactors_ResponseDefaultTypeInternal() {}
  union {
    CChatRoom_GetMessageReactionReactors_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_GetMessageReactionReactors_ResponseDefaultTypeInternal _CChatRoom_GetMessageReactionReactors_Response_default_instance_;
constexpr CClanChatRooms_GetClanChatRoomInfo_Request::CClanChatRooms_GetClanChatRoomInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , autocreate_(true){}
struct CClanChatRooms_GetClanChatRoomInfo_RequestDefaultTypeInternal {
  constexpr CClanChatRooms_GetClanChatRoomInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClanChatRooms_GetClanChatRoomInfo_RequestDefaultTypeInternal() {}
  union {
    CClanChatRooms_GetClanChatRoomInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClanChatRooms_GetClanChatRoomInfo_RequestDefaultTypeInternal _CClanChatRooms_GetClanChatRoomInfo_Request_default_instance_;
constexpr CClanChatRooms_GetClanChatRoomInfo_Response::CClanChatRooms_GetClanChatRoomInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_summary_(nullptr){}
struct CClanChatRooms_GetClanChatRoomInfo_ResponseDefaultTypeInternal {
  constexpr CClanChatRooms_GetClanChatRoomInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClanChatRooms_GetClanChatRoomInfo_ResponseDefaultTypeInternal() {}
  union {
    CClanChatRooms_GetClanChatRoomInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClanChatRooms_GetClanChatRoomInfo_ResponseDefaultTypeInternal _CClanChatRooms_GetClanChatRoomInfo_Response_default_instance_;
constexpr CClanChatRooms_SetClanChatRoomPrivate_Request::CClanChatRooms_SetClanChatRoomPrivate_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , chat_room_private_(false){}
struct CClanChatRooms_SetClanChatRoomPrivate_RequestDefaultTypeInternal {
  constexpr CClanChatRooms_SetClanChatRoomPrivate_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClanChatRooms_SetClanChatRoomPrivate_RequestDefaultTypeInternal() {}
  union {
    CClanChatRooms_SetClanChatRoomPrivate_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClanChatRooms_SetClanChatRoomPrivate_RequestDefaultTypeInternal _CClanChatRooms_SetClanChatRoomPrivate_Request_default_instance_;
constexpr CClanChatRooms_SetClanChatRoomPrivate_Response::CClanChatRooms_SetClanChatRoomPrivate_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_room_private_(false){}
struct CClanChatRooms_SetClanChatRoomPrivate_ResponseDefaultTypeInternal {
  constexpr CClanChatRooms_SetClanChatRoomPrivate_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClanChatRooms_SetClanChatRoomPrivate_ResponseDefaultTypeInternal() {}
  union {
    CClanChatRooms_SetClanChatRoomPrivate_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClanChatRooms_SetClanChatRoomPrivate_ResponseDefaultTypeInternal _CClanChatRooms_SetClanChatRoomPrivate_Response_default_instance_;
constexpr CChatMentions::CChatMentions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mention_accountids_()
  , mention_all_(false)
  , mention_here_(false){}
struct CChatMentionsDefaultTypeInternal {
  constexpr CChatMentionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatMentionsDefaultTypeInternal() {}
  union {
    CChatMentions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatMentionsDefaultTypeInternal _CChatMentions_default_instance_;
constexpr CChatRoom_IncomingChatMessage_Notification::CChatRoom_IncomingChatMessage_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_no_bbcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mentions_(nullptr)
  , server_message_(nullptr)
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , steamid_sender_(uint64_t{0u})
  , timestamp_(0u)
  , ordinal_(0u){}
struct CChatRoom_IncomingChatMessage_NotificationDefaultTypeInternal {
  constexpr CChatRoom_IncomingChatMessage_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_IncomingChatMessage_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_IncomingChatMessage_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_IncomingChatMessage_NotificationDefaultTypeInternal _CChatRoom_IncomingChatMessage_Notification_default_instance_;
constexpr CChatRoom_ChatMessageModified_Notification_ChatMessage::CChatRoom_ChatMessageModified_Notification_ChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_timestamp_(0u)
  , ordinal_(0u)
  , deleted_(false){}
struct CChatRoom_ChatMessageModified_Notification_ChatMessageDefaultTypeInternal {
  constexpr CChatRoom_ChatMessageModified_Notification_ChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ChatMessageModified_Notification_ChatMessageDefaultTypeInternal() {}
  union {
    CChatRoom_ChatMessageModified_Notification_ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ChatMessageModified_Notification_ChatMessageDefaultTypeInternal _CChatRoom_ChatMessageModified_Notification_ChatMessage_default_instance_;
constexpr CChatRoom_ChatMessageModified_Notification::CChatRoom_ChatMessageModified_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u}){}
struct CChatRoom_ChatMessageModified_NotificationDefaultTypeInternal {
  constexpr CChatRoom_ChatMessageModified_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ChatMessageModified_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_ChatMessageModified_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ChatMessageModified_NotificationDefaultTypeInternal _CChatRoom_ChatMessageModified_Notification_default_instance_;
constexpr CChatRoom_MemberStateChange_Notification::CChatRoom_MemberStateChange_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_(nullptr)
  , chat_group_id_(uint64_t{0u})
  , change_(0)
{}
struct CChatRoom_MemberStateChange_NotificationDefaultTypeInternal {
  constexpr CChatRoom_MemberStateChange_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_MemberStateChange_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_MemberStateChange_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_MemberStateChange_NotificationDefaultTypeInternal _CChatRoom_MemberStateChange_Notification_default_instance_;
constexpr CChatRoom_ChatRoomHeaderState_Notification::CChatRoom_ChatRoomHeaderState_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_state_(nullptr){}
struct CChatRoom_ChatRoomHeaderState_NotificationDefaultTypeInternal {
  constexpr CChatRoom_ChatRoomHeaderState_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ChatRoomHeaderState_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_ChatRoomHeaderState_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ChatRoomHeaderState_NotificationDefaultTypeInternal _CChatRoom_ChatRoomHeaderState_Notification_default_instance_;
constexpr CChatRoom_ChatRoomGroupRoomsChange_Notification::CChatRoom_ChatRoomGroupRoomsChange_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_rooms_()
  , chat_group_id_(uint64_t{0u})
  , default_chat_id_(uint64_t{0u}){}
struct CChatRoom_ChatRoomGroupRoomsChange_NotificationDefaultTypeInternal {
  constexpr CChatRoom_ChatRoomGroupRoomsChange_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_ChatRoomGroupRoomsChange_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_ChatRoomGroupRoomsChange_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_ChatRoomGroupRoomsChange_NotificationDefaultTypeInternal _CChatRoom_ChatRoomGroupRoomsChange_Notification_default_instance_;
constexpr CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_id_(uint64_t{0u})
  , chat_group_id_(uint64_t{0u}){}
struct CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_NotificationDefaultTypeInternal {
  constexpr CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_NotificationDefaultTypeInternal _CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification_default_instance_;
constexpr ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_chat_group_state_(nullptr)
  , group_summary_(nullptr)
  , chat_group_id_(uint64_t{0u})
  , user_action_(0)
{}
struct ChatRoomClient_NotifyChatGroupUserStateChanged_NotificationDefaultTypeInternal {
  constexpr ChatRoomClient_NotifyChatGroupUserStateChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatRoomClient_NotifyChatGroupUserStateChanged_NotificationDefaultTypeInternal() {}
  union {
    ChatRoomClient_NotifyChatGroupUserStateChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatRoomClient_NotifyChatGroupUserStateChanged_NotificationDefaultTypeInternal _ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_default_instance_;
constexpr ChatRoomClient_NotifyChatRoomDisconnect_Notification::ChatRoomClient_NotifyChatRoomDisconnect_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_ids_(){}
struct ChatRoomClient_NotifyChatRoomDisconnect_NotificationDefaultTypeInternal {
  constexpr ChatRoomClient_NotifyChatRoomDisconnect_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatRoomClient_NotifyChatRoomDisconnect_NotificationDefaultTypeInternal() {}
  union {
    ChatRoomClient_NotifyChatRoomDisconnect_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatRoomClient_NotifyChatRoomDisconnect_NotificationDefaultTypeInternal _ChatRoomClient_NotifyChatRoomDisconnect_Notification_default_instance_;
constexpr CChatRoomMemberListView::CChatRoomMemberListView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , end_(0)
  , total_count_(0)
  , client_changenumber_(0)
  , server_changenumber_(0){}
struct CChatRoomMemberListViewDefaultTypeInternal {
  constexpr CChatRoomMemberListViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomMemberListViewDefaultTypeInternal() {}
  union {
    CChatRoomMemberListView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomMemberListViewDefaultTypeInternal _CChatRoomMemberListView_default_instance_;
constexpr CChatRoomMemberSummaryCounts::CChatRoomMemberSummaryCounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ingame_(0)
  , online_(0)
  , offline_(0){}
struct CChatRoomMemberSummaryCountsDefaultTypeInternal {
  constexpr CChatRoomMemberSummaryCountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomMemberSummaryCountsDefaultTypeInternal() {}
  union {
    CChatRoomMemberSummaryCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomMemberSummaryCountsDefaultTypeInternal _CChatRoomMemberSummaryCounts_default_instance_;
constexpr CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_(nullptr)
  , rank_(0)
  , accountid_(0u){}
struct CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntryDefaultTypeInternal {
  constexpr CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntryDefaultTypeInternal() {}
  union {
    CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntryDefaultTypeInternal _CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry_default_instance_;
constexpr CChatRoomClient_MemberListViewUpdated_Notification::CChatRoomClient_MemberListViewUpdated_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , subscribed_personas_()
  , view_(nullptr)
  , member_summary_(nullptr)
  , chat_group_id_(uint64_t{0u})
  , view_id_(uint64_t{0u})
  , status_flags_(0u){}
struct CChatRoomClient_MemberListViewUpdated_NotificationDefaultTypeInternal {
  constexpr CChatRoomClient_MemberListViewUpdated_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoomClient_MemberListViewUpdated_NotificationDefaultTypeInternal() {}
  union {
    CChatRoomClient_MemberListViewUpdated_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoomClient_MemberListViewUpdated_NotificationDefaultTypeInternal _CChatRoomClient_MemberListViewUpdated_Notification_default_instance_;
constexpr CChatRoom_MessageReaction_Notification::CChatRoom_MessageReaction_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(uint64_t{0u})
  , chat_id_(uint64_t{0u})
  , server_timestamp_(0u)
  , ordinal_(0u)
  , reactor_(uint64_t{0u})
  , reaction_type_(0)

  , is_add_(false){}
struct CChatRoom_MessageReaction_NotificationDefaultTypeInternal {
  constexpr CChatRoom_MessageReaction_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatRoom_MessageReaction_NotificationDefaultTypeInternal() {}
  union {
    CChatRoom_MessageReaction_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatRoom_MessageReaction_NotificationDefaultTypeInternal _CChatRoom_MessageReaction_Notification_default_instance_;
constexpr CChatUsability_ClientUsabilityMetrics_Notification_Settings::CChatUsability_ClientUsabilityMetrics_Notification_Settings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_show_ingame_(false)
  , notifications_show_online_(false)
  , notifications_show_message_(false)
  , notifications_events_and_announcements_(false)
  , sounds_play_ingame_(false)
  , sounds_play_online_(false)
  , sounds_play_message_(false)
  , sounds_events_and_announcements_(false)
  , chat_flash_mode_(0)
  , always_new_chat_window_(false)
  , force_alphabetic_friend_sorting_(false)
  , remember_open_chats_(false)
  , compact_quick_access_(false)
  , compact_friends_list_(false)
  , notifications_show_chat_room_notification_(false)
  , sounds_play_chat_room_notification_(false)
  , hide_offline_friends_in_tag_groups_(false)
  , chat_font_size_(0)
  , hide_categorized_friends_(false)
  , categorize_in_game_friends_by_game_(false)
  , use24hour_clock_(false)
  , do_not_disturb_mode_(false)
  , disable_embed_inlining_(false)
  , sign_into_friends_(false)
  , animated_avatars_(false){}
struct CChatUsability_ClientUsabilityMetrics_Notification_SettingsDefaultTypeInternal {
  constexpr CChatUsability_ClientUsabilityMetrics_Notification_SettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatUsability_ClientUsabilityMetrics_Notification_SettingsDefaultTypeInternal() {}
  union {
    CChatUsability_ClientUsabilityMetrics_Notification_Settings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatUsability_ClientUsabilityMetrics_Notification_SettingsDefaultTypeInternal _CChatUsability_ClientUsabilityMetrics_Notification_Settings_default_instance_;
constexpr CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voice_input_gain_(0)
  , voice_output_gain_(0)
  , noise_gate_level_(0)
  , voice_use_echo_cancellation_(false)
  , voice_use_noise_cancellation_(false)
  , voice_use_auto_gain_control_(false)
  , selected_non_default_mic_(false)
  , selected_non_default_output_(false)
  , push_to_talk_enabled_(false)
  , push_to_mute_enabled_(false)
  , play_ptt_sounds_(false){}
struct CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettingsDefaultTypeInternal {
  constexpr CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettingsDefaultTypeInternal() {}
  union {
    CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettingsDefaultTypeInternal _CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings_default_instance_;
constexpr CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : in_game_collapsed_(false)
  , online_collapsed_(false)
  , offline_collapsed_(false)
  , game_groups_collapsed_(0)
  , categories_collapsed_(0){}
struct CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseStateDefaultTypeInternal {
  constexpr CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseStateDefaultTypeInternal() {}
  union {
    CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseStateDefaultTypeInternal _CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState_default_instance_;
constexpr CChatUsability_ClientUsabilityMetrics_Notification_UIState::CChatUsability_ClientUsabilityMetrics_Notification_UIState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : category_collapse_(nullptr)
  , friends_list_height_(0)
  , friends_list_width_(0)
  , friends_list_group_chats_height_(0)
  , chat_popups_opened_(0)
  , friends_list_docked_(false)
  , friends_list_collapsed_(false)
  , friends_list_visible_(false)
  , in_one_on_one_voice_chat_(false)
  , group_chat_tabs_opened_(0)
  , friend_chat_tabs_opened_(0)
  , chat_window_width_(0)
  , chat_window_height_(0)
  , group_chat_left_col_collapsed_(0)
  , group_chat_right_col_collapsed_(0)
  , in_group_voice_chat_(false){}
struct CChatUsability_ClientUsabilityMetrics_Notification_UIStateDefaultTypeInternal {
  constexpr CChatUsability_ClientUsabilityMetrics_Notification_UIStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatUsability_ClientUsabilityMetrics_Notification_UIStateDefaultTypeInternal() {}
  union {
    CChatUsability_ClientUsabilityMetrics_Notification_UIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatUsability_ClientUsabilityMetrics_Notification_UIStateDefaultTypeInternal _CChatUsability_ClientUsabilityMetrics_Notification_UIState_default_instance_;
constexpr CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CChatUsability_ClientUsabilityMetrics_Notification_Metrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friends_count_(0)
  , friends_category_count_(0)
  , friends_categorized_count_(0)
  , friends_online_count_(0)
  , friends_in_game_count_(0)
  , friends_in_game_singleton_count_(0)
  , game_group_count_(0)
  , friends_favorite_count_(0)
  , group_chat_count_(0)
  , group_chat_favorite_count_(0){}
struct CChatUsability_ClientUsabilityMetrics_Notification_MetricsDefaultTypeInternal {
  constexpr CChatUsability_ClientUsabilityMetrics_Notification_MetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatUsability_ClientUsabilityMetrics_Notification_MetricsDefaultTypeInternal() {}
  union {
    CChatUsability_ClientUsabilityMetrics_Notification_Metrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatUsability_ClientUsabilityMetrics_Notification_MetricsDefaultTypeInternal _CChatUsability_ClientUsabilityMetrics_Notification_Metrics_default_instance_;
constexpr CChatUsability_ClientUsabilityMetrics_Notification::CChatUsability_ClientUsabilityMetrics_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : settings_(nullptr)
  , voice_settings_(nullptr)
  , ui_state_(nullptr)
  , metrics_(nullptr)
  , metrics_run_id_(0u)
  , client_build_(0u)
  , metrics_version_(0u)
  , in_web_(false){}
struct CChatUsability_ClientUsabilityMetrics_NotificationDefaultTypeInternal {
  constexpr CChatUsability_ClientUsabilityMetrics_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatUsability_ClientUsabilityMetrics_NotificationDefaultTypeInternal() {}
  union {
    CChatUsability_ClientUsabilityMetrics_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatUsability_ClientUsabilityMetrics_NotificationDefaultTypeInternal _CChatUsability_ClientUsabilityMetrics_Notification_default_instance_;
constexpr CChatUsability_RequestClientUsabilityMetrics_Notification::CChatUsability_RequestClientUsabilityMetrics_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_run_id_(0u){}
struct CChatUsability_RequestClientUsabilityMetrics_NotificationDefaultTypeInternal {
  constexpr CChatUsability_RequestClientUsabilityMetrics_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChatUsability_RequestClientUsabilityMetrics_NotificationDefaultTypeInternal() {}
  union {
    CChatUsability_RequestClientUsabilityMetrics_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChatUsability_RequestClientUsabilityMetrics_NotificationDefaultTypeInternal _CChatUsability_RequestClientUsabilityMetrics_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[151];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[6];

const uint32_t TableStruct_steammessages_5fchat_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChat_RequestFriendPersonaStates_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChat_RequestFriendPersonaStates_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, steamid_partner_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, steamid_invited_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, name_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, steamid_invitees_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, watching_broadcast_accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Request, watching_broadcast_channel_id_),
  1,
  2,
  0,
  ~0u,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CChatRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRole, role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRole, name_),
  PROTOBUF_FIELD_OFFSET(::CChatRole, ordinal_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_create_rename_delete_channel_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_kick_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_ban_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_invite_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_change_tagline_avatar_name_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_chat_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_view_history_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_change_group_roles_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_change_user_roles_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_mention_all_),
  PROTOBUF_FIELD_OFFSET(::CChatRoleActions, can_set_watching_broadcast_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CChatPartyBeacon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatPartyBeacon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatPartyBeacon, app_id_),
  PROTOBUF_FIELD_OFFSET(::CChatPartyBeacon, steamid_owner_),
  PROTOBUF_FIELD_OFFSET(::CChatPartyBeacon, beacon_id_),
  PROTOBUF_FIELD_OFFSET(::CChatPartyBeacon, game_metadata_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, chat_name_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, clanid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, accountid_owner_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, appid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, tagline_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, avatar_sha_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, default_role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, roles_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, role_actions_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, watching_broadcast_accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, party_beacons_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, watching_broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, active_minigame_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, avatar_ugc_url_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupHeaderState, disabled_),
  4,
  0,
  5,
  6,
  10,
  1,
  2,
  7,
  ~0u,
  ~0u,
  9,
  ~0u,
  11,
  12,
  3,
  8,
  PROTOBUF_FIELD_OFFSET(::CChatRoomMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomMember, accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMember, state_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMember, rank_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMember, time_kick_expire_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMember, role_ids_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, chat_name_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, voice_allowed_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, members_in_voice_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, time_last_message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, sort_order_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, last_message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomState, accountid_last_message_),
  2,
  0,
  3,
  ~0u,
  4,
  5,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupState, header_state_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupState, members_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupState, default_chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupState, chat_rooms_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupState, kicked_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, time_joined_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, time_last_ack_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, desktop_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, mobile_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, time_last_mention_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, unread_indicator_muted_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomState, time_first_unread_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, time_joined_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, user_chat_room_state_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, desktop_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, mobile_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, time_last_group_ack_),
  PROTOBUF_FIELD_OFFSET(::CUserChatRoomGroupState, unread_indicator_muted_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, state_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoomGroup_Response, user_chat_state_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Request, name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SaveChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Request, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoomGroup_Response, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Request, tagline_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupTagline_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Request, avatar_sha_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupAvatar_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, watching_broadcast_accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, watching_broadcast_channel_id_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinMiniGameForChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinMiniGameForChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinMiniGameForChatRoomGroup_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinMiniGameForChatRoomGroup_Request, chat_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinMiniGameForChatRoomGroup_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinMiniGameForChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinMiniGameForChatRoomGroup_Response, minigame_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_EndMiniGameForChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_EndMiniGameForChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_EndMiniGameForChatRoomGroup_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_EndMiniGameForChatRoomGroup_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_EndMiniGameForChatRoomGroup_Request, minigame_id_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_EndMiniGameForChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MuteUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MuteUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MuteUser_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MuteUser_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MuteUser_Request, expiration_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MuteUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_KickUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_KickUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_KickUser_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_KickUser_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_KickUser_Request, expiration_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_KickUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserBanState_Request, ban_state_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserBanState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RevokeInvite_Request, steamid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RevokeInvite_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateRole_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateRole_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateRole_Request, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateRole_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateRole_Response, actions_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoles_Request, chat_group_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoles_Response, roles_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameRole_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameRole_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameRole_Request, role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameRole_Request, name_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderRole_Request, ordinal_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRole_Request, role_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRole_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoleActions_Request, role_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoleActions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRoleActions_Response, actions_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Request, actions_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReplaceRoleActions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Request, steamid_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AddRoleToUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Request, steamid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetRolesForUser_Response, role_ids_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Request, steamid_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteRoleFromUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, invite_code_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Request, chat_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, state_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, user_chat_state_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, join_chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinChatRoomGroup_Response, time_expire_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Request, skip_friendsui_check_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_InviteFriendToChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Request, chat_group_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveChatRoomGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, name_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Request, allow_voice_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateChatRoom_Response, chat_room_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Request, chat_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Request, name_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_RenameChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Request, move_after_chat_id_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ReorderChatRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Request, echo_to_sender_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, modified_message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SendChatMessage_Response, message_without_bb_code_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Request, chat_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_JoinVoiceChat_Response, voice_chatid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Request, chat_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_LeaveVoiceChat_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, last_time_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, last_ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, start_time_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, start_ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Request, max_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerMessage, message_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, string_param_),
  PROTOBUF_FIELD_OFFSET(::ServerMessage, accountid_param_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, reaction_type_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, reaction_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, num_reactors_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, has_user_reacted_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, sender_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, server_message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, deleted_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response_ChatMessage, reactions_),
  2,
  3,
  0,
  4,
  1,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, messages_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageHistory_Response, more_available_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_name_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, active_member_count_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, active_voice_member_count_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, default_chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_rooms_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, clanid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_tagline_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, accountid_owner_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, top_members_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, chat_group_avatar_sha_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, rank_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, default_role_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, role_ids_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, role_actions_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, watching_broadcast_accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, appid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, party_beacons_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, watching_broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, active_minigame_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, avatar_ugc_url_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Response, disabled_),
  4,
  0,
  5,
  6,
  7,
  ~0u,
  8,
  1,
  9,
  ~0u,
  2,
  11,
  10,
  ~0u,
  ~0u,
  12,
  14,
  ~0u,
  13,
  16,
  3,
  15,
  PROTOBUF_FIELD_OFFSET(::CChatRoomSummaryPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomSummaryPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomSummaryPair, user_chat_group_state_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomSummaryPair, group_summary_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMyChatRoomGroups_Response, chat_room_groups_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Request, chat_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupState_Response, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetChatRoomGroupSummary_Request, chat_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Request, requesting_app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Response, result_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupForceActive_Response, accounts_in_channel_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, requesting_app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_AckChatMessage_Notification, timestamp_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, seconds_valid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Request, chat_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, invite_code_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_CreateInviteLink_Response, seconds_valid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Request, invite_code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, steamid_sender_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, time_expires_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, group_summary_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, user_chat_group_state_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, time_kick_expire_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinkInfo_Response, banned_),
  2,
  4,
  3,
  0,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, steamid_invitee_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Request, invite_code_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, group_summary_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, time_kick_expire_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteInfo_Response, banned_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Request, chat_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, invite_code_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, steamid_creator_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, time_expires_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, chat_id_),
  0,
  1,
  3,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteLinksForGroup_Response, invite_links_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Request, chat_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, accountid_actor_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, time_banned_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response_BanInfo, ban_reason_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetBanList_Response, bans_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteList_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteList_Request, chat_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupInvite, accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupInvite, accountid_actor_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomGroupInvite, time_invited_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetInviteList_Response, invites_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Request, invite_code_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteInviteLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, chat_group_ids_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, chat_groups_data_requested_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Request, virtualize_members_threshold_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Response, chat_states_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetSessionActiveChatRoomGroups_Response, virtualize_members_chat_group_ids_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, desktop_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, mobile_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, unread_indicator_muted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, desktop_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, mobile_notification_level_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, unread_indicator_muted_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, chat_group_preferences_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Request, chat_room_preferences_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SetUserChatGroupPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request_Message, ordinal_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Request, messages_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_DeleteChatMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, view_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, start_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, end_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, client_changenumber_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, delete_view_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, persona_subscribe_accountids_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMemberListView_Notification, persona_unsubscribe_accountids_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Request, search_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Request, search_text_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Request, max_results_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response_MemberMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response_MemberMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response_MemberMatch, accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response_MemberMatch, persona_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response, matching_members_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_SearchMembers_Response, status_flags_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, reaction_type_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, reaction_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Request, is_add_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_UpdateMessageReaction_Response, num_reactors_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, reaction_type_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, reaction_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Request, limit_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_GetMessageReactionReactors_Response, reactors_),
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Request, autocreate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_GetClanChatRoomInfo_Response, chat_group_summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Request, chat_room_private_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClanChatRooms_SetClanChatRoomPrivate_Response, chat_room_private_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatMentions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatMentions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatMentions, mention_all_),
  PROTOBUF_FIELD_OFFSET(::CChatMentions, mention_here_),
  PROTOBUF_FIELD_OFFSET(::CChatMentions, mention_accountids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, steamid_sender_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, mentions_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, server_message_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, message_no_bbcode_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_IncomingChatMessage_Notification, chat_name_),
  5,
  6,
  7,
  0,
  8,
  3,
  9,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification_ChatMessage, deleted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatMessageModified_Notification, messages_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, member_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MemberStateChange_Notification, change_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomHeaderState_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomHeaderState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomHeaderState_Notification, header_state_),
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, default_chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_ChatRoomGroupRoomsChange_Notification, chat_rooms_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, chat_group_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, user_chat_group_state_),
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, group_summary_),
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, user_action_),
  2,
  0,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatRoomDisconnect_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatRoomClient_NotifyChatRoomDisconnect_Notification, chat_group_ids_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberListView, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberListView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberListView, start_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberListView, end_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberListView, total_count_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberListView, client_changenumber_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberListView, server_changenumber_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberSummaryCounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberSummaryCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberSummaryCounts, ingame_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberSummaryCounts, online_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomMemberSummaryCounts, offline_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry, rank_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry, accountid_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry, persona_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, view_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, view_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, members_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, status_flags_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, member_summary_),
  PROTOBUF_FIELD_OFFSET(::CChatRoomClient_MemberListViewUpdated_Notification, subscribed_personas_),
  2,
  3,
  0,
  ~0u,
  4,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, reactor_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, reaction_type_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, reaction_),
  PROTOBUF_FIELD_OFFSET(::CChatRoom_MessageReaction_Notification, is_add_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_ingame_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_online_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_message_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_events_and_announcements_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_ingame_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_online_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_message_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_events_and_announcements_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, always_new_chat_window_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, force_alphabetic_friend_sorting_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, chat_flash_mode_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, remember_open_chats_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, compact_quick_access_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, compact_friends_list_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_chat_room_notification_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sounds_play_chat_room_notification_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, hide_offline_friends_in_tag_groups_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, hide_categorized_friends_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, categorize_in_game_friends_by_game_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, chat_font_size_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, use24hour_clock_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, do_not_disturb_mode_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, disable_embed_inlining_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, sign_into_friends_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Settings, animated_avatars_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  8,
  11,
  12,
  13,
  14,
  15,
  16,
  18,
  19,
  17,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_input_gain_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_output_gain_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, noise_gate_level_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_use_echo_cancellation_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_use_noise_cancellation_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_use_auto_gain_control_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, selected_non_default_mic_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, selected_non_default_output_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, push_to_talk_enabled_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, push_to_mute_enabled_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, play_ptt_sounds_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, in_game_collapsed_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, online_collapsed_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, offline_collapsed_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, game_groups_collapsed_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, categories_collapsed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_height_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_width_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_docked_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_collapsed_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_group_chats_height_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friends_list_visible_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, chat_popups_opened_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, group_chat_tabs_opened_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, friend_chat_tabs_opened_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, chat_window_width_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, chat_window_height_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, category_collapse_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, group_chat_left_col_collapsed_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, group_chat_right_col_collapsed_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, in_one_on_one_voice_chat_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_UIState, in_group_voice_chat_),
  1,
  2,
  5,
  6,
  3,
  7,
  4,
  9,
  10,
  11,
  12,
  0,
  13,
  14,
  8,
  15,
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_category_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_categorized_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_online_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_in_game_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_in_game_singleton_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, game_group_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_favorite_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, group_chat_count_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics, group_chat_favorite_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, metrics_run_id_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, client_build_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, metrics_version_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, in_web_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, settings_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, voice_settings_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, ui_state_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_ClientUsabilityMetrics_Notification, metrics_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CChatUsability_RequestClientUsabilityMetrics_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChatUsability_RequestClientUsabilityMetrics_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChatUsability_RequestClientUsabilityMetrics_Notification, metrics_run_id_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CChat_RequestFriendPersonaStates_Request)},
  { 6, -1, -1, sizeof(::CChat_RequestFriendPersonaStates_Response)},
  { 12, 24, -1, sizeof(::CChatRoom_CreateChatRoomGroup_Request)},
  { 30, 39, -1, sizeof(::CChatRole)},
  { 42, 60, -1, sizeof(::CChatRoleActions)},
  { 72, 82, -1, sizeof(::CChatPartyBeacon)},
  { 86, 108, -1, sizeof(::CChatRoomGroupHeaderState)},
  { 124, 135, -1, sizeof(::CChatRoomMember)},
  { 140, 154, -1, sizeof(::CChatRoomState)},
  { 162, 173, -1, sizeof(::CChatRoomGroupState)},
  { 178, 192, -1, sizeof(::CUserChatRoomState)},
  { 200, 213, -1, sizeof(::CUserChatRoomGroupState)},
  { 220, 229, -1, sizeof(::CChatRoom_CreateChatRoomGroup_Response)},
  { 232, 240, -1, sizeof(::CChatRoom_SaveChatRoomGroup_Request)},
  { 242, -1, -1, sizeof(::CChatRoom_SaveChatRoomGroup_Response)},
  { 248, 256, -1, sizeof(::CChatRoom_RenameChatRoomGroup_Request)},
  { 258, 265, -1, sizeof(::CChatRoom_RenameChatRoomGroup_Response)},
  { 266, 274, -1, sizeof(::CChatRoom_SetChatRoomGroupTagline_Request)},
  { 276, -1, -1, sizeof(::CChatRoom_SetChatRoomGroupTagline_Response)},
  { 282, 290, -1, sizeof(::CChatRoom_SetChatRoomGroupAvatar_Request)},
  { 292, -1, -1, sizeof(::CChatRoom_SetChatRoomGroupAvatar_Response)},
  { 298, 307, -1, sizeof(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)},
  { 310, -1, -1, sizeof(::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)},
  { 316, 324, -1, sizeof(::CChatRoom_JoinMiniGameForChatRoomGroup_Request)},
  { 326, 333, -1, sizeof(::CChatRoom_JoinMiniGameForChatRoomGroup_Response)},
  { 334, 343, -1, sizeof(::CChatRoom_EndMiniGameForChatRoomGroup_Request)},
  { 346, -1, -1, sizeof(::CChatRoom_EndMiniGameForChatRoomGroup_Response)},
  { 352, 361, -1, sizeof(::CChatRoom_MuteUser_Request)},
  { 364, -1, -1, sizeof(::CChatRoom_MuteUser_Response)},
  { 370, 379, -1, sizeof(::CChatRoom_KickUser_Request)},
  { 382, -1, -1, sizeof(::CChatRoom_KickUser_Response)},
  { 388, 397, -1, sizeof(::CChatRoom_SetUserBanState_Request)},
  { 400, -1, -1, sizeof(::CChatRoom_SetUserBanState_Response)},
  { 406, 414, -1, sizeof(::CChatRoom_RevokeInvite_Request)},
  { 416, -1, -1, sizeof(::CChatRoom_RevokeInvite_Response)},
  { 422, 430, -1, sizeof(::CChatRoom_CreateRole_Request)},
  { 432, 439, -1, sizeof(::CChatRoom_CreateRole_Response)},
  { 440, 447, -1, sizeof(::CChatRoom_GetRoles_Request)},
  { 448, -1, -1, sizeof(::CChatRoom_GetRoles_Response)},
  { 455, 464, -1, sizeof(::CChatRoom_RenameRole_Request)},
  { 467, -1, -1, sizeof(::CChatRoom_RenameRole_Response)},
  { 473, 482, -1, sizeof(::CChatRoom_ReorderRole_Request)},
  { 485, -1, -1, sizeof(::CChatRoom_ReorderRole_Response)},
  { 491, 499, -1, sizeof(::CChatRoom_DeleteRole_Request)},
  { 501, -1, -1, sizeof(::CChatRoom_DeleteRole_Response)},
  { 507, 515, -1, sizeof(::CChatRoom_GetRoleActions_Request)},
  { 517, -1, -1, sizeof(::CChatRoom_GetRoleActions_Response)},
  { 524, 533, -1, sizeof(::CChatRoom_ReplaceRoleActions_Request)},
  { 536, -1, -1, sizeof(::CChatRoom_ReplaceRoleActions_Response)},
  { 542, 551, -1, sizeof(::CChatRoom_AddRoleToUser_Request)},
  { 554, -1, -1, sizeof(::CChatRoom_AddRoleToUser_Response)},
  { 560, 568, -1, sizeof(::CChatRoom_GetRolesForUser_Request)},
  { 570, -1, -1, sizeof(::CChatRoom_GetRolesForUser_Response)},
  { 577, 586, -1, sizeof(::CChatRoom_DeleteRoleFromUser_Request)},
  { 589, -1, -1, sizeof(::CChatRoom_DeleteRoleFromUser_Response)},
  { 595, 604, -1, sizeof(::CChatRoom_JoinChatRoomGroup_Request)},
  { 607, 617, -1, sizeof(::CChatRoom_JoinChatRoomGroup_Response)},
  { 621, 631, -1, sizeof(::CChatRoom_InviteFriendToChatRoomGroup_Request)},
  { 635, -1, -1, sizeof(::CChatRoom_InviteFriendToChatRoomGroup_Response)},
  { 641, 648, -1, sizeof(::CChatRoom_LeaveChatRoomGroup_Request)},
  { 649, -1, -1, sizeof(::CChatRoom_LeaveChatRoomGroup_Response)},
  { 655, 664, -1, sizeof(::CChatRoom_CreateChatRoom_Request)},
  { 667, 674, -1, sizeof(::CChatRoom_CreateChatRoom_Response)},
  { 675, 683, -1, sizeof(::CChatRoom_DeleteChatRoom_Request)},
  { 685, -1, -1, sizeof(::CChatRoom_DeleteChatRoom_Response)},
  { 691, 700, -1, sizeof(::CChatRoom_RenameChatRoom_Request)},
  { 703, -1, -1, sizeof(::CChatRoom_RenameChatRoom_Response)},
  { 709, 718, -1, sizeof(::CChatRoom_ReorderChatRoom_Request)},
  { 721, -1, -1, sizeof(::CChatRoom_ReorderChatRoom_Response)},
  { 727, 737, -1, sizeof(::CChatRoom_SendChatMessage_Request)},
  { 741, 751, -1, sizeof(::CChatRoom_SendChatMessage_Response)},
  { 755, 763, -1, sizeof(::CChatRoom_JoinVoiceChat_Request)},
  { 765, 772, -1, sizeof(::CChatRoom_JoinVoiceChat_Response)},
  { 773, 781, -1, sizeof(::CChatRoom_LeaveVoiceChat_Request)},
  { 783, -1, -1, sizeof(::CChatRoom_LeaveVoiceChat_Response)},
  { 789, 802, -1, sizeof(::CChatRoom_GetMessageHistory_Request)},
  { 809, 818, -1, sizeof(::ServerMessage)},
  { 821, 831, -1, sizeof(::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction)},
  { 835, 848, -1, sizeof(::CChatRoom_GetMessageHistory_Response_ChatMessage)},
  { 855, 863, -1, sizeof(::CChatRoom_GetMessageHistory_Response)},
  { 865, -1, -1, sizeof(::CChatRoom_GetMyChatRoomGroups_Request)},
  { 871, 899, -1, sizeof(::CChatRoom_GetChatRoomGroupSummary_Response)},
  { 921, 929, -1, sizeof(::CChatRoomSummaryPair)},
  { 931, -1, -1, sizeof(::CChatRoom_GetMyChatRoomGroups_Response)},
  { 938, 945, -1, sizeof(::CChatRoom_GetChatRoomGroupState_Request)},
  { 946, 953, -1, sizeof(::CChatRoom_GetChatRoomGroupState_Response)},
  { 954, 961, -1, sizeof(::CChatRoom_GetChatRoomGroupSummary_Request)},
  { 962, 970, -1, sizeof(::CChatRoom_SetAppChatRoomGroupForceActive_Request)},
  { 972, 980, -1, sizeof(::CChatRoom_SetAppChatRoomGroupForceActive_Response)},
  { 982, 990, -1, sizeof(::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)},
  { 992, 1001, -1, sizeof(::CChatRoom_AckChatMessage_Notification)},
  { 1004, 1013, -1, sizeof(::CChatRoom_CreateInviteLink_Request)},
  { 1016, 1024, -1, sizeof(::CChatRoom_CreateInviteLink_Response)},
  { 1026, 1033, -1, sizeof(::CChatRoom_GetInviteLinkInfo_Request)},
  { 1034, 1047, -1, sizeof(::CChatRoom_GetInviteLinkInfo_Response)},
  { 1054, 1064, -1, sizeof(::CChatRoom_GetInviteInfo_Request)},
  { 1068, 1077, -1, sizeof(::CChatRoom_GetInviteInfo_Response)},
  { 1080, 1087, -1, sizeof(::CChatRoom_GetInviteLinksForGroup_Request)},
  { 1088, 1098, -1, sizeof(::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo)},
  { 1102, -1, -1, sizeof(::CChatRoom_GetInviteLinksForGroup_Response)},
  { 1109, 1116, -1, sizeof(::CChatRoom_GetBanList_Request)},
  { 1117, 1127, -1, sizeof(::CChatRoom_GetBanList_Response_BanInfo)},
  { 1131, -1, -1, sizeof(::CChatRoom_GetBanList_Response)},
  { 1138, 1145, -1, sizeof(::CChatRoom_GetInviteList_Request)},
  { 1146, 1155, -1, sizeof(::CChatRoomGroupInvite)},
  { 1158, -1, -1, sizeof(::CChatRoom_GetInviteList_Response)},
  { 1165, 1173, -1, sizeof(::CChatRoom_DeleteInviteLink_Request)},
  { 1175, -1, -1, sizeof(::CChatRoom_DeleteInviteLink_Response)},
  { 1181, 1190, -1, sizeof(::CChatRoom_SetSessionActiveChatRoomGroups_Request)},
  { 1193, -1, -1, sizeof(::CChatRoom_SetSessionActiveChatRoomGroups_Response)},
  { 1201, 1210, -1, sizeof(::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences)},
  { 1213, 1223, -1, sizeof(::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences)},
  { 1227, 1236, -1, sizeof(::CChatRoom_SetUserChatGroupPreferences_Request)},
  { 1239, -1, -1, sizeof(::CChatRoom_SetUserChatGroupPreferences_Response)},
  { 1245, 1253, -1, sizeof(::CChatRoom_DeleteChatMessages_Request_Message)},
  { 1255, 1264, -1, sizeof(::CChatRoom_DeleteChatMessages_Request)},
  { 1267, -1, -1, sizeof(::CChatRoom_DeleteChatMessages_Response)},
  { 1273, 1287, -1, sizeof(::CChatRoom_UpdateMemberListView_Notification)},
  { 1295, 1305, -1, sizeof(::CChatRoom_SearchMembers_Request)},
  { 1309, 1317, -1, sizeof(::CChatRoom_SearchMembers_Response_MemberMatch)},
  { 1319, 1327, -1, sizeof(::CChatRoom_SearchMembers_Response)},
  { 1329, 1342, -1, sizeof(::CChatRoom_UpdateMessageReaction_Request)},
  { 1349, 1356, -1, sizeof(::CChatRoom_UpdateMessageReaction_Response)},
  { 1357, 1370, -1, sizeof(::CChatRoom_GetMessageReactionReactors_Request)},
  { 1377, -1, -1, sizeof(::CChatRoom_GetMessageReactionReactors_Response)},
  { 1384, 1392, -1, sizeof(::CClanChatRooms_GetClanChatRoomInfo_Request)},
  { 1394, 1401, -1, sizeof(::CClanChatRooms_GetClanChatRoomInfo_Response)},
  { 1402, 1410, -1, sizeof(::CClanChatRooms_SetClanChatRoomPrivate_Request)},
  { 1412, 1419, -1, sizeof(::CClanChatRooms_SetClanChatRoomPrivate_Response)},
  { 1420, 1429, -1, sizeof(::CChatMentions)},
  { 1432, 1448, -1, sizeof(::CChatRoom_IncomingChatMessage_Notification)},
  { 1458, 1467, -1, sizeof(::CChatRoom_ChatMessageModified_Notification_ChatMessage)},
  { 1470, 1479, -1, sizeof(::CChatRoom_ChatMessageModified_Notification)},
  { 1482, 1491, -1, sizeof(::CChatRoom_MemberStateChange_Notification)},
  { 1494, 1501, -1, sizeof(::CChatRoom_ChatRoomHeaderState_Notification)},
  { 1502, 1511, -1, sizeof(::CChatRoom_ChatRoomGroupRoomsChange_Notification)},
  { 1514, 1522, -1, sizeof(::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)},
  { 1524, 1534, -1, sizeof(::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)},
  { 1538, -1, -1, sizeof(::ChatRoomClient_NotifyChatRoomDisconnect_Notification)},
  { 1545, 1556, -1, sizeof(::CChatRoomMemberListView)},
  { 1561, 1570, -1, sizeof(::CChatRoomMemberSummaryCounts)},
  { 1573, 1582, -1, sizeof(::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry)},
  { 1585, 1598, -1, sizeof(::CChatRoomClient_MemberListViewUpdated_Notification)},
  { 1605, 1619, -1, sizeof(::CChatRoom_MessageReaction_Notification)},
  { 1627, 1658, -1, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_Settings)},
  { 1683, 1700, -1, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings)},
  { 1711, 1722, -1, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState)},
  { 1727, 1749, -1, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_UIState)},
  { 1765, 1781, -1, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification_Metrics)},
  { 1791, 1805, -1, sizeof(::CChatUsability_ClientUsabilityMetrics_Notification)},
  { 1813, 1820, -1, sizeof(::CChatUsability_RequestClientUsabilityMetrics_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChat_RequestFriendPersonaStates_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChat_RequestFriendPersonaStates_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoleActions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatPartyBeacon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomGroupHeaderState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomGroupState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserChatRoomState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUserChatRoomGroupState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SaveChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SaveChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RenameChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RenameChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetChatRoomGroupTagline_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetChatRoomGroupTagline_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetChatRoomGroupAvatar_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetChatRoomGroupAvatar_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetChatRoomGroupWatchingBroadcast_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetChatRoomGroupWatchingBroadcast_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_JoinMiniGameForChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_JoinMiniGameForChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_EndMiniGameForChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_EndMiniGameForChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_MuteUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_MuteUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_KickUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_KickUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetUserBanState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetUserBanState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RevokeInvite_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RevokeInvite_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateRole_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateRole_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetRoles_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetRoles_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RenameRole_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RenameRole_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ReorderRole_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ReorderRole_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteRole_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteRole_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetRoleActions_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetRoleActions_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ReplaceRoleActions_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ReplaceRoleActions_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_AddRoleToUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_AddRoleToUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetRolesForUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetRolesForUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteRoleFromUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteRoleFromUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_JoinChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_JoinChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_InviteFriendToChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_InviteFriendToChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_LeaveChatRoomGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_LeaveChatRoomGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateChatRoom_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateChatRoom_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteChatRoom_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteChatRoom_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RenameChatRoom_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_RenameChatRoom_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ReorderChatRoom_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ReorderChatRoom_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SendChatMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SendChatMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_JoinVoiceChat_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_JoinVoiceChat_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_LeaveVoiceChat_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_LeaveVoiceChat_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMessageHistory_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMessageHistory_Response_ChatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMessageHistory_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMyChatRoomGroups_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetChatRoomGroupSummary_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomSummaryPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMyChatRoomGroups_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetChatRoomGroupState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetChatRoomGroupState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetChatRoomGroupSummary_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetAppChatRoomGroupForceActive_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetAppChatRoomGroupForceActive_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetAppChatRoomGroupStopForceActive_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_AckChatMessage_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateInviteLink_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_CreateInviteLink_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteLinkInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteLinkInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteLinksForGroup_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteLinksForGroup_Response_LinkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteLinksForGroup_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetBanList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetBanList_Response_BanInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetBanList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomGroupInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetInviteList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteInviteLink_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteInviteLink_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetSessionActiveChatRoomGroups_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetSessionActiveChatRoomGroups_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SetUserChatGroupPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteChatMessages_Request_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteChatMessages_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_DeleteChatMessages_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_UpdateMemberListView_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SearchMembers_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SearchMembers_Response_MemberMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_SearchMembers_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_UpdateMessageReaction_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_UpdateMessageReaction_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMessageReactionReactors_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_GetMessageReactionReactors_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClanChatRooms_GetClanChatRoomInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClanChatRooms_GetClanChatRoomInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClanChatRooms_SetClanChatRoomPrivate_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClanChatRooms_SetClanChatRoomPrivate_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatMentions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_IncomingChatMessage_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ChatMessageModified_Notification_ChatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ChatMessageModified_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_MemberStateChange_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ChatRoomHeaderState_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_ChatRoomGroupRoomsChange_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChatRoomClient_NotifyChatRoomDisconnect_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomMemberListView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomMemberSummaryCounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoomClient_MemberListViewUpdated_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatRoom_MessageReaction_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_Settings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_UIState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_Metrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatUsability_ClientUsabilityMetrics_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChatUsability_RequestClientUsabilityMetrics_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fchat_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_chat.steamclient.proto\032\030"
  "steammessages_base.proto\032,steammessages_"
  "unified_base.steamclient.proto\032(steammes"
  "sages_clientserver_friends.proto\"*\n(CCha"
  "t_RequestFriendPersonaStates_Request\"+\n)"
  "CChat_RequestFriendPersonaStates_Respons"
  "e\"\316\001\n%CChatRoom_CreateChatRoomGroup_Requ"
  "est\022\027\n\017steamid_partner\030\001 \001(\006\022\027\n\017steamid_"
  "invited\030\002 \001(\006\022\014\n\004name\030\003 \001(\t\022\030\n\020steamid_i"
  "nvitees\030\004 \003(\006\022$\n\034watching_broadcast_acco"
  "untid\030\006 \001(\r\022%\n\035watching_broadcast_channe"
  "l_id\030\007 \001(\004\";\n\tCChatRole\022\017\n\007role_id\030\001 \001(\004"
  "\022\014\n\004name\030\002 \001(\t\022\017\n\007ordinal\030\003 \001(\r\"\324\002\n\020CCha"
  "tRoleActions\022\017\n\007role_id\030\001 \001(\004\022(\n can_cre"
  "ate_rename_delete_channel\030\002 \001(\010\022\020\n\010can_k"
  "ick\030\003 \001(\010\022\017\n\007can_ban\030\004 \001(\010\022\022\n\ncan_invite"
  "\030\005 \001(\010\022&\n\036can_change_tagline_avatar_name"
  "\030\006 \001(\010\022\020\n\010can_chat\030\007 \001(\010\022\030\n\020can_view_his"
  "tory\030\010 \001(\010\022\036\n\026can_change_group_roles\030\t \001"
  "(\010\022\035\n\025can_change_user_roles\030\n \001(\010\022\027\n\017can"
  "_mention_all\030\013 \001(\010\022\"\n\032can_set_watching_b"
  "roadcast\030\014 \001(\010\"c\n\020CChatPartyBeacon\022\016\n\006ap"
  "p_id\030\001 \001(\r\022\025\n\rsteamid_owner\030\002 \001(\006\022\021\n\tbea"
  "con_id\030\003 \001(\006\022\025\n\rgame_metadata\030\004 \001(\t\"\274\003\n\031"
  "CChatRoomGroupHeaderState\022\025\n\rchat_group_"
  "id\030\001 \001(\004\022\021\n\tchat_name\030\002 \001(\t\022\016\n\006clanid\030\r "
  "\001(\r\022\027\n\017accountid_owner\030\016 \001(\r\022\r\n\005appid\030\025 "
  "\001(\r\022\017\n\007tagline\030\017 \001(\t\022\022\n\navatar_sha\030\020 \001(\014"
  "\022\027\n\017default_role_id\030\021 \001(\004\022\031\n\005roles\030\022 \003(\013"
  "2\n.CChatRole\022\'\n\014role_actions\030\023 \003(\0132\021.CCh"
  "atRoleActions\022$\n\034watching_broadcast_acco"
  "untid\030\024 \001(\r\022(\n\rparty_beacons\030\026 \003(\0132\021.CCh"
  "atPartyBeacon\022%\n\035watching_broadcast_chan"
  "nel_id\030\027 \001(\004\022\032\n\022active_minigame_id\030\030 \001(\004"
  "\022\026\n\016avatar_ugc_url\030\031 \001(\t\022\020\n\010disabled\030\032 \001"
  "(\010\"\323\001\n\017CChatRoomMember\022\021\n\taccountid\030\001 \001("
  "\r\022@\n\005state\030\003 \001(\0162\023.EChatRoomJoinState:\034k"
  "_EChatRoomJoinState_Default\022\?\n\004rank\030\004 \001("
  "\0162\023.EChatRoomGroupRank:\034k_EChatRoomGroup"
  "Rank_Default\022\030\n\020time_kick_expire\030\006 \001(\r\022\020"
  "\n\010role_ids\030\007 \003(\004\"\312\001\n\016CChatRoomState\022\017\n\007c"
  "hat_id\030\001 \001(\004\022\021\n\tchat_name\030\002 \001(\t\022\025\n\rvoice"
  "_allowed\030\003 \001(\010\022\030\n\020members_in_voice\030\004 \003(\r"
  "\022\031\n\021time_last_message\030\005 \001(\r\022\022\n\nsort_orde"
  "r\030\006 \001(\r\022\024\n\014last_message\030\007 \001(\t\022\036\n\026account"
  "id_last_message\030\010 \001(\r\"\312\001\n\023CChatRoomGroup"
  "State\0220\n\014header_state\030\001 \001(\0132\032.CChatRoomG"
  "roupHeaderState\022!\n\007members\030\002 \003(\0132\020.CChat"
  "RoomMember\022\027\n\017default_chat_id\030\004 \001(\004\022#\n\nc"
  "hat_rooms\030\005 \003(\0132\017.CChatRoomState\022 \n\006kick"
  "ed\030\007 \003(\0132\020.CChatRoomMember\"\373\002\n\022CUserChat"
  "RoomState\022\017\n\007chat_id\030\001 \001(\004\022\023\n\013time_joine"
  "d\030\002 \001(\r\022\025\n\rtime_last_ack\030\003 \001(\r\022e\n\032deskto"
  "p_notification_level\030\004 \001(\0162\033.EChatRoomNo"
  "tificationLevel:$k_EChatroomNotification"
  "Level_Invalid\022d\n\031mobile_notification_lev"
  "el\030\005 \001(\0162\033.EChatRoomNotificationLevel:$k"
  "_EChatroomNotificationLevel_Invalid\022\031\n\021t"
  "ime_last_mention\030\006 \001(\r\022%\n\026unread_indicat"
  "or_muted\030\007 \001(\010:\005false\022\031\n\021time_first_unre"
  "ad\030\010 \001(\r\"\211\003\n\027CUserChatRoomGroupState\022\025\n\r"
  "chat_group_id\030\001 \001(\004\022\023\n\013time_joined\030\002 \001(\r"
  "\0221\n\024user_chat_room_state\030\003 \003(\0132\023.CUserCh"
  "atRoomState\022e\n\032desktop_notification_leve"
  "l\030\004 \001(\0162\033.EChatRoomNotificationLevel:$k_"
  "EChatroomNotificationLevel_Invalid\022d\n\031mo"
  "bile_notification_level\030\005 \001(\0162\033.EChatRoo"
  "mNotificationLevel:$k_EChatroomNotificat"
  "ionLevel_Invalid\022\033\n\023time_last_group_ack\030"
  "\006 \001(\r\022%\n\026unread_indicator_muted\030\007 \001(\010:\005f"
  "alse\"\227\001\n&CChatRoom_CreateChatRoomGroup_R"
  "esponse\022\025\n\rchat_group_id\030\001 \001(\004\022#\n\005state\030"
  "\002 \001(\0132\024.CChatRoomGroupState\0221\n\017user_chat"
  "_state\030\003 \001(\0132\030.CUserChatRoomGroupState\"J"
  "\n#CChatRoom_SaveChatRoomGroup_Request\022\025\n"
  "\rchat_group_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"&\n$CC"
  "hatRoom_SaveChatRoomGroup_Response\"L\n%CC"
  "hatRoom_RenameChatRoomGroup_Request\022\025\n\rc"
  "hat_group_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"6\n&CCha"
  "tRoom_RenameChatRoomGroup_Response\022\014\n\004na"
  "me\030\001 \001(\t\"S\n)CChatRoom_SetChatRoomGroupTa"
  "gline_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007"
  "tagline\030\002 \001(\t\",\n*CChatRoom_SetChatRoomGr"
  "oupTagline_Response\"U\n(CChatRoom_SetChat"
  "RoomGroupAvatar_Request\022\025\n\rchat_group_id"
  "\030\001 \001(\004\022\022\n\navatar_sha\030\002 \001(\014\"+\n)CChatRoom_"
  "SetChatRoomGroupAvatar_Response\"\231\001\n3CCha"
  "tRoom_SetChatRoomGroupWatchingBroadcast_"
  "Request\022\025\n\rchat_group_id\030\001 \001(\004\022$\n\034watchi"
  "ng_broadcast_accountid\030\002 \001(\r\022%\n\035watching"
  "_broadcast_channel_id\030\003 \001(\004\"6\n4CChatRoom"
  "_SetChatRoomGroupWatchingBroadcast_Respo"
  "nse\"X\n.CChatRoom_JoinMiniGameForChatRoom"
  "Group_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007"
  "chat_id\030\002 \001(\004\"F\n/CChatRoom_JoinMiniGameF"
  "orChatRoomGroup_Response\022\023\n\013minigame_id\030"
  "\001 \001(\004\"l\n-CChatRoom_EndMiniGameForChatRoo"
  "mGroup_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n"
  "\007chat_id\030\002 \001(\004\022\023\n\013minigame_id\030\003 \001(\004\"0\n.C"
  "ChatRoom_EndMiniGameForChatRoomGroup_Res"
  "ponse\"X\n\032CChatRoom_MuteUser_Request\022\025\n\rc"
  "hat_group_id\030\001 \001(\004\022\017\n\007steamid\030\002 \001(\006\022\022\n\ne"
  "xpiration\030\003 \001(\005\"\035\n\033CChatRoom_MuteUser_Re"
  "sponse\"X\n\032CChatRoom_KickUser_Request\022\025\n\r"
  "chat_group_id\030\001 \001(\004\022\017\n\007steamid\030\002 \001(\006\022\022\n\n"
  "expiration\030\003 \001(\005\"\035\n\033CChatRoom_KickUser_R"
  "esponse\"^\n!CChatRoom_SetUserBanState_Req"
  "uest\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007steamid\030\002"
  " \001(\006\022\021\n\tban_state\030\003 \001(\010\"$\n\"CChatRoom_Set"
  "UserBanState_Response\"H\n\036CChatRoom_Revok"
  "eInvite_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017"
  "\n\007steamid\030\002 \001(\006\"!\n\037CChatRoom_RevokeInvit"
  "e_Response\"C\n\034CChatRoom_CreateRole_Reque"
  "st\022\025\n\rchat_group_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\""
  "C\n\035CChatRoom_CreateRole_Response\022\"\n\007acti"
  "ons\030\002 \001(\0132\021.CChatRoleActions\"3\n\032CChatRoo"
  "m_GetRoles_Request\022\025\n\rchat_group_id\030\001 \001("
  "\004\"8\n\033CChatRoom_GetRoles_Response\022\031\n\005role"
  "s\030\001 \003(\0132\n.CChatRole\"T\n\034CChatRoom_RenameR"
  "ole_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007ro"
  "le_id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\"\037\n\035CChatRoom_R"
  "enameRole_Response\"X\n\035CChatRoom_ReorderR"
  "ole_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007ro"
  "le_id\030\002 \001(\004\022\017\n\007ordinal\030\003 \001(\r\" \n\036CChatRoo"
  "m_ReorderRole_Response\"F\n\034CChatRoom_Dele"
  "teRole_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n"
  "\007role_id\030\002 \001(\004\"\037\n\035CChatRoom_DeleteRole_R"
  "esponse\"J\n CChatRoom_GetRoleActions_Requ"
  "est\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007role_id\030\002 "
  "\001(\004\"G\n!CChatRoom_GetRoleActions_Response"
  "\022\"\n\007actions\030\001 \003(\0132\021.CChatRoleActions\"r\n$"
  "CChatRoom_ReplaceRoleActions_Request\022\025\n\r"
  "chat_group_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022\"\n\007"
  "actions\030\004 \001(\0132\021.CChatRoleActions\"\'\n%CCha"
  "tRoom_ReplaceRoleActions_Response\"Z\n\037CCh"
  "atRoom_AddRoleToUser_Request\022\025\n\rchat_gro"
  "up_id\030\001 \001(\004\022\017\n\007role_id\030\003 \001(\004\022\017\n\007steamid\030"
  "\004 \001(\006\"\"\n CChatRoom_AddRoleToUser_Respons"
  "e\"K\n!CChatRoom_GetRolesForUser_Request\022\025"
  "\n\rchat_group_id\030\001 \001(\004\022\017\n\007steamid\030\003 \001(\006\"6"
  "\n\"CChatRoom_GetRolesForUser_Response\022\020\n\010"
  "role_ids\030\001 \003(\004\"_\n$CChatRoom_DeleteRoleFr"
  "omUser_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n"
  "\007role_id\030\003 \001(\004\022\017\n\007steamid\030\004 \001(\006\"\'\n%CChat"
  "Room_DeleteRoleFromUser_Response\"b\n#CCha"
  "tRoom_JoinChatRoomGroup_Request\022\025\n\rchat_"
  "group_id\030\001 \001(\004\022\023\n\013invite_code\030\002 \001(\t\022\017\n\007c"
  "hat_id\030\003 \001(\004\"\251\001\n$CChatRoom_JoinChatRoomG"
  "roup_Response\022#\n\005state\030\001 \001(\0132\024.CChatRoom"
  "GroupState\0221\n\017user_chat_state\030\003 \001(\0132\030.CU"
  "serChatRoomGroupState\022\024\n\014join_chat_id\030\004 "
  "\001(\004\022\023\n\013time_expire\030\005 \001(\r\"\206\001\n-CChatRoom_I"
  "nviteFriendToChatRoomGroup_Request\022\025\n\rch"
  "at_group_id\030\001 \001(\004\022\017\n\007steamid\030\002 \001(\006\022\017\n\007ch"
  "at_id\030\003 \001(\004\022\034\n\024skip_friendsui_check\030\004 \001("
  "\010\"0\n.CChatRoom_InviteFriendToChatRoomGro"
  "up_Response\"=\n$CChatRoom_LeaveChatRoomGr"
  "oup_Request\022\025\n\rchat_group_id\030\001 \001(\004\"\'\n%CC"
  "hatRoom_LeaveChatRoomGroup_Response\"\\\n C"
  "ChatRoom_CreateChatRoom_Request\022\025\n\rchat_"
  "group_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\023\n\013allow_vo"
  "ice\030\003 \001(\010\"G\n!CChatRoom_CreateChatRoom_Re"
  "sponse\022\"\n\tchat_room\030\001 \001(\0132\017.CChatRoomSta"
  "te\"J\n CChatRoom_DeleteChatRoom_Request\022\025"
  "\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\"#"
  "\n!CChatRoom_DeleteChatRoom_Response\"X\n C"
  "ChatRoom_RenameChatRoom_Request\022\025\n\rchat_"
  "group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022\014\n\004name\030"
  "\003 \001(\t\"#\n!CChatRoom_RenameChatRoom_Respon"
  "se\"g\n!CChatRoom_ReorderChatRoom_Request\022"
  "\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022"
  "\032\n\022move_after_chat_id\030\003 \001(\004\"$\n\"CChatRoom"
  "_ReorderChatRoom_Response\"t\n!CChatRoom_S"
  "endChatMessage_Request\022\025\n\rchat_group_id\030"
  "\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022\017\n\007message\030\003 \001(\t\022"
  "\026\n\016echo_to_sender\030\004 \001(\010\"\212\001\n\"CChatRoom_Se"
  "ndChatMessage_Response\022\030\n\020modified_messa"
  "ge\030\001 \001(\t\022\030\n\020server_timestamp\030\002 \001(\r\022\017\n\007or"
  "dinal\030\003 \001(\r\022\037\n\027message_without_bb_code\030\004"
  " \001(\t\"I\n\037CChatRoom_JoinVoiceChat_Request\022"
  "\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\""
  "8\n CChatRoom_JoinVoiceChat_Response\022\024\n\014v"
  "oice_chatid\030\001 \001(\004\"J\n CChatRoom_LeaveVoic"
  "eChat_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007"
  "chat_id\030\002 \001(\004\"#\n!CChatRoom_LeaveVoiceCha"
  "t_Response\"\264\001\n#CChatRoom_GetMessageHisto"
  "ry_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007cha"
  "t_id\030\002 \001(\004\022\021\n\tlast_time\030\003 \001(\r\022\024\n\014last_or"
  "dinal\030\004 \001(\r\022\022\n\nstart_time\030\005 \001(\r\022\025\n\rstart"
  "_ordinal\030\006 \001(\r\022\021\n\tmax_count\030\007 \001(\r\"\206\001\n\rSe"
  "rverMessage\022F\n\007message\030\001 \001(\0162\027.EChatRoom"
  "ServerMessage:\034k_EChatRoomServerMsg_Inva"
  "lid\022\024\n\014string_param\030\002 \001(\t\022\027\n\017accountid_p"
  "aram\030\003 \001(\r\"\242\004\n$CChatRoom_GetMessageHisto"
  "ry_Response\022C\n\010messages\030\001 \003(\01321.CChatRoo"
  "m_GetMessageHistory_Response.ChatMessage"
  "\022\026\n\016more_available\030\004 \001(\010\032\234\003\n\013ChatMessage"
  "\022\016\n\006sender\030\001 \001(\r\022\030\n\020server_timestamp\030\002 \001"
  "(\r\022\017\n\007message\030\003 \001(\t\022\017\n\007ordinal\030\004 \001(\r\022&\n\016"
  "server_message\030\005 \001(\0132\016.ServerMessage\022\017\n\007"
  "deleted\030\006 \001(\010\022T\n\treactions\030\007 \003(\0132A.CChat"
  "Room_GetMessageHistory_Response.ChatMess"
  "age.MessageReaction\032\261\001\n\017MessageReaction\022"
  "\\\n\rreaction_type\030\001 \001(\0162\035.EChatRoomMessag"
  "eReactionType:&k_EChatRoomMessageReactio"
  "nType_Invalid\022\020\n\010reaction\030\002 \001(\t\022\024\n\014num_r"
  "eactors\030\003 \001(\r\022\030\n\020has_user_reacted\030\004 \001(\010\""
  "\'\n%CChatRoom_GetMyChatRoomGroups_Request"
  "\"\264\005\n*CChatRoom_GetChatRoomGroupSummary_R"
  "esponse\022\025\n\rchat_group_id\030\001 \001(\004\022\027\n\017chat_g"
  "roup_name\030\002 \001(\t\022\033\n\023active_member_count\030\003"
  " \001(\r\022!\n\031active_voice_member_count\030\004 \001(\r\022"
  "\027\n\017default_chat_id\030\005 \001(\004\022#\n\nchat_rooms\030\006"
  " \003(\0132\017.CChatRoomState\022\016\n\006clanid\030\007 \001(\r\022\032\n"
  "\022chat_group_tagline\030\010 \001(\t\022\027\n\017accountid_o"
  "wner\030\t \001(\r\022\023\n\013top_members\030\n \003(\r\022\035\n\025chat_"
  "group_avatar_sha\030\013 \001(\014\022\?\n\004rank\030\014 \001(\0162\023.E"
  "ChatRoomGroupRank:\034k_EChatRoomGroupRank_"
  "Default\022\027\n\017default_role_id\030\r \001(\004\022\020\n\010role"
  "_ids\030\016 \003(\004\022\'\n\014role_actions\030\017 \003(\0132\021.CChat"
  "RoleActions\022$\n\034watching_broadcast_accoun"
  "tid\030\020 \001(\r\022\r\n\005appid\030\021 \001(\r\022(\n\rparty_beacon"
  "s\030\022 \003(\0132\021.CChatPartyBeacon\022%\n\035watching_b"
  "roadcast_channel_id\030\023 \001(\004\022\032\n\022active_mini"
  "game_id\030\024 \001(\004\022\026\n\016avatar_ugc_url\030\025 \001(\t\022\020\n"
  "\010disabled\030\026 \001(\010\"\223\001\n\024CChatRoomSummaryPair"
  "\0227\n\025user_chat_group_state\030\001 \001(\0132\030.CUserC"
  "hatRoomGroupState\022B\n\rgroup_summary\030\002 \001(\013"
  "2+.CChatRoom_GetChatRoomGroupSummary_Res"
  "ponse\"Y\n&CChatRoom_GetMyChatRoomGroups_R"
  "esponse\022/\n\020chat_room_groups\030\001 \003(\0132\025.CCha"
  "tRoomSummaryPair\"@\n\'CChatRoom_GetChatRoo"
  "mGroupState_Request\022\025\n\rchat_group_id\030\001 \001"
  "(\004\"O\n(CChatRoom_GetChatRoomGroupState_Re"
  "sponse\022#\n\005state\030\001 \001(\0132\024.CChatRoomGroupSt"
  "ate\"B\n)CChatRoom_GetChatRoomGroupSummary"
  "_Request\022\025\n\rchat_group_id\030\001 \001(\004\"d\n0CChat"
  "Room_SetAppChatRoomGroupForceActive_Requ"
  "est\022\025\n\rchat_group_id\030\001 \001(\004\022\031\n\021requesting"
  "_app_id\030\002 \001(\r\"`\n1CChatRoom_SetAppChatRoo"
  "mGroupForceActive_Response\022\016\n\006result\030\001 \001"
  "(\r\022\033\n\023accounts_in_channel\030\002 \003(\r\"m\n9CChat"
  "Room_SetAppChatRoomGroupStopForceActive_"
  "Notification\022\025\n\rchat_group_id\030\001 \001(\004\022\031\n\021r"
  "equesting_app_id\030\002 \001(\r\"b\n%CChatRoom_AckC"
  "hatMessage_Notification\022\025\n\rchat_group_id"
  "\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001"
  "(\r\"c\n\"CChatRoom_CreateInviteLink_Request"
  "\022\025\n\rchat_group_id\030\001 \001(\004\022\025\n\rseconds_valid"
  "\030\002 \001(\r\022\017\n\007chat_id\030\003 \001(\004\"Q\n#CChatRoom_Cre"
  "ateInviteLink_Response\022\023\n\013invite_code\030\001 "
  "\001(\t\022\025\n\rseconds_valid\030\002 \001(\r\":\n#CChatRoom_"
  "GetInviteLinkInfo_Request\022\023\n\013invite_code"
  "\030\001 \001(\t\"\214\002\n$CChatRoom_GetInviteLinkInfo_R"
  "esponse\022\026\n\016steamid_sender\030\003 \001(\006\022\024\n\014time_"
  "expires\030\004 \001(\r\022\017\n\007chat_id\030\006 \001(\004\022B\n\rgroup_"
  "summary\030\010 \001(\0132+.CChatRoom_GetChatRoomGro"
  "upSummary_Response\0227\n\025user_chat_group_st"
  "ate\030\t \001(\0132\030.CUserChatRoomGroupState\022\030\n\020t"
  "ime_kick_expire\030\n \001(\r\022\016\n\006banned\030\013 \001(\010\"w\n"
  "\037CChatRoom_GetInviteInfo_Request\022\027\n\017stea"
  "mid_invitee\030\001 \001(\006\022\025\n\rchat_group_id\030\002 \001(\004"
  "\022\017\n\007chat_id\030\003 \001(\004\022\023\n\013invite_code\030\004 \001(\t\"\220"
  "\001\n CChatRoom_GetInviteInfo_Response\022B\n\rg"
  "roup_summary\030\001 \001(\0132+.CChatRoom_GetChatRo"
  "omGroupSummary_Response\022\030\n\020time_kick_exp"
  "ire\030\002 \001(\r\022\016\n\006banned\030\003 \001(\010\"A\n(CChatRoom_G"
  "etInviteLinksForGroup_Request\022\025\n\rchat_gr"
  "oup_id\030\001 \001(\004\"\327\001\n)CChatRoom_GetInviteLink"
  "sForGroup_Response\022I\n\014invite_links\030\001 \003(\013"
  "23.CChatRoom_GetInviteLinksForGroup_Resp"
  "onse.LinkInfo\032_\n\010LinkInfo\022\023\n\013invite_code"
  "\030\001 \001(\t\022\027\n\017steamid_creator\030\002 \001(\006\022\024\n\014time_"
  "expires\030\003 \001(\r\022\017\n\007chat_id\030\004 \001(\004\"5\n\034CChatR"
  "oom_GetBanList_Request\022\025\n\rchat_group_id\030"
  "\001 \001(\004\"\265\001\n\035CChatRoom_GetBanList_Response\022"
  "4\n\004bans\030\001 \003(\0132&.CChatRoom_GetBanList_Res"
  "ponse.BanInfo\032^\n\007BanInfo\022\021\n\taccountid\030\001 "
  "\001(\r\022\027\n\017accountid_actor\030\002 \001(\r\022\023\n\013time_ban"
  "ned\030\003 \001(\r\022\022\n\nban_reason\030\004 \001(\t\"8\n\037CChatRo"
  "om_GetInviteList_Request\022\025\n\rchat_group_i"
  "d\030\001 \001(\004\"X\n\024CChatRoomGroupInvite\022\021\n\taccou"
  "ntid\030\001 \001(\r\022\027\n\017accountid_actor\030\002 \001(\r\022\024\n\014t"
  "ime_invited\030\003 \001(\r\"J\n CChatRoom_GetInvite"
  "List_Response\022&\n\007invites\030\001 \003(\0132\025.CChatRo"
  "omGroupInvite\"P\n\"CChatRoom_DeleteInviteL"
  "ink_Request\022\025\n\rchat_group_id\030\001 \001(\004\022\023\n\013in"
  "vite_code\030\002 \001(\t\"%\n#CChatRoom_DeleteInvit"
  "eLink_Response\"\364\001\n0CChatRoom_SetSessionA"
  "ctiveChatRoomGroups_Request\022\026\n\016chat_grou"
  "p_ids\030\001 \003(\004\022\"\n\032chat_groups_data_requeste"
  "d\030\002 \003(\004\022\203\001\n\034virtualize_members_threshold"
  "\030\003 \001(\005B]\202\265\030YIf a chat room has more memb"
  "ers than this threshold, we will opt in "
  "to a virtualized list\"\211\001\n1CChatRoom_SetS"
  "essionActiveChatRoomGroups_Response\022)\n\013c"
  "hat_states\030\001 \003(\0132\024.CChatRoomGroupState\022)"
  "\n!virtualize_members_chat_group_ids\030\002 \003("
  "\004\"\252\006\n-CChatRoom_SetUserChatGroupPreferen"
  "ces_Request\022\025\n\rchat_group_id\030\001 \001(\004\022c\n\026ch"
  "at_group_preferences\030\002 \001(\0132C.CChatRoom_S"
  "etUserChatGroupPreferences_Request.ChatG"
  "roupPreferences\022a\n\025chat_room_preferences"
  "\030\003 \003(\0132B.CChatRoom_SetUserChatGroupPrefe"
  "rences_Request.ChatRoomPreferences\032\203\002\n\024C"
  "hatGroupPreferences\022e\n\032desktop_notificat"
  "ion_level\030\001 \001(\0162\033.EChatRoomNotificationL"
  "evel:$k_EChatroomNotificationLevel_Inval"
  "id\022d\n\031mobile_notification_level\030\002 \001(\0162\033."
  "EChatRoomNotificationLevel:$k_EChatroomN"
  "otificationLevel_Invalid\022\036\n\026unread_indic"
  "ator_muted\030\003 \001(\010\032\223\002\n\023ChatRoomPreferences"
  "\022\017\n\007chat_id\030\001 \001(\004\022e\n\032desktop_notificatio"
  "n_level\030\002 \001(\0162\033.EChatRoomNotificationLev"
  "el:$k_EChatroomNotificationLevel_Invalid"
  "\022d\n\031mobile_notification_level\030\003 \001(\0162\033.EC"
  "hatRoomNotificationLevel:$k_EChatroomNot"
  "ificationLevel_Invalid\022\036\n\026unread_indicat"
  "or_muted\030\004 \001(\010\"0\n.CChatRoom_SetUserChatG"
  "roupPreferences_Response\"\305\001\n$CChatRoom_D"
  "eleteChatMessages_Request\022\025\n\rchat_group_"
  "id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022\?\n\010messages\030\003 "
  "\003(\0132-.CChatRoom_DeleteChatMessages_Reque"
  "st.Message\0324\n\007Message\022\030\n\020server_timestam"
  "p\030\001 \001(\r\022\017\n\007ordinal\030\002 \001(\r\"\'\n%CChatRoom_De"
  "leteChatMessages_Response\"\351\003\n+CChatRoom_"
  "UpdateMemberListView_Notification\022\025\n\rcha"
  "t_group_id\030\001 \001(\004\022g\n\007view_id\030\002 \001(\004BV\202\265\030RC"
  "lient-generated ID.  Should send the sam"
  "e value on all requests for the same vie"
  "w\022\r\n\005start\030\003 \001(\005\022\013\n\003end\030\004 \001(\005\022\217\001\n\023client"
  "_changenumber\030\005 \001(\005Br\202\265\030nAny updates fro"
  "m this call on will have this changenumb"
  "er present.  Can be used to guarantee in"
  "-order updates.\022>\n\013delete_view\030\006 \001(\010B)\202\265"
  "\030%Indicates this view has been deleted.\022"
  "$\n\034persona_subscribe_accountids\030\007 \003(\005\022&\n"
  "\036persona_unsubscribe_accountids\030\010 \003(\005\"\227\002"
  "\n\037CChatRoom_SearchMembers_Request\022\025\n\rcha"
  "t_group_id\030\001 \001(\004\022\262\001\n\tsearch_id\030\002 \001(\004B\236\001\202"
  "\265\030\231\001Client-supplied id.  For find-as-you"
  "-type searches, as search narrows the se"
  "rver will not return persona states prev"
  "iously returned for a given searchid.\022\023\n"
  "\013search_text\030\003 \001(\t\022\023\n\013max_results\030\004 \001(\005\""
  "\324\001\n CChatRoom_SearchMembers_Response\022G\n\020"
  "matching_members\030\001 \003(\0132-.CChatRoom_Searc"
  "hMembers_Response.MemberMatch\022\024\n\014status_"
  "flags\030\002 \001(\r\032Q\n\013MemberMatch\022\021\n\taccountid\030"
  "\001 \001(\005\022/\n\007persona\030\002 \001(\0132\036.CMsgClientPerso"
  "naState.Friend\"\374\001\n\'CChatRoom_UpdateMessa"
  "geReaction_Request\022\025\n\rchat_group_id\030\001 \001("
  "\004\022\017\n\007chat_id\030\002 \001(\004\022\030\n\020server_timestamp\030\003"
  " \001(\r\022\017\n\007ordinal\030\004 \001(\r\022\\\n\rreaction_type\030\005"
  " \001(\0162\035.EChatRoomMessageReactionType:&k_E"
  "ChatRoomMessageReactionType_Invalid\022\020\n\010r"
  "eaction\030\006 \001(\t\022\016\n\006is_add\030\007 \001(\010\"@\n(CChatRo"
  "om_UpdateMessageReaction_Response\022\024\n\014num"
  "_reactors\030\001 \001(\r\"\200\002\n,CChatRoom_GetMessage"
  "ReactionReactors_Request\022\025\n\rchat_group_i"
  "d\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022\030\n\020server_times"
  "tamp\030\003 \001(\r\022\017\n\007ordinal\030\004 \001(\r\022\\\n\rreaction_"
  "type\030\005 \001(\0162\035.EChatRoomMessageReactionTyp"
  "e:&k_EChatRoomMessageReactionType_Invali"
  "d\022\020\n\010reaction\030\006 \001(\t\022\r\n\005limit\030\007 \001(\r\"A\n-CC"
  "hatRoom_GetMessageReactionReactors_Respo"
  "nse\022\020\n\010reactors\030\001 \003(\r\"\230\001\n*CClanChatRooms"
  "_GetClanChatRoomInfo_Request\022\017\n\007steamid\030"
  "\001 \001(\006\022Y\n\nautocreate\030\002 \001(\010:\004trueB\?\202\265\030;Cre"
  "ate a default chat room if none has been"
  " created before.\"v\n+CClanChatRooms_GetCl"
  "anChatRoomInfo_Response\022G\n\022chat_group_su"
  "mmary\030\001 \001(\0132+.CChatRoom_GetChatRoomGroup"
  "Summary_Response\"[\n-CClanChatRooms_SetCl"
  "anChatRoomPrivate_Request\022\017\n\007steamid\030\001 \001"
  "(\006\022\031\n\021chat_room_private\030\002 \001(\010\"K\n.CClanCh"
  "atRooms_SetClanChatRoomPrivate_Response\022"
  "\031\n\021chat_room_private\030\001 \001(\010\"V\n\rCChatMenti"
  "ons\022\023\n\013mention_all\030\001 \001(\010\022\024\n\014mention_here"
  "\030\002 \001(\010\022\032\n\022mention_accountids\030\003 \003(\r\"\325\002\n*C"
  "ChatRoom_IncomingChatMessage_Notificatio"
  "n\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001("
  "\004\022\026\n\016steamid_sender\030\003 \001(\006\022\017\n\007message\030\004 \001"
  "(\t\022\021\n\ttimestamp\030\005 \001(\r\022 \n\010mentions\030\006 \001(\0132"
  "\016.CChatMentions\022\017\n\007ordinal\030\007 \001(\r\022&\n\016serv"
  "er_message\030\010 \001(\0132\016.ServerMessage\022\031\n\021mess"
  "age_no_bbcode\030\t \001(\t\022M\n\tchat_name\030\n \001(\tB:"
  "\202\265\0306A name to use for the chat, intended"
  " for notifications\"\352\001\n*CChatRoom_ChatMes"
  "sageModified_Notification\022\025\n\rchat_group_"
  "id\030\001 \001(\004\022\017\n\007chat_id\030\002 \001(\004\022I\n\010messages\030\003 "
  "\003(\01327.CChatRoom_ChatMessageModified_Noti"
  "fication.ChatMessage\032I\n\013ChatMessage\022\030\n\020s"
  "erver_timestamp\030\001 \001(\r\022\017\n\007ordinal\030\002 \001(\r\022\017"
  "\n\007deleted\030\003 \001(\010\"\266\001\n(CChatRoom_MemberStat"
  "eChange_Notification\022\025\n\rchat_group_id\030\001 "
  "\001(\004\022 \n\006member\030\002 \001(\0132\020.CChatRoomMember\022Q\n"
  "\006change\030\003 \001(\0162\033.EChatRoomMemberStateChan"
  "ge:$k_EChatRoomMemberStateChange_Invalid"
  "\"^\n*CChatRoom_ChatRoomHeaderState_Notifi"
  "cation\0220\n\014header_state\030\001 \001(\0132\032.CChatRoom"
  "GroupHeaderState\"\206\001\n/CChatRoom_ChatRoomG"
  "roupRoomsChange_Notification\022\025\n\rchat_gro"
  "up_id\030\001 \001(\004\022\027\n\017default_chat_id\030\002 \001(\004\022#\n\n"
  "chat_rooms\030\003 \003(\0132\017.CChatRoomState\"d\n:CCh"
  "atRoom_NotifyShouldRejoinChatRoomVoiceCh"
  "at_Notification\022\017\n\007chat_id\030\001 \001(\004\022\025\n\rchat"
  "_group_id\030\002 \001(\004\"\251\002\n;ChatRoomClient_Notif"
  "yChatGroupUserStateChanged_Notification\022"
  "\025\n\rchat_group_id\030\001 \001(\004\0227\n\025user_chat_grou"
  "p_state\030\002 \001(\0132\030.CUserChatRoomGroupState\022"
  "B\n\rgroup_summary\030\003 \001(\0132+.CChatRoom_GetCh"
  "atRoomGroupSummary_Response\022V\n\013user_acti"
  "on\030\004 \001(\0162\033.EChatRoomMemberStateChange:$k"
  "_EChatRoomMemberStateChange_Invalid\"N\n4C"
  "hatRoomClient_NotifyChatRoomDisconnect_N"
  "otification\022\026\n\016chat_group_ids\030\001 \003(\004\"\224\002\n\027"
  "CChatRoomMemberListView\022\r\n\005start\030\003 \001(\005\022\013"
  "\n\003end\030\004 \001(\005\022\023\n\013total_count\030\005 \001(\005\022a\n\023clie"
  "nt_changenumber\030\006 \001(\005BD\202\265\030@Value sent by"
  " the client on the last UpdateMemberList"
  "View call. \022e\n\023server_changenumber\030\007 \001(\005"
  "BH\202\265\030DValue incremented by the server on"
  " each MemberListViewUpdated call. \"O\n\034CC"
  "hatRoomMemberSummaryCounts\022\016\n\006ingame\030\001 \001"
  "(\005\022\016\n\006online\030\002 \001(\005\022\017\n\007offline\030\003 \001(\005\"\217\004\n2"
  "CChatRoomClient_MemberListViewUpdated_No"
  "tification\022\025\n\rchat_group_id\030\001 \001(\004\022M\n\007vie"
  "w_id\030\002 \001(\004B<\202\265\0308Thew view_id supplied wh"
  "en the client created the view. \022&\n\004view"
  "\030\003 \001(\0132\030.CChatRoomMemberListView\022X\n\007memb"
  "ers\030\004 \003(\0132G.CChatRoomClient_MemberListVi"
  "ewUpdated_Notification.MemberListViewEnt"
  "ry\022\024\n\014status_flags\030\005 \001(\r\0225\n\016member_summa"
  "ry\030\006 \001(\0132\035.CChatRoomMemberSummaryCounts\022"
  ";\n\023subscribed_personas\030\007 \003(\0132\036.CMsgClien"
  "tPersonaState.Friend\032g\n\023MemberListViewEn"
  "try\022\014\n\004rank\030\001 \001(\005\022\021\n\taccountid\030\002 \001(\r\022/\n\007"
  "persona\030\003 \001(\0132\036.CMsgClientPersonaState.F"
  "riend\"\214\002\n&CChatRoom_MessageReaction_Noti"
  "fication\022\025\n\rchat_group_id\030\001 \001(\004\022\017\n\007chat_"
  "id\030\002 \001(\004\022\030\n\020server_timestamp\030\003 \001(\r\022\017\n\007or"
  "dinal\030\004 \001(\r\022\017\n\007reactor\030\005 \001(\006\022\\\n\rreaction"
  "_type\030\006 \001(\0162\035.EChatRoomMessageReactionTy"
  "pe:&k_EChatRoomMessageReactionType_Inval"
  "id\022\020\n\010reaction\030\007 \001(\t\022\016\n\006is_add\030\010 \001(\010\"\337\025\n"
  "2CChatUsability_ClientUsabilityMetrics_N"
  "otification\022\026\n\016metrics_run_id\030\001 \001(\r\022\024\n\014c"
  "lient_build\030\002 \001(\r\022\027\n\017metrics_version\030\003 \001"
  "(\r\022\016\n\006in_web\030\004 \001(\010\022N\n\010settings\030\n \001(\0132<.C"
  "ChatUsability_ClientUsabilityMetrics_Not"
  "ification.Settings\022Y\n\016voice_settings\030\013 \001"
  "(\0132A.CChatUsability_ClientUsabilityMetri"
  "cs_Notification.VoiceSettings\022M\n\010ui_stat"
  "e\030\014 \001(\0132;.CChatUsability_ClientUsability"
  "Metrics_Notification.UIState\022L\n\007metrics\030"
  "\r \001(\0132;.CChatUsability_ClientUsabilityMe"
  "trics_Notification.Metrics\032\331\006\n\010Settings\022"
  "!\n\031notifications_show_ingame\030\001 \001(\010\022!\n\031no"
  "tifications_show_online\030\002 \001(\010\022\"\n\032notific"
  "ations_show_message\030\003 \001(\010\022.\n&notificatio"
  "ns_events_and_announcements\030\004 \001(\010\022\032\n\022sou"
  "nds_play_ingame\030\005 \001(\010\022\032\n\022sounds_play_onl"
  "ine\030\006 \001(\010\022\033\n\023sounds_play_message\030\007 \001(\010\022\'"
  "\n\037sounds_events_and_announcements\030\010 \001(\010\022"
  "\036\n\026always_new_chat_window\030\t \001(\010\022\'\n\037force"
  "_alphabetic_friend_sorting\030\n \001(\010\022\027\n\017chat"
  "_flash_mode\030\013 \001(\005\022\033\n\023remember_open_chats"
  "\030\014 \001(\010\022\034\n\024compact_quick_access\030\r \001(\010\022\034\n\024"
  "compact_friends_list\030\016 \001(\010\0221\n)notificati"
  "ons_show_chat_room_notification\030\017 \001(\010\022*\n"
  "\"sounds_play_chat_room_notification\030\020 \001("
  "\010\022*\n\"hide_offline_friends_in_tag_groups\030"
  "\021 \001(\010\022 \n\030hide_categorized_friends\030\022 \001(\010\022"
  "*\n\"categorize_in_game_friends_by_game\030\023 "
  "\001(\010\022\026\n\016chat_font_size\030\024 \001(\005\022\027\n\017use24hour"
  "_clock\030\025 \001(\010\022\033\n\023do_not_disturb_mode\030\026 \001("
  "\010\022\036\n\026disable_embed_inlining\030\027 \001(\010\022\031\n\021sig"
  "n_into_friends\030\030 \001(\010\022\030\n\020animated_avatars"
  "\030\031 \001(\010\032\352\002\n\rVoiceSettings\022\030\n\020voice_input_"
  "gain\030\001 \001(\002\022\031\n\021voice_output_gain\030\002 \001(\002\022\030\n"
  "\020noise_gate_level\030\003 \001(\005\022#\n\033voice_use_ech"
  "o_cancellation\030\004 \001(\010\022$\n\034voice_use_noise_"
  "cancellation\030\005 \001(\010\022#\n\033voice_use_auto_gai"
  "n_control\030\006 \001(\010\022 \n\030selected_non_default_"
  "mic\030\007 \001(\010\022#\n\033selected_non_default_output"
  "\030\010 \001(\010\022\034\n\024push_to_talk_enabled\030\t \001(\010\022\034\n\024"
  "push_to_mute_enabled\030\n \001(\010\022\027\n\017play_ptt_s"
  "ounds\030\013 \001(\010\032\375\005\n\007UIState\022\033\n\023friends_list_"
  "height\030\001 \001(\005\022\032\n\022friends_list_width\030\002 \001(\005"
  "\022\033\n\023friends_list_docked\030\003 \001(\010\022\036\n\026friends"
  "_list_collapsed\030\004 \001(\010\022\'\n\037friends_list_gr"
  "oup_chats_height\030\005 \001(\005\022\034\n\024friends_list_v"
  "isible\030\006 \001(\010\022\032\n\022chat_popups_opened\030\007 \001(\005"
  "\022\036\n\026group_chat_tabs_opened\030\010 \001(\005\022\037\n\027frie"
  "nd_chat_tabs_opened\030\t \001(\005\022\031\n\021chat_window"
  "_width\030\n \001(\005\022\032\n\022chat_window_height\030\013 \001(\005"
  "\022l\n\021category_collapse\030\014 \001(\0132Q.CChatUsabi"
  "lity_ClientUsabilityMetrics_Notification"
  ".UIState.CategoryCollapseState\022%\n\035group_"
  "chat_left_col_collapsed\030\r \001(\005\022&\n\036group_c"
  "hat_right_col_collapsed\030\016 \001(\005\022 \n\030in_one_"
  "on_one_voice_chat\030\017 \001(\010\022\033\n\023in_group_voic"
  "e_chat\030\020 \001(\010\032\244\001\n\025CategoryCollapseState\022\031"
  "\n\021in_game_collapsed\030\001 \001(\010\022\030\n\020online_coll"
  "apsed\030\002 \001(\010\022\031\n\021offline_collapsed\030\003 \001(\010\022\035"
  "\n\025game_groups_collapsed\030\004 \001(\005\022\034\n\024categor"
  "ies_collapsed\030\005 \001(\005\032\300\002\n\007Metrics\022\025\n\rfrien"
  "ds_count\030\001 \001(\005\022\036\n\026friends_category_count"
  "\030\002 \001(\005\022!\n\031friends_categorized_count\030\003 \001("
  "\005\022\034\n\024friends_online_count\030\004 \001(\005\022\035\n\025frien"
  "ds_in_game_count\030\005 \001(\005\022\'\n\037friends_in_gam"
  "e_singleton_count\030\006 \001(\005\022\030\n\020game_group_co"
  "unt\030\007 \001(\005\022\036\n\026friends_favorite_count\030\010 \001("
  "\005\022\030\n\020group_chat_count\030\t \001(\005\022!\n\031group_cha"
  "t_favorite_count\030\n \001(\005\"S\n9CChatUsability"
  "_RequestClientUsabilityMetrics_Notificat"
  "ion\022\026\n\016metrics_run_id\030\001 \001(\r*\234\001\n\022EChatRoo"
  "mJoinState\022 \n\034k_EChatRoomJoinState_Defau"
  "lt\020\000\022\035\n\031k_EChatRoomJoinState_None\020\001\022\037\n\033k"
  "_EChatRoomJoinState_Joined\020\002\022$\n k_EChatR"
  "oomJoinState_TestInvalid\020c*\244\002\n\022EChatRoom"
  "GroupRank\022 \n\034k_EChatRoomGroupRank_Defaul"
  "t\020\000\022\037\n\033k_EChatRoomGroupRank_Viewer\020\n\022\036\n\032"
  "k_EChatRoomGroupRank_Guest\020\017\022\037\n\033k_EChatR"
  "oomGroupRank_Member\020\024\022\"\n\036k_EChatRoomGrou"
  "pRank_Moderator\020\036\022 \n\034k_EChatRoomGroupRan"
  "k_Officer\020(\022\036\n\032k_EChatRoomGroupRank_Owne"
  "r\0202\022$\n k_EChatRoomGroupRank_TestInvalid\020"
  "c*\364\001\n\032EChatRoomNotificationLevel\022(\n$k_EC"
  "hatroomNotificationLevel_Invalid\020\000\022%\n!k_"
  "EChatroomNotificationLevel_None\020\001\022*\n&k_E"
  "ChatroomNotificationLevel_MentionMe\020\002\022+\n"
  "\'k_EChatroomNotificationLevel_MentionAll"
  "\020\003\022,\n(k_EChatroomNotificationLevel_AllMe"
  "ssages\020\004*\227\003\n\026EChatRoomServerMessage\022 \n\034k"
  "_EChatRoomServerMsg_Invalid\020\000\022\'\n#k_EChat"
  "RoomServerMsg_RenameChatRoom\020\001\022\037\n\033k_ECha"
  "tRoomServerMsg_Joined\020\002\022\037\n\033k_EChatRoomSe"
  "rverMsg_Parted\020\003\022\037\n\033k_EChatRoomServerMsg"
  "_Kicked\020\004\022 \n\034k_EChatRoomServerMsg_Invite"
  "d\020\005\022(\n$k_EChatRoomServerMsg_InviteDismis"
  "sed\020\010\022/\n+k_EChatRoomServerMsg_ChatRoomTa"
  "glineChanged\020\t\022.\n*k_EChatRoomServerMsg_C"
  "hatRoomAvatarChanged\020\n\022\"\n\036k_EChatRoomSer"
  "verMsg_AppCustom\020\013*\243\001\n\034EChatRoomMessageR"
  "eactionType\022*\n&k_EChatRoomMessageReactio"
  "nType_Invalid\020\000\022+\n\'k_EChatRoomMessageRea"
  "ctionType_Emoticon\020\001\022*\n&k_EChatRoomMessa"
  "geReactionType_Sticker\020\002*\313\003\n\032EChatRoomMe"
  "mberStateChange\022(\n$k_EChatRoomMemberStat"
  "eChange_Invalid\020\000\022\'\n#k_EChatRoomMemberSt"
  "ateChange_Joined\020\001\022\'\n#k_EChatRoomMemberS"
  "tateChange_Parted\020\002\022\'\n#k_EChatRoomMember"
  "StateChange_Kicked\020\003\022(\n$k_EChatRoomMembe"
  "rStateChange_Invited\020\004\022,\n(k_EChatRoomMem"
  "berStateChange_RankChanged\020\007\0220\n,k_EChatR"
  "oomMemberStateChange_InviteDismissed\020\010\022&"
  "\n\"k_EChatRoomMemberStateChange_Muted\020\t\022\'"
  "\n#k_EChatRoomMemberStateChange_Banned\020\n\022"
  "-\n)k_EChatRoomMemberStateChange_RolesCha"
  "nged\020\0142\213\002\n\004Chat\022\347\001\n\032RequestFriendPersona"
  "States\022).CChat_RequestFriendPersonaState"
  "s_Request\032*.CChat_RequestFriendPersonaSt"
  "ates_Response\"r\202\265\030nRequest to be notifie"
  "d of online friend persona state informa"
  "tion.  Responses sent via CMsgClientPers"
  "onaState.\032\031\202\265\030\025Chat-related services2\271>\n"
  "\010ChatRoom\022\243\001\n\023CreateChatRoomGroup\022&.CCha"
  "tRoom_CreateChatRoomGroup_Request\032\'.CCha"
  "tRoom_CreateChatRoomGroup_Response\";\202\265\0307"
  "Create\'s a chat group that can contain o"
  "ther chat rooms\022z\n\021SaveChatRoomGroup\022$.C"
  "ChatRoom_SaveChatRoomGroup_Request\032%.CCh"
  "atRoom_SaveChatRoomGroup_Response\"\030\202\265\030\024S"
  "aves\'s a chat group\022\204\001\n\023RenameChatRoomGr"
  "oup\022&.CChatRoom_RenameChatRoomGroup_Requ"
  "est\032\'.CChatRoom_RenameChatRoomGroup_Resp"
  "onse\"\034\202\265\030\030Rename a chat room group\022\231\001\n\027S"
  "etChatRoomGroupTagline\022*.CChatRoom_SetCh"
  "atRoomGroupTagline_Request\032+.CChatRoom_S"
  "etChatRoomGroupTagline_Response\"%\202\265\030!Set"
  " tagline for a chat room group\022\231\001\n\026SetCh"
  "atRoomGroupAvatar\022).CChatRoom_SetChatRoo"
  "mGroupAvatar_Request\032*.CChatRoom_SetChat"
  "RoomGroupAvatar_Response\"(\202\265\030$Set avatar"
  " SHA for a chat room group\022\313\001\n!SetChatRo"
  "omGroupWatchingBroadcast\0224.CChatRoom_Set"
  "ChatRoomGroupWatchingBroadcast_Request\0325"
  ".CChatRoom_SetChatRoomGroupWatchingBroad"
  "cast_Response\"9\202\265\0305Sets a broadcast that"
  " the chat room group is watching\022\343\001\n\034Joi"
  "nMiniGameForChatRoomGroup\022/.CChatRoom_Jo"
  "inMiniGameForChatRoomGroup_Request\0320.CCh"
  "atRoom_JoinMiniGameForChatRoomGroup_Resp"
  "onse\"`\202\265\030\\Joins the minigame for the cha"
  "t room group or starts a new one (Winter"
  " 2019 sale party game)\022\254\001\n\033EndMiniGameFo"
  "rChatRoomGroup\022..CChatRoom_EndMiniGameFo"
  "rChatRoomGroup_Request\032/.CChatRoom_EndMi"
  "niGameForChatRoomGroup_Response\",\202\265\030(End"
  "s the minigame in the chat room group\022d\n"
  "\017MuteUserInGroup\022\033.CChatRoom_MuteUser_Re"
  "quest\032\034.CChatRoom_MuteUser_Response\"\026\202\265\030"
  "\022Mute user in group\022h\n\021KickUserFromGroup"
  "\022\033.CChatRoom_KickUser_Request\032\034.CChatRoo"
  "m_KickUser_Response\"\030\202\265\030\024Kick user from "
  "group\022y\n\017SetUserBanState\022\".CChatRoom_Set"
  "UserBanState_Request\032#.CChatRoom_SetUser"
  "BanState_Response\"\035\202\265\030\031Ban/unban user fr"
  "om group\022\202\001\n\023RevokeInviteToGroup\022\037.CChat"
  "Room_RevokeInvite_Request\032 .CChatRoom_Re"
  "vokeInvite_Response\"(\202\265\030$Revoke a direct"
  " invitation of a user\022e\n\nCreateRole\022\035.CC"
  "hatRoom_CreateRole_Request\032\036.CChatRoom_C"
  "reateRole_Response\"\030\202\265\030\024Create role for "
  "goup\022a\n\010GetRoles\022\033.CChatRoom_GetRoles_Re"
  "quest\032\034.CChatRoom_GetRoles_Response\"\032\202\265\030"
  "\026Get all roles in group\022e\n\nRenameRole\022\035."
  "CChatRoom_RenameRole_Request\032\036.CChatRoom"
  "_RenameRole_Response\"\030\202\265\030\024Rename role fo"
  "r goup\022l\n\013ReorderRole\022\036.CChatRoom_Reorde"
  "rRole_Request\032\037.CChatRoom_ReorderRole_Re"
  "sponse\"\034\202\265\030\030Reorder role with a goup\022g\n\n"
  "DeleteRole\022\035.CChatRoom_DeleteRole_Reques"
  "t\032\036.CChatRoom_DeleteRole_Response\"\032\202\265\030\026D"
  "elete role from group\022\207\001\n\016GetRoleActions"
  "\022!.CChatRoom_GetRoleActions_Request\032\".CC"
  "hatRoom_GetRoleActions_Response\".\202\265\030*Get"
  " all defined roles and actions in group\022"
  "\206\001\n\022ReplaceRoleActions\022%.CChatRoom_Repla"
  "ceRoleActions_Request\032&.CChatRoom_Replac"
  "eRoleActions_Response\"!\202\265\030\035Replace role "
  "actions in group\022s\n\rAddRoleToUser\022 .CCha"
  "tRoom_AddRoleToUser_Request\032!.CChatRoom_"
  "AddRoleToUser_Response\"\035\202\265\030\031Add role to "
  "user in group\022\207\001\n\017GetRolesForUser\022\".CCha"
  "tRoom_GetRolesForUser_Request\032#.CChatRoo"
  "m_GetRolesForUser_Response\"+\202\265\030\'Get all "
  "roles assigned to user in group\022\207\001\n\022Dele"
  "teRoleFromUser\022%.CChatRoom_DeleteRoleFro"
  "mUser_Request\032&.CChatRoom_DeleteRoleFrom"
  "User_Response\"\"\202\265\030\036Delete role from user"
  " in group\022\201\001\n\021JoinChatRoomGroup\022$.CChatR"
  "oom_JoinChatRoomGroup_Request\032%.CChatRoo"
  "m_JoinChatRoomGroup_Response\"\037\202\265\030\033Join a"
  " multi-user chat room\022\255\001\n\033InviteFriendTo"
  "ChatRoomGroup\022..CChatRoom_InviteFriendTo"
  "ChatRoomGroup_Request\032/.CChatRoom_Invite"
  "FriendToChatRoomGroup_Response\"-\202\265\030)Invi"
  "te a friend to a multi-user chat room\022\227\001"
  "\n\022LeaveChatRoomGroup\022%.CChatRoom_LeaveCh"
  "atRoomGroup_Request\032&.CChatRoom_LeaveCha"
  "tRoomGroup_Response\"2\202\265\030.Leaves a chat r"
  "oom group and all related chats\022\211\001\n\016Crea"
  "teChatRoom\022!.CChatRoom_CreateChatRoom_Re"
  "quest\032\".CChatRoom_CreateChatRoom_Respons"
  "e\"0\202\265\030,Creates a chat room inside a chat"
  " room group\022\211\001\n\016DeleteChatRoom\022!.CChatRo"
  "om_DeleteChatRoom_Request\032\".CChatRoom_De"
  "leteChatRoom_Response\"0\202\265\030,Deletes a cha"
  "t room inside a chat room group\022\211\001\n\016Rena"
  "meChatRoom\022!.CChatRoom_RenameChatRoom_Re"
  "quest\032\".CChatRoom_RenameChatRoom_Respons"
  "e\"0\202\265\030,Renames a chat room inside a chat"
  " room group\022\215\001\n\017ReorderChatRoom\022\".CChatR"
  "oom_ReorderChatRoom_Request\032#.CChatRoom_"
  "ReorderChatRoom_Response\"1\202\265\030-Reorders a"
  " chat room inside a chat room group\022\215\001\n\017"
  "SendChatMessage\022\".CChatRoom_SendChatMess"
  "age_Request\032#.CChatRoom_SendChatMessage_"
  "Response\"1\202\265\030-Send a chat message to a m"
  "ulti-user chat room\022\247\001\n\rJoinVoiceChat\022 ."
  "CChatRoom_JoinVoiceChat_Request\032!.CChatR"
  "oom_JoinVoiceChat_Response\"Q\202\265\030MJoin the"
  " voice chat in a multi-room chat (should"
  " already be in the chat room)\022\206\001\n\016LeaveV"
  "oiceChat\022!.CChatRoom_LeaveVoiceChat_Requ"
  "est\032\".CChatRoom_LeaveVoiceChat_Response\""
  "-\202\265\030)Leave the voice chat in a multi-roo"
  "m chat\022\303\001\n\021GetMessageHistory\022$.CChatRoom"
  "_GetMessageHistory_Request\032%.CChatRoom_G"
  "etMessageHistory_Response\"a\202\265\030]Get the h"
  "istory of messages in a chat room.  You "
  "must currently be a member of the chat r"
  "oom.\022\210\001\n\023GetMyChatRoomGroups\022&.CChatRoom"
  "_GetMyChatRoomGroups_Request\032\'.CChatRoom"
  "_GetMyChatRoomGroups_Response\" \202\265\030\034Get a"
  " list of our chat rooms\022\232\001\n\025GetChatRoomG"
  "roupState\022(.CChatRoom_GetChatRoomGroupSt"
  "ate_Request\032).CChatRoom_GetChatRoomGroup"
  "State_Response\",\202\265\030(Get information abou"
  "t a single chat room\022\245\001\n\027GetChatRoomGrou"
  "pSummary\022*.CChatRoom_GetChatRoomGroupSum"
  "mary_Request\032+.CChatRoom_GetChatRoomGrou"
  "pSummary_Response\"1\202\265\030-Get basic informa"
  "tion about a chat room group\022\323\001\n\036SetAppC"
  "hatRoomGroupForceActive\0221.CChatRoom_SetA"
  "ppChatRoomGroupForceActive_Request\0322.CCh"
  "atRoom_SetAppChatRoomGroupForceActive_Re"
  "sponse\"J\202\265\030FForce a group chat to be con"
  "sidered active on the server for this us"
  "er\022\323\001\n\"SetAppChatRoomGroupStopForceActiv"
  "e\022:.CChatRoom_SetAppChatRoomGroupStopFor"
  "ceActive_Notification\032\013.NoResponse\"d\202\265\030`"
  "If a group chat is forced active (see Se"
  "tAppChatRoomGroupForceActive), decrement"
  " the force count\022\217\001\n\016AckChatMessage\022&.CC"
  "hatRoom_AckChatMessage_Notification\032\013.No"
  "Response\"H\202\265\030DAcknowledge that we have s"
  "een the most recent chat message in a ch"
  "at\022\201\001\n\020CreateInviteLink\022#.CChatRoom_Crea"
  "teInviteLink_Request\032$.CChatRoom_CreateI"
  "nviteLink_Response\"\"\202\265\030\036Creates a chatro"
  "om invite link\022\220\001\n\021GetInviteLinkInfo\022$.C"
  "ChatRoom_GetInviteLinkInfo_Request\032%.CCh"
  "atRoom_GetInviteLinkInfo_Response\".\202\265\030*R"
  "eturns chat room info about provided lin"
  "k\022\252\001\n\rGetInviteInfo\022 .CChatRoom_GetInvit"
  "eInfo_Request\032!.CChatRoom_GetInviteInfo_"
  "Response\"T\202\265\030PReturns chat room info abo"
  "ut any invite involving the sender and p"
  "assed group id\022\245\001\n\026GetInviteLinksForGrou"
  "p\022).CChatRoom_GetInviteLinksForGroup_Req"
  "uest\032*.CChatRoom_GetInviteLinksForGroup_"
  "Response\"4\202\265\0300Returns all invite links f"
  "or the specified group\022\213\001\n\nGetBanList\022\035."
  "CChatRoom_GetBanList_Request\032\036.CChatRoom"
  "_GetBanList_Response\">\202\265\030:Gets a list of"
  " users who have been banned from a chat "
  "room\022\223\001\n\rGetInviteList\022 .CChatRoom_GetIn"
  "viteList_Request\032!.CChatRoom_GetInviteLi"
  "st_Response\"=\202\265\0309Gets a list of users wh"
  "o have been invited to a chat room\022\200\001\n\020D"
  "eleteInviteLink\022#.CChatRoom_DeleteInvite"
  "Link_Request\032$.CChatRoom_DeleteInviteLin"
  "k_Response\"!\202\265\030\035Deletes specified invite"
  " link\022\304\001\n\036SetSessionActiveChatRoomGroups"
  "\0221.CChatRoom_SetSessionActiveChatRoomGro"
  "ups_Request\0322.CChatRoom_SetSessionActive"
  "ChatRoomGroups_Response\";\202\265\0307Set which c"
  "hat rooms we are using in the active ses"
  "sion\022\271\001\n\033SetUserChatGroupPreferences\022..C"
  "ChatRoom_SetUserChatGroupPreferences_Req"
  "uest\032/.CChatRoom_SetUserChatGroupPrefere"
  "nces_Response\"9\202\265\0305Set preferences aroun"
  "d chat notifications for a group\022\210\001\n\022Del"
  "eteChatMessages\022%.CChatRoom_DeleteChatMe"
  "ssages_Request\032&.CChatRoom_DeleteChatMes"
  "sages_Response\"#\202\265\030\037Deletes specified ch"
  "at messages\022\232\001\n\024UpdateMemberListView\022,.C"
  "ChatRoom_UpdateMemberListView_Notificati"
  "on\032\013.NoResponse\"G\202\265\030CA client is indicat"
  "ing it has an active view into the membe"
  "rs list.\022{\n\rSearchMembers\022 .CChatRoom_Se"
  "archMembers_Request\032!.CChatRoom_SearchMe"
  "mbers_Response\"%\202\265\030!Search chat room mem"
  "bers by name.\022\245\001\n\025UpdateMessageReaction\022"
  "(.CChatRoom_UpdateMessageReaction_Reques"
  "t\032).CChatRoom_UpdateMessageReaction_Resp"
  "onse\"7\202\265\0303Adds/removes a reaction to/fro"
  "m a chat room message\022\264\001\n\032GetMessageReac"
  "tionReactors\022-.CChatRoom_GetMessageReact"
  "ionReactors_Request\032..CChatRoom_GetMessa"
  "geReactionReactors_Response\"7\202\265\0303Fetches"
  " a list of reactors for a specified reac"
  "tion\032B\202\265\030>Service for joining, managing,"
  " and using multi-user chat rooms2\256\003\n\rCla"
  "nChatRooms\022\270\001\n\023GetClanChatRoomInfo\022+.CCl"
  "anChatRooms_GetClanChatRoomInfo_Request\032"
  ",.CClanChatRooms_GetClanChatRoomInfo_Res"
  "ponse\"F\202\265\030BGet a list of chat rooms for "
  "a clan, optionally creating a new one\022\262\001"
  "\n\026SetClanChatRoomPrivate\022..CClanChatRoom"
  "s_SetClanChatRoomPrivate_Request\032/.CClan"
  "ChatRooms_SetClanChatRoomPrivate_Respons"
  "e\"7\202\265\0303Set a clan chat room to be member"
  "s only (or public)\032-\202\265\030)Methods for gett"
  "ing clan chat information2\357\016\n\016ChatRoomCl"
  "ient\022{\n\031NotifyIncomingChatMessage\022+.CCha"
  "tRoom_IncomingChatMessage_Notification\032\013"
  ".NoResponse\"$\202\265\030 New chat message for a "
  "chat room\022\224\001\n\031NotifyChatMessageModified\022"
  "+.CChatRoom_ChatMessageModified_Notifica"
  "tion\032\013.NoResponse\"=\202\265\0309An existing chat "
  "message has been modified on the backend"
  "\022\225\001\n\027NotifyMemberStateChange\022).CChatRoom"
  "_MemberStateChange_Notification\032\013.NoResp"
  "onse\"B\202\265\030>A chat room member\'s state has"
  " changed (join/part/permissions)\022\210\001\n\037Not"
  "ifyChatRoomHeaderStateChange\022+.CChatRoom"
  "_ChatRoomHeaderState_Notification\032\013.NoRe"
  "sponse\"+\202\265\030\'Chat Room header / metadata "
  "has changed\022\246\001\n\036NotifyChatRoomGroupRooms"
  "Change\0220.CChatRoom_ChatRoomGroupRoomsCha"
  "nge_Notification\032\013.NoResponse\"E\202\265\030ASomet"
  "hing about a chatroom group changed (cre"
  "ated, deleted, etc.)\022\325\001\n#NotifyShouldRej"
  "oinChatRoomVoiceChat\022;.CChatRoom_NotifyS"
  "houldRejoinChatRoomVoiceChat_Notificatio"
  "n\032\013.NoResponse\"d\202\265\030`Voice chat was recre"
  "ated or dropped on the backend and clien"
  "t needs to rejoin to remain in chat.\022\263\001\n"
  "\037NotifyChatGroupUserStateChanged\022<.ChatR"
  "oomClient_NotifyChatGroupUserStateChange"
  "d_Notification\032\013.NoResponse\"E\202\265\030AUser ch"
  "at group state (preferences, ack state, "
  "etc) have changed.\022\217\001\n\030NotifyAckChatMess"
  "ageEcho\022&.CChatRoom_AckChatMessage_Notif"
  "ication\032\013.NoResponse\">\202\265\030:A session acke"
  "d an unread message, echo to other sessi"
  "ons.\022\355\001\n\030NotifyChatRoomDisconnect\0225.Chat"
  "RoomClient_NotifyChatRoomDisconnect_Noti"
  "fication\032\013.NoResponse\"\214\001\202\265\030\207\001The ChatRoo"
  "m server hosting the chat rooms has reco"
  "nnected to the user\'s Chat server (may h"
  "ave restarted), client should refresh st"
  "ate.\022\325\001\n\033NotifyMemberListViewUpdated\0223.C"
  "ChatRoomClient_MemberListViewUpdated_Not"
  "ification\032\013.NoResponse\"t\202\265\030pThe list of "
  "members for a chat room with virtualized"
  " member list has changed on the server ("
  "or client requested)\022g\n\025NotifyMessageRea"
  "ction\022\'.CChatRoom_MessageReaction_Notifi"
  "cation\032\013.NoResponse\"\030\202\265\030\024New message rea"
  "ction\032,\202\265\030$Client notifications for chat"
  " events\300\265\030\0022\302\001\n\rChatUsability\022\206\001\n\034Notify"
  "ClientUsabilityMetrics\0223.CChatUsability_"
  "ClientUsabilityMetrics_Notification\032\013.No"
  "Response\"$\202\265\030 Incoming metrics from the "
  "client\032(\202\265\030$Client notifications for cha"
  "t events2\342\001\n\023ChatUsabilityClient\022\231\001\n#Not"
  "ifyRequestClientUsabilityMetrics\022:.CChat"
  "Usability_RequestClientUsabilityMetrics_"
  "Notification\032\013.NoResponse\")\202\265\030%Request c"
  "lient send usability metrics\032/\202\265\030\'Client"
  " notifications for chat usability\300\265\030\002B\003\200"
  "\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fchat_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5fclientserver_5ffriends_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fchat_2esteamclient_2eproto = {
  false, false, 33482, descriptor_table_protodef_steammessages_5fchat_2esteamclient_2eproto, "steammessages_chat.steamclient.proto", 
  &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once, descriptor_table_steammessages_5fchat_2esteamclient_2eproto_deps, 3, 151,
  schemas, file_default_instances, TableStruct_steammessages_5fchat_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fchat_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fchat_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fchat_2esteamclient_2eproto(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatRoomJoinState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto[0];
}
bool EChatRoomJoinState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatRoomGroupRank_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto[1];
}
bool EChatRoomGroupRank_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 15:
    case 20:
    case 30:
    case 40:
    case 50:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatRoomNotificationLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto[2];
}
bool EChatRoomNotificationLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatRoomServerMessage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto[3];
}
bool EChatRoomServerMessage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatRoomMessageReactionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto[4];
}
bool EChatRoomMessageReactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatRoomMemberStateChange_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fchat_2esteamclient_2eproto[5];
}
bool EChatRoomMemberStateChange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CChat_RequestFriendPersonaStates_Request::_Internal {
 public:
};

CChat_RequestFriendPersonaStates_Request::CChat_RequestFriendPersonaStates_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChat_RequestFriendPersonaStates_Request)
}
CChat_RequestFriendPersonaStates_Request::CChat_RequestFriendPersonaStates_Request(const CChat_RequestFriendPersonaStates_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChat_RequestFriendPersonaStates_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChat_RequestFriendPersonaStates_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChat_RequestFriendPersonaStates_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChat_RequestFriendPersonaStates_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[0]);
}

// ===================================================================

class CChat_RequestFriendPersonaStates_Response::_Internal {
 public:
};

CChat_RequestFriendPersonaStates_Response::CChat_RequestFriendPersonaStates_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChat_RequestFriendPersonaStates_Response)
}
CChat_RequestFriendPersonaStates_Response::CChat_RequestFriendPersonaStates_Response(const CChat_RequestFriendPersonaStates_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChat_RequestFriendPersonaStates_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChat_RequestFriendPersonaStates_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChat_RequestFriendPersonaStates_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChat_RequestFriendPersonaStates_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[1]);
}

// ===================================================================

class CChatRoom_CreateChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateChatRoomGroup_Request>()._has_bits_);
  static void set_has_steamid_partner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_watching_broadcast_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_watching_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CChatRoom_CreateChatRoomGroup_Request::CChatRoom_CreateChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamid_invitees_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateChatRoomGroup_Request)
}
CChatRoom_CreateChatRoomGroup_Request::CChatRoom_CreateChatRoomGroup_Request(const CChatRoom_CreateChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamid_invitees_(from.steamid_invitees_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_partner_, &from.steamid_partner_,
    static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_accountid_) -
    reinterpret_cast<char*>(&steamid_partner_)) + sizeof(watching_broadcast_accountid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoomGroup_Request)
}

inline void CChatRoom_CreateChatRoomGroup_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_partner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_accountid_) -
    reinterpret_cast<char*>(&steamid_partner_)) + sizeof(watching_broadcast_accountid_));
}

CChatRoom_CreateChatRoomGroup_Request::~CChatRoom_CreateChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_CreateChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_CreateChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_CreateChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_invitees_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_partner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_accountid_) -
        reinterpret_cast<char*>(&steamid_partner_)) + sizeof(watching_broadcast_accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_partner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_partner(&has_bits);
          steamid_partner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_invited = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid_invited(&has_bits);
          steamid_invited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_CreateChatRoomGroup_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamid_invitees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_invitees(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_invitees(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watching_broadcast_accountid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_watching_broadcast_accountid(&has_bits);
          watching_broadcast_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 watching_broadcast_channel_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_watching_broadcast_channel_id(&has_bits);
          watching_broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_partner = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_partner(), target);
  }

  // optional fixed64 steamid_invited = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_invited(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateChatRoomGroup_Request.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated fixed64 steamid_invitees = 4;
  for (int i = 0, n = this->_internal_steamid_invitees_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid_invitees(i), target);
  }

  // optional uint32 watching_broadcast_accountid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_watching_broadcast_accountid(), target);
  }

  // optional uint64 watching_broadcast_channel_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_watching_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_CreateChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_invitees = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_invitees_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_invitees_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 steamid_partner = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_invited = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 watching_broadcast_channel_id = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_watching_broadcast_channel_id());
    }

    // optional uint32 watching_broadcast_accountid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_watching_broadcast_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateChatRoomGroup_Request &>(from));
}


void CChatRoom_CreateChatRoomGroup_Request::MergeFrom(const CChatRoom_CreateChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_invitees_.MergeFrom(from.steamid_invitees_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_partner_ = from.steamid_partner_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_invited_ = from.steamid_invited_;
    }
    if (cached_has_bits & 0x00000008u) {
      watching_broadcast_channel_id_ = from.watching_broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateChatRoomGroup_Request::CopyFrom(const CChatRoom_CreateChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoomGroup_Request::InternalSwap(CChatRoom_CreateChatRoomGroup_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_invitees_.InternalSwap(&other->steamid_invitees_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_CreateChatRoomGroup_Request, watching_broadcast_accountid_)
      + sizeof(CChatRoom_CreateChatRoomGroup_Request::watching_broadcast_accountid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_CreateChatRoomGroup_Request, steamid_partner_)>(
          reinterpret_cast<char*>(&steamid_partner_),
          reinterpret_cast<char*>(&other->steamid_partner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[2]);
}

// ===================================================================

class CChatRole::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRole>()._has_bits_);
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRole::CChatRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRole)
}
CChatRole::CChatRole(const CChatRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRole)
}

inline void CChatRole::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ordinal_));
}

CChatRole::~CChatRole() {
  // @@protoc_insertion_point(destructor:CChatRole)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRole::ArenaDtor(void* object) {
  CChatRole* _this = reinterpret_cast< CChatRole* >(object);
  (void)_this;
}
void CChatRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRole::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&role_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&role_id_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRole.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 role_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRole.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRole)
  return target;
}

size_t CChatRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 role_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

    // optional uint32 ordinal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRole::GetClassData() const { return &_class_data_; }

void CChatRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRole *>(to)->MergeFrom(
      static_cast<const CChatRole &>(from));
}


void CChatRole::MergeFrom(const CChatRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRole::CopyFrom(const CChatRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRole::IsInitialized() const {
  return true;
}

void CChatRole::InternalSwap(CChatRole* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRole, ordinal_)
      + sizeof(CChatRole::ordinal_)
      - PROTOBUF_FIELD_OFFSET(CChatRole, role_id_)>(
          reinterpret_cast<char*>(&role_id_),
          reinterpret_cast<char*>(&other->role_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRole::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[3]);
}

// ===================================================================

class CChatRoleActions::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoleActions>()._has_bits_);
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_create_rename_delete_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_kick(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_invite(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_change_tagline_avatar_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_view_history(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_change_group_roles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_change_user_roles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_mention_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_set_watching_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CChatRoleActions::CChatRoleActions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoleActions)
}
CChatRoleActions::CChatRoleActions(const CChatRoleActions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_set_watching_broadcast_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(can_set_watching_broadcast_));
  // @@protoc_insertion_point(copy_constructor:CChatRoleActions)
}

inline void CChatRoleActions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&can_set_watching_broadcast_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(can_set_watching_broadcast_));
}

CChatRoleActions::~CChatRoleActions() {
  // @@protoc_insertion_point(destructor:CChatRoleActions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoleActions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoleActions::ArenaDtor(void* object) {
  CChatRoleActions* _this = reinterpret_cast< CChatRoleActions* >(object);
  (void)_this;
}
void CChatRoleActions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoleActions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoleActions::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoleActions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&role_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_view_history_) -
        reinterpret_cast<char*>(&role_id_)) + sizeof(can_view_history_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&can_change_group_roles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_set_watching_broadcast_) -
        reinterpret_cast<char*>(&can_change_group_roles_)) + sizeof(can_set_watching_broadcast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoleActions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_create_rename_delete_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_can_create_rename_delete_channel(&has_bits);
          can_create_rename_delete_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_kick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_can_kick(&has_bits);
          can_kick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_ban = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_can_ban(&has_bits);
          can_ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_invite = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_can_invite(&has_bits);
          can_invite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_change_tagline_avatar_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_can_change_tagline_avatar_name(&has_bits);
          can_change_tagline_avatar_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_chat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_can_chat(&has_bits);
          can_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_view_history = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_can_view_history(&has_bits);
          can_view_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_change_group_roles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_can_change_group_roles(&has_bits);
          can_change_group_roles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_change_user_roles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_can_change_user_roles(&has_bits);
          can_change_user_roles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_mention_all = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_can_mention_all(&has_bits);
          can_mention_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_set_watching_broadcast = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_can_set_watching_broadcast(&has_bits);
          can_set_watching_broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoleActions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoleActions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 role_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // optional bool can_create_rename_delete_channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_create_rename_delete_channel(), target);
  }

  // optional bool can_kick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_can_kick(), target);
  }

  // optional bool can_ban = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_can_ban(), target);
  }

  // optional bool can_invite = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_can_invite(), target);
  }

  // optional bool can_change_tagline_avatar_name = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_can_change_tagline_avatar_name(), target);
  }

  // optional bool can_chat = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_can_chat(), target);
  }

  // optional bool can_view_history = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_can_view_history(), target);
  }

  // optional bool can_change_group_roles = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_can_change_group_roles(), target);
  }

  // optional bool can_change_user_roles = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_can_change_user_roles(), target);
  }

  // optional bool can_mention_all = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_can_mention_all(), target);
  }

  // optional bool can_set_watching_broadcast = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_can_set_watching_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoleActions)
  return target;
}

size_t CChatRoleActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoleActions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 role_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

    // optional bool can_create_rename_delete_channel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool can_kick = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool can_ban = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool can_invite = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool can_change_tagline_avatar_name = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool can_chat = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool can_view_history = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool can_change_group_roles = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool can_change_user_roles = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool can_mention_all = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool can_set_watching_broadcast = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoleActions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoleActions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoleActions::GetClassData() const { return &_class_data_; }

void CChatRoleActions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoleActions *>(to)->MergeFrom(
      static_cast<const CChatRoleActions &>(from));
}


void CChatRoleActions::MergeFrom(const CChatRoleActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoleActions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_create_rename_delete_channel_ = from.can_create_rename_delete_channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_kick_ = from.can_kick_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_ban_ = from.can_ban_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_invite_ = from.can_invite_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_change_tagline_avatar_name_ = from.can_change_tagline_avatar_name_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_chat_ = from.can_chat_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_view_history_ = from.can_view_history_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      can_change_group_roles_ = from.can_change_group_roles_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_change_user_roles_ = from.can_change_user_roles_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_mention_all_ = from.can_mention_all_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_set_watching_broadcast_ = from.can_set_watching_broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoleActions::CopyFrom(const CChatRoleActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoleActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoleActions::IsInitialized() const {
  return true;
}

void CChatRoleActions::InternalSwap(CChatRoleActions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoleActions, can_set_watching_broadcast_)
      + sizeof(CChatRoleActions::can_set_watching_broadcast_)
      - PROTOBUF_FIELD_OFFSET(CChatRoleActions, role_id_)>(
          reinterpret_cast<char*>(&role_id_),
          reinterpret_cast<char*>(&other->role_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoleActions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[4]);
}

// ===================================================================

class CChatPartyBeacon::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatPartyBeacon>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_beacon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatPartyBeacon::CChatPartyBeacon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatPartyBeacon)
}
CChatPartyBeacon::CChatPartyBeacon(const CChatPartyBeacon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_metadata()) {
    game_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_metadata(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_owner_, &from.steamid_owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steamid_owner_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CChatPartyBeacon)
}

inline void CChatPartyBeacon::SharedCtor() {
game_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&steamid_owner_)) + sizeof(app_id_));
}

CChatPartyBeacon::~CChatPartyBeacon() {
  // @@protoc_insertion_point(destructor:CChatPartyBeacon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatPartyBeacon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatPartyBeacon::ArenaDtor(void* object) {
  CChatPartyBeacon* _this = reinterpret_cast< CChatPartyBeacon* >(object);
  (void)_this;
}
void CChatPartyBeacon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatPartyBeacon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatPartyBeacon::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatPartyBeacon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_metadata_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&steamid_owner_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatPartyBeacon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid_owner(&has_bits);
          steamid_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 beacon_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_beacon_id(&has_bits);
          beacon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string game_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_game_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatPartyBeacon.game_metadata");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatPartyBeacon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatPartyBeacon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed64 steamid_owner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_owner(), target);
  }

  // optional fixed64 beacon_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_beacon_id(), target);
  }

  // optional string game_metadata = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_metadata().data(), static_cast<int>(this->_internal_game_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatPartyBeacon.game_metadata");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_game_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatPartyBeacon)
  return target;
}

size_t CChatPartyBeacon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatPartyBeacon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string game_metadata = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_metadata());
    }

    // optional fixed64 steamid_owner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 beacon_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatPartyBeacon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatPartyBeacon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatPartyBeacon::GetClassData() const { return &_class_data_; }

void CChatPartyBeacon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatPartyBeacon *>(to)->MergeFrom(
      static_cast<const CChatPartyBeacon &>(from));
}


void CChatPartyBeacon::MergeFrom(const CChatPartyBeacon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatPartyBeacon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_metadata(from._internal_game_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_owner_ = from.steamid_owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      beacon_id_ = from.beacon_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatPartyBeacon::CopyFrom(const CChatPartyBeacon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatPartyBeacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatPartyBeacon::IsInitialized() const {
  return true;
}

void CChatPartyBeacon::InternalSwap(CChatPartyBeacon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_metadata_, lhs_arena,
      &other->game_metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatPartyBeacon, app_id_)
      + sizeof(CChatPartyBeacon::app_id_)
      - PROTOBUF_FIELD_OFFSET(CChatPartyBeacon, steamid_owner_)>(
          reinterpret_cast<char*>(&steamid_owner_),
          reinterpret_cast<char*>(&other->steamid_owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatPartyBeacon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[5]);
}

// ===================================================================

class CChatRoomGroupHeaderState::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomGroupHeaderState>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chat_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clanid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accountid_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tagline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatar_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_watching_broadcast_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_watching_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_active_minigame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_avatar_ugc_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CChatRoomGroupHeaderState::CChatRoomGroupHeaderState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena),
  role_actions_(arena),
  party_beacons_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomGroupHeaderState)
}
CChatRoomGroupHeaderState::CChatRoomGroupHeaderState(const CChatRoomGroupHeaderState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      roles_(from.roles_),
      role_actions_(from.role_actions_),
      party_beacons_(from.party_beacons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_name()) {
    chat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_name(), 
      GetArenaForAllocation());
  }
  tagline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tagline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tagline()) {
    tagline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagline(), 
      GetArenaForAllocation());
  }
  avatar_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_sha()) {
    avatar_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_sha(), 
      GetArenaForAllocation());
  }
  avatar_ugc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_ugc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_ugc_url()) {
    avatar_ugc_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_ugc_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_minigame_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(active_minigame_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomGroupHeaderState)
}

inline void CChatRoomGroupHeaderState::SharedCtor() {
chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tagline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tagline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
avatar_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
avatar_ugc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_ugc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_minigame_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(active_minigame_id_));
}

CChatRoomGroupHeaderState::~CChatRoomGroupHeaderState() {
  // @@protoc_insertion_point(destructor:CChatRoomGroupHeaderState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomGroupHeaderState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tagline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_ugc_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoomGroupHeaderState::ArenaDtor(void* object) {
  CChatRoomGroupHeaderState* _this = reinterpret_cast< CChatRoomGroupHeaderState* >(object);
  (void)_this;
}
void CChatRoomGroupHeaderState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomGroupHeaderState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomGroupHeaderState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomGroupHeaderState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  role_actions_.Clear();
  party_beacons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tagline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      avatar_sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      avatar_ugc_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_role_id_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&disabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_minigame_id_) -
        reinterpret_cast<char*>(&disabled_)) + sizeof(active_minigame_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomGroupHeaderState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoomGroupHeaderState.chat_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 clanid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_clanid(&has_bits);
          clanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_owner = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_accountid_owner(&has_bits);
          accountid_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tagline = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_tagline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoomGroupHeaderState.tagline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes avatar_sha = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_avatar_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_role_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_default_role_id(&has_bits);
          default_role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRole roles = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoleActions role_actions = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_role_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watching_broadcast_accountid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_watching_broadcast_accountid(&has_bits);
          watching_broadcast_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatPartyBeacon party_beacons = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_party_beacons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 watching_broadcast_channel_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_watching_broadcast_channel_id(&has_bits);
          watching_broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 active_minigame_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_active_minigame_id(&has_bits);
          active_minigame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_ugc_url = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_avatar_ugc_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoomGroupHeaderState.avatar_ugc_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disabled = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_disabled(&has_bits);
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomGroupHeaderState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomGroupHeaderState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string chat_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_name().data(), static_cast<int>(this->_internal_chat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoomGroupHeaderState.chat_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_name(), target);
  }

  // optional uint32 clanid = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_clanid(), target);
  }

  // optional uint32 accountid_owner = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_accountid_owner(), target);
  }

  // optional string tagline = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tagline().data(), static_cast<int>(this->_internal_tagline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoomGroupHeaderState.tagline");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_tagline(), target);
  }

  // optional bytes avatar_sha = 16;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_avatar_sha(), target);
  }

  // optional uint64 default_role_id = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_default_role_id(), target);
  }

  // repeated .CChatRole roles = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_roles(i), target, stream);
  }

  // repeated .CChatRoleActions role_actions = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_role_actions(i), target, stream);
  }

  // optional uint32 watching_broadcast_accountid = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_watching_broadcast_accountid(), target);
  }

  // optional uint32 appid = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_appid(), target);
  }

  // repeated .CChatPartyBeacon party_beacons = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_beacons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_party_beacons(i), target, stream);
  }

  // optional uint64 watching_broadcast_channel_id = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_watching_broadcast_channel_id(), target);
  }

  // optional uint64 active_minigame_id = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_active_minigame_id(), target);
  }

  // optional string avatar_ugc_url = 25;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar_ugc_url().data(), static_cast<int>(this->_internal_avatar_ugc_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoomGroupHeaderState.avatar_ugc_url");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_avatar_ugc_url(), target);
  }

  // optional bool disabled = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomGroupHeaderState)
  return target;
}

size_t CChatRoomGroupHeaderState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomGroupHeaderState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRole roles = 18;
  total_size += 2UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CChatRoleActions role_actions = 19;
  total_size += 2UL * this->_internal_role_actions_size();
  for (const auto& msg : this->role_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CChatPartyBeacon party_beacons = 22;
  total_size += 2UL * this->_internal_party_beacons_size();
  for (const auto& msg : this->party_beacons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string chat_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_name());
    }

    // optional string tagline = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tagline());
    }

    // optional bytes avatar_sha = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_avatar_sha());
    }

    // optional string avatar_ugc_url = 25;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_ugc_url());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint32 clanid = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_clanid());
    }

    // optional uint32 accountid_owner = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_owner());
    }

    // optional uint64 default_role_id = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_default_role_id());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool disabled = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional uint32 watching_broadcast_accountid = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_watching_broadcast_accountid());
    }

    // optional uint32 appid = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint64 watching_broadcast_channel_id = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_watching_broadcast_channel_id());
    }

    // optional uint64 active_minigame_id = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_active_minigame_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomGroupHeaderState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomGroupHeaderState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomGroupHeaderState::GetClassData() const { return &_class_data_; }

void CChatRoomGroupHeaderState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomGroupHeaderState *>(to)->MergeFrom(
      static_cast<const CChatRoomGroupHeaderState &>(from));
}


void CChatRoomGroupHeaderState::MergeFrom(const CChatRoomGroupHeaderState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomGroupHeaderState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  role_actions_.MergeFrom(from.role_actions_);
  party_beacons_.MergeFrom(from.party_beacons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chat_name(from._internal_chat_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tagline(from._internal_tagline());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_avatar_sha(from._internal_avatar_sha());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_avatar_ugc_url(from._internal_avatar_ugc_url());
    }
    if (cached_has_bits & 0x00000010u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      clanid_ = from.clanid_;
    }
    if (cached_has_bits & 0x00000040u) {
      accountid_owner_ = from.accountid_owner_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_role_id_ = from.default_role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      disabled_ = from.disabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    if (cached_has_bits & 0x00000400u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000800u) {
      watching_broadcast_channel_id_ = from.watching_broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      active_minigame_id_ = from.active_minigame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomGroupHeaderState::CopyFrom(const CChatRoomGroupHeaderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomGroupHeaderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomGroupHeaderState::IsInitialized() const {
  return true;
}

void CChatRoomGroupHeaderState::InternalSwap(CChatRoomGroupHeaderState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  roles_.InternalSwap(&other->roles_);
  role_actions_.InternalSwap(&other->role_actions_);
  party_beacons_.InternalSwap(&other->party_beacons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_name_, lhs_arena,
      &other->chat_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagline_, lhs_arena,
      &other->tagline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_sha_, lhs_arena,
      &other->avatar_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_ugc_url_, lhs_arena,
      &other->avatar_ugc_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomGroupHeaderState, active_minigame_id_)
      + sizeof(CChatRoomGroupHeaderState::active_minigame_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomGroupHeaderState, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomGroupHeaderState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[6]);
}

// ===================================================================

class CChatRoomMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomMember>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_kick_expire(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CChatRoomMember::CChatRoomMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  role_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomMember)
}
CChatRoomMember::CChatRoomMember(const CChatRoomMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      role_ids_(from.role_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_kick_expire_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_kick_expire_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomMember)
}

inline void CChatRoomMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_kick_expire_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_kick_expire_));
}

CChatRoomMember::~CChatRoomMember() {
  // @@protoc_insertion_point(destructor:CChatRoomMember)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoomMember::ArenaDtor(void* object) {
  CChatRoomMember* _this = reinterpret_cast< CChatRoomMember* >(object);
  (void)_this;
}
void CChatRoomMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_kick_expire_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(time_kick_expire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomJoinState state = 3 [default = k_EChatRoomJoinState_Default];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomJoinState_IsValid(val))) {
            _internal_set_state(static_cast<::EChatRoomJoinState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomGroupRank rank = 4 [default = k_EChatRoomGroupRank_Default];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomGroupRank_IsValid(val))) {
            _internal_set_rank(static_cast<::EChatRoomGroupRank>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_kick_expire = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_time_kick_expire(&has_bits);
          time_kick_expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 role_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_role_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_role_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional .EChatRoomJoinState state = 3 [default = k_EChatRoomJoinState_Default];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // optional .EChatRoomGroupRank rank = 4 [default = k_EChatRoomGroupRank_Default];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rank(), target);
  }

  // optional uint32 time_kick_expire = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_kick_expire(), target);
  }

  // repeated uint64 role_ids = 7;
  for (int i = 0, n = this->_internal_role_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_role_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomMember)
  return target;
}

size_t CChatRoomMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 role_ids = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->role_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_role_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional .EChatRoomJoinState state = 3 [default = k_EChatRoomJoinState_Default];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional .EChatRoomGroupRank rank = 4 [default = k_EChatRoomGroupRank_Default];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rank());
    }

    // optional uint32 time_kick_expire = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_kick_expire());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomMember::GetClassData() const { return &_class_data_; }

void CChatRoomMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomMember *>(to)->MergeFrom(
      static_cast<const CChatRoomMember &>(from));
}


void CChatRoomMember::MergeFrom(const CChatRoomMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomMember)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  role_ids_.MergeFrom(from.role_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_kick_expire_ = from.time_kick_expire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomMember::CopyFrom(const CChatRoomMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomMember::IsInitialized() const {
  return true;
}

void CChatRoomMember::InternalSwap(CChatRoomMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_ids_.InternalSwap(&other->role_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomMember, time_kick_expire_)
      + sizeof(CChatRoomMember::time_kick_expire_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomMember, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomMember::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[7]);
}

// ===================================================================

class CChatRoomState::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomState>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voice_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_last_message(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid_last_message(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CChatRoomState::CChatRoomState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_in_voice_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomState)
}
CChatRoomState::CChatRoomState(const CChatRoomState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_in_voice_(from.members_in_voice_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_name()) {
    chat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_name(), 
      GetArenaForAllocation());
  }
  last_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_message()) {
    last_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_last_message_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(accountid_last_message_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomState)
}

inline void CChatRoomState::SharedCtor() {
chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_last_message_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(accountid_last_message_));
}

CChatRoomState::~CChatRoomState() {
  // @@protoc_insertion_point(destructor:CChatRoomState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoomState::ArenaDtor(void* object) {
  CChatRoomState* _this = reinterpret_cast< CChatRoomState* >(object);
  (void)_this;
}
void CChatRoomState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_in_voice_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      last_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_last_message_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(accountid_last_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoomState.chat_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool voice_allowed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_voice_allowed(&has_bits);
          voice_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 members_in_voice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_members_in_voice(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_members_in_voice(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_last_message(&has_bits);
          time_last_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sort_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sort_order(&has_bits);
          sort_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_last_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoomState.last_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_last_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_accountid_last_message(&has_bits);
          accountid_last_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional string chat_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_name().data(), static_cast<int>(this->_internal_chat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoomState.chat_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_name(), target);
  }

  // optional bool voice_allowed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_voice_allowed(), target);
  }

  // repeated uint32 members_in_voice = 4;
  for (int i = 0, n = this->_internal_members_in_voice_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_members_in_voice(i), target);
  }

  // optional uint32 time_last_message = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_last_message(), target);
  }

  // optional uint32 sort_order = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sort_order(), target);
  }

  // optional string last_message = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_message().data(), static_cast<int>(this->_internal_last_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoomState.last_message");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_last_message(), target);
  }

  // optional uint32 accountid_last_message = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_accountid_last_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomState)
  return target;
}

size_t CChatRoomState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 members_in_voice = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->members_in_voice_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_members_in_voice_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string chat_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_name());
    }

    // optional string last_message = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_message());
    }

    // optional uint64 chat_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional bool voice_allowed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_last_message = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_message());
    }

    // optional uint32 sort_order = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sort_order());
    }

    // optional uint32 accountid_last_message = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_last_message());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomState::GetClassData() const { return &_class_data_; }

void CChatRoomState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomState *>(to)->MergeFrom(
      static_cast<const CChatRoomState &>(from));
}


void CChatRoomState::MergeFrom(const CChatRoomState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_in_voice_.MergeFrom(from.members_in_voice_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chat_name(from._internal_chat_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_last_message(from._internal_last_message());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      voice_allowed_ = from.voice_allowed_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_last_message_ = from.time_last_message_;
    }
    if (cached_has_bits & 0x00000020u) {
      sort_order_ = from.sort_order_;
    }
    if (cached_has_bits & 0x00000040u) {
      accountid_last_message_ = from.accountid_last_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomState::CopyFrom(const CChatRoomState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomState::IsInitialized() const {
  return true;
}

void CChatRoomState::InternalSwap(CChatRoomState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_in_voice_.InternalSwap(&other->members_in_voice_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_name_, lhs_arena,
      &other->chat_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_message_, lhs_arena,
      &other->last_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomState, accountid_last_message_)
      + sizeof(CChatRoomState::accountid_last_message_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomState, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[8]);
}

// ===================================================================

class CChatRoomGroupState::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomGroupState>()._has_bits_);
  static const ::CChatRoomGroupHeaderState& header_state(const CChatRoomGroupState* msg);
  static void set_has_header_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CChatRoomGroupHeaderState&
CChatRoomGroupState::_Internal::header_state(const CChatRoomGroupState* msg) {
  return *msg->header_state_;
}
CChatRoomGroupState::CChatRoomGroupState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  chat_rooms_(arena),
  kicked_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomGroupState)
}
CChatRoomGroupState::CChatRoomGroupState(const CChatRoomGroupState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      chat_rooms_(from.chat_rooms_),
      kicked_(from.kicked_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header_state()) {
    header_state_ = new ::CChatRoomGroupHeaderState(*from.header_state_);
  } else {
    header_state_ = nullptr;
  }
  default_chat_id_ = from.default_chat_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoomGroupState)
}

inline void CChatRoomGroupState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_chat_id_) -
    reinterpret_cast<char*>(&header_state_)) + sizeof(default_chat_id_));
}

CChatRoomGroupState::~CChatRoomGroupState() {
  // @@protoc_insertion_point(destructor:CChatRoomGroupState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomGroupState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_state_;
}

void CChatRoomGroupState::ArenaDtor(void* object) {
  CChatRoomGroupState* _this = reinterpret_cast< CChatRoomGroupState* >(object);
  (void)_this;
}
void CChatRoomGroupState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomGroupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomGroupState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomGroupState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  chat_rooms_.Clear();
  kicked_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_state_ != nullptr);
    header_state_->Clear();
  }
  default_chat_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomGroupState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoomGroupHeaderState header_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoomMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_chat_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_default_chat_id(&has_bits);
          default_chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoomState chat_rooms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoomMember kicked = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kicked(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomGroupState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomGroupState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupHeaderState header_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header_state(this), target, stream);
  }

  // repeated .CChatRoomMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  // optional uint64 default_chat_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_default_chat_id(), target);
  }

  // repeated .CChatRoomState chat_rooms = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chat_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_chat_rooms(i), target, stream);
  }

  // repeated .CChatRoomMember kicked = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kicked_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_kicked(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomGroupState)
  return target;
}

size_t CChatRoomGroupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomGroupState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoomMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CChatRoomState chat_rooms = 5;
  total_size += 1UL * this->_internal_chat_rooms_size();
  for (const auto& msg : this->chat_rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CChatRoomMember kicked = 7;
  total_size += 1UL * this->_internal_kicked_size();
  for (const auto& msg : this->kicked_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CChatRoomGroupHeaderState header_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_state_);
    }

    // optional uint64 default_chat_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_default_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomGroupState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomGroupState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomGroupState::GetClassData() const { return &_class_data_; }

void CChatRoomGroupState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomGroupState *>(to)->MergeFrom(
      static_cast<const CChatRoomGroupState &>(from));
}


void CChatRoomGroupState::MergeFrom(const CChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  chat_rooms_.MergeFrom(from.chat_rooms_);
  kicked_.MergeFrom(from.kicked_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header_state()->::CChatRoomGroupHeaderState::MergeFrom(from._internal_header_state());
    }
    if (cached_has_bits & 0x00000002u) {
      default_chat_id_ = from.default_chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomGroupState::CopyFrom(const CChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomGroupState::IsInitialized() const {
  return true;
}

void CChatRoomGroupState::InternalSwap(CChatRoomGroupState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  chat_rooms_.InternalSwap(&other->chat_rooms_);
  kicked_.InternalSwap(&other->kicked_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomGroupState, default_chat_id_)
      + sizeof(CChatRoomGroupState::default_chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomGroupState, header_state_)>(
          reinterpret_cast<char*>(&header_state_),
          reinterpret_cast<char*>(&other->header_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomGroupState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[9]);
}

// ===================================================================

class CUserChatRoomState::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserChatRoomState>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_joined(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_last_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desktop_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mobile_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_last_mention(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unread_indicator_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_first_unread(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CUserChatRoomState::CUserChatRoomState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CUserChatRoomState)
}
CUserChatRoomState::CUserChatRoomState(const CUserChatRoomState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_first_unread_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(time_first_unread_));
  // @@protoc_insertion_point(copy_constructor:CUserChatRoomState)
}

inline void CUserChatRoomState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_first_unread_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(time_first_unread_));
}

CUserChatRoomState::~CUserChatRoomState() {
  // @@protoc_insertion_point(destructor:CUserChatRoomState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CUserChatRoomState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CUserChatRoomState::ArenaDtor(void* object) {
  CUserChatRoomState* _this = reinterpret_cast< CUserChatRoomState* >(object);
  (void)_this;
}
void CUserChatRoomState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserChatRoomState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserChatRoomState::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserChatRoomState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_first_unread_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(time_first_unread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserChatRoomState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_joined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_joined(&has_bits);
          time_joined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_ack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_last_ack(&has_bits);
          time_last_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_desktop_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_mobile_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_mention = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_time_last_mention(&has_bits);
          time_last_mention_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unread_indicator_muted = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unread_indicator_muted(&has_bits);
          unread_indicator_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_first_unread = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_time_first_unread(&has_bits);
          time_first_unread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUserChatRoomState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserChatRoomState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_joined(), target);
  }

  // optional uint32 time_last_ack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_last_ack(), target);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mobile_notification_level(), target);
  }

  // optional uint32 time_last_mention = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_last_mention(), target);
  }

  // optional bool unread_indicator_muted = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_unread_indicator_muted(), target);
  }

  // optional uint32 time_first_unread = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_time_first_unread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserChatRoomState)
  return target;
}

size_t CUserChatRoomState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserChatRoomState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 chat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 time_joined = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_joined());
    }

    // optional uint32 time_last_ack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_ack());
    }

    // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mobile_notification_level());
    }

    // optional uint32 time_last_mention = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_mention());
    }

    // optional bool unread_indicator_muted = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_first_unread = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_first_unread());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUserChatRoomState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CUserChatRoomState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUserChatRoomState::GetClassData() const { return &_class_data_; }

void CUserChatRoomState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CUserChatRoomState *>(to)->MergeFrom(
      static_cast<const CUserChatRoomState &>(from));
}


void CUserChatRoomState::MergeFrom(const CUserChatRoomState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserChatRoomState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_last_ack_ = from.time_last_ack_;
    }
    if (cached_has_bits & 0x00000008u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_last_mention_ = from.time_last_mention_;
    }
    if (cached_has_bits & 0x00000040u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_first_unread_ = from.time_first_unread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUserChatRoomState::CopyFrom(const CUserChatRoomState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserChatRoomState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserChatRoomState::IsInitialized() const {
  return true;
}

void CUserChatRoomState::InternalSwap(CUserChatRoomState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserChatRoomState, time_first_unread_)
      + sizeof(CUserChatRoomState::time_first_unread_)
      - PROTOBUF_FIELD_OFFSET(CUserChatRoomState, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserChatRoomState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[10]);
}

// ===================================================================

class CUserChatRoomGroupState::_Internal {
 public:
  using HasBits = decltype(std::declval<CUserChatRoomGroupState>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_joined(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desktop_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mobile_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_last_group_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unread_indicator_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CUserChatRoomGroupState::CUserChatRoomGroupState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_chat_room_state_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CUserChatRoomGroupState)
}
CUserChatRoomGroupState::CUserChatRoomGroupState(const CUserChatRoomGroupState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      user_chat_room_state_(from.user_chat_room_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(unread_indicator_muted_));
  // @@protoc_insertion_point(copy_constructor:CUserChatRoomGroupState)
}

inline void CUserChatRoomGroupState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(unread_indicator_muted_));
}

CUserChatRoomGroupState::~CUserChatRoomGroupState() {
  // @@protoc_insertion_point(destructor:CUserChatRoomGroupState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CUserChatRoomGroupState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CUserChatRoomGroupState::ArenaDtor(void* object) {
  CUserChatRoomGroupState* _this = reinterpret_cast< CUserChatRoomGroupState* >(object);
  (void)_this;
}
void CUserChatRoomGroupState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUserChatRoomGroupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUserChatRoomGroupState::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserChatRoomGroupState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_chat_room_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_indicator_muted_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(unread_indicator_muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUserChatRoomGroupState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_joined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_joined(&has_bits);
          time_joined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CUserChatRoomState user_chat_room_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_chat_room_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_desktop_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_mobile_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_group_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_time_last_group_ack(&has_bits);
          time_last_group_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unread_indicator_muted = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_unread_indicator_muted(&has_bits);
          unread_indicator_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUserChatRoomGroupState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUserChatRoomGroupState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_joined(), target);
  }

  // repeated .CUserChatRoomState user_chat_room_state = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_chat_room_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_user_chat_room_state(i), target, stream);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mobile_notification_level(), target);
  }

  // optional uint32 time_last_group_ack = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_last_group_ack(), target);
  }

  // optional bool unread_indicator_muted = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_unread_indicator_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserChatRoomGroupState)
  return target;
}

size_t CUserChatRoomGroupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUserChatRoomGroupState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CUserChatRoomState user_chat_room_state = 3;
  total_size += 1UL * this->_internal_user_chat_room_state_size();
  for (const auto& msg : this->user_chat_room_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint32 time_joined = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_joined());
    }

    // optional .EChatRoomNotificationLevel desktop_notification_level = 4 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 5 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mobile_notification_level());
    }

    // optional uint32 time_last_group_ack = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_group_ack());
    }

    // optional bool unread_indicator_muted = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUserChatRoomGroupState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CUserChatRoomGroupState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUserChatRoomGroupState::GetClassData() const { return &_class_data_; }

void CUserChatRoomGroupState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CUserChatRoomGroupState *>(to)->MergeFrom(
      static_cast<const CUserChatRoomGroupState &>(from));
}


void CUserChatRoomGroupState::MergeFrom(const CUserChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUserChatRoomGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_chat_room_state_.MergeFrom(from.user_chat_room_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000004u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_last_group_ack_ = from.time_last_group_ack_;
    }
    if (cached_has_bits & 0x00000020u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUserChatRoomGroupState::CopyFrom(const CUserChatRoomGroupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserChatRoomGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserChatRoomGroupState::IsInitialized() const {
  return true;
}

void CUserChatRoomGroupState::InternalSwap(CUserChatRoomGroupState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_chat_room_state_.InternalSwap(&other->user_chat_room_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUserChatRoomGroupState, unread_indicator_muted_)
      + sizeof(CUserChatRoomGroupState::unread_indicator_muted_)
      - PROTOBUF_FIELD_OFFSET(CUserChatRoomGroupState, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUserChatRoomGroupState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[11]);
}

// ===================================================================

class CChatRoom_CreateChatRoomGroup_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateChatRoomGroup_Response>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CChatRoomGroupState& state(const CChatRoom_CreateChatRoomGroup_Response* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CUserChatRoomGroupState& user_chat_state(const CChatRoom_CreateChatRoomGroup_Response* msg);
  static void set_has_user_chat_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CChatRoomGroupState&
CChatRoom_CreateChatRoomGroup_Response::_Internal::state(const CChatRoom_CreateChatRoomGroup_Response* msg) {
  return *msg->state_;
}
const ::CUserChatRoomGroupState&
CChatRoom_CreateChatRoomGroup_Response::_Internal::user_chat_state(const CChatRoom_CreateChatRoomGroup_Response* msg) {
  return *msg->user_chat_state_;
}
CChatRoom_CreateChatRoomGroup_Response::CChatRoom_CreateChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateChatRoomGroup_Response)
}
CChatRoom_CreateChatRoomGroup_Response::CChatRoom_CreateChatRoomGroup_Response(const CChatRoom_CreateChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CChatRoomGroupState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_user_chat_state()) {
    user_chat_state_ = new ::CUserChatRoomGroupState(*from.user_chat_state_);
  } else {
    user_chat_state_ = nullptr;
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoomGroup_Response)
}

inline void CChatRoom_CreateChatRoomGroup_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_group_id_) -
    reinterpret_cast<char*>(&state_)) + sizeof(chat_group_id_));
}

CChatRoom_CreateChatRoomGroup_Response::~CChatRoom_CreateChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoomGroup_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateChatRoomGroup_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete user_chat_state_;
}

void CChatRoom_CreateChatRoomGroup_Response::ArenaDtor(void* object) {
  CChatRoom_CreateChatRoomGroup_Response* _this = reinterpret_cast< CChatRoom_CreateChatRoomGroup_Response* >(object);
  (void)_this;
}
void CChatRoom_CreateChatRoomGroup_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_chat_state_ != nullptr);
      user_chat_state_->Clear();
    }
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateChatRoomGroup_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoomGroupState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CUserChatRoomGroupState user_chat_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_chat_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateChatRoomGroup_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional .CChatRoomGroupState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // optional .CUserChatRoomGroupState user_chat_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_chat_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_CreateChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoomGroup_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CChatRoomGroupState state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .CUserChatRoomGroupState user_chat_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_chat_state_);
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateChatRoomGroup_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateChatRoomGroup_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateChatRoomGroup_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateChatRoomGroup_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateChatRoomGroup_Response &>(from));
}


void CChatRoom_CreateChatRoomGroup_Response::MergeFrom(const CChatRoom_CreateChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_state()->::CChatRoomGroupState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_user_chat_state()->::CUserChatRoomGroupState::MergeFrom(from._internal_user_chat_state());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateChatRoomGroup_Response::CopyFrom(const CChatRoom_CreateChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoomGroup_Response::InternalSwap(CChatRoom_CreateChatRoomGroup_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_CreateChatRoomGroup_Response, chat_group_id_)
      + sizeof(CChatRoom_CreateChatRoomGroup_Response::chat_group_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_CreateChatRoomGroup_Response, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[12]);
}

// ===================================================================

class CChatRoom_SaveChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SaveChatRoomGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_SaveChatRoomGroup_Request::CChatRoom_SaveChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SaveChatRoomGroup_Request)
}
CChatRoom_SaveChatRoomGroup_Request::CChatRoom_SaveChatRoomGroup_Request(const CChatRoom_SaveChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SaveChatRoomGroup_Request)
}

inline void CChatRoom_SaveChatRoomGroup_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_id_ = uint64_t{0u};
}

CChatRoom_SaveChatRoomGroup_Request::~CChatRoom_SaveChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SaveChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SaveChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SaveChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_SaveChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_SaveChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_SaveChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SaveChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SaveChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SaveChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SaveChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_SaveChatRoomGroup_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SaveChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SaveChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_SaveChatRoomGroup_Request.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SaveChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_SaveChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SaveChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SaveChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SaveChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SaveChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SaveChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SaveChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SaveChatRoomGroup_Request &>(from));
}


void CChatRoom_SaveChatRoomGroup_Request::MergeFrom(const CChatRoom_SaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SaveChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SaveChatRoomGroup_Request::CopyFrom(const CChatRoom_SaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SaveChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SaveChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SaveChatRoomGroup_Request::InternalSwap(CChatRoom_SaveChatRoomGroup_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SaveChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[13]);
}

// ===================================================================

class CChatRoom_SaveChatRoomGroup_Response::_Internal {
 public:
};

CChatRoom_SaveChatRoomGroup_Response::CChatRoom_SaveChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SaveChatRoomGroup_Response)
}
CChatRoom_SaveChatRoomGroup_Response::CChatRoom_SaveChatRoomGroup_Response(const CChatRoom_SaveChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SaveChatRoomGroup_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SaveChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SaveChatRoomGroup_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SaveChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[14]);
}

// ===================================================================

class CChatRoom_RenameChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_RenameChatRoomGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_RenameChatRoomGroup_Request::CChatRoom_RenameChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RenameChatRoomGroup_Request)
}
CChatRoom_RenameChatRoomGroup_Request::CChatRoom_RenameChatRoomGroup_Request(const CChatRoom_RenameChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoomGroup_Request)
}

inline void CChatRoom_RenameChatRoomGroup_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_id_ = uint64_t{0u};
}

CChatRoom_RenameChatRoomGroup_Request::~CChatRoom_RenameChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_RenameChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_RenameChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_RenameChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_RenameChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_RenameChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_RenameChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_RenameChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_RenameChatRoomGroup_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_RenameChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoomGroup_Request.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_RenameChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RenameChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_RenameChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RenameChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_RenameChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_RenameChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_RenameChatRoomGroup_Request &>(from));
}


void CChatRoom_RenameChatRoomGroup_Request::MergeFrom(const CChatRoom_RenameChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_RenameChatRoomGroup_Request::CopyFrom(const CChatRoom_RenameChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RenameChatRoomGroup_Request::InternalSwap(CChatRoom_RenameChatRoomGroup_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RenameChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[15]);
}

// ===================================================================

class CChatRoom_RenameChatRoomGroup_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_RenameChatRoomGroup_Response>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_RenameChatRoomGroup_Response::CChatRoom_RenameChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RenameChatRoomGroup_Response)
}
CChatRoom_RenameChatRoomGroup_Response::CChatRoom_RenameChatRoomGroup_Response(const CChatRoom_RenameChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoomGroup_Response)
}

inline void CChatRoom_RenameChatRoomGroup_Response::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CChatRoom_RenameChatRoomGroup_Response::~CChatRoom_RenameChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameChatRoomGroup_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_RenameChatRoomGroup_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameChatRoomGroup_Response::ArenaDtor(void* object) {
  CChatRoom_RenameChatRoomGroup_Response* _this = reinterpret_cast< CChatRoom_RenameChatRoomGroup_Response* >(object);
  (void)_this;
}
void CChatRoom_RenameChatRoomGroup_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_RenameChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_RenameChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_RenameChatRoomGroup_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_RenameChatRoomGroup_Response.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_RenameChatRoomGroup_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoomGroup_Response.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_RenameChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameChatRoomGroup_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RenameChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_RenameChatRoomGroup_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RenameChatRoomGroup_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_RenameChatRoomGroup_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_RenameChatRoomGroup_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_RenameChatRoomGroup_Response &>(from));
}


void CChatRoom_RenameChatRoomGroup_Response::MergeFrom(const CChatRoom_RenameChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_RenameChatRoomGroup_Response::CopyFrom(const CChatRoom_RenameChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_RenameChatRoomGroup_Response::InternalSwap(CChatRoom_RenameChatRoomGroup_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RenameChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[16]);
}

// ===================================================================

class CChatRoom_SetChatRoomGroupTagline_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetChatRoomGroupTagline_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tagline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_SetChatRoomGroupTagline_Request::CChatRoom_SetChatRoomGroupTagline_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetChatRoomGroupTagline_Request)
}
CChatRoom_SetChatRoomGroupTagline_Request::CChatRoom_SetChatRoomGroupTagline_Request(const CChatRoom_SetChatRoomGroupTagline_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tagline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tagline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tagline()) {
    tagline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tagline(), 
      GetArenaForAllocation());
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupTagline_Request)
}

inline void CChatRoom_SetChatRoomGroupTagline_Request::SharedCtor() {
tagline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tagline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_id_ = uint64_t{0u};
}

CChatRoom_SetChatRoomGroupTagline_Request::~CChatRoom_SetChatRoomGroupTagline_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupTagline_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetChatRoomGroupTagline_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tagline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SetChatRoomGroupTagline_Request::ArenaDtor(void* object) {
  CChatRoom_SetChatRoomGroupTagline_Request* _this = reinterpret_cast< CChatRoom_SetChatRoomGroupTagline_Request* >(object);
  (void)_this;
}
void CChatRoom_SetChatRoomGroupTagline_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetChatRoomGroupTagline_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetChatRoomGroupTagline_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupTagline_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tagline_.ClearNonDefaultToEmpty();
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetChatRoomGroupTagline_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tagline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tagline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_SetChatRoomGroupTagline_Request.tagline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetChatRoomGroupTagline_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupTagline_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string tagline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tagline().data(), static_cast<int>(this->_internal_tagline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_SetChatRoomGroupTagline_Request.tagline");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tagline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupTagline_Request)
  return target;
}

size_t CChatRoom_SetChatRoomGroupTagline_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupTagline_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tagline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tagline());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetChatRoomGroupTagline_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetChatRoomGroupTagline_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetChatRoomGroupTagline_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SetChatRoomGroupTagline_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetChatRoomGroupTagline_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetChatRoomGroupTagline_Request &>(from));
}


void CChatRoom_SetChatRoomGroupTagline_Request::MergeFrom(const CChatRoom_SetChatRoomGroupTagline_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupTagline_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tagline(from._internal_tagline());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetChatRoomGroupTagline_Request::CopyFrom(const CChatRoom_SetChatRoomGroupTagline_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupTagline_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupTagline_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupTagline_Request::InternalSwap(CChatRoom_SetChatRoomGroupTagline_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tagline_, lhs_arena,
      &other->tagline_, rhs_arena
  );
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetChatRoomGroupTagline_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[17]);
}

// ===================================================================

class CChatRoom_SetChatRoomGroupTagline_Response::_Internal {
 public:
};

CChatRoom_SetChatRoomGroupTagline_Response::CChatRoom_SetChatRoomGroupTagline_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetChatRoomGroupTagline_Response)
}
CChatRoom_SetChatRoomGroupTagline_Response::CChatRoom_SetChatRoomGroupTagline_Response(const CChatRoom_SetChatRoomGroupTagline_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupTagline_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetChatRoomGroupTagline_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetChatRoomGroupTagline_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetChatRoomGroupTagline_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[18]);
}

// ===================================================================

class CChatRoom_SetChatRoomGroupAvatar_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetChatRoomGroupAvatar_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatar_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_SetChatRoomGroupAvatar_Request::CChatRoom_SetChatRoomGroupAvatar_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetChatRoomGroupAvatar_Request)
}
CChatRoom_SetChatRoomGroupAvatar_Request::CChatRoom_SetChatRoomGroupAvatar_Request(const CChatRoom_SetChatRoomGroupAvatar_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  avatar_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_sha()) {
    avatar_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_sha(), 
      GetArenaForAllocation());
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupAvatar_Request)
}

inline void CChatRoom_SetChatRoomGroupAvatar_Request::SharedCtor() {
avatar_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_id_ = uint64_t{0u};
}

CChatRoom_SetChatRoomGroupAvatar_Request::~CChatRoom_SetChatRoomGroupAvatar_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupAvatar_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetChatRoomGroupAvatar_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  avatar_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SetChatRoomGroupAvatar_Request::ArenaDtor(void* object) {
  CChatRoom_SetChatRoomGroupAvatar_Request* _this = reinterpret_cast< CChatRoom_SetChatRoomGroupAvatar_Request* >(object);
  (void)_this;
}
void CChatRoom_SetChatRoomGroupAvatar_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetChatRoomGroupAvatar_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetChatRoomGroupAvatar_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatar_sha_.ClearNonDefaultToEmpty();
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetChatRoomGroupAvatar_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes avatar_sha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_avatar_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetChatRoomGroupAvatar_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional bytes avatar_sha = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_avatar_sha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupAvatar_Request)
  return target;
}

size_t CChatRoom_SetChatRoomGroupAvatar_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes avatar_sha = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_avatar_sha());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetChatRoomGroupAvatar_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetChatRoomGroupAvatar_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetChatRoomGroupAvatar_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SetChatRoomGroupAvatar_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetChatRoomGroupAvatar_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetChatRoomGroupAvatar_Request &>(from));
}


void CChatRoom_SetChatRoomGroupAvatar_Request::MergeFrom(const CChatRoom_SetChatRoomGroupAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_avatar_sha(from._internal_avatar_sha());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetChatRoomGroupAvatar_Request::CopyFrom(const CChatRoom_SetChatRoomGroupAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupAvatar_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupAvatar_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupAvatar_Request::InternalSwap(CChatRoom_SetChatRoomGroupAvatar_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_sha_, lhs_arena,
      &other->avatar_sha_, rhs_arena
  );
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetChatRoomGroupAvatar_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[19]);
}

// ===================================================================

class CChatRoom_SetChatRoomGroupAvatar_Response::_Internal {
 public:
};

CChatRoom_SetChatRoomGroupAvatar_Response::CChatRoom_SetChatRoomGroupAvatar_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetChatRoomGroupAvatar_Response)
}
CChatRoom_SetChatRoomGroupAvatar_Response::CChatRoom_SetChatRoomGroupAvatar_Response(const CChatRoom_SetChatRoomGroupAvatar_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupAvatar_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetChatRoomGroupAvatar_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetChatRoomGroupAvatar_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetChatRoomGroupAvatar_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[20]);
}

// ===================================================================

class CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetChatRoomGroupWatchingBroadcast_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_watching_broadcast_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_watching_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
}
CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_accountid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(watching_broadcast_accountid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
}

inline void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_accountid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(watching_broadcast_accountid_));
}

CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::~CChatRoom_SetChatRoomGroupWatchingBroadcast_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::ArenaDtor(void* object) {
  CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* _this = reinterpret_cast< CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* >(object);
  (void)_this;
}
void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_accountid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(watching_broadcast_accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watching_broadcast_accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_watching_broadcast_accountid(&has_bits);
          watching_broadcast_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 watching_broadcast_channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_watching_broadcast_channel_id(&has_bits);
          watching_broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint32 watching_broadcast_accountid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_watching_broadcast_accountid(), target);
  }

  // optional uint64 watching_broadcast_channel_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_watching_broadcast_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  return target;
}

size_t CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 watching_broadcast_channel_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_watching_broadcast_channel_id());
    }

    // optional uint32 watching_broadcast_accountid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_watching_broadcast_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetChatRoomGroupWatchingBroadcast_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request &>(from));
}


void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::MergeFrom(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      watching_broadcast_channel_id_ = from.watching_broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::CopyFrom(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::InternalSwap(CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, watching_broadcast_accountid_)
      + sizeof(CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::watching_broadcast_accountid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SetChatRoomGroupWatchingBroadcast_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[21]);
}

// ===================================================================

class CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::_Internal {
 public:
};

CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
}
CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response(const CChatRoom_SetChatRoomGroupWatchingBroadcast_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[22]);
}

// ===================================================================

class CChatRoom_JoinMiniGameForChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_JoinMiniGameForChatRoomGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_JoinMiniGameForChatRoomGroup_Request::CChatRoom_JoinMiniGameForChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
}
CChatRoom_JoinMiniGameForChatRoomGroup_Request::CChatRoom_JoinMiniGameForChatRoomGroup_Request(const CChatRoom_JoinMiniGameForChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
}

inline void CChatRoom_JoinMiniGameForChatRoomGroup_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_JoinMiniGameForChatRoomGroup_Request::~CChatRoom_JoinMiniGameForChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_JoinMiniGameForChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_JoinMiniGameForChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_JoinMiniGameForChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_JoinMiniGameForChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_JoinMiniGameForChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_JoinMiniGameForChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_JoinMiniGameForChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_JoinMiniGameForChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_JoinMiniGameForChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_JoinMiniGameForChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_JoinMiniGameForChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_JoinMiniGameForChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_JoinMiniGameForChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_JoinMiniGameForChatRoomGroup_Request &>(from));
}


void CChatRoom_JoinMiniGameForChatRoomGroup_Request::MergeFrom(const CChatRoom_JoinMiniGameForChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Request::CopyFrom(const CChatRoom_JoinMiniGameForChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinMiniGameForChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinMiniGameForChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Request::InternalSwap(CChatRoom_JoinMiniGameForChatRoomGroup_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_JoinMiniGameForChatRoomGroup_Request, chat_id_)
      + sizeof(CChatRoom_JoinMiniGameForChatRoomGroup_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_JoinMiniGameForChatRoomGroup_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_JoinMiniGameForChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[23]);
}

// ===================================================================

class CChatRoom_JoinMiniGameForChatRoomGroup_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_JoinMiniGameForChatRoomGroup_Response>()._has_bits_);
  static void set_has_minigame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_JoinMiniGameForChatRoomGroup_Response::CChatRoom_JoinMiniGameForChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
}
CChatRoom_JoinMiniGameForChatRoomGroup_Response::CChatRoom_JoinMiniGameForChatRoomGroup_Response(const CChatRoom_JoinMiniGameForChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  minigame_id_ = from.minigame_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
}

inline void CChatRoom_JoinMiniGameForChatRoomGroup_Response::SharedCtor() {
minigame_id_ = uint64_t{0u};
}

CChatRoom_JoinMiniGameForChatRoomGroup_Response::~CChatRoom_JoinMiniGameForChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_JoinMiniGameForChatRoomGroup_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Response::ArenaDtor(void* object) {
  CChatRoom_JoinMiniGameForChatRoomGroup_Response* _this = reinterpret_cast< CChatRoom_JoinMiniGameForChatRoomGroup_Response* >(object);
  (void)_this;
}
void CChatRoom_JoinMiniGameForChatRoomGroup_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_JoinMiniGameForChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minigame_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_JoinMiniGameForChatRoomGroup_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 minigame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_minigame_id(&has_bits);
          minigame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_JoinMiniGameForChatRoomGroup_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 minigame_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_minigame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_JoinMiniGameForChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 minigame_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_minigame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_JoinMiniGameForChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_JoinMiniGameForChatRoomGroup_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_JoinMiniGameForChatRoomGroup_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_JoinMiniGameForChatRoomGroup_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_JoinMiniGameForChatRoomGroup_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_JoinMiniGameForChatRoomGroup_Response &>(from));
}


void CChatRoom_JoinMiniGameForChatRoomGroup_Response::MergeFrom(const CChatRoom_JoinMiniGameForChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_minigame_id()) {
    _internal_set_minigame_id(from._internal_minigame_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Response::CopyFrom(const CChatRoom_JoinMiniGameForChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinMiniGameForChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinMiniGameForChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_JoinMiniGameForChatRoomGroup_Response::InternalSwap(CChatRoom_JoinMiniGameForChatRoomGroup_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(minigame_id_, other->minigame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_JoinMiniGameForChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[24]);
}

// ===================================================================

class CChatRoom_EndMiniGameForChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_EndMiniGameForChatRoomGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minigame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_EndMiniGameForChatRoomGroup_Request::CChatRoom_EndMiniGameForChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_EndMiniGameForChatRoomGroup_Request)
}
CChatRoom_EndMiniGameForChatRoomGroup_Request::CChatRoom_EndMiniGameForChatRoomGroup_Request(const CChatRoom_EndMiniGameForChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&minigame_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(minigame_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_EndMiniGameForChatRoomGroup_Request)
}

inline void CChatRoom_EndMiniGameForChatRoomGroup_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minigame_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(minigame_id_));
}

CChatRoom_EndMiniGameForChatRoomGroup_Request::~CChatRoom_EndMiniGameForChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_EndMiniGameForChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_EndMiniGameForChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_EndMiniGameForChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_EndMiniGameForChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_EndMiniGameForChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_EndMiniGameForChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_EndMiniGameForChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_EndMiniGameForChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_EndMiniGameForChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minigame_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(minigame_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_EndMiniGameForChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 minigame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minigame_id(&has_bits);
          minigame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_EndMiniGameForChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_EndMiniGameForChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional uint64 minigame_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_minigame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_EndMiniGameForChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_EndMiniGameForChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_EndMiniGameForChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint64 minigame_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_minigame_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_EndMiniGameForChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_EndMiniGameForChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_EndMiniGameForChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_EndMiniGameForChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_EndMiniGameForChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_EndMiniGameForChatRoomGroup_Request &>(from));
}


void CChatRoom_EndMiniGameForChatRoomGroup_Request::MergeFrom(const CChatRoom_EndMiniGameForChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_EndMiniGameForChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      minigame_id_ = from.minigame_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_EndMiniGameForChatRoomGroup_Request::CopyFrom(const CChatRoom_EndMiniGameForChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_EndMiniGameForChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_EndMiniGameForChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_EndMiniGameForChatRoomGroup_Request::InternalSwap(CChatRoom_EndMiniGameForChatRoomGroup_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_EndMiniGameForChatRoomGroup_Request, minigame_id_)
      + sizeof(CChatRoom_EndMiniGameForChatRoomGroup_Request::minigame_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_EndMiniGameForChatRoomGroup_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_EndMiniGameForChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[25]);
}

// ===================================================================

class CChatRoom_EndMiniGameForChatRoomGroup_Response::_Internal {
 public:
};

CChatRoom_EndMiniGameForChatRoomGroup_Response::CChatRoom_EndMiniGameForChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_EndMiniGameForChatRoomGroup_Response)
}
CChatRoom_EndMiniGameForChatRoomGroup_Response::CChatRoom_EndMiniGameForChatRoomGroup_Response(const CChatRoom_EndMiniGameForChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_EndMiniGameForChatRoomGroup_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_EndMiniGameForChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_EndMiniGameForChatRoomGroup_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_EndMiniGameForChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[26]);
}

// ===================================================================

class CChatRoom_MuteUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_MuteUser_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_MuteUser_Request::CChatRoom_MuteUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_MuteUser_Request)
}
CChatRoom_MuteUser_Request::CChatRoom_MuteUser_Request(const CChatRoom_MuteUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_MuteUser_Request)
}

inline void CChatRoom_MuteUser_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
}

CChatRoom_MuteUser_Request::~CChatRoom_MuteUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_MuteUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_MuteUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_MuteUser_Request::ArenaDtor(void* object) {
  CChatRoom_MuteUser_Request* _this = reinterpret_cast< CChatRoom_MuteUser_Request* >(object);
  (void)_this;
}
void CChatRoom_MuteUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_MuteUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_MuteUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_MuteUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_MuteUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 expiration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_expiration(&has_bits);
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_MuteUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_MuteUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional int32 expiration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_MuteUser_Request)
  return target;
}

size_t CChatRoom_MuteUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_MuteUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 expiration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_expiration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_MuteUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_MuteUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_MuteUser_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_MuteUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_MuteUser_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_MuteUser_Request &>(from));
}


void CChatRoom_MuteUser_Request::MergeFrom(const CChatRoom_MuteUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_MuteUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      expiration_ = from.expiration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_MuteUser_Request::CopyFrom(const CChatRoom_MuteUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_MuteUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_MuteUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_MuteUser_Request::InternalSwap(CChatRoom_MuteUser_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_MuteUser_Request, expiration_)
      + sizeof(CChatRoom_MuteUser_Request::expiration_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_MuteUser_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_MuteUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[27]);
}

// ===================================================================

class CChatRoom_MuteUser_Response::_Internal {
 public:
};

CChatRoom_MuteUser_Response::CChatRoom_MuteUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_MuteUser_Response)
}
CChatRoom_MuteUser_Response::CChatRoom_MuteUser_Response(const CChatRoom_MuteUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_MuteUser_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_MuteUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_MuteUser_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_MuteUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[28]);
}

// ===================================================================

class CChatRoom_KickUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_KickUser_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_KickUser_Request::CChatRoom_KickUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_KickUser_Request)
}
CChatRoom_KickUser_Request::CChatRoom_KickUser_Request(const CChatRoom_KickUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_KickUser_Request)
}

inline void CChatRoom_KickUser_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
}

CChatRoom_KickUser_Request::~CChatRoom_KickUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_KickUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_KickUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_KickUser_Request::ArenaDtor(void* object) {
  CChatRoom_KickUser_Request* _this = reinterpret_cast< CChatRoom_KickUser_Request* >(object);
  (void)_this;
}
void CChatRoom_KickUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_KickUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_KickUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_KickUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(expiration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_KickUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 expiration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_expiration(&has_bits);
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_KickUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_KickUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional int32 expiration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_KickUser_Request)
  return target;
}

size_t CChatRoom_KickUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_KickUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 expiration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_expiration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_KickUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_KickUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_KickUser_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_KickUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_KickUser_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_KickUser_Request &>(from));
}


void CChatRoom_KickUser_Request::MergeFrom(const CChatRoom_KickUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_KickUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      expiration_ = from.expiration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_KickUser_Request::CopyFrom(const CChatRoom_KickUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_KickUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_KickUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_KickUser_Request::InternalSwap(CChatRoom_KickUser_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_KickUser_Request, expiration_)
      + sizeof(CChatRoom_KickUser_Request::expiration_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_KickUser_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_KickUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[29]);
}

// ===================================================================

class CChatRoom_KickUser_Response::_Internal {
 public:
};

CChatRoom_KickUser_Response::CChatRoom_KickUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_KickUser_Response)
}
CChatRoom_KickUser_Response::CChatRoom_KickUser_Response(const CChatRoom_KickUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_KickUser_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_KickUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_KickUser_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_KickUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[30]);
}

// ===================================================================

class CChatRoom_SetUserBanState_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetUserBanState_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ban_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_SetUserBanState_Request::CChatRoom_SetUserBanState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetUserBanState_Request)
}
CChatRoom_SetUserBanState_Request::CChatRoom_SetUserBanState_Request(const CChatRoom_SetUserBanState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_state_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ban_state_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserBanState_Request)
}

inline void CChatRoom_SetUserBanState_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ban_state_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ban_state_));
}

CChatRoom_SetUserBanState_Request::~CChatRoom_SetUserBanState_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserBanState_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetUserBanState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetUserBanState_Request::ArenaDtor(void* object) {
  CChatRoom_SetUserBanState_Request* _this = reinterpret_cast< CChatRoom_SetUserBanState_Request* >(object);
  (void)_this;
}
void CChatRoom_SetUserBanState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetUserBanState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetUserBanState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserBanState_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ban_state_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ban_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetUserBanState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool ban_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ban_state(&has_bits);
          ban_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetUserBanState_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserBanState_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional bool ban_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ban_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserBanState_Request)
  return target;
}

size_t CChatRoom_SetUserBanState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserBanState_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool ban_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetUserBanState_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetUserBanState_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetUserBanState_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SetUserBanState_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetUserBanState_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetUserBanState_Request &>(from));
}


void CChatRoom_SetUserBanState_Request::MergeFrom(const CChatRoom_SetUserBanState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserBanState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ban_state_ = from.ban_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetUserBanState_Request::CopyFrom(const CChatRoom_SetUserBanState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserBanState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserBanState_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserBanState_Request::InternalSwap(CChatRoom_SetUserBanState_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserBanState_Request, ban_state_)
      + sizeof(CChatRoom_SetUserBanState_Request::ban_state_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserBanState_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetUserBanState_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[31]);
}

// ===================================================================

class CChatRoom_SetUserBanState_Response::_Internal {
 public:
};

CChatRoom_SetUserBanState_Response::CChatRoom_SetUserBanState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetUserBanState_Response)
}
CChatRoom_SetUserBanState_Response::CChatRoom_SetUserBanState_Response(const CChatRoom_SetUserBanState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserBanState_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetUserBanState_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetUserBanState_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetUserBanState_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[32]);
}

// ===================================================================

class CChatRoom_RevokeInvite_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_RevokeInvite_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_RevokeInvite_Request::CChatRoom_RevokeInvite_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RevokeInvite_Request)
}
CChatRoom_RevokeInvite_Request::CChatRoom_RevokeInvite_Request(const CChatRoom_RevokeInvite_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RevokeInvite_Request)
}

inline void CChatRoom_RevokeInvite_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_RevokeInvite_Request::~CChatRoom_RevokeInvite_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RevokeInvite_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_RevokeInvite_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_RevokeInvite_Request::ArenaDtor(void* object) {
  CChatRoom_RevokeInvite_Request* _this = reinterpret_cast< CChatRoom_RevokeInvite_Request* >(object);
  (void)_this;
}
void CChatRoom_RevokeInvite_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_RevokeInvite_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_RevokeInvite_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RevokeInvite_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_RevokeInvite_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_RevokeInvite_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RevokeInvite_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RevokeInvite_Request)
  return target;
}

size_t CChatRoom_RevokeInvite_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RevokeInvite_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RevokeInvite_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_RevokeInvite_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RevokeInvite_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_RevokeInvite_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_RevokeInvite_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_RevokeInvite_Request &>(from));
}


void CChatRoom_RevokeInvite_Request::MergeFrom(const CChatRoom_RevokeInvite_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RevokeInvite_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_RevokeInvite_Request::CopyFrom(const CChatRoom_RevokeInvite_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RevokeInvite_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RevokeInvite_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RevokeInvite_Request::InternalSwap(CChatRoom_RevokeInvite_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_RevokeInvite_Request, steamid_)
      + sizeof(CChatRoom_RevokeInvite_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_RevokeInvite_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RevokeInvite_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[33]);
}

// ===================================================================

class CChatRoom_RevokeInvite_Response::_Internal {
 public:
};

CChatRoom_RevokeInvite_Response::CChatRoom_RevokeInvite_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RevokeInvite_Response)
}
CChatRoom_RevokeInvite_Response::CChatRoom_RevokeInvite_Response(const CChatRoom_RevokeInvite_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RevokeInvite_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RevokeInvite_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RevokeInvite_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RevokeInvite_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[34]);
}

// ===================================================================

class CChatRoom_CreateRole_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateRole_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_CreateRole_Request::CChatRoom_CreateRole_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateRole_Request)
}
CChatRoom_CreateRole_Request::CChatRoom_CreateRole_Request(const CChatRoom_CreateRole_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateRole_Request)
}

inline void CChatRoom_CreateRole_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_id_ = uint64_t{0u};
}

CChatRoom_CreateRole_Request::~CChatRoom_CreateRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateRole_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateRole_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateRole_Request::ArenaDtor(void* object) {
  CChatRoom_CreateRole_Request* _this = reinterpret_cast< CChatRoom_CreateRole_Request* >(object);
  (void)_this;
}
void CChatRoom_CreateRole_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateRole_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateRole_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_CreateRole_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateRole_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateRole_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateRole_Request.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateRole_Request)
  return target;
}

size_t CChatRoom_CreateRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateRole_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateRole_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateRole_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateRole_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateRole_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateRole_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateRole_Request &>(from));
}


void CChatRoom_CreateRole_Request::MergeFrom(const CChatRoom_CreateRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateRole_Request::CopyFrom(const CChatRoom_CreateRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateRole_Request::InternalSwap(CChatRoom_CreateRole_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateRole_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[35]);
}

// ===================================================================

class CChatRoom_CreateRole_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateRole_Response>()._has_bits_);
  static const ::CChatRoleActions& actions(const CChatRoom_CreateRole_Response* msg);
  static void set_has_actions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CChatRoleActions&
CChatRoom_CreateRole_Response::_Internal::actions(const CChatRoom_CreateRole_Response* msg) {
  return *msg->actions_;
}
CChatRoom_CreateRole_Response::CChatRoom_CreateRole_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateRole_Response)
}
CChatRoom_CreateRole_Response::CChatRoom_CreateRole_Response(const CChatRoom_CreateRole_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actions()) {
    actions_ = new ::CChatRoleActions(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateRole_Response)
}

inline void CChatRoom_CreateRole_Response::SharedCtor() {
actions_ = nullptr;
}

CChatRoom_CreateRole_Response::~CChatRoom_CreateRole_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateRole_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateRole_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete actions_;
}

void CChatRoom_CreateRole_Response::ArenaDtor(void* object) {
  CChatRoom_CreateRole_Response* _this = reinterpret_cast< CChatRoom_CreateRole_Response* >(object);
  (void)_this;
}
void CChatRoom_CreateRole_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateRole_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateRole_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateRole_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(actions_ != nullptr);
    actions_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateRole_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoleActions actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateRole_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateRole_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoleActions actions = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::actions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateRole_Response)
  return target;
}

size_t CChatRoom_CreateRole_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateRole_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CChatRoleActions actions = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateRole_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateRole_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateRole_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateRole_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateRole_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateRole_Response &>(from));
}


void CChatRoom_CreateRole_Response::MergeFrom(const CChatRoom_CreateRole_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateRole_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_actions()) {
    _internal_mutable_actions()->::CChatRoleActions::MergeFrom(from._internal_actions());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateRole_Response::CopyFrom(const CChatRoom_CreateRole_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateRole_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateRole_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateRole_Response::InternalSwap(CChatRoom_CreateRole_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(actions_, other->actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateRole_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[36]);
}

// ===================================================================

class CChatRoom_GetRoles_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetRoles_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetRoles_Request::CChatRoom_GetRoles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetRoles_Request)
}
CChatRoom_GetRoles_Request::CChatRoom_GetRoles_Request(const CChatRoom_GetRoles_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoles_Request)
}

inline void CChatRoom_GetRoles_Request::SharedCtor() {
chat_group_id_ = uint64_t{0u};
}

CChatRoom_GetRoles_Request::~CChatRoom_GetRoles_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoles_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetRoles_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetRoles_Request::ArenaDtor(void* object) {
  CChatRoom_GetRoles_Request* _this = reinterpret_cast< CChatRoom_GetRoles_Request* >(object);
  (void)_this;
}
void CChatRoom_GetRoles_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetRoles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetRoles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoles_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetRoles_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetRoles_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoles_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoles_Request)
  return target;
}

size_t CChatRoom_GetRoles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoles_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 chat_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetRoles_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetRoles_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetRoles_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetRoles_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetRoles_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetRoles_Request &>(from));
}


void CChatRoom_GetRoles_Request::MergeFrom(const CChatRoom_GetRoles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_id()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetRoles_Request::CopyFrom(const CChatRoom_GetRoles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoles_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoles_Request::InternalSwap(CChatRoom_GetRoles_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetRoles_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[37]);
}

// ===================================================================

class CChatRoom_GetRoles_Response::_Internal {
 public:
};

CChatRoom_GetRoles_Response::CChatRoom_GetRoles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  roles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetRoles_Response)
}
CChatRoom_GetRoles_Response::CChatRoom_GetRoles_Response(const CChatRoom_GetRoles_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoles_Response)
}

inline void CChatRoom_GetRoles_Response::SharedCtor() {
}

CChatRoom_GetRoles_Response::~CChatRoom_GetRoles_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoles_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetRoles_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetRoles_Response::ArenaDtor(void* object) {
  CChatRoom_GetRoles_Response* _this = reinterpret_cast< CChatRoom_GetRoles_Response* >(object);
  (void)_this;
}
void CChatRoom_GetRoles_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetRoles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetRoles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoles_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetRoles_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRole roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetRoles_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoles_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRole roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoles_Response)
  return target;
}

size_t CChatRoom_GetRoles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoles_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRole roles = 1;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetRoles_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetRoles_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetRoles_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetRoles_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetRoles_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetRoles_Response &>(from));
}


void CChatRoom_GetRoles_Response::MergeFrom(const CChatRoom_GetRoles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetRoles_Response::CopyFrom(const CChatRoom_GetRoles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoles_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoles_Response::InternalSwap(CChatRoom_GetRoles_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetRoles_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[38]);
}

// ===================================================================

class CChatRoom_RenameRole_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_RenameRole_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_RenameRole_Request::CChatRoom_RenameRole_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RenameRole_Request)
}
CChatRoom_RenameRole_Request::CChatRoom_RenameRole_Request(const CChatRoom_RenameRole_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameRole_Request)
}

inline void CChatRoom_RenameRole_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
}

CChatRoom_RenameRole_Request::~CChatRoom_RenameRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameRole_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_RenameRole_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameRole_Request::ArenaDtor(void* object) {
  CChatRoom_RenameRole_Request* _this = reinterpret_cast< CChatRoom_RenameRole_Request* >(object);
  (void)_this;
}
void CChatRoom_RenameRole_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_RenameRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_RenameRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameRole_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_RenameRole_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_RenameRole_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_RenameRole_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameRole_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameRole_Request.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameRole_Request)
  return target;
}

size_t CChatRoom_RenameRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameRole_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RenameRole_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_RenameRole_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RenameRole_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_RenameRole_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_RenameRole_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_RenameRole_Request &>(from));
}


void CChatRoom_RenameRole_Request::MergeFrom(const CChatRoom_RenameRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_RenameRole_Request::CopyFrom(const CChatRoom_RenameRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RenameRole_Request::InternalSwap(CChatRoom_RenameRole_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_RenameRole_Request, role_id_)
      + sizeof(CChatRoom_RenameRole_Request::role_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_RenameRole_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RenameRole_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[39]);
}

// ===================================================================

class CChatRoom_RenameRole_Response::_Internal {
 public:
};

CChatRoom_RenameRole_Response::CChatRoom_RenameRole_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RenameRole_Response)
}
CChatRoom_RenameRole_Response::CChatRoom_RenameRole_Response(const CChatRoom_RenameRole_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameRole_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RenameRole_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RenameRole_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RenameRole_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[40]);
}

// ===================================================================

class CChatRoom_ReorderRole_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_ReorderRole_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_ReorderRole_Request::CChatRoom_ReorderRole_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ReorderRole_Request)
}
CChatRoom_ReorderRole_Request::CChatRoom_ReorderRole_Request(const CChatRoom_ReorderRole_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderRole_Request)
}

inline void CChatRoom_ReorderRole_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
}

CChatRoom_ReorderRole_Request::~CChatRoom_ReorderRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReorderRole_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_ReorderRole_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_ReorderRole_Request::ArenaDtor(void* object) {
  CChatRoom_ReorderRole_Request* _this = reinterpret_cast< CChatRoom_ReorderRole_Request* >(object);
  (void)_this;
}
void CChatRoom_ReorderRole_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_ReorderRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_ReorderRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReorderRole_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_ReorderRole_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_ReorderRole_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReorderRole_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReorderRole_Request)
  return target;
}

size_t CChatRoom_ReorderRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReorderRole_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

    // optional uint32 ordinal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ReorderRole_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_ReorderRole_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ReorderRole_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_ReorderRole_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_ReorderRole_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_ReorderRole_Request &>(from));
}


void CChatRoom_ReorderRole_Request::MergeFrom(const CChatRoom_ReorderRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReorderRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_ReorderRole_Request::CopyFrom(const CChatRoom_ReorderRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReorderRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReorderRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_ReorderRole_Request::InternalSwap(CChatRoom_ReorderRole_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_ReorderRole_Request, ordinal_)
      + sizeof(CChatRoom_ReorderRole_Request::ordinal_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_ReorderRole_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ReorderRole_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[41]);
}

// ===================================================================

class CChatRoom_ReorderRole_Response::_Internal {
 public:
};

CChatRoom_ReorderRole_Response::CChatRoom_ReorderRole_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ReorderRole_Response)
}
CChatRoom_ReorderRole_Response::CChatRoom_ReorderRole_Response(const CChatRoom_ReorderRole_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderRole_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ReorderRole_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ReorderRole_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ReorderRole_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[42]);
}

// ===================================================================

class CChatRoom_DeleteRole_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_DeleteRole_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_DeleteRole_Request::CChatRoom_DeleteRole_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteRole_Request)
}
CChatRoom_DeleteRole_Request::CChatRoom_DeleteRole_Request(const CChatRoom_DeleteRole_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRole_Request)
}

inline void CChatRoom_DeleteRole_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
}

CChatRoom_DeleteRole_Request::~CChatRoom_DeleteRole_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteRole_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_DeleteRole_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_DeleteRole_Request::ArenaDtor(void* object) {
  CChatRoom_DeleteRole_Request* _this = reinterpret_cast< CChatRoom_DeleteRole_Request* >(object);
  (void)_this;
}
void CChatRoom_DeleteRole_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_DeleteRole_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_DeleteRole_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteRole_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_DeleteRole_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_DeleteRole_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteRole_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteRole_Request)
  return target;
}

size_t CChatRoom_DeleteRole_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteRole_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteRole_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_DeleteRole_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteRole_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_DeleteRole_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_DeleteRole_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_DeleteRole_Request &>(from));
}


void CChatRoom_DeleteRole_Request::MergeFrom(const CChatRoom_DeleteRole_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteRole_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_DeleteRole_Request::CopyFrom(const CChatRoom_DeleteRole_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteRole_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteRole_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteRole_Request::InternalSwap(CChatRoom_DeleteRole_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteRole_Request, role_id_)
      + sizeof(CChatRoom_DeleteRole_Request::role_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteRole_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteRole_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[43]);
}

// ===================================================================

class CChatRoom_DeleteRole_Response::_Internal {
 public:
};

CChatRoom_DeleteRole_Response::CChatRoom_DeleteRole_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteRole_Response)
}
CChatRoom_DeleteRole_Response::CChatRoom_DeleteRole_Response(const CChatRoom_DeleteRole_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRole_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteRole_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteRole_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteRole_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[44]);
}

// ===================================================================

class CChatRoom_GetRoleActions_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetRoleActions_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_GetRoleActions_Request::CChatRoom_GetRoleActions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetRoleActions_Request)
}
CChatRoom_GetRoleActions_Request::CChatRoom_GetRoleActions_Request(const CChatRoom_GetRoleActions_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoleActions_Request)
}

inline void CChatRoom_GetRoleActions_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
}

CChatRoom_GetRoleActions_Request::~CChatRoom_GetRoleActions_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoleActions_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetRoleActions_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetRoleActions_Request::ArenaDtor(void* object) {
  CChatRoom_GetRoleActions_Request* _this = reinterpret_cast< CChatRoom_GetRoleActions_Request* >(object);
  (void)_this;
}
void CChatRoom_GetRoleActions_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetRoleActions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetRoleActions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoleActions_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetRoleActions_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetRoleActions_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoleActions_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoleActions_Request)
  return target;
}

size_t CChatRoom_GetRoleActions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoleActions_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetRoleActions_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetRoleActions_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetRoleActions_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetRoleActions_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetRoleActions_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetRoleActions_Request &>(from));
}


void CChatRoom_GetRoleActions_Request::MergeFrom(const CChatRoom_GetRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoleActions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetRoleActions_Request::CopyFrom(const CChatRoom_GetRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoleActions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoleActions_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoleActions_Request::InternalSwap(CChatRoom_GetRoleActions_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetRoleActions_Request, role_id_)
      + sizeof(CChatRoom_GetRoleActions_Request::role_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetRoleActions_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetRoleActions_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[45]);
}

// ===================================================================

class CChatRoom_GetRoleActions_Response::_Internal {
 public:
};

CChatRoom_GetRoleActions_Response::CChatRoom_GetRoleActions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetRoleActions_Response)
}
CChatRoom_GetRoleActions_Response::CChatRoom_GetRoleActions_Response(const CChatRoom_GetRoleActions_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRoleActions_Response)
}

inline void CChatRoom_GetRoleActions_Response::SharedCtor() {
}

CChatRoom_GetRoleActions_Response::~CChatRoom_GetRoleActions_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRoleActions_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetRoleActions_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetRoleActions_Response::ArenaDtor(void* object) {
  CChatRoom_GetRoleActions_Response* _this = reinterpret_cast< CChatRoom_GetRoleActions_Response* >(object);
  (void)_this;
}
void CChatRoom_GetRoleActions_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetRoleActions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetRoleActions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRoleActions_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetRoleActions_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoleActions actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetRoleActions_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRoleActions_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoleActions actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRoleActions_Response)
  return target;
}

size_t CChatRoom_GetRoleActions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRoleActions_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoleActions actions = 1;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetRoleActions_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetRoleActions_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetRoleActions_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetRoleActions_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetRoleActions_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetRoleActions_Response &>(from));
}


void CChatRoom_GetRoleActions_Response::MergeFrom(const CChatRoom_GetRoleActions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRoleActions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetRoleActions_Response::CopyFrom(const CChatRoom_GetRoleActions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRoleActions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRoleActions_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetRoleActions_Response::InternalSwap(CChatRoom_GetRoleActions_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetRoleActions_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[46]);
}

// ===================================================================

class CChatRoom_ReplaceRoleActions_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_ReplaceRoleActions_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CChatRoleActions& actions(const CChatRoom_ReplaceRoleActions_Request* msg);
  static void set_has_actions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CChatRoleActions&
CChatRoom_ReplaceRoleActions_Request::_Internal::actions(const CChatRoom_ReplaceRoleActions_Request* msg) {
  return *msg->actions_;
}
CChatRoom_ReplaceRoleActions_Request::CChatRoom_ReplaceRoleActions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ReplaceRoleActions_Request)
}
CChatRoom_ReplaceRoleActions_Request::CChatRoom_ReplaceRoleActions_Request(const CChatRoom_ReplaceRoleActions_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actions()) {
    actions_ = new ::CChatRoleActions(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReplaceRoleActions_Request)
}

inline void CChatRoom_ReplaceRoleActions_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&actions_)) + sizeof(role_id_));
}

CChatRoom_ReplaceRoleActions_Request::~CChatRoom_ReplaceRoleActions_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReplaceRoleActions_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_ReplaceRoleActions_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete actions_;
}

void CChatRoom_ReplaceRoleActions_Request::ArenaDtor(void* object) {
  CChatRoom_ReplaceRoleActions_Request* _this = reinterpret_cast< CChatRoom_ReplaceRoleActions_Request* >(object);
  (void)_this;
}
void CChatRoom_ReplaceRoleActions_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_ReplaceRoleActions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_ReplaceRoleActions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReplaceRoleActions_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(actions_ != nullptr);
    actions_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(role_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_ReplaceRoleActions_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoleActions actions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_ReplaceRoleActions_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReplaceRoleActions_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 role_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // optional .CChatRoleActions actions = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::actions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReplaceRoleActions_Request)
  return target;
}

size_t CChatRoom_ReplaceRoleActions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReplaceRoleActions_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CChatRoleActions actions = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *actions_);
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 role_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ReplaceRoleActions_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_ReplaceRoleActions_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ReplaceRoleActions_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_ReplaceRoleActions_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_ReplaceRoleActions_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_ReplaceRoleActions_Request &>(from));
}


void CChatRoom_ReplaceRoleActions_Request::MergeFrom(const CChatRoom_ReplaceRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReplaceRoleActions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_actions()->::CChatRoleActions::MergeFrom(from._internal_actions());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_id_ = from.role_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_ReplaceRoleActions_Request::CopyFrom(const CChatRoom_ReplaceRoleActions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReplaceRoleActions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReplaceRoleActions_Request::IsInitialized() const {
  return true;
}

void CChatRoom_ReplaceRoleActions_Request::InternalSwap(CChatRoom_ReplaceRoleActions_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_ReplaceRoleActions_Request, role_id_)
      + sizeof(CChatRoom_ReplaceRoleActions_Request::role_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_ReplaceRoleActions_Request, actions_)>(
          reinterpret_cast<char*>(&actions_),
          reinterpret_cast<char*>(&other->actions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ReplaceRoleActions_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[47]);
}

// ===================================================================

class CChatRoom_ReplaceRoleActions_Response::_Internal {
 public:
};

CChatRoom_ReplaceRoleActions_Response::CChatRoom_ReplaceRoleActions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ReplaceRoleActions_Response)
}
CChatRoom_ReplaceRoleActions_Response::CChatRoom_ReplaceRoleActions_Response(const CChatRoom_ReplaceRoleActions_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReplaceRoleActions_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ReplaceRoleActions_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ReplaceRoleActions_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ReplaceRoleActions_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[48]);
}

// ===================================================================

class CChatRoom_AddRoleToUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_AddRoleToUser_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_AddRoleToUser_Request::CChatRoom_AddRoleToUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_AddRoleToUser_Request)
}
CChatRoom_AddRoleToUser_Request::CChatRoom_AddRoleToUser_Request(const CChatRoom_AddRoleToUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_AddRoleToUser_Request)
}

inline void CChatRoom_AddRoleToUser_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_AddRoleToUser_Request::~CChatRoom_AddRoleToUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_AddRoleToUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_AddRoleToUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_AddRoleToUser_Request::ArenaDtor(void* object) {
  CChatRoom_AddRoleToUser_Request* _this = reinterpret_cast< CChatRoom_AddRoleToUser_Request* >(object);
  (void)_this;
}
void CChatRoom_AddRoleToUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_AddRoleToUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_AddRoleToUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_AddRoleToUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_AddRoleToUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 role_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_AddRoleToUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_AddRoleToUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 role_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_role_id(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_AddRoleToUser_Request)
  return target;
}

size_t CChatRoom_AddRoleToUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_AddRoleToUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 role_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

    // optional fixed64 steamid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_AddRoleToUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_AddRoleToUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_AddRoleToUser_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_AddRoleToUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_AddRoleToUser_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_AddRoleToUser_Request &>(from));
}


void CChatRoom_AddRoleToUser_Request::MergeFrom(const CChatRoom_AddRoleToUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_AddRoleToUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_AddRoleToUser_Request::CopyFrom(const CChatRoom_AddRoleToUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_AddRoleToUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_AddRoleToUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_AddRoleToUser_Request::InternalSwap(CChatRoom_AddRoleToUser_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_AddRoleToUser_Request, steamid_)
      + sizeof(CChatRoom_AddRoleToUser_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_AddRoleToUser_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_AddRoleToUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[49]);
}

// ===================================================================

class CChatRoom_AddRoleToUser_Response::_Internal {
 public:
};

CChatRoom_AddRoleToUser_Response::CChatRoom_AddRoleToUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_AddRoleToUser_Response)
}
CChatRoom_AddRoleToUser_Response::CChatRoom_AddRoleToUser_Response(const CChatRoom_AddRoleToUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_AddRoleToUser_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_AddRoleToUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_AddRoleToUser_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_AddRoleToUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[50]);
}

// ===================================================================

class CChatRoom_GetRolesForUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetRolesForUser_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_GetRolesForUser_Request::CChatRoom_GetRolesForUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetRolesForUser_Request)
}
CChatRoom_GetRolesForUser_Request::CChatRoom_GetRolesForUser_Request(const CChatRoom_GetRolesForUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRolesForUser_Request)
}

inline void CChatRoom_GetRolesForUser_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_GetRolesForUser_Request::~CChatRoom_GetRolesForUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRolesForUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetRolesForUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetRolesForUser_Request::ArenaDtor(void* object) {
  CChatRoom_GetRolesForUser_Request* _this = reinterpret_cast< CChatRoom_GetRolesForUser_Request* >(object);
  (void)_this;
}
void CChatRoom_GetRolesForUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetRolesForUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetRolesForUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRolesForUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetRolesForUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetRolesForUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRolesForUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRolesForUser_Request)
  return target;
}

size_t CChatRoom_GetRolesForUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRolesForUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetRolesForUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetRolesForUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetRolesForUser_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetRolesForUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetRolesForUser_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetRolesForUser_Request &>(from));
}


void CChatRoom_GetRolesForUser_Request::MergeFrom(const CChatRoom_GetRolesForUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRolesForUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetRolesForUser_Request::CopyFrom(const CChatRoom_GetRolesForUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRolesForUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRolesForUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetRolesForUser_Request::InternalSwap(CChatRoom_GetRolesForUser_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetRolesForUser_Request, steamid_)
      + sizeof(CChatRoom_GetRolesForUser_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetRolesForUser_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetRolesForUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[51]);
}

// ===================================================================

class CChatRoom_GetRolesForUser_Response::_Internal {
 public:
};

CChatRoom_GetRolesForUser_Response::CChatRoom_GetRolesForUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  role_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetRolesForUser_Response)
}
CChatRoom_GetRolesForUser_Response::CChatRoom_GetRolesForUser_Response(const CChatRoom_GetRolesForUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      role_ids_(from.role_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetRolesForUser_Response)
}

inline void CChatRoom_GetRolesForUser_Response::SharedCtor() {
}

CChatRoom_GetRolesForUser_Response::~CChatRoom_GetRolesForUser_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetRolesForUser_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetRolesForUser_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetRolesForUser_Response::ArenaDtor(void* object) {
  CChatRoom_GetRolesForUser_Response* _this = reinterpret_cast< CChatRoom_GetRolesForUser_Response* >(object);
  (void)_this;
}
void CChatRoom_GetRolesForUser_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetRolesForUser_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetRolesForUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetRolesForUser_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetRolesForUser_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 role_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_role_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_role_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetRolesForUser_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetRolesForUser_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 role_ids = 1;
  for (int i = 0, n = this->_internal_role_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetRolesForUser_Response)
  return target;
}

size_t CChatRoom_GetRolesForUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetRolesForUser_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 role_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->role_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_role_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetRolesForUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetRolesForUser_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetRolesForUser_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetRolesForUser_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetRolesForUser_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetRolesForUser_Response &>(from));
}


void CChatRoom_GetRolesForUser_Response::MergeFrom(const CChatRoom_GetRolesForUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetRolesForUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  role_ids_.MergeFrom(from.role_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetRolesForUser_Response::CopyFrom(const CChatRoom_GetRolesForUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetRolesForUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetRolesForUser_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetRolesForUser_Response::InternalSwap(CChatRoom_GetRolesForUser_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  role_ids_.InternalSwap(&other->role_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetRolesForUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[52]);
}

// ===================================================================

class CChatRoom_DeleteRoleFromUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_DeleteRoleFromUser_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_DeleteRoleFromUser_Request::CChatRoom_DeleteRoleFromUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteRoleFromUser_Request)
}
CChatRoom_DeleteRoleFromUser_Request::CChatRoom_DeleteRoleFromUser_Request(const CChatRoom_DeleteRoleFromUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRoleFromUser_Request)
}

inline void CChatRoom_DeleteRoleFromUser_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
}

CChatRoom_DeleteRoleFromUser_Request::~CChatRoom_DeleteRoleFromUser_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteRoleFromUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_DeleteRoleFromUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_DeleteRoleFromUser_Request::ArenaDtor(void* object) {
  CChatRoom_DeleteRoleFromUser_Request* _this = reinterpret_cast< CChatRoom_DeleteRoleFromUser_Request* >(object);
  (void)_this;
}
void CChatRoom_DeleteRoleFromUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_DeleteRoleFromUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_DeleteRoleFromUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteRoleFromUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_DeleteRoleFromUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 role_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_DeleteRoleFromUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteRoleFromUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 role_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_role_id(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteRoleFromUser_Request)
  return target;
}

size_t CChatRoom_DeleteRoleFromUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteRoleFromUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 role_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_role_id());
    }

    // optional fixed64 steamid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteRoleFromUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_DeleteRoleFromUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteRoleFromUser_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_DeleteRoleFromUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_DeleteRoleFromUser_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_DeleteRoleFromUser_Request &>(from));
}


void CChatRoom_DeleteRoleFromUser_Request::MergeFrom(const CChatRoom_DeleteRoleFromUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteRoleFromUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_DeleteRoleFromUser_Request::CopyFrom(const CChatRoom_DeleteRoleFromUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteRoleFromUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteRoleFromUser_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteRoleFromUser_Request::InternalSwap(CChatRoom_DeleteRoleFromUser_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteRoleFromUser_Request, steamid_)
      + sizeof(CChatRoom_DeleteRoleFromUser_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteRoleFromUser_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteRoleFromUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[53]);
}

// ===================================================================

class CChatRoom_DeleteRoleFromUser_Response::_Internal {
 public:
};

CChatRoom_DeleteRoleFromUser_Response::CChatRoom_DeleteRoleFromUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteRoleFromUser_Response)
}
CChatRoom_DeleteRoleFromUser_Response::CChatRoom_DeleteRoleFromUser_Response(const CChatRoom_DeleteRoleFromUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteRoleFromUser_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteRoleFromUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteRoleFromUser_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteRoleFromUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[54]);
}

// ===================================================================

class CChatRoom_JoinChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_JoinChatRoomGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invite_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_JoinChatRoomGroup_Request::CChatRoom_JoinChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_JoinChatRoomGroup_Request)
}
CChatRoom_JoinChatRoomGroup_Request::CChatRoom_JoinChatRoomGroup_Request(const CChatRoom_JoinChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invite_code()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinChatRoomGroup_Request)
}

inline void CChatRoom_JoinChatRoomGroup_Request::SharedCtor() {
invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_JoinChatRoomGroup_Request::~CChatRoom_JoinChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_JoinChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_JoinChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_JoinChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_JoinChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_JoinChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_JoinChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_JoinChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_JoinChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string invite_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_JoinChatRoomGroup_Request.invite_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_JoinChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_JoinChatRoomGroup_Request.invite_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invite_code(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_JoinChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string invite_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_code());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_JoinChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_JoinChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_JoinChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_JoinChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_JoinChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_JoinChatRoomGroup_Request &>(from));
}


void CChatRoom_JoinChatRoomGroup_Request::MergeFrom(const CChatRoom_JoinChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_code(from._internal_invite_code());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_JoinChatRoomGroup_Request::CopyFrom(const CChatRoom_JoinChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_JoinChatRoomGroup_Request::InternalSwap(CChatRoom_JoinChatRoomGroup_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invite_code_, lhs_arena,
      &other->invite_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_JoinChatRoomGroup_Request, chat_id_)
      + sizeof(CChatRoom_JoinChatRoomGroup_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_JoinChatRoomGroup_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_JoinChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[55]);
}

// ===================================================================

class CChatRoom_JoinChatRoomGroup_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_JoinChatRoomGroup_Response>()._has_bits_);
  static const ::CChatRoomGroupState& state(const CChatRoom_JoinChatRoomGroup_Response* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CUserChatRoomGroupState& user_chat_state(const CChatRoom_JoinChatRoomGroup_Response* msg);
  static void set_has_user_chat_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_join_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_expire(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CChatRoomGroupState&
CChatRoom_JoinChatRoomGroup_Response::_Internal::state(const CChatRoom_JoinChatRoomGroup_Response* msg) {
  return *msg->state_;
}
const ::CUserChatRoomGroupState&
CChatRoom_JoinChatRoomGroup_Response::_Internal::user_chat_state(const CChatRoom_JoinChatRoomGroup_Response* msg) {
  return *msg->user_chat_state_;
}
CChatRoom_JoinChatRoomGroup_Response::CChatRoom_JoinChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_JoinChatRoomGroup_Response)
}
CChatRoom_JoinChatRoomGroup_Response::CChatRoom_JoinChatRoomGroup_Response(const CChatRoom_JoinChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CChatRoomGroupState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_user_chat_state()) {
    user_chat_state_ = new ::CUserChatRoomGroupState(*from.user_chat_state_);
  } else {
    user_chat_state_ = nullptr;
  }
  ::memcpy(&join_chat_id_, &from.join_chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_expire_) -
    reinterpret_cast<char*>(&join_chat_id_)) + sizeof(time_expire_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinChatRoomGroup_Response)
}

inline void CChatRoom_JoinChatRoomGroup_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_expire_) -
    reinterpret_cast<char*>(&state_)) + sizeof(time_expire_));
}

CChatRoom_JoinChatRoomGroup_Response::~CChatRoom_JoinChatRoomGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinChatRoomGroup_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_JoinChatRoomGroup_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete user_chat_state_;
}

void CChatRoom_JoinChatRoomGroup_Response::ArenaDtor(void* object) {
  CChatRoom_JoinChatRoomGroup_Response* _this = reinterpret_cast< CChatRoom_JoinChatRoomGroup_Response* >(object);
  (void)_this;
}
void CChatRoom_JoinChatRoomGroup_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_JoinChatRoomGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_JoinChatRoomGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_chat_state_ != nullptr);
      user_chat_state_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&join_chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_expire_) -
        reinterpret_cast<char*>(&join_chat_id_)) + sizeof(time_expire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_JoinChatRoomGroup_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoomGroupState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CUserChatRoomGroupState user_chat_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_chat_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 join_chat_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_join_chat_id(&has_bits);
          join_chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_expire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_expire(&has_bits);
          time_expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_JoinChatRoomGroup_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinChatRoomGroup_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // optional .CUserChatRoomGroupState user_chat_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_chat_state(this), target, stream);
  }

  // optional uint64 join_chat_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_join_chat_id(), target);
  }

  // optional uint32 time_expire = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_expire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinChatRoomGroup_Response)
  return target;
}

size_t CChatRoom_JoinChatRoomGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinChatRoomGroup_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CChatRoomGroupState state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .CUserChatRoomGroupState user_chat_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_chat_state_);
    }

    // optional uint64 join_chat_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_join_chat_id());
    }

    // optional uint32 time_expire = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_expire());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_JoinChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_JoinChatRoomGroup_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_JoinChatRoomGroup_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_JoinChatRoomGroup_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_JoinChatRoomGroup_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_JoinChatRoomGroup_Response &>(from));
}


void CChatRoom_JoinChatRoomGroup_Response::MergeFrom(const CChatRoom_JoinChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinChatRoomGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_state()->::CChatRoomGroupState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_user_chat_state()->::CUserChatRoomGroupState::MergeFrom(from._internal_user_chat_state());
    }
    if (cached_has_bits & 0x00000004u) {
      join_chat_id_ = from.join_chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_expire_ = from.time_expire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_JoinChatRoomGroup_Response::CopyFrom(const CChatRoom_JoinChatRoomGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinChatRoomGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinChatRoomGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_JoinChatRoomGroup_Response::InternalSwap(CChatRoom_JoinChatRoomGroup_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_JoinChatRoomGroup_Response, time_expire_)
      + sizeof(CChatRoom_JoinChatRoomGroup_Response::time_expire_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_JoinChatRoomGroup_Response, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_JoinChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[56]);
}

// ===================================================================

class CChatRoom_InviteFriendToChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_InviteFriendToChatRoomGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skip_friendsui_check(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CChatRoom_InviteFriendToChatRoomGroup_Request::CChatRoom_InviteFriendToChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_InviteFriendToChatRoomGroup_Request)
}
CChatRoom_InviteFriendToChatRoomGroup_Request::CChatRoom_InviteFriendToChatRoomGroup_Request(const CChatRoom_InviteFriendToChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_friendsui_check_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(skip_friendsui_check_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_InviteFriendToChatRoomGroup_Request)
}

inline void CChatRoom_InviteFriendToChatRoomGroup_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skip_friendsui_check_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(skip_friendsui_check_));
}

CChatRoom_InviteFriendToChatRoomGroup_Request::~CChatRoom_InviteFriendToChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_InviteFriendToChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_InviteFriendToChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_InviteFriendToChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_InviteFriendToChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_InviteFriendToChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_InviteFriendToChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skip_friendsui_check_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(skip_friendsui_check_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_InviteFriendToChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_friendsui_check = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_skip_friendsui_check(&has_bits);
          skip_friendsui_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_InviteFriendToChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_chat_id(), target);
  }

  // optional bool skip_friendsui_check = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_skip_friendsui_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_InviteFriendToChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_InviteFriendToChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional bool skip_friendsui_check = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_InviteFriendToChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_InviteFriendToChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_InviteFriendToChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_InviteFriendToChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_InviteFriendToChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_InviteFriendToChatRoomGroup_Request &>(from));
}


void CChatRoom_InviteFriendToChatRoomGroup_Request::MergeFrom(const CChatRoom_InviteFriendToChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      skip_friendsui_check_ = from.skip_friendsui_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::CopyFrom(const CChatRoom_InviteFriendToChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_InviteFriendToChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_InviteFriendToChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_InviteFriendToChatRoomGroup_Request::InternalSwap(CChatRoom_InviteFriendToChatRoomGroup_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_InviteFriendToChatRoomGroup_Request, skip_friendsui_check_)
      + sizeof(CChatRoom_InviteFriendToChatRoomGroup_Request::skip_friendsui_check_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_InviteFriendToChatRoomGroup_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_InviteFriendToChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[57]);
}

// ===================================================================

class CChatRoom_InviteFriendToChatRoomGroup_Response::_Internal {
 public:
};

CChatRoom_InviteFriendToChatRoomGroup_Response::CChatRoom_InviteFriendToChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_InviteFriendToChatRoomGroup_Response)
}
CChatRoom_InviteFriendToChatRoomGroup_Response::CChatRoom_InviteFriendToChatRoomGroup_Response(const CChatRoom_InviteFriendToChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_InviteFriendToChatRoomGroup_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_InviteFriendToChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_InviteFriendToChatRoomGroup_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_InviteFriendToChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[58]);
}

// ===================================================================

class CChatRoom_LeaveChatRoomGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_LeaveChatRoomGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_LeaveChatRoomGroup_Request::CChatRoom_LeaveChatRoomGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_LeaveChatRoomGroup_Request)
}
CChatRoom_LeaveChatRoomGroup_Request::CChatRoom_LeaveChatRoomGroup_Request(const CChatRoom_LeaveChatRoomGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveChatRoomGroup_Request)
}

inline void CChatRoom_LeaveChatRoomGroup_Request::SharedCtor() {
chat_group_id_ = uint64_t{0u};
}

CChatRoom_LeaveChatRoomGroup_Request::~CChatRoom_LeaveChatRoomGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_LeaveChatRoomGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_LeaveChatRoomGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_LeaveChatRoomGroup_Request::ArenaDtor(void* object) {
  CChatRoom_LeaveChatRoomGroup_Request* _this = reinterpret_cast< CChatRoom_LeaveChatRoomGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_LeaveChatRoomGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_LeaveChatRoomGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_LeaveChatRoomGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_LeaveChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_LeaveChatRoomGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_LeaveChatRoomGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_LeaveChatRoomGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_LeaveChatRoomGroup_Request)
  return target;
}

size_t CChatRoom_LeaveChatRoomGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_LeaveChatRoomGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 chat_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_LeaveChatRoomGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_LeaveChatRoomGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_LeaveChatRoomGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_LeaveChatRoomGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_LeaveChatRoomGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_LeaveChatRoomGroup_Request &>(from));
}


void CChatRoom_LeaveChatRoomGroup_Request::MergeFrom(const CChatRoom_LeaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_LeaveChatRoomGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_id()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_LeaveChatRoomGroup_Request::CopyFrom(const CChatRoom_LeaveChatRoomGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_LeaveChatRoomGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_LeaveChatRoomGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_LeaveChatRoomGroup_Request::InternalSwap(CChatRoom_LeaveChatRoomGroup_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_LeaveChatRoomGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[59]);
}

// ===================================================================

class CChatRoom_LeaveChatRoomGroup_Response::_Internal {
 public:
};

CChatRoom_LeaveChatRoomGroup_Response::CChatRoom_LeaveChatRoomGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_LeaveChatRoomGroup_Response)
}
CChatRoom_LeaveChatRoomGroup_Response::CChatRoom_LeaveChatRoomGroup_Response(const CChatRoom_LeaveChatRoomGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveChatRoomGroup_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_LeaveChatRoomGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_LeaveChatRoomGroup_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_LeaveChatRoomGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[60]);
}

// ===================================================================

class CChatRoom_CreateChatRoom_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateChatRoom_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_CreateChatRoom_Request::CChatRoom_CreateChatRoom_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateChatRoom_Request)
}
CChatRoom_CreateChatRoom_Request::CChatRoom_CreateChatRoom_Request(const CChatRoom_CreateChatRoom_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_voice_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(allow_voice_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoom_Request)
}

inline void CChatRoom_CreateChatRoom_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_voice_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(allow_voice_));
}

CChatRoom_CreateChatRoom_Request::~CChatRoom_CreateChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoom_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateChatRoom_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateChatRoom_Request::ArenaDtor(void* object) {
  CChatRoom_CreateChatRoom_Request* _this = reinterpret_cast< CChatRoom_CreateChatRoom_Request* >(object);
  (void)_this;
}
void CChatRoom_CreateChatRoom_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoom_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_voice_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(allow_voice_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateChatRoom_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_CreateChatRoom_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_voice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_allow_voice(&has_bits);
          allow_voice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateChatRoom_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoom_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateChatRoom_Request.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional bool allow_voice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_voice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoom_Request)
  return target;
}

size_t CChatRoom_CreateChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoom_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional bool allow_voice = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateChatRoom_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateChatRoom_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateChatRoom_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateChatRoom_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateChatRoom_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateChatRoom_Request &>(from));
}


void CChatRoom_CreateChatRoom_Request::MergeFrom(const CChatRoom_CreateChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      allow_voice_ = from.allow_voice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateChatRoom_Request::CopyFrom(const CChatRoom_CreateChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoom_Request::InternalSwap(CChatRoom_CreateChatRoom_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_CreateChatRoom_Request, allow_voice_)
      + sizeof(CChatRoom_CreateChatRoom_Request::allow_voice_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_CreateChatRoom_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateChatRoom_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[61]);
}

// ===================================================================

class CChatRoom_CreateChatRoom_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateChatRoom_Response>()._has_bits_);
  static const ::CChatRoomState& chat_room(const CChatRoom_CreateChatRoom_Response* msg);
  static void set_has_chat_room(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CChatRoomState&
CChatRoom_CreateChatRoom_Response::_Internal::chat_room(const CChatRoom_CreateChatRoom_Response* msg) {
  return *msg->chat_room_;
}
CChatRoom_CreateChatRoom_Response::CChatRoom_CreateChatRoom_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateChatRoom_Response)
}
CChatRoom_CreateChatRoom_Response::CChatRoom_CreateChatRoom_Response(const CChatRoom_CreateChatRoom_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_room()) {
    chat_room_ = new ::CChatRoomState(*from.chat_room_);
  } else {
    chat_room_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateChatRoom_Response)
}

inline void CChatRoom_CreateChatRoom_Response::SharedCtor() {
chat_room_ = nullptr;
}

CChatRoom_CreateChatRoom_Response::~CChatRoom_CreateChatRoom_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateChatRoom_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateChatRoom_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_room_;
}

void CChatRoom_CreateChatRoom_Response::ArenaDtor(void* object) {
  CChatRoom_CreateChatRoom_Response* _this = reinterpret_cast< CChatRoom_CreateChatRoom_Response* >(object);
  (void)_this;
}
void CChatRoom_CreateChatRoom_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateChatRoom_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateChatRoom_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateChatRoom_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chat_room_ != nullptr);
    chat_room_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateChatRoom_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoomState chat_room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateChatRoom_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateChatRoom_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomState chat_room = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat_room(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateChatRoom_Response)
  return target;
}

size_t CChatRoom_CreateChatRoom_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateChatRoom_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CChatRoomState chat_room = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_room_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateChatRoom_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateChatRoom_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateChatRoom_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateChatRoom_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateChatRoom_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateChatRoom_Response &>(from));
}


void CChatRoom_CreateChatRoom_Response::MergeFrom(const CChatRoom_CreateChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateChatRoom_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_room()) {
    _internal_mutable_chat_room()->::CChatRoomState::MergeFrom(from._internal_chat_room());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateChatRoom_Response::CopyFrom(const CChatRoom_CreateChatRoom_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateChatRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateChatRoom_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateChatRoom_Response::InternalSwap(CChatRoom_CreateChatRoom_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_room_, other->chat_room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateChatRoom_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[62]);
}

// ===================================================================

class CChatRoom_DeleteChatRoom_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_DeleteChatRoom_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_DeleteChatRoom_Request::CChatRoom_DeleteChatRoom_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteChatRoom_Request)
}
CChatRoom_DeleteChatRoom_Request::CChatRoom_DeleteChatRoom_Request(const CChatRoom_DeleteChatRoom_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatRoom_Request)
}

inline void CChatRoom_DeleteChatRoom_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_DeleteChatRoom_Request::~CChatRoom_DeleteChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatRoom_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_DeleteChatRoom_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_DeleteChatRoom_Request::ArenaDtor(void* object) {
  CChatRoom_DeleteChatRoom_Request* _this = reinterpret_cast< CChatRoom_DeleteChatRoom_Request* >(object);
  (void)_this;
}
void CChatRoom_DeleteChatRoom_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_DeleteChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_DeleteChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatRoom_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_DeleteChatRoom_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_DeleteChatRoom_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatRoom_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatRoom_Request)
  return target;
}

size_t CChatRoom_DeleteChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatRoom_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteChatRoom_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_DeleteChatRoom_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteChatRoom_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_DeleteChatRoom_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_DeleteChatRoom_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_DeleteChatRoom_Request &>(from));
}


void CChatRoom_DeleteChatRoom_Request::MergeFrom(const CChatRoom_DeleteChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_DeleteChatRoom_Request::CopyFrom(const CChatRoom_DeleteChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatRoom_Request::InternalSwap(CChatRoom_DeleteChatRoom_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteChatRoom_Request, chat_id_)
      + sizeof(CChatRoom_DeleteChatRoom_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteChatRoom_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteChatRoom_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[63]);
}

// ===================================================================

class CChatRoom_DeleteChatRoom_Response::_Internal {
 public:
};

CChatRoom_DeleteChatRoom_Response::CChatRoom_DeleteChatRoom_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteChatRoom_Response)
}
CChatRoom_DeleteChatRoom_Response::CChatRoom_DeleteChatRoom_Response(const CChatRoom_DeleteChatRoom_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatRoom_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteChatRoom_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteChatRoom_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteChatRoom_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[64]);
}

// ===================================================================

class CChatRoom_RenameChatRoom_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_RenameChatRoom_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_RenameChatRoom_Request::CChatRoom_RenameChatRoom_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RenameChatRoom_Request)
}
CChatRoom_RenameChatRoom_Request::CChatRoom_RenameChatRoom_Request(const CChatRoom_RenameChatRoom_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoom_Request)
}

inline void CChatRoom_RenameChatRoom_Request::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_RenameChatRoom_Request::~CChatRoom_RenameChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_RenameChatRoom_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_RenameChatRoom_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_RenameChatRoom_Request::ArenaDtor(void* object) {
  CChatRoom_RenameChatRoom_Request* _this = reinterpret_cast< CChatRoom_RenameChatRoom_Request* >(object);
  (void)_this;
}
void CChatRoom_RenameChatRoom_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_RenameChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_RenameChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_RenameChatRoom_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_RenameChatRoom_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_RenameChatRoom_Request.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_RenameChatRoom_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_RenameChatRoom_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_RenameChatRoom_Request.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_RenameChatRoom_Request)
  return target;
}

size_t CChatRoom_RenameChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_RenameChatRoom_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RenameChatRoom_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_RenameChatRoom_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RenameChatRoom_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_RenameChatRoom_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_RenameChatRoom_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_RenameChatRoom_Request &>(from));
}


void CChatRoom_RenameChatRoom_Request::MergeFrom(const CChatRoom_RenameChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_RenameChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_RenameChatRoom_Request::CopyFrom(const CChatRoom_RenameChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_RenameChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_RenameChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_RenameChatRoom_Request::InternalSwap(CChatRoom_RenameChatRoom_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_RenameChatRoom_Request, chat_id_)
      + sizeof(CChatRoom_RenameChatRoom_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_RenameChatRoom_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RenameChatRoom_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[65]);
}

// ===================================================================

class CChatRoom_RenameChatRoom_Response::_Internal {
 public:
};

CChatRoom_RenameChatRoom_Response::CChatRoom_RenameChatRoom_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_RenameChatRoom_Response)
}
CChatRoom_RenameChatRoom_Response::CChatRoom_RenameChatRoom_Response(const CChatRoom_RenameChatRoom_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_RenameChatRoom_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_RenameChatRoom_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_RenameChatRoom_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_RenameChatRoom_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[66]);
}

// ===================================================================

class CChatRoom_ReorderChatRoom_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_ReorderChatRoom_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_move_after_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_ReorderChatRoom_Request::CChatRoom_ReorderChatRoom_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ReorderChatRoom_Request)
}
CChatRoom_ReorderChatRoom_Request::CChatRoom_ReorderChatRoom_Request(const CChatRoom_ReorderChatRoom_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_after_chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(move_after_chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderChatRoom_Request)
}

inline void CChatRoom_ReorderChatRoom_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&move_after_chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(move_after_chat_id_));
}

CChatRoom_ReorderChatRoom_Request::~CChatRoom_ReorderChatRoom_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_ReorderChatRoom_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_ReorderChatRoom_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_ReorderChatRoom_Request::ArenaDtor(void* object) {
  CChatRoom_ReorderChatRoom_Request* _this = reinterpret_cast< CChatRoom_ReorderChatRoom_Request* >(object);
  (void)_this;
}
void CChatRoom_ReorderChatRoom_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_ReorderChatRoom_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_ReorderChatRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ReorderChatRoom_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&move_after_chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(move_after_chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_ReorderChatRoom_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 move_after_chat_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_move_after_chat_id(&has_bits);
          move_after_chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_ReorderChatRoom_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ReorderChatRoom_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional uint64 move_after_chat_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_move_after_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ReorderChatRoom_Request)
  return target;
}

size_t CChatRoom_ReorderChatRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ReorderChatRoom_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint64 move_after_chat_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_move_after_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ReorderChatRoom_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_ReorderChatRoom_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ReorderChatRoom_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_ReorderChatRoom_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_ReorderChatRoom_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_ReorderChatRoom_Request &>(from));
}


void CChatRoom_ReorderChatRoom_Request::MergeFrom(const CChatRoom_ReorderChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ReorderChatRoom_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      move_after_chat_id_ = from.move_after_chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_ReorderChatRoom_Request::CopyFrom(const CChatRoom_ReorderChatRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ReorderChatRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ReorderChatRoom_Request::IsInitialized() const {
  return true;
}

void CChatRoom_ReorderChatRoom_Request::InternalSwap(CChatRoom_ReorderChatRoom_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_ReorderChatRoom_Request, move_after_chat_id_)
      + sizeof(CChatRoom_ReorderChatRoom_Request::move_after_chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_ReorderChatRoom_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ReorderChatRoom_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[67]);
}

// ===================================================================

class CChatRoom_ReorderChatRoom_Response::_Internal {
 public:
};

CChatRoom_ReorderChatRoom_Response::CChatRoom_ReorderChatRoom_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ReorderChatRoom_Response)
}
CChatRoom_ReorderChatRoom_Response::CChatRoom_ReorderChatRoom_Response(const CChatRoom_ReorderChatRoom_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ReorderChatRoom_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ReorderChatRoom_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ReorderChatRoom_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ReorderChatRoom_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[68]);
}

// ===================================================================

class CChatRoom_SendChatMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SendChatMessage_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_echo_to_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CChatRoom_SendChatMessage_Request::CChatRoom_SendChatMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SendChatMessage_Request)
}
CChatRoom_SendChatMessage_Request::CChatRoom_SendChatMessage_Request(const CChatRoom_SendChatMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&echo_to_sender_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(echo_to_sender_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SendChatMessage_Request)
}

inline void CChatRoom_SendChatMessage_Request::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&echo_to_sender_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(echo_to_sender_));
}

CChatRoom_SendChatMessage_Request::~CChatRoom_SendChatMessage_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SendChatMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SendChatMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SendChatMessage_Request::ArenaDtor(void* object) {
  CChatRoom_SendChatMessage_Request* _this = reinterpret_cast< CChatRoom_SendChatMessage_Request* >(object);
  (void)_this;
}
void CChatRoom_SendChatMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SendChatMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SendChatMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SendChatMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&echo_to_sender_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(echo_to_sender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SendChatMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_SendChatMessage_Request.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool echo_to_sender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_echo_to_sender(&has_bits);
          echo_to_sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SendChatMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SendChatMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_SendChatMessage_Request.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional bool echo_to_sender = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_echo_to_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SendChatMessage_Request)
  return target;
}

size_t CChatRoom_SendChatMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SendChatMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional bool echo_to_sender = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SendChatMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SendChatMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SendChatMessage_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SendChatMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SendChatMessage_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SendChatMessage_Request &>(from));
}


void CChatRoom_SendChatMessage_Request::MergeFrom(const CChatRoom_SendChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SendChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      echo_to_sender_ = from.echo_to_sender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SendChatMessage_Request::CopyFrom(const CChatRoom_SendChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SendChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SendChatMessage_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SendChatMessage_Request::InternalSwap(CChatRoom_SendChatMessage_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SendChatMessage_Request, echo_to_sender_)
      + sizeof(CChatRoom_SendChatMessage_Request::echo_to_sender_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SendChatMessage_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SendChatMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[69]);
}

// ===================================================================

class CChatRoom_SendChatMessage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SendChatMessage_Response>()._has_bits_);
  static void set_has_modified_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_without_bb_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_SendChatMessage_Response::CChatRoom_SendChatMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SendChatMessage_Response)
}
CChatRoom_SendChatMessage_Response::CChatRoom_SendChatMessage_Response(const CChatRoom_SendChatMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modified_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    modified_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modified_message()) {
    modified_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modified_message(), 
      GetArenaForAllocation());
  }
  message_without_bb_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_without_bb_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_without_bb_code()) {
    message_without_bb_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_without_bb_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SendChatMessage_Response)
}

inline void CChatRoom_SendChatMessage_Response::SharedCtor() {
modified_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  modified_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_without_bb_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_without_bb_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
}

CChatRoom_SendChatMessage_Response::~CChatRoom_SendChatMessage_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SendChatMessage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SendChatMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modified_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_without_bb_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SendChatMessage_Response::ArenaDtor(void* object) {
  CChatRoom_SendChatMessage_Response* _this = reinterpret_cast< CChatRoom_SendChatMessage_Response* >(object);
  (void)_this;
}
void CChatRoom_SendChatMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SendChatMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SendChatMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SendChatMessage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      modified_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_without_bb_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SendChatMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string modified_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_modified_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_SendChatMessage_Response.modified_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message_without_bb_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message_without_bb_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_SendChatMessage_Response.message_without_bb_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SendChatMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SendChatMessage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string modified_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modified_message().data(), static_cast<int>(this->_internal_modified_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_SendChatMessage_Response.modified_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modified_message(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ordinal(), target);
  }

  // optional string message_without_bb_code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_without_bb_code().data(), static_cast<int>(this->_internal_message_without_bb_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_SendChatMessage_Response.message_without_bb_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_without_bb_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SendChatMessage_Response)
  return target;
}

size_t CChatRoom_SendChatMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SendChatMessage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string modified_message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_modified_message());
    }

    // optional string message_without_bb_code = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_without_bb_code());
    }

    // optional uint32 server_timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SendChatMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SendChatMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SendChatMessage_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_SendChatMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SendChatMessage_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_SendChatMessage_Response &>(from));
}


void CChatRoom_SendChatMessage_Response::MergeFrom(const CChatRoom_SendChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SendChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_modified_message(from._internal_modified_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_without_bb_code(from._internal_message_without_bb_code());
    }
    if (cached_has_bits & 0x00000004u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SendChatMessage_Response::CopyFrom(const CChatRoom_SendChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SendChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SendChatMessage_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SendChatMessage_Response::InternalSwap(CChatRoom_SendChatMessage_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modified_message_, lhs_arena,
      &other->modified_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_without_bb_code_, lhs_arena,
      &other->message_without_bb_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SendChatMessage_Response, ordinal_)
      + sizeof(CChatRoom_SendChatMessage_Response::ordinal_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SendChatMessage_Response, server_timestamp_)>(
          reinterpret_cast<char*>(&server_timestamp_),
          reinterpret_cast<char*>(&other->server_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SendChatMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[70]);
}

// ===================================================================

class CChatRoom_JoinVoiceChat_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_JoinVoiceChat_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_JoinVoiceChat_Request::CChatRoom_JoinVoiceChat_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_JoinVoiceChat_Request)
}
CChatRoom_JoinVoiceChat_Request::CChatRoom_JoinVoiceChat_Request(const CChatRoom_JoinVoiceChat_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinVoiceChat_Request)
}

inline void CChatRoom_JoinVoiceChat_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_JoinVoiceChat_Request::~CChatRoom_JoinVoiceChat_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinVoiceChat_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_JoinVoiceChat_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_JoinVoiceChat_Request::ArenaDtor(void* object) {
  CChatRoom_JoinVoiceChat_Request* _this = reinterpret_cast< CChatRoom_JoinVoiceChat_Request* >(object);
  (void)_this;
}
void CChatRoom_JoinVoiceChat_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_JoinVoiceChat_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_JoinVoiceChat_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinVoiceChat_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_JoinVoiceChat_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_JoinVoiceChat_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinVoiceChat_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinVoiceChat_Request)
  return target;
}

size_t CChatRoom_JoinVoiceChat_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinVoiceChat_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_JoinVoiceChat_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_JoinVoiceChat_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_JoinVoiceChat_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_JoinVoiceChat_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_JoinVoiceChat_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_JoinVoiceChat_Request &>(from));
}


void CChatRoom_JoinVoiceChat_Request::MergeFrom(const CChatRoom_JoinVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinVoiceChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_JoinVoiceChat_Request::CopyFrom(const CChatRoom_JoinVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinVoiceChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinVoiceChat_Request::IsInitialized() const {
  return true;
}

void CChatRoom_JoinVoiceChat_Request::InternalSwap(CChatRoom_JoinVoiceChat_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_JoinVoiceChat_Request, chat_id_)
      + sizeof(CChatRoom_JoinVoiceChat_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_JoinVoiceChat_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_JoinVoiceChat_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[71]);
}

// ===================================================================

class CChatRoom_JoinVoiceChat_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_JoinVoiceChat_Response>()._has_bits_);
  static void set_has_voice_chatid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_JoinVoiceChat_Response::CChatRoom_JoinVoiceChat_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_JoinVoiceChat_Response)
}
CChatRoom_JoinVoiceChat_Response::CChatRoom_JoinVoiceChat_Response(const CChatRoom_JoinVoiceChat_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voice_chatid_ = from.voice_chatid_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_JoinVoiceChat_Response)
}

inline void CChatRoom_JoinVoiceChat_Response::SharedCtor() {
voice_chatid_ = uint64_t{0u};
}

CChatRoom_JoinVoiceChat_Response::~CChatRoom_JoinVoiceChat_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_JoinVoiceChat_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_JoinVoiceChat_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_JoinVoiceChat_Response::ArenaDtor(void* object) {
  CChatRoom_JoinVoiceChat_Response* _this = reinterpret_cast< CChatRoom_JoinVoiceChat_Response* >(object);
  (void)_this;
}
void CChatRoom_JoinVoiceChat_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_JoinVoiceChat_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_JoinVoiceChat_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_JoinVoiceChat_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voice_chatid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_JoinVoiceChat_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 voice_chatid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_voice_chatid(&has_bits);
          voice_chatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_JoinVoiceChat_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_JoinVoiceChat_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 voice_chatid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_voice_chatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_JoinVoiceChat_Response)
  return target;
}

size_t CChatRoom_JoinVoiceChat_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_JoinVoiceChat_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 voice_chatid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_voice_chatid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_JoinVoiceChat_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_JoinVoiceChat_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_JoinVoiceChat_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_JoinVoiceChat_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_JoinVoiceChat_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_JoinVoiceChat_Response &>(from));
}


void CChatRoom_JoinVoiceChat_Response::MergeFrom(const CChatRoom_JoinVoiceChat_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_JoinVoiceChat_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_voice_chatid()) {
    _internal_set_voice_chatid(from._internal_voice_chatid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_JoinVoiceChat_Response::CopyFrom(const CChatRoom_JoinVoiceChat_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_JoinVoiceChat_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_JoinVoiceChat_Response::IsInitialized() const {
  return true;
}

void CChatRoom_JoinVoiceChat_Response::InternalSwap(CChatRoom_JoinVoiceChat_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(voice_chatid_, other->voice_chatid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_JoinVoiceChat_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[72]);
}

// ===================================================================

class CChatRoom_LeaveVoiceChat_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_LeaveVoiceChat_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_LeaveVoiceChat_Request::CChatRoom_LeaveVoiceChat_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_LeaveVoiceChat_Request)
}
CChatRoom_LeaveVoiceChat_Request::CChatRoom_LeaveVoiceChat_Request(const CChatRoom_LeaveVoiceChat_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveVoiceChat_Request)
}

inline void CChatRoom_LeaveVoiceChat_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_LeaveVoiceChat_Request::~CChatRoom_LeaveVoiceChat_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_LeaveVoiceChat_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_LeaveVoiceChat_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_LeaveVoiceChat_Request::ArenaDtor(void* object) {
  CChatRoom_LeaveVoiceChat_Request* _this = reinterpret_cast< CChatRoom_LeaveVoiceChat_Request* >(object);
  (void)_this;
}
void CChatRoom_LeaveVoiceChat_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_LeaveVoiceChat_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_LeaveVoiceChat_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_LeaveVoiceChat_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_LeaveVoiceChat_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_LeaveVoiceChat_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_LeaveVoiceChat_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_LeaveVoiceChat_Request)
  return target;
}

size_t CChatRoom_LeaveVoiceChat_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_LeaveVoiceChat_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_LeaveVoiceChat_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_LeaveVoiceChat_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_LeaveVoiceChat_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_LeaveVoiceChat_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_LeaveVoiceChat_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_LeaveVoiceChat_Request &>(from));
}


void CChatRoom_LeaveVoiceChat_Request::MergeFrom(const CChatRoom_LeaveVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_LeaveVoiceChat_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_LeaveVoiceChat_Request::CopyFrom(const CChatRoom_LeaveVoiceChat_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_LeaveVoiceChat_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_LeaveVoiceChat_Request::IsInitialized() const {
  return true;
}

void CChatRoom_LeaveVoiceChat_Request::InternalSwap(CChatRoom_LeaveVoiceChat_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_LeaveVoiceChat_Request, chat_id_)
      + sizeof(CChatRoom_LeaveVoiceChat_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_LeaveVoiceChat_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_LeaveVoiceChat_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[73]);
}

// ===================================================================

class CChatRoom_LeaveVoiceChat_Response::_Internal {
 public:
};

CChatRoom_LeaveVoiceChat_Response::CChatRoom_LeaveVoiceChat_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_LeaveVoiceChat_Response)
}
CChatRoom_LeaveVoiceChat_Response::CChatRoom_LeaveVoiceChat_Response(const CChatRoom_LeaveVoiceChat_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_LeaveVoiceChat_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_LeaveVoiceChat_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_LeaveVoiceChat_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_LeaveVoiceChat_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[74]);
}

// ===================================================================

class CChatRoom_GetMessageHistory_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetMessageHistory_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CChatRoom_GetMessageHistory_Request::CChatRoom_GetMessageHistory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMessageHistory_Request)
}
CChatRoom_GetMessageHistory_Request::CChatRoom_GetMessageHistory_Request(const CChatRoom_GetMessageHistory_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageHistory_Request)
}

inline void CChatRoom_GetMessageHistory_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_count_));
}

CChatRoom_GetMessageHistory_Request::~CChatRoom_GetMessageHistory_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageHistory_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetMessageHistory_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetMessageHistory_Request::ArenaDtor(void* object) {
  CChatRoom_GetMessageHistory_Request* _this = reinterpret_cast< CChatRoom_GetMessageHistory_Request* >(object);
  (void)_this;
}
void CChatRoom_GetMessageHistory_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetMessageHistory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetMessageHistory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageHistory_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_count_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetMessageHistory_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_time(&has_bits);
          last_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_ordinal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_ordinal(&has_bits);
          last_ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_ordinal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_start_ordinal(&has_bits);
          start_ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_max_count(&has_bits);
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetMessageHistory_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageHistory_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional uint32 last_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_time(), target);
  }

  // optional uint32 last_ordinal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_ordinal(), target);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_start_time(), target);
  }

  // optional uint32 start_ordinal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_ordinal(), target);
  }

  // optional uint32 max_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageHistory_Request)
  return target;
}

size_t CChatRoom_GetMessageHistory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageHistory_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 last_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_time());
    }

    // optional uint32 last_ordinal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_ordinal());
    }

    // optional uint32 start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
    }

    // optional uint32 start_ordinal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_ordinal());
    }

    // optional uint32 max_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMessageHistory_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetMessageHistory_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMessageHistory_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetMessageHistory_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetMessageHistory_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetMessageHistory_Request &>(from));
}


void CChatRoom_GetMessageHistory_Request::MergeFrom(const CChatRoom_GetMessageHistory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_time_ = from.last_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_ordinal_ = from.last_ordinal_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_ordinal_ = from.start_ordinal_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_count_ = from.max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetMessageHistory_Request::CopyFrom(const CChatRoom_GetMessageHistory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageHistory_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageHistory_Request::InternalSwap(CChatRoom_GetMessageHistory_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageHistory_Request, max_count_)
      + sizeof(CChatRoom_GetMessageHistory_Request::max_count_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageHistory_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMessageHistory_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[75]);
}

// ===================================================================

class ServerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerMessage>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_string_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ServerMessage::ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    string_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_param()) {
    string_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_param(), 
      GetArenaForAllocation());
  }
  ::memcpy(&message_, &from.message_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_param_) -
    reinterpret_cast<char*>(&message_)) + sizeof(accountid_param_));
  // @@protoc_insertion_point(copy_constructor:ServerMessage)
}

inline void ServerMessage::SharedCtor() {
string_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  string_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_param_) -
    reinterpret_cast<char*>(&message_)) + sizeof(accountid_param_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:ServerMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerMessage::ArenaDtor(void* object) {
  ServerMessage* _this = reinterpret_cast< ServerMessage* >(object);
  (void)_this;
}
void ServerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_param_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&message_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_param_) -
        reinterpret_cast<char*>(&message_)) + sizeof(accountid_param_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EChatRoomServerMessage message = 1 [default = k_EChatRoomServerMsg_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomServerMessage_IsValid(val))) {
            _internal_set_message(static_cast<::EChatRoomServerMessage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string string_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServerMessage.string_param");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_accountid_param(&has_bits);
          accountid_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EChatRoomServerMessage message = 1 [default = k_EChatRoomServerMsg_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message(), target);
  }

  // optional string string_param = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_param().data(), static_cast<int>(this->_internal_string_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ServerMessage.string_param");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string_param(), target);
  }

  // optional uint32 accountid_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accountid_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string string_param = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_param());
    }

    // optional .EChatRoomServerMessage message = 1 [default = k_EChatRoomServerMsg_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message());
    }

    // optional uint32 accountid_param = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_param());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage::GetClassData() const { return &_class_data_; }

void ServerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerMessage *>(to)->MergeFrom(
      static_cast<const ServerMessage &>(from));
}


void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_param(from._internal_string_param());
    }
    if (cached_has_bits & 0x00000002u) {
      message_ = from.message_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_param_ = from.accountid_param_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_param_, lhs_arena,
      &other->string_param_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMessage, accountid_param_)
      + sizeof(ServerMessage::accountid_param_)
      - PROTOBUF_FIELD_OFFSET(ServerMessage, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[76]);
}

// ===================================================================

class CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction>()._has_bits_);
  static void set_has_reaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_reactors(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_user_reacted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
}
CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction(const CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reaction()) {
    reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reaction(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reaction_type_, &from.reaction_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_user_reacted_) -
    reinterpret_cast<char*>(&reaction_type_)) + sizeof(has_user_reacted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
}

inline void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::SharedCtor() {
reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reaction_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_user_reacted_) -
    reinterpret_cast<char*>(&reaction_type_)) + sizeof(has_user_reacted_));
}

CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::~CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::ArenaDtor(void* object) {
  CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction* _this = reinterpret_cast< CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction* >(object);
  (void)_this;
}
void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reaction_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&reaction_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_user_reacted_) -
        reinterpret_cast<char*>(&reaction_type_)) + sizeof(has_user_reacted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EChatRoomMessageReactionType reaction_type = 1 [default = k_EChatRoomMessageReactionType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomMessageReactionType_IsValid(val))) {
            _internal_set_reaction_type(static_cast<::EChatRoomMessageReactionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction.reaction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_reactors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_reactors(&has_bits);
          num_reactors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_user_reacted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_has_user_reacted(&has_bits);
          has_user_reacted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EChatRoomMessageReactionType reaction_type = 1 [default = k_EChatRoomMessageReactionType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reaction_type(), target);
  }

  // optional string reaction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction().data(), static_cast<int>(this->_internal_reaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction.reaction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reaction(), target);
  }

  // optional uint32 num_reactors = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_reactors(), target);
  }

  // optional bool has_user_reacted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_user_reacted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
  return target;
}

size_t CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string reaction = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction());
    }

    // optional .EChatRoomMessageReactionType reaction_type = 1 [default = k_EChatRoomMessageReactionType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction_type());
    }

    // optional uint32 num_reactors = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_reactors());
    }

    // optional bool has_user_reacted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::GetClassData() const { return &_class_data_; }

void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction &>(from));
}


void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::MergeFrom(const CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reaction(from._internal_reaction());
    }
    if (cached_has_bits & 0x00000002u) {
      reaction_type_ = from.reaction_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_reactors_ = from.num_reactors_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_user_reacted_ = from.has_user_reacted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::CopyFrom(const CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::InternalSwap(CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reaction_, lhs_arena,
      &other->reaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, has_user_reacted_)
      + sizeof(CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::has_user_reacted_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction, reaction_type_)>(
          reinterpret_cast<char*>(&reaction_type_),
          reinterpret_cast<char*>(&other->reaction_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[77]);
}

// ===================================================================

class CChatRoom_GetMessageHistory_Response_ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetMessageHistory_Response_ChatMessage>()._has_bits_);
  static void set_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ServerMessage& server_message(const CChatRoom_GetMessageHistory_Response_ChatMessage* msg);
  static void set_has_server_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ServerMessage&
CChatRoom_GetMessageHistory_Response_ChatMessage::_Internal::server_message(const CChatRoom_GetMessageHistory_Response_ChatMessage* msg) {
  return *msg->server_message_;
}
CChatRoom_GetMessageHistory_Response_ChatMessage::CChatRoom_GetMessageHistory_Response_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMessageHistory_Response.ChatMessage)
}
CChatRoom_GetMessageHistory_Response_ChatMessage::CChatRoom_GetMessageHistory_Response_ChatMessage(const CChatRoom_GetMessageHistory_Response_ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reactions_(from.reactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_server_message()) {
    server_message_ = new ::ServerMessage(*from.server_message_);
  } else {
    server_message_ = nullptr;
  }
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(deleted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageHistory_Response.ChatMessage)
}

inline void CChatRoom_GetMessageHistory_Response_ChatMessage::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&server_message_)) + sizeof(deleted_));
}

CChatRoom_GetMessageHistory_Response_ChatMessage::~CChatRoom_GetMessageHistory_Response_ChatMessage() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageHistory_Response.ChatMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetMessageHistory_Response_ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_message_;
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::ArenaDtor(void* object) {
  CChatRoom_GetMessageHistory_Response_ChatMessage* _this = reinterpret_cast< CChatRoom_GetMessageHistory_Response_ChatMessage* >(object);
  (void)_this;
}
void CChatRoom_GetMessageHistory_Response_ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetMessageHistory_Response_ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_message_ != nullptr);
      server_message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deleted_) -
        reinterpret_cast<char*>(&sender_)) + sizeof(deleted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetMessageHistory_Response_ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sender(&has_bits);
          sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetMessageHistory_Response.ChatMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ServerMessage server_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deleted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction reactions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetMessageHistory_Response_ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sender(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_timestamp(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetMessageHistory_Response.ChatMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ordinal(), target);
  }

  // optional .ServerMessage server_message = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::server_message(this), target, stream);
  }

  // optional bool deleted = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_deleted(), target);
  }

  // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction reactions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_reactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageHistory_Response.ChatMessage)
  return target;
}

size_t CChatRoom_GetMessageHistory_Response_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction reactions = 7;
  total_size += 1UL * this->_internal_reactions_size();
  for (const auto& msg : this->reactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .ServerMessage server_message = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_message_);
    }

    // optional uint32 sender = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sender());
    }

    // optional uint32 server_timestamp = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional bool deleted = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMessageHistory_Response_ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetMessageHistory_Response_ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMessageHistory_Response_ChatMessage::GetClassData() const { return &_class_data_; }

void CChatRoom_GetMessageHistory_Response_ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetMessageHistory_Response_ChatMessage *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetMessageHistory_Response_ChatMessage &>(from));
}


void CChatRoom_GetMessageHistory_Response_ChatMessage::MergeFrom(const CChatRoom_GetMessageHistory_Response_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reactions_.MergeFrom(from.reactions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_server_message()->::ServerMessage::MergeFrom(from._internal_server_message());
    }
    if (cached_has_bits & 0x00000004u) {
      sender_ = from.sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000020u) {
      deleted_ = from.deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::CopyFrom(const CChatRoom_GetMessageHistory_Response_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageHistory_Response.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageHistory_Response_ChatMessage::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageHistory_Response_ChatMessage::InternalSwap(CChatRoom_GetMessageHistory_Response_ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reactions_.InternalSwap(&other->reactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageHistory_Response_ChatMessage, deleted_)
      + sizeof(CChatRoom_GetMessageHistory_Response_ChatMessage::deleted_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageHistory_Response_ChatMessage, server_message_)>(
          reinterpret_cast<char*>(&server_message_),
          reinterpret_cast<char*>(&other->server_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMessageHistory_Response_ChatMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[78]);
}

// ===================================================================

class CChatRoom_GetMessageHistory_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetMessageHistory_Response>()._has_bits_);
  static void set_has_more_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetMessageHistory_Response::CChatRoom_GetMessageHistory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMessageHistory_Response)
}
CChatRoom_GetMessageHistory_Response::CChatRoom_GetMessageHistory_Response(const CChatRoom_GetMessageHistory_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  more_available_ = from.more_available_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageHistory_Response)
}

inline void CChatRoom_GetMessageHistory_Response::SharedCtor() {
more_available_ = false;
}

CChatRoom_GetMessageHistory_Response::~CChatRoom_GetMessageHistory_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageHistory_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetMessageHistory_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetMessageHistory_Response::ArenaDtor(void* object) {
  CChatRoom_GetMessageHistory_Response* _this = reinterpret_cast< CChatRoom_GetMessageHistory_Response* >(object);
  (void)_this;
}
void CChatRoom_GetMessageHistory_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetMessageHistory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetMessageHistory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageHistory_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  more_available_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetMessageHistory_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool more_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_more_available(&has_bits);
          more_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetMessageHistory_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageHistory_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool more_available = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_more_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageHistory_Response)
  return target;
}

size_t CChatRoom_GetMessageHistory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageHistory_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_GetMessageHistory_Response.ChatMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool more_available = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMessageHistory_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetMessageHistory_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMessageHistory_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetMessageHistory_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetMessageHistory_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetMessageHistory_Response &>(from));
}


void CChatRoom_GetMessageHistory_Response::MergeFrom(const CChatRoom_GetMessageHistory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from._internal_has_more_available()) {
    _internal_set_more_available(from._internal_more_available());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetMessageHistory_Response::CopyFrom(const CChatRoom_GetMessageHistory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageHistory_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageHistory_Response::InternalSwap(CChatRoom_GetMessageHistory_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  swap(more_available_, other->more_available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMessageHistory_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[79]);
}

// ===================================================================

class CChatRoom_GetMyChatRoomGroups_Request::_Internal {
 public:
};

CChatRoom_GetMyChatRoomGroups_Request::CChatRoom_GetMyChatRoomGroups_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMyChatRoomGroups_Request)
}
CChatRoom_GetMyChatRoomGroups_Request::CChatRoom_GetMyChatRoomGroups_Request(const CChatRoom_GetMyChatRoomGroups_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMyChatRoomGroups_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMyChatRoomGroups_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMyChatRoomGroups_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMyChatRoomGroups_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[80]);
}

// ===================================================================

class CChatRoom_GetChatRoomGroupSummary_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetChatRoomGroupSummary_Response>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chat_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_active_voice_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clanid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_chat_group_tagline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_chat_group_avatar_sha(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_default_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_watching_broadcast_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_watching_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_active_minigame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_avatar_ugc_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CChatRoom_GetChatRoomGroupSummary_Response::CChatRoom_GetChatRoomGroupSummary_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_rooms_(arena),
  top_members_(arena),
  role_ids_(arena),
  role_actions_(arena),
  party_beacons_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetChatRoomGroupSummary_Response)
}
CChatRoom_GetChatRoomGroupSummary_Response::CChatRoom_GetChatRoomGroupSummary_Response(const CChatRoom_GetChatRoomGroupSummary_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chat_rooms_(from.chat_rooms_),
      top_members_(from.top_members_),
      role_ids_(from.role_ids_),
      role_actions_(from.role_actions_),
      party_beacons_(from.party_beacons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_group_name()) {
    chat_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_name(), 
      GetArenaForAllocation());
  }
  chat_group_tagline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_group_tagline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_group_tagline()) {
    chat_group_tagline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_tagline(), 
      GetArenaForAllocation());
  }
  chat_group_avatar_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_group_avatar_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_group_avatar_sha()) {
    chat_group_avatar_sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_avatar_sha(), 
      GetArenaForAllocation());
  }
  avatar_ugc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_ugc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_ugc_url()) {
    avatar_ugc_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_ugc_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_minigame_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(active_minigame_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupSummary_Response)
}

inline void CChatRoom_GetChatRoomGroupSummary_Response::SharedCtor() {
chat_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_group_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_tagline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_group_tagline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_avatar_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_group_avatar_sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
avatar_ugc_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_ugc_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_minigame_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(active_minigame_id_));
}

CChatRoom_GetChatRoomGroupSummary_Response::~CChatRoom_GetChatRoomGroupSummary_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupSummary_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetChatRoomGroupSummary_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_group_tagline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_group_avatar_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_ugc_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetChatRoomGroupSummary_Response::ArenaDtor(void* object) {
  CChatRoom_GetChatRoomGroupSummary_Response* _this = reinterpret_cast< CChatRoom_GetChatRoomGroupSummary_Response* >(object);
  (void)_this;
}
void CChatRoom_GetChatRoomGroupSummary_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetChatRoomGroupSummary_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetChatRoomGroupSummary_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupSummary_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_rooms_.Clear();
  top_members_.Clear();
  role_ids_.Clear();
  role_actions_.Clear();
  party_beacons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_tagline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_avatar_sha_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      avatar_ugc_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_chat_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&clanid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disabled_) -
        reinterpret_cast<char*>(&clanid_)) + sizeof(disabled_));
  }
  active_minigame_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetChatRoomGroupSummary_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_member_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_active_member_count(&has_bits);
          active_member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_voice_member_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_active_voice_member_count(&has_bits);
          active_voice_member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_chat_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_default_chat_id(&has_bits);
          default_chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoomState chat_rooms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 clanid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_clanid(&has_bits);
          clanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_group_tagline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_chat_group_tagline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_tagline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_accountid_owner(&has_bits);
          accountid_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 top_members = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_top_members(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_top_members(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes chat_group_avatar_sha = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_chat_group_avatar_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomGroupRank rank = 12 [default = k_EChatRoomGroupRank_Default];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomGroupRank_IsValid(val))) {
            _internal_set_rank(static_cast<::EChatRoomGroupRank>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_role_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_default_role_id(&has_bits);
          default_role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 role_ids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_role_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_role_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoleActions role_actions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watching_broadcast_accountid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_watching_broadcast_accountid(&has_bits);
          watching_broadcast_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatPartyBeacon party_beacons = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_party_beacons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 watching_broadcast_channel_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_watching_broadcast_channel_id(&has_bits);
          watching_broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 active_minigame_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_active_minigame_id(&has_bits);
          active_minigame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_ugc_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_avatar_ugc_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetChatRoomGroupSummary_Response.avatar_ugc_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_disabled(&has_bits);
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetChatRoomGroupSummary_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupSummary_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string chat_group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_group_name().data(), static_cast<int>(this->_internal_chat_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_group_name(), target);
  }

  // optional uint32 active_member_count = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_active_member_count(), target);
  }

  // optional uint32 active_voice_member_count = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_active_voice_member_count(), target);
  }

  // optional uint64 default_chat_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_default_chat_id(), target);
  }

  // repeated .CChatRoomState chat_rooms = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chat_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_chat_rooms(i), target, stream);
  }

  // optional uint32 clanid = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_clanid(), target);
  }

  // optional string chat_group_tagline = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_group_tagline().data(), static_cast<int>(this->_internal_chat_group_tagline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetChatRoomGroupSummary_Response.chat_group_tagline");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_chat_group_tagline(), target);
  }

  // optional uint32 accountid_owner = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_accountid_owner(), target);
  }

  // repeated uint32 top_members = 10;
  for (int i = 0, n = this->_internal_top_members_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_top_members(i), target);
  }

  // optional bytes chat_group_avatar_sha = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_chat_group_avatar_sha(), target);
  }

  // optional .EChatRoomGroupRank rank = 12 [default = k_EChatRoomGroupRank_Default];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_rank(), target);
  }

  // optional uint64 default_role_id = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_default_role_id(), target);
  }

  // repeated uint64 role_ids = 14;
  for (int i = 0, n = this->_internal_role_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_role_ids(i), target);
  }

  // repeated .CChatRoleActions role_actions = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_role_actions(i), target, stream);
  }

  // optional uint32 watching_broadcast_accountid = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_watching_broadcast_accountid(), target);
  }

  // optional uint32 appid = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_appid(), target);
  }

  // repeated .CChatPartyBeacon party_beacons = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_beacons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_party_beacons(i), target, stream);
  }

  // optional uint64 watching_broadcast_channel_id = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_watching_broadcast_channel_id(), target);
  }

  // optional uint64 active_minigame_id = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_active_minigame_id(), target);
  }

  // optional string avatar_ugc_url = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar_ugc_url().data(), static_cast<int>(this->_internal_avatar_ugc_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetChatRoomGroupSummary_Response.avatar_ugc_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_ugc_url(), target);
  }

  // optional bool disabled = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupSummary_Response)
  return target;
}

size_t CChatRoom_GetChatRoomGroupSummary_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupSummary_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoomState chat_rooms = 6;
  total_size += 1UL * this->_internal_chat_rooms_size();
  for (const auto& msg : this->chat_rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 top_members = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->top_members_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_top_members_size());
    total_size += data_size;
  }

  // repeated uint64 role_ids = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->role_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_role_ids_size());
    total_size += data_size;
  }

  // repeated .CChatRoleActions role_actions = 15;
  total_size += 1UL * this->_internal_role_actions_size();
  for (const auto& msg : this->role_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CChatPartyBeacon party_beacons = 18;
  total_size += 2UL * this->_internal_party_beacons_size();
  for (const auto& msg : this->party_beacons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string chat_group_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_group_name());
    }

    // optional string chat_group_tagline = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_group_tagline());
    }

    // optional bytes chat_group_avatar_sha = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chat_group_avatar_sha());
    }

    // optional string avatar_ugc_url = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_ugc_url());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint32 active_member_count = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_active_member_count());
    }

    // optional uint32 active_voice_member_count = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_active_voice_member_count());
    }

    // optional uint64 default_chat_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_default_chat_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 clanid = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_clanid());
    }

    // optional uint32 accountid_owner = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_owner());
    }

    // optional uint64 default_role_id = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_default_role_id());
    }

    // optional .EChatRoomGroupRank rank = 12 [default = k_EChatRoomGroupRank_Default];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rank());
    }

    // optional uint32 watching_broadcast_accountid = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_watching_broadcast_accountid());
    }

    // optional uint64 watching_broadcast_channel_id = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_watching_broadcast_channel_id());
    }

    // optional uint32 appid = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional bool disabled = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional uint64 active_minigame_id = 20;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_active_minigame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetChatRoomGroupSummary_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetChatRoomGroupSummary_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetChatRoomGroupSummary_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetChatRoomGroupSummary_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetChatRoomGroupSummary_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetChatRoomGroupSummary_Response &>(from));
}


void CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(const CChatRoom_GetChatRoomGroupSummary_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupSummary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_rooms_.MergeFrom(from.chat_rooms_);
  top_members_.MergeFrom(from.top_members_);
  role_ids_.MergeFrom(from.role_ids_);
  role_actions_.MergeFrom(from.role_actions_);
  party_beacons_.MergeFrom(from.party_beacons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chat_group_name(from._internal_chat_group_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_chat_group_tagline(from._internal_chat_group_tagline());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_chat_group_avatar_sha(from._internal_chat_group_avatar_sha());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_avatar_ugc_url(from._internal_avatar_ugc_url());
    }
    if (cached_has_bits & 0x00000010u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      active_member_count_ = from.active_member_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      active_voice_member_count_ = from.active_voice_member_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_chat_id_ = from.default_chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      clanid_ = from.clanid_;
    }
    if (cached_has_bits & 0x00000200u) {
      accountid_owner_ = from.accountid_owner_;
    }
    if (cached_has_bits & 0x00000400u) {
      default_role_id_ = from.default_role_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00001000u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    if (cached_has_bits & 0x00002000u) {
      watching_broadcast_channel_id_ = from.watching_broadcast_channel_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00008000u) {
      disabled_ = from.disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_active_minigame_id(from._internal_active_minigame_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetChatRoomGroupSummary_Response::CopyFrom(const CChatRoom_GetChatRoomGroupSummary_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupSummary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupSummary_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupSummary_Response::InternalSwap(CChatRoom_GetChatRoomGroupSummary_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chat_rooms_.InternalSwap(&other->chat_rooms_);
  top_members_.InternalSwap(&other->top_members_);
  role_ids_.InternalSwap(&other->role_ids_);
  role_actions_.InternalSwap(&other->role_actions_);
  party_beacons_.InternalSwap(&other->party_beacons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_name_, lhs_arena,
      &other->chat_group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_tagline_, lhs_arena,
      &other->chat_group_tagline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_avatar_sha_, lhs_arena,
      &other->chat_group_avatar_sha_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_ugc_url_, lhs_arena,
      &other->avatar_ugc_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetChatRoomGroupSummary_Response, active_minigame_id_)
      + sizeof(CChatRoom_GetChatRoomGroupSummary_Response::active_minigame_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetChatRoomGroupSummary_Response, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetChatRoomGroupSummary_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[81]);
}

// ===================================================================

class CChatRoomSummaryPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomSummaryPair>()._has_bits_);
  static const ::CUserChatRoomGroupState& user_chat_group_state(const CChatRoomSummaryPair* msg);
  static void set_has_user_chat_group_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CChatRoom_GetChatRoomGroupSummary_Response& group_summary(const CChatRoomSummaryPair* msg);
  static void set_has_group_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CUserChatRoomGroupState&
CChatRoomSummaryPair::_Internal::user_chat_group_state(const CChatRoomSummaryPair* msg) {
  return *msg->user_chat_group_state_;
}
const ::CChatRoom_GetChatRoomGroupSummary_Response&
CChatRoomSummaryPair::_Internal::group_summary(const CChatRoomSummaryPair* msg) {
  return *msg->group_summary_;
}
CChatRoomSummaryPair::CChatRoomSummaryPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomSummaryPair)
}
CChatRoomSummaryPair::CChatRoomSummaryPair(const CChatRoomSummaryPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_chat_group_state()) {
    user_chat_group_state_ = new ::CUserChatRoomGroupState(*from.user_chat_group_state_);
  } else {
    user_chat_group_state_ = nullptr;
  }
  if (from._internal_has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoomSummaryPair)
}

inline void CChatRoomSummaryPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_chat_group_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_summary_) -
    reinterpret_cast<char*>(&user_chat_group_state_)) + sizeof(group_summary_));
}

CChatRoomSummaryPair::~CChatRoomSummaryPair() {
  // @@protoc_insertion_point(destructor:CChatRoomSummaryPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomSummaryPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_chat_group_state_;
  if (this != internal_default_instance()) delete group_summary_;
}

void CChatRoomSummaryPair::ArenaDtor(void* object) {
  CChatRoomSummaryPair* _this = reinterpret_cast< CChatRoomSummaryPair* >(object);
  (void)_this;
}
void CChatRoomSummaryPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomSummaryPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomSummaryPair::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomSummaryPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_chat_group_state_ != nullptr);
      user_chat_group_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_summary_ != nullptr);
      group_summary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomSummaryPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CUserChatRoomGroupState user_chat_group_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_chat_group_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomSummaryPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomSummaryPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CUserChatRoomGroupState user_chat_group_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_chat_group_state(this), target, stream);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomSummaryPair)
  return target;
}

size_t CChatRoomSummaryPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomSummaryPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CUserChatRoomGroupState user_chat_group_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_chat_group_state_);
    }

    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomSummaryPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomSummaryPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomSummaryPair::GetClassData() const { return &_class_data_; }

void CChatRoomSummaryPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomSummaryPair *>(to)->MergeFrom(
      static_cast<const CChatRoomSummaryPair &>(from));
}


void CChatRoomSummaryPair::MergeFrom(const CChatRoomSummaryPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomSummaryPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_user_chat_group_state()->::CUserChatRoomGroupState::MergeFrom(from._internal_user_chat_group_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from._internal_group_summary());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomSummaryPair::CopyFrom(const CChatRoomSummaryPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomSummaryPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomSummaryPair::IsInitialized() const {
  return true;
}

void CChatRoomSummaryPair::InternalSwap(CChatRoomSummaryPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomSummaryPair, group_summary_)
      + sizeof(CChatRoomSummaryPair::group_summary_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomSummaryPair, user_chat_group_state_)>(
          reinterpret_cast<char*>(&user_chat_group_state_),
          reinterpret_cast<char*>(&other->user_chat_group_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomSummaryPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[82]);
}

// ===================================================================

class CChatRoom_GetMyChatRoomGroups_Response::_Internal {
 public:
};

CChatRoom_GetMyChatRoomGroups_Response::CChatRoom_GetMyChatRoomGroups_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_room_groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMyChatRoomGroups_Response)
}
CChatRoom_GetMyChatRoomGroups_Response::CChatRoom_GetMyChatRoomGroups_Response(const CChatRoom_GetMyChatRoomGroups_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chat_room_groups_(from.chat_room_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMyChatRoomGroups_Response)
}

inline void CChatRoom_GetMyChatRoomGroups_Response::SharedCtor() {
}

CChatRoom_GetMyChatRoomGroups_Response::~CChatRoom_GetMyChatRoomGroups_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMyChatRoomGroups_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetMyChatRoomGroups_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetMyChatRoomGroups_Response::ArenaDtor(void* object) {
  CChatRoom_GetMyChatRoomGroups_Response* _this = reinterpret_cast< CChatRoom_GetMyChatRoomGroups_Response* >(object);
  (void)_this;
}
void CChatRoom_GetMyChatRoomGroups_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetMyChatRoomGroups_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetMyChatRoomGroups_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMyChatRoomGroups_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_room_groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetMyChatRoomGroups_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoomSummaryPair chat_room_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_room_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetMyChatRoomGroups_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMyChatRoomGroups_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomSummaryPair chat_room_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chat_room_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chat_room_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMyChatRoomGroups_Response)
  return target;
}

size_t CChatRoom_GetMyChatRoomGroups_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMyChatRoomGroups_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoomSummaryPair chat_room_groups = 1;
  total_size += 1UL * this->_internal_chat_room_groups_size();
  for (const auto& msg : this->chat_room_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMyChatRoomGroups_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetMyChatRoomGroups_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMyChatRoomGroups_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetMyChatRoomGroups_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetMyChatRoomGroups_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetMyChatRoomGroups_Response &>(from));
}


void CChatRoom_GetMyChatRoomGroups_Response::MergeFrom(const CChatRoom_GetMyChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMyChatRoomGroups_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_room_groups_.MergeFrom(from.chat_room_groups_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetMyChatRoomGroups_Response::CopyFrom(const CChatRoom_GetMyChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMyChatRoomGroups_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMyChatRoomGroups_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetMyChatRoomGroups_Response::InternalSwap(CChatRoom_GetMyChatRoomGroups_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chat_room_groups_.InternalSwap(&other->chat_room_groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMyChatRoomGroups_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[83]);
}

// ===================================================================

class CChatRoom_GetChatRoomGroupState_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetChatRoomGroupState_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetChatRoomGroupState_Request::CChatRoom_GetChatRoomGroupState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetChatRoomGroupState_Request)
}
CChatRoom_GetChatRoomGroupState_Request::CChatRoom_GetChatRoomGroupState_Request(const CChatRoom_GetChatRoomGroupState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupState_Request)
}

inline void CChatRoom_GetChatRoomGroupState_Request::SharedCtor() {
chat_group_id_ = uint64_t{0u};
}

CChatRoom_GetChatRoomGroupState_Request::~CChatRoom_GetChatRoomGroupState_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupState_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetChatRoomGroupState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetChatRoomGroupState_Request::ArenaDtor(void* object) {
  CChatRoom_GetChatRoomGroupState_Request* _this = reinterpret_cast< CChatRoom_GetChatRoomGroupState_Request* >(object);
  (void)_this;
}
void CChatRoom_GetChatRoomGroupState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetChatRoomGroupState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetChatRoomGroupState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupState_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetChatRoomGroupState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetChatRoomGroupState_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupState_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupState_Request)
  return target;
}

size_t CChatRoom_GetChatRoomGroupState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupState_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 chat_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetChatRoomGroupState_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetChatRoomGroupState_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetChatRoomGroupState_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetChatRoomGroupState_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetChatRoomGroupState_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetChatRoomGroupState_Request &>(from));
}


void CChatRoom_GetChatRoomGroupState_Request::MergeFrom(const CChatRoom_GetChatRoomGroupState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_id()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetChatRoomGroupState_Request::CopyFrom(const CChatRoom_GetChatRoomGroupState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupState_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupState_Request::InternalSwap(CChatRoom_GetChatRoomGroupState_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetChatRoomGroupState_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[84]);
}

// ===================================================================

class CChatRoom_GetChatRoomGroupState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetChatRoomGroupState_Response>()._has_bits_);
  static const ::CChatRoomGroupState& state(const CChatRoom_GetChatRoomGroupState_Response* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CChatRoomGroupState&
CChatRoom_GetChatRoomGroupState_Response::_Internal::state(const CChatRoom_GetChatRoomGroupState_Response* msg) {
  return *msg->state_;
}
CChatRoom_GetChatRoomGroupState_Response::CChatRoom_GetChatRoomGroupState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetChatRoomGroupState_Response)
}
CChatRoom_GetChatRoomGroupState_Response::CChatRoom_GetChatRoomGroupState_Response(const CChatRoom_GetChatRoomGroupState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::CChatRoomGroupState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupState_Response)
}

inline void CChatRoom_GetChatRoomGroupState_Response::SharedCtor() {
state_ = nullptr;
}

CChatRoom_GetChatRoomGroupState_Response::~CChatRoom_GetChatRoomGroupState_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupState_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetChatRoomGroupState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void CChatRoom_GetChatRoomGroupState_Response::ArenaDtor(void* object) {
  CChatRoom_GetChatRoomGroupState_Response* _this = reinterpret_cast< CChatRoom_GetChatRoomGroupState_Response* >(object);
  (void)_this;
}
void CChatRoom_GetChatRoomGroupState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetChatRoomGroupState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetChatRoomGroupState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupState_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetChatRoomGroupState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoomGroupState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetChatRoomGroupState_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupState_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupState_Response)
  return target;
}

size_t CChatRoom_GetChatRoomGroupState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupState_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CChatRoomGroupState state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetChatRoomGroupState_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetChatRoomGroupState_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetChatRoomGroupState_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetChatRoomGroupState_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetChatRoomGroupState_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetChatRoomGroupState_Response &>(from));
}


void CChatRoom_GetChatRoomGroupState_Response::MergeFrom(const CChatRoom_GetChatRoomGroupState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::CChatRoomGroupState::MergeFrom(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetChatRoomGroupState_Response::CopyFrom(const CChatRoom_GetChatRoomGroupState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupState_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupState_Response::InternalSwap(CChatRoom_GetChatRoomGroupState_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetChatRoomGroupState_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[85]);
}

// ===================================================================

class CChatRoom_GetChatRoomGroupSummary_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetChatRoomGroupSummary_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetChatRoomGroupSummary_Request::CChatRoom_GetChatRoomGroupSummary_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetChatRoomGroupSummary_Request)
}
CChatRoom_GetChatRoomGroupSummary_Request::CChatRoom_GetChatRoomGroupSummary_Request(const CChatRoom_GetChatRoomGroupSummary_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetChatRoomGroupSummary_Request)
}

inline void CChatRoom_GetChatRoomGroupSummary_Request::SharedCtor() {
chat_group_id_ = uint64_t{0u};
}

CChatRoom_GetChatRoomGroupSummary_Request::~CChatRoom_GetChatRoomGroupSummary_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetChatRoomGroupSummary_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetChatRoomGroupSummary_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetChatRoomGroupSummary_Request::ArenaDtor(void* object) {
  CChatRoom_GetChatRoomGroupSummary_Request* _this = reinterpret_cast< CChatRoom_GetChatRoomGroupSummary_Request* >(object);
  (void)_this;
}
void CChatRoom_GetChatRoomGroupSummary_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetChatRoomGroupSummary_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetChatRoomGroupSummary_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetChatRoomGroupSummary_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetChatRoomGroupSummary_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetChatRoomGroupSummary_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetChatRoomGroupSummary_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetChatRoomGroupSummary_Request)
  return target;
}

size_t CChatRoom_GetChatRoomGroupSummary_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetChatRoomGroupSummary_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 chat_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetChatRoomGroupSummary_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetChatRoomGroupSummary_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetChatRoomGroupSummary_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetChatRoomGroupSummary_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetChatRoomGroupSummary_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetChatRoomGroupSummary_Request &>(from));
}


void CChatRoom_GetChatRoomGroupSummary_Request::MergeFrom(const CChatRoom_GetChatRoomGroupSummary_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetChatRoomGroupSummary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_id()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetChatRoomGroupSummary_Request::CopyFrom(const CChatRoom_GetChatRoomGroupSummary_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetChatRoomGroupSummary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetChatRoomGroupSummary_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetChatRoomGroupSummary_Request::InternalSwap(CChatRoom_GetChatRoomGroupSummary_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetChatRoomGroupSummary_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[86]);
}

// ===================================================================

class CChatRoom_SetAppChatRoomGroupForceActive_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetAppChatRoomGroupForceActive_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requesting_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_SetAppChatRoomGroupForceActive_Request::CChatRoom_SetAppChatRoomGroupForceActive_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetAppChatRoomGroupForceActive_Request)
}
CChatRoom_SetAppChatRoomGroupForceActive_Request::CChatRoom_SetAppChatRoomGroupForceActive_Request(const CChatRoom_SetAppChatRoomGroupForceActive_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&requesting_app_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(requesting_app_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetAppChatRoomGroupForceActive_Request)
}

inline void CChatRoom_SetAppChatRoomGroupForceActive_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requesting_app_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(requesting_app_id_));
}

CChatRoom_SetAppChatRoomGroupForceActive_Request::~CChatRoom_SetAppChatRoomGroupForceActive_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetAppChatRoomGroupForceActive_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetAppChatRoomGroupForceActive_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetAppChatRoomGroupForceActive_Request::ArenaDtor(void* object) {
  CChatRoom_SetAppChatRoomGroupForceActive_Request* _this = reinterpret_cast< CChatRoom_SetAppChatRoomGroupForceActive_Request* >(object);
  (void)_this;
}
void CChatRoom_SetAppChatRoomGroupForceActive_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetAppChatRoomGroupForceActive_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetAppChatRoomGroupForceActive_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetAppChatRoomGroupForceActive_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requesting_app_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(requesting_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetAppChatRoomGroupForceActive_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 requesting_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_requesting_app_id(&has_bits);
          requesting_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetAppChatRoomGroupForceActive_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetAppChatRoomGroupForceActive_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint32 requesting_app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_requesting_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetAppChatRoomGroupForceActive_Request)
  return target;
}

size_t CChatRoom_SetAppChatRoomGroupForceActive_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetAppChatRoomGroupForceActive_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint32 requesting_app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requesting_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetAppChatRoomGroupForceActive_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetAppChatRoomGroupForceActive_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetAppChatRoomGroupForceActive_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SetAppChatRoomGroupForceActive_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetAppChatRoomGroupForceActive_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetAppChatRoomGroupForceActive_Request &>(from));
}


void CChatRoom_SetAppChatRoomGroupForceActive_Request::MergeFrom(const CChatRoom_SetAppChatRoomGroupForceActive_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetAppChatRoomGroupForceActive_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      requesting_app_id_ = from.requesting_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetAppChatRoomGroupForceActive_Request::CopyFrom(const CChatRoom_SetAppChatRoomGroupForceActive_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetAppChatRoomGroupForceActive_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetAppChatRoomGroupForceActive_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetAppChatRoomGroupForceActive_Request::InternalSwap(CChatRoom_SetAppChatRoomGroupForceActive_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SetAppChatRoomGroupForceActive_Request, requesting_app_id_)
      + sizeof(CChatRoom_SetAppChatRoomGroupForceActive_Request::requesting_app_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SetAppChatRoomGroupForceActive_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetAppChatRoomGroupForceActive_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[87]);
}

// ===================================================================

class CChatRoom_SetAppChatRoomGroupForceActive_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetAppChatRoomGroupForceActive_Response>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_SetAppChatRoomGroupForceActive_Response::CChatRoom_SetAppChatRoomGroupForceActive_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  accounts_in_channel_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetAppChatRoomGroupForceActive_Response)
}
CChatRoom_SetAppChatRoomGroupForceActive_Response::CChatRoom_SetAppChatRoomGroupForceActive_Response(const CChatRoom_SetAppChatRoomGroupForceActive_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      accounts_in_channel_(from.accounts_in_channel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetAppChatRoomGroupForceActive_Response)
}

inline void CChatRoom_SetAppChatRoomGroupForceActive_Response::SharedCtor() {
result_ = 0u;
}

CChatRoom_SetAppChatRoomGroupForceActive_Response::~CChatRoom_SetAppChatRoomGroupForceActive_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetAppChatRoomGroupForceActive_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetAppChatRoomGroupForceActive_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetAppChatRoomGroupForceActive_Response::ArenaDtor(void* object) {
  CChatRoom_SetAppChatRoomGroupForceActive_Response* _this = reinterpret_cast< CChatRoom_SetAppChatRoomGroupForceActive_Response* >(object);
  (void)_this;
}
void CChatRoom_SetAppChatRoomGroupForceActive_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetAppChatRoomGroupForceActive_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetAppChatRoomGroupForceActive_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetAppChatRoomGroupForceActive_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_in_channel_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetAppChatRoomGroupForceActive_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 accounts_in_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_accounts_in_channel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_accounts_in_channel(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetAppChatRoomGroupForceActive_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetAppChatRoomGroupForceActive_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated uint32 accounts_in_channel = 2;
  for (int i = 0, n = this->_internal_accounts_in_channel_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accounts_in_channel(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetAppChatRoomGroupForceActive_Response)
  return target;
}

size_t CChatRoom_SetAppChatRoomGroupForceActive_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetAppChatRoomGroupForceActive_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 accounts_in_channel = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->accounts_in_channel_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_accounts_in_channel_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetAppChatRoomGroupForceActive_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetAppChatRoomGroupForceActive_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetAppChatRoomGroupForceActive_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_SetAppChatRoomGroupForceActive_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetAppChatRoomGroupForceActive_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetAppChatRoomGroupForceActive_Response &>(from));
}


void CChatRoom_SetAppChatRoomGroupForceActive_Response::MergeFrom(const CChatRoom_SetAppChatRoomGroupForceActive_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetAppChatRoomGroupForceActive_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_in_channel_.MergeFrom(from.accounts_in_channel_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetAppChatRoomGroupForceActive_Response::CopyFrom(const CChatRoom_SetAppChatRoomGroupForceActive_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetAppChatRoomGroupForceActive_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetAppChatRoomGroupForceActive_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetAppChatRoomGroupForceActive_Response::InternalSwap(CChatRoom_SetAppChatRoomGroupForceActive_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accounts_in_channel_.InternalSwap(&other->accounts_in_channel_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetAppChatRoomGroupForceActive_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[88]);
}

// ===================================================================

class CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetAppChatRoomGroupStopForceActive_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requesting_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
}
CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification(const CChatRoom_SetAppChatRoomGroupStopForceActive_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&requesting_app_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(requesting_app_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
}

inline void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requesting_app_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(requesting_app_id_));
}

CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::~CChatRoom_SetAppChatRoomGroupStopForceActive_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::ArenaDtor(void* object) {
  CChatRoom_SetAppChatRoomGroupStopForceActive_Notification* _this = reinterpret_cast< CChatRoom_SetAppChatRoomGroupStopForceActive_Notification* >(object);
  (void)_this;
}
void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requesting_app_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(requesting_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 requesting_app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_requesting_app_id(&has_bits);
          requesting_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint32 requesting_app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_requesting_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
  return target;
}

size_t CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint32 requesting_app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requesting_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetAppChatRoomGroupStopForceActive_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetAppChatRoomGroupStopForceActive_Notification &>(from));
}


void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::MergeFrom(const CChatRoom_SetAppChatRoomGroupStopForceActive_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      requesting_app_id_ = from.requesting_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::CopyFrom(const CChatRoom_SetAppChatRoomGroupStopForceActive_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::InternalSwap(CChatRoom_SetAppChatRoomGroupStopForceActive_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, requesting_app_id_)
      + sizeof(CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::requesting_app_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SetAppChatRoomGroupStopForceActive_Notification, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[89]);
}

// ===================================================================

class CChatRoom_AckChatMessage_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_AckChatMessage_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_AckChatMessage_Notification::CChatRoom_AckChatMessage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_AckChatMessage_Notification)
}
CChatRoom_AckChatMessage_Notification::CChatRoom_AckChatMessage_Notification(const CChatRoom_AckChatMessage_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_AckChatMessage_Notification)
}

inline void CChatRoom_AckChatMessage_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(timestamp_));
}

CChatRoom_AckChatMessage_Notification::~CChatRoom_AckChatMessage_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_AckChatMessage_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_AckChatMessage_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_AckChatMessage_Notification::ArenaDtor(void* object) {
  CChatRoom_AckChatMessage_Notification* _this = reinterpret_cast< CChatRoom_AckChatMessage_Notification* >(object);
  (void)_this;
}
void CChatRoom_AckChatMessage_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_AckChatMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_AckChatMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_AckChatMessage_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_AckChatMessage_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_AckChatMessage_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_AckChatMessage_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_AckChatMessage_Notification)
  return target;
}

size_t CChatRoom_AckChatMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_AckChatMessage_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_AckChatMessage_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_AckChatMessage_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_AckChatMessage_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_AckChatMessage_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_AckChatMessage_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_AckChatMessage_Notification &>(from));
}


void CChatRoom_AckChatMessage_Notification::MergeFrom(const CChatRoom_AckChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_AckChatMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_AckChatMessage_Notification::CopyFrom(const CChatRoom_AckChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_AckChatMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_AckChatMessage_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_AckChatMessage_Notification::InternalSwap(CChatRoom_AckChatMessage_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_AckChatMessage_Notification, timestamp_)
      + sizeof(CChatRoom_AckChatMessage_Notification::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_AckChatMessage_Notification, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_AckChatMessage_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[90]);
}

// ===================================================================

class CChatRoom_CreateInviteLink_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateInviteLink_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_CreateInviteLink_Request::CChatRoom_CreateInviteLink_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateInviteLink_Request)
}
CChatRoom_CreateInviteLink_Request::CChatRoom_CreateInviteLink_Request(const CChatRoom_CreateInviteLink_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_valid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(seconds_valid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateInviteLink_Request)
}

inline void CChatRoom_CreateInviteLink_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_valid_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(seconds_valid_));
}

CChatRoom_CreateInviteLink_Request::~CChatRoom_CreateInviteLink_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateInviteLink_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateInviteLink_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_CreateInviteLink_Request::ArenaDtor(void* object) {
  CChatRoom_CreateInviteLink_Request* _this = reinterpret_cast< CChatRoom_CreateInviteLink_Request* >(object);
  (void)_this;
}
void CChatRoom_CreateInviteLink_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateInviteLink_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateInviteLink_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateInviteLink_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_valid_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(seconds_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateInviteLink_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seconds_valid(&has_bits);
          seconds_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateInviteLink_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateInviteLink_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint32 seconds_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_valid(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateInviteLink_Request)
  return target;
}

size_t CChatRoom_CreateInviteLink_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateInviteLink_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 seconds_valid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_valid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateInviteLink_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateInviteLink_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateInviteLink_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateInviteLink_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateInviteLink_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateInviteLink_Request &>(from));
}


void CChatRoom_CreateInviteLink_Request::MergeFrom(const CChatRoom_CreateInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateInviteLink_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_valid_ = from.seconds_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateInviteLink_Request::CopyFrom(const CChatRoom_CreateInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateInviteLink_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateInviteLink_Request::IsInitialized() const {
  return true;
}

void CChatRoom_CreateInviteLink_Request::InternalSwap(CChatRoom_CreateInviteLink_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_CreateInviteLink_Request, seconds_valid_)
      + sizeof(CChatRoom_CreateInviteLink_Request::seconds_valid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_CreateInviteLink_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateInviteLink_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[91]);
}

// ===================================================================

class CChatRoom_CreateInviteLink_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_CreateInviteLink_Response>()._has_bits_);
  static void set_has_invite_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_CreateInviteLink_Response::CChatRoom_CreateInviteLink_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_CreateInviteLink_Response)
}
CChatRoom_CreateInviteLink_Response::CChatRoom_CreateInviteLink_Response(const CChatRoom_CreateInviteLink_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invite_code()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArenaForAllocation());
  }
  seconds_valid_ = from.seconds_valid_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_CreateInviteLink_Response)
}

inline void CChatRoom_CreateInviteLink_Response::SharedCtor() {
invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seconds_valid_ = 0u;
}

CChatRoom_CreateInviteLink_Response::~CChatRoom_CreateInviteLink_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_CreateInviteLink_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_CreateInviteLink_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_CreateInviteLink_Response::ArenaDtor(void* object) {
  CChatRoom_CreateInviteLink_Response* _this = reinterpret_cast< CChatRoom_CreateInviteLink_Response* >(object);
  (void)_this;
}
void CChatRoom_CreateInviteLink_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_CreateInviteLink_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_CreateInviteLink_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_CreateInviteLink_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmpty();
  }
  seconds_valid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_CreateInviteLink_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invite_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_CreateInviteLink_Response.invite_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seconds_valid(&has_bits);
          seconds_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_CreateInviteLink_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_CreateInviteLink_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_CreateInviteLink_Response.invite_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invite_code(), target);
  }

  // optional uint32 seconds_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_CreateInviteLink_Response)
  return target;
}

size_t CChatRoom_CreateInviteLink_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_CreateInviteLink_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invite_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_code());
    }

    // optional uint32 seconds_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_valid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_CreateInviteLink_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_CreateInviteLink_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_CreateInviteLink_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_CreateInviteLink_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_CreateInviteLink_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_CreateInviteLink_Response &>(from));
}


void CChatRoom_CreateInviteLink_Response::MergeFrom(const CChatRoom_CreateInviteLink_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_CreateInviteLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_code(from._internal_invite_code());
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_valid_ = from.seconds_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_CreateInviteLink_Response::CopyFrom(const CChatRoom_CreateInviteLink_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_CreateInviteLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_CreateInviteLink_Response::IsInitialized() const {
  return true;
}

void CChatRoom_CreateInviteLink_Response::InternalSwap(CChatRoom_CreateInviteLink_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invite_code_, lhs_arena,
      &other->invite_code_, rhs_arena
  );
  swap(seconds_valid_, other->seconds_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_CreateInviteLink_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[92]);
}

// ===================================================================

class CChatRoom_GetInviteLinkInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetInviteLinkInfo_Request>()._has_bits_);
  static void set_has_invite_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetInviteLinkInfo_Request::CChatRoom_GetInviteLinkInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteLinkInfo_Request)
}
CChatRoom_GetInviteLinkInfo_Request::CChatRoom_GetInviteLinkInfo_Request(const CChatRoom_GetInviteLinkInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invite_code()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinkInfo_Request)
}

inline void CChatRoom_GetInviteLinkInfo_Request::SharedCtor() {
invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CChatRoom_GetInviteLinkInfo_Request::~CChatRoom_GetInviteLinkInfo_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinkInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteLinkInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetInviteLinkInfo_Request::ArenaDtor(void* object) {
  CChatRoom_GetInviteLinkInfo_Request* _this = reinterpret_cast< CChatRoom_GetInviteLinkInfo_Request* >(object);
  (void)_this;
}
void CChatRoom_GetInviteLinkInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteLinkInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteLinkInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinkInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteLinkInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invite_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetInviteLinkInfo_Request.invite_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteLinkInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinkInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteLinkInfo_Request.invite_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invite_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinkInfo_Request)
  return target;
}

size_t CChatRoom_GetInviteLinkInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinkInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invite_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invite_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteLinkInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteLinkInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteLinkInfo_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteLinkInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteLinkInfo_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteLinkInfo_Request &>(from));
}


void CChatRoom_GetInviteLinkInfo_Request::MergeFrom(const CChatRoom_GetInviteLinkInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinkInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invite_code()) {
    _internal_set_invite_code(from._internal_invite_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteLinkInfo_Request::CopyFrom(const CChatRoom_GetInviteLinkInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinkInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinkInfo_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinkInfo_Request::InternalSwap(CChatRoom_GetInviteLinkInfo_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invite_code_, lhs_arena,
      &other->invite_code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteLinkInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[93]);
}

// ===================================================================

class CChatRoom_GetInviteLinkInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetInviteLinkInfo_Response>()._has_bits_);
  static void set_has_steamid_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CChatRoom_GetChatRoomGroupSummary_Response& group_summary(const CChatRoom_GetInviteLinkInfo_Response* msg);
  static void set_has_group_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CUserChatRoomGroupState& user_chat_group_state(const CChatRoom_GetInviteLinkInfo_Response* msg);
  static void set_has_user_chat_group_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_kick_expire(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CChatRoom_GetChatRoomGroupSummary_Response&
CChatRoom_GetInviteLinkInfo_Response::_Internal::group_summary(const CChatRoom_GetInviteLinkInfo_Response* msg) {
  return *msg->group_summary_;
}
const ::CUserChatRoomGroupState&
CChatRoom_GetInviteLinkInfo_Response::_Internal::user_chat_group_state(const CChatRoom_GetInviteLinkInfo_Response* msg) {
  return *msg->user_chat_group_state_;
}
CChatRoom_GetInviteLinkInfo_Response::CChatRoom_GetInviteLinkInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteLinkInfo_Response)
}
CChatRoom_GetInviteLinkInfo_Response::CChatRoom_GetInviteLinkInfo_Response(const CChatRoom_GetInviteLinkInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = nullptr;
  }
  if (from._internal_has_user_chat_group_state()) {
    user_chat_group_state_ = new ::CUserChatRoomGroupState(*from.user_chat_group_state_);
  } else {
    user_chat_group_state_ = nullptr;
  }
  ::memcpy(&steamid_sender_, &from.steamid_sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&steamid_sender_)) + sizeof(banned_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinkInfo_Response)
}

inline void CChatRoom_GetInviteLinkInfo_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_summary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&group_summary_)) + sizeof(banned_));
}

CChatRoom_GetInviteLinkInfo_Response::~CChatRoom_GetInviteLinkInfo_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinkInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteLinkInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_summary_;
  if (this != internal_default_instance()) delete user_chat_group_state_;
}

void CChatRoom_GetInviteLinkInfo_Response::ArenaDtor(void* object) {
  CChatRoom_GetInviteLinkInfo_Response* _this = reinterpret_cast< CChatRoom_GetInviteLinkInfo_Response* >(object);
  (void)_this;
}
void CChatRoom_GetInviteLinkInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteLinkInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteLinkInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinkInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_summary_ != nullptr);
      group_summary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_chat_group_state_ != nullptr);
      user_chat_group_state_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&steamid_sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banned_) -
        reinterpret_cast<char*>(&steamid_sender_)) + sizeof(banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteLinkInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_steamid_sender(&has_bits);
          steamid_sender_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_expires = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_expires(&has_bits);
          time_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CUserChatRoomGroupState user_chat_group_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_chat_group_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_kick_expire = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_time_kick_expire(&has_bits);
          time_kick_expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool banned = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_banned(&has_bits);
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteLinkInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinkInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid_sender(), target);
  }

  // optional uint32 time_expires = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_expires(), target);
  }

  // optional uint64 chat_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_chat_id(), target);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::group_summary(this), target, stream);
  }

  // optional .CUserChatRoomGroupState user_chat_group_state = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::user_chat_group_state(this), target, stream);
  }

  // optional uint32 time_kick_expire = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_time_kick_expire(), target);
  }

  // optional bool banned = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_banned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinkInfo_Response)
  return target;
}

size_t CChatRoom_GetInviteLinkInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinkInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

    // optional .CUserChatRoomGroupState user_chat_group_state = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_chat_group_state_);
    }

    // optional fixed64 steamid_sender = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 time_expires = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_expires());
    }

    // optional uint32 time_kick_expire = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_kick_expire());
    }

    // optional bool banned = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteLinkInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteLinkInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteLinkInfo_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteLinkInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteLinkInfo_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteLinkInfo_Response &>(from));
}


void CChatRoom_GetInviteLinkInfo_Response::MergeFrom(const CChatRoom_GetInviteLinkInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinkInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from._internal_group_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_user_chat_group_state()->::CUserChatRoomGroupState::MergeFrom(from._internal_user_chat_group_state());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_sender_ = from.steamid_sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_expires_ = from.time_expires_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_kick_expire_ = from.time_kick_expire_;
    }
    if (cached_has_bits & 0x00000040u) {
      banned_ = from.banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteLinkInfo_Response::CopyFrom(const CChatRoom_GetInviteLinkInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinkInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinkInfo_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinkInfo_Response::InternalSwap(CChatRoom_GetInviteLinkInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteLinkInfo_Response, banned_)
      + sizeof(CChatRoom_GetInviteLinkInfo_Response::banned_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteLinkInfo_Response, group_summary_)>(
          reinterpret_cast<char*>(&group_summary_),
          reinterpret_cast<char*>(&other->group_summary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteLinkInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[94]);
}

// ===================================================================

class CChatRoom_GetInviteInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetInviteInfo_Request>()._has_bits_);
  static void set_has_steamid_invitee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_invite_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetInviteInfo_Request::CChatRoom_GetInviteInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteInfo_Request)
}
CChatRoom_GetInviteInfo_Request::CChatRoom_GetInviteInfo_Request(const CChatRoom_GetInviteInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invite_code()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_invitee_, &from.steamid_invitee_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&steamid_invitee_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteInfo_Request)
}

inline void CChatRoom_GetInviteInfo_Request::SharedCtor() {
invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_invitee_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&steamid_invitee_)) + sizeof(chat_id_));
}

CChatRoom_GetInviteInfo_Request::~CChatRoom_GetInviteInfo_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetInviteInfo_Request::ArenaDtor(void* object) {
  CChatRoom_GetInviteInfo_Request* _this = reinterpret_cast< CChatRoom_GetInviteInfo_Request* >(object);
  (void)_this;
}
void CChatRoom_GetInviteInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_invitee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&steamid_invitee_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_invitee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_invitee(&has_bits);
          steamid_invitee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string invite_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetInviteInfo_Request.invite_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_invitee = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_invitee(), target);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_chat_id(), target);
  }

  // optional string invite_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteInfo_Request.invite_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_invite_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteInfo_Request)
  return target;
}

size_t CChatRoom_GetInviteInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string invite_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_code());
    }

    // optional fixed64 steamid_invitee = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_group_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteInfo_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteInfo_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteInfo_Request &>(from));
}


void CChatRoom_GetInviteInfo_Request::MergeFrom(const CChatRoom_GetInviteInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_code(from._internal_invite_code());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_invitee_ = from.steamid_invitee_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteInfo_Request::CopyFrom(const CChatRoom_GetInviteInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteInfo_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteInfo_Request::InternalSwap(CChatRoom_GetInviteInfo_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invite_code_, lhs_arena,
      &other->invite_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteInfo_Request, chat_id_)
      + sizeof(CChatRoom_GetInviteInfo_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteInfo_Request, steamid_invitee_)>(
          reinterpret_cast<char*>(&steamid_invitee_),
          reinterpret_cast<char*>(&other->steamid_invitee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[95]);
}

// ===================================================================

class CChatRoom_GetInviteInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetInviteInfo_Response>()._has_bits_);
  static const ::CChatRoom_GetChatRoomGroupSummary_Response& group_summary(const CChatRoom_GetInviteInfo_Response* msg);
  static void set_has_group_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_kick_expire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CChatRoom_GetChatRoomGroupSummary_Response&
CChatRoom_GetInviteInfo_Response::_Internal::group_summary(const CChatRoom_GetInviteInfo_Response* msg) {
  return *msg->group_summary_;
}
CChatRoom_GetInviteInfo_Response::CChatRoom_GetInviteInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteInfo_Response)
}
CChatRoom_GetInviteInfo_Response::CChatRoom_GetInviteInfo_Response(const CChatRoom_GetInviteInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = nullptr;
  }
  ::memcpy(&time_kick_expire_, &from.time_kick_expire_,
    static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&time_kick_expire_)) + sizeof(banned_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteInfo_Response)
}

inline void CChatRoom_GetInviteInfo_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_summary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&banned_) -
    reinterpret_cast<char*>(&group_summary_)) + sizeof(banned_));
}

CChatRoom_GetInviteInfo_Response::~CChatRoom_GetInviteInfo_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_summary_;
}

void CChatRoom_GetInviteInfo_Response::ArenaDtor(void* object) {
  CChatRoom_GetInviteInfo_Response* _this = reinterpret_cast< CChatRoom_GetInviteInfo_Response* >(object);
  (void)_this;
}
void CChatRoom_GetInviteInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(group_summary_ != nullptr);
    group_summary_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&time_kick_expire_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banned_) -
        reinterpret_cast<char*>(&time_kick_expire_)) + sizeof(banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_kick_expire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_kick_expire(&has_bits);
          time_kick_expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool banned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_banned(&has_bits);
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_summary(this), target, stream);
  }

  // optional uint32 time_kick_expire = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_kick_expire(), target);
  }

  // optional bool banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_banned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteInfo_Response)
  return target;
}

size_t CChatRoom_GetInviteInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

    // optional uint32 time_kick_expire = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_kick_expire());
    }

    // optional bool banned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteInfo_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteInfo_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteInfo_Response &>(from));
}


void CChatRoom_GetInviteInfo_Response::MergeFrom(const CChatRoom_GetInviteInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from._internal_group_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      time_kick_expire_ = from.time_kick_expire_;
    }
    if (cached_has_bits & 0x00000004u) {
      banned_ = from.banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteInfo_Response::CopyFrom(const CChatRoom_GetInviteInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteInfo_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteInfo_Response::InternalSwap(CChatRoom_GetInviteInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteInfo_Response, banned_)
      + sizeof(CChatRoom_GetInviteInfo_Response::banned_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteInfo_Response, group_summary_)>(
          reinterpret_cast<char*>(&group_summary_),
          reinterpret_cast<char*>(&other->group_summary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[96]);
}

// ===================================================================

class CChatRoom_GetInviteLinksForGroup_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetInviteLinksForGroup_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetInviteLinksForGroup_Request::CChatRoom_GetInviteLinksForGroup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteLinksForGroup_Request)
}
CChatRoom_GetInviteLinksForGroup_Request::CChatRoom_GetInviteLinksForGroup_Request(const CChatRoom_GetInviteLinksForGroup_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinksForGroup_Request)
}

inline void CChatRoom_GetInviteLinksForGroup_Request::SharedCtor() {
chat_group_id_ = uint64_t{0u};
}

CChatRoom_GetInviteLinksForGroup_Request::~CChatRoom_GetInviteLinksForGroup_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinksForGroup_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteLinksForGroup_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetInviteLinksForGroup_Request::ArenaDtor(void* object) {
  CChatRoom_GetInviteLinksForGroup_Request* _this = reinterpret_cast< CChatRoom_GetInviteLinksForGroup_Request* >(object);
  (void)_this;
}
void CChatRoom_GetInviteLinksForGroup_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteLinksForGroup_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteLinksForGroup_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinksForGroup_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteLinksForGroup_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteLinksForGroup_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinksForGroup_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinksForGroup_Request)
  return target;
}

size_t CChatRoom_GetInviteLinksForGroup_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinksForGroup_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 chat_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteLinksForGroup_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteLinksForGroup_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteLinksForGroup_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteLinksForGroup_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteLinksForGroup_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteLinksForGroup_Request &>(from));
}


void CChatRoom_GetInviteLinksForGroup_Request::MergeFrom(const CChatRoom_GetInviteLinksForGroup_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinksForGroup_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_id()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteLinksForGroup_Request::CopyFrom(const CChatRoom_GetInviteLinksForGroup_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinksForGroup_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinksForGroup_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinksForGroup_Request::InternalSwap(CChatRoom_GetInviteLinksForGroup_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteLinksForGroup_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[97]);
}

// ===================================================================

class CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetInviteLinksForGroup_Response_LinkInfo>()._has_bits_);
  static void set_has_invite_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
}
CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo(const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invite_code()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_creator_, &from.steamid_creator_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_expires_) -
    reinterpret_cast<char*>(&steamid_creator_)) + sizeof(time_expires_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
}

inline void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::SharedCtor() {
invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_creator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_expires_) -
    reinterpret_cast<char*>(&steamid_creator_)) + sizeof(time_expires_));
}

CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::~CChatRoom_GetInviteLinksForGroup_Response_LinkInfo() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::ArenaDtor(void* object) {
  CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* _this = reinterpret_cast< CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* >(object);
  (void)_this;
}
void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_expires_) -
        reinterpret_cast<char*>(&steamid_creator_)) + sizeof(time_expires_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string invite_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetInviteLinksForGroup_Response.LinkInfo.invite_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid_creator(&has_bits);
          steamid_creator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_expires = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_expires(&has_bits);
          time_expires_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string invite_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetInviteLinksForGroup_Response.LinkInfo.invite_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_invite_code(), target);
  }

  // optional fixed64 steamid_creator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_creator(), target);
  }

  // optional uint32 time_expires = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_expires(), target);
  }

  // optional uint64 chat_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  return target;
}

size_t CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string invite_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_code());
    }

    // optional fixed64 steamid_creator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 chat_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 time_expires = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_expires());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteLinksForGroup_Response_LinkInfo *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo &>(from));
}


void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::MergeFrom(const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_code(from._internal_invite_code());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_creator_ = from.steamid_creator_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_expires_ = from.time_expires_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::CopyFrom(const CChatRoom_GetInviteLinksForGroup_Response_LinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinksForGroup_Response.LinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::InternalSwap(CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invite_code_, lhs_arena,
      &other->invite_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, time_expires_)
      + sizeof(CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::time_expires_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetInviteLinksForGroup_Response_LinkInfo, steamid_creator_)>(
          reinterpret_cast<char*>(&steamid_creator_),
          reinterpret_cast<char*>(&other->steamid_creator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteLinksForGroup_Response_LinkInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[98]);
}

// ===================================================================

class CChatRoom_GetInviteLinksForGroup_Response::_Internal {
 public:
};

CChatRoom_GetInviteLinksForGroup_Response::CChatRoom_GetInviteLinksForGroup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  invite_links_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteLinksForGroup_Response)
}
CChatRoom_GetInviteLinksForGroup_Response::CChatRoom_GetInviteLinksForGroup_Response(const CChatRoom_GetInviteLinksForGroup_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      invite_links_(from.invite_links_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteLinksForGroup_Response)
}

inline void CChatRoom_GetInviteLinksForGroup_Response::SharedCtor() {
}

CChatRoom_GetInviteLinksForGroup_Response::~CChatRoom_GetInviteLinksForGroup_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteLinksForGroup_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteLinksForGroup_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetInviteLinksForGroup_Response::ArenaDtor(void* object) {
  CChatRoom_GetInviteLinksForGroup_Response* _this = reinterpret_cast< CChatRoom_GetInviteLinksForGroup_Response* >(object);
  (void)_this;
}
void CChatRoom_GetInviteLinksForGroup_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteLinksForGroup_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteLinksForGroup_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteLinksForGroup_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invite_links_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteLinksForGroup_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoom_GetInviteLinksForGroup_Response.LinkInfo invite_links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invite_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteLinksForGroup_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteLinksForGroup_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetInviteLinksForGroup_Response.LinkInfo invite_links = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invite_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_invite_links(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteLinksForGroup_Response)
  return target;
}

size_t CChatRoom_GetInviteLinksForGroup_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteLinksForGroup_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_GetInviteLinksForGroup_Response.LinkInfo invite_links = 1;
  total_size += 1UL * this->_internal_invite_links_size();
  for (const auto& msg : this->invite_links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteLinksForGroup_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteLinksForGroup_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteLinksForGroup_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteLinksForGroup_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteLinksForGroup_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteLinksForGroup_Response &>(from));
}


void CChatRoom_GetInviteLinksForGroup_Response::MergeFrom(const CChatRoom_GetInviteLinksForGroup_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteLinksForGroup_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  invite_links_.MergeFrom(from.invite_links_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteLinksForGroup_Response::CopyFrom(const CChatRoom_GetInviteLinksForGroup_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteLinksForGroup_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteLinksForGroup_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteLinksForGroup_Response::InternalSwap(CChatRoom_GetInviteLinksForGroup_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  invite_links_.InternalSwap(&other->invite_links_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteLinksForGroup_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[99]);
}

// ===================================================================

class CChatRoom_GetBanList_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetBanList_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetBanList_Request::CChatRoom_GetBanList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetBanList_Request)
}
CChatRoom_GetBanList_Request::CChatRoom_GetBanList_Request(const CChatRoom_GetBanList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetBanList_Request)
}

inline void CChatRoom_GetBanList_Request::SharedCtor() {
chat_group_id_ = uint64_t{0u};
}

CChatRoom_GetBanList_Request::~CChatRoom_GetBanList_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetBanList_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetBanList_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetBanList_Request::ArenaDtor(void* object) {
  CChatRoom_GetBanList_Request* _this = reinterpret_cast< CChatRoom_GetBanList_Request* >(object);
  (void)_this;
}
void CChatRoom_GetBanList_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetBanList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetBanList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetBanList_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetBanList_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetBanList_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetBanList_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetBanList_Request)
  return target;
}

size_t CChatRoom_GetBanList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetBanList_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 chat_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetBanList_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetBanList_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetBanList_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetBanList_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetBanList_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetBanList_Request &>(from));
}


void CChatRoom_GetBanList_Request::MergeFrom(const CChatRoom_GetBanList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetBanList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_id()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetBanList_Request::CopyFrom(const CChatRoom_GetBanList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetBanList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetBanList_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetBanList_Request::InternalSwap(CChatRoom_GetBanList_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetBanList_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[100]);
}

// ===================================================================

class CChatRoom_GetBanList_Response_BanInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetBanList_Response_BanInfo>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid_actor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ban_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetBanList_Response_BanInfo::CChatRoom_GetBanList_Response_BanInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetBanList_Response.BanInfo)
}
CChatRoom_GetBanList_Response_BanInfo::CChatRoom_GetBanList_Response_BanInfo(const CChatRoom_GetBanList_Response_BanInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ban_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ban_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ban_reason()) {
    ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ban_reason(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_banned_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_banned_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetBanList_Response.BanInfo)
}

inline void CChatRoom_GetBanList_Response_BanInfo::SharedCtor() {
ban_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ban_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_banned_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_banned_));
}

CChatRoom_GetBanList_Response_BanInfo::~CChatRoom_GetBanList_Response_BanInfo() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetBanList_Response.BanInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetBanList_Response_BanInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ban_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetBanList_Response_BanInfo::ArenaDtor(void* object) {
  CChatRoom_GetBanList_Response_BanInfo* _this = reinterpret_cast< CChatRoom_GetBanList_Response_BanInfo* >(object);
  (void)_this;
}
void CChatRoom_GetBanList_Response_BanInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetBanList_Response_BanInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetBanList_Response_BanInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetBanList_Response.BanInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ban_reason_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_banned_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(time_banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetBanList_Response_BanInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_actor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid_actor(&has_bits);
          accountid_actor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_banned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_banned(&has_bits);
          time_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ban_reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ban_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetBanList_Response.BanInfo.ban_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetBanList_Response_BanInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetBanList_Response.BanInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 accountid_actor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid_actor(), target);
  }

  // optional uint32 time_banned = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_banned(), target);
  }

  // optional string ban_reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ban_reason().data(), static_cast<int>(this->_internal_ban_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetBanList_Response.BanInfo.ban_reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ban_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetBanList_Response.BanInfo)
  return target;
}

size_t CChatRoom_GetBanList_Response_BanInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetBanList_Response.BanInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string ban_reason = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ban_reason());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 accountid_actor = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_actor());
    }

    // optional uint32 time_banned = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_banned());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetBanList_Response_BanInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetBanList_Response_BanInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetBanList_Response_BanInfo::GetClassData() const { return &_class_data_; }

void CChatRoom_GetBanList_Response_BanInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetBanList_Response_BanInfo *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetBanList_Response_BanInfo &>(from));
}


void CChatRoom_GetBanList_Response_BanInfo::MergeFrom(const CChatRoom_GetBanList_Response_BanInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetBanList_Response.BanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ban_reason(from._internal_ban_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_actor_ = from.accountid_actor_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_banned_ = from.time_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetBanList_Response_BanInfo::CopyFrom(const CChatRoom_GetBanList_Response_BanInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetBanList_Response.BanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetBanList_Response_BanInfo::IsInitialized() const {
  return true;
}

void CChatRoom_GetBanList_Response_BanInfo::InternalSwap(CChatRoom_GetBanList_Response_BanInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ban_reason_, lhs_arena,
      &other->ban_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetBanList_Response_BanInfo, time_banned_)
      + sizeof(CChatRoom_GetBanList_Response_BanInfo::time_banned_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetBanList_Response_BanInfo, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetBanList_Response_BanInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[101]);
}

// ===================================================================

class CChatRoom_GetBanList_Response::_Internal {
 public:
};

CChatRoom_GetBanList_Response::CChatRoom_GetBanList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bans_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetBanList_Response)
}
CChatRoom_GetBanList_Response::CChatRoom_GetBanList_Response(const CChatRoom_GetBanList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetBanList_Response)
}

inline void CChatRoom_GetBanList_Response::SharedCtor() {
}

CChatRoom_GetBanList_Response::~CChatRoom_GetBanList_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetBanList_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetBanList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetBanList_Response::ArenaDtor(void* object) {
  CChatRoom_GetBanList_Response* _this = reinterpret_cast< CChatRoom_GetBanList_Response* >(object);
  (void)_this;
}
void CChatRoom_GetBanList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetBanList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetBanList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetBanList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bans_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetBanList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoom_GetBanList_Response.BanInfo bans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetBanList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetBanList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_GetBanList_Response.BanInfo bans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetBanList_Response)
  return target;
}

size_t CChatRoom_GetBanList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetBanList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_GetBanList_Response.BanInfo bans = 1;
  total_size += 1UL * this->_internal_bans_size();
  for (const auto& msg : this->bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetBanList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetBanList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetBanList_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetBanList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetBanList_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetBanList_Response &>(from));
}


void CChatRoom_GetBanList_Response::MergeFrom(const CChatRoom_GetBanList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetBanList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bans_.MergeFrom(from.bans_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetBanList_Response::CopyFrom(const CChatRoom_GetBanList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetBanList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetBanList_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetBanList_Response::InternalSwap(CChatRoom_GetBanList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bans_.InternalSwap(&other->bans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetBanList_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[102]);
}

// ===================================================================

class CChatRoom_GetInviteList_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetInviteList_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_GetInviteList_Request::CChatRoom_GetInviteList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteList_Request)
}
CChatRoom_GetInviteList_Request::CChatRoom_GetInviteList_Request(const CChatRoom_GetInviteList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteList_Request)
}

inline void CChatRoom_GetInviteList_Request::SharedCtor() {
chat_group_id_ = uint64_t{0u};
}

CChatRoom_GetInviteList_Request::~CChatRoom_GetInviteList_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteList_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteList_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetInviteList_Request::ArenaDtor(void* object) {
  CChatRoom_GetInviteList_Request* _this = reinterpret_cast< CChatRoom_GetInviteList_Request* >(object);
  (void)_this;
}
void CChatRoom_GetInviteList_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteList_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteList_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteList_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteList_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteList_Request)
  return target;
}

size_t CChatRoom_GetInviteList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteList_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 chat_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteList_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteList_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteList_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteList_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteList_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteList_Request &>(from));
}


void CChatRoom_GetInviteList_Request::MergeFrom(const CChatRoom_GetInviteList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_id()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteList_Request::CopyFrom(const CChatRoom_GetInviteList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteList_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteList_Request::InternalSwap(CChatRoom_GetInviteList_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteList_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[103]);
}

// ===================================================================

class CChatRoomGroupInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomGroupInvite>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid_actor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoomGroupInvite::CChatRoomGroupInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomGroupInvite)
}
CChatRoomGroupInvite::CChatRoomGroupInvite(const CChatRoomGroupInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_invited_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_invited_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomGroupInvite)
}

inline void CChatRoomGroupInvite::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_invited_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(time_invited_));
}

CChatRoomGroupInvite::~CChatRoomGroupInvite() {
  // @@protoc_insertion_point(destructor:CChatRoomGroupInvite)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomGroupInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoomGroupInvite::ArenaDtor(void* object) {
  CChatRoomGroupInvite* _this = reinterpret_cast< CChatRoomGroupInvite* >(object);
  (void)_this;
}
void CChatRoomGroupInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomGroupInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomGroupInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomGroupInvite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_invited_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(time_invited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomGroupInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_actor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid_actor(&has_bits);
          accountid_actor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_invited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_invited(&has_bits);
          time_invited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomGroupInvite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomGroupInvite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 accountid_actor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid_actor(), target);
  }

  // optional uint32 time_invited = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_invited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomGroupInvite)
  return target;
}

size_t CChatRoomGroupInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomGroupInvite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 accountid_actor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_actor());
    }

    // optional uint32 time_invited = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_invited());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomGroupInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomGroupInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomGroupInvite::GetClassData() const { return &_class_data_; }

void CChatRoomGroupInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomGroupInvite *>(to)->MergeFrom(
      static_cast<const CChatRoomGroupInvite &>(from));
}


void CChatRoomGroupInvite::MergeFrom(const CChatRoomGroupInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomGroupInvite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_actor_ = from.accountid_actor_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_invited_ = from.time_invited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomGroupInvite::CopyFrom(const CChatRoomGroupInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomGroupInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomGroupInvite::IsInitialized() const {
  return true;
}

void CChatRoomGroupInvite::InternalSwap(CChatRoomGroupInvite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomGroupInvite, time_invited_)
      + sizeof(CChatRoomGroupInvite::time_invited_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomGroupInvite, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomGroupInvite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[104]);
}

// ===================================================================

class CChatRoom_GetInviteList_Response::_Internal {
 public:
};

CChatRoom_GetInviteList_Response::CChatRoom_GetInviteList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  invites_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetInviteList_Response)
}
CChatRoom_GetInviteList_Response::CChatRoom_GetInviteList_Response(const CChatRoom_GetInviteList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      invites_(from.invites_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetInviteList_Response)
}

inline void CChatRoom_GetInviteList_Response::SharedCtor() {
}

CChatRoom_GetInviteList_Response::~CChatRoom_GetInviteList_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetInviteList_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetInviteList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetInviteList_Response::ArenaDtor(void* object) {
  CChatRoom_GetInviteList_Response* _this = reinterpret_cast< CChatRoom_GetInviteList_Response* >(object);
  (void)_this;
}
void CChatRoom_GetInviteList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetInviteList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetInviteList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetInviteList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invites_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetInviteList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoomGroupInvite invites = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetInviteList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetInviteList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomGroupInvite invites = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invites_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_invites(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetInviteList_Response)
  return target;
}

size_t CChatRoom_GetInviteList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetInviteList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoomGroupInvite invites = 1;
  total_size += 1UL * this->_internal_invites_size();
  for (const auto& msg : this->invites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetInviteList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetInviteList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetInviteList_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetInviteList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetInviteList_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetInviteList_Response &>(from));
}


void CChatRoom_GetInviteList_Response::MergeFrom(const CChatRoom_GetInviteList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetInviteList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  invites_.MergeFrom(from.invites_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetInviteList_Response::CopyFrom(const CChatRoom_GetInviteList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetInviteList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetInviteList_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetInviteList_Response::InternalSwap(CChatRoom_GetInviteList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  invites_.InternalSwap(&other->invites_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetInviteList_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[105]);
}

// ===================================================================

class CChatRoom_DeleteInviteLink_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_DeleteInviteLink_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invite_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_DeleteInviteLink_Request::CChatRoom_DeleteInviteLink_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteInviteLink_Request)
}
CChatRoom_DeleteInviteLink_Request::CChatRoom_DeleteInviteLink_Request(const CChatRoom_DeleteInviteLink_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invite_code()) {
    invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invite_code(), 
      GetArenaForAllocation());
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteInviteLink_Request)
}

inline void CChatRoom_DeleteInviteLink_Request::SharedCtor() {
invite_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_id_ = uint64_t{0u};
}

CChatRoom_DeleteInviteLink_Request::~CChatRoom_DeleteInviteLink_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteInviteLink_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_DeleteInviteLink_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invite_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_DeleteInviteLink_Request::ArenaDtor(void* object) {
  CChatRoom_DeleteInviteLink_Request* _this = reinterpret_cast< CChatRoom_DeleteInviteLink_Request* >(object);
  (void)_this;
}
void CChatRoom_DeleteInviteLink_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_DeleteInviteLink_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_DeleteInviteLink_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteInviteLink_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invite_code_.ClearNonDefaultToEmpty();
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_DeleteInviteLink_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string invite_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invite_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_DeleteInviteLink_Request.invite_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_DeleteInviteLink_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteInviteLink_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional string invite_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invite_code().data(), static_cast<int>(this->_internal_invite_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_DeleteInviteLink_Request.invite_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invite_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteInviteLink_Request)
  return target;
}

size_t CChatRoom_DeleteInviteLink_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteInviteLink_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invite_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invite_code());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteInviteLink_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_DeleteInviteLink_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteInviteLink_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_DeleteInviteLink_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_DeleteInviteLink_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_DeleteInviteLink_Request &>(from));
}


void CChatRoom_DeleteInviteLink_Request::MergeFrom(const CChatRoom_DeleteInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteInviteLink_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invite_code(from._internal_invite_code());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_DeleteInviteLink_Request::CopyFrom(const CChatRoom_DeleteInviteLink_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteInviteLink_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteInviteLink_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteInviteLink_Request::InternalSwap(CChatRoom_DeleteInviteLink_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &invite_code_, lhs_arena,
      &other->invite_code_, rhs_arena
  );
  swap(chat_group_id_, other->chat_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteInviteLink_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[106]);
}

// ===================================================================

class CChatRoom_DeleteInviteLink_Response::_Internal {
 public:
};

CChatRoom_DeleteInviteLink_Response::CChatRoom_DeleteInviteLink_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteInviteLink_Response)
}
CChatRoom_DeleteInviteLink_Response::CChatRoom_DeleteInviteLink_Response(const CChatRoom_DeleteInviteLink_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteInviteLink_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteInviteLink_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteInviteLink_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteInviteLink_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[107]);
}

// ===================================================================

class CChatRoom_SetSessionActiveChatRoomGroups_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetSessionActiveChatRoomGroups_Request>()._has_bits_);
  static void set_has_virtualize_members_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_SetSessionActiveChatRoomGroups_Request::CChatRoom_SetSessionActiveChatRoomGroups_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_group_ids_(arena),
  chat_groups_data_requested_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetSessionActiveChatRoomGroups_Request)
}
CChatRoom_SetSessionActiveChatRoomGroups_Request::CChatRoom_SetSessionActiveChatRoomGroups_Request(const CChatRoom_SetSessionActiveChatRoomGroups_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chat_group_ids_(from.chat_group_ids_),
      chat_groups_data_requested_(from.chat_groups_data_requested_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtualize_members_threshold_ = from.virtualize_members_threshold_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetSessionActiveChatRoomGroups_Request)
}

inline void CChatRoom_SetSessionActiveChatRoomGroups_Request::SharedCtor() {
virtualize_members_threshold_ = 0;
}

CChatRoom_SetSessionActiveChatRoomGroups_Request::~CChatRoom_SetSessionActiveChatRoomGroups_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetSessionActiveChatRoomGroups_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::ArenaDtor(void* object) {
  CChatRoom_SetSessionActiveChatRoomGroups_Request* _this = reinterpret_cast< CChatRoom_SetSessionActiveChatRoomGroups_Request* >(object);
  (void)_this;
}
void CChatRoom_SetSessionActiveChatRoomGroups_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetSessionActiveChatRoomGroups_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_ids_.Clear();
  chat_groups_data_requested_.Clear();
  virtualize_members_threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetSessionActiveChatRoomGroups_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 chat_group_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_chat_group_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_chat_group_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 chat_groups_data_requested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_chat_groups_data_requested(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_chat_groups_data_requested(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 virtualize_members_threshold = 3 [(.description) = "If a chat room has more members than this threshold, we will opt in to a virtualized list"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_virtualize_members_threshold(&has_bits);
          virtualize_members_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetSessionActiveChatRoomGroups_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 chat_group_ids = 1;
  for (int i = 0, n = this->_internal_chat_group_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_ids(i), target);
  }

  // repeated uint64 chat_groups_data_requested = 2;
  for (int i = 0, n = this->_internal_chat_groups_data_requested_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_groups_data_requested(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 virtualize_members_threshold = 3 [(.description) = "If a chat room has more members than this threshold, we will opt in to a virtualized list"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_virtualize_members_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  return target;
}

size_t CChatRoom_SetSessionActiveChatRoomGroups_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 chat_group_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->chat_group_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chat_group_ids_size());
    total_size += data_size;
  }

  // repeated uint64 chat_groups_data_requested = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->chat_groups_data_requested_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chat_groups_data_requested_size());
    total_size += data_size;
  }

  // optional int32 virtualize_members_threshold = 3 [(.description) = "If a chat room has more members than this threshold, we will opt in to a virtualized list"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_virtualize_members_threshold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetSessionActiveChatRoomGroups_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetSessionActiveChatRoomGroups_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetSessionActiveChatRoomGroups_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SetSessionActiveChatRoomGroups_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetSessionActiveChatRoomGroups_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetSessionActiveChatRoomGroups_Request &>(from));
}


void CChatRoom_SetSessionActiveChatRoomGroups_Request::MergeFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_group_ids_.MergeFrom(from.chat_group_ids_);
  chat_groups_data_requested_.MergeFrom(from.chat_groups_data_requested_);
  if (from._internal_has_virtualize_members_threshold()) {
    _internal_set_virtualize_members_threshold(from._internal_virtualize_members_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::CopyFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetSessionActiveChatRoomGroups_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetSessionActiveChatRoomGroups_Request::InternalSwap(CChatRoom_SetSessionActiveChatRoomGroups_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chat_group_ids_.InternalSwap(&other->chat_group_ids_);
  chat_groups_data_requested_.InternalSwap(&other->chat_groups_data_requested_);
  swap(virtualize_members_threshold_, other->virtualize_members_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetSessionActiveChatRoomGroups_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[108]);
}

// ===================================================================

class CChatRoom_SetSessionActiveChatRoomGroups_Response::_Internal {
 public:
};

CChatRoom_SetSessionActiveChatRoomGroups_Response::CChatRoom_SetSessionActiveChatRoomGroups_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_states_(arena),
  virtualize_members_chat_group_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetSessionActiveChatRoomGroups_Response)
}
CChatRoom_SetSessionActiveChatRoomGroups_Response::CChatRoom_SetSessionActiveChatRoomGroups_Response(const CChatRoom_SetSessionActiveChatRoomGroups_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chat_states_(from.chat_states_),
      virtualize_members_chat_group_ids_(from.virtualize_members_chat_group_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetSessionActiveChatRoomGroups_Response)
}

inline void CChatRoom_SetSessionActiveChatRoomGroups_Response::SharedCtor() {
}

CChatRoom_SetSessionActiveChatRoomGroups_Response::~CChatRoom_SetSessionActiveChatRoomGroups_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetSessionActiveChatRoomGroups_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::ArenaDtor(void* object) {
  CChatRoom_SetSessionActiveChatRoomGroups_Response* _this = reinterpret_cast< CChatRoom_SetSessionActiveChatRoomGroups_Response* >(object);
  (void)_this;
}
void CChatRoom_SetSessionActiveChatRoomGroups_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetSessionActiveChatRoomGroups_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_states_.Clear();
  virtualize_members_chat_group_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetSessionActiveChatRoomGroups_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoomGroupState chat_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 virtualize_members_chat_group_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_virtualize_members_chat_group_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_virtualize_members_chat_group_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetSessionActiveChatRoomGroups_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoomGroupState chat_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chat_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chat_states(i), target, stream);
  }

  // repeated uint64 virtualize_members_chat_group_ids = 2;
  for (int i = 0, n = this->_internal_virtualize_members_chat_group_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_virtualize_members_chat_group_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  return target;
}

size_t CChatRoom_SetSessionActiveChatRoomGroups_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoomGroupState chat_states = 1;
  total_size += 1UL * this->_internal_chat_states_size();
  for (const auto& msg : this->chat_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 virtualize_members_chat_group_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->virtualize_members_chat_group_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_virtualize_members_chat_group_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetSessionActiveChatRoomGroups_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetSessionActiveChatRoomGroups_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetSessionActiveChatRoomGroups_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_SetSessionActiveChatRoomGroups_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetSessionActiveChatRoomGroups_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetSessionActiveChatRoomGroups_Response &>(from));
}


void CChatRoom_SetSessionActiveChatRoomGroups_Response::MergeFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_states_.MergeFrom(from.chat_states_);
  virtualize_members_chat_group_ids_.MergeFrom(from.virtualize_members_chat_group_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::CopyFrom(const CChatRoom_SetSessionActiveChatRoomGroups_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetSessionActiveChatRoomGroups_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetSessionActiveChatRoomGroups_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SetSessionActiveChatRoomGroups_Response::InternalSwap(CChatRoom_SetSessionActiveChatRoomGroups_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chat_states_.InternalSwap(&other->chat_states_);
  virtualize_members_chat_group_ids_.InternalSwap(&other->virtualize_members_chat_group_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetSessionActiveChatRoomGroups_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[109]);
}

// ===================================================================

class CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences>()._has_bits_);
  static void set_has_desktop_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mobile_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unread_indicator_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
}
CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences(const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&desktop_notification_level_, &from.desktop_notification_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&desktop_notification_level_)) + sizeof(unread_indicator_muted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
}

inline void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&desktop_notification_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&desktop_notification_level_)) + sizeof(unread_indicator_muted_));
}

CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::~CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::ArenaDtor(void* object) {
  CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* _this = reinterpret_cast< CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* >(object);
  (void)_this;
}
void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&desktop_notification_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_indicator_muted_) -
        reinterpret_cast<char*>(&desktop_notification_level_)) + sizeof(unread_indicator_muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EChatRoomNotificationLevel desktop_notification_level = 1 [default = k_EChatroomNotificationLevel_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_desktop_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomNotificationLevel mobile_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_mobile_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool unread_indicator_muted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unread_indicator_muted(&has_bits);
          unread_indicator_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EChatRoomNotificationLevel desktop_notification_level = 1 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mobile_notification_level(), target);
  }

  // optional bool unread_indicator_muted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unread_indicator_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  return target;
}

size_t CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EChatRoomNotificationLevel desktop_notification_level = 1 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mobile_notification_level());
    }

    // optional bool unread_indicator_muted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::GetClassData() const { return &_class_data_; }

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences &>(from));
}


void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergeFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::CopyFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::InternalSwap(CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, unread_indicator_muted_)
      + sizeof(CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::unread_indicator_muted_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences, desktop_notification_level_)>(
          reinterpret_cast<char*>(&desktop_notification_level_),
          reinterpret_cast<char*>(&other->desktop_notification_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[110]);
}

// ===================================================================

class CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desktop_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mobile_notification_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unread_indicator_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
}
CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences(const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
}

inline void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unread_indicator_muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
}

CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::~CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::ArenaDtor(void* object) {
  CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* _this = reinterpret_cast< CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* >(object);
  (void)_this;
}
void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_indicator_muted_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(unread_indicator_muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomNotificationLevel desktop_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_desktop_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomNotificationLevel mobile_notification_level = 3 [default = k_EChatroomNotificationLevel_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomNotificationLevel_IsValid(val))) {
            _internal_set_mobile_notification_level(static_cast<::EChatRoomNotificationLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool unread_indicator_muted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_unread_indicator_muted(&has_bits);
          unread_indicator_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional .EChatRoomNotificationLevel desktop_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_desktop_notification_level(), target);
  }

  // optional .EChatRoomNotificationLevel mobile_notification_level = 3 [default = k_EChatroomNotificationLevel_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mobile_notification_level(), target);
  }

  // optional bool unread_indicator_muted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_unread_indicator_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  return target;
}

size_t CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 chat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional .EChatRoomNotificationLevel desktop_notification_level = 2 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desktop_notification_level());
    }

    // optional .EChatRoomNotificationLevel mobile_notification_level = 3 [default = k_EChatroomNotificationLevel_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mobile_notification_level());
    }

    // optional bool unread_indicator_muted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::GetClassData() const { return &_class_data_; }

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences &>(from));
}


void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::MergeFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      desktop_notification_level_ = from.desktop_notification_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      mobile_notification_level_ = from.mobile_notification_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      unread_indicator_muted_ = from.unread_indicator_muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::CopyFrom(const CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::InternalSwap(CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, unread_indicator_muted_)
      + sizeof(CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::unread_indicator_muted_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[111]);
}

// ===================================================================

class CChatRoom_SetUserChatGroupPreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SetUserChatGroupPreferences_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences& chat_group_preferences(const CChatRoom_SetUserChatGroupPreferences_Request* msg);
  static void set_has_chat_group_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences&
CChatRoom_SetUserChatGroupPreferences_Request::_Internal::chat_group_preferences(const CChatRoom_SetUserChatGroupPreferences_Request* msg) {
  return *msg->chat_group_preferences_;
}
CChatRoom_SetUserChatGroupPreferences_Request::CChatRoom_SetUserChatGroupPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_room_preferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetUserChatGroupPreferences_Request)
}
CChatRoom_SetUserChatGroupPreferences_Request::CChatRoom_SetUserChatGroupPreferences_Request(const CChatRoom_SetUserChatGroupPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chat_room_preferences_(from.chat_room_preferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_group_preferences()) {
    chat_group_preferences_ = new ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences(*from.chat_group_preferences_);
  } else {
    chat_group_preferences_ = nullptr;
  }
  chat_group_id_ = from.chat_group_id_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Request)
}

inline void CChatRoom_SetUserChatGroupPreferences_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_preferences_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_group_id_) -
    reinterpret_cast<char*>(&chat_group_preferences_)) + sizeof(chat_group_id_));
}

CChatRoom_SetUserChatGroupPreferences_Request::~CChatRoom_SetUserChatGroupPreferences_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SetUserChatGroupPreferences_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SetUserChatGroupPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_group_preferences_;
}

void CChatRoom_SetUserChatGroupPreferences_Request::ArenaDtor(void* object) {
  CChatRoom_SetUserChatGroupPreferences_Request* _this = reinterpret_cast< CChatRoom_SetUserChatGroupPreferences_Request* >(object);
  (void)_this;
}
void CChatRoom_SetUserChatGroupPreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SetUserChatGroupPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SetUserChatGroupPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SetUserChatGroupPreferences_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_room_preferences_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chat_group_preferences_ != nullptr);
    chat_group_preferences_->Clear();
  }
  chat_group_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SetUserChatGroupPreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences chat_group_preferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_group_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences chat_room_preferences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_room_preferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SetUserChatGroupPreferences_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SetUserChatGroupPreferences_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional .CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences chat_group_preferences = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chat_group_preferences(this), target, stream);
  }

  // repeated .CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences chat_room_preferences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chat_room_preferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chat_room_preferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SetUserChatGroupPreferences_Request)
  return target;
}

size_t CChatRoom_SetUserChatGroupPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SetUserChatGroupPreferences_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences chat_room_preferences = 3;
  total_size += 1UL * this->_internal_chat_room_preferences_size();
  for (const auto& msg : this->chat_room_preferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences chat_group_preferences = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chat_group_preferences_);
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetUserChatGroupPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SetUserChatGroupPreferences_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetUserChatGroupPreferences_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SetUserChatGroupPreferences_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SetUserChatGroupPreferences_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SetUserChatGroupPreferences_Request &>(from));
}


void CChatRoom_SetUserChatGroupPreferences_Request::MergeFrom(const CChatRoom_SetUserChatGroupPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SetUserChatGroupPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_room_preferences_.MergeFrom(from.chat_room_preferences_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_chat_group_preferences()->::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences::MergeFrom(from._internal_chat_group_preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SetUserChatGroupPreferences_Request::CopyFrom(const CChatRoom_SetUserChatGroupPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SetUserChatGroupPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SetUserChatGroupPreferences_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SetUserChatGroupPreferences_Request::InternalSwap(CChatRoom_SetUserChatGroupPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chat_room_preferences_.InternalSwap(&other->chat_room_preferences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserChatGroupPreferences_Request, chat_group_id_)
      + sizeof(CChatRoom_SetUserChatGroupPreferences_Request::chat_group_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SetUserChatGroupPreferences_Request, chat_group_preferences_)>(
          reinterpret_cast<char*>(&chat_group_preferences_),
          reinterpret_cast<char*>(&other->chat_group_preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetUserChatGroupPreferences_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[112]);
}

// ===================================================================

class CChatRoom_SetUserChatGroupPreferences_Response::_Internal {
 public:
};

CChatRoom_SetUserChatGroupPreferences_Response::CChatRoom_SetUserChatGroupPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SetUserChatGroupPreferences_Response)
}
CChatRoom_SetUserChatGroupPreferences_Response::CChatRoom_SetUserChatGroupPreferences_Response(const CChatRoom_SetUserChatGroupPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SetUserChatGroupPreferences_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SetUserChatGroupPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SetUserChatGroupPreferences_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SetUserChatGroupPreferences_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[113]);
}

// ===================================================================

class CChatRoom_DeleteChatMessages_Request_Message::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_DeleteChatMessages_Request_Message>()._has_bits_);
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_DeleteChatMessages_Request_Message::CChatRoom_DeleteChatMessages_Request_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteChatMessages_Request.Message)
}
CChatRoom_DeleteChatMessages_Request_Message::CChatRoom_DeleteChatMessages_Request_Message(const CChatRoom_DeleteChatMessages_Request_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatMessages_Request.Message)
}

inline void CChatRoom_DeleteChatMessages_Request_Message::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
}

CChatRoom_DeleteChatMessages_Request_Message::~CChatRoom_DeleteChatMessages_Request_Message() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatMessages_Request.Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_DeleteChatMessages_Request_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_DeleteChatMessages_Request_Message::ArenaDtor(void* object) {
  CChatRoom_DeleteChatMessages_Request_Message* _this = reinterpret_cast< CChatRoom_DeleteChatMessages_Request_Message* >(object);
  (void)_this;
}
void CChatRoom_DeleteChatMessages_Request_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_DeleteChatMessages_Request_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_DeleteChatMessages_Request_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatMessages_Request.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_DeleteChatMessages_Request_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_DeleteChatMessages_Request_Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatMessages_Request.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatMessages_Request.Message)
  return target;
}

size_t CChatRoom_DeleteChatMessages_Request_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatMessages_Request.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 server_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteChatMessages_Request_Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_DeleteChatMessages_Request_Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteChatMessages_Request_Message::GetClassData() const { return &_class_data_; }

void CChatRoom_DeleteChatMessages_Request_Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_DeleteChatMessages_Request_Message *>(to)->MergeFrom(
      static_cast<const CChatRoom_DeleteChatMessages_Request_Message &>(from));
}


void CChatRoom_DeleteChatMessages_Request_Message::MergeFrom(const CChatRoom_DeleteChatMessages_Request_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatMessages_Request.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_DeleteChatMessages_Request_Message::CopyFrom(const CChatRoom_DeleteChatMessages_Request_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatMessages_Request.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatMessages_Request_Message::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatMessages_Request_Message::InternalSwap(CChatRoom_DeleteChatMessages_Request_Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteChatMessages_Request_Message, ordinal_)
      + sizeof(CChatRoom_DeleteChatMessages_Request_Message::ordinal_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteChatMessages_Request_Message, server_timestamp_)>(
          reinterpret_cast<char*>(&server_timestamp_),
          reinterpret_cast<char*>(&other->server_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteChatMessages_Request_Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[114]);
}

// ===================================================================

class CChatRoom_DeleteChatMessages_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_DeleteChatMessages_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_DeleteChatMessages_Request::CChatRoom_DeleteChatMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteChatMessages_Request)
}
CChatRoom_DeleteChatMessages_Request::CChatRoom_DeleteChatMessages_Request(const CChatRoom_DeleteChatMessages_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatMessages_Request)
}

inline void CChatRoom_DeleteChatMessages_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_DeleteChatMessages_Request::~CChatRoom_DeleteChatMessages_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_DeleteChatMessages_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_DeleteChatMessages_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_DeleteChatMessages_Request::ArenaDtor(void* object) {
  CChatRoom_DeleteChatMessages_Request* _this = reinterpret_cast< CChatRoom_DeleteChatMessages_Request* >(object);
  (void)_this;
}
void CChatRoom_DeleteChatMessages_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_DeleteChatMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_DeleteChatMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_DeleteChatMessages_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_DeleteChatMessages_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoom_DeleteChatMessages_Request.Message messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_DeleteChatMessages_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_DeleteChatMessages_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // repeated .CChatRoom_DeleteChatMessages_Request.Message messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_DeleteChatMessages_Request)
  return target;
}

size_t CChatRoom_DeleteChatMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_DeleteChatMessages_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_DeleteChatMessages_Request.Message messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteChatMessages_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_DeleteChatMessages_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteChatMessages_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_DeleteChatMessages_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_DeleteChatMessages_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_DeleteChatMessages_Request &>(from));
}


void CChatRoom_DeleteChatMessages_Request::MergeFrom(const CChatRoom_DeleteChatMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_DeleteChatMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_DeleteChatMessages_Request::CopyFrom(const CChatRoom_DeleteChatMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_DeleteChatMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_DeleteChatMessages_Request::IsInitialized() const {
  return true;
}

void CChatRoom_DeleteChatMessages_Request::InternalSwap(CChatRoom_DeleteChatMessages_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteChatMessages_Request, chat_id_)
      + sizeof(CChatRoom_DeleteChatMessages_Request::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_DeleteChatMessages_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteChatMessages_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[115]);
}

// ===================================================================

class CChatRoom_DeleteChatMessages_Response::_Internal {
 public:
};

CChatRoom_DeleteChatMessages_Response::CChatRoom_DeleteChatMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CChatRoom_DeleteChatMessages_Response)
}
CChatRoom_DeleteChatMessages_Response::CChatRoom_DeleteChatMessages_Response(const CChatRoom_DeleteChatMessages_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_DeleteChatMessages_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_DeleteChatMessages_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_DeleteChatMessages_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_DeleteChatMessages_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[116]);
}

// ===================================================================

class CChatRoom_UpdateMemberListView_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_UpdateMemberListView_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_changenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delete_view(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CChatRoom_UpdateMemberListView_Notification::CChatRoom_UpdateMemberListView_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  persona_subscribe_accountids_(arena),
  persona_unsubscribe_accountids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_UpdateMemberListView_Notification)
}
CChatRoom_UpdateMemberListView_Notification::CChatRoom_UpdateMemberListView_Notification(const CChatRoom_UpdateMemberListView_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      persona_subscribe_accountids_(from.persona_subscribe_accountids_),
      persona_unsubscribe_accountids_(from.persona_unsubscribe_accountids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delete_view_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(delete_view_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_UpdateMemberListView_Notification)
}

inline void CChatRoom_UpdateMemberListView_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delete_view_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(delete_view_));
}

CChatRoom_UpdateMemberListView_Notification::~CChatRoom_UpdateMemberListView_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_UpdateMemberListView_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_UpdateMemberListView_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_UpdateMemberListView_Notification::ArenaDtor(void* object) {
  CChatRoom_UpdateMemberListView_Notification* _this = reinterpret_cast< CChatRoom_UpdateMemberListView_Notification* >(object);
  (void)_this;
}
void CChatRoom_UpdateMemberListView_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_UpdateMemberListView_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_UpdateMemberListView_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_UpdateMemberListView_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persona_subscribe_accountids_.Clear();
  persona_unsubscribe_accountids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delete_view_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(delete_view_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_UpdateMemberListView_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 view_id = 2 [(.description) = "Client-generated ID.  Should send the same value on all requests for the same view"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_view_id(&has_bits);
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_changenumber = 5 [(.description) = "Any updates from this call on will have this changenumber present.  Can be used to guarantee in-order updates."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_changenumber(&has_bits);
          client_changenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool delete_view = 6 [(.description) = "Indicates this view has been deleted."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_delete_view(&has_bits);
          delete_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 persona_subscribe_accountids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_persona_subscribe_accountids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_persona_subscribe_accountids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 persona_unsubscribe_accountids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_persona_unsubscribe_accountids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_persona_unsubscribe_accountids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_UpdateMemberListView_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_UpdateMemberListView_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 view_id = 2 [(.description) = "Client-generated ID.  Should send the same value on all requests for the same view"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_view_id(), target);
  }

  // optional int32 start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start(), target);
  }

  // optional int32 end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end(), target);
  }

  // optional int32 client_changenumber = 5 [(.description) = "Any updates from this call on will have this changenumber present.  Can be used to guarantee in-order updates."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_client_changenumber(), target);
  }

  // optional bool delete_view = 6 [(.description) = "Indicates this view has been deleted."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_delete_view(), target);
  }

  // repeated int32 persona_subscribe_accountids = 7;
  for (int i = 0, n = this->_internal_persona_subscribe_accountids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_persona_subscribe_accountids(i), target);
  }

  // repeated int32 persona_unsubscribe_accountids = 8;
  for (int i = 0, n = this->_internal_persona_unsubscribe_accountids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_persona_unsubscribe_accountids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_UpdateMemberListView_Notification)
  return target;
}

size_t CChatRoom_UpdateMemberListView_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_UpdateMemberListView_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 persona_subscribe_accountids = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->persona_subscribe_accountids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_persona_subscribe_accountids_size());
    total_size += data_size;
  }

  // repeated int32 persona_unsubscribe_accountids = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->persona_unsubscribe_accountids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_persona_unsubscribe_accountids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 view_id = 2 [(.description) = "Client-generated ID.  Should send the same value on all requests for the same view"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_view_id());
    }

    // optional int32 start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
    }

    // optional int32 end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
    }

    // optional int32 client_changenumber = 5 [(.description) = "Any updates from this call on will have this changenumber present.  Can be used to guarantee in-order updates."];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_changenumber());
    }

    // optional bool delete_view = 6 [(.description) = "Indicates this view has been deleted."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_UpdateMemberListView_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_UpdateMemberListView_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_UpdateMemberListView_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_UpdateMemberListView_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_UpdateMemberListView_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_UpdateMemberListView_Notification &>(from));
}


void CChatRoom_UpdateMemberListView_Notification::MergeFrom(const CChatRoom_UpdateMemberListView_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_UpdateMemberListView_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  persona_subscribe_accountids_.MergeFrom(from.persona_subscribe_accountids_);
  persona_unsubscribe_accountids_.MergeFrom(from.persona_unsubscribe_accountids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_id_ = from.view_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_changenumber_ = from.client_changenumber_;
    }
    if (cached_has_bits & 0x00000020u) {
      delete_view_ = from.delete_view_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_UpdateMemberListView_Notification::CopyFrom(const CChatRoom_UpdateMemberListView_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_UpdateMemberListView_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_UpdateMemberListView_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_UpdateMemberListView_Notification::InternalSwap(CChatRoom_UpdateMemberListView_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_subscribe_accountids_.InternalSwap(&other->persona_subscribe_accountids_);
  persona_unsubscribe_accountids_.InternalSwap(&other->persona_unsubscribe_accountids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_UpdateMemberListView_Notification, delete_view_)
      + sizeof(CChatRoom_UpdateMemberListView_Notification::delete_view_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_UpdateMemberListView_Notification, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_UpdateMemberListView_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[117]);
}

// ===================================================================

class CChatRoom_SearchMembers_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SearchMembers_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_search_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_results(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CChatRoom_SearchMembers_Request::CChatRoom_SearchMembers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SearchMembers_Request)
}
CChatRoom_SearchMembers_Request::CChatRoom_SearchMembers_Request(const CChatRoom_SearchMembers_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_text()) {
    search_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SearchMembers_Request)
}

inline void CChatRoom_SearchMembers_Request::SharedCtor() {
search_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_results_));
}

CChatRoom_SearchMembers_Request::~CChatRoom_SearchMembers_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_SearchMembers_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SearchMembers_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  search_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_SearchMembers_Request::ArenaDtor(void* object) {
  CChatRoom_SearchMembers_Request* _this = reinterpret_cast< CChatRoom_SearchMembers_Request* >(object);
  (void)_this;
}
void CChatRoom_SearchMembers_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SearchMembers_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SearchMembers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SearchMembers_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_results_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(max_results_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SearchMembers_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 search_id = 2 [(.description) = "Client-supplied id.  For find-as-you-type searches, as search narrows the server will not return persona states previously returned for a given searchid."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_search_id(&has_bits);
          search_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string search_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_search_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_SearchMembers_Request.search_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_results(&has_bits);
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SearchMembers_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SearchMembers_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 search_id = 2 [(.description) = "Client-supplied id.  For find-as-you-type searches, as search narrows the server will not return persona states previously returned for a given searchid."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_search_id(), target);
  }

  // optional string search_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_text().data(), static_cast<int>(this->_internal_search_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_SearchMembers_Request.search_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_search_text(), target);
  }

  // optional int32 max_results = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SearchMembers_Request)
  return target;
}

size_t CChatRoom_SearchMembers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SearchMembers_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string search_text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_text());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 search_id = 2 [(.description) = "Client-supplied id.  For find-as-you-type searches, as search narrows the server will not return persona states previously returned for a given searchid."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_search_id());
    }

    // optional int32 max_results = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_results());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SearchMembers_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SearchMembers_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SearchMembers_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_SearchMembers_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SearchMembers_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_SearchMembers_Request &>(from));
}


void CChatRoom_SearchMembers_Request::MergeFrom(const CChatRoom_SearchMembers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SearchMembers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_text(from._internal_search_text());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      search_id_ = from.search_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_results_ = from.max_results_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SearchMembers_Request::CopyFrom(const CChatRoom_SearchMembers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SearchMembers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SearchMembers_Request::IsInitialized() const {
  return true;
}

void CChatRoom_SearchMembers_Request::InternalSwap(CChatRoom_SearchMembers_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &search_text_, lhs_arena,
      &other->search_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SearchMembers_Request, max_results_)
      + sizeof(CChatRoom_SearchMembers_Request::max_results_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SearchMembers_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SearchMembers_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[118]);
}

// ===================================================================

class CChatRoom_SearchMembers_Response_MemberMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SearchMembers_Response_MemberMatch>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgClientPersonaState_Friend& persona(const CChatRoom_SearchMembers_Response_MemberMatch* msg);
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientPersonaState_Friend&
CChatRoom_SearchMembers_Response_MemberMatch::_Internal::persona(const CChatRoom_SearchMembers_Response_MemberMatch* msg) {
  return *msg->persona_;
}
void CChatRoom_SearchMembers_Response_MemberMatch::clear_persona() {
  if (persona_ != nullptr) persona_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CChatRoom_SearchMembers_Response_MemberMatch::CChatRoom_SearchMembers_Response_MemberMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SearchMembers_Response.MemberMatch)
}
CChatRoom_SearchMembers_Response_MemberMatch::CChatRoom_SearchMembers_Response_MemberMatch(const CChatRoom_SearchMembers_Response_MemberMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_persona()) {
    persona_ = new ::CMsgClientPersonaState_Friend(*from.persona_);
  } else {
    persona_ = nullptr;
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SearchMembers_Response.MemberMatch)
}

inline void CChatRoom_SearchMembers_Response_MemberMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&persona_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&persona_)) + sizeof(accountid_));
}

CChatRoom_SearchMembers_Response_MemberMatch::~CChatRoom_SearchMembers_Response_MemberMatch() {
  // @@protoc_insertion_point(destructor:CChatRoom_SearchMembers_Response.MemberMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SearchMembers_Response_MemberMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete persona_;
}

void CChatRoom_SearchMembers_Response_MemberMatch::ArenaDtor(void* object) {
  CChatRoom_SearchMembers_Response_MemberMatch* _this = reinterpret_cast< CChatRoom_SearchMembers_Response_MemberMatch* >(object);
  (void)_this;
}
void CChatRoom_SearchMembers_Response_MemberMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SearchMembers_Response_MemberMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SearchMembers_Response_MemberMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SearchMembers_Response.MemberMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(persona_ != nullptr);
    persona_->Clear();
  }
  accountid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SearchMembers_Response_MemberMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientPersonaState.Friend persona = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_persona(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SearchMembers_Response_MemberMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SearchMembers_Response.MemberMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional .CMsgClientPersonaState.Friend persona = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::persona(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SearchMembers_Response.MemberMatch)
  return target;
}

size_t CChatRoom_SearchMembers_Response_MemberMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SearchMembers_Response.MemberMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientPersonaState.Friend persona = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *persona_);
    }

    // optional int32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SearchMembers_Response_MemberMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SearchMembers_Response_MemberMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SearchMembers_Response_MemberMatch::GetClassData() const { return &_class_data_; }

void CChatRoom_SearchMembers_Response_MemberMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SearchMembers_Response_MemberMatch *>(to)->MergeFrom(
      static_cast<const CChatRoom_SearchMembers_Response_MemberMatch &>(from));
}


void CChatRoom_SearchMembers_Response_MemberMatch::MergeFrom(const CChatRoom_SearchMembers_Response_MemberMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SearchMembers_Response.MemberMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_persona()->::CMsgClientPersonaState_Friend::MergeFrom(from._internal_persona());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SearchMembers_Response_MemberMatch::CopyFrom(const CChatRoom_SearchMembers_Response_MemberMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SearchMembers_Response.MemberMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SearchMembers_Response_MemberMatch::IsInitialized() const {
  return true;
}

void CChatRoom_SearchMembers_Response_MemberMatch::InternalSwap(CChatRoom_SearchMembers_Response_MemberMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_SearchMembers_Response_MemberMatch, accountid_)
      + sizeof(CChatRoom_SearchMembers_Response_MemberMatch::accountid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_SearchMembers_Response_MemberMatch, persona_)>(
          reinterpret_cast<char*>(&persona_),
          reinterpret_cast<char*>(&other->persona_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SearchMembers_Response_MemberMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[119]);
}

// ===================================================================

class CChatRoom_SearchMembers_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_SearchMembers_Response>()._has_bits_);
  static void set_has_status_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_SearchMembers_Response::CChatRoom_SearchMembers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matching_members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_SearchMembers_Response)
}
CChatRoom_SearchMembers_Response::CChatRoom_SearchMembers_Response(const CChatRoom_SearchMembers_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matching_members_(from.matching_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_flags_ = from.status_flags_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_SearchMembers_Response)
}

inline void CChatRoom_SearchMembers_Response::SharedCtor() {
status_flags_ = 0u;
}

CChatRoom_SearchMembers_Response::~CChatRoom_SearchMembers_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_SearchMembers_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_SearchMembers_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_SearchMembers_Response::ArenaDtor(void* object) {
  CChatRoom_SearchMembers_Response* _this = reinterpret_cast< CChatRoom_SearchMembers_Response* >(object);
  (void)_this;
}
void CChatRoom_SearchMembers_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_SearchMembers_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_SearchMembers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_SearchMembers_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matching_members_.Clear();
  status_flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_SearchMembers_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CChatRoom_SearchMembers_Response.MemberMatch matching_members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matching_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_status_flags(&has_bits);
          status_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_SearchMembers_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_SearchMembers_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CChatRoom_SearchMembers_Response.MemberMatch matching_members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matching_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matching_members(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_flags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_SearchMembers_Response)
  return target;
}

size_t CChatRoom_SearchMembers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_SearchMembers_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_SearchMembers_Response.MemberMatch matching_members = 1;
  total_size += 1UL * this->_internal_matching_members_size();
  for (const auto& msg : this->matching_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 status_flags = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_SearchMembers_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_SearchMembers_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_SearchMembers_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_SearchMembers_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_SearchMembers_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_SearchMembers_Response &>(from));
}


void CChatRoom_SearchMembers_Response::MergeFrom(const CChatRoom_SearchMembers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_SearchMembers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  matching_members_.MergeFrom(from.matching_members_);
  if (from._internal_has_status_flags()) {
    _internal_set_status_flags(from._internal_status_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_SearchMembers_Response::CopyFrom(const CChatRoom_SearchMembers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_SearchMembers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_SearchMembers_Response::IsInitialized() const {
  return true;
}

void CChatRoom_SearchMembers_Response::InternalSwap(CChatRoom_SearchMembers_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matching_members_.InternalSwap(&other->matching_members_);
  swap(status_flags_, other->status_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_SearchMembers_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[120]);
}

// ===================================================================

class CChatRoom_UpdateMessageReaction_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_UpdateMessageReaction_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_add(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CChatRoom_UpdateMessageReaction_Request::CChatRoom_UpdateMessageReaction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_UpdateMessageReaction_Request)
}
CChatRoom_UpdateMessageReaction_Request::CChatRoom_UpdateMessageReaction_Request(const CChatRoom_UpdateMessageReaction_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reaction()) {
    reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reaction(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(is_add_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_UpdateMessageReaction_Request)
}

inline void CChatRoom_UpdateMessageReaction_Request::SharedCtor() {
reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(is_add_));
}

CChatRoom_UpdateMessageReaction_Request::~CChatRoom_UpdateMessageReaction_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_UpdateMessageReaction_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_UpdateMessageReaction_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_UpdateMessageReaction_Request::ArenaDtor(void* object) {
  CChatRoom_UpdateMessageReaction_Request* _this = reinterpret_cast< CChatRoom_UpdateMessageReaction_Request* >(object);
  (void)_this;
}
void CChatRoom_UpdateMessageReaction_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_UpdateMessageReaction_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_UpdateMessageReaction_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_UpdateMessageReaction_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reaction_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_add_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(is_add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_UpdateMessageReaction_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomMessageReactionType reaction_type = 5 [default = k_EChatRoomMessageReactionType_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomMessageReactionType_IsValid(val))) {
            _internal_set_reaction_type(static_cast<::EChatRoomMessageReactionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_reaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_UpdateMessageReaction_Request.reaction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_add = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_add(&has_bits);
          is_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_UpdateMessageReaction_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_UpdateMessageReaction_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional uint32 server_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ordinal(), target);
  }

  // optional .EChatRoomMessageReactionType reaction_type = 5 [default = k_EChatRoomMessageReactionType_Invalid];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reaction_type(), target);
  }

  // optional string reaction = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction().data(), static_cast<int>(this->_internal_reaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_UpdateMessageReaction_Request.reaction");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reaction(), target);
  }

  // optional bool is_add = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_UpdateMessageReaction_Request)
  return target;
}

size_t CChatRoom_UpdateMessageReaction_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_UpdateMessageReaction_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string reaction = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 server_timestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional .EChatRoomMessageReactionType reaction_type = 5 [default = k_EChatRoomMessageReactionType_Invalid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction_type());
    }

    // optional bool is_add = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_UpdateMessageReaction_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_UpdateMessageReaction_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_UpdateMessageReaction_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_UpdateMessageReaction_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_UpdateMessageReaction_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_UpdateMessageReaction_Request &>(from));
}


void CChatRoom_UpdateMessageReaction_Request::MergeFrom(const CChatRoom_UpdateMessageReaction_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_UpdateMessageReaction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reaction(from._internal_reaction());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000020u) {
      reaction_type_ = from.reaction_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_add_ = from.is_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_UpdateMessageReaction_Request::CopyFrom(const CChatRoom_UpdateMessageReaction_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_UpdateMessageReaction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_UpdateMessageReaction_Request::IsInitialized() const {
  return true;
}

void CChatRoom_UpdateMessageReaction_Request::InternalSwap(CChatRoom_UpdateMessageReaction_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reaction_, lhs_arena,
      &other->reaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_UpdateMessageReaction_Request, is_add_)
      + sizeof(CChatRoom_UpdateMessageReaction_Request::is_add_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_UpdateMessageReaction_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_UpdateMessageReaction_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[121]);
}

// ===================================================================

class CChatRoom_UpdateMessageReaction_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_UpdateMessageReaction_Response>()._has_bits_);
  static void set_has_num_reactors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatRoom_UpdateMessageReaction_Response::CChatRoom_UpdateMessageReaction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_UpdateMessageReaction_Response)
}
CChatRoom_UpdateMessageReaction_Response::CChatRoom_UpdateMessageReaction_Response(const CChatRoom_UpdateMessageReaction_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_reactors_ = from.num_reactors_;
  // @@protoc_insertion_point(copy_constructor:CChatRoom_UpdateMessageReaction_Response)
}

inline void CChatRoom_UpdateMessageReaction_Response::SharedCtor() {
num_reactors_ = 0u;
}

CChatRoom_UpdateMessageReaction_Response::~CChatRoom_UpdateMessageReaction_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_UpdateMessageReaction_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_UpdateMessageReaction_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_UpdateMessageReaction_Response::ArenaDtor(void* object) {
  CChatRoom_UpdateMessageReaction_Response* _this = reinterpret_cast< CChatRoom_UpdateMessageReaction_Response* >(object);
  (void)_this;
}
void CChatRoom_UpdateMessageReaction_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_UpdateMessageReaction_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_UpdateMessageReaction_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_UpdateMessageReaction_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_reactors_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_UpdateMessageReaction_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_reactors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_reactors(&has_bits);
          num_reactors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_UpdateMessageReaction_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_UpdateMessageReaction_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_reactors = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_reactors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_UpdateMessageReaction_Response)
  return target;
}

size_t CChatRoom_UpdateMessageReaction_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_UpdateMessageReaction_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 num_reactors = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_reactors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_UpdateMessageReaction_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_UpdateMessageReaction_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_UpdateMessageReaction_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_UpdateMessageReaction_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_UpdateMessageReaction_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_UpdateMessageReaction_Response &>(from));
}


void CChatRoom_UpdateMessageReaction_Response::MergeFrom(const CChatRoom_UpdateMessageReaction_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_UpdateMessageReaction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_num_reactors()) {
    _internal_set_num_reactors(from._internal_num_reactors());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_UpdateMessageReaction_Response::CopyFrom(const CChatRoom_UpdateMessageReaction_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_UpdateMessageReaction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_UpdateMessageReaction_Response::IsInitialized() const {
  return true;
}

void CChatRoom_UpdateMessageReaction_Response::InternalSwap(CChatRoom_UpdateMessageReaction_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_reactors_, other->num_reactors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_UpdateMessageReaction_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[122]);
}

// ===================================================================

class CChatRoom_GetMessageReactionReactors_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_GetMessageReactionReactors_Request>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CChatRoom_GetMessageReactionReactors_Request::CChatRoom_GetMessageReactionReactors_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMessageReactionReactors_Request)
}
CChatRoom_GetMessageReactionReactors_Request::CChatRoom_GetMessageReactionReactors_Request(const CChatRoom_GetMessageReactionReactors_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reaction()) {
    reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reaction(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageReactionReactors_Request)
}

inline void CChatRoom_GetMessageReactionReactors_Request::SharedCtor() {
reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(limit_));
}

CChatRoom_GetMessageReactionReactors_Request::~CChatRoom_GetMessageReactionReactors_Request() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageReactionReactors_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetMessageReactionReactors_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_GetMessageReactionReactors_Request::ArenaDtor(void* object) {
  CChatRoom_GetMessageReactionReactors_Request* _this = reinterpret_cast< CChatRoom_GetMessageReactionReactors_Request* >(object);
  (void)_this;
}
void CChatRoom_GetMessageReactionReactors_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetMessageReactionReactors_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetMessageReactionReactors_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageReactionReactors_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reaction_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetMessageReactionReactors_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomMessageReactionType reaction_type = 5 [default = k_EChatRoomMessageReactionType_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomMessageReactionType_IsValid(val))) {
            _internal_set_reaction_type(static_cast<::EChatRoomMessageReactionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_reaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_GetMessageReactionReactors_Request.reaction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetMessageReactionReactors_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageReactionReactors_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional uint32 server_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ordinal(), target);
  }

  // optional .EChatRoomMessageReactionType reaction_type = 5 [default = k_EChatRoomMessageReactionType_Invalid];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reaction_type(), target);
  }

  // optional string reaction = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction().data(), static_cast<int>(this->_internal_reaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_GetMessageReactionReactors_Request.reaction");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reaction(), target);
  }

  // optional uint32 limit = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageReactionReactors_Request)
  return target;
}

size_t CChatRoom_GetMessageReactionReactors_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageReactionReactors_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string reaction = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 server_timestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional .EChatRoomMessageReactionType reaction_type = 5 [default = k_EChatRoomMessageReactionType_Invalid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction_type());
    }

    // optional uint32 limit = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMessageReactionReactors_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetMessageReactionReactors_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMessageReactionReactors_Request::GetClassData() const { return &_class_data_; }

void CChatRoom_GetMessageReactionReactors_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetMessageReactionReactors_Request *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetMessageReactionReactors_Request &>(from));
}


void CChatRoom_GetMessageReactionReactors_Request::MergeFrom(const CChatRoom_GetMessageReactionReactors_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageReactionReactors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reaction(from._internal_reaction());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000020u) {
      reaction_type_ = from.reaction_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetMessageReactionReactors_Request::CopyFrom(const CChatRoom_GetMessageReactionReactors_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageReactionReactors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageReactionReactors_Request::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageReactionReactors_Request::InternalSwap(CChatRoom_GetMessageReactionReactors_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reaction_, lhs_arena,
      &other->reaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageReactionReactors_Request, limit_)
      + sizeof(CChatRoom_GetMessageReactionReactors_Request::limit_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_GetMessageReactionReactors_Request, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMessageReactionReactors_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[123]);
}

// ===================================================================

class CChatRoom_GetMessageReactionReactors_Response::_Internal {
 public:
};

CChatRoom_GetMessageReactionReactors_Response::CChatRoom_GetMessageReactionReactors_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reactors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_GetMessageReactionReactors_Response)
}
CChatRoom_GetMessageReactionReactors_Response::CChatRoom_GetMessageReactionReactors_Response(const CChatRoom_GetMessageReactionReactors_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reactors_(from.reactors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CChatRoom_GetMessageReactionReactors_Response)
}

inline void CChatRoom_GetMessageReactionReactors_Response::SharedCtor() {
}

CChatRoom_GetMessageReactionReactors_Response::~CChatRoom_GetMessageReactionReactors_Response() {
  // @@protoc_insertion_point(destructor:CChatRoom_GetMessageReactionReactors_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_GetMessageReactionReactors_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_GetMessageReactionReactors_Response::ArenaDtor(void* object) {
  CChatRoom_GetMessageReactionReactors_Response* _this = reinterpret_cast< CChatRoom_GetMessageReactionReactors_Response* >(object);
  (void)_this;
}
void CChatRoom_GetMessageReactionReactors_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_GetMessageReactionReactors_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_GetMessageReactionReactors_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_GetMessageReactionReactors_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_GetMessageReactionReactors_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 reactors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reactors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reactors(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_GetMessageReactionReactors_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_GetMessageReactionReactors_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 reactors = 1;
  for (int i = 0, n = this->_internal_reactors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reactors(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_GetMessageReactionReactors_Response)
  return target;
}

size_t CChatRoom_GetMessageReactionReactors_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_GetMessageReactionReactors_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 reactors = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reactors_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reactors_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_GetMessageReactionReactors_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_GetMessageReactionReactors_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_GetMessageReactionReactors_Response::GetClassData() const { return &_class_data_; }

void CChatRoom_GetMessageReactionReactors_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_GetMessageReactionReactors_Response *>(to)->MergeFrom(
      static_cast<const CChatRoom_GetMessageReactionReactors_Response &>(from));
}


void CChatRoom_GetMessageReactionReactors_Response::MergeFrom(const CChatRoom_GetMessageReactionReactors_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_GetMessageReactionReactors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reactors_.MergeFrom(from.reactors_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_GetMessageReactionReactors_Response::CopyFrom(const CChatRoom_GetMessageReactionReactors_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_GetMessageReactionReactors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_GetMessageReactionReactors_Response::IsInitialized() const {
  return true;
}

void CChatRoom_GetMessageReactionReactors_Response::InternalSwap(CChatRoom_GetMessageReactionReactors_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reactors_.InternalSwap(&other->reactors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_GetMessageReactionReactors_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[124]);
}

// ===================================================================

class CClanChatRooms_GetClanChatRoomInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CClanChatRooms_GetClanChatRoomInfo_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autocreate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClanChatRooms_GetClanChatRoomInfo_Request::CClanChatRooms_GetClanChatRoomInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClanChatRooms_GetClanChatRoomInfo_Request)
}
CClanChatRooms_GetClanChatRoomInfo_Request::CClanChatRooms_GetClanChatRoomInfo_Request(const CClanChatRooms_GetClanChatRoomInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autocreate_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(autocreate_));
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_GetClanChatRoomInfo_Request)
}

inline void CClanChatRooms_GetClanChatRoomInfo_Request::SharedCtor() {
steamid_ = uint64_t{0u};
autocreate_ = true;
}

CClanChatRooms_GetClanChatRoomInfo_Request::~CClanChatRooms_GetClanChatRoomInfo_Request() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_GetClanChatRoomInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClanChatRooms_GetClanChatRoomInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClanChatRooms_GetClanChatRoomInfo_Request::ArenaDtor(void* object) {
  CClanChatRooms_GetClanChatRoomInfo_Request* _this = reinterpret_cast< CClanChatRooms_GetClanChatRoomInfo_Request* >(object);
  (void)_this;
}
void CClanChatRooms_GetClanChatRoomInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClanChatRooms_GetClanChatRoomInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClanChatRooms_GetClanChatRoomInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    steamid_ = uint64_t{0u};
    autocreate_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClanChatRooms_GetClanChatRoomInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool autocreate = 2 [default = true, (.description) = "Create a default chat room if none has been created before."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_autocreate(&has_bits);
          autocreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClanChatRooms_GetClanChatRoomInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool autocreate = 2 [default = true, (.description) = "Create a default chat room if none has been created before."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_autocreate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_GetClanChatRoomInfo_Request)
  return target;
}

size_t CClanChatRooms_GetClanChatRoomInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool autocreate = 2 [default = true, (.description) = "Create a default chat room if none has been created before."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClanChatRooms_GetClanChatRoomInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClanChatRooms_GetClanChatRoomInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClanChatRooms_GetClanChatRoomInfo_Request::GetClassData() const { return &_class_data_; }

void CClanChatRooms_GetClanChatRoomInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClanChatRooms_GetClanChatRoomInfo_Request *>(to)->MergeFrom(
      static_cast<const CClanChatRooms_GetClanChatRoomInfo_Request &>(from));
}


void CClanChatRooms_GetClanChatRoomInfo_Request::MergeFrom(const CClanChatRooms_GetClanChatRoomInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      autocreate_ = from.autocreate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClanChatRooms_GetClanChatRoomInfo_Request::CopyFrom(const CClanChatRooms_GetClanChatRoomInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_GetClanChatRoomInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_GetClanChatRoomInfo_Request::IsInitialized() const {
  return true;
}

void CClanChatRooms_GetClanChatRoomInfo_Request::InternalSwap(CClanChatRooms_GetClanChatRoomInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(autocreate_, other->autocreate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClanChatRooms_GetClanChatRoomInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[125]);
}

// ===================================================================

class CClanChatRooms_GetClanChatRoomInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CClanChatRooms_GetClanChatRoomInfo_Response>()._has_bits_);
  static const ::CChatRoom_GetChatRoomGroupSummary_Response& chat_group_summary(const CClanChatRooms_GetClanChatRoomInfo_Response* msg);
  static void set_has_chat_group_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CChatRoom_GetChatRoomGroupSummary_Response&
CClanChatRooms_GetClanChatRoomInfo_Response::_Internal::chat_group_summary(const CClanChatRooms_GetClanChatRoomInfo_Response* msg) {
  return *msg->chat_group_summary_;
}
CClanChatRooms_GetClanChatRoomInfo_Response::CClanChatRooms_GetClanChatRoomInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClanChatRooms_GetClanChatRoomInfo_Response)
}
CClanChatRooms_GetClanChatRoomInfo_Response::CClanChatRooms_GetClanChatRoomInfo_Response(const CClanChatRooms_GetClanChatRoomInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat_group_summary()) {
    chat_group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.chat_group_summary_);
  } else {
    chat_group_summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_GetClanChatRoomInfo_Response)
}

inline void CClanChatRooms_GetClanChatRoomInfo_Response::SharedCtor() {
chat_group_summary_ = nullptr;
}

CClanChatRooms_GetClanChatRoomInfo_Response::~CClanChatRooms_GetClanChatRoomInfo_Response() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_GetClanChatRoomInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClanChatRooms_GetClanChatRoomInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete chat_group_summary_;
}

void CClanChatRooms_GetClanChatRoomInfo_Response::ArenaDtor(void* object) {
  CClanChatRooms_GetClanChatRoomInfo_Response* _this = reinterpret_cast< CClanChatRooms_GetClanChatRoomInfo_Response* >(object);
  (void)_this;
}
void CClanChatRooms_GetClanChatRoomInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClanChatRooms_GetClanChatRoomInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClanChatRooms_GetClanChatRoomInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(chat_group_summary_ != nullptr);
    chat_group_summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClanChatRooms_GetClanChatRoomInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoom_GetChatRoomGroupSummary_Response chat_group_summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_group_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClanChatRooms_GetClanChatRoomInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoom_GetChatRoomGroupSummary_Response chat_group_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat_group_summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_GetClanChatRoomInfo_Response)
  return target;
}

size_t CClanChatRooms_GetClanChatRoomInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CChatRoom_GetChatRoomGroupSummary_Response chat_group_summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_group_summary_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClanChatRooms_GetClanChatRoomInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClanChatRooms_GetClanChatRoomInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClanChatRooms_GetClanChatRoomInfo_Response::GetClassData() const { return &_class_data_; }

void CClanChatRooms_GetClanChatRoomInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClanChatRooms_GetClanChatRoomInfo_Response *>(to)->MergeFrom(
      static_cast<const CClanChatRooms_GetClanChatRoomInfo_Response &>(from));
}


void CClanChatRooms_GetClanChatRoomInfo_Response::MergeFrom(const CClanChatRooms_GetClanChatRoomInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_group_summary()) {
    _internal_mutable_chat_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from._internal_chat_group_summary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClanChatRooms_GetClanChatRoomInfo_Response::CopyFrom(const CClanChatRooms_GetClanChatRoomInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_GetClanChatRoomInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_GetClanChatRoomInfo_Response::IsInitialized() const {
  return true;
}

void CClanChatRooms_GetClanChatRoomInfo_Response::InternalSwap(CClanChatRooms_GetClanChatRoomInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_group_summary_, other->chat_group_summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClanChatRooms_GetClanChatRoomInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[126]);
}

// ===================================================================

class CClanChatRooms_SetClanChatRoomPrivate_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CClanChatRooms_SetClanChatRoomPrivate_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_room_private(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClanChatRooms_SetClanChatRoomPrivate_Request::CClanChatRooms_SetClanChatRoomPrivate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClanChatRooms_SetClanChatRoomPrivate_Request)
}
CClanChatRooms_SetClanChatRoomPrivate_Request::CClanChatRooms_SetClanChatRoomPrivate_Request(const CClanChatRooms_SetClanChatRoomPrivate_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_room_private_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(chat_room_private_));
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_SetClanChatRoomPrivate_Request)
}

inline void CClanChatRooms_SetClanChatRoomPrivate_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_room_private_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(chat_room_private_));
}

CClanChatRooms_SetClanChatRoomPrivate_Request::~CClanChatRooms_SetClanChatRoomPrivate_Request() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_SetClanChatRoomPrivate_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClanChatRooms_SetClanChatRoomPrivate_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::ArenaDtor(void* object) {
  CClanChatRooms_SetClanChatRoomPrivate_Request* _this = reinterpret_cast< CClanChatRooms_SetClanChatRoomPrivate_Request* >(object);
  (void)_this;
}
void CClanChatRooms_SetClanChatRoomPrivate_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClanChatRooms_SetClanChatRoomPrivate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_room_private_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(chat_room_private_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClanChatRooms_SetClanChatRoomPrivate_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool chat_room_private = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_room_private(&has_bits);
          chat_room_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClanChatRooms_SetClanChatRoomPrivate_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool chat_room_private = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_chat_room_private(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_SetClanChatRoomPrivate_Request)
  return target;
}

size_t CClanChatRooms_SetClanChatRoomPrivate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool chat_room_private = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClanChatRooms_SetClanChatRoomPrivate_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClanChatRooms_SetClanChatRoomPrivate_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClanChatRooms_SetClanChatRoomPrivate_Request::GetClassData() const { return &_class_data_; }

void CClanChatRooms_SetClanChatRoomPrivate_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClanChatRooms_SetClanChatRoomPrivate_Request *>(to)->MergeFrom(
      static_cast<const CClanChatRooms_SetClanChatRoomPrivate_Request &>(from));
}


void CClanChatRooms_SetClanChatRoomPrivate_Request::MergeFrom(const CClanChatRooms_SetClanChatRoomPrivate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_room_private_ = from.chat_room_private_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::CopyFrom(const CClanChatRooms_SetClanChatRoomPrivate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_SetClanChatRoomPrivate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_SetClanChatRoomPrivate_Request::IsInitialized() const {
  return true;
}

void CClanChatRooms_SetClanChatRoomPrivate_Request::InternalSwap(CClanChatRooms_SetClanChatRoomPrivate_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClanChatRooms_SetClanChatRoomPrivate_Request, chat_room_private_)
      + sizeof(CClanChatRooms_SetClanChatRoomPrivate_Request::chat_room_private_)
      - PROTOBUF_FIELD_OFFSET(CClanChatRooms_SetClanChatRoomPrivate_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClanChatRooms_SetClanChatRoomPrivate_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[127]);
}

// ===================================================================

class CClanChatRooms_SetClanChatRoomPrivate_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CClanChatRooms_SetClanChatRoomPrivate_Response>()._has_bits_);
  static void set_has_chat_room_private(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClanChatRooms_SetClanChatRoomPrivate_Response::CClanChatRooms_SetClanChatRoomPrivate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClanChatRooms_SetClanChatRoomPrivate_Response)
}
CClanChatRooms_SetClanChatRoomPrivate_Response::CClanChatRooms_SetClanChatRoomPrivate_Response(const CClanChatRooms_SetClanChatRoomPrivate_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_room_private_ = from.chat_room_private_;
  // @@protoc_insertion_point(copy_constructor:CClanChatRooms_SetClanChatRoomPrivate_Response)
}

inline void CClanChatRooms_SetClanChatRoomPrivate_Response::SharedCtor() {
chat_room_private_ = false;
}

CClanChatRooms_SetClanChatRoomPrivate_Response::~CClanChatRooms_SetClanChatRoomPrivate_Response() {
  // @@protoc_insertion_point(destructor:CClanChatRooms_SetClanChatRoomPrivate_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClanChatRooms_SetClanChatRoomPrivate_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::ArenaDtor(void* object) {
  CClanChatRooms_SetClanChatRoomPrivate_Response* _this = reinterpret_cast< CClanChatRooms_SetClanChatRoomPrivate_Response* >(object);
  (void)_this;
}
void CClanChatRooms_SetClanChatRoomPrivate_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClanChatRooms_SetClanChatRoomPrivate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_room_private_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClanChatRooms_SetClanChatRoomPrivate_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool chat_room_private = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_room_private(&has_bits);
          chat_room_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClanChatRooms_SetClanChatRoomPrivate_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool chat_room_private = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_chat_room_private(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanChatRooms_SetClanChatRoomPrivate_Response)
  return target;
}

size_t CClanChatRooms_SetClanChatRoomPrivate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool chat_room_private = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClanChatRooms_SetClanChatRoomPrivate_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClanChatRooms_SetClanChatRoomPrivate_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClanChatRooms_SetClanChatRoomPrivate_Response::GetClassData() const { return &_class_data_; }

void CClanChatRooms_SetClanChatRoomPrivate_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClanChatRooms_SetClanChatRoomPrivate_Response *>(to)->MergeFrom(
      static_cast<const CClanChatRooms_SetClanChatRoomPrivate_Response &>(from));
}


void CClanChatRooms_SetClanChatRoomPrivate_Response::MergeFrom(const CClanChatRooms_SetClanChatRoomPrivate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat_room_private()) {
    _internal_set_chat_room_private(from._internal_chat_room_private());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::CopyFrom(const CClanChatRooms_SetClanChatRoomPrivate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanChatRooms_SetClanChatRoomPrivate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClanChatRooms_SetClanChatRoomPrivate_Response::IsInitialized() const {
  return true;
}

void CClanChatRooms_SetClanChatRoomPrivate_Response::InternalSwap(CClanChatRooms_SetClanChatRoomPrivate_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chat_room_private_, other->chat_room_private_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClanChatRooms_SetClanChatRoomPrivate_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[128]);
}

// ===================================================================

class CChatMentions::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatMentions>()._has_bits_);
  static void set_has_mention_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mention_here(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatMentions::CChatMentions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mention_accountids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatMentions)
}
CChatMentions::CChatMentions(const CChatMentions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mention_accountids_(from.mention_accountids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mention_all_, &from.mention_all_,
    static_cast<size_t>(reinterpret_cast<char*>(&mention_here_) -
    reinterpret_cast<char*>(&mention_all_)) + sizeof(mention_here_));
  // @@protoc_insertion_point(copy_constructor:CChatMentions)
}

inline void CChatMentions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mention_all_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mention_here_) -
    reinterpret_cast<char*>(&mention_all_)) + sizeof(mention_here_));
}

CChatMentions::~CChatMentions() {
  // @@protoc_insertion_point(destructor:CChatMentions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatMentions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatMentions::ArenaDtor(void* object) {
  CChatMentions* _this = reinterpret_cast< CChatMentions* >(object);
  (void)_this;
}
void CChatMentions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatMentions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatMentions::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatMentions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mention_accountids_.Clear();
  ::memset(&mention_all_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mention_here_) -
      reinterpret_cast<char*>(&mention_all_)) + sizeof(mention_here_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatMentions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool mention_all = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mention_all(&has_bits);
          mention_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mention_here = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mention_here(&has_bits);
          mention_here_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 mention_accountids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mention_accountids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mention_accountids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatMentions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatMentions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool mention_all = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mention_all(), target);
  }

  // optional bool mention_here = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mention_here(), target);
  }

  // repeated uint32 mention_accountids = 3;
  for (int i = 0, n = this->_internal_mention_accountids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mention_accountids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatMentions)
  return target;
}

size_t CChatMentions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatMentions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mention_accountids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mention_accountids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mention_accountids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool mention_all = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool mention_here = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatMentions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatMentions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatMentions::GetClassData() const { return &_class_data_; }

void CChatMentions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatMentions *>(to)->MergeFrom(
      static_cast<const CChatMentions &>(from));
}


void CChatMentions::MergeFrom(const CChatMentions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatMentions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mention_accountids_.MergeFrom(from.mention_accountids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mention_all_ = from.mention_all_;
    }
    if (cached_has_bits & 0x00000002u) {
      mention_here_ = from.mention_here_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatMentions::CopyFrom(const CChatMentions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatMentions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatMentions::IsInitialized() const {
  return true;
}

void CChatMentions::InternalSwap(CChatMentions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mention_accountids_.InternalSwap(&other->mention_accountids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatMentions, mention_here_)
      + sizeof(CChatMentions::mention_here_)
      - PROTOBUF_FIELD_OFFSET(CChatMentions, mention_all_)>(
          reinterpret_cast<char*>(&mention_all_),
          reinterpret_cast<char*>(&other->mention_all_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatMentions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[129]);
}

// ===================================================================

class CChatRoom_IncomingChatMessage_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_IncomingChatMessage_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steamid_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CChatMentions& mentions(const CChatRoom_IncomingChatMessage_Notification* msg);
  static void set_has_mentions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ServerMessage& server_message(const CChatRoom_IncomingChatMessage_Notification* msg);
  static void set_has_server_message(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_message_no_bbcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CChatMentions&
CChatRoom_IncomingChatMessage_Notification::_Internal::mentions(const CChatRoom_IncomingChatMessage_Notification* msg) {
  return *msg->mentions_;
}
const ::ServerMessage&
CChatRoom_IncomingChatMessage_Notification::_Internal::server_message(const CChatRoom_IncomingChatMessage_Notification* msg) {
  return *msg->server_message_;
}
CChatRoom_IncomingChatMessage_Notification::CChatRoom_IncomingChatMessage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_IncomingChatMessage_Notification)
}
CChatRoom_IncomingChatMessage_Notification::CChatRoom_IncomingChatMessage_Notification(const CChatRoom_IncomingChatMessage_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  message_no_bbcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_no_bbcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_no_bbcode()) {
    message_no_bbcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_no_bbcode(), 
      GetArenaForAllocation());
  }
  chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_name()) {
    chat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mentions()) {
    mentions_ = new ::CChatMentions(*from.mentions_);
  } else {
    mentions_ = nullptr;
  }
  if (from._internal_has_server_message()) {
    server_message_ = new ::ServerMessage(*from.server_message_);
  } else {
    server_message_ = nullptr;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_IncomingChatMessage_Notification)
}

inline void CChatRoom_IncomingChatMessage_Notification::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_no_bbcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_no_bbcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mentions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&mentions_)) + sizeof(ordinal_));
}

CChatRoom_IncomingChatMessage_Notification::~CChatRoom_IncomingChatMessage_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_IncomingChatMessage_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_IncomingChatMessage_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_no_bbcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mentions_;
  if (this != internal_default_instance()) delete server_message_;
}

void CChatRoom_IncomingChatMessage_Notification::ArenaDtor(void* object) {
  CChatRoom_IncomingChatMessage_Notification* _this = reinterpret_cast< CChatRoom_IncomingChatMessage_Notification* >(object);
  (void)_this;
}
void CChatRoom_IncomingChatMessage_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_IncomingChatMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_IncomingChatMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_IncomingChatMessage_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_no_bbcode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      chat_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mentions_ != nullptr);
      mentions_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(server_message_ != nullptr);
      server_message_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_sender_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(steamid_sender_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_IncomingChatMessage_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_steamid_sender(&has_bits);
          steamid_sender_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_IncomingChatMessage_Notification.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatMentions mentions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ServerMessage server_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message_no_bbcode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_message_no_bbcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_IncomingChatMessage_Notification.message_no_bbcode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_name = 10 [(.description) = "A name to use for the chat, intended for notifications"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_chat_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_IncomingChatMessage_Notification.chat_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_IncomingChatMessage_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_IncomingChatMessage_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional fixed64 steamid_sender = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid_sender(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_IncomingChatMessage_Notification.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  // optional .CChatMentions mentions = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mentions(this), target, stream);
  }

  // optional uint32 ordinal = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ordinal(), target);
  }

  // optional .ServerMessage server_message = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::server_message(this), target, stream);
  }

  // optional string message_no_bbcode = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_no_bbcode().data(), static_cast<int>(this->_internal_message_no_bbcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_IncomingChatMessage_Notification.message_no_bbcode");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_message_no_bbcode(), target);
  }

  // optional string chat_name = 10 [(.description) = "A name to use for the chat, intended for notifications"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_name().data(), static_cast<int>(this->_internal_chat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_IncomingChatMessage_Notification.chat_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_chat_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_IncomingChatMessage_Notification)
  return target;
}

size_t CChatRoom_IncomingChatMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_IncomingChatMessage_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string message_no_bbcode = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_no_bbcode());
    }

    // optional string chat_name = 10 [(.description) = "A name to use for the chat, intended for notifications"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_name());
    }

    // optional .CChatMentions mentions = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mentions_);
    }

    // optional .ServerMessage server_message = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_message_);
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional fixed64 steamid_sender = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 ordinal = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_IncomingChatMessage_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_IncomingChatMessage_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_IncomingChatMessage_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_IncomingChatMessage_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_IncomingChatMessage_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_IncomingChatMessage_Notification &>(from));
}


void CChatRoom_IncomingChatMessage_Notification::MergeFrom(const CChatRoom_IncomingChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_IncomingChatMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_no_bbcode(from._internal_message_no_bbcode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_chat_name(from._internal_chat_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mentions()->::CChatMentions::MergeFrom(from._internal_mentions());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_server_message()->::ServerMessage::MergeFrom(from._internal_server_message());
    }
    if (cached_has_bits & 0x00000020u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamid_sender_ = from.steamid_sender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_IncomingChatMessage_Notification::CopyFrom(const CChatRoom_IncomingChatMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_IncomingChatMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_IncomingChatMessage_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_IncomingChatMessage_Notification::InternalSwap(CChatRoom_IncomingChatMessage_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_no_bbcode_, lhs_arena,
      &other->message_no_bbcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_name_, lhs_arena,
      &other->chat_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_IncomingChatMessage_Notification, ordinal_)
      + sizeof(CChatRoom_IncomingChatMessage_Notification::ordinal_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_IncomingChatMessage_Notification, mentions_)>(
          reinterpret_cast<char*>(&mentions_),
          reinterpret_cast<char*>(&other->mentions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_IncomingChatMessage_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[130]);
}

// ===================================================================

class CChatRoom_ChatMessageModified_Notification_ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_ChatMessageModified_Notification_ChatMessage>()._has_bits_);
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoom_ChatMessageModified_Notification_ChatMessage::CChatRoom_ChatMessageModified_Notification_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ChatMessageModified_Notification.ChatMessage)
}
CChatRoom_ChatMessageModified_Notification_ChatMessage::CChatRoom_ChatMessageModified_Notification_ChatMessage(const CChatRoom_ChatMessageModified_Notification_ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(deleted_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatMessageModified_Notification.ChatMessage)
}

inline void CChatRoom_ChatMessageModified_Notification_ChatMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(deleted_));
}

CChatRoom_ChatMessageModified_Notification_ChatMessage::~CChatRoom_ChatMessageModified_Notification_ChatMessage() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_ChatMessageModified_Notification_ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::ArenaDtor(void* object) {
  CChatRoom_ChatMessageModified_Notification_ChatMessage* _this = reinterpret_cast< CChatRoom_ChatMessageModified_Notification_ChatMessage* >(object);
  (void)_this;
}
void CChatRoom_ChatMessageModified_Notification_ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_ChatMessageModified_Notification_ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deleted_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(deleted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_ChatMessageModified_Notification_ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_ChatMessageModified_Notification_ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ordinal(), target);
  }

  // optional bool deleted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_deleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  return target;
}

size_t CChatRoom_ChatMessageModified_Notification_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 server_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional bool deleted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ChatMessageModified_Notification_ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_ChatMessageModified_Notification_ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ChatMessageModified_Notification_ChatMessage::GetClassData() const { return &_class_data_; }

void CChatRoom_ChatMessageModified_Notification_ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_ChatMessageModified_Notification_ChatMessage *>(to)->MergeFrom(
      static_cast<const CChatRoom_ChatMessageModified_Notification_ChatMessage &>(from));
}


void CChatRoom_ChatMessageModified_Notification_ChatMessage::MergeFrom(const CChatRoom_ChatMessageModified_Notification_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000004u) {
      deleted_ = from.deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::CopyFrom(const CChatRoom_ChatMessageModified_Notification_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatMessageModified_Notification.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatMessageModified_Notification_ChatMessage::IsInitialized() const {
  return true;
}

void CChatRoom_ChatMessageModified_Notification_ChatMessage::InternalSwap(CChatRoom_ChatMessageModified_Notification_ChatMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_ChatMessageModified_Notification_ChatMessage, deleted_)
      + sizeof(CChatRoom_ChatMessageModified_Notification_ChatMessage::deleted_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_ChatMessageModified_Notification_ChatMessage, server_timestamp_)>(
          reinterpret_cast<char*>(&server_timestamp_),
          reinterpret_cast<char*>(&other->server_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ChatMessageModified_Notification_ChatMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[131]);
}

// ===================================================================

class CChatRoom_ChatMessageModified_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_ChatMessageModified_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_ChatMessageModified_Notification::CChatRoom_ChatMessageModified_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ChatMessageModified_Notification)
}
CChatRoom_ChatMessageModified_Notification::CChatRoom_ChatMessageModified_Notification(const CChatRoom_ChatMessageModified_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatMessageModified_Notification)
}

inline void CChatRoom_ChatMessageModified_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
}

CChatRoom_ChatMessageModified_Notification::~CChatRoom_ChatMessageModified_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatMessageModified_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_ChatMessageModified_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_ChatMessageModified_Notification::ArenaDtor(void* object) {
  CChatRoom_ChatMessageModified_Notification* _this = reinterpret_cast< CChatRoom_ChatMessageModified_Notification* >(object);
  (void)_this;
}
void CChatRoom_ChatMessageModified_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_ChatMessageModified_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_ChatMessageModified_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatMessageModified_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_ChatMessageModified_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoom_ChatMessageModified_Notification.ChatMessage messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_ChatMessageModified_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatMessageModified_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // repeated .CChatRoom_ChatMessageModified_Notification.ChatMessage messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatMessageModified_Notification)
  return target;
}

size_t CChatRoom_ChatMessageModified_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatMessageModified_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoom_ChatMessageModified_Notification.ChatMessage messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ChatMessageModified_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_ChatMessageModified_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ChatMessageModified_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_ChatMessageModified_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_ChatMessageModified_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_ChatMessageModified_Notification &>(from));
}


void CChatRoom_ChatMessageModified_Notification::MergeFrom(const CChatRoom_ChatMessageModified_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatMessageModified_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_ChatMessageModified_Notification::CopyFrom(const CChatRoom_ChatMessageModified_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatMessageModified_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatMessageModified_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_ChatMessageModified_Notification::InternalSwap(CChatRoom_ChatMessageModified_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_ChatMessageModified_Notification, chat_id_)
      + sizeof(CChatRoom_ChatMessageModified_Notification::chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_ChatMessageModified_Notification, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ChatMessageModified_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[132]);
}

// ===================================================================

class CChatRoom_MemberStateChange_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_MemberStateChange_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CChatRoomMember& member(const CChatRoom_MemberStateChange_Notification* msg);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CChatRoomMember&
CChatRoom_MemberStateChange_Notification::_Internal::member(const CChatRoom_MemberStateChange_Notification* msg) {
  return *msg->member_;
}
CChatRoom_MemberStateChange_Notification::CChatRoom_MemberStateChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_MemberStateChange_Notification)
}
CChatRoom_MemberStateChange_Notification::CChatRoom_MemberStateChange_Notification(const CChatRoom_MemberStateChange_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_member()) {
    member_ = new ::CChatRoomMember(*from.member_);
  } else {
    member_ = nullptr;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(change_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_MemberStateChange_Notification)
}

inline void CChatRoom_MemberStateChange_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&member_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_) -
    reinterpret_cast<char*>(&member_)) + sizeof(change_));
}

CChatRoom_MemberStateChange_Notification::~CChatRoom_MemberStateChange_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_MemberStateChange_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_MemberStateChange_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete member_;
}

void CChatRoom_MemberStateChange_Notification::ArenaDtor(void* object) {
  CChatRoom_MemberStateChange_Notification* _this = reinterpret_cast< CChatRoom_MemberStateChange_Notification* >(object);
  (void)_this;
}
void CChatRoom_MemberStateChange_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_MemberStateChange_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_MemberStateChange_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_MemberStateChange_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_ != nullptr);
    member_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_MemberStateChange_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoomMember member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomMemberStateChange change = 3 [default = k_EChatRoomMemberStateChange_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomMemberStateChange_IsValid(val))) {
            _internal_set_change(static_cast<::EChatRoomMemberStateChange>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_MemberStateChange_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_MemberStateChange_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional .CChatRoomMember member = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::member(this), target, stream);
  }

  // optional .EChatRoomMemberStateChange change = 3 [default = k_EChatRoomMemberStateChange_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_MemberStateChange_Notification)
  return target;
}

size_t CChatRoom_MemberStateChange_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_MemberStateChange_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CChatRoomMember member = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_);
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional .EChatRoomMemberStateChange change = 3 [default = k_EChatRoomMemberStateChange_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_MemberStateChange_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_MemberStateChange_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_MemberStateChange_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_MemberStateChange_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_MemberStateChange_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_MemberStateChange_Notification &>(from));
}


void CChatRoom_MemberStateChange_Notification::MergeFrom(const CChatRoom_MemberStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_MemberStateChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_member()->::CChatRoomMember::MergeFrom(from._internal_member());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      change_ = from.change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_MemberStateChange_Notification::CopyFrom(const CChatRoom_MemberStateChange_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_MemberStateChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_MemberStateChange_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_MemberStateChange_Notification::InternalSwap(CChatRoom_MemberStateChange_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_MemberStateChange_Notification, change_)
      + sizeof(CChatRoom_MemberStateChange_Notification::change_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_MemberStateChange_Notification, member_)>(
          reinterpret_cast<char*>(&member_),
          reinterpret_cast<char*>(&other->member_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_MemberStateChange_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[133]);
}

// ===================================================================

class CChatRoom_ChatRoomHeaderState_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_ChatRoomHeaderState_Notification>()._has_bits_);
  static const ::CChatRoomGroupHeaderState& header_state(const CChatRoom_ChatRoomHeaderState_Notification* msg);
  static void set_has_header_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CChatRoomGroupHeaderState&
CChatRoom_ChatRoomHeaderState_Notification::_Internal::header_state(const CChatRoom_ChatRoomHeaderState_Notification* msg) {
  return *msg->header_state_;
}
CChatRoom_ChatRoomHeaderState_Notification::CChatRoom_ChatRoomHeaderState_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ChatRoomHeaderState_Notification)
}
CChatRoom_ChatRoomHeaderState_Notification::CChatRoom_ChatRoomHeaderState_Notification(const CChatRoom_ChatRoomHeaderState_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header_state()) {
    header_state_ = new ::CChatRoomGroupHeaderState(*from.header_state_);
  } else {
    header_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatRoomHeaderState_Notification)
}

inline void CChatRoom_ChatRoomHeaderState_Notification::SharedCtor() {
header_state_ = nullptr;
}

CChatRoom_ChatRoomHeaderState_Notification::~CChatRoom_ChatRoomHeaderState_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatRoomHeaderState_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_ChatRoomHeaderState_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_state_;
}

void CChatRoom_ChatRoomHeaderState_Notification::ArenaDtor(void* object) {
  CChatRoom_ChatRoomHeaderState_Notification* _this = reinterpret_cast< CChatRoom_ChatRoomHeaderState_Notification* >(object);
  (void)_this;
}
void CChatRoom_ChatRoomHeaderState_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_ChatRoomHeaderState_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_ChatRoomHeaderState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatRoomHeaderState_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_state_ != nullptr);
    header_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_ChatRoomHeaderState_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CChatRoomGroupHeaderState header_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_ChatRoomHeaderState_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatRoomHeaderState_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CChatRoomGroupHeaderState header_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatRoomHeaderState_Notification)
  return target;
}

size_t CChatRoom_ChatRoomHeaderState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatRoomHeaderState_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CChatRoomGroupHeaderState header_state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ChatRoomHeaderState_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_ChatRoomHeaderState_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ChatRoomHeaderState_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_ChatRoomHeaderState_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_ChatRoomHeaderState_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_ChatRoomHeaderState_Notification &>(from));
}


void CChatRoom_ChatRoomHeaderState_Notification::MergeFrom(const CChatRoom_ChatRoomHeaderState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatRoomHeaderState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header_state()) {
    _internal_mutable_header_state()->::CChatRoomGroupHeaderState::MergeFrom(from._internal_header_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_ChatRoomHeaderState_Notification::CopyFrom(const CChatRoom_ChatRoomHeaderState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatRoomHeaderState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatRoomHeaderState_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_ChatRoomHeaderState_Notification::InternalSwap(CChatRoom_ChatRoomHeaderState_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_state_, other->header_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ChatRoomHeaderState_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[134]);
}

// ===================================================================

class CChatRoom_ChatRoomGroupRoomsChange_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_ChatRoomGroupRoomsChange_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_ChatRoomGroupRoomsChange_Notification::CChatRoom_ChatRoomGroupRoomsChange_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_rooms_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_ChatRoomGroupRoomsChange_Notification)
}
CChatRoom_ChatRoomGroupRoomsChange_Notification::CChatRoom_ChatRoomGroupRoomsChange_Notification(const CChatRoom_ChatRoomGroupRoomsChange_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chat_rooms_(from.chat_rooms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_chat_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_ChatRoomGroupRoomsChange_Notification)
}

inline void CChatRoom_ChatRoomGroupRoomsChange_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_chat_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_chat_id_));
}

CChatRoom_ChatRoomGroupRoomsChange_Notification::~CChatRoom_ChatRoomGroupRoomsChange_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_ChatRoomGroupRoomsChange_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::ArenaDtor(void* object) {
  CChatRoom_ChatRoomGroupRoomsChange_Notification* _this = reinterpret_cast< CChatRoom_ChatRoomGroupRoomsChange_Notification* >(object);
  (void)_this;
}
void CChatRoom_ChatRoomGroupRoomsChange_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_ChatRoomGroupRoomsChange_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_rooms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_chat_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(default_chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_ChatRoomGroupRoomsChange_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_default_chat_id(&has_bits);
          default_chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoomState chat_rooms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_ChatRoomGroupRoomsChange_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 default_chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_default_chat_id(), target);
  }

  // repeated .CChatRoomState chat_rooms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chat_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_chat_rooms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  return target;
}

size_t CChatRoom_ChatRoomGroupRoomsChange_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoomState chat_rooms = 3;
  total_size += 1UL * this->_internal_chat_rooms_size();
  for (const auto& msg : this->chat_rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 default_chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_default_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_ChatRoomGroupRoomsChange_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_ChatRoomGroupRoomsChange_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_ChatRoomGroupRoomsChange_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_ChatRoomGroupRoomsChange_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_ChatRoomGroupRoomsChange_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_ChatRoomGroupRoomsChange_Notification &>(from));
}


void CChatRoom_ChatRoomGroupRoomsChange_Notification::MergeFrom(const CChatRoom_ChatRoomGroupRoomsChange_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_rooms_.MergeFrom(from.chat_rooms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_chat_id_ = from.default_chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::CopyFrom(const CChatRoom_ChatRoomGroupRoomsChange_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_ChatRoomGroupRoomsChange_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_ChatRoomGroupRoomsChange_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_ChatRoomGroupRoomsChange_Notification::InternalSwap(CChatRoom_ChatRoomGroupRoomsChange_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chat_rooms_.InternalSwap(&other->chat_rooms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_ChatRoomGroupRoomsChange_Notification, default_chat_id_)
      + sizeof(CChatRoom_ChatRoomGroupRoomsChange_Notification::default_chat_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_ChatRoomGroupRoomsChange_Notification, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_ChatRoomGroupRoomsChange_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[135]);
}

// ===================================================================

class CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
}
CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification(const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_group_id_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_group_id_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
}

inline void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_group_id_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_group_id_));
}

CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::~CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::ArenaDtor(void* object) {
  CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* _this = reinterpret_cast< CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* >(object);
  (void)_this;
}
void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_group_id_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  return target;
}

size_t CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint64 chat_group_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification &>(from));
}


void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::MergeFrom(const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::CopyFrom(const CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::InternalSwap(CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, chat_group_id_)
      + sizeof(CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::chat_group_id_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[136]);
}

// ===================================================================

class ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatRoomClient_NotifyChatGroupUserStateChanged_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CUserChatRoomGroupState& user_chat_group_state(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* msg);
  static void set_has_user_chat_group_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CChatRoom_GetChatRoomGroupSummary_Response& group_summary(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* msg);
  static void set_has_group_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CUserChatRoomGroupState&
ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::_Internal::user_chat_group_state(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* msg) {
  return *msg->user_chat_group_state_;
}
const ::CChatRoom_GetChatRoomGroupSummary_Response&
ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::_Internal::group_summary(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* msg) {
  return *msg->group_summary_;
}
ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
}
ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_chat_group_state()) {
    user_chat_group_state_ = new ::CUserChatRoomGroupState(*from.user_chat_group_state_);
  } else {
    user_chat_group_state_ = nullptr;
  }
  if (from._internal_has_group_summary()) {
    group_summary_ = new ::CChatRoom_GetChatRoomGroupSummary_Response(*from.group_summary_);
  } else {
    group_summary_ = nullptr;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_action_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(user_action_));
  // @@protoc_insertion_point(copy_constructor:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
}

inline void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_chat_group_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_action_) -
    reinterpret_cast<char*>(&user_chat_group_state_)) + sizeof(user_action_));
}

ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::~ChatRoomClient_NotifyChatGroupUserStateChanged_Notification() {
  // @@protoc_insertion_point(destructor:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_chat_group_state_;
  if (this != internal_default_instance()) delete group_summary_;
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ArenaDtor(void* object) {
  ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* _this = reinterpret_cast< ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* >(object);
  (void)_this;
}
void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_chat_group_state_ != nullptr);
      user_chat_group_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_summary_ != nullptr);
      group_summary_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_action_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(user_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CUserChatRoomGroupState user_chat_group_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_chat_group_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomMemberStateChange user_action = 4 [default = k_EChatRoomMemberStateChange_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomMemberStateChange_IsValid(val))) {
            _internal_set_user_action(static_cast<::EChatRoomMemberStateChange>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional .CUserChatRoomGroupState user_chat_group_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_chat_group_state(this), target, stream);
  }

  // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group_summary(this), target, stream);
  }

  // optional .EChatRoomMemberStateChange user_action = 4 [default = k_EChatRoomMemberStateChange_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_user_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  return target;
}

size_t ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CUserChatRoomGroupState user_chat_group_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_chat_group_state_);
    }

    // optional .CChatRoom_GetChatRoomGroupSummary_Response group_summary = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_summary_);
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional .EChatRoomMemberStateChange user_action = 4 [default = k_EChatRoomMemberStateChange_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_user_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::GetClassData() const { return &_class_data_; }

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatRoomClient_NotifyChatGroupUserStateChanged_Notification *>(to)->MergeFrom(
      static_cast<const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification &>(from));
}


void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::MergeFrom(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_user_chat_group_state()->::CUserChatRoomGroupState::MergeFrom(from._internal_user_chat_group_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group_summary()->::CChatRoom_GetChatRoomGroupSummary_Response::MergeFrom(from._internal_group_summary());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_action_ = from.user_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::CopyFrom(const ChatRoomClient_NotifyChatGroupUserStateChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::IsInitialized() const {
  return true;
}

void ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::InternalSwap(ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, user_action_)
      + sizeof(ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::user_action_)
      - PROTOBUF_FIELD_OFFSET(ChatRoomClient_NotifyChatGroupUserStateChanged_Notification, user_chat_group_state_)>(
          reinterpret_cast<char*>(&user_chat_group_state_),
          reinterpret_cast<char*>(&other->user_chat_group_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[137]);
}

// ===================================================================

class ChatRoomClient_NotifyChatRoomDisconnect_Notification::_Internal {
 public:
};

ChatRoomClient_NotifyChatRoomDisconnect_Notification::ChatRoomClient_NotifyChatRoomDisconnect_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chat_group_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
}
ChatRoomClient_NotifyChatRoomDisconnect_Notification::ChatRoomClient_NotifyChatRoomDisconnect_Notification(const ChatRoomClient_NotifyChatRoomDisconnect_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chat_group_ids_(from.chat_group_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
}

inline void ChatRoomClient_NotifyChatRoomDisconnect_Notification::SharedCtor() {
}

ChatRoomClient_NotifyChatRoomDisconnect_Notification::~ChatRoomClient_NotifyChatRoomDisconnect_Notification() {
  // @@protoc_insertion_point(destructor:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatRoomClient_NotifyChatRoomDisconnect_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatRoomClient_NotifyChatRoomDisconnect_Notification::ArenaDtor(void* object) {
  ChatRoomClient_NotifyChatRoomDisconnect_Notification* _this = reinterpret_cast< ChatRoomClient_NotifyChatRoomDisconnect_Notification* >(object);
  (void)_this;
}
void ChatRoomClient_NotifyChatRoomDisconnect_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatRoomClient_NotifyChatRoomDisconnect_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatRoomClient_NotifyChatRoomDisconnect_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatRoomClient_NotifyChatRoomDisconnect_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 chat_group_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_chat_group_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_chat_group_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRoomClient_NotifyChatRoomDisconnect_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 chat_group_ids = 1;
  for (int i = 0, n = this->_internal_chat_group_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
  return target;
}

size_t ChatRoomClient_NotifyChatRoomDisconnect_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 chat_group_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->chat_group_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chat_group_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatRoomClient_NotifyChatRoomDisconnect_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatRoomClient_NotifyChatRoomDisconnect_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatRoomClient_NotifyChatRoomDisconnect_Notification::GetClassData() const { return &_class_data_; }

void ChatRoomClient_NotifyChatRoomDisconnect_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatRoomClient_NotifyChatRoomDisconnect_Notification *>(to)->MergeFrom(
      static_cast<const ChatRoomClient_NotifyChatRoomDisconnect_Notification &>(from));
}


void ChatRoomClient_NotifyChatRoomDisconnect_Notification::MergeFrom(const ChatRoomClient_NotifyChatRoomDisconnect_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chat_group_ids_.MergeFrom(from.chat_group_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatRoomClient_NotifyChatRoomDisconnect_Notification::CopyFrom(const ChatRoomClient_NotifyChatRoomDisconnect_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRoomClient_NotifyChatRoomDisconnect_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomClient_NotifyChatRoomDisconnect_Notification::IsInitialized() const {
  return true;
}

void ChatRoomClient_NotifyChatRoomDisconnect_Notification::InternalSwap(ChatRoomClient_NotifyChatRoomDisconnect_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chat_group_ids_.InternalSwap(&other->chat_group_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatRoomClient_NotifyChatRoomDisconnect_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[138]);
}

// ===================================================================

class CChatRoomMemberListView::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomMemberListView>()._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_changenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_changenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CChatRoomMemberListView::CChatRoomMemberListView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomMemberListView)
}
CChatRoomMemberListView::CChatRoomMemberListView(const CChatRoomMemberListView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_changenumber_) -
    reinterpret_cast<char*>(&start_)) + sizeof(server_changenumber_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomMemberListView)
}

inline void CChatRoomMemberListView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_changenumber_) -
    reinterpret_cast<char*>(&start_)) + sizeof(server_changenumber_));
}

CChatRoomMemberListView::~CChatRoomMemberListView() {
  // @@protoc_insertion_point(destructor:CChatRoomMemberListView)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomMemberListView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoomMemberListView::ArenaDtor(void* object) {
  CChatRoomMemberListView* _this = reinterpret_cast< CChatRoomMemberListView* >(object);
  (void)_this;
}
void CChatRoomMemberListView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomMemberListView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomMemberListView::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomMemberListView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_changenumber_) -
        reinterpret_cast<char*>(&start_)) + sizeof(server_changenumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomMemberListView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_total_count(&has_bits);
          total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_changenumber = 6 [(.description) = "Value sent by the client on the last UpdateMemberListView call. "];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_client_changenumber(&has_bits);
          client_changenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 server_changenumber = 7 [(.description) = "Value incremented by the server on each MemberListViewUpdated call. "];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_server_changenumber(&has_bits);
          server_changenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomMemberListView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomMemberListView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_start(), target);
  }

  // optional int32 end = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end(), target);
  }

  // optional int32 total_count = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_count(), target);
  }

  // optional int32 client_changenumber = 6 [(.description) = "Value sent by the client on the last UpdateMemberListView call. "];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_client_changenumber(), target);
  }

  // optional int32 server_changenumber = 7 [(.description) = "Value incremented by the server on each MemberListViewUpdated call. "];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_server_changenumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomMemberListView)
  return target;
}

size_t CChatRoomMemberListView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomMemberListView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 start = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_start());
    }

    // optional int32 end = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_end());
    }

    // optional int32 total_count = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
    }

    // optional int32 client_changenumber = 6 [(.description) = "Value sent by the client on the last UpdateMemberListView call. "];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_changenumber());
    }

    // optional int32 server_changenumber = 7 [(.description) = "Value incremented by the server on each MemberListViewUpdated call. "];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_server_changenumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomMemberListView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomMemberListView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomMemberListView::GetClassData() const { return &_class_data_; }

void CChatRoomMemberListView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomMemberListView *>(to)->MergeFrom(
      static_cast<const CChatRoomMemberListView &>(from));
}


void CChatRoomMemberListView::MergeFrom(const CChatRoomMemberListView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomMemberListView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_count_ = from.total_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_changenumber_ = from.client_changenumber_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_changenumber_ = from.server_changenumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomMemberListView::CopyFrom(const CChatRoomMemberListView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomMemberListView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomMemberListView::IsInitialized() const {
  return true;
}

void CChatRoomMemberListView::InternalSwap(CChatRoomMemberListView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomMemberListView, server_changenumber_)
      + sizeof(CChatRoomMemberListView::server_changenumber_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomMemberListView, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomMemberListView::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[139]);
}

// ===================================================================

class CChatRoomMemberSummaryCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomMemberSummaryCounts>()._has_bits_);
  static void set_has_ingame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CChatRoomMemberSummaryCounts::CChatRoomMemberSummaryCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomMemberSummaryCounts)
}
CChatRoomMemberSummaryCounts::CChatRoomMemberSummaryCounts(const CChatRoomMemberSummaryCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ingame_, &from.ingame_,
    static_cast<size_t>(reinterpret_cast<char*>(&offline_) -
    reinterpret_cast<char*>(&ingame_)) + sizeof(offline_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomMemberSummaryCounts)
}

inline void CChatRoomMemberSummaryCounts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ingame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offline_) -
    reinterpret_cast<char*>(&ingame_)) + sizeof(offline_));
}

CChatRoomMemberSummaryCounts::~CChatRoomMemberSummaryCounts() {
  // @@protoc_insertion_point(destructor:CChatRoomMemberSummaryCounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomMemberSummaryCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatRoomMemberSummaryCounts::ArenaDtor(void* object) {
  CChatRoomMemberSummaryCounts* _this = reinterpret_cast< CChatRoomMemberSummaryCounts* >(object);
  (void)_this;
}
void CChatRoomMemberSummaryCounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomMemberSummaryCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomMemberSummaryCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomMemberSummaryCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ingame_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offline_) -
        reinterpret_cast<char*>(&ingame_)) + sizeof(offline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomMemberSummaryCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ingame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ingame(&has_bits);
          ingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 offline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offline(&has_bits);
          offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomMemberSummaryCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomMemberSummaryCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ingame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ingame(), target);
  }

  // optional int32 online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_online(), target);
  }

  // optional int32 offline = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomMemberSummaryCounts)
  return target;
}

size_t CChatRoomMemberSummaryCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomMemberSummaryCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ingame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ingame());
    }

    // optional int32 online = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_online());
    }

    // optional int32 offline = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_offline());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomMemberSummaryCounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomMemberSummaryCounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomMemberSummaryCounts::GetClassData() const { return &_class_data_; }

void CChatRoomMemberSummaryCounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomMemberSummaryCounts *>(to)->MergeFrom(
      static_cast<const CChatRoomMemberSummaryCounts &>(from));
}


void CChatRoomMemberSummaryCounts::MergeFrom(const CChatRoomMemberSummaryCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomMemberSummaryCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ingame_ = from.ingame_;
    }
    if (cached_has_bits & 0x00000002u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000004u) {
      offline_ = from.offline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomMemberSummaryCounts::CopyFrom(const CChatRoomMemberSummaryCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomMemberSummaryCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomMemberSummaryCounts::IsInitialized() const {
  return true;
}

void CChatRoomMemberSummaryCounts::InternalSwap(CChatRoomMemberSummaryCounts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomMemberSummaryCounts, offline_)
      + sizeof(CChatRoomMemberSummaryCounts::offline_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomMemberSummaryCounts, ingame_)>(
          reinterpret_cast<char*>(&ingame_),
          reinterpret_cast<char*>(&other->ingame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomMemberSummaryCounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[140]);
}

// ===================================================================

class CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry>()._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgClientPersonaState_Friend& persona(const CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry* msg);
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientPersonaState_Friend&
CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::_Internal::persona(const CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry* msg) {
  return *msg->persona_;
}
void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::clear_persona() {
  if (persona_ != nullptr) persona_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
}
CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry(const CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_persona()) {
    persona_ = new ::CMsgClientPersonaState_Friend(*from.persona_);
  } else {
    persona_ = nullptr;
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
}

inline void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&persona_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&persona_)) + sizeof(accountid_));
}

CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::~CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry() {
  // @@protoc_insertion_point(destructor:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete persona_;
}

void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::ArenaDtor(void* object) {
  CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry* _this = reinterpret_cast< CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry* >(object);
  (void)_this;
}
void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(persona_ != nullptr);
    persona_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientPersonaState.Friend persona = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_persona(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rank = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  // optional .CMsgClientPersonaState.Friend persona = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::persona(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
  return target;
}

size_t CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgClientPersonaState.Friend persona = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *persona_);
    }

    // optional int32 rank = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::GetClassData() const { return &_class_data_; }

void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry *>(to)->MergeFrom(
      static_cast<const CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry &>(from));
}


void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::MergeFrom(const CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_persona()->::CMsgClientPersonaState_Friend::MergeFrom(from._internal_persona());
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::CopyFrom(const CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::IsInitialized() const {
  return true;
}

void CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::InternalSwap(CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry, accountid_)
      + sizeof(CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::accountid_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry, persona_)>(
          reinterpret_cast<char*>(&persona_),
          reinterpret_cast<char*>(&other->persona_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[141]);
}

// ===================================================================

class CChatRoomClient_MemberListViewUpdated_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoomClient_MemberListViewUpdated_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_view_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CChatRoomMemberListView& view(const CChatRoomClient_MemberListViewUpdated_Notification* msg);
  static void set_has_view(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CChatRoomMemberSummaryCounts& member_summary(const CChatRoomClient_MemberListViewUpdated_Notification* msg);
  static void set_has_member_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CChatRoomMemberListView&
CChatRoomClient_MemberListViewUpdated_Notification::_Internal::view(const CChatRoomClient_MemberListViewUpdated_Notification* msg) {
  return *msg->view_;
}
const ::CChatRoomMemberSummaryCounts&
CChatRoomClient_MemberListViewUpdated_Notification::_Internal::member_summary(const CChatRoomClient_MemberListViewUpdated_Notification* msg) {
  return *msg->member_summary_;
}
void CChatRoomClient_MemberListViewUpdated_Notification::clear_subscribed_personas() {
  subscribed_personas_.Clear();
}
CChatRoomClient_MemberListViewUpdated_Notification::CChatRoomClient_MemberListViewUpdated_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  subscribed_personas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoomClient_MemberListViewUpdated_Notification)
}
CChatRoomClient_MemberListViewUpdated_Notification::CChatRoomClient_MemberListViewUpdated_Notification(const CChatRoomClient_MemberListViewUpdated_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      subscribed_personas_(from.subscribed_personas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_view()) {
    view_ = new ::CChatRoomMemberListView(*from.view_);
  } else {
    view_ = nullptr;
  }
  if (from._internal_has_member_summary()) {
    member_summary_ = new ::CChatRoomMemberSummaryCounts(*from.member_summary_);
  } else {
    member_summary_ = nullptr;
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_flags_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(status_flags_));
  // @@protoc_insertion_point(copy_constructor:CChatRoomClient_MemberListViewUpdated_Notification)
}

inline void CChatRoomClient_MemberListViewUpdated_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&view_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_flags_) -
    reinterpret_cast<char*>(&view_)) + sizeof(status_flags_));
}

CChatRoomClient_MemberListViewUpdated_Notification::~CChatRoomClient_MemberListViewUpdated_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoomClient_MemberListViewUpdated_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoomClient_MemberListViewUpdated_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete view_;
  if (this != internal_default_instance()) delete member_summary_;
}

void CChatRoomClient_MemberListViewUpdated_Notification::ArenaDtor(void* object) {
  CChatRoomClient_MemberListViewUpdated_Notification* _this = reinterpret_cast< CChatRoomClient_MemberListViewUpdated_Notification* >(object);
  (void)_this;
}
void CChatRoomClient_MemberListViewUpdated_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoomClient_MemberListViewUpdated_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoomClient_MemberListViewUpdated_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoomClient_MemberListViewUpdated_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  subscribed_personas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(view_ != nullptr);
      view_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_summary_ != nullptr);
      member_summary_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_flags_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(status_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoomClient_MemberListViewUpdated_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 view_id = 2 [(.description) = "Thew view_id supplied when the client created the view. "];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_view_id(&has_bits);
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoomMemberListView view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_status_flags(&has_bits);
          status_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatRoomMemberSummaryCounts member_summary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPersonaState.Friend subscribed_personas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribed_personas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoomClient_MemberListViewUpdated_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoomClient_MemberListViewUpdated_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 view_id = 2 [(.description) = "Thew view_id supplied when the client created the view. "];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_view_id(), target);
  }

  // optional .CChatRoomMemberListView view = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::view(this), target, stream);
  }

  // repeated .CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_members(i), target, stream);
  }

  // optional uint32 status_flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status_flags(), target);
  }

  // optional .CChatRoomMemberSummaryCounts member_summary = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::member_summary(this), target, stream);
  }

  // repeated .CMsgClientPersonaState.Friend subscribed_personas = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscribed_personas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_subscribed_personas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoomClient_MemberListViewUpdated_Notification)
  return target;
}

size_t CChatRoomClient_MemberListViewUpdated_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoomClient_MemberListViewUpdated_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientPersonaState.Friend subscribed_personas = 7;
  total_size += 1UL * this->_internal_subscribed_personas_size();
  for (const auto& msg : this->subscribed_personas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CChatRoomMemberListView view = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_);
    }

    // optional .CChatRoomMemberSummaryCounts member_summary = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *member_summary_);
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 view_id = 2 [(.description) = "Thew view_id supplied when the client created the view. "];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_view_id());
    }

    // optional uint32 status_flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoomClient_MemberListViewUpdated_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoomClient_MemberListViewUpdated_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoomClient_MemberListViewUpdated_Notification::GetClassData() const { return &_class_data_; }

void CChatRoomClient_MemberListViewUpdated_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoomClient_MemberListViewUpdated_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoomClient_MemberListViewUpdated_Notification &>(from));
}


void CChatRoomClient_MemberListViewUpdated_Notification::MergeFrom(const CChatRoomClient_MemberListViewUpdated_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoomClient_MemberListViewUpdated_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  subscribed_personas_.MergeFrom(from.subscribed_personas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_view()->::CChatRoomMemberListView::MergeFrom(from._internal_view());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_member_summary()->::CChatRoomMemberSummaryCounts::MergeFrom(from._internal_member_summary());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      view_id_ = from.view_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_flags_ = from.status_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoomClient_MemberListViewUpdated_Notification::CopyFrom(const CChatRoomClient_MemberListViewUpdated_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoomClient_MemberListViewUpdated_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoomClient_MemberListViewUpdated_Notification::IsInitialized() const {
  return true;
}

void CChatRoomClient_MemberListViewUpdated_Notification::InternalSwap(CChatRoomClient_MemberListViewUpdated_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  subscribed_personas_.InternalSwap(&other->subscribed_personas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoomClient_MemberListViewUpdated_Notification, status_flags_)
      + sizeof(CChatRoomClient_MemberListViewUpdated_Notification::status_flags_)
      - PROTOBUF_FIELD_OFFSET(CChatRoomClient_MemberListViewUpdated_Notification, view_)>(
          reinterpret_cast<char*>(&view_),
          reinterpret_cast<char*>(&other->view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoomClient_MemberListViewUpdated_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[142]);
}

// ===================================================================

class CChatRoom_MessageReaction_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatRoom_MessageReaction_Notification>()._has_bits_);
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reactor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_add(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CChatRoom_MessageReaction_Notification::CChatRoom_MessageReaction_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatRoom_MessageReaction_Notification)
}
CChatRoom_MessageReaction_Notification::CChatRoom_MessageReaction_Notification(const CChatRoom_MessageReaction_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reaction()) {
    reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reaction(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(is_add_));
  // @@protoc_insertion_point(copy_constructor:CChatRoom_MessageReaction_Notification)
}

inline void CChatRoom_MessageReaction_Notification::SharedCtor() {
reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(is_add_));
}

CChatRoom_MessageReaction_Notification::~CChatRoom_MessageReaction_Notification() {
  // @@protoc_insertion_point(destructor:CChatRoom_MessageReaction_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatRoom_MessageReaction_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChatRoom_MessageReaction_Notification::ArenaDtor(void* object) {
  CChatRoom_MessageReaction_Notification* _this = reinterpret_cast< CChatRoom_MessageReaction_Notification* >(object);
  (void)_this;
}
void CChatRoom_MessageReaction_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatRoom_MessageReaction_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatRoom_MessageReaction_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRoom_MessageReaction_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reaction_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_add_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(is_add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatRoom_MessageReaction_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 reactor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_reactor(&has_bits);
          reactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .EChatRoomMessageReactionType reaction_type = 6 [default = k_EChatRoomMessageReactionType_Invalid];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatRoomMessageReactionType_IsValid(val))) {
            _internal_set_reaction_type(static_cast<::EChatRoomMessageReactionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reaction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_reaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChatRoom_MessageReaction_Notification.reaction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_add = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_add(&has_bits);
          is_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatRoom_MessageReaction_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatRoom_MessageReaction_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 chat_group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chat_group_id(), target);
  }

  // optional uint64 chat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional uint32 server_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ordinal(), target);
  }

  // optional fixed64 reactor = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_reactor(), target);
  }

  // optional .EChatRoomMessageReactionType reaction_type = 6 [default = k_EChatRoomMessageReactionType_Invalid];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reaction_type(), target);
  }

  // optional string reaction = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction().data(), static_cast<int>(this->_internal_reaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChatRoom_MessageReaction_Notification.reaction");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_reaction(), target);
  }

  // optional bool is_add = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatRoom_MessageReaction_Notification)
  return target;
}

size_t CChatRoom_MessageReaction_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRoom_MessageReaction_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string reaction = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction());
    }

    // optional uint64 chat_group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint64 chat_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_id());
    }

    // optional uint32 server_timestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional fixed64 reactor = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .EChatRoomMessageReactionType reaction_type = 6 [default = k_EChatRoomMessageReactionType_Invalid];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction_type());
    }

    // optional bool is_add = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatRoom_MessageReaction_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatRoom_MessageReaction_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatRoom_MessageReaction_Notification::GetClassData() const { return &_class_data_; }

void CChatRoom_MessageReaction_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatRoom_MessageReaction_Notification *>(to)->MergeFrom(
      static_cast<const CChatRoom_MessageReaction_Notification &>(from));
}


void CChatRoom_MessageReaction_Notification::MergeFrom(const CChatRoom_MessageReaction_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRoom_MessageReaction_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reaction(from._internal_reaction());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000020u) {
      reactor_ = from.reactor_;
    }
    if (cached_has_bits & 0x00000040u) {
      reaction_type_ = from.reaction_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_add_ = from.is_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatRoom_MessageReaction_Notification::CopyFrom(const CChatRoom_MessageReaction_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRoom_MessageReaction_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatRoom_MessageReaction_Notification::IsInitialized() const {
  return true;
}

void CChatRoom_MessageReaction_Notification::InternalSwap(CChatRoom_MessageReaction_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reaction_, lhs_arena,
      &other->reaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatRoom_MessageReaction_Notification, is_add_)
      + sizeof(CChatRoom_MessageReaction_Notification::is_add_)
      - PROTOBUF_FIELD_OFFSET(CChatRoom_MessageReaction_Notification, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatRoom_MessageReaction_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[143]);
}

// ===================================================================

class CChatUsability_ClientUsabilityMetrics_Notification_Settings::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatUsability_ClientUsabilityMetrics_Notification_Settings>()._has_bits_);
  static void set_has_notifications_show_ingame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notifications_show_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notifications_show_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notifications_events_and_announcements(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sounds_play_ingame(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sounds_play_online(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sounds_play_message(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sounds_events_and_announcements(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_always_new_chat_window(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_force_alphabetic_friend_sorting(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_chat_flash_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_remember_open_chats(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_compact_quick_access(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_compact_friends_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_notifications_show_chat_room_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sounds_play_chat_room_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hide_offline_friends_in_tag_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_hide_categorized_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_categorize_in_game_friends_by_game(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_chat_font_size(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_use24hour_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_do_not_disturb_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_disable_embed_inlining(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_sign_into_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_animated_avatars(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

CChatUsability_ClientUsabilityMetrics_Notification_Settings::CChatUsability_ClientUsabilityMetrics_Notification_Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
}
CChatUsability_ClientUsabilityMetrics_Notification_Settings::CChatUsability_ClientUsabilityMetrics_Notification_Settings(const CChatUsability_ClientUsabilityMetrics_Notification_Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&notifications_show_ingame_, &from.notifications_show_ingame_,
    static_cast<size_t>(reinterpret_cast<char*>(&animated_avatars_) -
    reinterpret_cast<char*>(&notifications_show_ingame_)) + sizeof(animated_avatars_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_Settings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notifications_show_ingame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&animated_avatars_) -
    reinterpret_cast<char*>(&notifications_show_ingame_)) + sizeof(animated_avatars_));
}

CChatUsability_ClientUsabilityMetrics_Notification_Settings::~CChatUsability_ClientUsabilityMetrics_Notification_Settings() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::ArenaDtor(void* object) {
  CChatUsability_ClientUsabilityMetrics_Notification_Settings* _this = reinterpret_cast< CChatUsability_ClientUsabilityMetrics_Notification_Settings* >(object);
  (void)_this;
}
void CChatUsability_ClientUsabilityMetrics_Notification_Settings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatUsability_ClientUsabilityMetrics_Notification_Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&notifications_show_ingame_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sounds_events_and_announcements_) -
        reinterpret_cast<char*>(&notifications_show_ingame_)) + sizeof(sounds_events_and_announcements_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&chat_flash_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sounds_play_chat_room_notification_) -
        reinterpret_cast<char*>(&chat_flash_mode_)) + sizeof(sounds_play_chat_room_notification_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&hide_offline_friends_in_tag_groups_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sign_into_friends_) -
        reinterpret_cast<char*>(&hide_offline_friends_in_tag_groups_)) + sizeof(sign_into_friends_));
  }
  animated_avatars_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatUsability_ClientUsabilityMetrics_Notification_Settings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool notifications_show_ingame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_notifications_show_ingame(&has_bits);
          notifications_show_ingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notifications_show_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_notifications_show_online(&has_bits);
          notifications_show_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notifications_show_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_notifications_show_message(&has_bits);
          notifications_show_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notifications_events_and_announcements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_notifications_events_and_announcements(&has_bits);
          notifications_events_and_announcements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sounds_play_ingame = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sounds_play_ingame(&has_bits);
          sounds_play_ingame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sounds_play_online = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sounds_play_online(&has_bits);
          sounds_play_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sounds_play_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sounds_play_message(&has_bits);
          sounds_play_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sounds_events_and_announcements = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sounds_events_and_announcements(&has_bits);
          sounds_events_and_announcements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool always_new_chat_window = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_always_new_chat_window(&has_bits);
          always_new_chat_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_alphabetic_friend_sorting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_force_alphabetic_friend_sorting(&has_bits);
          force_alphabetic_friend_sorting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_flash_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_chat_flash_mode(&has_bits);
          chat_flash_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool remember_open_chats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_remember_open_chats(&has_bits);
          remember_open_chats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool compact_quick_access = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_compact_quick_access(&has_bits);
          compact_quick_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool compact_friends_list = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_compact_friends_list(&has_bits);
          compact_friends_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notifications_show_chat_room_notification = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_notifications_show_chat_room_notification(&has_bits);
          notifications_show_chat_room_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sounds_play_chat_room_notification = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_sounds_play_chat_room_notification(&has_bits);
          sounds_play_chat_room_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_offline_friends_in_tag_groups = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_hide_offline_friends_in_tag_groups(&has_bits);
          hide_offline_friends_in_tag_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_categorized_friends = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_hide_categorized_friends(&has_bits);
          hide_categorized_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool categorize_in_game_friends_by_game = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_categorize_in_game_friends_by_game(&has_bits);
          categorize_in_game_friends_by_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_font_size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_chat_font_size(&has_bits);
          chat_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use24hour_clock = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_use24hour_clock(&has_bits);
          use24hour_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool do_not_disturb_mode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_do_not_disturb_mode(&has_bits);
          do_not_disturb_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_embed_inlining = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_disable_embed_inlining(&has_bits);
          disable_embed_inlining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool sign_into_friends = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_sign_into_friends(&has_bits);
          sign_into_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool animated_avatars = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_animated_avatars(&has_bits);
          animated_avatars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatUsability_ClientUsabilityMetrics_Notification_Settings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool notifications_show_ingame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_notifications_show_ingame(), target);
  }

  // optional bool notifications_show_online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_notifications_show_online(), target);
  }

  // optional bool notifications_show_message = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_notifications_show_message(), target);
  }

  // optional bool notifications_events_and_announcements = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_notifications_events_and_announcements(), target);
  }

  // optional bool sounds_play_ingame = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sounds_play_ingame(), target);
  }

  // optional bool sounds_play_online = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_sounds_play_online(), target);
  }

  // optional bool sounds_play_message = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sounds_play_message(), target);
  }

  // optional bool sounds_events_and_announcements = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_sounds_events_and_announcements(), target);
  }

  // optional bool always_new_chat_window = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_always_new_chat_window(), target);
  }

  // optional bool force_alphabetic_friend_sorting = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_force_alphabetic_friend_sorting(), target);
  }

  // optional int32 chat_flash_mode = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_chat_flash_mode(), target);
  }

  // optional bool remember_open_chats = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_remember_open_chats(), target);
  }

  // optional bool compact_quick_access = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_compact_quick_access(), target);
  }

  // optional bool compact_friends_list = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_compact_friends_list(), target);
  }

  // optional bool notifications_show_chat_room_notification = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_notifications_show_chat_room_notification(), target);
  }

  // optional bool sounds_play_chat_room_notification = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_sounds_play_chat_room_notification(), target);
  }

  // optional bool hide_offline_friends_in_tag_groups = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_hide_offline_friends_in_tag_groups(), target);
  }

  // optional bool hide_categorized_friends = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_hide_categorized_friends(), target);
  }

  // optional bool categorize_in_game_friends_by_game = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_categorize_in_game_friends_by_game(), target);
  }

  // optional int32 chat_font_size = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_chat_font_size(), target);
  }

  // optional bool use24hour_clock = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_use24hour_clock(), target);
  }

  // optional bool do_not_disturb_mode = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_do_not_disturb_mode(), target);
  }

  // optional bool disable_embed_inlining = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_disable_embed_inlining(), target);
  }

  // optional bool sign_into_friends = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_sign_into_friends(), target);
  }

  // optional bool animated_avatars = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_animated_avatars(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool notifications_show_ingame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool notifications_show_online = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool notifications_show_message = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool notifications_events_and_announcements = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_ingame = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_online = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_message = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool sounds_events_and_announcements = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 chat_flash_mode = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_flash_mode());
    }

    // optional bool always_new_chat_window = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool force_alphabetic_friend_sorting = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool remember_open_chats = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool compact_quick_access = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool compact_friends_list = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool notifications_show_chat_room_notification = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool sounds_play_chat_room_notification = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool hide_offline_friends_in_tag_groups = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 chat_font_size = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chat_font_size());
    }

    // optional bool hide_categorized_friends = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool categorize_in_game_friends_by_game = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool use24hour_clock = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool do_not_disturb_mode = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool disable_embed_inlining = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool sign_into_friends = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool animated_avatars = 25;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatUsability_ClientUsabilityMetrics_Notification_Settings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatUsability_ClientUsabilityMetrics_Notification_Settings::GetClassData() const { return &_class_data_; }

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatUsability_ClientUsabilityMetrics_Notification_Settings *>(to)->MergeFrom(
      static_cast<const CChatUsability_ClientUsabilityMetrics_Notification_Settings &>(from));
}


void CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      notifications_show_ingame_ = from.notifications_show_ingame_;
    }
    if (cached_has_bits & 0x00000002u) {
      notifications_show_online_ = from.notifications_show_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifications_show_message_ = from.notifications_show_message_;
    }
    if (cached_has_bits & 0x00000008u) {
      notifications_events_and_announcements_ = from.notifications_events_and_announcements_;
    }
    if (cached_has_bits & 0x00000010u) {
      sounds_play_ingame_ = from.sounds_play_ingame_;
    }
    if (cached_has_bits & 0x00000020u) {
      sounds_play_online_ = from.sounds_play_online_;
    }
    if (cached_has_bits & 0x00000040u) {
      sounds_play_message_ = from.sounds_play_message_;
    }
    if (cached_has_bits & 0x00000080u) {
      sounds_events_and_announcements_ = from.sounds_events_and_announcements_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      chat_flash_mode_ = from.chat_flash_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      always_new_chat_window_ = from.always_new_chat_window_;
    }
    if (cached_has_bits & 0x00000400u) {
      force_alphabetic_friend_sorting_ = from.force_alphabetic_friend_sorting_;
    }
    if (cached_has_bits & 0x00000800u) {
      remember_open_chats_ = from.remember_open_chats_;
    }
    if (cached_has_bits & 0x00001000u) {
      compact_quick_access_ = from.compact_quick_access_;
    }
    if (cached_has_bits & 0x00002000u) {
      compact_friends_list_ = from.compact_friends_list_;
    }
    if (cached_has_bits & 0x00004000u) {
      notifications_show_chat_room_notification_ = from.notifications_show_chat_room_notification_;
    }
    if (cached_has_bits & 0x00008000u) {
      sounds_play_chat_room_notification_ = from.sounds_play_chat_room_notification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      hide_offline_friends_in_tag_groups_ = from.hide_offline_friends_in_tag_groups_;
    }
    if (cached_has_bits & 0x00020000u) {
      chat_font_size_ = from.chat_font_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      hide_categorized_friends_ = from.hide_categorized_friends_;
    }
    if (cached_has_bits & 0x00080000u) {
      categorize_in_game_friends_by_game_ = from.categorize_in_game_friends_by_game_;
    }
    if (cached_has_bits & 0x00100000u) {
      use24hour_clock_ = from.use24hour_clock_;
    }
    if (cached_has_bits & 0x00200000u) {
      do_not_disturb_mode_ = from.do_not_disturb_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      disable_embed_inlining_ = from.disable_embed_inlining_;
    }
    if (cached_has_bits & 0x00800000u) {
      sign_into_friends_ = from.sign_into_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_animated_avatars(from._internal_animated_avatars());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_Settings::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_Settings::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_Settings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_Settings, animated_avatars_)
      + sizeof(CChatUsability_ClientUsabilityMetrics_Notification_Settings::animated_avatars_)
      - PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_Settings, notifications_show_ingame_)>(
          reinterpret_cast<char*>(&notifications_show_ingame_),
          reinterpret_cast<char*>(&other->notifications_show_ingame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatUsability_ClientUsabilityMetrics_Notification_Settings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[144]);
}

// ===================================================================

class CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings>()._has_bits_);
  static void set_has_voice_input_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voice_output_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_noise_gate_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_voice_use_echo_cancellation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_voice_use_noise_cancellation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_voice_use_auto_gain_control(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_selected_non_default_mic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selected_non_default_output(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_push_to_talk_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_push_to_mute_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_play_ptt_sounds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
}
CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings(const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&voice_input_gain_, &from.voice_input_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_ptt_sounds_) -
    reinterpret_cast<char*>(&voice_input_gain_)) + sizeof(play_ptt_sounds_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&voice_input_gain_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&play_ptt_sounds_) -
    reinterpret_cast<char*>(&voice_input_gain_)) + sizeof(play_ptt_sounds_));
}

CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::~CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::ArenaDtor(void* object) {
  CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* _this = reinterpret_cast< CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* >(object);
  (void)_this;
}
void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&voice_input_gain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_non_default_output_) -
        reinterpret_cast<char*>(&voice_input_gain_)) + sizeof(selected_non_default_output_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&push_to_talk_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&play_ptt_sounds_) -
        reinterpret_cast<char*>(&push_to_talk_enabled_)) + sizeof(play_ptt_sounds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float voice_input_gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_voice_input_gain(&has_bits);
          voice_input_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float voice_output_gain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_voice_output_gain(&has_bits);
          voice_output_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 noise_gate_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_noise_gate_level(&has_bits);
          noise_gate_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool voice_use_echo_cancellation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_voice_use_echo_cancellation(&has_bits);
          voice_use_echo_cancellation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool voice_use_noise_cancellation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_voice_use_noise_cancellation(&has_bits);
          voice_use_noise_cancellation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool voice_use_auto_gain_control = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_voice_use_auto_gain_control(&has_bits);
          voice_use_auto_gain_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool selected_non_default_mic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_selected_non_default_mic(&has_bits);
          selected_non_default_mic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool selected_non_default_output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_selected_non_default_output(&has_bits);
          selected_non_default_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool push_to_talk_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_push_to_talk_enabled(&has_bits);
          push_to_talk_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool push_to_mute_enabled = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_push_to_mute_enabled(&has_bits);
          push_to_mute_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool play_ptt_sounds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_play_ptt_sounds(&has_bits);
          play_ptt_sounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float voice_input_gain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_voice_input_gain(), target);
  }

  // optional float voice_output_gain = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_voice_output_gain(), target);
  }

  // optional int32 noise_gate_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_noise_gate_level(), target);
  }

  // optional bool voice_use_echo_cancellation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_voice_use_echo_cancellation(), target);
  }

  // optional bool voice_use_noise_cancellation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_voice_use_noise_cancellation(), target);
  }

  // optional bool voice_use_auto_gain_control = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_voice_use_auto_gain_control(), target);
  }

  // optional bool selected_non_default_mic = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_selected_non_default_mic(), target);
  }

  // optional bool selected_non_default_output = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_selected_non_default_output(), target);
  }

  // optional bool push_to_talk_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_push_to_talk_enabled(), target);
  }

  // optional bool push_to_mute_enabled = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_push_to_mute_enabled(), target);
  }

  // optional bool play_ptt_sounds = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_play_ptt_sounds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float voice_input_gain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float voice_output_gain = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 noise_gate_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_noise_gate_level());
    }

    // optional bool voice_use_echo_cancellation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool voice_use_noise_cancellation = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool voice_use_auto_gain_control = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool selected_non_default_mic = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool selected_non_default_output = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool push_to_talk_enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool push_to_mute_enabled = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool play_ptt_sounds = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::GetClassData() const { return &_class_data_; }

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings *>(to)->MergeFrom(
      static_cast<const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings &>(from));
}


void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      voice_input_gain_ = from.voice_input_gain_;
    }
    if (cached_has_bits & 0x00000002u) {
      voice_output_gain_ = from.voice_output_gain_;
    }
    if (cached_has_bits & 0x00000004u) {
      noise_gate_level_ = from.noise_gate_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      voice_use_echo_cancellation_ = from.voice_use_echo_cancellation_;
    }
    if (cached_has_bits & 0x00000010u) {
      voice_use_noise_cancellation_ = from.voice_use_noise_cancellation_;
    }
    if (cached_has_bits & 0x00000020u) {
      voice_use_auto_gain_control_ = from.voice_use_auto_gain_control_;
    }
    if (cached_has_bits & 0x00000040u) {
      selected_non_default_mic_ = from.selected_non_default_mic_;
    }
    if (cached_has_bits & 0x00000080u) {
      selected_non_default_output_ = from.selected_non_default_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      push_to_talk_enabled_ = from.push_to_talk_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      push_to_mute_enabled_ = from.push_to_mute_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      play_ptt_sounds_ = from.play_ptt_sounds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, play_ptt_sounds_)
      + sizeof(CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::play_ptt_sounds_)
      - PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings, voice_input_gain_)>(
          reinterpret_cast<char*>(&voice_input_gain_),
          reinterpret_cast<char*>(&other->voice_input_gain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[145]);
}

// ===================================================================

class CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState>()._has_bits_);
  static void set_has_in_game_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offline_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_groups_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_categories_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
}
CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState(const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&in_game_collapsed_, &from.in_game_collapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&categories_collapsed_) -
    reinterpret_cast<char*>(&in_game_collapsed_)) + sizeof(categories_collapsed_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&in_game_collapsed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&categories_collapsed_) -
    reinterpret_cast<char*>(&in_game_collapsed_)) + sizeof(categories_collapsed_));
}

CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::~CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::ArenaDtor(void* object) {
  CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* _this = reinterpret_cast< CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* >(object);
  (void)_this;
}
void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&in_game_collapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&categories_collapsed_) -
        reinterpret_cast<char*>(&in_game_collapsed_)) + sizeof(categories_collapsed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool in_game_collapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_in_game_collapsed(&has_bits);
          in_game_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool online_collapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_online_collapsed(&has_bits);
          online_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool offline_collapsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offline_collapsed(&has_bits);
          offline_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 game_groups_collapsed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_groups_collapsed(&has_bits);
          game_groups_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 categories_collapsed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_categories_collapsed(&has_bits);
          categories_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool in_game_collapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_in_game_collapsed(), target);
  }

  // optional bool online_collapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_online_collapsed(), target);
  }

  // optional bool offline_collapsed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_offline_collapsed(), target);
  }

  // optional int32 game_groups_collapsed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_groups_collapsed(), target);
  }

  // optional int32 categories_collapsed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_categories_collapsed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool in_game_collapsed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool online_collapsed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool offline_collapsed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 game_groups_collapsed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_game_groups_collapsed());
    }

    // optional int32 categories_collapsed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_categories_collapsed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::GetClassData() const { return &_class_data_; }

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState *>(to)->MergeFrom(
      static_cast<const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState &>(from));
}


void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      in_game_collapsed_ = from.in_game_collapsed_;
    }
    if (cached_has_bits & 0x00000002u) {
      online_collapsed_ = from.online_collapsed_;
    }
    if (cached_has_bits & 0x00000004u) {
      offline_collapsed_ = from.offline_collapsed_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_groups_collapsed_ = from.game_groups_collapsed_;
    }
    if (cached_has_bits & 0x00000010u) {
      categories_collapsed_ = from.categories_collapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, categories_collapsed_)
      + sizeof(CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::categories_collapsed_)
      - PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState, in_game_collapsed_)>(
          reinterpret_cast<char*>(&in_game_collapsed_),
          reinterpret_cast<char*>(&other->in_game_collapsed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[146]);
}

// ===================================================================

class CChatUsability_ClientUsabilityMetrics_Notification_UIState::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatUsability_ClientUsabilityMetrics_Notification_UIState>()._has_bits_);
  static void set_has_friends_list_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_friends_list_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_friends_list_docked(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_friends_list_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_friends_list_group_chats_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_friends_list_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_chat_popups_opened(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_group_chat_tabs_opened(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_friend_chat_tabs_opened(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_chat_window_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chat_window_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState& category_collapse(const CChatUsability_ClientUsabilityMetrics_Notification_UIState* msg);
  static void set_has_category_collapse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_chat_left_col_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_group_chat_right_col_collapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_in_one_on_one_voice_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_in_group_voice_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState&
CChatUsability_ClientUsabilityMetrics_Notification_UIState::_Internal::category_collapse(const CChatUsability_ClientUsabilityMetrics_Notification_UIState* msg) {
  return *msg->category_collapse_;
}
CChatUsability_ClientUsabilityMetrics_Notification_UIState::CChatUsability_ClientUsabilityMetrics_Notification_UIState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
}
CChatUsability_ClientUsabilityMetrics_Notification_UIState::CChatUsability_ClientUsabilityMetrics_Notification_UIState(const CChatUsability_ClientUsabilityMetrics_Notification_UIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_category_collapse()) {
    category_collapse_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState(*from.category_collapse_);
  } else {
    category_collapse_ = nullptr;
  }
  ::memcpy(&friends_list_height_, &from.friends_list_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_group_voice_chat_) -
    reinterpret_cast<char*>(&friends_list_height_)) + sizeof(in_group_voice_chat_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_UIState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&category_collapse_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&in_group_voice_chat_) -
    reinterpret_cast<char*>(&category_collapse_)) + sizeof(in_group_voice_chat_));
}

CChatUsability_ClientUsabilityMetrics_Notification_UIState::~CChatUsability_ClientUsabilityMetrics_Notification_UIState() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_UIState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete category_collapse_;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::ArenaDtor(void* object) {
  CChatUsability_ClientUsabilityMetrics_Notification_UIState* _this = reinterpret_cast< CChatUsability_ClientUsabilityMetrics_Notification_UIState* >(object);
  (void)_this;
}
void CChatUsability_ClientUsabilityMetrics_Notification_UIState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatUsability_ClientUsabilityMetrics_Notification_UIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(category_collapse_ != nullptr);
    category_collapse_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&friends_list_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friends_list_visible_) -
        reinterpret_cast<char*>(&friends_list_height_)) + sizeof(friends_list_visible_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&in_one_on_one_voice_chat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_group_voice_chat_) -
        reinterpret_cast<char*>(&in_one_on_one_voice_chat_)) + sizeof(in_group_voice_chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatUsability_ClientUsabilityMetrics_Notification_UIState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 friends_list_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friends_list_height(&has_bits);
          friends_list_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_list_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_friends_list_width(&has_bits);
          friends_list_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool friends_list_docked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_friends_list_docked(&has_bits);
          friends_list_docked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool friends_list_collapsed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_friends_list_collapsed(&has_bits);
          friends_list_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_list_group_chats_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_friends_list_group_chats_height(&has_bits);
          friends_list_group_chats_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool friends_list_visible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_friends_list_visible(&has_bits);
          friends_list_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_popups_opened = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_chat_popups_opened(&has_bits);
          chat_popups_opened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 group_chat_tabs_opened = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_group_chat_tabs_opened(&has_bits);
          group_chat_tabs_opened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friend_chat_tabs_opened = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_friend_chat_tabs_opened(&has_bits);
          friend_chat_tabs_opened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_window_width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_chat_window_width(&has_bits);
          chat_window_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_window_height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_chat_window_height(&has_bits);
          chat_window_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState category_collapse = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_collapse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 group_chat_left_col_collapsed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_group_chat_left_col_collapsed(&has_bits);
          group_chat_left_col_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 group_chat_right_col_collapsed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_group_chat_right_col_collapsed(&has_bits);
          group_chat_right_col_collapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_one_on_one_voice_chat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_in_one_on_one_voice_chat(&has_bits);
          in_one_on_one_voice_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_group_voice_chat = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_in_group_voice_chat(&has_bits);
          in_group_voice_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatUsability_ClientUsabilityMetrics_Notification_UIState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 friends_list_height = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_friends_list_height(), target);
  }

  // optional int32 friends_list_width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friends_list_width(), target);
  }

  // optional bool friends_list_docked = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_friends_list_docked(), target);
  }

  // optional bool friends_list_collapsed = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_friends_list_collapsed(), target);
  }

  // optional int32 friends_list_group_chats_height = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_friends_list_group_chats_height(), target);
  }

  // optional bool friends_list_visible = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_friends_list_visible(), target);
  }

  // optional int32 chat_popups_opened = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_chat_popups_opened(), target);
  }

  // optional int32 group_chat_tabs_opened = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_group_chat_tabs_opened(), target);
  }

  // optional int32 friend_chat_tabs_opened = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_friend_chat_tabs_opened(), target);
  }

  // optional int32 chat_window_width = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_chat_window_width(), target);
  }

  // optional int32 chat_window_height = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_chat_window_height(), target);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState category_collapse = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::category_collapse(this), target, stream);
  }

  // optional int32 group_chat_left_col_collapsed = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_group_chat_left_col_collapsed(), target);
  }

  // optional int32 group_chat_right_col_collapsed = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_group_chat_right_col_collapsed(), target);
  }

  // optional bool in_one_on_one_voice_chat = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_in_one_on_one_voice_chat(), target);
  }

  // optional bool in_group_voice_chat = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_in_group_voice_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_UIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState category_collapse = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_collapse_);
    }

    // optional int32 friends_list_height = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_list_height());
    }

    // optional int32 friends_list_width = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_list_width());
    }

    // optional int32 friends_list_group_chats_height = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_list_group_chats_height());
    }

    // optional int32 chat_popups_opened = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_popups_opened());
    }

    // optional bool friends_list_docked = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool friends_list_collapsed = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool friends_list_visible = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool in_one_on_one_voice_chat = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 group_chat_tabs_opened = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_group_chat_tabs_opened());
    }

    // optional int32 friend_chat_tabs_opened = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friend_chat_tabs_opened());
    }

    // optional int32 chat_window_width = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_window_width());
    }

    // optional int32 chat_window_height = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_window_height());
    }

    // optional int32 group_chat_left_col_collapsed = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_group_chat_left_col_collapsed());
    }

    // optional int32 group_chat_right_col_collapsed = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_group_chat_right_col_collapsed());
    }

    // optional bool in_group_voice_chat = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatUsability_ClientUsabilityMetrics_Notification_UIState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatUsability_ClientUsabilityMetrics_Notification_UIState::GetClassData() const { return &_class_data_; }

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatUsability_ClientUsabilityMetrics_Notification_UIState *>(to)->MergeFrom(
      static_cast<const CChatUsability_ClientUsabilityMetrics_Notification_UIState &>(from));
}


void CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_category_collapse()->::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState::MergeFrom(from._internal_category_collapse());
    }
    if (cached_has_bits & 0x00000002u) {
      friends_list_height_ = from.friends_list_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      friends_list_width_ = from.friends_list_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      friends_list_group_chats_height_ = from.friends_list_group_chats_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      chat_popups_opened_ = from.chat_popups_opened_;
    }
    if (cached_has_bits & 0x00000020u) {
      friends_list_docked_ = from.friends_list_docked_;
    }
    if (cached_has_bits & 0x00000040u) {
      friends_list_collapsed_ = from.friends_list_collapsed_;
    }
    if (cached_has_bits & 0x00000080u) {
      friends_list_visible_ = from.friends_list_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      in_one_on_one_voice_chat_ = from.in_one_on_one_voice_chat_;
    }
    if (cached_has_bits & 0x00000200u) {
      group_chat_tabs_opened_ = from.group_chat_tabs_opened_;
    }
    if (cached_has_bits & 0x00000400u) {
      friend_chat_tabs_opened_ = from.friend_chat_tabs_opened_;
    }
    if (cached_has_bits & 0x00000800u) {
      chat_window_width_ = from.chat_window_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      chat_window_height_ = from.chat_window_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      group_chat_left_col_collapsed_ = from.group_chat_left_col_collapsed_;
    }
    if (cached_has_bits & 0x00004000u) {
      group_chat_right_col_collapsed_ = from.group_chat_right_col_collapsed_;
    }
    if (cached_has_bits & 0x00008000u) {
      in_group_voice_chat_ = from.in_group_voice_chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_UIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.UIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_UIState::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_UIState::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_UIState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_UIState, in_group_voice_chat_)
      + sizeof(CChatUsability_ClientUsabilityMetrics_Notification_UIState::in_group_voice_chat_)
      - PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_UIState, category_collapse_)>(
          reinterpret_cast<char*>(&category_collapse_),
          reinterpret_cast<char*>(&other->category_collapse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatUsability_ClientUsabilityMetrics_Notification_UIState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[147]);
}

// ===================================================================

class CChatUsability_ClientUsabilityMetrics_Notification_Metrics::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatUsability_ClientUsabilityMetrics_Notification_Metrics>()._has_bits_);
  static void set_has_friends_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_friends_category_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_friends_categorized_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_friends_online_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_friends_in_game_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_friends_in_game_singleton_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_group_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_friends_favorite_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_group_chat_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_group_chat_favorite_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CChatUsability_ClientUsabilityMetrics_Notification_Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
}
CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CChatUsability_ClientUsabilityMetrics_Notification_Metrics(const CChatUsability_ClientUsabilityMetrics_Notification_Metrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&friends_count_, &from.friends_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_chat_favorite_count_) -
    reinterpret_cast<char*>(&friends_count_)) + sizeof(group_chat_favorite_count_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&friends_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_chat_favorite_count_) -
    reinterpret_cast<char*>(&friends_count_)) + sizeof(group_chat_favorite_count_));
}

CChatUsability_ClientUsabilityMetrics_Notification_Metrics::~CChatUsability_ClientUsabilityMetrics_Notification_Metrics() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::ArenaDtor(void* object) {
  CChatUsability_ClientUsabilityMetrics_Notification_Metrics* _this = reinterpret_cast< CChatUsability_ClientUsabilityMetrics_Notification_Metrics* >(object);
  (void)_this;
}
void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&friends_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friends_favorite_count_) -
        reinterpret_cast<char*>(&friends_count_)) + sizeof(friends_favorite_count_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&group_chat_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_chat_favorite_count_) -
        reinterpret_cast<char*>(&group_chat_count_)) + sizeof(group_chat_favorite_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatUsability_ClientUsabilityMetrics_Notification_Metrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 friends_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friends_count(&has_bits);
          friends_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_category_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_friends_category_count(&has_bits);
          friends_category_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_categorized_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_friends_categorized_count(&has_bits);
          friends_categorized_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_online_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_friends_online_count(&has_bits);
          friends_online_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_in_game_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_friends_in_game_count(&has_bits);
          friends_in_game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_in_game_singleton_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_friends_in_game_singleton_count(&has_bits);
          friends_in_game_singleton_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 game_group_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_game_group_count(&has_bits);
          game_group_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 friends_favorite_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_friends_favorite_count(&has_bits);
          friends_favorite_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 group_chat_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_group_chat_count(&has_bits);
          group_chat_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 group_chat_favorite_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_group_chat_favorite_count(&has_bits);
          group_chat_favorite_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatUsability_ClientUsabilityMetrics_Notification_Metrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 friends_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_friends_count(), target);
  }

  // optional int32 friends_category_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friends_category_count(), target);
  }

  // optional int32 friends_categorized_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_friends_categorized_count(), target);
  }

  // optional int32 friends_online_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_friends_online_count(), target);
  }

  // optional int32 friends_in_game_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_friends_in_game_count(), target);
  }

  // optional int32 friends_in_game_singleton_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_friends_in_game_singleton_count(), target);
  }

  // optional int32 game_group_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_game_group_count(), target);
  }

  // optional int32 friends_favorite_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_friends_favorite_count(), target);
  }

  // optional int32 group_chat_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_group_chat_count(), target);
  }

  // optional int32 group_chat_favorite_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_group_chat_favorite_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification_Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 friends_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_count());
    }

    // optional int32 friends_category_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_category_count());
    }

    // optional int32 friends_categorized_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_categorized_count());
    }

    // optional int32 friends_online_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_online_count());
    }

    // optional int32 friends_in_game_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_in_game_count());
    }

    // optional int32 friends_in_game_singleton_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_in_game_singleton_count());
    }

    // optional int32 game_group_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_game_group_count());
    }

    // optional int32 friends_favorite_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friends_favorite_count());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 group_chat_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_group_chat_count());
    }

    // optional int32 group_chat_favorite_count = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_group_chat_favorite_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatUsability_ClientUsabilityMetrics_Notification_Metrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatUsability_ClientUsabilityMetrics_Notification_Metrics::GetClassData() const { return &_class_data_; }

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatUsability_ClientUsabilityMetrics_Notification_Metrics *>(to)->MergeFrom(
      static_cast<const CChatUsability_ClientUsabilityMetrics_Notification_Metrics &>(from));
}


void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      friends_count_ = from.friends_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      friends_category_count_ = from.friends_category_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      friends_categorized_count_ = from.friends_categorized_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      friends_online_count_ = from.friends_online_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      friends_in_game_count_ = from.friends_in_game_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      friends_in_game_singleton_count_ = from.friends_in_game_singleton_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_group_count_ = from.game_group_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      friends_favorite_count_ = from.friends_favorite_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      group_chat_count_ = from.group_chat_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      group_chat_favorite_count_ = from.group_chat_favorite_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification_Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification_Metrics::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification_Metrics::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification_Metrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_Metrics, group_chat_favorite_count_)
      + sizeof(CChatUsability_ClientUsabilityMetrics_Notification_Metrics::group_chat_favorite_count_)
      - PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification_Metrics, friends_count_)>(
          reinterpret_cast<char*>(&friends_count_),
          reinterpret_cast<char*>(&other->friends_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatUsability_ClientUsabilityMetrics_Notification_Metrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[148]);
}

// ===================================================================

class CChatUsability_ClientUsabilityMetrics_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatUsability_ClientUsabilityMetrics_Notification>()._has_bits_);
  static void set_has_metrics_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_build(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_metrics_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_in_web(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CChatUsability_ClientUsabilityMetrics_Notification_Settings& settings(const CChatUsability_ClientUsabilityMetrics_Notification* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings& voice_settings(const CChatUsability_ClientUsabilityMetrics_Notification* msg);
  static void set_has_voice_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CChatUsability_ClientUsabilityMetrics_Notification_UIState& ui_state(const CChatUsability_ClientUsabilityMetrics_Notification* msg);
  static void set_has_ui_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics& metrics(const CChatUsability_ClientUsabilityMetrics_Notification* msg);
  static void set_has_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CChatUsability_ClientUsabilityMetrics_Notification_Settings&
CChatUsability_ClientUsabilityMetrics_Notification::_Internal::settings(const CChatUsability_ClientUsabilityMetrics_Notification* msg) {
  return *msg->settings_;
}
const ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings&
CChatUsability_ClientUsabilityMetrics_Notification::_Internal::voice_settings(const CChatUsability_ClientUsabilityMetrics_Notification* msg) {
  return *msg->voice_settings_;
}
const ::CChatUsability_ClientUsabilityMetrics_Notification_UIState&
CChatUsability_ClientUsabilityMetrics_Notification::_Internal::ui_state(const CChatUsability_ClientUsabilityMetrics_Notification* msg) {
  return *msg->ui_state_;
}
const ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics&
CChatUsability_ClientUsabilityMetrics_Notification::_Internal::metrics(const CChatUsability_ClientUsabilityMetrics_Notification* msg) {
  return *msg->metrics_;
}
CChatUsability_ClientUsabilityMetrics_Notification::CChatUsability_ClientUsabilityMetrics_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatUsability_ClientUsabilityMetrics_Notification)
}
CChatUsability_ClientUsabilityMetrics_Notification::CChatUsability_ClientUsabilityMetrics_Notification(const CChatUsability_ClientUsabilityMetrics_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_voice_settings()) {
    voice_settings_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings(*from.voice_settings_);
  } else {
    voice_settings_ = nullptr;
  }
  if (from._internal_has_ui_state()) {
    ui_state_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_UIState(*from.ui_state_);
  } else {
    ui_state_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  ::memcpy(&metrics_run_id_, &from.metrics_run_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_web_) -
    reinterpret_cast<char*>(&metrics_run_id_)) + sizeof(in_web_));
  // @@protoc_insertion_point(copy_constructor:CChatUsability_ClientUsabilityMetrics_Notification)
}

inline void CChatUsability_ClientUsabilityMetrics_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&in_web_) -
    reinterpret_cast<char*>(&settings_)) + sizeof(in_web_));
}

CChatUsability_ClientUsabilityMetrics_Notification::~CChatUsability_ClientUsabilityMetrics_Notification() {
  // @@protoc_insertion_point(destructor:CChatUsability_ClientUsabilityMetrics_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatUsability_ClientUsabilityMetrics_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete voice_settings_;
  if (this != internal_default_instance()) delete ui_state_;
  if (this != internal_default_instance()) delete metrics_;
}

void CChatUsability_ClientUsabilityMetrics_Notification::ArenaDtor(void* object) {
  CChatUsability_ClientUsabilityMetrics_Notification* _this = reinterpret_cast< CChatUsability_ClientUsabilityMetrics_Notification* >(object);
  (void)_this;
}
void CChatUsability_ClientUsabilityMetrics_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatUsability_ClientUsabilityMetrics_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatUsability_ClientUsabilityMetrics_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_ClientUsabilityMetrics_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(voice_settings_ != nullptr);
      voice_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ui_state_ != nullptr);
      ui_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(metrics_ != nullptr);
      metrics_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&metrics_run_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_web_) -
        reinterpret_cast<char*>(&metrics_run_id_)) + sizeof(in_web_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatUsability_ClientUsabilityMetrics_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 metrics_run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_metrics_run_id(&has_bits);
          metrics_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_build = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_build(&has_bits);
          client_build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 metrics_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_metrics_version(&has_bits);
          metrics_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_web = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_in_web(&has_bits);
          in_web_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatUsability_ClientUsabilityMetrics_Notification.Settings settings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings voice_settings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState ui_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ui_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CChatUsability_ClientUsabilityMetrics_Notification.Metrics metrics = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatUsability_ClientUsabilityMetrics_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_ClientUsabilityMetrics_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 metrics_run_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metrics_run_id(), target);
  }

  // optional uint32 client_build = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_build(), target);
  }

  // optional uint32 metrics_version = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_metrics_version(), target);
  }

  // optional bool in_web = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_in_web(), target);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.Settings settings = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::settings(this), target, stream);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings voice_settings = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::voice_settings(this), target, stream);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState ui_state = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::ui_state(this), target, stream);
  }

  // optional .CChatUsability_ClientUsabilityMetrics_Notification.Metrics metrics = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::metrics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_ClientUsabilityMetrics_Notification)
  return target;
}

size_t CChatUsability_ClientUsabilityMetrics_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_ClientUsabilityMetrics_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CChatUsability_ClientUsabilityMetrics_Notification.Settings settings = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

    // optional .CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings voice_settings = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_settings_);
    }

    // optional .CChatUsability_ClientUsabilityMetrics_Notification.UIState ui_state = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ui_state_);
    }

    // optional .CChatUsability_ClientUsabilityMetrics_Notification.Metrics metrics = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metrics_);
    }

    // optional uint32 metrics_run_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metrics_run_id());
    }

    // optional uint32 client_build = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_build());
    }

    // optional uint32 metrics_version = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metrics_version());
    }

    // optional bool in_web = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatUsability_ClientUsabilityMetrics_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatUsability_ClientUsabilityMetrics_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatUsability_ClientUsabilityMetrics_Notification::GetClassData() const { return &_class_data_; }

void CChatUsability_ClientUsabilityMetrics_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatUsability_ClientUsabilityMetrics_Notification *>(to)->MergeFrom(
      static_cast<const CChatUsability_ClientUsabilityMetrics_Notification &>(from));
}


void CChatUsability_ClientUsabilityMetrics_Notification::MergeFrom(const CChatUsability_ClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_ClientUsabilityMetrics_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_settings()->::CChatUsability_ClientUsabilityMetrics_Notification_Settings::MergeFrom(from._internal_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_voice_settings()->::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings::MergeFrom(from._internal_voice_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ui_state()->::CChatUsability_ClientUsabilityMetrics_Notification_UIState::MergeFrom(from._internal_ui_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_metrics()->::CChatUsability_ClientUsabilityMetrics_Notification_Metrics::MergeFrom(from._internal_metrics());
    }
    if (cached_has_bits & 0x00000010u) {
      metrics_run_id_ = from.metrics_run_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_build_ = from.client_build_;
    }
    if (cached_has_bits & 0x00000040u) {
      metrics_version_ = from.metrics_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      in_web_ = from.in_web_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatUsability_ClientUsabilityMetrics_Notification::CopyFrom(const CChatUsability_ClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_ClientUsabilityMetrics_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_ClientUsabilityMetrics_Notification::IsInitialized() const {
  return true;
}

void CChatUsability_ClientUsabilityMetrics_Notification::InternalSwap(CChatUsability_ClientUsabilityMetrics_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification, in_web_)
      + sizeof(CChatUsability_ClientUsabilityMetrics_Notification::in_web_)
      - PROTOBUF_FIELD_OFFSET(CChatUsability_ClientUsabilityMetrics_Notification, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatUsability_ClientUsabilityMetrics_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[149]);
}

// ===================================================================

class CChatUsability_RequestClientUsabilityMetrics_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CChatUsability_RequestClientUsabilityMetrics_Notification>()._has_bits_);
  static void set_has_metrics_run_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChatUsability_RequestClientUsabilityMetrics_Notification::CChatUsability_RequestClientUsabilityMetrics_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChatUsability_RequestClientUsabilityMetrics_Notification)
}
CChatUsability_RequestClientUsabilityMetrics_Notification::CChatUsability_RequestClientUsabilityMetrics_Notification(const CChatUsability_RequestClientUsabilityMetrics_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metrics_run_id_ = from.metrics_run_id_;
  // @@protoc_insertion_point(copy_constructor:CChatUsability_RequestClientUsabilityMetrics_Notification)
}

inline void CChatUsability_RequestClientUsabilityMetrics_Notification::SharedCtor() {
metrics_run_id_ = 0u;
}

CChatUsability_RequestClientUsabilityMetrics_Notification::~CChatUsability_RequestClientUsabilityMetrics_Notification() {
  // @@protoc_insertion_point(destructor:CChatUsability_RequestClientUsabilityMetrics_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChatUsability_RequestClientUsabilityMetrics_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::ArenaDtor(void* object) {
  CChatUsability_RequestClientUsabilityMetrics_Notification* _this = reinterpret_cast< CChatUsability_RequestClientUsabilityMetrics_Notification* >(object);
  (void)_this;
}
void CChatUsability_RequestClientUsabilityMetrics_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChatUsability_RequestClientUsabilityMetrics_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_run_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChatUsability_RequestClientUsabilityMetrics_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 metrics_run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_metrics_run_id(&has_bits);
          metrics_run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChatUsability_RequestClientUsabilityMetrics_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 metrics_run_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_metrics_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChatUsability_RequestClientUsabilityMetrics_Notification)
  return target;
}

size_t CChatUsability_RequestClientUsabilityMetrics_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 metrics_run_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_metrics_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChatUsability_RequestClientUsabilityMetrics_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChatUsability_RequestClientUsabilityMetrics_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChatUsability_RequestClientUsabilityMetrics_Notification::GetClassData() const { return &_class_data_; }

void CChatUsability_RequestClientUsabilityMetrics_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChatUsability_RequestClientUsabilityMetrics_Notification *>(to)->MergeFrom(
      static_cast<const CChatUsability_RequestClientUsabilityMetrics_Notification &>(from));
}


void CChatUsability_RequestClientUsabilityMetrics_Notification::MergeFrom(const CChatUsability_RequestClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metrics_run_id()) {
    _internal_set_metrics_run_id(from._internal_metrics_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::CopyFrom(const CChatUsability_RequestClientUsabilityMetrics_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatUsability_RequestClientUsabilityMetrics_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChatUsability_RequestClientUsabilityMetrics_Notification::IsInitialized() const {
  return true;
}

void CChatUsability_RequestClientUsabilityMetrics_Notification::InternalSwap(CChatUsability_RequestClientUsabilityMetrics_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metrics_run_id_, other->metrics_run_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CChatUsability_RequestClientUsabilityMetrics_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fchat_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fchat_2esteamclient_2eproto[150]);
}

// ===================================================================

Chat::~Chat() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Chat::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Chat::GetDescriptor() {
  return descriptor();
}

void Chat::RequestFriendPersonaStates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChat_RequestFriendPersonaStates_Request*,
                         ::CChat_RequestFriendPersonaStates_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RequestFriendPersonaStates() not implemented.");
  done->Run();
}

void Chat::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      RequestFriendPersonaStates(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChat_RequestFriendPersonaStates_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChat_RequestFriendPersonaStates_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Chat::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChat_RequestFriendPersonaStates_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Chat::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChat_RequestFriendPersonaStates_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Chat_Stub::Chat_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Chat_Stub::Chat_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Chat_Stub::~Chat_Stub() {
  if (owns_channel_) delete channel_;
}

void Chat_Stub::RequestFriendPersonaStates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChat_RequestFriendPersonaStates_Request* request,
                              ::CChat_RequestFriendPersonaStates_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

ChatRoom::~ChatRoom() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatRoom::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatRoom::GetDescriptor() {
  return descriptor();
}

void ChatRoom::CreateChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_CreateChatRoomGroup_Request*,
                         ::CChatRoom_CreateChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::SaveChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SaveChatRoomGroup_Request*,
                         ::CChatRoom_SaveChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SaveChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::RenameChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_RenameChatRoomGroup_Request*,
                         ::CChatRoom_RenameChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::SetChatRoomGroupTagline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetChatRoomGroupTagline_Request*,
                         ::CChatRoom_SetChatRoomGroupTagline_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetChatRoomGroupTagline() not implemented.");
  done->Run();
}

void ChatRoom::SetChatRoomGroupAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetChatRoomGroupAvatar_Request*,
                         ::CChatRoom_SetChatRoomGroupAvatar_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetChatRoomGroupAvatar() not implemented.");
  done->Run();
}

void ChatRoom::SetChatRoomGroupWatchingBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request*,
                         ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetChatRoomGroupWatchingBroadcast() not implemented.");
  done->Run();
}

void ChatRoom::JoinMiniGameForChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_JoinMiniGameForChatRoomGroup_Request*,
                         ::CChatRoom_JoinMiniGameForChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinMiniGameForChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::EndMiniGameForChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_EndMiniGameForChatRoomGroup_Request*,
                         ::CChatRoom_EndMiniGameForChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndMiniGameForChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::MuteUserInGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_MuteUser_Request*,
                         ::CChatRoom_MuteUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MuteUserInGroup() not implemented.");
  done->Run();
}

void ChatRoom::KickUserFromGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_KickUser_Request*,
                         ::CChatRoom_KickUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KickUserFromGroup() not implemented.");
  done->Run();
}

void ChatRoom::SetUserBanState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetUserBanState_Request*,
                         ::CChatRoom_SetUserBanState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserBanState() not implemented.");
  done->Run();
}

void ChatRoom::RevokeInviteToGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_RevokeInvite_Request*,
                         ::CChatRoom_RevokeInvite_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RevokeInviteToGroup() not implemented.");
  done->Run();
}

void ChatRoom::CreateRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_CreateRole_Request*,
                         ::CChatRoom_CreateRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateRole() not implemented.");
  done->Run();
}

void ChatRoom::GetRoles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetRoles_Request*,
                         ::CChatRoom_GetRoles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRoles() not implemented.");
  done->Run();
}

void ChatRoom::RenameRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_RenameRole_Request*,
                         ::CChatRoom_RenameRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameRole() not implemented.");
  done->Run();
}

void ChatRoom::ReorderRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_ReorderRole_Request*,
                         ::CChatRoom_ReorderRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReorderRole() not implemented.");
  done->Run();
}

void ChatRoom::DeleteRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_DeleteRole_Request*,
                         ::CChatRoom_DeleteRole_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteRole() not implemented.");
  done->Run();
}

void ChatRoom::GetRoleActions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetRoleActions_Request*,
                         ::CChatRoom_GetRoleActions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRoleActions() not implemented.");
  done->Run();
}

void ChatRoom::ReplaceRoleActions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_ReplaceRoleActions_Request*,
                         ::CChatRoom_ReplaceRoleActions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReplaceRoleActions() not implemented.");
  done->Run();
}

void ChatRoom::AddRoleToUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_AddRoleToUser_Request*,
                         ::CChatRoom_AddRoleToUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddRoleToUser() not implemented.");
  done->Run();
}

void ChatRoom::GetRolesForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetRolesForUser_Request*,
                         ::CChatRoom_GetRolesForUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRolesForUser() not implemented.");
  done->Run();
}

void ChatRoom::DeleteRoleFromUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_DeleteRoleFromUser_Request*,
                         ::CChatRoom_DeleteRoleFromUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteRoleFromUser() not implemented.");
  done->Run();
}

void ChatRoom::JoinChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_JoinChatRoomGroup_Request*,
                         ::CChatRoom_JoinChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::InviteFriendToChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_InviteFriendToChatRoomGroup_Request*,
                         ::CChatRoom_InviteFriendToChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InviteFriendToChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::LeaveChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_LeaveChatRoomGroup_Request*,
                         ::CChatRoom_LeaveChatRoomGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LeaveChatRoomGroup() not implemented.");
  done->Run();
}

void ChatRoom::CreateChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_CreateChatRoom_Request*,
                         ::CChatRoom_CreateChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::DeleteChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_DeleteChatRoom_Request*,
                         ::CChatRoom_DeleteChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::RenameChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_RenameChatRoom_Request*,
                         ::CChatRoom_RenameChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::ReorderChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_ReorderChatRoom_Request*,
                         ::CChatRoom_ReorderChatRoom_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReorderChatRoom() not implemented.");
  done->Run();
}

void ChatRoom::SendChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SendChatMessage_Request*,
                         ::CChatRoom_SendChatMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendChatMessage() not implemented.");
  done->Run();
}

void ChatRoom::JoinVoiceChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_JoinVoiceChat_Request*,
                         ::CChatRoom_JoinVoiceChat_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JoinVoiceChat() not implemented.");
  done->Run();
}

void ChatRoom::LeaveVoiceChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_LeaveVoiceChat_Request*,
                         ::CChatRoom_LeaveVoiceChat_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LeaveVoiceChat() not implemented.");
  done->Run();
}

void ChatRoom::GetMessageHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetMessageHistory_Request*,
                         ::CChatRoom_GetMessageHistory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMessageHistory() not implemented.");
  done->Run();
}

void ChatRoom::GetMyChatRoomGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetMyChatRoomGroups_Request*,
                         ::CChatRoom_GetMyChatRoomGroups_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMyChatRoomGroups() not implemented.");
  done->Run();
}

void ChatRoom::GetChatRoomGroupState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetChatRoomGroupState_Request*,
                         ::CChatRoom_GetChatRoomGroupState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatRoomGroupState() not implemented.");
  done->Run();
}

void ChatRoom::GetChatRoomGroupSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetChatRoomGroupSummary_Request*,
                         ::CChatRoom_GetChatRoomGroupSummary_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChatRoomGroupSummary() not implemented.");
  done->Run();
}

void ChatRoom::SetAppChatRoomGroupForceActive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetAppChatRoomGroupForceActive_Request*,
                         ::CChatRoom_SetAppChatRoomGroupForceActive_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetAppChatRoomGroupForceActive() not implemented.");
  done->Run();
}

void ChatRoom::SetAppChatRoomGroupStopForceActive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetAppChatRoomGroupStopForceActive() not implemented.");
  done->Run();
}

void ChatRoom::AckChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_AckChatMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AckChatMessage() not implemented.");
  done->Run();
}

void ChatRoom::CreateInviteLink(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_CreateInviteLink_Request*,
                         ::CChatRoom_CreateInviteLink_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateInviteLink() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteLinkInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetInviteLinkInfo_Request*,
                         ::CChatRoom_GetInviteLinkInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteLinkInfo() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetInviteInfo_Request*,
                         ::CChatRoom_GetInviteInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteInfo() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteLinksForGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetInviteLinksForGroup_Request*,
                         ::CChatRoom_GetInviteLinksForGroup_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteLinksForGroup() not implemented.");
  done->Run();
}

void ChatRoom::GetBanList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetBanList_Request*,
                         ::CChatRoom_GetBanList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBanList() not implemented.");
  done->Run();
}

void ChatRoom::GetInviteList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetInviteList_Request*,
                         ::CChatRoom_GetInviteList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInviteList() not implemented.");
  done->Run();
}

void ChatRoom::DeleteInviteLink(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_DeleteInviteLink_Request*,
                         ::CChatRoom_DeleteInviteLink_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteInviteLink() not implemented.");
  done->Run();
}

void ChatRoom::SetSessionActiveChatRoomGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetSessionActiveChatRoomGroups_Request*,
                         ::CChatRoom_SetSessionActiveChatRoomGroups_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetSessionActiveChatRoomGroups() not implemented.");
  done->Run();
}

void ChatRoom::SetUserChatGroupPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SetUserChatGroupPreferences_Request*,
                         ::CChatRoom_SetUserChatGroupPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetUserChatGroupPreferences() not implemented.");
  done->Run();
}

void ChatRoom::DeleteChatMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_DeleteChatMessages_Request*,
                         ::CChatRoom_DeleteChatMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteChatMessages() not implemented.");
  done->Run();
}

void ChatRoom::UpdateMemberListView(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_UpdateMemberListView_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateMemberListView() not implemented.");
  done->Run();
}

void ChatRoom::SearchMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_SearchMembers_Request*,
                         ::CChatRoom_SearchMembers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SearchMembers() not implemented.");
  done->Run();
}

void ChatRoom::UpdateMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_UpdateMessageReaction_Request*,
                         ::CChatRoom_UpdateMessageReaction_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateMessageReaction() not implemented.");
  done->Run();
}

void ChatRoom::GetMessageReactionReactors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_GetMessageReactionReactors_Request*,
                         ::CChatRoom_GetMessageReactionReactors_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMessageReactionReactors() not implemented.");
  done->Run();
}

void ChatRoom::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      CreateChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_CreateChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_CreateChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 1:
      SaveChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SaveChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SaveChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 2:
      RenameChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_RenameChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_RenameChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 3:
      SetChatRoomGroupTagline(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetChatRoomGroupTagline_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SetChatRoomGroupTagline_Response*>(
                 response),
             done);
      break;
    case 4:
      SetChatRoomGroupAvatar(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetChatRoomGroupAvatar_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SetChatRoomGroupAvatar_Response*>(
                 response),
             done);
      break;
    case 5:
      SetChatRoomGroupWatchingBroadcast(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response*>(
                 response),
             done);
      break;
    case 6:
      JoinMiniGameForChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_JoinMiniGameForChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_JoinMiniGameForChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 7:
      EndMiniGameForChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_EndMiniGameForChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_EndMiniGameForChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 8:
      MuteUserInGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_MuteUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_MuteUser_Response*>(
                 response),
             done);
      break;
    case 9:
      KickUserFromGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_KickUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_KickUser_Response*>(
                 response),
             done);
      break;
    case 10:
      SetUserBanState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetUserBanState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SetUserBanState_Response*>(
                 response),
             done);
      break;
    case 11:
      RevokeInviteToGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_RevokeInvite_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_RevokeInvite_Response*>(
                 response),
             done);
      break;
    case 12:
      CreateRole(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_CreateRole_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_CreateRole_Response*>(
                 response),
             done);
      break;
    case 13:
      GetRoles(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetRoles_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetRoles_Response*>(
                 response),
             done);
      break;
    case 14:
      RenameRole(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_RenameRole_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_RenameRole_Response*>(
                 response),
             done);
      break;
    case 15:
      ReorderRole(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_ReorderRole_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_ReorderRole_Response*>(
                 response),
             done);
      break;
    case 16:
      DeleteRole(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_DeleteRole_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_DeleteRole_Response*>(
                 response),
             done);
      break;
    case 17:
      GetRoleActions(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetRoleActions_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetRoleActions_Response*>(
                 response),
             done);
      break;
    case 18:
      ReplaceRoleActions(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_ReplaceRoleActions_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_ReplaceRoleActions_Response*>(
                 response),
             done);
      break;
    case 19:
      AddRoleToUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_AddRoleToUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_AddRoleToUser_Response*>(
                 response),
             done);
      break;
    case 20:
      GetRolesForUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetRolesForUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetRolesForUser_Response*>(
                 response),
             done);
      break;
    case 21:
      DeleteRoleFromUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_DeleteRoleFromUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_DeleteRoleFromUser_Response*>(
                 response),
             done);
      break;
    case 22:
      JoinChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_JoinChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_JoinChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 23:
      InviteFriendToChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_InviteFriendToChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_InviteFriendToChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 24:
      LeaveChatRoomGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_LeaveChatRoomGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_LeaveChatRoomGroup_Response*>(
                 response),
             done);
      break;
    case 25:
      CreateChatRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_CreateChatRoom_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_CreateChatRoom_Response*>(
                 response),
             done);
      break;
    case 26:
      DeleteChatRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_DeleteChatRoom_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_DeleteChatRoom_Response*>(
                 response),
             done);
      break;
    case 27:
      RenameChatRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_RenameChatRoom_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_RenameChatRoom_Response*>(
                 response),
             done);
      break;
    case 28:
      ReorderChatRoom(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_ReorderChatRoom_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_ReorderChatRoom_Response*>(
                 response),
             done);
      break;
    case 29:
      SendChatMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SendChatMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SendChatMessage_Response*>(
                 response),
             done);
      break;
    case 30:
      JoinVoiceChat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_JoinVoiceChat_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_JoinVoiceChat_Response*>(
                 response),
             done);
      break;
    case 31:
      LeaveVoiceChat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_LeaveVoiceChat_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_LeaveVoiceChat_Response*>(
                 response),
             done);
      break;
    case 32:
      GetMessageHistory(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetMessageHistory_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetMessageHistory_Response*>(
                 response),
             done);
      break;
    case 33:
      GetMyChatRoomGroups(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetMyChatRoomGroups_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetMyChatRoomGroups_Response*>(
                 response),
             done);
      break;
    case 34:
      GetChatRoomGroupState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetChatRoomGroupState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetChatRoomGroupState_Response*>(
                 response),
             done);
      break;
    case 35:
      GetChatRoomGroupSummary(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetChatRoomGroupSummary_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetChatRoomGroupSummary_Response*>(
                 response),
             done);
      break;
    case 36:
      SetAppChatRoomGroupForceActive(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetAppChatRoomGroupForceActive_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SetAppChatRoomGroupForceActive_Response*>(
                 response),
             done);
      break;
    case 37:
      SetAppChatRoomGroupStopForceActive(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 38:
      AckChatMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_AckChatMessage_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 39:
      CreateInviteLink(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_CreateInviteLink_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_CreateInviteLink_Response*>(
                 response),
             done);
      break;
    case 40:
      GetInviteLinkInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetInviteLinkInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetInviteLinkInfo_Response*>(
                 response),
             done);
      break;
    case 41:
      GetInviteInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetInviteInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetInviteInfo_Response*>(
                 response),
             done);
      break;
    case 42:
      GetInviteLinksForGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetInviteLinksForGroup_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetInviteLinksForGroup_Response*>(
                 response),
             done);
      break;
    case 43:
      GetBanList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetBanList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetBanList_Response*>(
                 response),
             done);
      break;
    case 44:
      GetInviteList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetInviteList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetInviteList_Response*>(
                 response),
             done);
      break;
    case 45:
      DeleteInviteLink(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_DeleteInviteLink_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_DeleteInviteLink_Response*>(
                 response),
             done);
      break;
    case 46:
      SetSessionActiveChatRoomGroups(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetSessionActiveChatRoomGroups_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SetSessionActiveChatRoomGroups_Response*>(
                 response),
             done);
      break;
    case 47:
      SetUserChatGroupPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SetUserChatGroupPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SetUserChatGroupPreferences_Response*>(
                 response),
             done);
      break;
    case 48:
      DeleteChatMessages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_DeleteChatMessages_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_DeleteChatMessages_Response*>(
                 response),
             done);
      break;
    case 49:
      UpdateMemberListView(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_UpdateMemberListView_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 50:
      SearchMembers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_SearchMembers_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_SearchMembers_Response*>(
                 response),
             done);
      break;
    case 51:
      UpdateMessageReaction(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_UpdateMessageReaction_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_UpdateMessageReaction_Response*>(
                 response),
             done);
      break;
    case 52:
      GetMessageReactionReactors(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_GetMessageReactionReactors_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CChatRoom_GetMessageReactionReactors_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatRoom::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatRoom_CreateChatRoomGroup_Request::default_instance();
    case 1:
      return ::CChatRoom_SaveChatRoomGroup_Request::default_instance();
    case 2:
      return ::CChatRoom_RenameChatRoomGroup_Request::default_instance();
    case 3:
      return ::CChatRoom_SetChatRoomGroupTagline_Request::default_instance();
    case 4:
      return ::CChatRoom_SetChatRoomGroupAvatar_Request::default_instance();
    case 5:
      return ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request::default_instance();
    case 6:
      return ::CChatRoom_JoinMiniGameForChatRoomGroup_Request::default_instance();
    case 7:
      return ::CChatRoom_EndMiniGameForChatRoomGroup_Request::default_instance();
    case 8:
      return ::CChatRoom_MuteUser_Request::default_instance();
    case 9:
      return ::CChatRoom_KickUser_Request::default_instance();
    case 10:
      return ::CChatRoom_SetUserBanState_Request::default_instance();
    case 11:
      return ::CChatRoom_RevokeInvite_Request::default_instance();
    case 12:
      return ::CChatRoom_CreateRole_Request::default_instance();
    case 13:
      return ::CChatRoom_GetRoles_Request::default_instance();
    case 14:
      return ::CChatRoom_RenameRole_Request::default_instance();
    case 15:
      return ::CChatRoom_ReorderRole_Request::default_instance();
    case 16:
      return ::CChatRoom_DeleteRole_Request::default_instance();
    case 17:
      return ::CChatRoom_GetRoleActions_Request::default_instance();
    case 18:
      return ::CChatRoom_ReplaceRoleActions_Request::default_instance();
    case 19:
      return ::CChatRoom_AddRoleToUser_Request::default_instance();
    case 20:
      return ::CChatRoom_GetRolesForUser_Request::default_instance();
    case 21:
      return ::CChatRoom_DeleteRoleFromUser_Request::default_instance();
    case 22:
      return ::CChatRoom_JoinChatRoomGroup_Request::default_instance();
    case 23:
      return ::CChatRoom_InviteFriendToChatRoomGroup_Request::default_instance();
    case 24:
      return ::CChatRoom_LeaveChatRoomGroup_Request::default_instance();
    case 25:
      return ::CChatRoom_CreateChatRoom_Request::default_instance();
    case 26:
      return ::CChatRoom_DeleteChatRoom_Request::default_instance();
    case 27:
      return ::CChatRoom_RenameChatRoom_Request::default_instance();
    case 28:
      return ::CChatRoom_ReorderChatRoom_Request::default_instance();
    case 29:
      return ::CChatRoom_SendChatMessage_Request::default_instance();
    case 30:
      return ::CChatRoom_JoinVoiceChat_Request::default_instance();
    case 31:
      return ::CChatRoom_LeaveVoiceChat_Request::default_instance();
    case 32:
      return ::CChatRoom_GetMessageHistory_Request::default_instance();
    case 33:
      return ::CChatRoom_GetMyChatRoomGroups_Request::default_instance();
    case 34:
      return ::CChatRoom_GetChatRoomGroupState_Request::default_instance();
    case 35:
      return ::CChatRoom_GetChatRoomGroupSummary_Request::default_instance();
    case 36:
      return ::CChatRoom_SetAppChatRoomGroupForceActive_Request::default_instance();
    case 37:
      return ::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification::default_instance();
    case 38:
      return ::CChatRoom_AckChatMessage_Notification::default_instance();
    case 39:
      return ::CChatRoom_CreateInviteLink_Request::default_instance();
    case 40:
      return ::CChatRoom_GetInviteLinkInfo_Request::default_instance();
    case 41:
      return ::CChatRoom_GetInviteInfo_Request::default_instance();
    case 42:
      return ::CChatRoom_GetInviteLinksForGroup_Request::default_instance();
    case 43:
      return ::CChatRoom_GetBanList_Request::default_instance();
    case 44:
      return ::CChatRoom_GetInviteList_Request::default_instance();
    case 45:
      return ::CChatRoom_DeleteInviteLink_Request::default_instance();
    case 46:
      return ::CChatRoom_SetSessionActiveChatRoomGroups_Request::default_instance();
    case 47:
      return ::CChatRoom_SetUserChatGroupPreferences_Request::default_instance();
    case 48:
      return ::CChatRoom_DeleteChatMessages_Request::default_instance();
    case 49:
      return ::CChatRoom_UpdateMemberListView_Notification::default_instance();
    case 50:
      return ::CChatRoom_SearchMembers_Request::default_instance();
    case 51:
      return ::CChatRoom_UpdateMessageReaction_Request::default_instance();
    case 52:
      return ::CChatRoom_GetMessageReactionReactors_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatRoom::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatRoom_CreateChatRoomGroup_Response::default_instance();
    case 1:
      return ::CChatRoom_SaveChatRoomGroup_Response::default_instance();
    case 2:
      return ::CChatRoom_RenameChatRoomGroup_Response::default_instance();
    case 3:
      return ::CChatRoom_SetChatRoomGroupTagline_Response::default_instance();
    case 4:
      return ::CChatRoom_SetChatRoomGroupAvatar_Response::default_instance();
    case 5:
      return ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response::default_instance();
    case 6:
      return ::CChatRoom_JoinMiniGameForChatRoomGroup_Response::default_instance();
    case 7:
      return ::CChatRoom_EndMiniGameForChatRoomGroup_Response::default_instance();
    case 8:
      return ::CChatRoom_MuteUser_Response::default_instance();
    case 9:
      return ::CChatRoom_KickUser_Response::default_instance();
    case 10:
      return ::CChatRoom_SetUserBanState_Response::default_instance();
    case 11:
      return ::CChatRoom_RevokeInvite_Response::default_instance();
    case 12:
      return ::CChatRoom_CreateRole_Response::default_instance();
    case 13:
      return ::CChatRoom_GetRoles_Response::default_instance();
    case 14:
      return ::CChatRoom_RenameRole_Response::default_instance();
    case 15:
      return ::CChatRoom_ReorderRole_Response::default_instance();
    case 16:
      return ::CChatRoom_DeleteRole_Response::default_instance();
    case 17:
      return ::CChatRoom_GetRoleActions_Response::default_instance();
    case 18:
      return ::CChatRoom_ReplaceRoleActions_Response::default_instance();
    case 19:
      return ::CChatRoom_AddRoleToUser_Response::default_instance();
    case 20:
      return ::CChatRoom_GetRolesForUser_Response::default_instance();
    case 21:
      return ::CChatRoom_DeleteRoleFromUser_Response::default_instance();
    case 22:
      return ::CChatRoom_JoinChatRoomGroup_Response::default_instance();
    case 23:
      return ::CChatRoom_InviteFriendToChatRoomGroup_Response::default_instance();
    case 24:
      return ::CChatRoom_LeaveChatRoomGroup_Response::default_instance();
    case 25:
      return ::CChatRoom_CreateChatRoom_Response::default_instance();
    case 26:
      return ::CChatRoom_DeleteChatRoom_Response::default_instance();
    case 27:
      return ::CChatRoom_RenameChatRoom_Response::default_instance();
    case 28:
      return ::CChatRoom_ReorderChatRoom_Response::default_instance();
    case 29:
      return ::CChatRoom_SendChatMessage_Response::default_instance();
    case 30:
      return ::CChatRoom_JoinVoiceChat_Response::default_instance();
    case 31:
      return ::CChatRoom_LeaveVoiceChat_Response::default_instance();
    case 32:
      return ::CChatRoom_GetMessageHistory_Response::default_instance();
    case 33:
      return ::CChatRoom_GetMyChatRoomGroups_Response::default_instance();
    case 34:
      return ::CChatRoom_GetChatRoomGroupState_Response::default_instance();
    case 35:
      return ::CChatRoom_GetChatRoomGroupSummary_Response::default_instance();
    case 36:
      return ::CChatRoom_SetAppChatRoomGroupForceActive_Response::default_instance();
    case 37:
      return ::NoResponse::default_instance();
    case 38:
      return ::NoResponse::default_instance();
    case 39:
      return ::CChatRoom_CreateInviteLink_Response::default_instance();
    case 40:
      return ::CChatRoom_GetInviteLinkInfo_Response::default_instance();
    case 41:
      return ::CChatRoom_GetInviteInfo_Response::default_instance();
    case 42:
      return ::CChatRoom_GetInviteLinksForGroup_Response::default_instance();
    case 43:
      return ::CChatRoom_GetBanList_Response::default_instance();
    case 44:
      return ::CChatRoom_GetInviteList_Response::default_instance();
    case 45:
      return ::CChatRoom_DeleteInviteLink_Response::default_instance();
    case 46:
      return ::CChatRoom_SetSessionActiveChatRoomGroups_Response::default_instance();
    case 47:
      return ::CChatRoom_SetUserChatGroupPreferences_Response::default_instance();
    case 48:
      return ::CChatRoom_DeleteChatMessages_Response::default_instance();
    case 49:
      return ::NoResponse::default_instance();
    case 50:
      return ::CChatRoom_SearchMembers_Response::default_instance();
    case 51:
      return ::CChatRoom_UpdateMessageReaction_Response::default_instance();
    case 52:
      return ::CChatRoom_GetMessageReactionReactors_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatRoom_Stub::ChatRoom_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatRoom_Stub::ChatRoom_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ChatRoom_Stub::~ChatRoom_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatRoom_Stub::CreateChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_CreateChatRoomGroup_Request* request,
                              ::CChatRoom_CreateChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChatRoom_Stub::SaveChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SaveChatRoomGroup_Request* request,
                              ::CChatRoom_SaveChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChatRoom_Stub::RenameChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_RenameChatRoomGroup_Request* request,
                              ::CChatRoom_RenameChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetChatRoomGroupTagline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetChatRoomGroupTagline_Request* request,
                              ::CChatRoom_SetChatRoomGroupTagline_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetChatRoomGroupAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetChatRoomGroupAvatar_Request* request,
                              ::CChatRoom_SetChatRoomGroupAvatar_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetChatRoomGroupWatchingBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* request,
                              ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ChatRoom_Stub::JoinMiniGameForChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_JoinMiniGameForChatRoomGroup_Request* request,
                              ::CChatRoom_JoinMiniGameForChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ChatRoom_Stub::EndMiniGameForChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_EndMiniGameForChatRoomGroup_Request* request,
                              ::CChatRoom_EndMiniGameForChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ChatRoom_Stub::MuteUserInGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_MuteUser_Request* request,
                              ::CChatRoom_MuteUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ChatRoom_Stub::KickUserFromGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_KickUser_Request* request,
                              ::CChatRoom_KickUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetUserBanState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetUserBanState_Request* request,
                              ::CChatRoom_SetUserBanState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void ChatRoom_Stub::RevokeInviteToGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_RevokeInvite_Request* request,
                              ::CChatRoom_RevokeInvite_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void ChatRoom_Stub::CreateRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_CreateRole_Request* request,
                              ::CChatRoom_CreateRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetRoles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetRoles_Request* request,
                              ::CChatRoom_GetRoles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void ChatRoom_Stub::RenameRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_RenameRole_Request* request,
                              ::CChatRoom_RenameRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void ChatRoom_Stub::ReorderRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_ReorderRole_Request* request,
                              ::CChatRoom_ReorderRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_DeleteRole_Request* request,
                              ::CChatRoom_DeleteRole_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetRoleActions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetRoleActions_Request* request,
                              ::CChatRoom_GetRoleActions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void ChatRoom_Stub::ReplaceRoleActions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_ReplaceRoleActions_Request* request,
                              ::CChatRoom_ReplaceRoleActions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void ChatRoom_Stub::AddRoleToUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_AddRoleToUser_Request* request,
                              ::CChatRoom_AddRoleToUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetRolesForUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetRolesForUser_Request* request,
                              ::CChatRoom_GetRolesForUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteRoleFromUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_DeleteRoleFromUser_Request* request,
                              ::CChatRoom_DeleteRoleFromUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void ChatRoom_Stub::JoinChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_JoinChatRoomGroup_Request* request,
                              ::CChatRoom_JoinChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void ChatRoom_Stub::InviteFriendToChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_InviteFriendToChatRoomGroup_Request* request,
                              ::CChatRoom_InviteFriendToChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void ChatRoom_Stub::LeaveChatRoomGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_LeaveChatRoomGroup_Request* request,
                              ::CChatRoom_LeaveChatRoomGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void ChatRoom_Stub::CreateChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_CreateChatRoom_Request* request,
                              ::CChatRoom_CreateChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_DeleteChatRoom_Request* request,
                              ::CChatRoom_DeleteChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void ChatRoom_Stub::RenameChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_RenameChatRoom_Request* request,
                              ::CChatRoom_RenameChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void ChatRoom_Stub::ReorderChatRoom(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_ReorderChatRoom_Request* request,
                              ::CChatRoom_ReorderChatRoom_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void ChatRoom_Stub::SendChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SendChatMessage_Request* request,
                              ::CChatRoom_SendChatMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void ChatRoom_Stub::JoinVoiceChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_JoinVoiceChat_Request* request,
                              ::CChatRoom_JoinVoiceChat_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void ChatRoom_Stub::LeaveVoiceChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_LeaveVoiceChat_Request* request,
                              ::CChatRoom_LeaveVoiceChat_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetMessageHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetMessageHistory_Request* request,
                              ::CChatRoom_GetMessageHistory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetMyChatRoomGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetMyChatRoomGroups_Request* request,
                              ::CChatRoom_GetMyChatRoomGroups_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetChatRoomGroupState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetChatRoomGroupState_Request* request,
                              ::CChatRoom_GetChatRoomGroupState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(34),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetChatRoomGroupSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetChatRoomGroupSummary_Request* request,
                              ::CChatRoom_GetChatRoomGroupSummary_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(35),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetAppChatRoomGroupForceActive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetAppChatRoomGroupForceActive_Request* request,
                              ::CChatRoom_SetAppChatRoomGroupForceActive_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(36),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetAppChatRoomGroupStopForceActive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(37),
                       controller, request, response, done);
}
void ChatRoom_Stub::AckChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_AckChatMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(38),
                       controller, request, response, done);
}
void ChatRoom_Stub::CreateInviteLink(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_CreateInviteLink_Request* request,
                              ::CChatRoom_CreateInviteLink_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(39),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteLinkInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetInviteLinkInfo_Request* request,
                              ::CChatRoom_GetInviteLinkInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(40),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetInviteInfo_Request* request,
                              ::CChatRoom_GetInviteInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(41),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteLinksForGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetInviteLinksForGroup_Request* request,
                              ::CChatRoom_GetInviteLinksForGroup_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(42),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetBanList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetBanList_Request* request,
                              ::CChatRoom_GetBanList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(43),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetInviteList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetInviteList_Request* request,
                              ::CChatRoom_GetInviteList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(44),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteInviteLink(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_DeleteInviteLink_Request* request,
                              ::CChatRoom_DeleteInviteLink_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(45),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetSessionActiveChatRoomGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetSessionActiveChatRoomGroups_Request* request,
                              ::CChatRoom_SetSessionActiveChatRoomGroups_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(46),
                       controller, request, response, done);
}
void ChatRoom_Stub::SetUserChatGroupPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SetUserChatGroupPreferences_Request* request,
                              ::CChatRoom_SetUserChatGroupPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(47),
                       controller, request, response, done);
}
void ChatRoom_Stub::DeleteChatMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_DeleteChatMessages_Request* request,
                              ::CChatRoom_DeleteChatMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(48),
                       controller, request, response, done);
}
void ChatRoom_Stub::UpdateMemberListView(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_UpdateMemberListView_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(49),
                       controller, request, response, done);
}
void ChatRoom_Stub::SearchMembers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_SearchMembers_Request* request,
                              ::CChatRoom_SearchMembers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(50),
                       controller, request, response, done);
}
void ChatRoom_Stub::UpdateMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_UpdateMessageReaction_Request* request,
                              ::CChatRoom_UpdateMessageReaction_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(51),
                       controller, request, response, done);
}
void ChatRoom_Stub::GetMessageReactionReactors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_GetMessageReactionReactors_Request* request,
                              ::CChatRoom_GetMessageReactionReactors_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(52),
                       controller, request, response, done);
}
// ===================================================================

ClanChatRooms::~ClanChatRooms() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ClanChatRooms::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ClanChatRooms::GetDescriptor() {
  return descriptor();
}

void ClanChatRooms::GetClanChatRoomInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClanChatRooms_GetClanChatRoomInfo_Request*,
                         ::CClanChatRooms_GetClanChatRoomInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClanChatRoomInfo() not implemented.");
  done->Run();
}

void ClanChatRooms::SetClanChatRoomPrivate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClanChatRooms_SetClanChatRoomPrivate_Request*,
                         ::CClanChatRooms_SetClanChatRoomPrivate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetClanChatRoomPrivate() not implemented.");
  done->Run();
}

void ClanChatRooms::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[2]);
  switch(method->index()) {
    case 0:
      GetClanChatRoomInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClanChatRooms_GetClanChatRoomInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CClanChatRooms_GetClanChatRoomInfo_Response*>(
                 response),
             done);
      break;
    case 1:
      SetClanChatRoomPrivate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClanChatRooms_SetClanChatRoomPrivate_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CClanChatRooms_SetClanChatRoomPrivate_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ClanChatRooms::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CClanChatRooms_GetClanChatRoomInfo_Request::default_instance();
    case 1:
      return ::CClanChatRooms_SetClanChatRoomPrivate_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ClanChatRooms::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CClanChatRooms_GetClanChatRoomInfo_Response::default_instance();
    case 1:
      return ::CClanChatRooms_SetClanChatRoomPrivate_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ClanChatRooms_Stub::ClanChatRooms_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ClanChatRooms_Stub::ClanChatRooms_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ClanChatRooms_Stub::~ClanChatRooms_Stub() {
  if (owns_channel_) delete channel_;
}

void ClanChatRooms_Stub::GetClanChatRoomInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClanChatRooms_GetClanChatRoomInfo_Request* request,
                              ::CClanChatRooms_GetClanChatRoomInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ClanChatRooms_Stub::SetClanChatRoomPrivate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClanChatRooms_SetClanChatRoomPrivate_Request* request,
                              ::CClanChatRooms_SetClanChatRoomPrivate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

ChatRoomClient::~ChatRoomClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatRoomClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[3];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatRoomClient::GetDescriptor() {
  return descriptor();
}

void ChatRoomClient::NotifyIncomingChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_IncomingChatMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyIncomingChatMessage() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatMessageModified(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_ChatMessageModified_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatMessageModified() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyMemberStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_MemberStateChange_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyMemberStateChange() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatRoomHeaderStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_ChatRoomHeaderState_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatRoomHeaderStateChange() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatRoomGroupRoomsChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_ChatRoomGroupRoomsChange_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatRoomGroupRoomsChange() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyShouldRejoinChatRoomVoiceChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyShouldRejoinChatRoomVoiceChat() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatGroupUserStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatGroupUserStateChanged() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyAckChatMessageEcho(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_AckChatMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyAckChatMessageEcho() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyChatRoomDisconnect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatRoomClient_NotifyChatRoomDisconnect_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyChatRoomDisconnect() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyMemberListViewUpdated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoomClient_MemberListViewUpdated_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyMemberListViewUpdated() not implemented.");
  done->Run();
}

void ChatRoomClient::NotifyMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatRoom_MessageReaction_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyMessageReaction() not implemented.");
  done->Run();
}

void ChatRoomClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[3]);
  switch(method->index()) {
    case 0:
      NotifyIncomingChatMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_IncomingChatMessage_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      NotifyChatMessageModified(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_ChatMessageModified_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      NotifyMemberStateChange(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_MemberStateChange_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 3:
      NotifyChatRoomHeaderStateChange(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_ChatRoomHeaderState_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 4:
      NotifyChatRoomGroupRoomsChange(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_ChatRoomGroupRoomsChange_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 5:
      NotifyShouldRejoinChatRoomVoiceChat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 6:
      NotifyChatGroupUserStateChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 7:
      NotifyAckChatMessageEcho(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_AckChatMessage_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 8:
      NotifyChatRoomDisconnect(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatRoomClient_NotifyChatRoomDisconnect_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 9:
      NotifyMemberListViewUpdated(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoomClient_MemberListViewUpdated_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 10:
      NotifyMessageReaction(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatRoom_MessageReaction_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatRoomClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatRoom_IncomingChatMessage_Notification::default_instance();
    case 1:
      return ::CChatRoom_ChatMessageModified_Notification::default_instance();
    case 2:
      return ::CChatRoom_MemberStateChange_Notification::default_instance();
    case 3:
      return ::CChatRoom_ChatRoomHeaderState_Notification::default_instance();
    case 4:
      return ::CChatRoom_ChatRoomGroupRoomsChange_Notification::default_instance();
    case 5:
      return ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification::default_instance();
    case 6:
      return ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification::default_instance();
    case 7:
      return ::CChatRoom_AckChatMessage_Notification::default_instance();
    case 8:
      return ::ChatRoomClient_NotifyChatRoomDisconnect_Notification::default_instance();
    case 9:
      return ::CChatRoomClient_MemberListViewUpdated_Notification::default_instance();
    case 10:
      return ::CChatRoom_MessageReaction_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatRoomClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::NoResponse::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    case 7:
      return ::NoResponse::default_instance();
    case 8:
      return ::NoResponse::default_instance();
    case 9:
      return ::NoResponse::default_instance();
    case 10:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatRoomClient_Stub::ChatRoomClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatRoomClient_Stub::ChatRoomClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ChatRoomClient_Stub::~ChatRoomClient_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatRoomClient_Stub::NotifyIncomingChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_IncomingChatMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatMessageModified(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_ChatMessageModified_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyMemberStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_MemberStateChange_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatRoomHeaderStateChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_ChatRoomHeaderState_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatRoomGroupRoomsChange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_ChatRoomGroupRoomsChange_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyShouldRejoinChatRoomVoiceChat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatGroupUserStateChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyAckChatMessageEcho(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_AckChatMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyChatRoomDisconnect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatRoomClient_NotifyChatRoomDisconnect_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyMemberListViewUpdated(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoomClient_MemberListViewUpdated_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ChatRoomClient_Stub::NotifyMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatRoom_MessageReaction_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
// ===================================================================

ChatUsability::~ChatUsability() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatUsability::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[4];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatUsability::GetDescriptor() {
  return descriptor();
}

void ChatUsability::NotifyClientUsabilityMetrics(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatUsability_ClientUsabilityMetrics_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClientUsabilityMetrics() not implemented.");
  done->Run();
}

void ChatUsability::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[4]);
  switch(method->index()) {
    case 0:
      NotifyClientUsabilityMetrics(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatUsability_ClientUsabilityMetrics_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatUsability::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatUsability_ClientUsabilityMetrics_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatUsability::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatUsability_Stub::ChatUsability_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatUsability_Stub::ChatUsability_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ChatUsability_Stub::~ChatUsability_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatUsability_Stub::NotifyClientUsabilityMetrics(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatUsability_ClientUsabilityMetrics_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

ChatUsabilityClient::~ChatUsabilityClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatUsabilityClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fchat_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[5];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ChatUsabilityClient::GetDescriptor() {
  return descriptor();
}

void ChatUsabilityClient::NotifyRequestClientUsabilityMetrics(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CChatUsability_RequestClientUsabilityMetrics_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyRequestClientUsabilityMetrics() not implemented.");
  done->Run();
}

void ChatUsabilityClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fchat_2esteamclient_2eproto[5]);
  switch(method->index()) {
    case 0:
      NotifyRequestClientUsabilityMetrics(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CChatUsability_RequestClientUsabilityMetrics_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatUsabilityClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CChatUsability_RequestClientUsabilityMetrics_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ChatUsabilityClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChatUsabilityClient_Stub::ChatUsabilityClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChatUsabilityClient_Stub::ChatUsabilityClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ChatUsabilityClient_Stub::~ChatUsabilityClient_Stub() {
  if (owns_channel_) delete channel_;
}

void ChatUsabilityClient_Stub::NotifyRequestClientUsabilityMetrics(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CChatUsability_RequestClientUsabilityMetrics_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CChat_RequestFriendPersonaStates_Request* Arena::CreateMaybeMessage< ::CChat_RequestFriendPersonaStates_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChat_RequestFriendPersonaStates_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChat_RequestFriendPersonaStates_Response* Arena::CreateMaybeMessage< ::CChat_RequestFriendPersonaStates_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChat_RequestFriendPersonaStates_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRole* Arena::CreateMaybeMessage< ::CChatRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRole >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoleActions* Arena::CreateMaybeMessage< ::CChatRoleActions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoleActions >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatPartyBeacon* Arena::CreateMaybeMessage< ::CChatPartyBeacon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatPartyBeacon >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomGroupHeaderState* Arena::CreateMaybeMessage< ::CChatRoomGroupHeaderState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomGroupHeaderState >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomMember* Arena::CreateMaybeMessage< ::CChatRoomMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomState* Arena::CreateMaybeMessage< ::CChatRoomState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomState >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomGroupState* Arena::CreateMaybeMessage< ::CChatRoomGroupState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomGroupState >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserChatRoomState* Arena::CreateMaybeMessage< ::CUserChatRoomState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserChatRoomState >(arena);
}
template<> PROTOBUF_NOINLINE ::CUserChatRoomGroupState* Arena::CreateMaybeMessage< ::CUserChatRoomGroupState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUserChatRoomGroupState >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SaveChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_SaveChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SaveChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SaveChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_SaveChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SaveChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RenameChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RenameChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RenameChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RenameChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetChatRoomGroupTagline_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupTagline_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetChatRoomGroupTagline_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetChatRoomGroupTagline_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupTagline_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetChatRoomGroupTagline_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetChatRoomGroupAvatar_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupAvatar_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetChatRoomGroupAvatar_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetChatRoomGroupAvatar_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupAvatar_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetChatRoomGroupAvatar_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetChatRoomGroupWatchingBroadcast_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_JoinMiniGameForChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_JoinMiniGameForChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_JoinMiniGameForChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_JoinMiniGameForChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_JoinMiniGameForChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_JoinMiniGameForChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_EndMiniGameForChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_EndMiniGameForChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_EndMiniGameForChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_EndMiniGameForChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_EndMiniGameForChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_EndMiniGameForChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_MuteUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_MuteUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_MuteUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_MuteUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_MuteUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_MuteUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_KickUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_KickUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_KickUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_KickUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_KickUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_KickUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetUserBanState_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetUserBanState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetUserBanState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetUserBanState_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetUserBanState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetUserBanState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RevokeInvite_Request* Arena::CreateMaybeMessage< ::CChatRoom_RevokeInvite_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RevokeInvite_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RevokeInvite_Response* Arena::CreateMaybeMessage< ::CChatRoom_RevokeInvite_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RevokeInvite_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateRole_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateRole_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateRole_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateRole_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetRoles_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetRoles_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetRoles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetRoles_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetRoles_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetRoles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RenameRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_RenameRole_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RenameRole_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RenameRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_RenameRole_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RenameRole_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ReorderRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_ReorderRole_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ReorderRole_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ReorderRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_ReorderRole_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ReorderRole_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteRole_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRole_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteRole_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteRole_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRole_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteRole_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetRoleActions_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetRoleActions_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetRoleActions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetRoleActions_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetRoleActions_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetRoleActions_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ReplaceRoleActions_Request* Arena::CreateMaybeMessage< ::CChatRoom_ReplaceRoleActions_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ReplaceRoleActions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ReplaceRoleActions_Response* Arena::CreateMaybeMessage< ::CChatRoom_ReplaceRoleActions_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ReplaceRoleActions_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_AddRoleToUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_AddRoleToUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_AddRoleToUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_AddRoleToUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_AddRoleToUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_AddRoleToUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetRolesForUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetRolesForUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetRolesForUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetRolesForUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetRolesForUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetRolesForUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteRoleFromUser_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRoleFromUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteRoleFromUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteRoleFromUser_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteRoleFromUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteRoleFromUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_JoinChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_JoinChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_JoinChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_JoinChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_JoinChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_JoinChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_InviteFriendToChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_InviteFriendToChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_InviteFriendToChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_InviteFriendToChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_InviteFriendToChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_InviteFriendToChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_LeaveChatRoomGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_LeaveChatRoomGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_LeaveChatRoomGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_LeaveChatRoomGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_LeaveChatRoomGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_LeaveChatRoomGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoom_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateChatRoom_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateChatRoom_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateChatRoom_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatRoom_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteChatRoom_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatRoom_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteChatRoom_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RenameChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoom_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RenameChatRoom_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_RenameChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_RenameChatRoom_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_RenameChatRoom_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ReorderChatRoom_Request* Arena::CreateMaybeMessage< ::CChatRoom_ReorderChatRoom_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ReorderChatRoom_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ReorderChatRoom_Response* Arena::CreateMaybeMessage< ::CChatRoom_ReorderChatRoom_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ReorderChatRoom_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SendChatMessage_Request* Arena::CreateMaybeMessage< ::CChatRoom_SendChatMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SendChatMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SendChatMessage_Response* Arena::CreateMaybeMessage< ::CChatRoom_SendChatMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SendChatMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_JoinVoiceChat_Request* Arena::CreateMaybeMessage< ::CChatRoom_JoinVoiceChat_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_JoinVoiceChat_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_JoinVoiceChat_Response* Arena::CreateMaybeMessage< ::CChatRoom_JoinVoiceChat_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_JoinVoiceChat_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_LeaveVoiceChat_Request* Arena::CreateMaybeMessage< ::CChatRoom_LeaveVoiceChat_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_LeaveVoiceChat_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_LeaveVoiceChat_Response* Arena::CreateMaybeMessage< ::CChatRoom_LeaveVoiceChat_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_LeaveVoiceChat_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMessageHistory_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageHistory_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMessageHistory_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerMessage* Arena::CreateMaybeMessage< ::ServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMessageHistory_Response_ChatMessage* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageHistory_Response_ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMessageHistory_Response_ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMessageHistory_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageHistory_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMessageHistory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMyChatRoomGroups_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetMyChatRoomGroups_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMyChatRoomGroups_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetChatRoomGroupSummary_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupSummary_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetChatRoomGroupSummary_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomSummaryPair* Arena::CreateMaybeMessage< ::CChatRoomSummaryPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomSummaryPair >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMyChatRoomGroups_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetMyChatRoomGroups_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMyChatRoomGroups_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetChatRoomGroupState_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetChatRoomGroupState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetChatRoomGroupState_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetChatRoomGroupState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetChatRoomGroupSummary_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetChatRoomGroupSummary_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetChatRoomGroupSummary_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetAppChatRoomGroupForceActive_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetAppChatRoomGroupForceActive_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetAppChatRoomGroupForceActive_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetAppChatRoomGroupForceActive_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetAppChatRoomGroupForceActive_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetAppChatRoomGroupForceActive_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification* Arena::CreateMaybeMessage< ::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetAppChatRoomGroupStopForceActive_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_AckChatMessage_Notification* Arena::CreateMaybeMessage< ::CChatRoom_AckChatMessage_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_AckChatMessage_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateInviteLink_Request* Arena::CreateMaybeMessage< ::CChatRoom_CreateInviteLink_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateInviteLink_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_CreateInviteLink_Response* Arena::CreateMaybeMessage< ::CChatRoom_CreateInviteLink_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_CreateInviteLink_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteLinkInfo_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinkInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteLinkInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteLinkInfo_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinkInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteLinkInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteInfo_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteInfo_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteLinksForGroup_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinksForGroup_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteLinksForGroup_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteLinksForGroup_Response_LinkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteLinksForGroup_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteLinksForGroup_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteLinksForGroup_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetBanList_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetBanList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetBanList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetBanList_Response_BanInfo* Arena::CreateMaybeMessage< ::CChatRoom_GetBanList_Response_BanInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetBanList_Response_BanInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetBanList_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetBanList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetBanList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteList_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomGroupInvite* Arena::CreateMaybeMessage< ::CChatRoomGroupInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomGroupInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetInviteList_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetInviteList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetInviteList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteInviteLink_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteInviteLink_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteInviteLink_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteInviteLink_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteInviteLink_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteInviteLink_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetSessionActiveChatRoomGroups_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetSessionActiveChatRoomGroups_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetSessionActiveChatRoomGroups_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetSessionActiveChatRoomGroups_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetSessionActiveChatRoomGroups_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetSessionActiveChatRoomGroups_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Request* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetUserChatGroupPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SetUserChatGroupPreferences_Response* Arena::CreateMaybeMessage< ::CChatRoom_SetUserChatGroupPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SetUserChatGroupPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteChatMessages_Request_Message* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatMessages_Request_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteChatMessages_Request_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteChatMessages_Request* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatMessages_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteChatMessages_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_DeleteChatMessages_Response* Arena::CreateMaybeMessage< ::CChatRoom_DeleteChatMessages_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_DeleteChatMessages_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_UpdateMemberListView_Notification* Arena::CreateMaybeMessage< ::CChatRoom_UpdateMemberListView_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_UpdateMemberListView_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SearchMembers_Request* Arena::CreateMaybeMessage< ::CChatRoom_SearchMembers_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SearchMembers_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SearchMembers_Response_MemberMatch* Arena::CreateMaybeMessage< ::CChatRoom_SearchMembers_Response_MemberMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SearchMembers_Response_MemberMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_SearchMembers_Response* Arena::CreateMaybeMessage< ::CChatRoom_SearchMembers_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_SearchMembers_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_UpdateMessageReaction_Request* Arena::CreateMaybeMessage< ::CChatRoom_UpdateMessageReaction_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_UpdateMessageReaction_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_UpdateMessageReaction_Response* Arena::CreateMaybeMessage< ::CChatRoom_UpdateMessageReaction_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_UpdateMessageReaction_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMessageReactionReactors_Request* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageReactionReactors_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMessageReactionReactors_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_GetMessageReactionReactors_Response* Arena::CreateMaybeMessage< ::CChatRoom_GetMessageReactionReactors_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_GetMessageReactionReactors_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CClanChatRooms_GetClanChatRoomInfo_Request* Arena::CreateMaybeMessage< ::CClanChatRooms_GetClanChatRoomInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClanChatRooms_GetClanChatRoomInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CClanChatRooms_GetClanChatRoomInfo_Response* Arena::CreateMaybeMessage< ::CClanChatRooms_GetClanChatRoomInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClanChatRooms_GetClanChatRoomInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CClanChatRooms_SetClanChatRoomPrivate_Request* Arena::CreateMaybeMessage< ::CClanChatRooms_SetClanChatRoomPrivate_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClanChatRooms_SetClanChatRoomPrivate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CClanChatRooms_SetClanChatRoomPrivate_Response* Arena::CreateMaybeMessage< ::CClanChatRooms_SetClanChatRoomPrivate_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClanChatRooms_SetClanChatRoomPrivate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatMentions* Arena::CreateMaybeMessage< ::CChatMentions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatMentions >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_IncomingChatMessage_Notification* Arena::CreateMaybeMessage< ::CChatRoom_IncomingChatMessage_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_IncomingChatMessage_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ChatMessageModified_Notification_ChatMessage* Arena::CreateMaybeMessage< ::CChatRoom_ChatMessageModified_Notification_ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ChatMessageModified_Notification_ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ChatMessageModified_Notification* Arena::CreateMaybeMessage< ::CChatRoom_ChatMessageModified_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ChatMessageModified_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_MemberStateChange_Notification* Arena::CreateMaybeMessage< ::CChatRoom_MemberStateChange_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_MemberStateChange_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ChatRoomHeaderState_Notification* Arena::CreateMaybeMessage< ::CChatRoom_ChatRoomHeaderState_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ChatRoomHeaderState_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_ChatRoomGroupRoomsChange_Notification* Arena::CreateMaybeMessage< ::CChatRoom_ChatRoomGroupRoomsChange_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_ChatRoomGroupRoomsChange_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification* Arena::CreateMaybeMessage< ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification* Arena::CreateMaybeMessage< ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRoomClient_NotifyChatGroupUserStateChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRoomClient_NotifyChatRoomDisconnect_Notification* Arena::CreateMaybeMessage< ::ChatRoomClient_NotifyChatRoomDisconnect_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRoomClient_NotifyChatRoomDisconnect_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomMemberListView* Arena::CreateMaybeMessage< ::CChatRoomMemberListView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomMemberListView >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomMemberSummaryCounts* Arena::CreateMaybeMessage< ::CChatRoomMemberSummaryCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomMemberSummaryCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry* Arena::CreateMaybeMessage< ::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoomClient_MemberListViewUpdated_Notification* Arena::CreateMaybeMessage< ::CChatRoomClient_MemberListViewUpdated_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoomClient_MemberListViewUpdated_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatRoom_MessageReaction_Notification* Arena::CreateMaybeMessage< ::CChatRoom_MessageReaction_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatRoom_MessageReaction_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_Settings* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_UIState* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_UIState >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatUsability_ClientUsabilityMetrics_Notification_Metrics >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatUsability_ClientUsabilityMetrics_Notification* Arena::CreateMaybeMessage< ::CChatUsability_ClientUsabilityMetrics_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatUsability_ClientUsabilityMetrics_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CChatUsability_RequestClientUsabilityMetrics_Notification* Arena::CreateMaybeMessage< ::CChatUsability_RequestClientUsabilityMetrics_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChatUsability_RequestClientUsabilityMetrics_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
