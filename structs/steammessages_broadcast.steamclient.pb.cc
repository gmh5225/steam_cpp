// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_broadcast.steamclient.proto

#include "steammessages_broadcast.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_beta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameid_(uint64_t{0u})
  , client_instance_id_(uint64_t{0u})
  , permission_(0)
  , cellid_(0u)
  , rtmp_token_(uint64_t{0u})
  , thumbnail_upload_(false)
  , allow_webrtc_(false)
  , sysid_(0u){}
struct CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal {
  constexpr CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_BeginBroadcastSession_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Request_default_instance_;
constexpr CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thumbnail_upload_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_upload_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_id_(uint64_t{0u})
  , thumbnail_interval_seconds_(0u)
  , heartbeat_interval_seconds_(0u){}
struct CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal {
  constexpr CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_BeginBroadcastSession_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Response_default_instance_;
constexpr CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_id_(uint64_t{0u}){}
struct CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal {
  constexpr CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_EndBroadcastSession_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal _CBroadcast_EndBroadcastSession_Request_default_instance_;
constexpr CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal {
  constexpr CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_EndBroadcastSession_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_EndBroadcastSession_Response_default_instance_;
constexpr CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_id_(uint64_t{0u})
  , cellid_(0u)
  , delay_seconds_(0u)
  , rtmp_token_(uint64_t{0u})
  , as_rtmp_(false)
  , is_replay_(false)
  , upload_ip_address_(0u)
  , sysid_(0u){}
struct CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal {
  constexpr CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_StartBroadcastUpload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Request_default_instance_;
constexpr CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , upload_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , http_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_upload_id_(uint64_t{0u})
  , enable_replay_(false){}
struct CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal {
  constexpr CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_StartBroadcastUpload_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Response_default_instance_;
constexpr CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_upload_id_(uint64_t{0u})
  , upload_result_(0u){}
struct CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal {
  constexpr CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_NotifyBroadcastUploadStop_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
constexpr CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , existing_broadcast_id_(uint64_t{0u})
  , viewer_token_(uint64_t{0u})
  , client_cell_(0u)
  , watch_location_(0)

  , is_webrtc_(false){}
struct CBroadcast_WatchBroadcast_RequestDefaultTypeInternal {
  constexpr CBroadcast_WatchBroadcast_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WatchBroadcast_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WatchBroadcast_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WatchBroadcast_RequestDefaultTypeInternal _CBroadcast_WatchBroadcast_Request_default_instance_;
constexpr CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mpd_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hls_m3u8_master_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webrtc_offer_sdp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webrtc_turn_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cdn_auth_url_parameters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_id_(uint64_t{0u})
  , gameid_(uint64_t{0u})
  , num_viewers_(0u)
  , permission_(0)
  , viewer_token_(uint64_t{0u})
  , seconds_delay_(0)
  , heartbeat_interval_(0)
  , is_rtmp_(false)
  , is_webrtc_(false)
  , is_replay_(false)
  , duration_(0)
  , webrtc_session_id_(uint64_t{0u})
  , response_(1)
{}
struct CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WatchBroadcast_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal _CBroadcast_WatchBroadcast_Response_default_instance_;
constexpr CBroadcast_HeartbeatBroadcast_Notification::CBroadcast_HeartbeatBroadcast_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , broadcast_id_(uint64_t{0u})
  , viewer_token_(uint64_t{0u})
  , representation_(0u){}
struct CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal {
  constexpr CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_HeartbeatBroadcast_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal _CBroadcast_HeartbeatBroadcast_Notification_default_instance_;
constexpr CBroadcast_StopWatchingBroadcast_Notification::CBroadcast_StopWatchingBroadcast_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , broadcast_id_(uint64_t{0u})
  , viewer_token_(uint64_t{0u}){}
struct CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal {
  constexpr CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_StopWatchingBroadcast_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal _CBroadcast_StopWatchingBroadcast_Notification_default_instance_;
constexpr CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , broadcast_id_(uint64_t{0u}){}
struct CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Request_default_instance_;
constexpr CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameid_(uint64_t{0u})
  , num_viewers_(0u)
  , permission_(0)
  , seconds_delay_(0)
  , is_rtmp_(false)
  , is_publisher_(false)
  , is_uploading_(false)
  , is_replay_(false)
  , update_interval_(0)
  , duration_(0u)
  , is_capturing_vod_(false)
  , is_store_whitelisted_(false){}
struct CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Response_default_instance_;
constexpr CBroadcast_GetBroadcastThumbnail_Request::CBroadcast_GetBroadcastThumbnail_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , broadcast_id_(uint64_t{0u}){}
struct CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastThumbnail_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal _CBroadcast_GetBroadcastThumbnail_Request_default_instance_;
constexpr CBroadcast_GetBroadcastThumbnail_Response::CBroadcast_GetBroadcastThumbnail_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thumbnail_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_interval_(0)
  , num_viewers_(0)
  , duration_(0){}
struct CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastThumbnail_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastThumbnail_Response_default_instance_;
constexpr CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , approval_response_(false){}
struct CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal {
  constexpr CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_InviteToBroadcast_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal _CBroadcast_InviteToBroadcast_Request_default_instance_;
constexpr CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal {
  constexpr CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_InviteToBroadcast_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal _CBroadcast_InviteToBroadcast_Response_default_instance_;
constexpr CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_data_config_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameid_(uint64_t{0u})
  , permission_(0){}
struct CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal {
  constexpr CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_SendBroadcastStateToServer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
constexpr CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal {
  constexpr CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_SendBroadcastStateToServer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
constexpr CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_id_(uint64_t{0u}){}
struct CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal {
  constexpr CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_NotifyBroadcastSessionHeartbeat_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
constexpr CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , broadcast_id_(uint64_t{0u})
  , client_ip_(0u)
  , client_cell_(0u){}
struct CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastChatInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
constexpr CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flair_group_ids_()
  , view_url_template_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_id_(uint64_t{0u}){}
struct CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastChatInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
constexpr CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_id_(uint64_t{0u})
  , instance_id_(0u)
  , language_(0u){}
struct CBroadcast_PostChatMessage_RequestDefaultTypeInternal {
  constexpr CBroadcast_PostChatMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_PostChatMessage_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_PostChatMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_PostChatMessage_RequestDefaultTypeInternal _CBroadcast_PostChatMessage_Request_default_instance_;
constexpr CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , in_game_(false)
  , result_(0)
  , cooldown_time_seconds_(0){}
struct CBroadcast_PostChatMessage_ResponseDefaultTypeInternal {
  constexpr CBroadcast_PostChatMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_PostChatMessage_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_PostChatMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_PostChatMessage_ResponseDefaultTypeInternal _CBroadcast_PostChatMessage_Response_default_instance_;
constexpr CBroadcast_UpdateChatMessageFlair_Request::CBroadcast_UpdateChatMessageFlair_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flair_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_id_(uint64_t{0u}){}
struct CBroadcast_UpdateChatMessageFlair_RequestDefaultTypeInternal {
  constexpr CBroadcast_UpdateChatMessageFlair_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_UpdateChatMessageFlair_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_UpdateChatMessageFlair_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_UpdateChatMessageFlair_RequestDefaultTypeInternal _CBroadcast_UpdateChatMessageFlair_Request_default_instance_;
constexpr CBroadcast_UpdateChatMessageFlair_Response::CBroadcast_UpdateChatMessageFlair_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flair_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_id_(uint64_t{0u})
  , result_(0){}
struct CBroadcast_UpdateChatMessageFlair_ResponseDefaultTypeInternal {
  constexpr CBroadcast_UpdateChatMessageFlair_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_UpdateChatMessageFlair_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_UpdateChatMessageFlair_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_UpdateChatMessageFlair_ResponseDefaultTypeInternal _CBroadcast_UpdateChatMessageFlair_Response_default_instance_;
constexpr CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_id_(uint64_t{0u})
  , user_steamid_(uint64_t{0u})
  , muted_(false){}
struct CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal {
  constexpr CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_MuteBroadcastChatUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
constexpr CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal {
  constexpr CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_MuteBroadcastChatUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
constexpr CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_id_(uint64_t{0u})
  , user_steamid_(uint64_t{0u}){}
struct CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal {
  constexpr CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_RemoveUserChatText_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal _CBroadcast_RemoveUserChatText_Request_default_instance_;
constexpr CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal {
  constexpr CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_RemoveUserChatText_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal _CBroadcast_RemoveUserChatText_Response_default_instance_;
constexpr CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_steamid_()
  , chat_id_(uint64_t{0u}){}
struct CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastChatUserNames_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
constexpr CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(uint64_t{0u}){}
struct CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastChatUserNames_Response_PersonaName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
constexpr CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_names_(){}
struct CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastChatUserNames_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
constexpr CBroadcast_StartBuildClip_Request::CBroadcast_StartBuildClip_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clip_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , broadcast_session_id_(uint64_t{0u})
  , first_segment_(0)
  , num_segments_(0){}
struct CBroadcast_StartBuildClip_RequestDefaultTypeInternal {
  constexpr CBroadcast_StartBuildClip_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_StartBuildClip_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_StartBuildClip_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_StartBuildClip_RequestDefaultTypeInternal _CBroadcast_StartBuildClip_Request_default_instance_;
constexpr CBroadcast_StartBuildClip_Response::CBroadcast_StartBuildClip_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_clip_id_(uint64_t{0u}){}
struct CBroadcast_StartBuildClip_ResponseDefaultTypeInternal {
  constexpr CBroadcast_StartBuildClip_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_StartBuildClip_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_StartBuildClip_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_StartBuildClip_ResponseDefaultTypeInternal _CBroadcast_StartBuildClip_Response_default_instance_;
constexpr CBroadcast_GetBuildClipStatus_Request::CBroadcast_GetBuildClipStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_clip_id_(uint64_t{0u}){}
struct CBroadcast_GetBuildClipStatus_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetBuildClipStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBuildClipStatus_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetBuildClipStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBuildClipStatus_RequestDefaultTypeInternal _CBroadcast_GetBuildClipStatus_Request_default_instance_;
constexpr CBroadcast_GetBuildClipStatus_Response::CBroadcast_GetBuildClipStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_GetBuildClipStatus_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetBuildClipStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBuildClipStatus_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetBuildClipStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBuildClipStatus_ResponseDefaultTypeInternal _CBroadcast_GetBuildClipStatus_Response_default_instance_;
constexpr CBroadcast_SetClipDetails_Request::CBroadcast_SetClipDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_clip_id_(uint64_t{0u})
  , start_time_(0u)
  , end_time_(0u){}
struct CBroadcast_SetClipDetails_RequestDefaultTypeInternal {
  constexpr CBroadcast_SetClipDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SetClipDetails_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_SetClipDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SetClipDetails_RequestDefaultTypeInternal _CBroadcast_SetClipDetails_Request_default_instance_;
constexpr CBroadcast_SetClipDetails_Response::CBroadcast_SetClipDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_SetClipDetails_ResponseDefaultTypeInternal {
  constexpr CBroadcast_SetClipDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SetClipDetails_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_SetClipDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SetClipDetails_ResponseDefaultTypeInternal _CBroadcast_SetClipDetails_Response_default_instance_;
constexpr CBroadcast_GetClipDetails_Request::CBroadcast_GetClipDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_clip_id_(uint64_t{0u}){}
struct CBroadcast_GetClipDetails_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetClipDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetClipDetails_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetClipDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetClipDetails_RequestDefaultTypeInternal _CBroadcast_GetClipDetails_Request_default_instance_;
constexpr CBroadcast_GetClipDetails_Response::CBroadcast_GetClipDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_clip_id_(uint64_t{0u})
  , video_id_(uint64_t{0u})
  , channel_id_(uint64_t{0u})
  , app_id_(0u)
  , accountid_broadcaster_(0u)
  , accountid_clipmaker_(0u)
  , start_time_(0u)
  , length_milliseconds_(0u){}
struct CBroadcast_GetClipDetails_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetClipDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetClipDetails_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetClipDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetClipDetails_ResponseDefaultTypeInternal _CBroadcast_GetClipDetails_Response_default_instance_;
constexpr CBroadcast_SetRTMPInfo_Request::CBroadcast_SetRTMPInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wordban_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_permission_(0)
  , broadcast_delay_(0)
  , app_id_(0u)
  , required_app_id_(0u)
  , broadcast_chat_permission_(0)

  , broadcast_buffer_(0)
  , steamid_(uint64_t{0u})
  , update_token_(false)
  , enable_replay_(false)
  , is_partner_chat_only_(false)
  , chat_rate_limit_(0u){}
struct CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal {
  constexpr CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_SetRTMPInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal _CBroadcast_SetRTMPInfo_Request_default_instance_;
constexpr CBroadcast_SetRTMPInfo_Response::CBroadcast_SetRTMPInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal {
  constexpr CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_SetRTMPInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal _CBroadcast_SetRTMPInfo_Response_default_instance_;
constexpr CBroadcast_GetRTMPInfo_Request::CBroadcast_GetRTMPInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , ip_(0u){}
struct CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetRTMPInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal _CBroadcast_GetRTMPInfo_Request_default_instance_;
constexpr CBroadcast_GetRTMPInfo_Response::CBroadcast_GetRTMPInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rtmp_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rtmp_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wordban_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_permission_(0)
  , broadcast_delay_(0)
  , app_id_(0u)
  , required_app_id_(0u)
  , broadcast_chat_permission_(0)

  , broadcast_buffer_(0)
  , steamid_(uint64_t{0u})
  , chat_rate_limit_(0u)
  , enable_replay_(false)
  , is_partner_chat_only_(false){}
struct CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetRTMPInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal _CBroadcast_GetRTMPInfo_Response_default_instance_;
constexpr CBroadcast_WebRTCHaveTURNServer_Notification::CBroadcast_WebRTCHaveTURNServer_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : turn_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal {
  constexpr CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCHaveTURNServer_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal _CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_;
constexpr CBroadcast_WebRTCStartResult_Request::CBroadcast_WebRTCStartResult_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webrtc_session_id_(uint64_t{0u})
  , started_(false)
  , resolution_x_(0u)
  , resolution_y_(0u)
  , fps_(0u){}
struct CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal {
  constexpr CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCStartResult_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal _CBroadcast_WebRTCStartResult_Request_default_instance_;
constexpr CBroadcast_WebRTCStartResult_Response::CBroadcast_WebRTCStartResult_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCStartResult_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal _CBroadcast_WebRTCStartResult_Response_default_instance_;
constexpr CBroadcast_WebRTCStopped_Request::CBroadcast_WebRTCStopped_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : webrtc_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCStopped_RequestDefaultTypeInternal {
  constexpr CBroadcast_WebRTCStopped_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCStopped_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCStopped_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCStopped_RequestDefaultTypeInternal _CBroadcast_WebRTCStopped_Request_default_instance_;
constexpr CBroadcast_WebRTCStopped_Response::CBroadcast_WebRTCStopped_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCStopped_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal _CBroadcast_WebRTCStopped_Response_default_instance_;
constexpr CBroadcast_WebRTCSetAnswer_Request::CBroadcast_WebRTCSetAnswer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : answer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcaster_steamid_(uint64_t{0u})
  , webrtc_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal {
  constexpr CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCSetAnswer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Request_default_instance_;
constexpr CBroadcast_WebRTCSetAnswer_Response::CBroadcast_WebRTCSetAnswer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCSetAnswer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Response_default_instance_;
constexpr CBroadcast_WebRTCLookupTURNServer_Request::CBroadcast_WebRTCLookupTURNServer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cellid_(0u){}
struct CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal {
  constexpr CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCLookupTURNServer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal _CBroadcast_WebRTCLookupTURNServer_Request_default_instance_;
constexpr CBroadcast_WebRTCLookupTURNServer_Response::CBroadcast_WebRTCLookupTURNServer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : turn_server_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCLookupTURNServer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal _CBroadcast_WebRTCLookupTURNServer_Response_default_instance_;
constexpr CBroadcast_WebRTC_Candidate::CBroadcast_WebRTC_Candidate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sdp_mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , candidate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdp_mline_index_(0){}
struct CBroadcast_WebRTC_CandidateDefaultTypeInternal {
  constexpr CBroadcast_WebRTC_CandidateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTC_CandidateDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTC_Candidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTC_CandidateDefaultTypeInternal _CBroadcast_WebRTC_Candidate_default_instance_;
constexpr CBroadcast_WebRTCAddHostCandidate_Request::CBroadcast_WebRTCAddHostCandidate_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_(nullptr)
  , webrtc_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal {
  constexpr CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCAddHostCandidate_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal _CBroadcast_WebRTCAddHostCandidate_Request_default_instance_;
constexpr CBroadcast_WebRTCAddHostCandidate_Response::CBroadcast_WebRTCAddHostCandidate_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCAddHostCandidate_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal _CBroadcast_WebRTCAddHostCandidate_Response_default_instance_;
constexpr CBroadcast_WebRTCAddViewerCandidate_Request::CBroadcast_WebRTCAddViewerCandidate_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_(nullptr)
  , broadcaster_steamid_(uint64_t{0u})
  , webrtc_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal {
  constexpr CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCAddViewerCandidate_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_;
constexpr CBroadcast_WebRTCAddViewerCandidate_Response::CBroadcast_WebRTCAddViewerCandidate_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCAddViewerCandidate_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_;
constexpr CBroadcast_WebRTCGetHostCandidates_Request::CBroadcast_WebRTCGetHostCandidates_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcaster_steamid_(uint64_t{0u})
  , webrtc_session_id_(uint64_t{0u})
  , candidate_generation_(0u){}
struct CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal {
  constexpr CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCGetHostCandidates_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal _CBroadcast_WebRTCGetHostCandidates_Request_default_instance_;
constexpr CBroadcast_WebRTCGetHostCandidates_Response::CBroadcast_WebRTCGetHostCandidates_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidates_()
  , candidate_generation_(0u){}
struct CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal {
  constexpr CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCGetHostCandidates_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal _CBroadcast_WebRTCGetHostCandidates_Response_default_instance_;
constexpr CBroadcast_GetBroadcastUploadStats_Request::CBroadcast_GetBroadcastUploadStats_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_id_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , session_id_(uint64_t{0u})
  , start_time_(0u)
  , row_limit_(100u){}
struct CBroadcast_GetBroadcastUploadStats_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastUploadStats_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastUploadStats_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastUploadStats_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastUploadStats_RequestDefaultTypeInternal _CBroadcast_GetBroadcastUploadStats_Request_default_instance_;
constexpr CBroadcast_GetBroadcastUploadStats_Response_UploadStats::CBroadcast_GetBroadcastUploadStats_Response_UploadStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remote_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , upload_result_(0u)
  , time_stopped_(0u)
  , seconds_uploaded_(0u)
  , max_viewers_(0u)
  , resolution_x_(0u)
  , resolution_y_(0u)
  , total_bytes_(uint64_t{0u})
  , avg_bandwidth_(0u)
  , app_id_(0u)
  , total_seconds_watched_(uint64_t{0u})
  , total_unique_viewers_(0u)
  , time_started_(0u)
  , upload_id_(uint64_t{0u})
  , frames_per_second_(0u)
  , num_representations_(0u)
  , session_id_(uint64_t{0u})
  , is_replay_(false){}
struct CBroadcast_GetBroadcastUploadStats_Response_UploadStatsDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastUploadStats_Response_UploadStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastUploadStats_Response_UploadStatsDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastUploadStats_Response_UploadStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastUploadStats_Response_UploadStatsDefaultTypeInternal _CBroadcast_GetBroadcastUploadStats_Response_UploadStats_default_instance_;
constexpr CBroadcast_GetBroadcastUploadStats_Response::CBroadcast_GetBroadcastUploadStats_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_stats_(){}
struct CBroadcast_GetBroadcastUploadStats_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastUploadStats_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastUploadStats_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastUploadStats_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastUploadStats_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastUploadStats_Response_default_instance_;
constexpr CBroadcast_GetBroadcastViewerStats_Request::CBroadcast_GetBroadcastViewerStats_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_id_(uint64_t{0u})
  , steamid_(uint64_t{0u}){}
struct CBroadcast_GetBroadcastViewerStats_RequestDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastViewerStats_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastViewerStats_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastViewerStats_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastViewerStats_RequestDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Request_default_instance_;
constexpr CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0u)
  , num_viewers_(0u){}
struct CBroadcast_GetBroadcastViewerStats_Response_ViewerStatsDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastViewerStats_Response_ViewerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastViewerStats_Response_ViewerStatsDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastViewerStats_Response_ViewerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastViewerStats_Response_ViewerStatsDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Response_ViewerStats_default_instance_;
constexpr CBroadcast_GetBroadcastViewerStats_Response_CountryStats::CBroadcast_GetBroadcastViewerStats_Response_CountryStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_viewers_(0u){}
struct CBroadcast_GetBroadcastViewerStats_Response_CountryStatsDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastViewerStats_Response_CountryStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastViewerStats_Response_CountryStatsDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastViewerStats_Response_CountryStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastViewerStats_Response_CountryStatsDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Response_CountryStats_default_instance_;
constexpr CBroadcast_GetBroadcastViewerStats_Response::CBroadcast_GetBroadcastViewerStats_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : viewer_stats_()
  , country_stats_(){}
struct CBroadcast_GetBroadcastViewerStats_ResponseDefaultTypeInternal {
  constexpr CBroadcast_GetBroadcastViewerStats_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_GetBroadcastViewerStats_ResponseDefaultTypeInternal() {}
  union {
    CBroadcast_GetBroadcastViewerStats_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_GetBroadcastViewerStats_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Response_default_instance_;
constexpr CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , state_(1)
{}
struct CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal {
  constexpr CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_BroadcastViewerState_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal _CBroadcast_BroadcastViewerState_Notification_default_instance_;
constexpr CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_id_(uint64_t{0u}){}
struct CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal {
  constexpr CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_WaitingBroadcastViewer_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
constexpr CBroadcast_BroadcastUploadStarted_Notification::CBroadcast_BroadcastUploadStarted_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upload_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , upload_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , http_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_id_(uint64_t{0u})
  , broadcast_upload_id_(uint64_t{0u})
  , heartbeat_interval_seconds_(0u)
  , is_rtmp_(false){}
struct CBroadcast_BroadcastUploadStarted_NotificationDefaultTypeInternal {
  constexpr CBroadcast_BroadcastUploadStarted_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_BroadcastUploadStarted_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_BroadcastUploadStarted_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_BroadcastUploadStarted_NotificationDefaultTypeInternal _CBroadcast_BroadcastUploadStarted_Notification_default_instance_;
constexpr CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_id_(uint64_t{0u})
  , broadcast_relay_id_(uint64_t{0u})
  , upload_result_(0u)
  , too_many_poor_uploads_(false){}
struct CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal {
  constexpr CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_StopBroadcastUpload_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal _CBroadcast_StopBroadcastUpload_Notification_default_instance_;
constexpr CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_id_(uint64_t{0u}){}
struct CBroadcast_SessionClosed_NotificationDefaultTypeInternal {
  constexpr CBroadcast_SessionClosed_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SessionClosed_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_SessionClosed_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SessionClosed_NotificationDefaultTypeInternal _CBroadcast_SessionClosed_Notification_default_instance_;
constexpr CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcaster_steamid_(uint64_t{0u}){}
struct CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal {
  constexpr CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_ViewerBroadcastInvite_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
constexpr CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_id_(uint64_t{0u})
  , num_viewers_(0){}
struct CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal {
  constexpr CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_BroadcastStatus_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal _CBroadcast_BroadcastStatus_Notification_default_instance_;
constexpr CBroadcast_BroadcastChannelLive_Notification::CBroadcast_BroadcastChannelLive_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_channel_id_(uint64_t{0u}){}
struct CBroadcast_BroadcastChannelLive_NotificationDefaultTypeInternal {
  constexpr CBroadcast_BroadcastChannelLive_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_BroadcastChannelLive_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_BroadcastChannelLive_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_BroadcastChannelLive_NotificationDefaultTypeInternal _CBroadcast_BroadcastChannelLive_Notification_default_instance_;
constexpr CBroadcast_SendThumbnailToRelay_Notification::CBroadcast_SendThumbnailToRelay_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : thumbnail_upload_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , thumbnail_broadcast_session_id_(uint64_t{0u})
  , thumbnail_width_(0u)
  , thumbnail_height_(0u){}
struct CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal {
  constexpr CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_SendThumbnailToRelay_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal _CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
constexpr CBroadcast_WebRTCNeedTURNServer_Notification::CBroadcast_WebRTCNeedTURNServer_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal {
  constexpr CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCNeedTURNServer_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal _CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_;
constexpr CBroadcast_WebRTCStart_Notification::CBroadcast_WebRTCStart_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_session_id_(uint64_t{0u})
  , webrtc_session_id_(uint64_t{0u})
  , viewer_steamid_(uint64_t{0u})
  , viewer_token_(uint64_t{0u}){}
struct CBroadcast_WebRTCStart_NotificationDefaultTypeInternal {
  constexpr CBroadcast_WebRTCStart_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCStart_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCStart_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCStart_NotificationDefaultTypeInternal _CBroadcast_WebRTCStart_Notification_default_instance_;
constexpr CBroadcast_WebRTCSetAnswer_Notification::CBroadcast_WebRTCSetAnswer_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : answer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , broadcast_session_id_(uint64_t{0u})
  , webrtc_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal {
  constexpr CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCSetAnswer_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Notification_default_instance_;
constexpr CBroadcast_WebRTCAddViewerCandidate_Notification::CBroadcast_WebRTCAddViewerCandidate_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_(nullptr)
  , broadcast_session_id_(uint64_t{0u})
  , webrtc_session_id_(uint64_t{0u}){}
struct CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal {
  constexpr CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal() {}
  union {
    CBroadcast_WebRTCAddViewerCandidate_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[81];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, gameid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, cellid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, rtmp_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, thumbnail_upload_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, client_beta_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, sysid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Request, allow_webrtc_),
  4,
  2,
  3,
  0,
  5,
  6,
  7,
  1,
  9,
  8,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, thumbnail_upload_address_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, thumbnail_upload_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, thumbnail_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BeginBroadcastSession_Response, heartbeat_interval_seconds_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Request, broadcast_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_EndBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, cellid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, as_rtmp_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, delay_seconds_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, rtmp_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, upload_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, is_replay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Request, sysid_),
  0,
  1,
  4,
  2,
  3,
  6,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, upload_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, upload_address_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, broadcast_upload_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, enable_replay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBroadcastUpload_Response, http_address_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, broadcast_upload_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_NotifyBroadcastUploadStop_Notification, upload_result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, existing_broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, viewer_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, client_cell_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, watch_location_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Request, is_webrtc_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, response_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, mpd_url_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, gameid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, title_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, num_viewers_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, is_rtmp_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, seconds_delay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, viewer_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, hls_m3u8_master_url_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, heartbeat_interval_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, is_webrtc_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, webrtc_offer_sdp_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, webrtc_turn_server_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, is_replay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, duration_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WatchBroadcast_Response, cdn_auth_url_parameters_),
  19,
  0,
  7,
  8,
  1,
  9,
  10,
  14,
  12,
  11,
  2,
  13,
  3,
  15,
  18,
  4,
  5,
  16,
  17,
  6,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, viewer_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_HeartbeatBroadcast_Notification, representation_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopWatchingBroadcast_Notification, viewer_token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Request, broadcast_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, gameid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, title_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, num_viewers_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_rtmp_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, seconds_delay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_publisher_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, update_interval_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_uploading_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, duration_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_replay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_capturing_vod_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastStatus_Response, is_store_whitelisted_),
  2,
  0,
  3,
  4,
  6,
  5,
  7,
  1,
  10,
  8,
  11,
  9,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Request, broadcast_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, thumbnail_url_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, update_interval_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, num_viewers_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastThumbnail_Response, duration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Request, approval_response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_InviteToBroadcast_Response, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, gameid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Request, game_data_config_),
  3,
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendBroadcastStateToServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, broadcast_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, client_ip_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Request, client_cell_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, view_url_template_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatInfo_Response, flair_group_ids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, message_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, instance_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Request, country_code_),
  2,
  0,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, in_game_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, result_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostChatMessage_Response, cooldown_time_seconds_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Request, flair_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Response, result_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Response, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_UpdateChatMessageFlair_Response, flair_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, user_steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Request, muted_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_MuteBroadcastChatUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Request, user_steamid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_RemoveUserChatText_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Request, user_steamid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, persona_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastChatUserNames_Response, persona_names_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Request, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Request, first_segment_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Request, num_segments_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Request, clip_description_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StartBuildClip_Response, broadcast_clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBuildClipStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBuildClipStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBuildClipStatus_Request, broadcast_clip_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBuildClipStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetClipDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetClipDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetClipDetails_Request, broadcast_clip_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetClipDetails_Request, start_time_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetClipDetails_Request, end_time_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetClipDetails_Request, video_description_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetClipDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Request, broadcast_clip_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, broadcast_clip_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, video_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, app_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, accountid_broadcaster_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, accountid_clipmaker_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, video_description_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, start_time_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, length_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetClipDetails_Response, thumbnail_path_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, broadcast_permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, update_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, broadcast_delay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, required_app_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, broadcast_chat_permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, broadcast_buffer_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, chat_rate_limit_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, enable_replay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, is_partner_chat_only_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Request, wordban_list_),
  1,
  8,
  2,
  3,
  4,
  5,
  6,
  7,
  11,
  9,
  10,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SetRTMPInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Request, ip_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Request, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, broadcast_permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, rtmp_host_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, rtmp_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, broadcast_delay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, app_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, required_app_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, broadcast_chat_permission_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, broadcast_buffer_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, chat_rate_limit_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, enable_replay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, is_partner_chat_only_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetRTMPInfo_Response, wordban_list_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  2,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCHaveTURNServer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCHaveTURNServer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCHaveTURNServer_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCHaveTURNServer_Notification, turn_server_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, started_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, offer_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, resolution_x_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, resolution_y_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Request, fps_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStartResult_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStopped_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStopped_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStopped_Request, webrtc_session_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStopped_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Request, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Request, answer_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCLookupTURNServer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCLookupTURNServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCLookupTURNServer_Request, cellid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCLookupTURNServer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCLookupTURNServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCLookupTURNServer_Response, turn_server_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTC_Candidate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTC_Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTC_Candidate, sdp_mid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTC_Candidate, sdp_mline_index_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTC_Candidate, candidate_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddHostCandidate_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddHostCandidate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddHostCandidate_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddHostCandidate_Request, candidate_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddHostCandidate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Request, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Request, candidate_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Request, broadcaster_steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Request, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Request, candidate_generation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Response, candidate_generation_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCGetHostCandidates_Response, candidates_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Request, row_limit_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Request, start_time_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Request, upload_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Request, session_id_),
  4,
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, upload_result_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, time_stopped_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, seconds_uploaded_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, max_viewers_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, resolution_x_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, resolution_y_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, avg_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, total_bytes_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, app_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, total_unique_viewers_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, total_seconds_watched_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, time_started_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, upload_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, local_address_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, remote_address_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, frames_per_second_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, num_representations_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, app_name_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, is_replay_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats, session_id_),
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  13,
  12,
  14,
  15,
  0,
  1,
  16,
  17,
  2,
  19,
  18,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastUploadStats_Response, upload_stats_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Request, upload_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Request, steamid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats, time_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats, num_viewers_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_CountryStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_CountryStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_CountryStats, country_code_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response_CountryStats, num_viewers_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response, viewer_stats_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_GetBroadcastViewerStats_Response, country_stats_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastViewerState_Notification, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WaitingBroadcastViewer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WaitingBroadcastViewer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WaitingBroadcastViewer_Notification, broadcast_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, upload_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, upload_address_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, http_address_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, broadcast_upload_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, heartbeat_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastUploadStarted_Notification, is_rtmp_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, broadcast_relay_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, upload_result_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_StopBroadcastUpload_Notification, too_many_poor_uploads_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SessionClosed_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SessionClosed_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SessionClosed_Notification, broadcast_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_ViewerBroadcastInvite_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_ViewerBroadcastInvite_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_ViewerBroadcastInvite_Notification, broadcaster_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastStatus_Notification, num_viewers_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastChannelLive_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastChannelLive_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastChannelLive_Notification, broadcast_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastChannelLive_Notification, broadcast_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_BroadcastChannelLive_Notification, broadcast_channel_avatar_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_upload_token_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_data_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_width_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_SendThumbnailToRelay_Notification, thumbnail_height_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCNeedTURNServer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCNeedTURNServer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCNeedTURNServer_Notification, broadcast_session_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStart_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStart_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStart_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStart_Notification, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStart_Notification, viewer_steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCStart_Notification, viewer_token_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Notification, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCSetAnswer_Notification, answer_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Notification, broadcast_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Notification, webrtc_session_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_WebRTCAddViewerCandidate_Notification, candidate_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::CBroadcast_BeginBroadcastSession_Request)},
  { 26, 37, -1, sizeof(::CBroadcast_BeginBroadcastSession_Response)},
  { 42, 49, -1, sizeof(::CBroadcast_EndBroadcastSession_Request)},
  { 50, -1, -1, sizeof(::CBroadcast_EndBroadcastSession_Response)},
  { 56, 70, -1, sizeof(::CBroadcast_StartBroadcastUpload_Request)},
  { 78, 89, -1, sizeof(::CBroadcast_StartBroadcastUpload_Response)},
  { 94, 102, -1, sizeof(::CBroadcast_NotifyBroadcastUploadStop_Notification)},
  { 104, 116, -1, sizeof(::CBroadcast_WatchBroadcast_Request)},
  { 122, 148, -1, sizeof(::CBroadcast_WatchBroadcast_Response)},
  { 168, 178, -1, sizeof(::CBroadcast_HeartbeatBroadcast_Notification)},
  { 182, 191, -1, sizeof(::CBroadcast_StopWatchingBroadcast_Notification)},
  { 194, 202, -1, sizeof(::CBroadcast_GetBroadcastStatus_Request)},
  { 204, 224, -1, sizeof(::CBroadcast_GetBroadcastStatus_Response)},
  { 238, 246, -1, sizeof(::CBroadcast_GetBroadcastThumbnail_Request)},
  { 248, 258, -1, sizeof(::CBroadcast_GetBroadcastThumbnail_Response)},
  { 262, 270, -1, sizeof(::CBroadcast_InviteToBroadcast_Request)},
  { 272, 279, -1, sizeof(::CBroadcast_InviteToBroadcast_Response)},
  { 280, 290, -1, sizeof(::CBroadcast_SendBroadcastStateToServer_Request)},
  { 294, -1, -1, sizeof(::CBroadcast_SendBroadcastStateToServer_Response)},
  { 300, 307, -1, sizeof(::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)},
  { 308, 318, -1, sizeof(::CBroadcast_GetBroadcastChatInfo_Request)},
  { 322, 331, -1, sizeof(::CBroadcast_GetBroadcastChatInfo_Response)},
  { 334, 345, -1, sizeof(::CBroadcast_PostChatMessage_Request)},
  { 350, 360, -1, sizeof(::CBroadcast_PostChatMessage_Response)},
  { 364, 372, -1, sizeof(::CBroadcast_UpdateChatMessageFlair_Request)},
  { 374, 383, -1, sizeof(::CBroadcast_UpdateChatMessageFlair_Response)},
  { 386, 395, -1, sizeof(::CBroadcast_MuteBroadcastChatUser_Request)},
  { 398, -1, -1, sizeof(::CBroadcast_MuteBroadcastChatUser_Response)},
  { 404, 412, -1, sizeof(::CBroadcast_RemoveUserChatText_Request)},
  { 414, -1, -1, sizeof(::CBroadcast_RemoveUserChatText_Response)},
  { 420, 428, -1, sizeof(::CBroadcast_GetBroadcastChatUserNames_Request)},
  { 430, 438, -1, sizeof(::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName)},
  { 440, -1, -1, sizeof(::CBroadcast_GetBroadcastChatUserNames_Response)},
  { 447, 458, -1, sizeof(::CBroadcast_StartBuildClip_Request)},
  { 463, 470, -1, sizeof(::CBroadcast_StartBuildClip_Response)},
  { 471, 478, -1, sizeof(::CBroadcast_GetBuildClipStatus_Request)},
  { 479, -1, -1, sizeof(::CBroadcast_GetBuildClipStatus_Response)},
  { 485, 495, -1, sizeof(::CBroadcast_SetClipDetails_Request)},
  { 499, -1, -1, sizeof(::CBroadcast_SetClipDetails_Response)},
  { 505, 512, -1, sizeof(::CBroadcast_GetClipDetails_Request)},
  { 513, 529, -1, sizeof(::CBroadcast_GetClipDetails_Response)},
  { 539, 557, -1, sizeof(::CBroadcast_SetRTMPInfo_Request)},
  { 569, -1, -1, sizeof(::CBroadcast_SetRTMPInfo_Response)},
  { 575, 583, -1, sizeof(::CBroadcast_GetRTMPInfo_Request)},
  { 585, 604, -1, sizeof(::CBroadcast_GetRTMPInfo_Response)},
  { 617, 625, -1, sizeof(::CBroadcast_WebRTCHaveTURNServer_Notification)},
  { 627, 639, -1, sizeof(::CBroadcast_WebRTCStartResult_Request)},
  { 645, -1, -1, sizeof(::CBroadcast_WebRTCStartResult_Response)},
  { 651, 658, -1, sizeof(::CBroadcast_WebRTCStopped_Request)},
  { 659, -1, -1, sizeof(::CBroadcast_WebRTCStopped_Response)},
  { 665, 674, -1, sizeof(::CBroadcast_WebRTCSetAnswer_Request)},
  { 677, -1, -1, sizeof(::CBroadcast_WebRTCSetAnswer_Response)},
  { 683, 690, -1, sizeof(::CBroadcast_WebRTCLookupTURNServer_Request)},
  { 691, 698, -1, sizeof(::CBroadcast_WebRTCLookupTURNServer_Response)},
  { 699, 708, -1, sizeof(::CBroadcast_WebRTC_Candidate)},
  { 711, 719, -1, sizeof(::CBroadcast_WebRTCAddHostCandidate_Request)},
  { 721, -1, -1, sizeof(::CBroadcast_WebRTCAddHostCandidate_Response)},
  { 727, 736, -1, sizeof(::CBroadcast_WebRTCAddViewerCandidate_Request)},
  { 739, -1, -1, sizeof(::CBroadcast_WebRTCAddViewerCandidate_Response)},
  { 745, 754, -1, sizeof(::CBroadcast_WebRTCGetHostCandidates_Request)},
  { 757, 765, -1, sizeof(::CBroadcast_WebRTCGetHostCandidates_Response)},
  { 767, 778, -1, sizeof(::CBroadcast_GetBroadcastUploadStats_Request)},
  { 783, 809, -1, sizeof(::CBroadcast_GetBroadcastUploadStats_Response_UploadStats)},
  { 829, -1, -1, sizeof(::CBroadcast_GetBroadcastUploadStats_Response)},
  { 836, 844, -1, sizeof(::CBroadcast_GetBroadcastViewerStats_Request)},
  { 846, 854, -1, sizeof(::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats)},
  { 856, 864, -1, sizeof(::CBroadcast_GetBroadcastViewerStats_Response_CountryStats)},
  { 866, -1, -1, sizeof(::CBroadcast_GetBroadcastViewerStats_Response)},
  { 874, 882, -1, sizeof(::CBroadcast_BroadcastViewerState_Notification)},
  { 884, 891, -1, sizeof(::CBroadcast_WaitingBroadcastViewer_Notification)},
  { 892, 905, -1, sizeof(::CBroadcast_BroadcastUploadStarted_Notification)},
  { 912, 922, -1, sizeof(::CBroadcast_StopBroadcastUpload_Notification)},
  { 926, 933, -1, sizeof(::CBroadcast_SessionClosed_Notification)},
  { 934, 941, -1, sizeof(::CBroadcast_ViewerBroadcastInvite_Notification)},
  { 942, 950, -1, sizeof(::CBroadcast_BroadcastStatus_Notification)},
  { 952, 961, -1, sizeof(::CBroadcast_BroadcastChannelLive_Notification)},
  { 964, 975, -1, sizeof(::CBroadcast_SendThumbnailToRelay_Notification)},
  { 980, 987, -1, sizeof(::CBroadcast_WebRTCNeedTURNServer_Notification)},
  { 988, 998, -1, sizeof(::CBroadcast_WebRTCStart_Notification)},
  { 1002, 1011, -1, sizeof(::CBroadcast_WebRTCSetAnswer_Notification)},
  { 1014, 1023, -1, sizeof(::CBroadcast_WebRTCAddViewerCandidate_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_BeginBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_BeginBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_EndBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_EndBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_StartBroadcastUpload_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_StartBroadcastUpload_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WatchBroadcast_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WatchBroadcast_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_HeartbeatBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_StopWatchingBroadcast_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastThumbnail_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastThumbnail_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_InviteToBroadcast_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_InviteToBroadcast_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SendBroadcastStateToServer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SendBroadcastStateToServer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastChatInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastChatInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_PostChatMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_PostChatMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_UpdateChatMessageFlair_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_UpdateChatMessageFlair_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_MuteBroadcastChatUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_MuteBroadcastChatUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_RemoveUserChatText_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_RemoveUserChatText_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_StartBuildClip_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_StartBuildClip_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBuildClipStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBuildClipStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SetClipDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SetClipDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetClipDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetClipDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SetRTMPInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SetRTMPInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetRTMPInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetRTMPInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCStartResult_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCStartResult_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCStopped_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCStopped_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCSetAnswer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCSetAnswer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCLookupTURNServer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCLookupTURNServer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTC_Candidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCAddHostCandidate_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCAddHostCandidate_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCGetHostCandidates_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCGetHostCandidates_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastUploadStats_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastUploadStats_Response_UploadStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastUploadStats_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastViewerStats_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastViewerStats_Response_ViewerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastViewerStats_Response_CountryStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_GetBroadcastViewerStats_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_BroadcastViewerState_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_BroadcastUploadStarted_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_StopBroadcastUpload_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SessionClosed_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_BroadcastStatus_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_BroadcastChannelLive_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_SendThumbnailToRelay_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCStart_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCSetAnswer_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fbroadcast_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)steammessages_broadcast.steamclient.pr"
  "oto\032\030steammessages_base.proto\032,steammess"
  "ages_unified_base.steamclient.proto\"\361\001\n("
  "CBroadcast_BeginBroadcastSession_Request"
  "\022\022\n\npermission\030\001 \001(\005\022\016\n\006gameid\030\002 \001(\004\022\032\n\022"
  "client_instance_id\030\003 \001(\004\022\r\n\005title\030\004 \001(\t\022"
  "\016\n\006cellid\030\005 \001(\r\022\022\n\nrtmp_token\030\006 \001(\004\022\030\n\020t"
  "humbnail_upload\030\007 \001(\010\022\023\n\013client_beta\030\010 \001"
  "(\t\022\r\n\005sysid\030\t \001(\r\022\024\n\014allow_webrtc\030\n \001(\010\""
  "\234\003\n)CBroadcast_BeginBroadcastSession_Res"
  "ponse\022\024\n\014broadcast_id\030\001 \001(\006\022P\n\030thumbnail"
  "_upload_address\030\002 \001(\tB.\202\265\030*Http address "
  "to upload the thumbnail data.\022e\n\026thumbna"
  "il_upload_token\030\003 \001(\tBE\202\265\030Atoken to auth"
  "orize as broadcaster to upload content t"
  "o the relay.\022K\n\032thumbnail_interval_secon"
  "ds\030\004 \001(\rB\'\202\265\030#how many seconds between t"
  "humbnails\022S\n\032heartbeat_interval_seconds\030"
  "\005 \001(\rB/\202\265\030+how many seconds between sess"
  "ion heartbeats\">\n&CBroadcast_EndBroadcas"
  "tSession_Request\022\024\n\014broadcast_id\030\001 \001(\006\")"
  "\n\'CBroadcast_EndBroadcastSession_Respons"
  "e\"\210\002\n\'CBroadcast_StartBroadcastUpload_Re"
  "quest\022\024\n\014broadcast_id\030\001 \001(\006\022\016\n\006cellid\030\002 "
  "\001(\r\022\017\n\007as_rtmp\030\003 \001(\010\022\025\n\rdelay_seconds\030\004 "
  "\001(\r\022R\n\nrtmp_token\030\005 \001(\004:\0010B;\202\265\0307Only set"
  " during RTMP uploads; secret key from th"
  "e user.\022\031\n\021upload_ip_address\030\006 \001(\r\022\021\n\tis"
  "_replay\030\007 \001(\010\022\r\n\005sysid\030\010 \001(\r\"\242\001\n(CBroadc"
  "ast_StartBroadcastUpload_Response\022\024\n\014upl"
  "oad_token\030\001 \001(\t\022\026\n\016upload_address\030\002 \001(\t\022"
  "\033\n\023broadcast_upload_id\030\003 \001(\006\022\025\n\renable_r"
  "eplay\030\006 \001(\010\022\024\n\014http_address\030\007 \001(\t\"g\n1CBr"
  "oadcast_NotifyBroadcastUploadStop_Notifi"
  "cation\022\033\n\023broadcast_upload_id\030\001 \001(\006\022\025\n\ru"
  "pload_result\030\002 \001(\r\"\211\003\n!CBroadcast_WatchB"
  "roadcast_Request\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024b"
  "roadcaster steamID.\022X\n\025existing_broadcas"
  "t_id\030\002 \001(\006B9\202\265\0305broadcast session ID (op"
  "tional, rejoin if specified).\022b\n\014viewer_"
  "token\030\003 \001(\006BL\202\265\030Hviewer token received f"
  "rom last WatchRequest call, from browser"
  " storage.\022\023\n\013client_cell\030\005 \001(\r\022S\n\016watch_"
  "location\030\006 \001(\0162\030.EBroadcastWatchLocation"
  ":!k_EBroadcastWatchLocation_Invalid\022\021\n\ti"
  "s_webrtc\030\007 \001(\010\"\372\007\n\"CBroadcast_WatchBroad"
  "cast_Response\022[\n\010response\030\001 \001(\01622.CBroad"
  "cast_WatchBroadcast_Response.EWatchRespo"
  "nse:\025k_EWatchResponseReady\022\017\n\007mpd_url\030\002 "
  "\001(\t\022\024\n\014broadcast_id\030\003 \001(\006\022\016\n\006gameid\030\004 \001("
  "\004\022\r\n\005title\030\005 \001(\t\022\023\n\013num_viewers\030\006 \001(\r\022\022\n"
  "\npermission\030\007 \001(\005\022\017\n\007is_rtmp\030\010 \001(\010\022\025\n\rse"
  "conds_delay\030\t \001(\005\022\024\n\014viewer_token\030\n \001(\006\022"
  "\033\n\023hls_m3u8_master_url\030\013 \001(\t\022\032\n\022heartbea"
  "t_interval\030\014 \001(\005\022\025\n\rthumbnail_url\030\r \001(\t\022"
  "\021\n\tis_webrtc\030\016 \001(\010\022\031\n\021webrtc_session_id\030"
  "\017 \001(\006\022\030\n\020webrtc_offer_sdp\030\020 \001(\t\022\032\n\022webrt"
  "c_turn_server\030\021 \001(\t\022\021\n\tis_replay\030\022 \001(\010\022\020"
  "\n\010duration\030\023 \001(\005\022\037\n\027cdn_auth_url_paramet"
  "ers\030\024 \001(\t\"\317\003\n\016EWatchResponse\022\031\n\025k_EWatch"
  "ResponseReady\020\001\022 \n\034k_EWatchResponseNotAv"
  "ailable\020\002\022&\n\"k_EWatchResponseWaitingForA"
  "pproval\020\003\022#\n\037k_EWatchResponseWaitingForS"
  "tart\020\004\022\"\n\036k_EWatchResponseInvalidSession"
  "\020\005\022%\n!k_EWatchResponseTooManyBroadcasts\020"
  "\006\022\'\n#k_EWatchResponseWaitingForReconnect"
  "\020\007\022&\n\"k_EWatchResponseSystemNotSupported"
  "\020\010\022\"\n\036k_EWatchResponseUserRestricted\020\t\022#"
  "\n\037k_EWatchResponseClientOutOfDate\020\n\022%\n!k"
  "_EWatchResponsePoorUploadQuality\020\013\022\'\n#k_"
  "EWatchResponseMissingSubscription\020\014\"\256\002\n*"
  "CBroadcast_HeartbeatBroadcast_Notificati"
  "on\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024broadcaster ste"
  "amID.\022/\n\014broadcast_id\030\002 \001(\006B\031\202\265\030\025broadca"
  "st session ID.\022b\n\014viewer_token\030\003 \001(\006BL\202\265"
  "\030Hviewer token received from last WatchR"
  "equest call, from browser storage.\022@\n\016re"
  "presentation\030\004 \001(\rB(\202\265\030$video stream rep"
  "resentation watching\"\357\001\n-CBroadcast_Stop"
  "WatchingBroadcast_Notification\022)\n\007steami"
  "d\030\001 \001(\006B\030\202\265\030\024broadcaster steamID.\022/\n\014bro"
  "adcast_id\030\002 \001(\006B\031\202\265\030\025broadcast session I"
  "D.\022b\n\014viewer_token\030\003 \001(\006BL\202\265\030Hviewer tok"
  "en received from last WatchRequest call,"
  " from browser storage.\"\260\001\n%CBroadcast_Ge"
  "tBroadcastStatus_Request\022)\n\007steamid\030\001 \001("
  "\006B\030\202\265\030\024broadcaster steamID.\022\\\n\014broadcast"
  "_id\030\002 \001(\006BF\202\265\030Bbroadcast session ID to p"
  "roof that user is allowed to see details"
  ".\"\321\002\n&CBroadcast_GetBroadcastStatus_Resp"
  "onse\022\016\n\006gameid\030\001 \001(\004\022\r\n\005title\030\002 \001(\t\022\023\n\013n"
  "um_viewers\030\003 \001(\r\022\022\n\npermission\030\004 \001(\005\022\017\n\007"
  "is_rtmp\030\005 \001(\010\022\025\n\rseconds_delay\030\006 \001(\005\022\024\n\014"
  "is_publisher\030\007 \001(\010\022\025\n\rthumbnail_url\030\010 \001("
  "\t\022\027\n\017update_interval\030\t \001(\005\022\024\n\014is_uploadi"
  "ng\030\n \001(\010\022\020\n\010duration\030\013 \001(\r\022\021\n\tis_replay\030"
  "\014 \001(\010\022\030\n\020is_capturing_vod\030\r \001(\010\022\034\n\024is_st"
  "ore_whitelisted\030\016 \001(\010\"Q\n(CBroadcast_GetB"
  "roadcastThumbnail_Request\022\017\n\007steamid\030\001 \001"
  "(\006\022\024\n\014broadcast_id\030\002 \001(\006\"\202\001\n)CBroadcast_"
  "GetBroadcastThumbnail_Response\022\025\n\rthumbn"
  "ail_url\030\001 \001(\t\022\027\n\017update_interval\030\002 \001(\005\022\023"
  "\n\013num_viewers\030\003 \001(\005\022\020\n\010duration\030\004 \001(\005\"R\n"
  "$CBroadcast_InviteToBroadcast_Request\022\017\n"
  "\007steamid\030\001 \001(\006\022\031\n\021approval_response\030\002 \001("
  "\010\"8\n%CBroadcast_InviteToBroadcast_Respon"
  "se\022\017\n\007success\030\001 \001(\010\"|\n-CBroadcast_SendBr"
  "oadcastStateToServer_Request\022\022\n\npermissi"
  "on\030\001 \001(\005\022\016\n\006gameid\030\002 \001(\004\022\r\n\005title\030\003 \001(\t\022"
  "\030\n\020game_data_config\030\004 \001(\t\"0\n.CBroadcast_"
  "SendBroadcastStateToServer_Response\"O\n7C"
  "Broadcast_NotifyBroadcastSessionHeartbea"
  "t_Notification\022\024\n\014broadcast_id\030\001 \001(\006\"x\n\'"
  "CBroadcast_GetBroadcastChatInfo_Request\022"
  "\017\n\007steamid\030\001 \001(\006\022\024\n\014broadcast_id\030\002 \001(\006\022\021"
  "\n\tclient_ip\030\003 \001(\r\022\023\n\013client_cell\030\004 \001(\r\"o"
  "\n(CBroadcast_GetBroadcastChatInfo_Respon"
  "se\022\017\n\007chat_id\030\001 \001(\006\022\031\n\021view_url_template"
  "\030\003 \001(\t\022\027\n\017flair_group_ids\030\004 \003(\r\"\352\001\n\"CBro"
  "adcast_PostChatMessage_Request\022\017\n\007chat_i"
  "d\030\001 \001(\006\022\017\n\007message\030\002 \001(\t\022\023\n\013instance_id\030"
  "\003 \001(\r\022V\n\010language\030\004 \001(\r:\0010BA\202\265\030=ELanguag"
  "e of the user posting the message, defau"
  "lt is english\0225\n\014country_code\030\005 \001(\tB\037\202\265\030"
  "\033The two letter country code\"{\n#CBroadca"
  "st_PostChatMessage_Response\022\024\n\014persona_n"
  "ame\030\001 \001(\t\022\017\n\007in_game\030\002 \001(\010\022\016\n\006result\030\003 \001"
  "(\005\022\035\n\025cooldown_time_seconds\030\004 \001(\005\"K\n)CBr"
  "oadcast_UpdateChatMessageFlair_Request\022\017"
  "\n\007chat_id\030\001 \001(\006\022\r\n\005flair\030\002 \001(\t\"\\\n*CBroad"
  "cast_UpdateChatMessageFlair_Response\022\016\n\006"
  "result\030\001 \001(\005\022\017\n\007chat_id\030\002 \001(\006\022\r\n\005flair\030\003"
  " \001(\t\"`\n(CBroadcast_MuteBroadcastChatUser"
  "_Request\022\017\n\007chat_id\030\001 \001(\006\022\024\n\014user_steami"
  "d\030\002 \001(\006\022\r\n\005muted\030\003 \001(\010\"+\n)CBroadcast_Mut"
  "eBroadcastChatUser_Response\"N\n%CBroadcas"
  "t_RemoveUserChatText_Request\022\017\n\007chat_id\030"
  "\001 \001(\006\022\024\n\014user_steamid\030\002 \001(\006\"(\n&CBroadcas"
  "t_RemoveUserChatText_Response\"U\n,CBroadc"
  "ast_GetBroadcastChatUserNames_Request\022\017\n"
  "\007chat_id\030\001 \001(\006\022\024\n\014user_steamid\030\002 \003(\006\"\272\001\n"
  "-CBroadcast_GetBroadcastChatUserNames_Re"
  "sponse\022Q\n\rpersona_names\030\001 \003(\0132:.CBroadca"
  "st_GetBroadcastChatUserNames_Response.Pe"
  "rsonaName\0326\n\013PersonaName\022\026\n\010steam_id\030\001 \001"
  "(\006B\004\300\266\030\001\022\017\n\007persona\030\002 \001(\t\"\231\001\n!CBroadcast"
  "_StartBuildClip_Request\022\017\n\007steamid\030\001 \001(\006"
  "\022\034\n\024broadcast_session_id\030\002 \001(\006\022\025\n\rfirst_"
  "segment\030\003 \001(\005\022\024\n\014num_segments\030\004 \001(\005\022\030\n\020c"
  "lip_description\030\005 \001(\t\"\?\n\"CBroadcast_Star"
  "tBuildClip_Response\022\031\n\021broadcast_clip_id"
  "\030\001 \001(\006\"B\n%CBroadcast_GetBuildClipStatus_"
  "Request\022\031\n\021broadcast_clip_id\030\001 \001(\006\"(\n&CB"
  "roadcast_GetBuildClipStatus_Response\"\302\001\n"
  "!CBroadcast_SetClipDetails_Request\022&\n\021br"
  "oadcast_clip_id\030\001 \001(\004B\013\202\265\030\007Clip ID\022.\n\nst"
  "art_time\030\002 \001(\rB\032\202\265\030\026start time of the cl"
  "ip\022*\n\010end_time\030\003 \001(\rB\030\202\265\030\024end time of th"
  "e clip\022\031\n\021video_description\030\004 \001(\t\"$\n\"CBr"
  "oadcast_SetClipDetails_Response\"h\n!CBroa"
  "dcast_GetClipDetails_Request\022C\n\021broadcas"
  "t_clip_id\030\001 \001(\004B(\202\265\030$List of clip IDs we"
  " want details for\"\317\004\n\"CBroadcast_GetClip"
  "Details_Response\0220\n\021broadcast_clip_id\030\001 "
  "\001(\004B\025\202\265\030\021broadcast clip ID\022.\n\010video_id\030\002"
  " \001(\004B\034\202\265\030\030matching unique video ID\022,\n\nch"
  "annel_id\030\003 \001(\004B\030\202\265\030\024Broadcast Channel ID"
  "\0220\n\006app_id\030\004 \001(\rB \202\265\030\034App ID stream is t"
  "agged with\022<\n\025accountid_broadcaster\030\005 \001("
  "\rB\035\202\265\030\031Account ID of broadcaster\0229\n\023acco"
  "untid_clipmaker\030\006 \001(\rB\034\202\265\030\030Account ID of"
  " clip-maker\022E\n\021video_description\030\007 \001(\tB*"
  "\202\265\030&Short name or description of this cl"
  "ip\022;\n\nstart_time\030\010 \001(\rB\'\202\265\030#Wall time cl"
  "ip was broadcasted live\0226\n\023length_millis"
  "econds\030\t \001(\rB\031\202\265\030\025length of video in MS\022"
  "2\n\016thumbnail_path\030\n \001(\tB\032\202\265\030\026Path for th"
  "umbnail URL\"\275\005\n\036CBroadcast_SetRTMPInfo_R"
  "equest\022\034\n\024broadcast_permission\030\001 \001(\005\022\024\n\014"
  "update_token\030\002 \001(\010\022\027\n\017broadcast_delay\030\003 "
  "\001(\005\022\016\n\006app_id\030\004 \001(\r\022\027\n\017required_app_id\030\005"
  " \001(\r\022\234\001\n\031broadcast_chat_permission\030\006 \001(\016"
  "2\031.EBroadcastChatPermission: k_EBroadcas"
  "tChatPermissionPublicB<\202\265\0308Who is permit"
  "ted to send a chat message during broadc"
  "ast\022N\n\020broadcast_buffer\030\007 \001(\005B4\202\265\0300Previ"
  "ous seconds we keep of the stream availa"
  "ble\022>\n\007steamid\030\010 \001(\006B-\202\265\030)broadcaster st"
  "eamID if not logged-in user\022C\n\017chat_rate"
  "_limit\030\t \001(\rB*\202\265\030&Seconds required betwe"
  "en chat messages\0227\n\renable_replay\030\n \001(\010B"
  " \202\265\030\034Enable replay of last upload\022b\n\024is_"
  "partner_chat_only\030\013 \001(\010BD\202\265\030@When true, "
  "then only steamwork partner can create c"
  "hat messages.\022\024\n\014wordban_list\030\014 \001(\t\"!\n\037C"
  "Broadcast_SetRTMPInfo_Response\"l\n\036CBroad"
  "cast_GetRTMPInfo_Request\022\n\n\002ip\030\001 \001(\r\022>\n\007"
  "steamid\030\002 \001(\006B-\202\265\030)broadcaster steamID i"
  "f not logged-in user\"\252\005\n\037CBroadcast_GetR"
  "TMPInfo_Response\022\034\n\024broadcast_permission"
  "\030\001 \001(\005\022\021\n\trtmp_host\030\002 \001(\t\022\022\n\nrtmp_token\030"
  "\003 \001(\t\022\027\n\017broadcast_delay\030\004 \001(\005\022\016\n\006app_id"
  "\030\005 \001(\r\022\027\n\017required_app_id\030\006 \001(\r\022\234\001\n\031broa"
  "dcast_chat_permission\030\007 \001(\0162\031.EBroadcast"
  "ChatPermission: k_EBroadcastChatPermissi"
  "onPublicB<\202\265\0308Who is permitted to send a"
  " chat message during broadcast\022\?\n\020broadc"
  "ast_buffer\030\010 \001(\005B%\202\265\030!Seconds we keep st"
  "reams available\022(\n\007steamid\030\t \001(\006B\027\202\265\030\023br"
  "oadcaster steamID\022C\n\017chat_rate_limit\030\n \001"
  "(\rB*\202\265\030&Seconds required between chat me"
  "ssages\0227\n\renable_replay\030\013 \001(\010B \202\265\030\034Enabl"
  "e replay of last upload\022b\n\024is_partner_ch"
  "at_only\030\014 \001(\010BD\202\265\030@When true, then only "
  "steamwork partner can create chat messag"
  "es.\022\024\n\014wordban_list\030\r \001(\t\"a\n,CBroadcast_"
  "WebRTCHaveTURNServer_Notification\022\034\n\024bro"
  "adcast_session_id\030\001 \001(\006\022\023\n\013turn_server\030\002"
  " \001(\t\"\232\001\n$CBroadcast_WebRTCStartResult_Re"
  "quest\022\031\n\021webrtc_session_id\030\001 \001(\006\022\017\n\007star"
  "ted\030\002 \001(\010\022\r\n\005offer\030\003 \001(\t\022\024\n\014resolution_x"
  "\030\004 \001(\r\022\024\n\014resolution_y\030\005 \001(\r\022\013\n\003fps\030\006 \001("
  "\r\"\'\n%CBroadcast_WebRTCStartResult_Respon"
  "se\"=\n CBroadcast_WebRTCStopped_Request\022\031"
  "\n\021webrtc_session_id\030\001 \001(\006\"#\n!CBroadcast_"
  "WebRTCStopped_Response\"l\n\"CBroadcast_Web"
  "RTCSetAnswer_Request\022\033\n\023broadcaster_stea"
  "mid\030\001 \001(\006\022\031\n\021webrtc_session_id\030\002 \001(\006\022\016\n\006"
  "answer\030\003 \001(\t\"%\n#CBroadcast_WebRTCSetAnsw"
  "er_Response\";\n)CBroadcast_WebRTCLookupTU"
  "RNServer_Request\022\016\n\006cellid\030\001 \001(\r\"A\n*CBro"
  "adcast_WebRTCLookupTURNServer_Response\022\023"
  "\n\013turn_server\030\001 \001(\t\"Z\n\033CBroadcast_WebRTC"
  "_Candidate\022\017\n\007sdp_mid\030\001 \001(\t\022\027\n\017sdp_mline"
  "_index\030\002 \001(\005\022\021\n\tcandidate\030\003 \001(\t\"w\n)CBroa"
  "dcast_WebRTCAddHostCandidate_Request\022\031\n\021"
  "webrtc_session_id\030\001 \001(\006\022/\n\tcandidate\030\002 \001"
  "(\0132\034.CBroadcast_WebRTC_Candidate\",\n*CBro"
  "adcast_WebRTCAddHostCandidate_Response\"\226"
  "\001\n+CBroadcast_WebRTCAddViewerCandidate_R"
  "equest\022\033\n\023broadcaster_steamid\030\001 \001(\006\022\031\n\021w"
  "ebrtc_session_id\030\002 \001(\006\022/\n\tcandidate\030\003 \001("
  "\0132\034.CBroadcast_WebRTC_Candidate\".\n,CBroa"
  "dcast_WebRTCAddViewerCandidate_Response\""
  "\202\001\n*CBroadcast_WebRTCGetHostCandidates_R"
  "equest\022\033\n\023broadcaster_steamid\030\001 \001(\006\022\031\n\021w"
  "ebrtc_session_id\030\002 \001(\006\022\034\n\024candidate_gene"
  "ration\030\003 \001(\r\"}\n+CBroadcast_WebRTCGetHost"
  "Candidates_Response\022\034\n\024candidate_generat"
  "ion\030\001 \001(\r\0220\n\ncandidates\030\002 \003(\0132\034.CBroadca"
  "st_WebRTC_Candidate\"\244\003\n*CBroadcast_GetBr"
  "oadcastUploadStats_Request\022:\n\trow_limit\030"
  "\001 \001(\r:\003100B\"\202\265\030\036How many at maximum to r"
  "eturn.\022%\n\nstart_time\030\002 \001(\r:\0010B\016\202\265\030\nStart"
  " time\022P\n\tupload_id\030\003 \001(\004B=\202\265\0309Optional r"
  "elay upload ID - not compatible with ses"
  "sion_id\022i\n\007steamid\030\004 \001(\006BX\202\265\030TOptional t"
  "he steamid whose stats you want, otherwi"
  "se the user logged in - admin only\022V\n\nse"
  "ssion_id\030\005 \001(\004BB\202\265\030>Optional broadcast s"
  "ession ID - not compatiable with upload_"
  "id\"\211\t\n+CBroadcast_GetBroadcastUploadStat"
  "s_Response\022N\n\014upload_stats\030\001 \003(\01328.CBroa"
  "dcast_GetBroadcastUploadStats_Response.U"
  "ploadStats\032\211\010\n\013UploadStats\022\033\n\rupload_res"
  "ult\030\001 \001(\rB\004\202\265\030\000\0227\n\014time_stopped\030\002 \001(\rB!\202"
  "\265\030\035time broadcast upload stopped\0226\n\020seco"
  "nds_uploaded\030\003 \001(\rB\034\202\265\030\030seconds of vido "
  "uploaded\022/\n\013max_viewers\030\004 \001(\rB\032\202\265\030\026max c"
  "oncurrent viewers\022.\n\014resolution_x\030\005 \001(\rB"
  "\030\202\265\030\024horizontal resultion\022,\n\014resolution_"
  "y\030\006 \001(\rB\026\202\265\030\022vertical resultion\022\033\n\ravg_b"
  "andwidth\030\007 \001(\rB\004\202\265\030\000\022;\n\013total_bytes\030\010 \001("
  "\004B&\202\265\030\"total byte uploaded by broadcaste"
  "r\022$\n\006app_id\030\t \001(\rB\024\202\265\030\020game broadcasted\022"
  ";\n\024total_unique_viewers\030\n \001(\rB\035\202\265\030\031total"
  " unique viewers seen\022Q\n\025total_seconds_wa"
  "tched\030\013 \001(\004B2\202\265\030.total number of seconds"
  " watched by all viewers\0227\n\014time_started\030"
  "\014 \001(\rB!\202\265\030\035time broadcast upload started"
  "\0220\n\tupload_id\030\r \001(\004B\035\202\265\030\031broadcast relay"
  " upload id\0223\n\rlocal_address\030\016 \001(\tB\034\202\265\030\030u"
  "pload to server address\0226\n\016remote_addres"
  "s\030\017 \001(\tB\036\202\265\030\032upload from client address\022"
  "0\n\021frames_per_second\030\020 \001(\rB\025\202\265\030\021frames p"
  "er second\022\?\n\023num_representations\030\021 \001(\rB\""
  "\202\265\030\036number of video represetations\022\037\n\010ap"
  "p_name\030\022 \001(\tB\r\202\265\030\tgame name\0223\n\tis_replay"
  "\030\023 \001(\010B \202\265\030\034replay of previous recording"
  "\022,\n\nsession_id\030\024 \001(\004B\030\202\265\030\024broadcast sess"
  "ion id\"\275\001\n*CBroadcast_GetBroadcastViewer"
  "Stats_Request\0220\n\tupload_id\030\001 \001(\004B\035\202\265\030\031Ge"
  "t stats for this stream\022]\n\007steamid\030\002 \001(\006"
  "BL\202\265\030HOptional: The steamid of the broad"
  "cast whose details you are requesting.\"\230"
  "\003\n+CBroadcast_GetBroadcastViewerStats_Re"
  "sponse\022N\n\014viewer_stats\030\001 \003(\01328.CBroadcas"
  "t_GetBroadcastViewerStats_Response.Viewe"
  "rStats\022P\n\rcountry_stats\030\002 \003(\01329.CBroadca"
  "st_GetBroadcastViewerStats_Response.Coun"
  "tryStats\032c\n\013ViewerStats\022 \n\004time\030\001 \001(\rB\022\202"
  "\265\030\016time of record\0222\n\013num_viewers\030\002 \001(\rB\035"
  "\202\265\030\031current number of viewers\032b\n\014Country"
  "Stats\022&\n\014country_code\030\001 \001(\tB\020\202\265\030\014country"
  " code\022*\n\013num_viewers\030\002 \001(\rB\025\202\265\030\021number o"
  "f viewers\"\370\001\n,CBroadcast_BroadcastViewer"
  "State_Notification\022\017\n\007steamid\030\001 \001(\006\022a\n\005s"
  "tate\030\002 \001(\0162:.CBroadcast_BroadcastViewerS"
  "tate_Notification.EViewerState:\026k_EViewe"
  "rNeedsApproval\"T\n\014EViewerState\022\032\n\026k_EVie"
  "werNeedsApproval\020\001\022\025\n\021k_EViewerWatching\020"
  "\002\022\021\n\rk_EViewerLeft\020\003\"F\n.CBroadcast_Waiti"
  "ngBroadcastViewer_Notification\022\024\n\014broadc"
  "ast_id\030\001 \001(\006\"\215\002\n.CBroadcast_BroadcastUpl"
  "oadStarted_Notification\022\024\n\014broadcast_id\030"
  "\001 \001(\006\022\024\n\014upload_token\030\002 \001(\t\022\026\n\016upload_ad"
  "dress\030\003 \001(\t\022\024\n\014http_address\030\004 \001(\t\022\033\n\023bro"
  "adcast_upload_id\030\005 \001(\006\022S\n\032heartbeat_inte"
  "rval_seconds\030\006 \001(\rB/\202\265\030+how many seconds"
  " between session heartbeats\022\017\n\007is_rtmp\030\007"
  " \001(\010\"\225\001\n+CBroadcast_StopBroadcastUpload_"
  "Notification\022\024\n\014broadcast_id\030\001 \001(\006\022\032\n\022br"
  "oadcast_relay_id\030\002 \001(\006\022\025\n\rupload_result\030"
  "\003 \001(\r\022\035\n\025too_many_poor_uploads\030\004 \001(\010\"=\n%"
  "CBroadcast_SessionClosed_Notification\022\024\n"
  "\014broadcast_id\030\001 \001(\006\"L\n-CBroadcast_Viewer"
  "BroadcastInvite_Notification\022\033\n\023broadcas"
  "ter_steamid\030\001 \001(\006\"T\n\'CBroadcast_Broadcas"
  "tStatus_Notification\022\024\n\014broadcast_id\030\001 \001"
  "(\006\022\023\n\013num_viewers\030\002 \001(\005\"\216\001\n,CBroadcast_B"
  "roadcastChannelLive_Notification\022\034\n\024broa"
  "dcast_channel_id\030\001 \001(\006\022\036\n\026broadcast_chan"
  "nel_name\030\002 \001(\t\022 \n\030broadcast_channel_avat"
  "ar\030\003 \001(\t\"\301\001\n,CBroadcast_SendThumbnailToR"
  "elay_Notification\022\036\n\026thumbnail_upload_to"
  "ken\030\001 \001(\t\022&\n\036thumbnail_broadcast_session"
  "_id\030\002 \001(\006\022\026\n\016thumbnail_data\030\003 \001(\014\022\027\n\017thu"
  "mbnail_width\030\004 \001(\r\022\030\n\020thumbnail_height\030\005"
  " \001(\r\"L\n,CBroadcast_WebRTCNeedTURNServer_"
  "Notification\022\034\n\024broadcast_session_id\030\001 \001"
  "(\006\"\214\001\n#CBroadcast_WebRTCStart_Notificati"
  "on\022\034\n\024broadcast_session_id\030\001 \001(\006\022\031\n\021webr"
  "tc_session_id\030\002 \001(\006\022\026\n\016viewer_steamid\030\003 "
  "\001(\006\022\024\n\014viewer_token\030\004 \001(\006\"r\n\'CBroadcast_"
  "WebRTCSetAnswer_Notification\022\034\n\024broadcas"
  "t_session_id\030\001 \001(\006\022\031\n\021webrtc_session_id\030"
  "\002 \001(\006\022\016\n\006answer\030\003 \001(\t\"\234\001\n0CBroadcast_Web"
  "RTCAddViewerCandidate_Notification\022\034\n\024br"
  "oadcast_session_id\030\001 \001(\006\022\031\n\021webrtc_sessi"
  "on_id\030\002 \001(\006\022/\n\tcandidate\030\003 \001(\0132\034.CBroadc"
  "ast_WebRTC_Candidate*\246\005\n\027EBroadcastWatch"
  "Location\022%\n!k_EBroadcastWatchLocation_In"
  "valid\020\000\022)\n%k_EBroadcastWatchLocation_Ste"
  "amTV_Tab\020\001\0220\n,k_EBroadcastWatchLocation_"
  "SteamTV_WatchParty\020\002\022&\n\"k_EBroadcastWatc"
  "hLocation_Chat_Tab\020\003\022-\n)k_EBroadcastWatc"
  "hLocation_Chat_WatchParty\020\004\022+\n\'k_EBroadc"
  "astWatchLocation_CommunityPage\020\005\022*\n&k_EB"
  "roadcastWatchLocation_StoreAppPage\020\006\022$\n "
  "k_EBroadcastWatchLocation_InGame\020\007\022(\n$k_"
  "EBroadcastWatchLocation_BigPicture\020\010\022\'\n#"
  "k_EBroadcastWatchLocation_SalesPage\020\t\022)\n"
  "%k_EBroadcastWatchLocation_CuratorPage\020\n"
  "\022+\n\'k_EBroadcastWatchLocation_DeveloperP"
  "age\020\013\022*\n&k_EBroadcastWatchLocation_Chat_"
  "Friends\020\014\022)\n%k_EBroadcastWatchLocation_S"
  "teamTV_Web\020\r\022/\n+k_EBroadcastWatchLocatio"
  "n_DesktopUI_Overlay\020\016*g\n\030EBroadcastChatP"
  "ermission\022$\n k_EBroadcastChatPermissionP"
  "ublic\020\000\022%\n!k_EBroadcastChatPermissionOwn"
  "sApp\020\0012\206+\n\tBroadcast\022\355\001\n\025BeginBroadcastS"
  "ession\022).CBroadcast_BeginBroadcastSessio"
  "n_Request\032*.CBroadcast_BeginBroadcastSes"
  "sion_Response\"}\202\265\030yRequest from client t"
  "o directory to begin a broadcast session"
  ". No data being sent to relay; just avai"
  "lable for broadcast.\022\272\001\n\023EndBroadcastSes"
  "sion\022\'.CBroadcast_EndBroadcastSession_Re"
  "quest\032(.CBroadcast_EndBroadcastSession_R"
  "esponse\"P\202\265\030LRequest from client to stop"
  " a broadcast session. Any uploads will t"
  "erminate.\022\254\001\n\024StartBroadcastUpload\022(.CBr"
  "oadcast_StartBroadcastUpload_Request\032).C"
  "Broadcast_StartBroadcastUpload_Response\""
  "\?\202\265\030;Request from client to begin sendin"
  "g video for a broadcast.\022\231\001\n\031NotifyBroad"
  "castUploadStop\0222.CBroadcast_NotifyBroadc"
  "astUploadStop_Notification\032\013.NoResponse\""
  ";\202\265\0307Tells directory that client stopped"
  " uploading broadcast\022\207\001\n\016WatchBroadcast\022"
  "\".CBroadcast_WatchBroadcast_Request\032#.CB"
  "roadcast_WatchBroadcast_Response\",\202\265\030(Re"
  "quest from viewer to watch a broadcast\022\201"
  "\001\n\022HeartbeatBroadcast\022+.CBroadcast_Heart"
  "beatBroadcast_Notification\032\013.NoResponse\""
  "1\202\265\030-Notify directory that user is still"
  " watching.\022\301\001\n\025StopWatchingBroadcast\022..C"
  "Broadcast_StopWatchingBroadcast_Notifica"
  "tion\032\013.NoResponse\"k\202\265\030gRequest to immedi"
  "ately stop watching a broadcast. Optiona"
  "l Method, if not called, viewer will tim"
  "e out.\022\226\001\n\022GetBroadcastStatus\022&.CBroadca"
  "st_GetBroadcastStatus_Request\032\'.CBroadca"
  "st_GetBroadcastStatus_Response\"/\202\265\030+Requ"
  "est from viewer about broadcast details\022"
  "\227\001\n\025GetBroadcastThumbnail\022).CBroadcast_G"
  "etBroadcastThumbnail_Request\032*.CBroadcas"
  "t_GetBroadcastThumbnail_Response\"\'\202\265\030#Re"
  "quest thumbnail URL for broadcast\022\242\001\n\021In"
  "viteToBroadcast\022%.CBroadcast_InviteToBro"
  "adcast_Request\032&.CBroadcast_InviteToBroa"
  "dcast_Response\">\202\265\030:Invites another stea"
  "m user to watch the caller\'s broadcast\022\310"
  "\001\n\032SendBroadcastStateToServer\022..CBroadca"
  "st_SendBroadcastStateToServer_Request\032/."
  "CBroadcast_SendBroadcastStateToServer_Re"
  "sponse\"I\202\265\030ESends users current broadcas"
  "t state (permissions, game) to the serve"
  "r\022\242\001\n\037NotifyBroadcastSessionHeartbeat\0228."
  "CBroadcast_NotifyBroadcastSessionHeartbe"
  "at_Notification\032\013.NoResponse\"8\202\265\0304Tells "
  "directory broadcast session is still ava"
  "ilable\022\224\001\n\024GetBroadcastChatInfo\022(.CBroad"
  "cast_GetBroadcastChatInfo_Request\032).CBro"
  "adcast_GetBroadcastChatInfo_Response\"\'\202\265"
  "\030#Gets chat room info for a broadcast\022\212\001"
  "\n\017PostChatMessage\022#.CBroadcast_PostChatM"
  "essage_Request\032$.CBroadcast_PostChatMess"
  "age_Response\",\202\265\030(Post chat message to s"
  "pecified chat room\022\253\001\n\026UpdateChatMessage"
  "Flair\022*.CBroadcast_UpdateChatMessageFlai"
  "r_Request\032+.CBroadcast_UpdateChatMessage"
  "Flair_Response\"8\202\265\0304Update chat message "
  "flair in the specified chat room\022\226\001\n\025Mut"
  "eBroadcastChatUser\022).CBroadcast_MuteBroa"
  "dcastChatUser_Request\032*.CBroadcast_MuteB"
  "roadcastChatUser_Response\"&\202\265\030\"Mute a us"
  "er in your broadcast chat\022\224\001\n\022RemoveUser"
  "ChatText\022&.CBroadcast_RemoveUserChatText"
  "_Request\032\'.CBroadcast_RemoveUserChatText"
  "_Response\"-\202\265\030)Tell all viewers to remov"
  "e user chat text\022\243\001\n\031GetBroadcastChatUse"
  "rNames\022-.CBroadcast_GetBroadcastChatUser"
  "Names_Request\032..CBroadcast_GetBroadcastC"
  "hatUserNames_Response\"\'\202\265\030#Get names for"
  " list of users in chat\022~\n\016StartBuildClip"
  "\022\".CBroadcast_StartBuildClip_Request\032#.C"
  "Broadcast_StartBuildClip_Response\"#\202\265\030\037S"
  "tart building a broadcast clip\022\212\001\n\022GetBu"
  "ildClipStatus\022&.CBroadcast_GetBuildClipS"
  "tatus_Request\032\'.CBroadcast_GetBuildClipS"
  "tatus_Response\"#\202\265\030\037Start building a bro"
  "adcast clip\022w\n\016SetClipDetails\022\".CBroadca"
  "st_SetClipDetails_Request\032#.CBroadcast_S"
  "etClipDetails_Response\"\034\202\265\030\030Updates a br"
  "oadcast clip\022~\n\016GetClipDetails\022\".CBroadc"
  "ast_GetClipDetails_Request\032#.CBroadcast_"
  "GetClipDetails_Response\"#\202\265\030\037Get details"
  " for Broadcast Clips\022n\n\013SetRTMPInfo\022\037.CB"
  "roadcast_SetRTMPInfo_Request\032 .CBroadcas"
  "t_SetRTMPInfo_Response\"\034\202\265\030\030Sets RTMP br"
  "oadcast info\022n\n\013GetRTMPInfo\022\037.CBroadcast"
  "_GetRTMPInfo_Request\032 .CBroadcast_GetRTM"
  "PInfo_Response\"\034\202\265\030\030Gets RTMP broadcast "
  "info\022\236\001\n\032NotifyWebRTCHaveTURNServer\022-.CB"
  "roadcast_WebRTCHaveTURNServer_Notificati"
  "on\032\013.NoResponse\"D\202\265\030@Notification from c"
  "lient to server with the client\'s TURN s"
  "erver\022\254\001\n\021WebRTCStartResult\022%.CBroadcast"
  "_WebRTCStartResult_Request\032&.CBroadcast_"
  "WebRTCStartResult_Response\"H\202\265\030DNotify t"
  "he server that a WebRTC session has been"
  " created by the host\022\240\001\n\rWebRTCStopped\022!"
  ".CBroadcast_WebRTCStopped_Request\032\".CBro"
  "adcast_WebRTCStopped_Response\"H\202\265\030DNotif"
  "y the server that a WebRTC session has b"
  "een stopped by the host\022\250\001\n\017WebRTCSetAns"
  "wer\022#.CBroadcast_WebRTCSetAnswer_Request"
  "\032$.CBroadcast_WebRTCSetAnswer_Response\"J"
  "\202\265\030FNotify the server that a WebRTC sess"
  "ion has been created by the viewer\022\242\001\n\026W"
  "ebRTCLookupTURNServer\022*.CBroadcast_WebRT"
  "CLookupTURNServer_Request\032+.CBroadcast_W"
  "ebRTCLookupTURNServer_Response\"/\202\265\030+Look"
  "up the best TURN server for this client\022"
  "\261\001\n\026WebRTCAddHostCandidate\022*.CBroadcast_"
  "WebRTCAddHostCandidate_Request\032+.CBroadc"
  "ast_WebRTCAddHostCandidate_Response\">\202\265\030"
  ":Add an ICE candidate for the host side "
  "of a WebRTC session\022\271\001\n\030WebRTCAddViewerC"
  "andidate\022,.CBroadcast_WebRTCAddViewerCan"
  "didate_Request\032-.CBroadcast_WebRTCAddVie"
  "werCandidate_Response\"@\202\265\030<Add an ICE ca"
  "ndidate for the viewer side of a WebRTC "
  "session\022\266\001\n\027WebRTCGetHostCandidates\022+.CB"
  "roadcast_WebRTCGetHostCandidates_Request"
  "\032,.CBroadcast_WebRTCGetHostCandidates_Re"
  "sponse\"@\202\265\030<Get the ICE candidates for t"
  "he host side of a WebRTC session\022\236\001\n\027Get"
  "BroadcastUploadStats\022+.CBroadcast_GetBro"
  "adcastUploadStats_Request\032,.CBroadcast_G"
  "etBroadcastUploadStats_Response\"(\202\265\030$Get"
  "s broadcast upload stats for user\022\237\001\n\027Ge"
  "tBroadcastViewerStats\022+.CBroadcast_GetBr"
  "oadcastViewerStats_Request\032,.CBroadcast_"
  "GetBroadcastViewerStats_Response\")\202\265\030%Ge"
  "ts viewer stats for given broadcast\032*\202\265\030"
  "&Methods for Steam broadcast operations2"
  "\304\021\n\017BroadcastClient\022\241\001\n\032NotifyBroadcastV"
  "iewerState\022-.CBroadcast_BroadcastViewerS"
  "tate_Notification\032\013.NoResponse\"G\202\265\030CNoti"
  "fication from server to client that a vi"
  "ewers state has changed\022\275\001\n\034NotifyWaitin"
  "gBroadcastViewer\022/.CBroadcast_WaitingBro"
  "adcastViewer_Notification\032\013.NoResponse\"_"
  "\202\265\030[Notification from server to client o"
  "ne or more users is waiting for user to "
  "start broadcast\022\247\001\n\034NotifyBroadcastUploa"
  "dStarted\022/.CBroadcast_BroadcastUploadSta"
  "rted_Notification\032\013.NoResponse\"I\202\265\030ENoti"
  "fication from server to client with info"
  "rmation about a broadcast\022\326\001\n\031NotifyStop"
  "BroadcastUpload\022,.CBroadcast_StopBroadca"
  "stUpload_Notification\032\013.NoResponse\"~\202\265\030z"
  "Notification from server to client telli"
  "ng it to stop uploading when the last vi"
  "ewer has disconnected from their broadca"
  "st\022\265\001\n\023NotifySessionClosed\022&.CBroadcast_"
  "SessionClosed_Notification\032\013.NoResponse\""
  "i\202\265\030eNotification from server to client "
  "telling it a session has been closed une"
  "xpectedly by the directory\022\303\001\n\033NotifyVie"
  "werBroadcastInvite\022..CBroadcast_ViewerBr"
  "oadcastInvite_Notification\032\013.NoResponse\""
  "g\202\265\030cNotification from server to client "
  "that a broadcaster is inviting a viewer "
  "to watch their broadcast\022\225\001\n\025NotifyBroad"
  "castStatus\022(.CBroadcast_BroadcastStatus_"
  "Notification\032\013.NoResponse\"E\202\265\030ANotificat"
  "ion from server to client about current "
  "broadcast status\022\237\001\n\032NotifyBroadcastChan"
  "nelLive\022-.CBroadcast_BroadcastChannelLiv"
  "e_Notification\032\013.NoResponse\"E\202\265\030ANotific"
  "ation from server to client about curren"
  "t broadcast status\022p\n\024SendThumbnailToRel"
  "ay\022-.CBroadcast_SendThumbnailToRelay_Not"
  "ification\032\013.NoResponse\"\034\202\265\030\030Send thumbna"
  "ils to relay\022\247\001\n\032NotifyWebRTCNeedTURNSer"
  "ver\022-.CBroadcast_WebRTCNeedTURNServer_No"
  "tification\032\013.NoResponse\"M\202\265\030INotificatio"
  "n from server to client that it needs th"
  "e client\'s TURN server\022\224\001\n\021NotifyWebRTCS"
  "tart\022$.CBroadcast_WebRTCStart_Notificati"
  "on\032\013.NoResponse\"L\202\265\030HNotification from s"
  "erver to client that it should start a W"
  "ebRTC session\022\237\001\n\025NotifyWebRTCSetAnswer\022"
  "(.CBroadcast_WebRTCSetAnswer_Notificatio"
  "n\032\013.NoResponse\"O\202\265\030KNotification from se"
  "rver to client about the broadcast viewe"
  "r WebRTC answer\022\266\001\n\036NotifyWebRTCAddViewe"
  "rCandidate\0221.CBroadcast_WebRTCAddViewerC"
  "andidate_Notification\032\013.NoResponse\"T\202\265\030P"
  "Notification from server to client about"
  " a broadcast viewer WebRTC ICE candidate"
  "\032\004\300\265\030\002B\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto = {
  false, false, 22571, descriptor_table_protodef_steammessages_5fbroadcast_2esteamclient_2eproto, "steammessages_broadcast.steamclient.proto", 
  &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once, descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_deps, 2, 81,
  schemas, file_default_instances, TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fbroadcast_2esteamclient_2eproto(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[0];
}
bool CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseReady;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseNotAvailable;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForApproval;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForStart;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseInvalidSession;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseTooManyBroadcasts;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForReconnect;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseSystemNotSupported;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseUserRestricted;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseClientOutOfDate;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponsePoorUploadQuality;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseMissingSubscription;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MIN;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MAX;
constexpr int CBroadcast_WatchBroadcast_Response::EWatchResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[1];
}
bool CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerNeedsApproval;
constexpr CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerWatching;
constexpr CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerLeft;
constexpr CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MIN;
constexpr CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MAX;
constexpr int CBroadcast_BroadcastViewerState_Notification::EViewerState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastWatchLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[2];
}
bool EBroadcastWatchLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastChatPermission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[3];
}
bool EBroadcastChatPermission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CBroadcast_BeginBroadcastSession_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_BeginBroadcastSession_Request>()._has_bits_);
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rtmp_token(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_thumbnail_upload(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_client_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sysid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_allow_webrtc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_BeginBroadcastSession_Request)
}
CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request(const CBroadcast_BeginBroadcastSession_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  client_beta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_beta()) {
    client_beta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_beta(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sysid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(sysid_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BeginBroadcastSession_Request)
}

inline void CBroadcast_BeginBroadcastSession_Request::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_beta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sysid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(sysid_));
}

CBroadcast_BeginBroadcastSession_Request::~CBroadcast_BeginBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_BeginBroadcastSession_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_BeginBroadcastSession_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_beta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BeginBroadcastSession_Request::ArenaDtor(void* object) {
  CBroadcast_BeginBroadcastSession_Request* _this = reinterpret_cast< CBroadcast_BeginBroadcastSession_Request* >(object);
  (void)_this;
}
void CBroadcast_BeginBroadcastSession_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_BeginBroadcastSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_BeginBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BeginBroadcastSession_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      client_beta_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_upload_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(thumbnail_upload_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&allow_webrtc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sysid_) -
        reinterpret_cast<char*>(&allow_webrtc_)) + sizeof(sysid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_BeginBroadcastSession_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_permission(&has_bits);
          permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gameid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_instance_id(&has_bits);
          client_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BeginBroadcastSession_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cellid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cellid(&has_bits);
          cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rtmp_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rtmp_token(&has_bits);
          rtmp_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool thumbnail_upload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_thumbnail_upload(&has_bits);
          thumbnail_upload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string client_beta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_client_beta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BeginBroadcastSession_Request.client_beta");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sysid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_sysid(&has_bits);
          sysid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_webrtc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_allow_webrtc(&has_bits);
          allow_webrtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_BeginBroadcastSession_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BeginBroadcastSession_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gameid(), target);
  }

  // optional uint64 client_instance_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_client_instance_id(), target);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Request.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // optional uint32 cellid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cellid(), target);
  }

  // optional uint64 rtmp_token = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_rtmp_token(), target);
  }

  // optional bool thumbnail_upload = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_thumbnail_upload(), target);
  }

  // optional string client_beta = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_beta().data(), static_cast<int>(this->_internal_client_beta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Request.client_beta");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_client_beta(), target);
  }

  // optional uint32 sysid = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sysid(), target);
  }

  // optional bool allow_webrtc = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_webrtc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BeginBroadcastSession_Request)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BeginBroadcastSession_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string client_beta = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_beta());
    }

    // optional uint64 gameid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
    }

    // optional uint64 client_instance_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_client_instance_id());
    }

    // optional int32 permission = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_permission());
    }

    // optional uint32 cellid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cellid());
    }

    // optional uint64 rtmp_token = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rtmp_token());
    }

    // optional bool thumbnail_upload = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool allow_webrtc = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 sysid = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sysid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_BeginBroadcastSession_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_BeginBroadcastSession_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_BeginBroadcastSession_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_BeginBroadcastSession_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_BeginBroadcastSession_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_BeginBroadcastSession_Request &>(from));
}


void CBroadcast_BeginBroadcastSession_Request::MergeFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BeginBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_client_beta(from._internal_client_beta());
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000020u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000040u) {
      rtmp_token_ = from.rtmp_token_;
    }
    if (cached_has_bits & 0x00000080u) {
      thumbnail_upload_ = from.thumbnail_upload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      allow_webrtc_ = from.allow_webrtc_;
    }
    if (cached_has_bits & 0x00000200u) {
      sysid_ = from.sysid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_BeginBroadcastSession_Request::CopyFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BeginBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Request::InternalSwap(CBroadcast_BeginBroadcastSession_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_beta_, lhs_arena,
      &other->client_beta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, sysid_)
      + sizeof(CBroadcast_BeginBroadcastSession_Request::sysid_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_BeginBroadcastSession_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[0]);
}

// ===================================================================

class CBroadcast_BeginBroadcastSession_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_BeginBroadcastSession_Response>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thumbnail_upload_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thumbnail_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thumbnail_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heartbeat_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_BeginBroadcastSession_Response)
}
CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response(const CBroadcast_BeginBroadcastSession_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thumbnail_upload_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_upload_address()) {
    thumbnail_upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_upload_address(), 
      GetArenaForAllocation());
  }
  thumbnail_upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_upload_token()) {
    thumbnail_upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_upload_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BeginBroadcastSession_Response)
}

inline void CBroadcast_BeginBroadcastSession_Response::SharedCtor() {
thumbnail_upload_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
}

CBroadcast_BeginBroadcastSession_Response::~CBroadcast_BeginBroadcastSession_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_BeginBroadcastSession_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_BeginBroadcastSession_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  thumbnail_upload_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_upload_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BeginBroadcastSession_Response::ArenaDtor(void* object) {
  CBroadcast_BeginBroadcastSession_Response* _this = reinterpret_cast< CBroadcast_BeginBroadcastSession_Response* >(object);
  (void)_this;
}
void CBroadcast_BeginBroadcastSession_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_BeginBroadcastSession_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_BeginBroadcastSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BeginBroadcastSession_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thumbnail_upload_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_upload_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heartbeat_interval_seconds_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(heartbeat_interval_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_BeginBroadcastSession_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_thumbnail_upload_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_thumbnail_upload_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_thumbnail_interval_seconds(&has_bits);
          thumbnail_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_heartbeat_interval_seconds(&has_bits);
          heartbeat_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_BeginBroadcastSession_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BeginBroadcastSession_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_upload_address().data(), static_cast<int>(this->_internal_thumbnail_upload_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thumbnail_upload_address(), target);
  }

  // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_upload_token().data(), static_cast<int>(this->_internal_thumbnail_upload_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_thumbnail_upload_token(), target);
  }

  // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_thumbnail_interval_seconds(), target);
  }

  // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heartbeat_interval_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BeginBroadcastSession_Response)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BeginBroadcastSession_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_upload_address());
    }

    // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_upload_token());
    }

    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_thumbnail_interval_seconds());
    }

    // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_heartbeat_interval_seconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_BeginBroadcastSession_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_BeginBroadcastSession_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_BeginBroadcastSession_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_BeginBroadcastSession_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_BeginBroadcastSession_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_BeginBroadcastSession_Response &>(from));
}


void CBroadcast_BeginBroadcastSession_Response::MergeFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BeginBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_thumbnail_upload_address(from._internal_thumbnail_upload_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_thumbnail_upload_token(from._internal_thumbnail_upload_token());
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_interval_seconds_ = from.thumbnail_interval_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      heartbeat_interval_seconds_ = from.heartbeat_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_BeginBroadcastSession_Response::CopyFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BeginBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Response::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Response::InternalSwap(CBroadcast_BeginBroadcastSession_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_upload_address_, lhs_arena,
      &other->thumbnail_upload_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_upload_token_, lhs_arena,
      &other->thumbnail_upload_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Response, heartbeat_interval_seconds_)
      + sizeof(CBroadcast_BeginBroadcastSession_Response::heartbeat_interval_seconds_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Response, broadcast_id_)>(
          reinterpret_cast<char*>(&broadcast_id_),
          reinterpret_cast<char*>(&other->broadcast_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_BeginBroadcastSession_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[1]);
}

// ===================================================================

class CBroadcast_EndBroadcastSession_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_EndBroadcastSession_Request>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_EndBroadcastSession_Request)
}
CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request(const CBroadcast_EndBroadcastSession_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_EndBroadcastSession_Request)
}

inline void CBroadcast_EndBroadcastSession_Request::SharedCtor() {
broadcast_id_ = uint64_t{0u};
}

CBroadcast_EndBroadcastSession_Request::~CBroadcast_EndBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_EndBroadcastSession_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_EndBroadcastSession_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_EndBroadcastSession_Request::ArenaDtor(void* object) {
  CBroadcast_EndBroadcastSession_Request* _this = reinterpret_cast< CBroadcast_EndBroadcastSession_Request* >(object);
  (void)_this;
}
void CBroadcast_EndBroadcastSession_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_EndBroadcastSession_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_EndBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_EndBroadcastSession_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_EndBroadcastSession_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_EndBroadcastSession_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_EndBroadcastSession_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_EndBroadcastSession_Request)
  return target;
}

size_t CBroadcast_EndBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_EndBroadcastSession_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_EndBroadcastSession_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_EndBroadcastSession_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_EndBroadcastSession_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_EndBroadcastSession_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_EndBroadcastSession_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_EndBroadcastSession_Request &>(from));
}


void CBroadcast_EndBroadcastSession_Request::MergeFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_EndBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_id()) {
    _internal_set_broadcast_id(from._internal_broadcast_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_EndBroadcastSession_Request::CopyFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_EndBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_EndBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_EndBroadcastSession_Request::InternalSwap(CBroadcast_EndBroadcastSession_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_EndBroadcastSession_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[2]);
}

// ===================================================================

class CBroadcast_EndBroadcastSession_Response::_Internal {
 public:
};

CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_EndBroadcastSession_Response)
}
CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response(const CBroadcast_EndBroadcastSession_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_EndBroadcastSession_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_EndBroadcastSession_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_EndBroadcastSession_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_EndBroadcastSession_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[3]);
}

// ===================================================================

class CBroadcast_StartBroadcastUpload_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_StartBroadcastUpload_Request>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_as_rtmp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtmp_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_upload_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sysid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_StartBroadcastUpload_Request)
}
CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request(const CBroadcast_StartBroadcastUpload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sysid_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(sysid_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StartBroadcastUpload_Request)
}

inline void CBroadcast_StartBroadcastUpload_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sysid_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(sysid_));
}

CBroadcast_StartBroadcastUpload_Request::~CBroadcast_StartBroadcastUpload_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_StartBroadcastUpload_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_StartBroadcastUpload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_StartBroadcastUpload_Request::ArenaDtor(void* object) {
  CBroadcast_StartBroadcastUpload_Request* _this = reinterpret_cast< CBroadcast_StartBroadcastUpload_Request* >(object);
  (void)_this;
}
void CBroadcast_StartBroadcastUpload_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_StartBroadcastUpload_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_StartBroadcastUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StartBroadcastUpload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sysid_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(sysid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_StartBroadcastUpload_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cellid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cellid(&has_bits);
          cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool as_rtmp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_as_rtmp(&has_bits);
          as_rtmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 delay_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_delay_seconds(&has_bits);
          delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rtmp_token(&has_bits);
          rtmp_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upload_ip_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_upload_ip_address(&has_bits);
          upload_ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_replay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_replay(&has_bits);
          is_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sysid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sysid(&has_bits);
          sysid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_StartBroadcastUpload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StartBroadcastUpload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  // optional uint32 cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cellid(), target);
  }

  // optional bool as_rtmp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_as_rtmp(), target);
  }

  // optional uint32 delay_seconds = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_delay_seconds(), target);
  }

  // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rtmp_token(), target);
  }

  // optional uint32 upload_ip_address = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_upload_ip_address(), target);
  }

  // optional bool is_replay = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_replay(), target);
  }

  // optional uint32 sysid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_sysid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StartBroadcastUpload_Request)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StartBroadcastUpload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 cellid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cellid());
    }

    // optional uint32 delay_seconds = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_delay_seconds());
    }

    // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rtmp_token());
    }

    // optional bool as_rtmp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_replay = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 upload_ip_address = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_upload_ip_address());
    }

    // optional uint32 sysid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sysid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_StartBroadcastUpload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_StartBroadcastUpload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_StartBroadcastUpload_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_StartBroadcastUpload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_StartBroadcastUpload_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_StartBroadcastUpload_Request &>(from));
}


void CBroadcast_StartBroadcastUpload_Request::MergeFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StartBroadcastUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_seconds_ = from.delay_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtmp_token_ = from.rtmp_token_;
    }
    if (cached_has_bits & 0x00000010u) {
      as_rtmp_ = from.as_rtmp_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_replay_ = from.is_replay_;
    }
    if (cached_has_bits & 0x00000040u) {
      upload_ip_address_ = from.upload_ip_address_;
    }
    if (cached_has_bits & 0x00000080u) {
      sysid_ = from.sysid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_StartBroadcastUpload_Request::CopyFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StartBroadcastUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Request::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Request::InternalSwap(CBroadcast_StartBroadcastUpload_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, sysid_)
      + sizeof(CBroadcast_StartBroadcastUpload_Request::sysid_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, broadcast_id_)>(
          reinterpret_cast<char*>(&broadcast_id_),
          reinterpret_cast<char*>(&other->broadcast_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_StartBroadcastUpload_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[4]);
}

// ===================================================================

class CBroadcast_StartBroadcastUpload_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_StartBroadcastUpload_Response>()._has_bits_);
  static void set_has_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcast_upload_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_http_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_StartBroadcastUpload_Response)
}
CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response(const CBroadcast_StartBroadcastUpload_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_upload_token()) {
    upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_upload_token(), 
      GetArenaForAllocation());
  }
  upload_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_upload_address()) {
    upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_upload_address(), 
      GetArenaForAllocation());
  }
  http_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_http_address()) {
    http_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_upload_id_, &from.broadcast_upload_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_replay_) -
    reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(enable_replay_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StartBroadcastUpload_Response)
}

inline void CBroadcast_StartBroadcastUpload_Response::SharedCtor() {
upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
upload_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
http_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_upload_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_replay_) -
    reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(enable_replay_));
}

CBroadcast_StartBroadcastUpload_Response::~CBroadcast_StartBroadcastUpload_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_StartBroadcastUpload_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_StartBroadcastUpload_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  upload_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upload_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_StartBroadcastUpload_Response::ArenaDtor(void* object) {
  CBroadcast_StartBroadcastUpload_Response* _this = reinterpret_cast< CBroadcast_StartBroadcastUpload_Response* >(object);
  (void)_this;
}
void CBroadcast_StartBroadcastUpload_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_StartBroadcastUpload_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_StartBroadcastUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StartBroadcastUpload_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      upload_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      http_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&broadcast_upload_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_replay_) -
        reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(enable_replay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_StartBroadcastUpload_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string upload_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_upload_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_StartBroadcastUpload_Response.upload_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string upload_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upload_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_StartBroadcastUpload_Response.upload_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_upload_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_broadcast_upload_id(&has_bits);
          broadcast_upload_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_replay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enable_replay(&has_bits);
          enable_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string http_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_http_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_StartBroadcastUpload_Response.http_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_StartBroadcastUpload_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StartBroadcastUpload_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upload_token().data(), static_cast<int>(this->_internal_upload_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.upload_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_upload_token(), target);
  }

  // optional string upload_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upload_address().data(), static_cast<int>(this->_internal_upload_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.upload_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upload_address(), target);
  }

  // optional fixed64 broadcast_upload_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_broadcast_upload_id(), target);
  }

  // optional bool enable_replay = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_replay(), target);
  }

  // optional string http_address = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_http_address().data(), static_cast<int>(this->_internal_http_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBroadcastUpload_Response.http_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_http_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StartBroadcastUpload_Response)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StartBroadcastUpload_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string upload_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_upload_token());
    }

    // optional string upload_address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_upload_address());
    }

    // optional string http_address = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_address());
    }

    // optional fixed64 broadcast_upload_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool enable_replay = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_StartBroadcastUpload_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_StartBroadcastUpload_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_StartBroadcastUpload_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_StartBroadcastUpload_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_StartBroadcastUpload_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_StartBroadcastUpload_Response &>(from));
}


void CBroadcast_StartBroadcastUpload_Response::MergeFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StartBroadcastUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_upload_token(from._internal_upload_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_upload_address(from._internal_upload_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_http_address(from._internal_http_address());
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_upload_id_ = from.broadcast_upload_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_replay_ = from.enable_replay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_StartBroadcastUpload_Response::CopyFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StartBroadcastUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Response::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Response::InternalSwap(CBroadcast_StartBroadcastUpload_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &upload_token_, lhs_arena,
      &other->upload_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &upload_address_, lhs_arena,
      &other->upload_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &http_address_, lhs_arena,
      &other->http_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Response, enable_replay_)
      + sizeof(CBroadcast_StartBroadcastUpload_Response::enable_replay_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Response, broadcast_upload_id_)>(
          reinterpret_cast<char*>(&broadcast_upload_id_),
          reinterpret_cast<char*>(&other->broadcast_upload_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_StartBroadcastUpload_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[5]);
}

// ===================================================================

class CBroadcast_NotifyBroadcastUploadStop_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_NotifyBroadcastUploadStop_Notification>()._has_bits_);
  static void set_has_broadcast_upload_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_NotifyBroadcastUploadStop_Notification)
}
CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification(const CBroadcast_NotifyBroadcastUploadStop_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_upload_id_, &from.broadcast_upload_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(upload_result_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_NotifyBroadcastUploadStop_Notification)
}

inline void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_upload_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(upload_result_));
}

CBroadcast_NotifyBroadcastUploadStop_Notification::~CBroadcast_NotifyBroadcastUploadStop_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::ArenaDtor(void* object) {
  CBroadcast_NotifyBroadcastUploadStop_Notification* _this = reinterpret_cast< CBroadcast_NotifyBroadcastUploadStop_Notification* >(object);
  (void)_this;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&broadcast_upload_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_result_) -
        reinterpret_cast<char*>(&broadcast_upload_id_)) + sizeof(upload_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_NotifyBroadcastUploadStop_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_upload_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_upload_id(&has_bits);
          broadcast_upload_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upload_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_upload_result(&has_bits);
          upload_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_NotifyBroadcastUploadStop_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_upload_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_upload_id(), target);
  }

  // optional uint32 upload_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_upload_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_NotifyBroadcastUploadStop_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastUploadStop_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 broadcast_upload_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_upload_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_NotifyBroadcastUploadStop_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_NotifyBroadcastUploadStop_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_NotifyBroadcastUploadStop_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_NotifyBroadcastUploadStop_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_NotifyBroadcastUploadStop_Notification &>(from));
}


void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_upload_id_ = from.broadcast_upload_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      upload_result_ = from.upload_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::CopyFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastUploadStop_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::InternalSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_NotifyBroadcastUploadStop_Notification, upload_result_)
      + sizeof(CBroadcast_NotifyBroadcastUploadStop_Notification::upload_result_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_NotifyBroadcastUploadStop_Notification, broadcast_upload_id_)>(
          reinterpret_cast<char*>(&broadcast_upload_id_),
          reinterpret_cast<char*>(&other->broadcast_upload_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_NotifyBroadcastUploadStop_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[6]);
}

// ===================================================================

class CBroadcast_WatchBroadcast_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WatchBroadcast_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_existing_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_viewer_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_watch_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_webrtc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WatchBroadcast_Request)
}
CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request(const CBroadcast_WatchBroadcast_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_webrtc_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_webrtc_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WatchBroadcast_Request)
}

inline void CBroadcast_WatchBroadcast_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_webrtc_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_webrtc_));
}

CBroadcast_WatchBroadcast_Request::~CBroadcast_WatchBroadcast_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WatchBroadcast_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WatchBroadcast_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WatchBroadcast_Request::ArenaDtor(void* object) {
  CBroadcast_WatchBroadcast_Request* _this = reinterpret_cast< CBroadcast_WatchBroadcast_Request* >(object);
  (void)_this;
}
void CBroadcast_WatchBroadcast_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WatchBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WatchBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WatchBroadcast_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_webrtc_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_webrtc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WatchBroadcast_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_existing_broadcast_id(&has_bits);
          existing_broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_viewer_token(&has_bits);
          viewer_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_cell = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_cell(&has_bits);
          client_cell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastWatchLocation_IsValid(val))) {
            _internal_set_watch_location(static_cast<::EBroadcastWatchLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_webrtc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_webrtc(&has_bits);
          is_webrtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WatchBroadcast_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WatchBroadcast_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_existing_broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_viewer_token(), target);
  }

  // optional uint32 client_cell = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_cell(), target);
  }

  // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_watch_location(), target);
  }

  // optional bool is_webrtc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_webrtc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WatchBroadcast_Request)
  return target;
}

size_t CBroadcast_WatchBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WatchBroadcast_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_cell = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_cell());
    }

    // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_watch_location());
    }

    // optional bool is_webrtc = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WatchBroadcast_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WatchBroadcast_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WatchBroadcast_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WatchBroadcast_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WatchBroadcast_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WatchBroadcast_Request &>(from));
}


void CBroadcast_WatchBroadcast_Request::MergeFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WatchBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      existing_broadcast_id_ = from.existing_broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_cell_ = from.client_cell_;
    }
    if (cached_has_bits & 0x00000010u) {
      watch_location_ = from.watch_location_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_webrtc_ = from.is_webrtc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WatchBroadcast_Request::CopyFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WatchBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Request::InternalSwap(CBroadcast_WatchBroadcast_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, is_webrtc_)
      + sizeof(CBroadcast_WatchBroadcast_Request::is_webrtc_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WatchBroadcast_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[7]);
}

// ===================================================================

class CBroadcast_WatchBroadcast_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WatchBroadcast_Response>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_mpd_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_rtmp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_seconds_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_viewer_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hls_m3u8_master_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heartbeat_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_thumbnail_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_webrtc(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_webrtc_offer_sdp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_webrtc_turn_server(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cdn_auth_url_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WatchBroadcast_Response)
}
CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response(const CBroadcast_WatchBroadcast_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mpd_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mpd_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mpd_url()) {
    mpd_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mpd_url(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  hls_m3u8_master_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hls_m3u8_master_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hls_m3u8_master_url()) {
    hls_m3u8_master_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hls_m3u8_master_url(), 
      GetArenaForAllocation());
  }
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_url()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArenaForAllocation());
  }
  webrtc_offer_sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    webrtc_offer_sdp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_webrtc_offer_sdp()) {
    webrtc_offer_sdp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webrtc_offer_sdp(), 
      GetArenaForAllocation());
  }
  webrtc_turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    webrtc_turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_webrtc_turn_server()) {
    webrtc_turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webrtc_turn_server(), 
      GetArenaForAllocation());
  }
  cdn_auth_url_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cdn_auth_url_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cdn_auth_url_parameters()) {
    cdn_auth_url_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cdn_auth_url_parameters(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WatchBroadcast_Response)
}

inline void CBroadcast_WatchBroadcast_Response::SharedCtor() {
mpd_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mpd_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hls_m3u8_master_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hls_m3u8_master_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
webrtc_offer_sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  webrtc_offer_sdp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
webrtc_turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  webrtc_turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cdn_auth_url_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cdn_auth_url_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(webrtc_session_id_));
response_ = 1;
}

CBroadcast_WatchBroadcast_Response::~CBroadcast_WatchBroadcast_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_WatchBroadcast_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WatchBroadcast_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mpd_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hls_m3u8_master_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webrtc_offer_sdp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webrtc_turn_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdn_auth_url_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WatchBroadcast_Response::ArenaDtor(void* object) {
  CBroadcast_WatchBroadcast_Response* _this = reinterpret_cast< CBroadcast_WatchBroadcast_Response* >(object);
  (void)_this;
}
void CBroadcast_WatchBroadcast_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WatchBroadcast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WatchBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WatchBroadcast_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mpd_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      hls_m3u8_master_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      webrtc_offer_sdp_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      webrtc_turn_server_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      cdn_auth_url_parameters_.ClearNonDefaultToEmpty();
    }
  }
  broadcast_id_ = uint64_t{0u};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_webrtc_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(is_webrtc_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&is_replay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&is_replay_)) + sizeof(webrtc_session_id_));
    response_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WatchBroadcast_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CBroadcast_WatchBroadcast_Response_EWatchResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string mpd_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mpd_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WatchBroadcast_Response.mpd_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gameid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WatchBroadcast_Response.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_viewers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_viewers(&has_bits);
          num_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 permission = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_permission(&has_bits);
          permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rtmp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_rtmp(&has_bits);
          is_rtmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 seconds_delay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_seconds_delay(&has_bits);
          seconds_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 viewer_token = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_viewer_token(&has_bits);
          viewer_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string hls_m3u8_master_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_hls_m3u8_master_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 heartbeat_interval = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_heartbeat_interval(&has_bits);
          heartbeat_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnail_url = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WatchBroadcast_Response.thumbnail_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_webrtc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_webrtc(&has_bits);
          is_webrtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 webrtc_session_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string webrtc_offer_sdp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_webrtc_offer_sdp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string webrtc_turn_server = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_webrtc_turn_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WatchBroadcast_Response.webrtc_turn_server");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_replay = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_replay(&has_bits);
          is_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cdn_auth_url_parameters = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_cdn_auth_url_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WatchBroadcast_Response.cdn_auth_url_parameters");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WatchBroadcast_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WatchBroadcast_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional string mpd_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mpd_url().data(), static_cast<int>(this->_internal_mpd_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.mpd_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mpd_url(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_broadcast_id(), target);
  }

  // optional uint64 gameid = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gameid(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // optional uint32 num_viewers = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_viewers(), target);
  }

  // optional int32 permission = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_permission(), target);
  }

  // optional bool is_rtmp = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_rtmp(), target);
  }

  // optional int32 seconds_delay = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_seconds_delay(), target);
  }

  // optional fixed64 viewer_token = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_viewer_token(), target);
  }

  // optional string hls_m3u8_master_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hls_m3u8_master_url().data(), static_cast<int>(this->_internal_hls_m3u8_master_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_hls_m3u8_master_url(), target);
  }

  // optional int32 heartbeat_interval = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_heartbeat_interval(), target);
  }

  // optional string thumbnail_url = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_thumbnail_url(), target);
  }

  // optional bool is_webrtc = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_webrtc(), target);
  }

  // optional fixed64 webrtc_session_id = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(15, this->_internal_webrtc_session_id(), target);
  }

  // optional string webrtc_offer_sdp = 16;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webrtc_offer_sdp().data(), static_cast<int>(this->_internal_webrtc_offer_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_webrtc_offer_sdp(), target);
  }

  // optional string webrtc_turn_server = 17;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webrtc_turn_server().data(), static_cast<int>(this->_internal_webrtc_turn_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.webrtc_turn_server");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_webrtc_turn_server(), target);
  }

  // optional bool is_replay = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_replay(), target);
  }

  // optional int32 duration = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_duration(), target);
  }

  // optional string cdn_auth_url_parameters = 20;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cdn_auth_url_parameters().data(), static_cast<int>(this->_internal_cdn_auth_url_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WatchBroadcast_Response.cdn_auth_url_parameters");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_cdn_auth_url_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WatchBroadcast_Response)
  return target;
}

size_t CBroadcast_WatchBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WatchBroadcast_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mpd_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mpd_url());
    }

    // optional string title = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string hls_m3u8_master_url = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hls_m3u8_master_url());
    }

    // optional string thumbnail_url = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_url());
    }

    // optional string webrtc_offer_sdp = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webrtc_offer_sdp());
    }

    // optional string webrtc_turn_server = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webrtc_turn_server());
    }

    // optional string cdn_auth_url_parameters = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cdn_auth_url_parameters());
    }

    // optional fixed64 broadcast_id = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 gameid = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
    }

    // optional uint32 num_viewers = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_viewers());
    }

    // optional int32 permission = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_permission());
    }

    // optional fixed64 viewer_token = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 seconds_delay = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seconds_delay());
    }

    // optional int32 heartbeat_interval = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_heartbeat_interval());
    }

    // optional bool is_rtmp = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_webrtc = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool is_replay = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 duration = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_duration());
    }

    // optional fixed64 webrtc_session_id = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WatchBroadcast_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WatchBroadcast_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WatchBroadcast_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_WatchBroadcast_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WatchBroadcast_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_WatchBroadcast_Response &>(from));
}


void CBroadcast_WatchBroadcast_Response::MergeFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WatchBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mpd_url(from._internal_mpd_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_hls_m3u8_master_url(from._internal_hls_m3u8_master_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_thumbnail_url(from._internal_thumbnail_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_webrtc_offer_sdp(from._internal_webrtc_offer_sdp());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_webrtc_turn_server(from._internal_webrtc_turn_server());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_cdn_auth_url_parameters(from._internal_cdn_auth_url_parameters());
    }
    if (cached_has_bits & 0x00000080u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000400u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000800u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00001000u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00002000u) {
      heartbeat_interval_ = from.heartbeat_interval_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_rtmp_ = from.is_rtmp_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_webrtc_ = from.is_webrtc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_replay_ = from.is_replay_;
    }
    if (cached_has_bits & 0x00020000u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00040000u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WatchBroadcast_Response::CopyFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WatchBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Response::InternalSwap(CBroadcast_WatchBroadcast_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mpd_url_, lhs_arena,
      &other->mpd_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hls_m3u8_master_url_, lhs_arena,
      &other->hls_m3u8_master_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_url_, lhs_arena,
      &other->thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &webrtc_offer_sdp_, lhs_arena,
      &other->webrtc_offer_sdp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &webrtc_turn_server_, lhs_arena,
      &other->webrtc_turn_server_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cdn_auth_url_parameters_, lhs_arena,
      &other->cdn_auth_url_parameters_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, webrtc_session_id_)
      + sizeof(CBroadcast_WatchBroadcast_Response::webrtc_session_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, broadcast_id_)>(
          reinterpret_cast<char*>(&broadcast_id_),
          reinterpret_cast<char*>(&other->broadcast_id_));
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WatchBroadcast_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[8]);
}

// ===================================================================

class CBroadcast_HeartbeatBroadcast_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_HeartbeatBroadcast_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_viewer_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_representation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CBroadcast_HeartbeatBroadcast_Notification::CBroadcast_HeartbeatBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_HeartbeatBroadcast_Notification)
}
CBroadcast_HeartbeatBroadcast_Notification::CBroadcast_HeartbeatBroadcast_Notification(const CBroadcast_HeartbeatBroadcast_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&representation_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_HeartbeatBroadcast_Notification)
}

inline void CBroadcast_HeartbeatBroadcast_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&representation_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
}

CBroadcast_HeartbeatBroadcast_Notification::~CBroadcast_HeartbeatBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_HeartbeatBroadcast_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_HeartbeatBroadcast_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_HeartbeatBroadcast_Notification::ArenaDtor(void* object) {
  CBroadcast_HeartbeatBroadcast_Notification* _this = reinterpret_cast< CBroadcast_HeartbeatBroadcast_Notification* >(object);
  (void)_this;
}
void CBroadcast_HeartbeatBroadcast_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_HeartbeatBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_HeartbeatBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_HeartbeatBroadcast_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&representation_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(representation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_HeartbeatBroadcast_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_viewer_token(&has_bits);
          viewer_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_representation(&has_bits);
          representation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_HeartbeatBroadcast_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_HeartbeatBroadcast_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_viewer_token(), target);
  }

  // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_representation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_HeartbeatBroadcast_Notification)
  return target;
}

size_t CBroadcast_HeartbeatBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_HeartbeatBroadcast_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_representation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_HeartbeatBroadcast_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_HeartbeatBroadcast_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_HeartbeatBroadcast_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_HeartbeatBroadcast_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_HeartbeatBroadcast_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_HeartbeatBroadcast_Notification &>(from));
}


void CBroadcast_HeartbeatBroadcast_Notification::MergeFrom(const CBroadcast_HeartbeatBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_HeartbeatBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      representation_ = from.representation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_HeartbeatBroadcast_Notification::CopyFrom(const CBroadcast_HeartbeatBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_HeartbeatBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_HeartbeatBroadcast_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_HeartbeatBroadcast_Notification::InternalSwap(CBroadcast_HeartbeatBroadcast_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_HeartbeatBroadcast_Notification, representation_)
      + sizeof(CBroadcast_HeartbeatBroadcast_Notification::representation_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_HeartbeatBroadcast_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_HeartbeatBroadcast_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[9]);
}

// ===================================================================

class CBroadcast_StopWatchingBroadcast_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_StopWatchingBroadcast_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_viewer_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CBroadcast_StopWatchingBroadcast_Notification::CBroadcast_StopWatchingBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_StopWatchingBroadcast_Notification)
}
CBroadcast_StopWatchingBroadcast_Notification::CBroadcast_StopWatchingBroadcast_Notification(const CBroadcast_StopWatchingBroadcast_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StopWatchingBroadcast_Notification)
}

inline void CBroadcast_StopWatchingBroadcast_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
}

CBroadcast_StopWatchingBroadcast_Notification::~CBroadcast_StopWatchingBroadcast_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_StopWatchingBroadcast_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_StopWatchingBroadcast_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_StopWatchingBroadcast_Notification::ArenaDtor(void* object) {
  CBroadcast_StopWatchingBroadcast_Notification* _this = reinterpret_cast< CBroadcast_StopWatchingBroadcast_Notification* >(object);
  (void)_this;
}
void CBroadcast_StopWatchingBroadcast_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_StopWatchingBroadcast_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_StopWatchingBroadcast_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StopWatchingBroadcast_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewer_token_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(viewer_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_StopWatchingBroadcast_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_viewer_token(&has_bits);
          viewer_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_StopWatchingBroadcast_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StopWatchingBroadcast_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_viewer_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StopWatchingBroadcast_Notification)
  return target;
}

size_t CBroadcast_StopWatchingBroadcast_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StopWatchingBroadcast_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_StopWatchingBroadcast_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_StopWatchingBroadcast_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_StopWatchingBroadcast_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_StopWatchingBroadcast_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_StopWatchingBroadcast_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_StopWatchingBroadcast_Notification &>(from));
}


void CBroadcast_StopWatchingBroadcast_Notification::MergeFrom(const CBroadcast_StopWatchingBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StopWatchingBroadcast_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_StopWatchingBroadcast_Notification::CopyFrom(const CBroadcast_StopWatchingBroadcast_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StopWatchingBroadcast_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StopWatchingBroadcast_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_StopWatchingBroadcast_Notification::InternalSwap(CBroadcast_StopWatchingBroadcast_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_StopWatchingBroadcast_Notification, viewer_token_)
      + sizeof(CBroadcast_StopWatchingBroadcast_Notification::viewer_token_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_StopWatchingBroadcast_Notification, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_StopWatchingBroadcast_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[10]);
}

// ===================================================================

class CBroadcast_GetBroadcastStatus_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastStatus_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastStatus_Request)
}
CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request(const CBroadcast_GetBroadcastStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastStatus_Request)
}

inline void CBroadcast_GetBroadcastStatus_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
}

CBroadcast_GetBroadcastStatus_Request::~CBroadcast_GetBroadcastStatus_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastStatus_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastStatus_Request::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastStatus_Request* _this = reinterpret_cast< CBroadcast_GetBroadcastStatus_Request* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastStatus_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastStatus_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastStatus_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_broadcast_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastStatus_Request)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastStatus_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastStatus_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastStatus_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastStatus_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastStatus_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastStatus_Request &>(from));
}


void CBroadcast_GetBroadcastStatus_Request::MergeFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastStatus_Request::CopyFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Request::InternalSwap(CBroadcast_GetBroadcastStatus_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Request, broadcast_id_)
      + sizeof(CBroadcast_GetBroadcastStatus_Request::broadcast_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[11]);
}

// ===================================================================

class CBroadcast_GetBroadcastStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastStatus_Response>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_rtmp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seconds_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_publisher(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_thumbnail_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_uploading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_capturing_vod(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_store_whitelisted(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastStatus_Response)
}
CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response(const CBroadcast_GetBroadcastStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_url()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_store_whitelisted_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(is_store_whitelisted_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastStatus_Response)
}

inline void CBroadcast_GetBroadcastStatus_Response::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_store_whitelisted_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(is_store_whitelisted_));
}

CBroadcast_GetBroadcastStatus_Response::~CBroadcast_GetBroadcastStatus_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastStatus_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastStatus_Response::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastStatus_Response* _this = reinterpret_cast< CBroadcast_GetBroadcastStatus_Response* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastStatus_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_publisher_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(is_publisher_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&is_uploading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_store_whitelisted_) -
        reinterpret_cast<char*>(&is_uploading_)) + sizeof(is_store_whitelisted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastStatus_Response.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_viewers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_viewers(&has_bits);
          num_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 permission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_permission(&has_bits);
          permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rtmp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_rtmp(&has_bits);
          is_rtmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 seconds_delay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_seconds_delay(&has_bits);
          seconds_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_publisher = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_publisher(&has_bits);
          is_publisher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnail_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 update_interval = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_update_interval(&has_bits);
          update_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_uploading = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_uploading(&has_bits);
          is_uploading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_replay = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_replay(&has_bits);
          is_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_capturing_vod = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_capturing_vod(&has_bits);
          is_capturing_vod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_store_whitelisted = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_store_whitelisted(&has_bits);
          is_store_whitelisted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastStatus_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastStatus_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gameid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastStatus_Response.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional uint32 num_viewers = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_viewers(), target);
  }

  // optional int32 permission = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_permission(), target);
  }

  // optional bool is_rtmp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_rtmp(), target);
  }

  // optional int32 seconds_delay = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_seconds_delay(), target);
  }

  // optional bool is_publisher = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_publisher(), target);
  }

  // optional string thumbnail_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastStatus_Response.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_thumbnail_url(), target);
  }

  // optional int32 update_interval = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_update_interval(), target);
  }

  // optional bool is_uploading = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_uploading(), target);
  }

  // optional uint32 duration = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_duration(), target);
  }

  // optional bool is_replay = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_replay(), target);
  }

  // optional bool is_capturing_vod = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_capturing_vod(), target);
  }

  // optional bool is_store_whitelisted = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_store_whitelisted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastStatus_Response)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastStatus_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string thumbnail_url = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_url());
    }

    // optional uint64 gameid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
    }

    // optional uint32 num_viewers = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_viewers());
    }

    // optional int32 permission = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_permission());
    }

    // optional int32 seconds_delay = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seconds_delay());
    }

    // optional bool is_rtmp = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_publisher = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool is_uploading = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_replay = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 update_interval = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_update_interval());
    }

    // optional uint32 duration = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional bool is_capturing_vod = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_store_whitelisted = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastStatus_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastStatus_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastStatus_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastStatus_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastStatus_Response &>(from));
}


void CBroadcast_GetBroadcastStatus_Response::MergeFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_thumbnail_url(from._internal_thumbnail_url());
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000010u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_rtmp_ = from.is_rtmp_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_publisher_ = from.is_publisher_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_uploading_ = from.is_uploading_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_replay_ = from.is_replay_;
    }
    if (cached_has_bits & 0x00000400u) {
      update_interval_ = from.update_interval_;
    }
    if (cached_has_bits & 0x00000800u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_capturing_vod_ = from.is_capturing_vod_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_store_whitelisted_ = from.is_store_whitelisted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastStatus_Response::CopyFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Response::InternalSwap(CBroadcast_GetBroadcastStatus_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_url_, lhs_arena,
      &other->thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, is_store_whitelisted_)
      + sizeof(CBroadcast_GetBroadcastStatus_Response::is_store_whitelisted_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[12]);
}

// ===================================================================

class CBroadcast_GetBroadcastThumbnail_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastThumbnail_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_GetBroadcastThumbnail_Request::CBroadcast_GetBroadcastThumbnail_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastThumbnail_Request)
}
CBroadcast_GetBroadcastThumbnail_Request::CBroadcast_GetBroadcastThumbnail_Request(const CBroadcast_GetBroadcastThumbnail_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastThumbnail_Request)
}

inline void CBroadcast_GetBroadcastThumbnail_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
}

CBroadcast_GetBroadcastThumbnail_Request::~CBroadcast_GetBroadcastThumbnail_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastThumbnail_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastThumbnail_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastThumbnail_Request::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastThumbnail_Request* _this = reinterpret_cast< CBroadcast_GetBroadcastThumbnail_Request* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastThumbnail_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastThumbnail_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastThumbnail_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastThumbnail_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(broadcast_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastThumbnail_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastThumbnail_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastThumbnail_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_broadcast_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastThumbnail_Request)
  return target;
}

size_t CBroadcast_GetBroadcastThumbnail_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastThumbnail_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastThumbnail_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastThumbnail_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastThumbnail_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastThumbnail_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastThumbnail_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastThumbnail_Request &>(from));
}


void CBroadcast_GetBroadcastThumbnail_Request::MergeFrom(const CBroadcast_GetBroadcastThumbnail_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastThumbnail_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastThumbnail_Request::CopyFrom(const CBroadcast_GetBroadcastThumbnail_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastThumbnail_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastThumbnail_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastThumbnail_Request::InternalSwap(CBroadcast_GetBroadcastThumbnail_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastThumbnail_Request, broadcast_id_)
      + sizeof(CBroadcast_GetBroadcastThumbnail_Request::broadcast_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastThumbnail_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastThumbnail_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[13]);
}

// ===================================================================

class CBroadcast_GetBroadcastThumbnail_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastThumbnail_Response>()._has_bits_);
  static void set_has_thumbnail_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CBroadcast_GetBroadcastThumbnail_Response::CBroadcast_GetBroadcastThumbnail_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastThumbnail_Response)
}
CBroadcast_GetBroadcastThumbnail_Response::CBroadcast_GetBroadcastThumbnail_Response(const CBroadcast_GetBroadcastThumbnail_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_url()) {
    thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&update_interval_, &from.update_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&update_interval_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastThumbnail_Response)
}

inline void CBroadcast_GetBroadcastThumbnail_Response::SharedCtor() {
thumbnail_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&update_interval_)) + sizeof(duration_));
}

CBroadcast_GetBroadcastThumbnail_Response::~CBroadcast_GetBroadcastThumbnail_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastThumbnail_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastThumbnail_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  thumbnail_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastThumbnail_Response::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastThumbnail_Response* _this = reinterpret_cast< CBroadcast_GetBroadcastThumbnail_Response* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastThumbnail_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastThumbnail_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastThumbnail_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastThumbnail_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thumbnail_url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&update_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&update_interval_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastThumbnail_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string thumbnail_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 update_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_update_interval(&has_bits);
          update_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_viewers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_viewers(&has_bits);
          num_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastThumbnail_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastThumbnail_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thumbnail_url(), target);
  }

  // optional int32 update_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_update_interval(), target);
  }

  // optional int32 num_viewers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_viewers(), target);
  }

  // optional int32 duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastThumbnail_Response)
  return target;
}

size_t CBroadcast_GetBroadcastThumbnail_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastThumbnail_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string thumbnail_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_url());
    }

    // optional int32 update_interval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_update_interval());
    }

    // optional int32 num_viewers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_viewers());
    }

    // optional int32 duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastThumbnail_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastThumbnail_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastThumbnail_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastThumbnail_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastThumbnail_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastThumbnail_Response &>(from));
}


void CBroadcast_GetBroadcastThumbnail_Response::MergeFrom(const CBroadcast_GetBroadcastThumbnail_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastThumbnail_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_thumbnail_url(from._internal_thumbnail_url());
    }
    if (cached_has_bits & 0x00000002u) {
      update_interval_ = from.update_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastThumbnail_Response::CopyFrom(const CBroadcast_GetBroadcastThumbnail_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastThumbnail_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastThumbnail_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastThumbnail_Response::InternalSwap(CBroadcast_GetBroadcastThumbnail_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_url_, lhs_arena,
      &other->thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastThumbnail_Response, duration_)
      + sizeof(CBroadcast_GetBroadcastThumbnail_Response::duration_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastThumbnail_Response, update_interval_)>(
          reinterpret_cast<char*>(&update_interval_),
          reinterpret_cast<char*>(&other->update_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastThumbnail_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[14]);
}

// ===================================================================

class CBroadcast_InviteToBroadcast_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_InviteToBroadcast_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_approval_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_InviteToBroadcast_Request)
}
CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request(const CBroadcast_InviteToBroadcast_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&approval_response_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_InviteToBroadcast_Request)
}

inline void CBroadcast_InviteToBroadcast_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&approval_response_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
}

CBroadcast_InviteToBroadcast_Request::~CBroadcast_InviteToBroadcast_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_InviteToBroadcast_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_InviteToBroadcast_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_InviteToBroadcast_Request::ArenaDtor(void* object) {
  CBroadcast_InviteToBroadcast_Request* _this = reinterpret_cast< CBroadcast_InviteToBroadcast_Request* >(object);
  (void)_this;
}
void CBroadcast_InviteToBroadcast_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_InviteToBroadcast_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_InviteToBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_InviteToBroadcast_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&approval_response_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(approval_response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_InviteToBroadcast_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool approval_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_approval_response(&has_bits);
          approval_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_InviteToBroadcast_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_InviteToBroadcast_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool approval_response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_approval_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_InviteToBroadcast_Request)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_InviteToBroadcast_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool approval_response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_InviteToBroadcast_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_InviteToBroadcast_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_InviteToBroadcast_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_InviteToBroadcast_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_InviteToBroadcast_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_InviteToBroadcast_Request &>(from));
}


void CBroadcast_InviteToBroadcast_Request::MergeFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_InviteToBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      approval_response_ = from.approval_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_InviteToBroadcast_Request::CopyFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_InviteToBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Request::InternalSwap(CBroadcast_InviteToBroadcast_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Request, approval_response_)
      + sizeof(CBroadcast_InviteToBroadcast_Request::approval_response_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_InviteToBroadcast_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[15]);
}

// ===================================================================

class CBroadcast_InviteToBroadcast_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_InviteToBroadcast_Response>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_InviteToBroadcast_Response)
}
CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response(const CBroadcast_InviteToBroadcast_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_InviteToBroadcast_Response)
}

inline void CBroadcast_InviteToBroadcast_Response::SharedCtor() {
success_ = false;
}

CBroadcast_InviteToBroadcast_Response::~CBroadcast_InviteToBroadcast_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_InviteToBroadcast_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_InviteToBroadcast_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_InviteToBroadcast_Response::ArenaDtor(void* object) {
  CBroadcast_InviteToBroadcast_Response* _this = reinterpret_cast< CBroadcast_InviteToBroadcast_Response* >(object);
  (void)_this;
}
void CBroadcast_InviteToBroadcast_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_InviteToBroadcast_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_InviteToBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_InviteToBroadcast_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_InviteToBroadcast_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_InviteToBroadcast_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_InviteToBroadcast_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_InviteToBroadcast_Response)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_InviteToBroadcast_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_InviteToBroadcast_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_InviteToBroadcast_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_InviteToBroadcast_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_InviteToBroadcast_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_InviteToBroadcast_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_InviteToBroadcast_Response &>(from));
}


void CBroadcast_InviteToBroadcast_Response::MergeFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_InviteToBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_InviteToBroadcast_Response::CopyFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_InviteToBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Response::InternalSwap(CBroadcast_InviteToBroadcast_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_InviteToBroadcast_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[16]);
}

// ===================================================================

class CBroadcast_SendBroadcastStateToServer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_SendBroadcastStateToServer_Request>()._has_bits_);
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_data_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SendBroadcastStateToServer_Request)
}
CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request(const CBroadcast_SendBroadcastStateToServer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  game_data_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_data_config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_data_config()) {
    game_data_config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_data_config(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SendBroadcastStateToServer_Request)
}

inline void CBroadcast_SendBroadcastStateToServer_Request::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_data_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_data_config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
}

CBroadcast_SendBroadcastStateToServer_Request::~CBroadcast_SendBroadcastStateToServer_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_SendBroadcastStateToServer_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_SendBroadcastStateToServer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_data_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SendBroadcastStateToServer_Request::ArenaDtor(void* object) {
  CBroadcast_SendBroadcastStateToServer_Request* _this = reinterpret_cast< CBroadcast_SendBroadcastStateToServer_Request* >(object);
  (void)_this;
}
void CBroadcast_SendBroadcastStateToServer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_SendBroadcastStateToServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_SendBroadcastStateToServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SendBroadcastStateToServer_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_data_config_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(permission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_SendBroadcastStateToServer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_permission(&has_bits);
          permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gameid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_SendBroadcastStateToServer_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_data_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_game_data_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_SendBroadcastStateToServer_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SendBroadcastStateToServer_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gameid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendBroadcastStateToServer_Request.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string game_data_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_data_config().data(), static_cast<int>(this->_internal_game_data_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_game_data_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SendBroadcastStateToServer_Request)
  return target;
}

size_t CBroadcast_SendBroadcastStateToServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SendBroadcastStateToServer_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string game_data_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_data_config());
    }

    // optional uint64 gameid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
    }

    // optional int32 permission = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_permission());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SendBroadcastStateToServer_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_SendBroadcastStateToServer_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SendBroadcastStateToServer_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_SendBroadcastStateToServer_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_SendBroadcastStateToServer_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_SendBroadcastStateToServer_Request &>(from));
}


void CBroadcast_SendBroadcastStateToServer_Request::MergeFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SendBroadcastStateToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_data_config(from._internal_game_data_config());
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_SendBroadcastStateToServer_Request::CopyFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SendBroadcastStateToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendBroadcastStateToServer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_SendBroadcastStateToServer_Request::InternalSwap(CBroadcast_SendBroadcastStateToServer_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_data_config_, lhs_arena,
      &other->game_data_config_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, permission_)
      + sizeof(CBroadcast_SendBroadcastStateToServer_Request::permission_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SendBroadcastStateToServer_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[17]);
}

// ===================================================================

class CBroadcast_SendBroadcastStateToServer_Response::_Internal {
 public:
};

CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SendBroadcastStateToServer_Response)
}
CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response(const CBroadcast_SendBroadcastStateToServer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SendBroadcastStateToServer_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SendBroadcastStateToServer_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SendBroadcastStateToServer_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SendBroadcastStateToServer_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[18]);
}

// ===================================================================

class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}
CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}

inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedCtor() {
broadcast_id_ = uint64_t{0u};
}

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::~CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::ArenaDtor(void* object) {
  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* _this = reinterpret_cast< CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* >(object);
  (void)_this;
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification &>(from));
}


void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_id()) {
    _internal_set_broadcast_id(from._internal_broadcast_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CopyFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InternalSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[19]);
}

// ===================================================================

class CBroadcast_GetBroadcastChatInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastChatInfo_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastChatInfo_Request)
}
CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request(const CBroadcast_GetBroadcastChatInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatInfo_Request)
}

inline void CBroadcast_GetBroadcastChatInfo_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
}

CBroadcast_GetBroadcastChatInfo_Request::~CBroadcast_GetBroadcastChatInfo_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastChatInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastChatInfo_Request::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastChatInfo_Request* _this = reinterpret_cast< CBroadcast_GetBroadcastChatInfo_Request* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastChatInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastChatInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastChatInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cell_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(client_cell_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastChatInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_ip(&has_bits);
          client_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_cell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_client_cell(&has_bits);
          client_cell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastChatInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_broadcast_id(), target);
  }

  // optional uint32 client_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_ip(), target);
  }

  // optional uint32 client_cell = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_client_cell(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatInfo_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_ip());
    }

    // optional uint32 client_cell = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_cell());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastChatInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastChatInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastChatInfo_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastChatInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastChatInfo_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastChatInfo_Request &>(from));
}


void CBroadcast_GetBroadcastChatInfo_Request::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_cell_ = from.client_cell_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastChatInfo_Request::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Request::InternalSwap(CBroadcast_GetBroadcastChatInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, client_cell_)
      + sizeof(CBroadcast_GetBroadcastChatInfo_Request::client_cell_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastChatInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[20]);
}

// ===================================================================

class CBroadcast_GetBroadcastChatInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastChatInfo_Response>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_url_template(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  flair_group_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastChatInfo_Response)
}
CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response(const CBroadcast_GetBroadcastChatInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      flair_group_ids_(from.flair_group_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  view_url_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    view_url_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_view_url_template()) {
    view_url_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_url_template(), 
      GetArenaForAllocation());
  }
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatInfo_Response)
}

inline void CBroadcast_GetBroadcastChatInfo_Response::SharedCtor() {
view_url_template_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  view_url_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_id_ = uint64_t{0u};
}

CBroadcast_GetBroadcastChatInfo_Response::~CBroadcast_GetBroadcastChatInfo_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastChatInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  view_url_template_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatInfo_Response::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastChatInfo_Response* _this = reinterpret_cast< CBroadcast_GetBroadcastChatInfo_Response* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastChatInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastChatInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastChatInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flair_group_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    view_url_template_.ClearNonDefaultToEmpty();
  }
  chat_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastChatInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string view_url_template = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_view_url_template();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 flair_group_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_flair_group_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_flair_group_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastChatInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional string view_url_template = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_view_url_template().data(), static_cast<int>(this->_internal_view_url_template().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_view_url_template(), target);
  }

  // repeated uint32 flair_group_ids = 4;
  for (int i = 0, n = this->_internal_flair_group_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flair_group_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatInfo_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 flair_group_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->flair_group_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_flair_group_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string view_url_template = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_view_url_template());
    }

    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastChatInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastChatInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastChatInfo_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastChatInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastChatInfo_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastChatInfo_Response &>(from));
}


void CBroadcast_GetBroadcastChatInfo_Response::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  flair_group_ids_.MergeFrom(from.flair_group_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_view_url_template(from._internal_view_url_template());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastChatInfo_Response::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Response::InternalSwap(CBroadcast_GetBroadcastChatInfo_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flair_group_ids_.InternalSwap(&other->flair_group_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &view_url_template_, lhs_arena,
      &other->view_url_template_, rhs_arena
  );
  swap(chat_id_, other->chat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastChatInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[21]);
}

// ===================================================================

class CBroadcast_PostChatMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_PostChatMessage_Request>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_PostChatMessage_Request)
}
CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request(const CBroadcast_PostChatMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_PostChatMessage_Request)
}

inline void CBroadcast_PostChatMessage_Request::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(language_));
}

CBroadcast_PostChatMessage_Request::~CBroadcast_PostChatMessage_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_PostChatMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_PostChatMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Request::ArenaDtor(void* object) {
  CBroadcast_PostChatMessage_Request* _this = reinterpret_cast< CBroadcast_PostChatMessage_Request* >(object);
  (void)_this;
}
void CBroadcast_PostChatMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_PostChatMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_PostChatMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_PostChatMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      country_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_PostChatMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_PostChatMessage_Request.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 language = 4 [default = 0, (.description) = "ELanguage of the user posting the message, default is english"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 5 [(.description) = "The two letter country code"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_PostChatMessage_Request.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_PostChatMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_PostChatMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_PostChatMessage_Request.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional uint32 instance_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_instance_id(), target);
  }

  // optional uint32 language = 4 [default = 0, (.description) = "ELanguage of the user posting the message, default is english"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_language(), target);
  }

  // optional string country_code = 5 [(.description) = "The two letter country code"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_PostChatMessage_Request.country_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_PostChatMessage_Request)
  return target;
}

size_t CBroadcast_PostChatMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_PostChatMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string country_code = 5 [(.description) = "The two letter country code"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 instance_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_instance_id());
    }

    // optional uint32 language = 4 [default = 0, (.description) = "ELanguage of the user posting the message, default is english"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_PostChatMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_PostChatMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_PostChatMessage_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_PostChatMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_PostChatMessage_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_PostChatMessage_Request &>(from));
}


void CBroadcast_PostChatMessage_Request::MergeFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_PostChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_PostChatMessage_Request::CopyFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_PostChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Request::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Request::InternalSwap(CBroadcast_PostChatMessage_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_PostChatMessage_Request, language_)
      + sizeof(CBroadcast_PostChatMessage_Request::language_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_PostChatMessage_Request, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_PostChatMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[22]);
}

// ===================================================================

class CBroadcast_PostChatMessage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_PostChatMessage_Response>()._has_bits_);
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_game(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cooldown_time_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_PostChatMessage_Response)
}
CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response(const CBroadcast_PostChatMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&in_game_, &from.in_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_time_seconds_) -
    reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_PostChatMessage_Response)
}

inline void CBroadcast_PostChatMessage_Response::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&in_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cooldown_time_seconds_) -
    reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
}

CBroadcast_PostChatMessage_Response::~CBroadcast_PostChatMessage_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_PostChatMessage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_PostChatMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Response::ArenaDtor(void* object) {
  CBroadcast_PostChatMessage_Response* _this = reinterpret_cast< CBroadcast_PostChatMessage_Response* >(object);
  (void)_this;
}
void CBroadcast_PostChatMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_PostChatMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_PostChatMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_PostChatMessage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&in_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_time_seconds_) -
        reinterpret_cast<char*>(&in_game_)) + sizeof(cooldown_time_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_PostChatMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string persona_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_PostChatMessage_Response.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_in_game(&has_bits);
          in_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cooldown_time_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cooldown_time_seconds(&has_bits);
          cooldown_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_PostChatMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_PostChatMessage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_PostChatMessage_Response.persona_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_persona_name(), target);
  }

  // optional bool in_game = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_in_game(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  // optional int32 cooldown_time_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cooldown_time_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_PostChatMessage_Response)
  return target;
}

size_t CBroadcast_PostChatMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_PostChatMessage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional bool in_game = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

    // optional int32 cooldown_time_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cooldown_time_seconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_PostChatMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_PostChatMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_PostChatMessage_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_PostChatMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_PostChatMessage_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_PostChatMessage_Response &>(from));
}


void CBroadcast_PostChatMessage_Response::MergeFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_PostChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      in_game_ = from.in_game_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      cooldown_time_seconds_ = from.cooldown_time_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_PostChatMessage_Response::CopyFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_PostChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Response::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Response::InternalSwap(CBroadcast_PostChatMessage_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &persona_name_, lhs_arena,
      &other->persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_PostChatMessage_Response, cooldown_time_seconds_)
      + sizeof(CBroadcast_PostChatMessage_Response::cooldown_time_seconds_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_PostChatMessage_Response, in_game_)>(
          reinterpret_cast<char*>(&in_game_),
          reinterpret_cast<char*>(&other->in_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_PostChatMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[23]);
}

// ===================================================================

class CBroadcast_UpdateChatMessageFlair_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_UpdateChatMessageFlair_Request>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_UpdateChatMessageFlair_Request::CBroadcast_UpdateChatMessageFlair_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_UpdateChatMessageFlair_Request)
}
CBroadcast_UpdateChatMessageFlair_Request::CBroadcast_UpdateChatMessageFlair_Request(const CBroadcast_UpdateChatMessageFlair_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_flair()) {
    flair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flair(), 
      GetArenaForAllocation());
  }
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_UpdateChatMessageFlair_Request)
}

inline void CBroadcast_UpdateChatMessageFlair_Request::SharedCtor() {
flair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_id_ = uint64_t{0u};
}

CBroadcast_UpdateChatMessageFlair_Request::~CBroadcast_UpdateChatMessageFlair_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_UpdateChatMessageFlair_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_UpdateChatMessageFlair_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_UpdateChatMessageFlair_Request::ArenaDtor(void* object) {
  CBroadcast_UpdateChatMessageFlair_Request* _this = reinterpret_cast< CBroadcast_UpdateChatMessageFlair_Request* >(object);
  (void)_this;
}
void CBroadcast_UpdateChatMessageFlair_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_UpdateChatMessageFlair_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_UpdateChatMessageFlair_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_UpdateChatMessageFlair_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    flair_.ClearNonDefaultToEmpty();
  }
  chat_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_UpdateChatMessageFlair_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string flair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_UpdateChatMessageFlair_Request.flair");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_UpdateChatMessageFlair_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_UpdateChatMessageFlair_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional string flair = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_flair().data(), static_cast<int>(this->_internal_flair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_UpdateChatMessageFlair_Request.flair");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_UpdateChatMessageFlair_Request)
  return target;
}

size_t CBroadcast_UpdateChatMessageFlair_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_UpdateChatMessageFlair_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string flair = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_flair());
    }

    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_UpdateChatMessageFlair_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_UpdateChatMessageFlair_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_UpdateChatMessageFlair_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_UpdateChatMessageFlair_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_UpdateChatMessageFlair_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_UpdateChatMessageFlair_Request &>(from));
}


void CBroadcast_UpdateChatMessageFlair_Request::MergeFrom(const CBroadcast_UpdateChatMessageFlair_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_UpdateChatMessageFlair_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_flair(from._internal_flair());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_UpdateChatMessageFlair_Request::CopyFrom(const CBroadcast_UpdateChatMessageFlair_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_UpdateChatMessageFlair_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_UpdateChatMessageFlair_Request::IsInitialized() const {
  return true;
}

void CBroadcast_UpdateChatMessageFlair_Request::InternalSwap(CBroadcast_UpdateChatMessageFlair_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flair_, lhs_arena,
      &other->flair_, rhs_arena
  );
  swap(chat_id_, other->chat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_UpdateChatMessageFlair_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[24]);
}

// ===================================================================

class CBroadcast_UpdateChatMessageFlair_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_UpdateChatMessageFlair_Response>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_UpdateChatMessageFlair_Response::CBroadcast_UpdateChatMessageFlair_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_UpdateChatMessageFlair_Response)
}
CBroadcast_UpdateChatMessageFlair_Response::CBroadcast_UpdateChatMessageFlair_Response(const CBroadcast_UpdateChatMessageFlair_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_flair()) {
    flair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flair(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_UpdateChatMessageFlair_Response)
}

inline void CBroadcast_UpdateChatMessageFlair_Response::SharedCtor() {
flair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(result_));
}

CBroadcast_UpdateChatMessageFlair_Response::~CBroadcast_UpdateChatMessageFlair_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_UpdateChatMessageFlair_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_UpdateChatMessageFlair_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_UpdateChatMessageFlair_Response::ArenaDtor(void* object) {
  CBroadcast_UpdateChatMessageFlair_Response* _this = reinterpret_cast< CBroadcast_UpdateChatMessageFlair_Response* >(object);
  (void)_this;
}
void CBroadcast_UpdateChatMessageFlair_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_UpdateChatMessageFlair_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_UpdateChatMessageFlair_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_UpdateChatMessageFlair_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    flair_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_UpdateChatMessageFlair_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 chat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string flair = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_flair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_UpdateChatMessageFlair_Response.flair");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_UpdateChatMessageFlair_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_UpdateChatMessageFlair_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional fixed64 chat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_chat_id(), target);
  }

  // optional string flair = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_flair().data(), static_cast<int>(this->_internal_flair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_UpdateChatMessageFlair_Response.flair");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_flair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_UpdateChatMessageFlair_Response)
  return target;
}

size_t CBroadcast_UpdateChatMessageFlair_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_UpdateChatMessageFlair_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string flair = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_flair());
    }

    // optional fixed64 chat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 result = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_UpdateChatMessageFlair_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_UpdateChatMessageFlair_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_UpdateChatMessageFlair_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_UpdateChatMessageFlair_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_UpdateChatMessageFlair_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_UpdateChatMessageFlair_Response &>(from));
}


void CBroadcast_UpdateChatMessageFlair_Response::MergeFrom(const CBroadcast_UpdateChatMessageFlair_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_UpdateChatMessageFlair_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_flair(from._internal_flair());
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_UpdateChatMessageFlair_Response::CopyFrom(const CBroadcast_UpdateChatMessageFlair_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_UpdateChatMessageFlair_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_UpdateChatMessageFlair_Response::IsInitialized() const {
  return true;
}

void CBroadcast_UpdateChatMessageFlair_Response::InternalSwap(CBroadcast_UpdateChatMessageFlair_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flair_, lhs_arena,
      &other->flair_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_UpdateChatMessageFlair_Response, result_)
      + sizeof(CBroadcast_UpdateChatMessageFlair_Response::result_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_UpdateChatMessageFlair_Response, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_UpdateChatMessageFlair_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[25]);
}

// ===================================================================

class CBroadcast_MuteBroadcastChatUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_MuteBroadcastChatUser_Request>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_muted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_MuteBroadcastChatUser_Request)
}
CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request(const CBroadcast_MuteBroadcastChatUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_MuteBroadcastChatUser_Request)
}

inline void CBroadcast_MuteBroadcastChatUser_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&muted_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
}

CBroadcast_MuteBroadcastChatUser_Request::~CBroadcast_MuteBroadcastChatUser_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_MuteBroadcastChatUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_MuteBroadcastChatUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_MuteBroadcastChatUser_Request::ArenaDtor(void* object) {
  CBroadcast_MuteBroadcastChatUser_Request* _this = reinterpret_cast< CBroadcast_MuteBroadcastChatUser_Request* >(object);
  (void)_this;
}
void CBroadcast_MuteBroadcastChatUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_MuteBroadcastChatUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_MuteBroadcastChatUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_MuteBroadcastChatUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&muted_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_MuteBroadcastChatUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 user_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_user_steamid(&has_bits);
          user_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool muted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_muted(&has_bits);
          muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_MuteBroadcastChatUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_MuteBroadcastChatUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_steamid(), target);
  }

  // optional bool muted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_MuteBroadcastChatUser_Request)
  return target;
}

size_t CBroadcast_MuteBroadcastChatUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_MuteBroadcastChatUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool muted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_MuteBroadcastChatUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_MuteBroadcastChatUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_MuteBroadcastChatUser_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_MuteBroadcastChatUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_MuteBroadcastChatUser_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_MuteBroadcastChatUser_Request &>(from));
}


void CBroadcast_MuteBroadcastChatUser_Request::MergeFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_MuteBroadcastChatUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      muted_ = from.muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_MuteBroadcastChatUser_Request::CopyFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_MuteBroadcastChatUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_MuteBroadcastChatUser_Request::IsInitialized() const {
  return true;
}

void CBroadcast_MuteBroadcastChatUser_Request::InternalSwap(CBroadcast_MuteBroadcastChatUser_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Request, muted_)
      + sizeof(CBroadcast_MuteBroadcastChatUser_Request::muted_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Request, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_MuteBroadcastChatUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[26]);
}

// ===================================================================

class CBroadcast_MuteBroadcastChatUser_Response::_Internal {
 public:
};

CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_MuteBroadcastChatUser_Response)
}
CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response(const CBroadcast_MuteBroadcastChatUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_MuteBroadcastChatUser_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_MuteBroadcastChatUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_MuteBroadcastChatUser_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_MuteBroadcastChatUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[27]);
}

// ===================================================================

class CBroadcast_RemoveUserChatText_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_RemoveUserChatText_Request>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_RemoveUserChatText_Request)
}
CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request(const CBroadcast_RemoveUserChatText_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_RemoveUserChatText_Request)
}

inline void CBroadcast_RemoveUserChatText_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
}

CBroadcast_RemoveUserChatText_Request::~CBroadcast_RemoveUserChatText_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_RemoveUserChatText_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_RemoveUserChatText_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_RemoveUserChatText_Request::ArenaDtor(void* object) {
  CBroadcast_RemoveUserChatText_Request* _this = reinterpret_cast< CBroadcast_RemoveUserChatText_Request* >(object);
  (void)_this;
}
void CBroadcast_RemoveUserChatText_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_RemoveUserChatText_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_RemoveUserChatText_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_RemoveUserChatText_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_steamid_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_RemoveUserChatText_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 user_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_user_steamid(&has_bits);
          user_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_RemoveUserChatText_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_RemoveUserChatText_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_RemoveUserChatText_Request)
  return target;
}

size_t CBroadcast_RemoveUserChatText_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_RemoveUserChatText_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 chat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_RemoveUserChatText_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_RemoveUserChatText_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_RemoveUserChatText_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_RemoveUserChatText_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_RemoveUserChatText_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_RemoveUserChatText_Request &>(from));
}


void CBroadcast_RemoveUserChatText_Request::MergeFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_RemoveUserChatText_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_RemoveUserChatText_Request::CopyFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_RemoveUserChatText_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_RemoveUserChatText_Request::IsInitialized() const {
  return true;
}

void CBroadcast_RemoveUserChatText_Request::InternalSwap(CBroadcast_RemoveUserChatText_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Request, user_steamid_)
      + sizeof(CBroadcast_RemoveUserChatText_Request::user_steamid_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Request, chat_id_)>(
          reinterpret_cast<char*>(&chat_id_),
          reinterpret_cast<char*>(&other->chat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_RemoveUserChatText_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[28]);
}

// ===================================================================

class CBroadcast_RemoveUserChatText_Response::_Internal {
 public:
};

CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_RemoveUserChatText_Response)
}
CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response(const CBroadcast_RemoveUserChatText_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_RemoveUserChatText_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_RemoveUserChatText_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_RemoveUserChatText_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_RemoveUserChatText_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[29]);
}

// ===================================================================

class CBroadcast_GetBroadcastChatUserNames_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastChatUserNames_Request>()._has_bits_);
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_steamid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastChatUserNames_Request)
}
CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request(const CBroadcast_GetBroadcastChatUserNames_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      user_steamid_(from.user_steamid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatUserNames_Request)
}

inline void CBroadcast_GetBroadcastChatUserNames_Request::SharedCtor() {
chat_id_ = uint64_t{0u};
}

CBroadcast_GetBroadcastChatUserNames_Request::~CBroadcast_GetBroadcastChatUserNames_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatUserNames_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastChatUserNames_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastChatUserNames_Request::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastChatUserNames_Request* _this = reinterpret_cast< CBroadcast_GetBroadcastChatUserNames_Request* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastChatUserNames_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastChatUserNames_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastChatUserNames_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatUserNames_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_steamid_.Clear();
  chat_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastChatUserNames_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 chat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 user_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_user_steamid(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_user_steamid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastChatUserNames_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatUserNames_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_chat_id(), target);
  }

  // repeated fixed64 user_steamid = 2;
  for (int i = 0, n = this->_internal_user_steamid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_steamid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatUserNames_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatUserNames_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 user_steamid = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_user_steamid_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_user_steamid_size());
    total_size += data_size;
  }

  // optional fixed64 chat_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastChatUserNames_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastChatUserNames_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastChatUserNames_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastChatUserNames_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastChatUserNames_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastChatUserNames_Request &>(from));
}


void CBroadcast_GetBroadcastChatUserNames_Request::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_steamid_.MergeFrom(from.user_steamid_);
  if (from._internal_has_chat_id()) {
    _internal_set_chat_id(from._internal_chat_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastChatUserNames_Request::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Request::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_steamid_.InternalSwap(&other->user_steamid_);
  swap(chat_id_, other->chat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastChatUserNames_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[30]);
}

// ===================================================================

class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}
CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    persona_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona()) {
    persona_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona(), 
      GetArenaForAllocation());
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}

inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedCtor() {
persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  persona_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steam_id_ = uint64_t{0u};
}

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::~CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  persona_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* _this = reinterpret_cast< CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_.ClearNonDefaultToEmpty();
  }
  steam_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1 [(.allow_field_named_steam_id) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string persona = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1 [(.allow_field_named_steam_id) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona().data(), static_cast<int>(this->_internal_persona().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string persona = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona());
    }

    // optional fixed64 steam_id = 1 [(.allow_field_named_steam_id) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName &>(from));
}


void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona(from._internal_persona());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &persona_, lhs_arena,
      &other->persona_, rhs_arena
  );
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[31]);
}

// ===================================================================

class CBroadcast_GetBroadcastChatUserNames_Response::_Internal {
 public:
};

CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  persona_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastChatUserNames_Response)
}
CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response(const CBroadcast_GetBroadcastChatUserNames_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      persona_names_(from.persona_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastChatUserNames_Response)
}

inline void CBroadcast_GetBroadcastChatUserNames_Response::SharedCtor() {
}

CBroadcast_GetBroadcastChatUserNames_Response::~CBroadcast_GetBroadcastChatUserNames_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastChatUserNames_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastChatUserNames_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastChatUserNames_Response::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastChatUserNames_Response* _this = reinterpret_cast< CBroadcast_GetBroadcastChatUserNames_Response* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastChatUserNames_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastChatUserNames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastChatUserNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastChatUserNames_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persona_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastChatUserNames_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_persona_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastChatUserNames_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastChatUserNames_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_persona_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_persona_names(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastChatUserNames_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastChatUserNames_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  total_size += 1UL * this->_internal_persona_names_size();
  for (const auto& msg : this->persona_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastChatUserNames_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastChatUserNames_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastChatUserNames_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastChatUserNames_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastChatUserNames_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastChatUserNames_Response &>(from));
}


void CBroadcast_GetBroadcastChatUserNames_Response::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastChatUserNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  persona_names_.MergeFrom(from.persona_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastChatUserNames_Response::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastChatUserNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  persona_names_.InternalSwap(&other->persona_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastChatUserNames_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[32]);
}

// ===================================================================

class CBroadcast_StartBuildClip_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_StartBuildClip_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_segments(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clip_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_StartBuildClip_Request::CBroadcast_StartBuildClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_StartBuildClip_Request)
}
CBroadcast_StartBuildClip_Request::CBroadcast_StartBuildClip_Request(const CBroadcast_StartBuildClip_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    clip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clip_description()) {
    clip_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_segments_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(num_segments_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StartBuildClip_Request)
}

inline void CBroadcast_StartBuildClip_Request::SharedCtor() {
clip_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_segments_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(num_segments_));
}

CBroadcast_StartBuildClip_Request::~CBroadcast_StartBuildClip_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_StartBuildClip_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_StartBuildClip_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  clip_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_StartBuildClip_Request::ArenaDtor(void* object) {
  CBroadcast_StartBuildClip_Request* _this = reinterpret_cast< CBroadcast_StartBuildClip_Request* >(object);
  (void)_this;
}
void CBroadcast_StartBuildClip_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_StartBuildClip_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_StartBuildClip_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StartBuildClip_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clip_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_segments_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(num_segments_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_StartBuildClip_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_broadcast_session_id(&has_bits);
          broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_first_segment(&has_bits);
          first_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_segments(&has_bits);
          num_segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string clip_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_clip_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_StartBuildClip_Request.clip_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_StartBuildClip_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StartBuildClip_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 broadcast_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_broadcast_session_id(), target);
  }

  // optional int32 first_segment = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_first_segment(), target);
  }

  // optional int32 num_segments = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_segments(), target);
  }

  // optional string clip_description = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_description().data(), static_cast<int>(this->_internal_clip_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_StartBuildClip_Request.clip_description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_clip_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StartBuildClip_Request)
  return target;
}

size_t CBroadcast_StartBuildClip_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StartBuildClip_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string clip_description = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_description());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 first_segment = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_first_segment());
    }

    // optional int32 num_segments = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_segments());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_StartBuildClip_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_StartBuildClip_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_StartBuildClip_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_StartBuildClip_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_StartBuildClip_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_StartBuildClip_Request &>(from));
}


void CBroadcast_StartBuildClip_Request::MergeFrom(const CBroadcast_StartBuildClip_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StartBuildClip_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_description(from._internal_clip_description());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_segment_ = from.first_segment_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_segments_ = from.num_segments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_StartBuildClip_Request::CopyFrom(const CBroadcast_StartBuildClip_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StartBuildClip_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBuildClip_Request::IsInitialized() const {
  return true;
}

void CBroadcast_StartBuildClip_Request::InternalSwap(CBroadcast_StartBuildClip_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clip_description_, lhs_arena,
      &other->clip_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_StartBuildClip_Request, num_segments_)
      + sizeof(CBroadcast_StartBuildClip_Request::num_segments_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_StartBuildClip_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_StartBuildClip_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[33]);
}

// ===================================================================

class CBroadcast_StartBuildClip_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_StartBuildClip_Response>()._has_bits_);
  static void set_has_broadcast_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_StartBuildClip_Response::CBroadcast_StartBuildClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_StartBuildClip_Response)
}
CBroadcast_StartBuildClip_Response::CBroadcast_StartBuildClip_Response(const CBroadcast_StartBuildClip_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_clip_id_ = from.broadcast_clip_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StartBuildClip_Response)
}

inline void CBroadcast_StartBuildClip_Response::SharedCtor() {
broadcast_clip_id_ = uint64_t{0u};
}

CBroadcast_StartBuildClip_Response::~CBroadcast_StartBuildClip_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_StartBuildClip_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_StartBuildClip_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_StartBuildClip_Response::ArenaDtor(void* object) {
  CBroadcast_StartBuildClip_Response* _this = reinterpret_cast< CBroadcast_StartBuildClip_Response* >(object);
  (void)_this;
}
void CBroadcast_StartBuildClip_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_StartBuildClip_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_StartBuildClip_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StartBuildClip_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_StartBuildClip_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_clip_id(&has_bits);
          broadcast_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_StartBuildClip_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StartBuildClip_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StartBuildClip_Response)
  return target;
}

size_t CBroadcast_StartBuildClip_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StartBuildClip_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_StartBuildClip_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_StartBuildClip_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_StartBuildClip_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_StartBuildClip_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_StartBuildClip_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_StartBuildClip_Response &>(from));
}


void CBroadcast_StartBuildClip_Response::MergeFrom(const CBroadcast_StartBuildClip_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StartBuildClip_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_clip_id()) {
    _internal_set_broadcast_clip_id(from._internal_broadcast_clip_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_StartBuildClip_Response::CopyFrom(const CBroadcast_StartBuildClip_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StartBuildClip_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBuildClip_Response::IsInitialized() const {
  return true;
}

void CBroadcast_StartBuildClip_Response::InternalSwap(CBroadcast_StartBuildClip_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_clip_id_, other->broadcast_clip_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_StartBuildClip_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[34]);
}

// ===================================================================

class CBroadcast_GetBuildClipStatus_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBuildClipStatus_Request>()._has_bits_);
  static void set_has_broadcast_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_GetBuildClipStatus_Request::CBroadcast_GetBuildClipStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBuildClipStatus_Request)
}
CBroadcast_GetBuildClipStatus_Request::CBroadcast_GetBuildClipStatus_Request(const CBroadcast_GetBuildClipStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_clip_id_ = from.broadcast_clip_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBuildClipStatus_Request)
}

inline void CBroadcast_GetBuildClipStatus_Request::SharedCtor() {
broadcast_clip_id_ = uint64_t{0u};
}

CBroadcast_GetBuildClipStatus_Request::~CBroadcast_GetBuildClipStatus_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBuildClipStatus_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBuildClipStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBuildClipStatus_Request::ArenaDtor(void* object) {
  CBroadcast_GetBuildClipStatus_Request* _this = reinterpret_cast< CBroadcast_GetBuildClipStatus_Request* >(object);
  (void)_this;
}
void CBroadcast_GetBuildClipStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBuildClipStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBuildClipStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBuildClipStatus_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBuildClipStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_clip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_clip_id(&has_bits);
          broadcast_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBuildClipStatus_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBuildClipStatus_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_clip_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBuildClipStatus_Request)
  return target;
}

size_t CBroadcast_GetBuildClipStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBuildClipStatus_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_clip_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBuildClipStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBuildClipStatus_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBuildClipStatus_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBuildClipStatus_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBuildClipStatus_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBuildClipStatus_Request &>(from));
}


void CBroadcast_GetBuildClipStatus_Request::MergeFrom(const CBroadcast_GetBuildClipStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBuildClipStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_clip_id()) {
    _internal_set_broadcast_clip_id(from._internal_broadcast_clip_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBuildClipStatus_Request::CopyFrom(const CBroadcast_GetBuildClipStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBuildClipStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBuildClipStatus_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBuildClipStatus_Request::InternalSwap(CBroadcast_GetBuildClipStatus_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_clip_id_, other->broadcast_clip_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBuildClipStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[35]);
}

// ===================================================================

class CBroadcast_GetBuildClipStatus_Response::_Internal {
 public:
};

CBroadcast_GetBuildClipStatus_Response::CBroadcast_GetBuildClipStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBuildClipStatus_Response)
}
CBroadcast_GetBuildClipStatus_Response::CBroadcast_GetBuildClipStatus_Response(const CBroadcast_GetBuildClipStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBuildClipStatus_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBuildClipStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBuildClipStatus_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBuildClipStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[36]);
}

// ===================================================================

class CBroadcast_SetClipDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_SetClipDetails_Request>()._has_bits_);
  static void set_has_broadcast_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_video_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_SetClipDetails_Request::CBroadcast_SetClipDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SetClipDetails_Request)
}
CBroadcast_SetClipDetails_Request::CBroadcast_SetClipDetails_Request(const CBroadcast_SetClipDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  video_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_video_description()) {
    video_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_clip_id_, &from.broadcast_clip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SetClipDetails_Request)
}

inline void CBroadcast_SetClipDetails_Request::SharedCtor() {
video_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_clip_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(end_time_));
}

CBroadcast_SetClipDetails_Request::~CBroadcast_SetClipDetails_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_SetClipDetails_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_SetClipDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  video_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SetClipDetails_Request::ArenaDtor(void* object) {
  CBroadcast_SetClipDetails_Request* _this = reinterpret_cast< CBroadcast_SetClipDetails_Request* >(object);
  (void)_this;
}
void CBroadcast_SetClipDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_SetClipDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_SetClipDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SetClipDetails_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    video_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&broadcast_clip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_SetClipDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 broadcast_clip_id = 1 [(.description) = "Clip ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_broadcast_clip_id(&has_bits);
          broadcast_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_time = 2 [(.description) = "start time of the clip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_time = 3 [(.description) = "end time of the clip"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string video_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_video_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_SetClipDetails_Request.video_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_SetClipDetails_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SetClipDetails_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 broadcast_clip_id = 1 [(.description) = "Clip ID"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_broadcast_clip_id(), target);
  }

  // optional uint32 start_time = 2 [(.description) = "start time of the clip"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_time(), target);
  }

  // optional uint32 end_time = 3 [(.description) = "end time of the clip"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_time(), target);
  }

  // optional string video_description = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_description().data(), static_cast<int>(this->_internal_video_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_SetClipDetails_Request.video_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_video_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SetClipDetails_Request)
  return target;
}

size_t CBroadcast_SetClipDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SetClipDetails_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string video_description = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_description());
    }

    // optional uint64 broadcast_clip_id = 1 [(.description) = "Clip ID"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_broadcast_clip_id());
    }

    // optional uint32 start_time = 2 [(.description) = "start time of the clip"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
    }

    // optional uint32 end_time = 3 [(.description) = "end time of the clip"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SetClipDetails_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_SetClipDetails_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SetClipDetails_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_SetClipDetails_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_SetClipDetails_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_SetClipDetails_Request &>(from));
}


void CBroadcast_SetClipDetails_Request::MergeFrom(const CBroadcast_SetClipDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SetClipDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_video_description(from._internal_video_description());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_clip_id_ = from.broadcast_clip_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_SetClipDetails_Request::CopyFrom(const CBroadcast_SetClipDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SetClipDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SetClipDetails_Request::IsInitialized() const {
  return true;
}

void CBroadcast_SetClipDetails_Request::InternalSwap(CBroadcast_SetClipDetails_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &video_description_, lhs_arena,
      &other->video_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_SetClipDetails_Request, end_time_)
      + sizeof(CBroadcast_SetClipDetails_Request::end_time_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_SetClipDetails_Request, broadcast_clip_id_)>(
          reinterpret_cast<char*>(&broadcast_clip_id_),
          reinterpret_cast<char*>(&other->broadcast_clip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SetClipDetails_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[37]);
}

// ===================================================================

class CBroadcast_SetClipDetails_Response::_Internal {
 public:
};

CBroadcast_SetClipDetails_Response::CBroadcast_SetClipDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SetClipDetails_Response)
}
CBroadcast_SetClipDetails_Response::CBroadcast_SetClipDetails_Response(const CBroadcast_SetClipDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SetClipDetails_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SetClipDetails_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SetClipDetails_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SetClipDetails_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[38]);
}

// ===================================================================

class CBroadcast_GetClipDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetClipDetails_Request>()._has_bits_);
  static void set_has_broadcast_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_GetClipDetails_Request::CBroadcast_GetClipDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetClipDetails_Request)
}
CBroadcast_GetClipDetails_Request::CBroadcast_GetClipDetails_Request(const CBroadcast_GetClipDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_clip_id_ = from.broadcast_clip_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetClipDetails_Request)
}

inline void CBroadcast_GetClipDetails_Request::SharedCtor() {
broadcast_clip_id_ = uint64_t{0u};
}

CBroadcast_GetClipDetails_Request::~CBroadcast_GetClipDetails_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetClipDetails_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetClipDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetClipDetails_Request::ArenaDtor(void* object) {
  CBroadcast_GetClipDetails_Request* _this = reinterpret_cast< CBroadcast_GetClipDetails_Request* >(object);
  (void)_this;
}
void CBroadcast_GetClipDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetClipDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetClipDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetClipDetails_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetClipDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 broadcast_clip_id = 1 [(.description) = "List of clip IDs we want details for"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_broadcast_clip_id(&has_bits);
          broadcast_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetClipDetails_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetClipDetails_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 broadcast_clip_id = 1 [(.description) = "List of clip IDs we want details for"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_broadcast_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetClipDetails_Request)
  return target;
}

size_t CBroadcast_GetClipDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetClipDetails_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 broadcast_clip_id = 1 [(.description) = "List of clip IDs we want details for"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_broadcast_clip_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetClipDetails_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetClipDetails_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetClipDetails_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetClipDetails_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetClipDetails_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetClipDetails_Request &>(from));
}


void CBroadcast_GetClipDetails_Request::MergeFrom(const CBroadcast_GetClipDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetClipDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_clip_id()) {
    _internal_set_broadcast_clip_id(from._internal_broadcast_clip_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetClipDetails_Request::CopyFrom(const CBroadcast_GetClipDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetClipDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetClipDetails_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetClipDetails_Request::InternalSwap(CBroadcast_GetClipDetails_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_clip_id_, other->broadcast_clip_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetClipDetails_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[39]);
}

// ===================================================================

class CBroadcast_GetClipDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetClipDetails_Response>()._has_bits_);
  static void set_has_broadcast_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accountid_broadcaster(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_accountid_clipmaker(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_video_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_length_milliseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thumbnail_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_GetClipDetails_Response::CBroadcast_GetClipDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetClipDetails_Response)
}
CBroadcast_GetClipDetails_Response::CBroadcast_GetClipDetails_Response(const CBroadcast_GetClipDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  video_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_video_description()) {
    video_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_description(), 
      GetArenaForAllocation());
  }
  thumbnail_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_path()) {
    thumbnail_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_clip_id_, &from.broadcast_clip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_milliseconds_) -
    reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(length_milliseconds_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetClipDetails_Response)
}

inline void CBroadcast_GetClipDetails_Response::SharedCtor() {
video_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_clip_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_milliseconds_) -
    reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(length_milliseconds_));
}

CBroadcast_GetClipDetails_Response::~CBroadcast_GetClipDetails_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetClipDetails_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetClipDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  video_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetClipDetails_Response::ArenaDtor(void* object) {
  CBroadcast_GetClipDetails_Response* _this = reinterpret_cast< CBroadcast_GetClipDetails_Response* >(object);
  (void)_this;
}
void CBroadcast_GetClipDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetClipDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetClipDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetClipDetails_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      video_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&broadcast_clip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_clipmaker_) -
        reinterpret_cast<char*>(&broadcast_clip_id_)) + sizeof(accountid_clipmaker_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_milliseconds_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(length_milliseconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetClipDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 broadcast_clip_id = 1 [(.description) = "broadcast clip ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_broadcast_clip_id(&has_bits);
          broadcast_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 video_id = 2 [(.description) = "matching unique video ID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_video_id(&has_bits);
          video_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 channel_id = 3 [(.description) = "Broadcast Channel ID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 4 [(.description) = "App ID stream is tagged with"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_broadcaster = 5 [(.description) = "Account ID of broadcaster"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_accountid_broadcaster(&has_bits);
          accountid_broadcaster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid_clipmaker = 6 [(.description) = "Account ID of clip-maker"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_accountid_clipmaker(&has_bits);
          accountid_clipmaker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string video_description = 7 [(.description) = "Short name or description of this clip"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_video_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetClipDetails_Response.video_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_time = 8 [(.description) = "Wall time clip was broadcasted live"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length_milliseconds = 9 [(.description) = "length of video in MS"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_length_milliseconds(&has_bits);
          length_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnail_path = 10 [(.description) = "Path for thumbnail URL"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_thumbnail_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetClipDetails_Response.thumbnail_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetClipDetails_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetClipDetails_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 broadcast_clip_id = 1 [(.description) = "broadcast clip ID"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_broadcast_clip_id(), target);
  }

  // optional uint64 video_id = 2 [(.description) = "matching unique video ID"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_video_id(), target);
  }

  // optional uint64 channel_id = 3 [(.description) = "Broadcast Channel ID"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_channel_id(), target);
  }

  // optional uint32 app_id = 4 [(.description) = "App ID stream is tagged with"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_app_id(), target);
  }

  // optional uint32 accountid_broadcaster = 5 [(.description) = "Account ID of broadcaster"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_accountid_broadcaster(), target);
  }

  // optional uint32 accountid_clipmaker = 6 [(.description) = "Account ID of clip-maker"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_accountid_clipmaker(), target);
  }

  // optional string video_description = 7 [(.description) = "Short name or description of this clip"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_description().data(), static_cast<int>(this->_internal_video_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetClipDetails_Response.video_description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_video_description(), target);
  }

  // optional uint32 start_time = 8 [(.description) = "Wall time clip was broadcasted live"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_start_time(), target);
  }

  // optional uint32 length_milliseconds = 9 [(.description) = "length of video in MS"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_length_milliseconds(), target);
  }

  // optional string thumbnail_path = 10 [(.description) = "Path for thumbnail URL"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_path().data(), static_cast<int>(this->_internal_thumbnail_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetClipDetails_Response.thumbnail_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_thumbnail_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetClipDetails_Response)
  return target;
}

size_t CBroadcast_GetClipDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetClipDetails_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string video_description = 7 [(.description) = "Short name or description of this clip"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_description());
    }

    // optional string thumbnail_path = 10 [(.description) = "Path for thumbnail URL"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_path());
    }

    // optional uint64 broadcast_clip_id = 1 [(.description) = "broadcast clip ID"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_broadcast_clip_id());
    }

    // optional uint64 video_id = 2 [(.description) = "matching unique video ID"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_video_id());
    }

    // optional uint64 channel_id = 3 [(.description) = "Broadcast Channel ID"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_channel_id());
    }

    // optional uint32 app_id = 4 [(.description) = "App ID stream is tagged with"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 accountid_broadcaster = 5 [(.description) = "Account ID of broadcaster"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_broadcaster());
    }

    // optional uint32 accountid_clipmaker = 6 [(.description) = "Account ID of clip-maker"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_clipmaker());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 start_time = 8 [(.description) = "Wall time clip was broadcasted live"];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
    }

    // optional uint32 length_milliseconds = 9 [(.description) = "length of video in MS"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_length_milliseconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetClipDetails_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetClipDetails_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetClipDetails_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetClipDetails_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetClipDetails_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetClipDetails_Response &>(from));
}


void CBroadcast_GetClipDetails_Response::MergeFrom(const CBroadcast_GetClipDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetClipDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_video_description(from._internal_video_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_thumbnail_path(from._internal_thumbnail_path());
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_clip_id_ = from.broadcast_clip_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_id_ = from.video_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      accountid_broadcaster_ = from.accountid_broadcaster_;
    }
    if (cached_has_bits & 0x00000080u) {
      accountid_clipmaker_ = from.accountid_clipmaker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      length_milliseconds_ = from.length_milliseconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetClipDetails_Response::CopyFrom(const CBroadcast_GetClipDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetClipDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetClipDetails_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetClipDetails_Response::InternalSwap(CBroadcast_GetClipDetails_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &video_description_, lhs_arena,
      &other->video_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_path_, lhs_arena,
      &other->thumbnail_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetClipDetails_Response, length_milliseconds_)
      + sizeof(CBroadcast_GetClipDetails_Response::length_milliseconds_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetClipDetails_Response, broadcast_clip_id_)>(
          reinterpret_cast<char*>(&broadcast_clip_id_),
          reinterpret_cast<char*>(&other->broadcast_clip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetClipDetails_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[40]);
}

// ===================================================================

class CBroadcast_SetRTMPInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_SetRTMPInfo_Request>()._has_bits_);
  static void set_has_broadcast_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_token(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_broadcast_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_required_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_broadcast_chat_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_broadcast_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_chat_rate_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enable_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_partner_chat_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wordban_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_SetRTMPInfo_Request::CBroadcast_SetRTMPInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SetRTMPInfo_Request)
}
CBroadcast_SetRTMPInfo_Request::CBroadcast_SetRTMPInfo_Request(const CBroadcast_SetRTMPInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wordban_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_wordban_list()) {
    wordban_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wordban_list(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_permission_, &from.broadcast_permission_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_rate_limit_) -
    reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(chat_rate_limit_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SetRTMPInfo_Request)
}

inline void CBroadcast_SetRTMPInfo_Request::SharedCtor() {
wordban_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_permission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_rate_limit_) -
    reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(chat_rate_limit_));
}

CBroadcast_SetRTMPInfo_Request::~CBroadcast_SetRTMPInfo_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_SetRTMPInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_SetRTMPInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  wordban_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SetRTMPInfo_Request::ArenaDtor(void* object) {
  CBroadcast_SetRTMPInfo_Request* _this = reinterpret_cast< CBroadcast_SetRTMPInfo_Request* >(object);
  (void)_this;
}
void CBroadcast_SetRTMPInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_SetRTMPInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_SetRTMPInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SetRTMPInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    wordban_list_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&broadcast_permission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(steamid_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&update_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_rate_limit_) -
        reinterpret_cast<char*>(&update_token_)) + sizeof(chat_rate_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_SetRTMPInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 broadcast_permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_broadcast_permission(&has_bits);
          broadcast_permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool update_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_update_token(&has_bits);
          update_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_broadcast_delay(&has_bits);
          broadcast_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_required_app_id(&has_bits);
          required_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastChatPermission_IsValid(val))) {
            _internal_set_broadcast_chat_permission(static_cast<::EBroadcastChatPermission>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_buffer = 7 [(.description) = "Previous seconds we keep of the stream available"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_broadcast_buffer(&has_bits);
          broadcast_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 8 [(.description) = "broadcaster steamID if not logged-in user"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_rate_limit = 9 [(.description) = "Seconds required between chat messages"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_chat_rate_limit(&has_bits);
          chat_rate_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_replay = 10 [(.description) = "Enable replay of last upload"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_enable_replay(&has_bits);
          enable_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_partner_chat_only = 11 [(.description) = "When true, then only steamwork partner can create chat messages."];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_partner_chat_only(&has_bits);
          is_partner_chat_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string wordban_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_wordban_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_SetRTMPInfo_Request.wordban_list");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_SetRTMPInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SetRTMPInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 broadcast_permission = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_broadcast_permission(), target);
  }

  // optional bool update_token = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_update_token(), target);
  }

  // optional int32 broadcast_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_broadcast_delay(), target);
  }

  // optional uint32 app_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_app_id(), target);
  }

  // optional uint32 required_app_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_required_app_id(), target);
  }

  // optional .EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_broadcast_chat_permission(), target);
  }

  // optional int32 broadcast_buffer = 7 [(.description) = "Previous seconds we keep of the stream available"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_broadcast_buffer(), target);
  }

  // optional fixed64 steamid = 8 [(.description) = "broadcaster steamID if not logged-in user"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_steamid(), target);
  }

  // optional uint32 chat_rate_limit = 9 [(.description) = "Seconds required between chat messages"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_chat_rate_limit(), target);
  }

  // optional bool enable_replay = 10 [(.description) = "Enable replay of last upload"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_replay(), target);
  }

  // optional bool is_partner_chat_only = 11 [(.description) = "When true, then only steamwork partner can create chat messages."];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_partner_chat_only(), target);
  }

  // optional string wordban_list = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wordban_list().data(), static_cast<int>(this->_internal_wordban_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_SetRTMPInfo_Request.wordban_list");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_wordban_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SetRTMPInfo_Request)
  return target;
}

size_t CBroadcast_SetRTMPInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SetRTMPInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string wordban_list = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wordban_list());
    }

    // optional int32 broadcast_permission = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_permission());
    }

    // optional int32 broadcast_delay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_delay());
    }

    // optional uint32 app_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 required_app_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_required_app_id());
    }

    // optional .EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_broadcast_chat_permission());
    }

    // optional int32 broadcast_buffer = 7 [(.description) = "Previous seconds we keep of the stream available"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_buffer());
    }

    // optional fixed64 steamid = 8 [(.description) = "broadcaster steamID if not logged-in user"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool update_token = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool enable_replay = 10 [(.description) = "Enable replay of last upload"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_partner_chat_only = 11 [(.description) = "When true, then only steamwork partner can create chat messages."];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 chat_rate_limit = 9 [(.description) = "Seconds required between chat messages"];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_rate_limit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SetRTMPInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_SetRTMPInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SetRTMPInfo_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_SetRTMPInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_SetRTMPInfo_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_SetRTMPInfo_Request &>(from));
}


void CBroadcast_SetRTMPInfo_Request::MergeFrom(const CBroadcast_SetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SetRTMPInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_wordban_list(from._internal_wordban_list());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_permission_ = from.broadcast_permission_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_delay_ = from.broadcast_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      required_app_id_ = from.required_app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      broadcast_chat_permission_ = from.broadcast_chat_permission_;
    }
    if (cached_has_bits & 0x00000040u) {
      broadcast_buffer_ = from.broadcast_buffer_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      update_token_ = from.update_token_;
    }
    if (cached_has_bits & 0x00000200u) {
      enable_replay_ = from.enable_replay_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_partner_chat_only_ = from.is_partner_chat_only_;
    }
    if (cached_has_bits & 0x00000800u) {
      chat_rate_limit_ = from.chat_rate_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_SetRTMPInfo_Request::CopyFrom(const CBroadcast_SetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SetRTMPInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SetRTMPInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_SetRTMPInfo_Request::InternalSwap(CBroadcast_SetRTMPInfo_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wordban_list_, lhs_arena,
      &other->wordban_list_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_SetRTMPInfo_Request, chat_rate_limit_)
      + sizeof(CBroadcast_SetRTMPInfo_Request::chat_rate_limit_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_SetRTMPInfo_Request, broadcast_permission_)>(
          reinterpret_cast<char*>(&broadcast_permission_),
          reinterpret_cast<char*>(&other->broadcast_permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SetRTMPInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[41]);
}

// ===================================================================

class CBroadcast_SetRTMPInfo_Response::_Internal {
 public:
};

CBroadcast_SetRTMPInfo_Response::CBroadcast_SetRTMPInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SetRTMPInfo_Response)
}
CBroadcast_SetRTMPInfo_Response::CBroadcast_SetRTMPInfo_Response(const CBroadcast_SetRTMPInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SetRTMPInfo_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SetRTMPInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SetRTMPInfo_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SetRTMPInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[42]);
}

// ===================================================================

class CBroadcast_GetRTMPInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetRTMPInfo_Request>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_GetRTMPInfo_Request::CBroadcast_GetRTMPInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetRTMPInfo_Request)
}
CBroadcast_GetRTMPInfo_Request::CBroadcast_GetRTMPInfo_Request(const CBroadcast_GetRTMPInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(ip_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetRTMPInfo_Request)
}

inline void CBroadcast_GetRTMPInfo_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(ip_));
}

CBroadcast_GetRTMPInfo_Request::~CBroadcast_GetRTMPInfo_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetRTMPInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetRTMPInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetRTMPInfo_Request::ArenaDtor(void* object) {
  CBroadcast_GetRTMPInfo_Request* _this = reinterpret_cast< CBroadcast_GetRTMPInfo_Request* >(object);
  (void)_this;
}
void CBroadcast_GetRTMPInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetRTMPInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetRTMPInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetRTMPInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ip_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetRTMPInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2 [(.description) = "broadcaster steamID if not logged-in user"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetRTMPInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetRTMPInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ip(), target);
  }

  // optional fixed64 steamid = 2 [(.description) = "broadcaster steamID if not logged-in user"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetRTMPInfo_Request)
  return target;
}

size_t CBroadcast_GetRTMPInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetRTMPInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 2 [(.description) = "broadcaster steamID if not logged-in user"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetRTMPInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetRTMPInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetRTMPInfo_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetRTMPInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetRTMPInfo_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetRTMPInfo_Request &>(from));
}


void CBroadcast_GetRTMPInfo_Request::MergeFrom(const CBroadcast_GetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetRTMPInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetRTMPInfo_Request::CopyFrom(const CBroadcast_GetRTMPInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetRTMPInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetRTMPInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetRTMPInfo_Request::InternalSwap(CBroadcast_GetRTMPInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetRTMPInfo_Request, ip_)
      + sizeof(CBroadcast_GetRTMPInfo_Request::ip_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetRTMPInfo_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetRTMPInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[43]);
}

// ===================================================================

class CBroadcast_GetRTMPInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetRTMPInfo_Response>()._has_bits_);
  static void set_has_broadcast_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtmp_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtmp_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcast_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_required_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_broadcast_chat_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_broadcast_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_chat_rate_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enable_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_partner_chat_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_wordban_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CBroadcast_GetRTMPInfo_Response::CBroadcast_GetRTMPInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetRTMPInfo_Response)
}
CBroadcast_GetRTMPInfo_Response::CBroadcast_GetRTMPInfo_Response(const CBroadcast_GetRTMPInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rtmp_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rtmp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rtmp_host()) {
    rtmp_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rtmp_host(), 
      GetArenaForAllocation());
  }
  rtmp_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rtmp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rtmp_token()) {
    rtmp_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rtmp_token(), 
      GetArenaForAllocation());
  }
  wordban_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_wordban_list()) {
    wordban_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wordban_list(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_permission_, &from.broadcast_permission_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_partner_chat_only_) -
    reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(is_partner_chat_only_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetRTMPInfo_Response)
}

inline void CBroadcast_GetRTMPInfo_Response::SharedCtor() {
rtmp_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rtmp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rtmp_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rtmp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
wordban_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_permission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_partner_chat_only_) -
    reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(is_partner_chat_only_));
}

CBroadcast_GetRTMPInfo_Response::~CBroadcast_GetRTMPInfo_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetRTMPInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetRTMPInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rtmp_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtmp_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wordban_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetRTMPInfo_Response::ArenaDtor(void* object) {
  CBroadcast_GetRTMPInfo_Response* _this = reinterpret_cast< CBroadcast_GetRTMPInfo_Response* >(object);
  (void)_this;
}
void CBroadcast_GetRTMPInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetRTMPInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetRTMPInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetRTMPInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rtmp_host_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      rtmp_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      wordban_list_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&broadcast_permission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_chat_permission_) -
        reinterpret_cast<char*>(&broadcast_permission_)) + sizeof(broadcast_chat_permission_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&broadcast_buffer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_partner_chat_only_) -
        reinterpret_cast<char*>(&broadcast_buffer_)) + sizeof(is_partner_chat_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetRTMPInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 broadcast_permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_broadcast_permission(&has_bits);
          broadcast_permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rtmp_host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rtmp_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetRTMPInfo_Response.rtmp_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rtmp_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rtmp_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetRTMPInfo_Response.rtmp_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_broadcast_delay(&has_bits);
          broadcast_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_required_app_id(&has_bits);
          required_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastChatPermission_IsValid(val))) {
            _internal_set_broadcast_chat_permission(static_cast<::EBroadcastChatPermission>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_buffer = 8 [(.description) = "Seconds we keep streams available"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_broadcast_buffer(&has_bits);
          broadcast_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 9 [(.description) = "broadcaster steamID"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_rate_limit = 10 [(.description) = "Seconds required between chat messages"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_chat_rate_limit(&has_bits);
          chat_rate_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_replay = 11 [(.description) = "Enable replay of last upload"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_enable_replay(&has_bits);
          enable_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_partner_chat_only = 12 [(.description) = "When true, then only steamwork partner can create chat messages."];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_is_partner_chat_only(&has_bits);
          is_partner_chat_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string wordban_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_wordban_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetRTMPInfo_Response.wordban_list");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetRTMPInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetRTMPInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 broadcast_permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_broadcast_permission(), target);
  }

  // optional string rtmp_host = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rtmp_host().data(), static_cast<int>(this->_internal_rtmp_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetRTMPInfo_Response.rtmp_host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rtmp_host(), target);
  }

  // optional string rtmp_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rtmp_token().data(), static_cast<int>(this->_internal_rtmp_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetRTMPInfo_Response.rtmp_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rtmp_token(), target);
  }

  // optional int32 broadcast_delay = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_broadcast_delay(), target);
  }

  // optional uint32 app_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_app_id(), target);
  }

  // optional uint32 required_app_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_required_app_id(), target);
  }

  // optional .EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_broadcast_chat_permission(), target);
  }

  // optional int32 broadcast_buffer = 8 [(.description) = "Seconds we keep streams available"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_broadcast_buffer(), target);
  }

  // optional fixed64 steamid = 9 [(.description) = "broadcaster steamID"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(9, this->_internal_steamid(), target);
  }

  // optional uint32 chat_rate_limit = 10 [(.description) = "Seconds required between chat messages"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_chat_rate_limit(), target);
  }

  // optional bool enable_replay = 11 [(.description) = "Enable replay of last upload"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enable_replay(), target);
  }

  // optional bool is_partner_chat_only = 12 [(.description) = "When true, then only steamwork partner can create chat messages."];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_partner_chat_only(), target);
  }

  // optional string wordban_list = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wordban_list().data(), static_cast<int>(this->_internal_wordban_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetRTMPInfo_Response.wordban_list");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_wordban_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetRTMPInfo_Response)
  return target;
}

size_t CBroadcast_GetRTMPInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetRTMPInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string rtmp_host = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rtmp_host());
    }

    // optional string rtmp_token = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rtmp_token());
    }

    // optional string wordban_list = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wordban_list());
    }

    // optional int32 broadcast_permission = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_permission());
    }

    // optional int32 broadcast_delay = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_delay());
    }

    // optional uint32 app_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 required_app_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_required_app_id());
    }

    // optional .EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_broadcast_chat_permission());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 broadcast_buffer = 8 [(.description) = "Seconds we keep streams available"];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_buffer());
    }

    // optional fixed64 steamid = 9 [(.description) = "broadcaster steamID"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 chat_rate_limit = 10 [(.description) = "Seconds required between chat messages"];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_rate_limit());
    }

    // optional bool enable_replay = 11 [(.description) = "Enable replay of last upload"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_partner_chat_only = 12 [(.description) = "When true, then only steamwork partner can create chat messages."];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetRTMPInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetRTMPInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetRTMPInfo_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetRTMPInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetRTMPInfo_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetRTMPInfo_Response &>(from));
}


void CBroadcast_GetRTMPInfo_Response::MergeFrom(const CBroadcast_GetRTMPInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetRTMPInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rtmp_host(from._internal_rtmp_host());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_rtmp_token(from._internal_rtmp_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_wordban_list(from._internal_wordban_list());
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_permission_ = from.broadcast_permission_;
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_delay_ = from.broadcast_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      required_app_id_ = from.required_app_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      broadcast_chat_permission_ = from.broadcast_chat_permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      broadcast_buffer_ = from.broadcast_buffer_;
    }
    if (cached_has_bits & 0x00000200u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000400u) {
      chat_rate_limit_ = from.chat_rate_limit_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_replay_ = from.enable_replay_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_partner_chat_only_ = from.is_partner_chat_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetRTMPInfo_Response::CopyFrom(const CBroadcast_GetRTMPInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetRTMPInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetRTMPInfo_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetRTMPInfo_Response::InternalSwap(CBroadcast_GetRTMPInfo_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rtmp_host_, lhs_arena,
      &other->rtmp_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rtmp_token_, lhs_arena,
      &other->rtmp_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wordban_list_, lhs_arena,
      &other->wordban_list_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetRTMPInfo_Response, is_partner_chat_only_)
      + sizeof(CBroadcast_GetRTMPInfo_Response::is_partner_chat_only_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetRTMPInfo_Response, broadcast_permission_)>(
          reinterpret_cast<char*>(&broadcast_permission_),
          reinterpret_cast<char*>(&other->broadcast_permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetRTMPInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[44]);
}

// ===================================================================

class CBroadcast_WebRTCHaveTURNServer_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCHaveTURNServer_Notification>()._has_bits_);
  static void set_has_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_turn_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCHaveTURNServer_Notification::CBroadcast_WebRTCHaveTURNServer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCHaveTURNServer_Notification)
}
CBroadcast_WebRTCHaveTURNServer_Notification::CBroadcast_WebRTCHaveTURNServer_Notification(const CBroadcast_WebRTCHaveTURNServer_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_turn_server()) {
    turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_turn_server(), 
      GetArenaForAllocation());
  }
  broadcast_session_id_ = from.broadcast_session_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCHaveTURNServer_Notification)
}

inline void CBroadcast_WebRTCHaveTURNServer_Notification::SharedCtor() {
turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
broadcast_session_id_ = uint64_t{0u};
}

CBroadcast_WebRTCHaveTURNServer_Notification::~CBroadcast_WebRTCHaveTURNServer_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCHaveTURNServer_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCHaveTURNServer_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  turn_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCHaveTURNServer_Notification::ArenaDtor(void* object) {
  CBroadcast_WebRTCHaveTURNServer_Notification* _this = reinterpret_cast< CBroadcast_WebRTCHaveTURNServer_Notification* >(object);
  (void)_this;
}
void CBroadcast_WebRTCHaveTURNServer_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCHaveTURNServer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCHaveTURNServer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCHaveTURNServer_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    turn_server_.ClearNonDefaultToEmpty();
  }
  broadcast_session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCHaveTURNServer_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_session_id(&has_bits);
          broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string turn_server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_turn_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WebRTCHaveTURNServer_Notification.turn_server");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCHaveTURNServer_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCHaveTURNServer_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_session_id(), target);
  }

  // optional string turn_server = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_turn_server().data(), static_cast<int>(this->_internal_turn_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WebRTCHaveTURNServer_Notification.turn_server");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_turn_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCHaveTURNServer_Notification)
  return target;
}

size_t CBroadcast_WebRTCHaveTURNServer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCHaveTURNServer_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string turn_server = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_turn_server());
    }

    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCHaveTURNServer_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCHaveTURNServer_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCHaveTURNServer_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCHaveTURNServer_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCHaveTURNServer_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCHaveTURNServer_Notification &>(from));
}


void CBroadcast_WebRTCHaveTURNServer_Notification::MergeFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCHaveTURNServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_turn_server(from._internal_turn_server());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCHaveTURNServer_Notification::CopyFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCHaveTURNServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCHaveTURNServer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCHaveTURNServer_Notification::InternalSwap(CBroadcast_WebRTCHaveTURNServer_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &turn_server_, lhs_arena,
      &other->turn_server_, rhs_arena
  );
  swap(broadcast_session_id_, other->broadcast_session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCHaveTURNServer_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[45]);
}

// ===================================================================

class CBroadcast_WebRTCStartResult_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCStartResult_Request>()._has_bits_);
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_started(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resolution_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resolution_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CBroadcast_WebRTCStartResult_Request::CBroadcast_WebRTCStartResult_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCStartResult_Request)
}
CBroadcast_WebRTCStartResult_Request::CBroadcast_WebRTCStartResult_Request(const CBroadcast_WebRTCStartResult_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_offer()) {
    offer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_offer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&webrtc_session_id_, &from.webrtc_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&webrtc_session_id_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCStartResult_Request)
}

inline void CBroadcast_WebRTCStartResult_Request::SharedCtor() {
offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&webrtc_session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&webrtc_session_id_)) + sizeof(fps_));
}

CBroadcast_WebRTCStartResult_Request::~CBroadcast_WebRTCStartResult_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCStartResult_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCStartResult_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  offer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCStartResult_Request::ArenaDtor(void* object) {
  CBroadcast_WebRTCStartResult_Request* _this = reinterpret_cast< CBroadcast_WebRTCStartResult_Request* >(object);
  (void)_this;
}
void CBroadcast_WebRTCStartResult_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCStartResult_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCStartResult_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCStartResult_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    offer_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&webrtc_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fps_) -
        reinterpret_cast<char*>(&webrtc_session_id_)) + sizeof(fps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCStartResult_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 webrtc_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_started(&has_bits);
          started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string offer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_offer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WebRTCStartResult_Request.offer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 resolution_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_resolution_x(&has_bits);
          resolution_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 resolution_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_resolution_y(&has_bits);
          resolution_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_fps(&has_bits);
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCStartResult_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCStartResult_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_webrtc_session_id(), target);
  }

  // optional bool started = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_started(), target);
  }

  // optional string offer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_offer().data(), static_cast<int>(this->_internal_offer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WebRTCStartResult_Request.offer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_offer(), target);
  }

  // optional uint32 resolution_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resolution_x(), target);
  }

  // optional uint32 resolution_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_resolution_y(), target);
  }

  // optional uint32 fps = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCStartResult_Request)
  return target;
}

size_t CBroadcast_WebRTCStartResult_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCStartResult_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string offer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_offer());
    }

    // optional fixed64 webrtc_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool started = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 resolution_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolution_x());
    }

    // optional uint32 resolution_y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolution_y());
    }

    // optional uint32 fps = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fps());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCStartResult_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCStartResult_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCStartResult_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCStartResult_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCStartResult_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCStartResult_Request &>(from));
}


void CBroadcast_WebRTCStartResult_Request::MergeFrom(const CBroadcast_WebRTCStartResult_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCStartResult_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_offer(from._internal_offer());
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      started_ = from.started_;
    }
    if (cached_has_bits & 0x00000008u) {
      resolution_x_ = from.resolution_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      resolution_y_ = from.resolution_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      fps_ = from.fps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCStartResult_Request::CopyFrom(const CBroadcast_WebRTCStartResult_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCStartResult_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStartResult_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStartResult_Request::InternalSwap(CBroadcast_WebRTCStartResult_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &offer_, lhs_arena,
      &other->offer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCStartResult_Request, fps_)
      + sizeof(CBroadcast_WebRTCStartResult_Request::fps_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCStartResult_Request, webrtc_session_id_)>(
          reinterpret_cast<char*>(&webrtc_session_id_),
          reinterpret_cast<char*>(&other->webrtc_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCStartResult_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[46]);
}

// ===================================================================

class CBroadcast_WebRTCStartResult_Response::_Internal {
 public:
};

CBroadcast_WebRTCStartResult_Response::CBroadcast_WebRTCStartResult_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCStartResult_Response)
}
CBroadcast_WebRTCStartResult_Response::CBroadcast_WebRTCStartResult_Response(const CBroadcast_WebRTCStartResult_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCStartResult_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCStartResult_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCStartResult_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCStartResult_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[47]);
}

// ===================================================================

class CBroadcast_WebRTCStopped_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCStopped_Request>()._has_bits_);
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCStopped_Request::CBroadcast_WebRTCStopped_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCStopped_Request)
}
CBroadcast_WebRTCStopped_Request::CBroadcast_WebRTCStopped_Request(const CBroadcast_WebRTCStopped_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  webrtc_session_id_ = from.webrtc_session_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCStopped_Request)
}

inline void CBroadcast_WebRTCStopped_Request::SharedCtor() {
webrtc_session_id_ = uint64_t{0u};
}

CBroadcast_WebRTCStopped_Request::~CBroadcast_WebRTCStopped_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCStopped_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCStopped_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WebRTCStopped_Request::ArenaDtor(void* object) {
  CBroadcast_WebRTCStopped_Request* _this = reinterpret_cast< CBroadcast_WebRTCStopped_Request* >(object);
  (void)_this;
}
void CBroadcast_WebRTCStopped_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCStopped_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCStopped_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCStopped_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  webrtc_session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCStopped_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 webrtc_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCStopped_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCStopped_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_webrtc_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCStopped_Request)
  return target;
}

size_t CBroadcast_WebRTCStopped_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCStopped_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 webrtc_session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCStopped_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCStopped_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCStopped_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCStopped_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCStopped_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCStopped_Request &>(from));
}


void CBroadcast_WebRTCStopped_Request::MergeFrom(const CBroadcast_WebRTCStopped_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCStopped_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_webrtc_session_id()) {
    _internal_set_webrtc_session_id(from._internal_webrtc_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCStopped_Request::CopyFrom(const CBroadcast_WebRTCStopped_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCStopped_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStopped_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStopped_Request::InternalSwap(CBroadcast_WebRTCStopped_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(webrtc_session_id_, other->webrtc_session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCStopped_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[48]);
}

// ===================================================================

class CBroadcast_WebRTCStopped_Response::_Internal {
 public:
};

CBroadcast_WebRTCStopped_Response::CBroadcast_WebRTCStopped_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCStopped_Response)
}
CBroadcast_WebRTCStopped_Response::CBroadcast_WebRTCStopped_Response(const CBroadcast_WebRTCStopped_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCStopped_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCStopped_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCStopped_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCStopped_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[49]);
}

// ===================================================================

class CBroadcast_WebRTCSetAnswer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCSetAnswer_Request>()._has_bits_);
  static void set_has_broadcaster_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_answer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCSetAnswer_Request::CBroadcast_WebRTCSetAnswer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCSetAnswer_Request)
}
CBroadcast_WebRTCSetAnswer_Request::CBroadcast_WebRTCSetAnswer_Request(const CBroadcast_WebRTCSetAnswer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_answer()) {
    answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_answer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcaster_steamid_, &from.broadcaster_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCSetAnswer_Request)
}

inline void CBroadcast_WebRTCSetAnswer_Request::SharedCtor() {
answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcaster_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCSetAnswer_Request::~CBroadcast_WebRTCSetAnswer_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCSetAnswer_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCSetAnswer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  answer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCSetAnswer_Request::ArenaDtor(void* object) {
  CBroadcast_WebRTCSetAnswer_Request* _this = reinterpret_cast< CBroadcast_WebRTCSetAnswer_Request* >(object);
  (void)_this;
}
void CBroadcast_WebRTCSetAnswer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCSetAnswer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCSetAnswer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCSetAnswer_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    answer_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCSetAnswer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcaster_steamid(&has_bits);
          broadcaster_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 webrtc_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string answer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_answer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WebRTCSetAnswer_Request.answer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCSetAnswer_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCSetAnswer_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcaster_steamid(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_webrtc_session_id(), target);
  }

  // optional string answer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WebRTCSetAnswer_Request.answer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCSetAnswer_Request)
  return target;
}

size_t CBroadcast_WebRTCSetAnswer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCSetAnswer_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string answer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_answer());
    }

    // optional fixed64 broadcaster_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCSetAnswer_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCSetAnswer_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCSetAnswer_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCSetAnswer_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCSetAnswer_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCSetAnswer_Request &>(from));
}


void CBroadcast_WebRTCSetAnswer_Request::MergeFrom(const CBroadcast_WebRTCSetAnswer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCSetAnswer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_answer(from._internal_answer());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCSetAnswer_Request::CopyFrom(const CBroadcast_WebRTCSetAnswer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCSetAnswer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCSetAnswer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCSetAnswer_Request::InternalSwap(CBroadcast_WebRTCSetAnswer_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &answer_, lhs_arena,
      &other->answer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCSetAnswer_Request, webrtc_session_id_)
      + sizeof(CBroadcast_WebRTCSetAnswer_Request::webrtc_session_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCSetAnswer_Request, broadcaster_steamid_)>(
          reinterpret_cast<char*>(&broadcaster_steamid_),
          reinterpret_cast<char*>(&other->broadcaster_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCSetAnswer_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[50]);
}

// ===================================================================

class CBroadcast_WebRTCSetAnswer_Response::_Internal {
 public:
};

CBroadcast_WebRTCSetAnswer_Response::CBroadcast_WebRTCSetAnswer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCSetAnswer_Response)
}
CBroadcast_WebRTCSetAnswer_Response::CBroadcast_WebRTCSetAnswer_Response(const CBroadcast_WebRTCSetAnswer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCSetAnswer_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCSetAnswer_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCSetAnswer_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCSetAnswer_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[51]);
}

// ===================================================================

class CBroadcast_WebRTCLookupTURNServer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCLookupTURNServer_Request>()._has_bits_);
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCLookupTURNServer_Request::CBroadcast_WebRTCLookupTURNServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCLookupTURNServer_Request)
}
CBroadcast_WebRTCLookupTURNServer_Request::CBroadcast_WebRTCLookupTURNServer_Request(const CBroadcast_WebRTCLookupTURNServer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cellid_ = from.cellid_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCLookupTURNServer_Request)
}

inline void CBroadcast_WebRTCLookupTURNServer_Request::SharedCtor() {
cellid_ = 0u;
}

CBroadcast_WebRTCLookupTURNServer_Request::~CBroadcast_WebRTCLookupTURNServer_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCLookupTURNServer_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCLookupTURNServer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WebRTCLookupTURNServer_Request::ArenaDtor(void* object) {
  CBroadcast_WebRTCLookupTURNServer_Request* _this = reinterpret_cast< CBroadcast_WebRTCLookupTURNServer_Request* >(object);
  (void)_this;
}
void CBroadcast_WebRTCLookupTURNServer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCLookupTURNServer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCLookupTURNServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCLookupTURNServer_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCLookupTURNServer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cellid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cellid(&has_bits);
          cellid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCLookupTURNServer_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCLookupTURNServer_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cellid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cellid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCLookupTURNServer_Request)
  return target;
}

size_t CBroadcast_WebRTCLookupTURNServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCLookupTURNServer_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 cellid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cellid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCLookupTURNServer_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCLookupTURNServer_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCLookupTURNServer_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCLookupTURNServer_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCLookupTURNServer_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCLookupTURNServer_Request &>(from));
}


void CBroadcast_WebRTCLookupTURNServer_Request::MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCLookupTURNServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cellid()) {
    _internal_set_cellid(from._internal_cellid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCLookupTURNServer_Request::CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCLookupTURNServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCLookupTURNServer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCLookupTURNServer_Request::InternalSwap(CBroadcast_WebRTCLookupTURNServer_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cellid_, other->cellid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCLookupTURNServer_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[52]);
}

// ===================================================================

class CBroadcast_WebRTCLookupTURNServer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCLookupTURNServer_Response>()._has_bits_);
  static void set_has_turn_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCLookupTURNServer_Response::CBroadcast_WebRTCLookupTURNServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCLookupTURNServer_Response)
}
CBroadcast_WebRTCLookupTURNServer_Response::CBroadcast_WebRTCLookupTURNServer_Response(const CBroadcast_WebRTCLookupTURNServer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_turn_server()) {
    turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_turn_server(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCLookupTURNServer_Response)
}

inline void CBroadcast_WebRTCLookupTURNServer_Response::SharedCtor() {
turn_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CBroadcast_WebRTCLookupTURNServer_Response::~CBroadcast_WebRTCLookupTURNServer_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCLookupTURNServer_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCLookupTURNServer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  turn_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCLookupTURNServer_Response::ArenaDtor(void* object) {
  CBroadcast_WebRTCLookupTURNServer_Response* _this = reinterpret_cast< CBroadcast_WebRTCLookupTURNServer_Response* >(object);
  (void)_this;
}
void CBroadcast_WebRTCLookupTURNServer_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCLookupTURNServer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCLookupTURNServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCLookupTURNServer_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    turn_server_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCLookupTURNServer_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string turn_server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_turn_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WebRTCLookupTURNServer_Response.turn_server");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCLookupTURNServer_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCLookupTURNServer_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string turn_server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_turn_server().data(), static_cast<int>(this->_internal_turn_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WebRTCLookupTURNServer_Response.turn_server");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_turn_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCLookupTURNServer_Response)
  return target;
}

size_t CBroadcast_WebRTCLookupTURNServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCLookupTURNServer_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string turn_server = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_turn_server());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCLookupTURNServer_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCLookupTURNServer_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCLookupTURNServer_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCLookupTURNServer_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCLookupTURNServer_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCLookupTURNServer_Response &>(from));
}


void CBroadcast_WebRTCLookupTURNServer_Response::MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCLookupTURNServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_server()) {
    _internal_set_turn_server(from._internal_turn_server());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCLookupTURNServer_Response::CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCLookupTURNServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCLookupTURNServer_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCLookupTURNServer_Response::InternalSwap(CBroadcast_WebRTCLookupTURNServer_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &turn_server_, lhs_arena,
      &other->turn_server_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCLookupTURNServer_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[53]);
}

// ===================================================================

class CBroadcast_WebRTC_Candidate::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTC_Candidate>()._has_bits_);
  static void set_has_sdp_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sdp_mline_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_WebRTC_Candidate::CBroadcast_WebRTC_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTC_Candidate)
}
CBroadcast_WebRTC_Candidate::CBroadcast_WebRTC_Candidate(const CBroadcast_WebRTC_Candidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdp_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sdp_mid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sdp_mid()) {
    sdp_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdp_mid(), 
      GetArenaForAllocation());
  }
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_candidate()) {
    candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidate(), 
      GetArenaForAllocation());
  }
  sdp_mline_index_ = from.sdp_mline_index_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTC_Candidate)
}

inline void CBroadcast_WebRTC_Candidate::SharedCtor() {
sdp_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sdp_mid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sdp_mline_index_ = 0;
}

CBroadcast_WebRTC_Candidate::~CBroadcast_WebRTC_Candidate() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTC_Candidate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTC_Candidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sdp_mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTC_Candidate::ArenaDtor(void* object) {
  CBroadcast_WebRTC_Candidate* _this = reinterpret_cast< CBroadcast_WebRTC_Candidate* >(object);
  (void)_this;
}
void CBroadcast_WebRTC_Candidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTC_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTC_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTC_Candidate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sdp_mid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      candidate_.ClearNonDefaultToEmpty();
    }
  }
  sdp_mline_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTC_Candidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sdp_mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdp_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WebRTC_Candidate.sdp_mid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sdp_mline_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sdp_mline_index(&has_bits);
          sdp_mline_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string candidate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WebRTC_Candidate.candidate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTC_Candidate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTC_Candidate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sdp_mid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdp_mid().data(), static_cast<int>(this->_internal_sdp_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WebRTC_Candidate.sdp_mid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdp_mid(), target);
  }

  // optional int32 sdp_mline_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sdp_mline_index(), target);
  }

  // optional string candidate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_candidate().data(), static_cast<int>(this->_internal_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WebRTC_Candidate.candidate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_candidate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTC_Candidate)
  return target;
}

size_t CBroadcast_WebRTC_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTC_Candidate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sdp_mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdp_mid());
    }

    // optional string candidate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_candidate());
    }

    // optional int32 sdp_mline_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sdp_mline_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTC_Candidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTC_Candidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTC_Candidate::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTC_Candidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTC_Candidate *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTC_Candidate &>(from));
}


void CBroadcast_WebRTC_Candidate::MergeFrom(const CBroadcast_WebRTC_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTC_Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sdp_mid(from._internal_sdp_mid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_candidate(from._internal_candidate());
    }
    if (cached_has_bits & 0x00000004u) {
      sdp_mline_index_ = from.sdp_mline_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTC_Candidate::CopyFrom(const CBroadcast_WebRTC_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTC_Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTC_Candidate::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTC_Candidate::InternalSwap(CBroadcast_WebRTC_Candidate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdp_mid_, lhs_arena,
      &other->sdp_mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &candidate_, lhs_arena,
      &other->candidate_, rhs_arena
  );
  swap(sdp_mline_index_, other->sdp_mline_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTC_Candidate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[54]);
}

// ===================================================================

class CBroadcast_WebRTCAddHostCandidate_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCAddHostCandidate_Request>()._has_bits_);
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CBroadcast_WebRTC_Candidate& candidate(const CBroadcast_WebRTCAddHostCandidate_Request* msg);
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CBroadcast_WebRTC_Candidate&
CBroadcast_WebRTCAddHostCandidate_Request::_Internal::candidate(const CBroadcast_WebRTCAddHostCandidate_Request* msg) {
  return *msg->candidate_;
}
CBroadcast_WebRTCAddHostCandidate_Request::CBroadcast_WebRTCAddHostCandidate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCAddHostCandidate_Request)
}
CBroadcast_WebRTCAddHostCandidate_Request::CBroadcast_WebRTCAddHostCandidate_Request(const CBroadcast_WebRTCAddHostCandidate_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candidate()) {
    candidate_ = new ::CBroadcast_WebRTC_Candidate(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  webrtc_session_id_ = from.webrtc_session_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCAddHostCandidate_Request)
}

inline void CBroadcast_WebRTCAddHostCandidate_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&candidate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&candidate_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCAddHostCandidate_Request::~CBroadcast_WebRTCAddHostCandidate_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCAddHostCandidate_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCAddHostCandidate_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete candidate_;
}

void CBroadcast_WebRTCAddHostCandidate_Request::ArenaDtor(void* object) {
  CBroadcast_WebRTCAddHostCandidate_Request* _this = reinterpret_cast< CBroadcast_WebRTCAddHostCandidate_Request* >(object);
  (void)_this;
}
void CBroadcast_WebRTCAddHostCandidate_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCAddHostCandidate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCAddHostCandidate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCAddHostCandidate_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(candidate_ != nullptr);
    candidate_->Clear();
  }
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCAddHostCandidate_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 webrtc_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CBroadcast_WebRTC_Candidate candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCAddHostCandidate_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCAddHostCandidate_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 webrtc_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_webrtc_session_id(), target);
  }

  // optional .CBroadcast_WebRTC_Candidate candidate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::candidate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCAddHostCandidate_Request)
  return target;
}

size_t CBroadcast_WebRTCAddHostCandidate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCAddHostCandidate_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CBroadcast_WebRTC_Candidate candidate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *candidate_);
    }

    // optional fixed64 webrtc_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCAddHostCandidate_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCAddHostCandidate_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCAddHostCandidate_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCAddHostCandidate_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCAddHostCandidate_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCAddHostCandidate_Request &>(from));
}


void CBroadcast_WebRTCAddHostCandidate_Request::MergeFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCAddHostCandidate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_candidate()->::CBroadcast_WebRTC_Candidate::MergeFrom(from._internal_candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCAddHostCandidate_Request::CopyFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCAddHostCandidate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddHostCandidate_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddHostCandidate_Request::InternalSwap(CBroadcast_WebRTCAddHostCandidate_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCAddHostCandidate_Request, webrtc_session_id_)
      + sizeof(CBroadcast_WebRTCAddHostCandidate_Request::webrtc_session_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCAddHostCandidate_Request, candidate_)>(
          reinterpret_cast<char*>(&candidate_),
          reinterpret_cast<char*>(&other->candidate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCAddHostCandidate_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[55]);
}

// ===================================================================

class CBroadcast_WebRTCAddHostCandidate_Response::_Internal {
 public:
};

CBroadcast_WebRTCAddHostCandidate_Response::CBroadcast_WebRTCAddHostCandidate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCAddHostCandidate_Response)
}
CBroadcast_WebRTCAddHostCandidate_Response::CBroadcast_WebRTCAddHostCandidate_Response(const CBroadcast_WebRTCAddHostCandidate_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCAddHostCandidate_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCAddHostCandidate_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCAddHostCandidate_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCAddHostCandidate_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[56]);
}

// ===================================================================

class CBroadcast_WebRTCAddViewerCandidate_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCAddViewerCandidate_Request>()._has_bits_);
  static void set_has_broadcaster_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CBroadcast_WebRTC_Candidate& candidate(const CBroadcast_WebRTCAddViewerCandidate_Request* msg);
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CBroadcast_WebRTC_Candidate&
CBroadcast_WebRTCAddViewerCandidate_Request::_Internal::candidate(const CBroadcast_WebRTCAddViewerCandidate_Request* msg) {
  return *msg->candidate_;
}
CBroadcast_WebRTCAddViewerCandidate_Request::CBroadcast_WebRTCAddViewerCandidate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCAddViewerCandidate_Request)
}
CBroadcast_WebRTCAddViewerCandidate_Request::CBroadcast_WebRTCAddViewerCandidate_Request(const CBroadcast_WebRTCAddViewerCandidate_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candidate()) {
    candidate_ = new ::CBroadcast_WebRTC_Candidate(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  ::memcpy(&broadcaster_steamid_, &from.broadcaster_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCAddViewerCandidate_Request)
}

inline void CBroadcast_WebRTCAddViewerCandidate_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&candidate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&candidate_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCAddViewerCandidate_Request::~CBroadcast_WebRTCAddViewerCandidate_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCAddViewerCandidate_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCAddViewerCandidate_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete candidate_;
}

void CBroadcast_WebRTCAddViewerCandidate_Request::ArenaDtor(void* object) {
  CBroadcast_WebRTCAddViewerCandidate_Request* _this = reinterpret_cast< CBroadcast_WebRTCAddViewerCandidate_Request* >(object);
  (void)_this;
}
void CBroadcast_WebRTCAddViewerCandidate_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCAddViewerCandidate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCAddViewerCandidate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCAddViewerCandidate_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(candidate_ != nullptr);
    candidate_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCAddViewerCandidate_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcaster_steamid(&has_bits);
          broadcaster_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 webrtc_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CBroadcast_WebRTC_Candidate candidate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCAddViewerCandidate_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCAddViewerCandidate_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcaster_steamid(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_webrtc_session_id(), target);
  }

  // optional .CBroadcast_WebRTC_Candidate candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::candidate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCAddViewerCandidate_Request)
  return target;
}

size_t CBroadcast_WebRTCAddViewerCandidate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCAddViewerCandidate_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CBroadcast_WebRTC_Candidate candidate = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *candidate_);
    }

    // optional fixed64 broadcaster_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCAddViewerCandidate_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCAddViewerCandidate_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCAddViewerCandidate_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCAddViewerCandidate_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCAddViewerCandidate_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCAddViewerCandidate_Request &>(from));
}


void CBroadcast_WebRTCAddViewerCandidate_Request::MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCAddViewerCandidate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_candidate()->::CBroadcast_WebRTC_Candidate::MergeFrom(from._internal_candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCAddViewerCandidate_Request::CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCAddViewerCandidate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddViewerCandidate_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddViewerCandidate_Request::InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCAddViewerCandidate_Request, webrtc_session_id_)
      + sizeof(CBroadcast_WebRTCAddViewerCandidate_Request::webrtc_session_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCAddViewerCandidate_Request, candidate_)>(
          reinterpret_cast<char*>(&candidate_),
          reinterpret_cast<char*>(&other->candidate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCAddViewerCandidate_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[57]);
}

// ===================================================================

class CBroadcast_WebRTCAddViewerCandidate_Response::_Internal {
 public:
};

CBroadcast_WebRTCAddViewerCandidate_Response::CBroadcast_WebRTCAddViewerCandidate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCAddViewerCandidate_Response)
}
CBroadcast_WebRTCAddViewerCandidate_Response::CBroadcast_WebRTCAddViewerCandidate_Response(const CBroadcast_WebRTCAddViewerCandidate_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCAddViewerCandidate_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCAddViewerCandidate_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCAddViewerCandidate_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCAddViewerCandidate_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[58]);
}

// ===================================================================

class CBroadcast_WebRTCGetHostCandidates_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCGetHostCandidates_Request>()._has_bits_);
  static void set_has_broadcaster_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_candidate_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CBroadcast_WebRTCGetHostCandidates_Request::CBroadcast_WebRTCGetHostCandidates_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCGetHostCandidates_Request)
}
CBroadcast_WebRTCGetHostCandidates_Request::CBroadcast_WebRTCGetHostCandidates_Request(const CBroadcast_WebRTCGetHostCandidates_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcaster_steamid_, &from.broadcaster_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidate_generation_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(candidate_generation_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCGetHostCandidates_Request)
}

inline void CBroadcast_WebRTCGetHostCandidates_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcaster_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&candidate_generation_) -
    reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(candidate_generation_));
}

CBroadcast_WebRTCGetHostCandidates_Request::~CBroadcast_WebRTCGetHostCandidates_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCGetHostCandidates_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCGetHostCandidates_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WebRTCGetHostCandidates_Request::ArenaDtor(void* object) {
  CBroadcast_WebRTCGetHostCandidates_Request* _this = reinterpret_cast< CBroadcast_WebRTCGetHostCandidates_Request* >(object);
  (void)_this;
}
void CBroadcast_WebRTCGetHostCandidates_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCGetHostCandidates_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCGetHostCandidates_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCGetHostCandidates_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&broadcaster_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&candidate_generation_) -
        reinterpret_cast<char*>(&broadcaster_steamid_)) + sizeof(candidate_generation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCGetHostCandidates_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcaster_steamid(&has_bits);
          broadcaster_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 webrtc_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 candidate_generation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_candidate_generation(&has_bits);
          candidate_generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCGetHostCandidates_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCGetHostCandidates_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcaster_steamid(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_webrtc_session_id(), target);
  }

  // optional uint32 candidate_generation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_candidate_generation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCGetHostCandidates_Request)
  return target;
}

size_t CBroadcast_WebRTCGetHostCandidates_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCGetHostCandidates_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 broadcaster_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 candidate_generation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_candidate_generation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCGetHostCandidates_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCGetHostCandidates_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCGetHostCandidates_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCGetHostCandidates_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCGetHostCandidates_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCGetHostCandidates_Request &>(from));
}


void CBroadcast_WebRTCGetHostCandidates_Request::MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCGetHostCandidates_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      broadcaster_steamid_ = from.broadcaster_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      candidate_generation_ = from.candidate_generation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCGetHostCandidates_Request::CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCGetHostCandidates_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCGetHostCandidates_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCGetHostCandidates_Request::InternalSwap(CBroadcast_WebRTCGetHostCandidates_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCGetHostCandidates_Request, candidate_generation_)
      + sizeof(CBroadcast_WebRTCGetHostCandidates_Request::candidate_generation_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCGetHostCandidates_Request, broadcaster_steamid_)>(
          reinterpret_cast<char*>(&broadcaster_steamid_),
          reinterpret_cast<char*>(&other->broadcaster_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCGetHostCandidates_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[59]);
}

// ===================================================================

class CBroadcast_WebRTCGetHostCandidates_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCGetHostCandidates_Response>()._has_bits_);
  static void set_has_candidate_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCGetHostCandidates_Response::CBroadcast_WebRTCGetHostCandidates_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCGetHostCandidates_Response)
}
CBroadcast_WebRTCGetHostCandidates_Response::CBroadcast_WebRTCGetHostCandidates_Response(const CBroadcast_WebRTCGetHostCandidates_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_generation_ = from.candidate_generation_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCGetHostCandidates_Response)
}

inline void CBroadcast_WebRTCGetHostCandidates_Response::SharedCtor() {
candidate_generation_ = 0u;
}

CBroadcast_WebRTCGetHostCandidates_Response::~CBroadcast_WebRTCGetHostCandidates_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCGetHostCandidates_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCGetHostCandidates_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WebRTCGetHostCandidates_Response::ArenaDtor(void* object) {
  CBroadcast_WebRTCGetHostCandidates_Response* _this = reinterpret_cast< CBroadcast_WebRTCGetHostCandidates_Response* >(object);
  (void)_this;
}
void CBroadcast_WebRTCGetHostCandidates_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCGetHostCandidates_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCGetHostCandidates_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCGetHostCandidates_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  candidate_generation_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCGetHostCandidates_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 candidate_generation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_candidate_generation(&has_bits);
          candidate_generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CBroadcast_WebRTC_Candidate candidates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCGetHostCandidates_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCGetHostCandidates_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 candidate_generation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_candidate_generation(), target);
  }

  // repeated .CBroadcast_WebRTC_Candidate candidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_candidates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCGetHostCandidates_Response)
  return target;
}

size_t CBroadcast_WebRTCGetHostCandidates_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCGetHostCandidates_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CBroadcast_WebRTC_Candidate candidates = 2;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 candidate_generation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_candidate_generation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCGetHostCandidates_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCGetHostCandidates_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCGetHostCandidates_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCGetHostCandidates_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCGetHostCandidates_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCGetHostCandidates_Response &>(from));
}


void CBroadcast_WebRTCGetHostCandidates_Response::MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCGetHostCandidates_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  if (from._internal_has_candidate_generation()) {
    _internal_set_candidate_generation(from._internal_candidate_generation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCGetHostCandidates_Response::CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCGetHostCandidates_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCGetHostCandidates_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCGetHostCandidates_Response::InternalSwap(CBroadcast_WebRTCGetHostCandidates_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidates_.InternalSwap(&other->candidates_);
  swap(candidate_generation_, other->candidate_generation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCGetHostCandidates_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[60]);
}

// ===================================================================

class CBroadcast_GetBroadcastUploadStats_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastUploadStats_Request>()._has_bits_);
  static void set_has_row_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_upload_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CBroadcast_GetBroadcastUploadStats_Request::CBroadcast_GetBroadcastUploadStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastUploadStats_Request)
}
CBroadcast_GetBroadcastUploadStats_Request::CBroadcast_GetBroadcastUploadStats_Request(const CBroadcast_GetBroadcastUploadStats_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_id_, &from.upload_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_limit_) -
    reinterpret_cast<char*>(&upload_id_)) + sizeof(row_limit_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastUploadStats_Request)
}

inline void CBroadcast_GetBroadcastUploadStats_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&upload_id_)) + sizeof(start_time_));
row_limit_ = 100u;
}

CBroadcast_GetBroadcastUploadStats_Request::~CBroadcast_GetBroadcastUploadStats_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastUploadStats_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastUploadStats_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastUploadStats_Request::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastUploadStats_Request* _this = reinterpret_cast< CBroadcast_GetBroadcastUploadStats_Request* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastUploadStats_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastUploadStats_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastUploadStats_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastUploadStats_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&upload_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&upload_id_)) + sizeof(start_time_));
    row_limit_ = 100u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastUploadStats_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 row_limit = 1 [default = 100, (.description) = "How many at maximum to return."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_limit(&has_bits);
          row_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_time = 2 [default = 0, (.description) = "Start time"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upload_id = 3 [(.description) = "Optional relay upload ID - not compatible with session_id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upload_id(&has_bits);
          upload_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 4 [(.description) = "Optional the steamid whose stats you want, otherwise the user logged in - admin only"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 session_id = 5 [(.description) = "Optional broadcast session ID - not compatiable with upload_id"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastUploadStats_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastUploadStats_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 row_limit = 1 [default = 100, (.description) = "How many at maximum to return."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_limit(), target);
  }

  // optional uint32 start_time = 2 [default = 0, (.description) = "Start time"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_time(), target);
  }

  // optional uint64 upload_id = 3 [(.description) = "Optional relay upload ID - not compatible with session_id"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_upload_id(), target);
  }

  // optional fixed64 steamid = 4 [(.description) = "Optional the steamid whose stats you want, otherwise the user logged in - admin only"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid(), target);
  }

  // optional uint64 session_id = 5 [(.description) = "Optional broadcast session ID - not compatiable with upload_id"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastUploadStats_Request)
  return target;
}

size_t CBroadcast_GetBroadcastUploadStats_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastUploadStats_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 upload_id = 3 [(.description) = "Optional relay upload ID - not compatible with session_id"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_id());
    }

    // optional fixed64 steamid = 4 [(.description) = "Optional the steamid whose stats you want, otherwise the user logged in - admin only"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 session_id = 5 [(.description) = "Optional broadcast session ID - not compatiable with upload_id"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
    }

    // optional uint32 start_time = 2 [default = 0, (.description) = "Start time"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
    }

    // optional uint32 row_limit = 1 [default = 100, (.description) = "How many at maximum to return."];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_row_limit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastUploadStats_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastUploadStats_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastUploadStats_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastUploadStats_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastUploadStats_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastUploadStats_Request &>(from));
}


void CBroadcast_GetBroadcastUploadStats_Request::MergeFrom(const CBroadcast_GetBroadcastUploadStats_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastUploadStats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      upload_id_ = from.upload_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      row_limit_ = from.row_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastUploadStats_Request::CopyFrom(const CBroadcast_GetBroadcastUploadStats_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastUploadStats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastUploadStats_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastUploadStats_Request::InternalSwap(CBroadcast_GetBroadcastUploadStats_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastUploadStats_Request, start_time_)
      + sizeof(CBroadcast_GetBroadcastUploadStats_Request::start_time_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastUploadStats_Request, upload_id_)>(
          reinterpret_cast<char*>(&upload_id_),
          reinterpret_cast<char*>(&other->upload_id_));
  swap(row_limit_, other->row_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastUploadStats_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[61]);
}

// ===================================================================

class CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastUploadStats_Response_UploadStats>()._has_bits_);
  static void set_has_upload_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seconds_uploaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_resolution_x(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_resolution_y(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_avg_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_total_unique_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_seconds_watched(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_time_started(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_upload_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_local_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frames_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_num_representations(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

CBroadcast_GetBroadcastUploadStats_Response_UploadStats::CBroadcast_GetBroadcastUploadStats_Response_UploadStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
}
CBroadcast_GetBroadcastUploadStats_Response_UploadStats::CBroadcast_GetBroadcastUploadStats_Response_UploadStats(const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    local_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_address()) {
    local_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_local_address(), 
      GetArenaForAllocation());
  }
  remote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_remote_address()) {
    remote_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_address(), 
      GetArenaForAllocation());
  }
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&upload_result_, &from.upload_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_replay_) -
    reinterpret_cast<char*>(&upload_result_)) + sizeof(is_replay_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
}

inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::SharedCtor() {
local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  local_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
remote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_replay_) -
    reinterpret_cast<char*>(&upload_result_)) + sizeof(is_replay_));
}

CBroadcast_GetBroadcastUploadStats_Response_UploadStats::~CBroadcast_GetBroadcastUploadStats_Response_UploadStats() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  local_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastUploadStats_Response_UploadStats* _this = reinterpret_cast< CBroadcast_GetBroadcastUploadStats_Response_UploadStats* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      local_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      remote_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      app_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&upload_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resolution_x_) -
        reinterpret_cast<char*>(&upload_result_)) + sizeof(resolution_x_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&resolution_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_id_) -
        reinterpret_cast<char*>(&resolution_y_)) + sizeof(upload_id_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&frames_per_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_replay_) -
        reinterpret_cast<char*>(&frames_per_second_)) + sizeof(is_replay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 upload_result = 1 [(.description) = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upload_result(&has_bits);
          upload_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_stopped = 2 [(.description) = "time broadcast upload stopped"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_stopped(&has_bits);
          time_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_uploaded = 3 [(.description) = "seconds of vido uploaded"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seconds_uploaded(&has_bits);
          seconds_uploaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_viewers = 4 [(.description) = "max concurrent viewers"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_viewers(&has_bits);
          max_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 resolution_x = 5 [(.description) = "horizontal resultion"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_resolution_x(&has_bits);
          resolution_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 resolution_y = 6 [(.description) = "vertical resultion"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_resolution_y(&has_bits);
          resolution_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_bandwidth = 7 [(.description) = ""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_avg_bandwidth(&has_bits);
          avg_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_bytes = 8 [(.description) = "total byte uploaded by broadcaster"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_total_bytes(&has_bits);
          total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 9 [(.description) = "game broadcasted"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_unique_viewers = 10 [(.description) = "total unique viewers seen"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_total_unique_viewers(&has_bits);
          total_unique_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_seconds_watched = 11 [(.description) = "total number of seconds watched by all viewers"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_total_seconds_watched(&has_bits);
          total_seconds_watched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_started = 12 [(.description) = "time broadcast upload started"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_time_started(&has_bits);
          time_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upload_id = 13 [(.description) = "broadcast relay upload id"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_upload_id(&has_bits);
          upload_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string local_address = 14 [(.description) = "upload to server address"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_local_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastUploadStats_Response.UploadStats.local_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string remote_address = 15 [(.description) = "upload from client address"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_remote_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastUploadStats_Response.UploadStats.remote_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frames_per_second = 16 [(.description) = "frames per second"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_frames_per_second(&has_bits);
          frames_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_representations = 17 [(.description) = "number of video represetations"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_num_representations(&has_bits);
          num_representations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_name = 18 [(.description) = "game name"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_replay = 19 [(.description) = "replay of previous recording"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_is_replay(&has_bits);
          is_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 session_id = 20 [(.description) = "broadcast session id"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 upload_result = 1 [(.description) = ""];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_upload_result(), target);
  }

  // optional uint32 time_stopped = 2 [(.description) = "time broadcast upload stopped"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_stopped(), target);
  }

  // optional uint32 seconds_uploaded = 3 [(.description) = "seconds of vido uploaded"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds_uploaded(), target);
  }

  // optional uint32 max_viewers = 4 [(.description) = "max concurrent viewers"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_viewers(), target);
  }

  // optional uint32 resolution_x = 5 [(.description) = "horizontal resultion"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_resolution_x(), target);
  }

  // optional uint32 resolution_y = 6 [(.description) = "vertical resultion"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_resolution_y(), target);
  }

  // optional uint32 avg_bandwidth = 7 [(.description) = ""];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avg_bandwidth(), target);
  }

  // optional uint64 total_bytes = 8 [(.description) = "total byte uploaded by broadcaster"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_total_bytes(), target);
  }

  // optional uint32 app_id = 9 [(.description) = "game broadcasted"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_app_id(), target);
  }

  // optional uint32 total_unique_viewers = 10 [(.description) = "total unique viewers seen"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_total_unique_viewers(), target);
  }

  // optional uint64 total_seconds_watched = 11 [(.description) = "total number of seconds watched by all viewers"];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_total_seconds_watched(), target);
  }

  // optional uint32 time_started = 12 [(.description) = "time broadcast upload started"];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_time_started(), target);
  }

  // optional uint64 upload_id = 13 [(.description) = "broadcast relay upload id"];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_upload_id(), target);
  }

  // optional string local_address = 14 [(.description) = "upload to server address"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_address().data(), static_cast<int>(this->_internal_local_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastUploadStats_Response.UploadStats.local_address");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_local_address(), target);
  }

  // optional string remote_address = 15 [(.description) = "upload from client address"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_address().data(), static_cast<int>(this->_internal_remote_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastUploadStats_Response.UploadStats.remote_address");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_remote_address(), target);
  }

  // optional uint32 frames_per_second = 16 [(.description) = "frames per second"];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_frames_per_second(), target);
  }

  // optional uint32 num_representations = 17 [(.description) = "number of video represetations"];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_num_representations(), target);
  }

  // optional string app_name = 18 [(.description) = "game name"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_name");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_app_name(), target);
  }

  // optional bool is_replay = 19 [(.description) = "replay of previous recording"];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_replay(), target);
  }

  // optional uint64 session_id = 20 [(.description) = "broadcast session id"];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
  return target;
}

size_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string local_address = 14 [(.description) = "upload to server address"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local_address());
    }

    // optional string remote_address = 15 [(.description) = "upload from client address"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_address());
    }

    // optional string app_name = 18 [(.description) = "game name"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional uint32 upload_result = 1 [(.description) = ""];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_upload_result());
    }

    // optional uint32 time_stopped = 2 [(.description) = "time broadcast upload stopped"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_stopped());
    }

    // optional uint32 seconds_uploaded = 3 [(.description) = "seconds of vido uploaded"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_uploaded());
    }

    // optional uint32 max_viewers = 4 [(.description) = "max concurrent viewers"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_viewers());
    }

    // optional uint32 resolution_x = 5 [(.description) = "horizontal resultion"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolution_x());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 resolution_y = 6 [(.description) = "vertical resultion"];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolution_y());
    }

    // optional uint64 total_bytes = 8 [(.description) = "total byte uploaded by broadcaster"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_bytes());
    }

    // optional uint32 avg_bandwidth = 7 [(.description) = ""];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_bandwidth());
    }

    // optional uint32 app_id = 9 [(.description) = "game broadcasted"];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint64 total_seconds_watched = 11 [(.description) = "total number of seconds watched by all viewers"];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_seconds_watched());
    }

    // optional uint32 total_unique_viewers = 10 [(.description) = "total unique viewers seen"];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_unique_viewers());
    }

    // optional uint32 time_started = 12 [(.description) = "time broadcast upload started"];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_started());
    }

    // optional uint64 upload_id = 13 [(.description) = "broadcast relay upload id"];
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_id());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 frames_per_second = 16 [(.description) = "frames per second"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_frames_per_second());
    }

    // optional uint32 num_representations = 17 [(.description) = "number of video represetations"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_representations());
    }

    // optional uint64 session_id = 20 [(.description) = "broadcast session id"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_session_id());
    }

    // optional bool is_replay = 19 [(.description) = "replay of previous recording"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastUploadStats_Response_UploadStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastUploadStats_Response_UploadStats::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastUploadStats_Response_UploadStats *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastUploadStats_Response_UploadStats &>(from));
}


void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::MergeFrom(const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_local_address(from._internal_local_address());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_remote_address(from._internal_remote_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000008u) {
      upload_result_ = from.upload_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stopped_ = from.time_stopped_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_uploaded_ = from.seconds_uploaded_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_viewers_ = from.max_viewers_;
    }
    if (cached_has_bits & 0x00000080u) {
      resolution_x_ = from.resolution_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      resolution_y_ = from.resolution_y_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_bytes_ = from.total_bytes_;
    }
    if (cached_has_bits & 0x00000400u) {
      avg_bandwidth_ = from.avg_bandwidth_;
    }
    if (cached_has_bits & 0x00000800u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_seconds_watched_ = from.total_seconds_watched_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_unique_viewers_ = from.total_unique_viewers_;
    }
    if (cached_has_bits & 0x00004000u) {
      time_started_ = from.time_started_;
    }
    if (cached_has_bits & 0x00008000u) {
      upload_id_ = from.upload_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      frames_per_second_ = from.frames_per_second_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_representations_ = from.num_representations_;
    }
    if (cached_has_bits & 0x00040000u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_replay_ = from.is_replay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::CopyFrom(const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::InternalSwap(CBroadcast_GetBroadcastUploadStats_Response_UploadStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &local_address_, lhs_arena,
      &other->local_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_address_, lhs_arena,
      &other->remote_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_name_, lhs_arena,
      &other->app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastUploadStats_Response_UploadStats, is_replay_)
      + sizeof(CBroadcast_GetBroadcastUploadStats_Response_UploadStats::is_replay_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastUploadStats_Response_UploadStats, upload_result_)>(
          reinterpret_cast<char*>(&upload_result_),
          reinterpret_cast<char*>(&other->upload_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastUploadStats_Response_UploadStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[62]);
}

// ===================================================================

class CBroadcast_GetBroadcastUploadStats_Response::_Internal {
 public:
};

CBroadcast_GetBroadcastUploadStats_Response::CBroadcast_GetBroadcastUploadStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  upload_stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastUploadStats_Response)
}
CBroadcast_GetBroadcastUploadStats_Response::CBroadcast_GetBroadcastUploadStats_Response(const CBroadcast_GetBroadcastUploadStats_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      upload_stats_(from.upload_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastUploadStats_Response)
}

inline void CBroadcast_GetBroadcastUploadStats_Response::SharedCtor() {
}

CBroadcast_GetBroadcastUploadStats_Response::~CBroadcast_GetBroadcastUploadStats_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastUploadStats_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastUploadStats_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastUploadStats_Response::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastUploadStats_Response* _this = reinterpret_cast< CBroadcast_GetBroadcastUploadStats_Response* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastUploadStats_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastUploadStats_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastUploadStats_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastUploadStats_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upload_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastUploadStats_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CBroadcast_GetBroadcastUploadStats_Response.UploadStats upload_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upload_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastUploadStats_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastUploadStats_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastUploadStats_Response.UploadStats upload_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_upload_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_upload_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastUploadStats_Response)
  return target;
}

size_t CBroadcast_GetBroadcastUploadStats_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastUploadStats_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastUploadStats_Response.UploadStats upload_stats = 1;
  total_size += 1UL * this->_internal_upload_stats_size();
  for (const auto& msg : this->upload_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastUploadStats_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastUploadStats_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastUploadStats_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastUploadStats_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastUploadStats_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastUploadStats_Response &>(from));
}


void CBroadcast_GetBroadcastUploadStats_Response::MergeFrom(const CBroadcast_GetBroadcastUploadStats_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastUploadStats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  upload_stats_.MergeFrom(from.upload_stats_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastUploadStats_Response::CopyFrom(const CBroadcast_GetBroadcastUploadStats_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastUploadStats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastUploadStats_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastUploadStats_Response::InternalSwap(CBroadcast_GetBroadcastUploadStats_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  upload_stats_.InternalSwap(&other->upload_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastUploadStats_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[63]);
}

// ===================================================================

class CBroadcast_GetBroadcastViewerStats_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastViewerStats_Request>()._has_bits_);
  static void set_has_upload_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_GetBroadcastViewerStats_Request::CBroadcast_GetBroadcastViewerStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastViewerStats_Request)
}
CBroadcast_GetBroadcastViewerStats_Request::CBroadcast_GetBroadcastViewerStats_Request(const CBroadcast_GetBroadcastViewerStats_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_id_, &from.upload_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&upload_id_)) + sizeof(steamid_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastViewerStats_Request)
}

inline void CBroadcast_GetBroadcastViewerStats_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_) -
    reinterpret_cast<char*>(&upload_id_)) + sizeof(steamid_));
}

CBroadcast_GetBroadcastViewerStats_Request::~CBroadcast_GetBroadcastViewerStats_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastViewerStats_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastViewerStats_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastViewerStats_Request::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastViewerStats_Request* _this = reinterpret_cast< CBroadcast_GetBroadcastViewerStats_Request* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastViewerStats_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastViewerStats_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastViewerStats_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastViewerStats_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&upload_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_) -
        reinterpret_cast<char*>(&upload_id_)) + sizeof(steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastViewerStats_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upload_id = 1 [(.description) = "Get stats for this stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_upload_id(&has_bits);
          upload_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2 [(.description) = "Optional: The steamid of the broadcast whose details you are requesting."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastViewerStats_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastViewerStats_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upload_id = 1 [(.description) = "Get stats for this stream"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upload_id(), target);
  }

  // optional fixed64 steamid = 2 [(.description) = "Optional: The steamid of the broadcast whose details you are requesting."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastViewerStats_Request)
  return target;
}

size_t CBroadcast_GetBroadcastViewerStats_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastViewerStats_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 upload_id = 1 [(.description) = "Get stats for this stream"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_id());
    }

    // optional fixed64 steamid = 2 [(.description) = "Optional: The steamid of the broadcast whose details you are requesting."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastViewerStats_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastViewerStats_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastViewerStats_Request::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastViewerStats_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastViewerStats_Request *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastViewerStats_Request &>(from));
}


void CBroadcast_GetBroadcastViewerStats_Request::MergeFrom(const CBroadcast_GetBroadcastViewerStats_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastViewerStats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      upload_id_ = from.upload_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastViewerStats_Request::CopyFrom(const CBroadcast_GetBroadcastViewerStats_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastViewerStats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastViewerStats_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastViewerStats_Request::InternalSwap(CBroadcast_GetBroadcastViewerStats_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastViewerStats_Request, steamid_)
      + sizeof(CBroadcast_GetBroadcastViewerStats_Request::steamid_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastViewerStats_Request, upload_id_)>(
          reinterpret_cast<char*>(&upload_id_),
          reinterpret_cast<char*>(&other->upload_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastViewerStats_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[64]);
}

// ===================================================================

class CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastViewerStats_Response_ViewerStats>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
}
CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&time_)) + sizeof(num_viewers_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
}

inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&time_)) + sizeof(num_viewers_));
}

CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::~CBroadcast_GetBroadcastViewerStats_Response_ViewerStats() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* _this = reinterpret_cast< CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_viewers_) -
        reinterpret_cast<char*>(&time_)) + sizeof(num_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 time = 1 [(.description) = "time of record"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_viewers = 2 [(.description) = "current number of viewers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_viewers(&has_bits);
          num_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time = 1 [(.description) = "time of record"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  // optional uint32 num_viewers = 2 [(.description) = "current number of viewers"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_viewers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
  return target;
}

size_t CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 time = 1 [(.description) = "time of record"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
    }

    // optional uint32 num_viewers = 2 [(.description) = "current number of viewers"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_viewers());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastViewerStats_Response_ViewerStats *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats &>(from));
}


void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::MergeFrom(const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::CopyFrom(const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::InternalSwap(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats, num_viewers_)
      + sizeof(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::num_viewers_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[65]);
}

// ===================================================================

class CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_GetBroadcastViewerStats_Response_CountryStats>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_GetBroadcastViewerStats_Response_CountryStats::CBroadcast_GetBroadcastViewerStats_Response_CountryStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
}
CBroadcast_GetBroadcastViewerStats_Response_CountryStats::CBroadcast_GetBroadcastViewerStats_Response_CountryStats(const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArenaForAllocation());
  }
  num_viewers_ = from.num_viewers_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
}

inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
num_viewers_ = 0u;
}

CBroadcast_GetBroadcastViewerStats_Response_CountryStats::~CBroadcast_GetBroadcastViewerStats_Response_CountryStats() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastViewerStats_Response_CountryStats* _this = reinterpret_cast< CBroadcast_GetBroadcastViewerStats_Response_CountryStats* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_code_.ClearNonDefaultToEmpty();
  }
  num_viewers_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country_code = 1 [(.description) = "country code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_GetBroadcastViewerStats_Response.CountryStats.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_viewers = 2 [(.description) = "number of viewers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_viewers(&has_bits);
          num_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1 [(.description) = "country code"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_GetBroadcastViewerStats_Response.CountryStats.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // optional uint32 num_viewers = 2 [(.description) = "number of viewers"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_viewers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
  return target;
}

size_t CBroadcast_GetBroadcastViewerStats_Response_CountryStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string country_code = 1 [(.description) = "country code"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional uint32 num_viewers = 2 [(.description) = "number of viewers"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_viewers());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastViewerStats_Response_CountryStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastViewerStats_Response_CountryStats::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastViewerStats_Response_CountryStats *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastViewerStats_Response_CountryStats &>(from));
}


void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::MergeFrom(const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::CopyFrom(const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastViewerStats_Response_CountryStats::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::InternalSwap(CBroadcast_GetBroadcastViewerStats_Response_CountryStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  swap(num_viewers_, other->num_viewers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastViewerStats_Response_CountryStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[66]);
}

// ===================================================================

class CBroadcast_GetBroadcastViewerStats_Response::_Internal {
 public:
};

CBroadcast_GetBroadcastViewerStats_Response::CBroadcast_GetBroadcastViewerStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  viewer_stats_(arena),
  country_stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_GetBroadcastViewerStats_Response)
}
CBroadcast_GetBroadcastViewerStats_Response::CBroadcast_GetBroadcastViewerStats_Response(const CBroadcast_GetBroadcastViewerStats_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      viewer_stats_(from.viewer_stats_),
      country_stats_(from.country_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CBroadcast_GetBroadcastViewerStats_Response)
}

inline void CBroadcast_GetBroadcastViewerStats_Response::SharedCtor() {
}

CBroadcast_GetBroadcastViewerStats_Response::~CBroadcast_GetBroadcastViewerStats_Response() {
  // @@protoc_insertion_point(destructor:CBroadcast_GetBroadcastViewerStats_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_GetBroadcastViewerStats_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_GetBroadcastViewerStats_Response::ArenaDtor(void* object) {
  CBroadcast_GetBroadcastViewerStats_Response* _this = reinterpret_cast< CBroadcast_GetBroadcastViewerStats_Response* >(object);
  (void)_this;
}
void CBroadcast_GetBroadcastViewerStats_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_GetBroadcastViewerStats_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_GetBroadcastViewerStats_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_GetBroadcastViewerStats_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  viewer_stats_.Clear();
  country_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_GetBroadcastViewerStats_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CBroadcast_GetBroadcastViewerStats_Response.ViewerStats viewer_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_viewer_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CBroadcast_GetBroadcastViewerStats_Response.CountryStats country_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_country_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_GetBroadcastViewerStats_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_GetBroadcastViewerStats_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastViewerStats_Response.ViewerStats viewer_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_viewer_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_viewer_stats(i), target, stream);
  }

  // repeated .CBroadcast_GetBroadcastViewerStats_Response.CountryStats country_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_country_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_country_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_GetBroadcastViewerStats_Response)
  return target;
}

size_t CBroadcast_GetBroadcastViewerStats_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_GetBroadcastViewerStats_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CBroadcast_GetBroadcastViewerStats_Response.ViewerStats viewer_stats = 1;
  total_size += 1UL * this->_internal_viewer_stats_size();
  for (const auto& msg : this->viewer_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CBroadcast_GetBroadcastViewerStats_Response.CountryStats country_stats = 2;
  total_size += 1UL * this->_internal_country_stats_size();
  for (const auto& msg : this->country_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_GetBroadcastViewerStats_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_GetBroadcastViewerStats_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_GetBroadcastViewerStats_Response::GetClassData() const { return &_class_data_; }

void CBroadcast_GetBroadcastViewerStats_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_GetBroadcastViewerStats_Response *>(to)->MergeFrom(
      static_cast<const CBroadcast_GetBroadcastViewerStats_Response &>(from));
}


void CBroadcast_GetBroadcastViewerStats_Response::MergeFrom(const CBroadcast_GetBroadcastViewerStats_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_GetBroadcastViewerStats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  viewer_stats_.MergeFrom(from.viewer_stats_);
  country_stats_.MergeFrom(from.country_stats_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_GetBroadcastViewerStats_Response::CopyFrom(const CBroadcast_GetBroadcastViewerStats_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_GetBroadcastViewerStats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastViewerStats_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastViewerStats_Response::InternalSwap(CBroadcast_GetBroadcastViewerStats_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  viewer_stats_.InternalSwap(&other->viewer_stats_);
  country_stats_.InternalSwap(&other->country_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_GetBroadcastViewerStats_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[67]);
}

// ===================================================================

class CBroadcast_BroadcastViewerState_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_BroadcastViewerState_Notification>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_BroadcastViewerState_Notification)
}
CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification(const CBroadcast_BroadcastViewerState_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BroadcastViewerState_Notification)
}

inline void CBroadcast_BroadcastViewerState_Notification::SharedCtor() {
steamid_ = uint64_t{0u};
state_ = 1;
}

CBroadcast_BroadcastViewerState_Notification::~CBroadcast_BroadcastViewerState_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_BroadcastViewerState_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_BroadcastViewerState_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_BroadcastViewerState_Notification::ArenaDtor(void* object) {
  CBroadcast_BroadcastViewerState_Notification* _this = reinterpret_cast< CBroadcast_BroadcastViewerState_Notification* >(object);
  (void)_this;
}
void CBroadcast_BroadcastViewerState_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_BroadcastViewerState_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_BroadcastViewerState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BroadcastViewerState_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    steamid_ = uint64_t{0u};
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_BroadcastViewerState_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(val))) {
            _internal_set_state(static_cast<::CBroadcast_BroadcastViewerState_Notification_EViewerState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_BroadcastViewerState_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BroadcastViewerState_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BroadcastViewerState_Notification)
  return target;
}

size_t CBroadcast_BroadcastViewerState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BroadcastViewerState_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_BroadcastViewerState_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_BroadcastViewerState_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_BroadcastViewerState_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_BroadcastViewerState_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_BroadcastViewerState_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_BroadcastViewerState_Notification &>(from));
}


void CBroadcast_BroadcastViewerState_Notification::MergeFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BroadcastViewerState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_BroadcastViewerState_Notification::CopyFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BroadcastViewerState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastViewerState_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastViewerState_Notification::InternalSwap(CBroadcast_BroadcastViewerState_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_BroadcastViewerState_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[68]);
}

// ===================================================================

class CBroadcast_WaitingBroadcastViewer_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WaitingBroadcastViewer_Notification>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WaitingBroadcastViewer_Notification)
}
CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification(const CBroadcast_WaitingBroadcastViewer_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WaitingBroadcastViewer_Notification)
}

inline void CBroadcast_WaitingBroadcastViewer_Notification::SharedCtor() {
broadcast_id_ = uint64_t{0u};
}

CBroadcast_WaitingBroadcastViewer_Notification::~CBroadcast_WaitingBroadcastViewer_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_WaitingBroadcastViewer_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WaitingBroadcastViewer_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WaitingBroadcastViewer_Notification::ArenaDtor(void* object) {
  CBroadcast_WaitingBroadcastViewer_Notification* _this = reinterpret_cast< CBroadcast_WaitingBroadcastViewer_Notification* >(object);
  (void)_this;
}
void CBroadcast_WaitingBroadcastViewer_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WaitingBroadcastViewer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WaitingBroadcastViewer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WaitingBroadcastViewer_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WaitingBroadcastViewer_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WaitingBroadcastViewer_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WaitingBroadcastViewer_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WaitingBroadcastViewer_Notification)
  return target;
}

size_t CBroadcast_WaitingBroadcastViewer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WaitingBroadcastViewer_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WaitingBroadcastViewer_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WaitingBroadcastViewer_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WaitingBroadcastViewer_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_WaitingBroadcastViewer_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WaitingBroadcastViewer_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_WaitingBroadcastViewer_Notification &>(from));
}


void CBroadcast_WaitingBroadcastViewer_Notification::MergeFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WaitingBroadcastViewer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_id()) {
    _internal_set_broadcast_id(from._internal_broadcast_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WaitingBroadcastViewer_Notification::CopyFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WaitingBroadcastViewer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WaitingBroadcastViewer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WaitingBroadcastViewer_Notification::InternalSwap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WaitingBroadcastViewer_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[69]);
}

// ===================================================================

class CBroadcast_BroadcastUploadStarted_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_BroadcastUploadStarted_Notification>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_http_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_broadcast_upload_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heartbeat_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_rtmp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CBroadcast_BroadcastUploadStarted_Notification::CBroadcast_BroadcastUploadStarted_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_BroadcastUploadStarted_Notification)
}
CBroadcast_BroadcastUploadStarted_Notification::CBroadcast_BroadcastUploadStarted_Notification(const CBroadcast_BroadcastUploadStarted_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_upload_token()) {
    upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_upload_token(), 
      GetArenaForAllocation());
  }
  upload_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_upload_address()) {
    upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_upload_address(), 
      GetArenaForAllocation());
  }
  http_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_http_address()) {
    http_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rtmp_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(is_rtmp_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BroadcastUploadStarted_Notification)
}

inline void CBroadcast_BroadcastUploadStarted_Notification::SharedCtor() {
upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
upload_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
http_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_rtmp_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(is_rtmp_));
}

CBroadcast_BroadcastUploadStarted_Notification::~CBroadcast_BroadcastUploadStarted_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_BroadcastUploadStarted_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_BroadcastUploadStarted_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  upload_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upload_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  http_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BroadcastUploadStarted_Notification::ArenaDtor(void* object) {
  CBroadcast_BroadcastUploadStarted_Notification* _this = reinterpret_cast< CBroadcast_BroadcastUploadStarted_Notification* >(object);
  (void)_this;
}
void CBroadcast_BroadcastUploadStarted_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_BroadcastUploadStarted_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_BroadcastUploadStarted_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BroadcastUploadStarted_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      upload_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      upload_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      http_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_rtmp_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(is_rtmp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_BroadcastUploadStarted_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string upload_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_upload_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BroadcastUploadStarted_Notification.upload_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string upload_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_upload_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BroadcastUploadStarted_Notification.upload_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string http_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_http_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BroadcastUploadStarted_Notification.http_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_upload_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_broadcast_upload_id(&has_bits);
          broadcast_upload_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heartbeat_interval_seconds = 6 [(.description) = "how many seconds between session heartbeats"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_heartbeat_interval_seconds(&has_bits);
          heartbeat_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_rtmp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_rtmp(&has_bits);
          is_rtmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_BroadcastUploadStarted_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BroadcastUploadStarted_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  // optional string upload_token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upload_token().data(), static_cast<int>(this->_internal_upload_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BroadcastUploadStarted_Notification.upload_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_upload_token(), target);
  }

  // optional string upload_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upload_address().data(), static_cast<int>(this->_internal_upload_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BroadcastUploadStarted_Notification.upload_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_upload_address(), target);
  }

  // optional string http_address = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_http_address().data(), static_cast<int>(this->_internal_http_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BroadcastUploadStarted_Notification.http_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_http_address(), target);
  }

  // optional fixed64 broadcast_upload_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_broadcast_upload_id(), target);
  }

  // optional uint32 heartbeat_interval_seconds = 6 [(.description) = "how many seconds between session heartbeats"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_heartbeat_interval_seconds(), target);
  }

  // optional bool is_rtmp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_rtmp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BroadcastUploadStarted_Notification)
  return target;
}

size_t CBroadcast_BroadcastUploadStarted_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BroadcastUploadStarted_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string upload_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_upload_token());
    }

    // optional string upload_address = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_upload_address());
    }

    // optional string http_address = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_http_address());
    }

    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_upload_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 heartbeat_interval_seconds = 6 [(.description) = "how many seconds between session heartbeats"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_heartbeat_interval_seconds());
    }

    // optional bool is_rtmp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_BroadcastUploadStarted_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_BroadcastUploadStarted_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_BroadcastUploadStarted_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_BroadcastUploadStarted_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_BroadcastUploadStarted_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_BroadcastUploadStarted_Notification &>(from));
}


void CBroadcast_BroadcastUploadStarted_Notification::MergeFrom(const CBroadcast_BroadcastUploadStarted_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BroadcastUploadStarted_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_upload_token(from._internal_upload_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_upload_address(from._internal_upload_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_http_address(from._internal_http_address());
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_upload_id_ = from.broadcast_upload_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      heartbeat_interval_seconds_ = from.heartbeat_interval_seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_rtmp_ = from.is_rtmp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_BroadcastUploadStarted_Notification::CopyFrom(const CBroadcast_BroadcastUploadStarted_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BroadcastUploadStarted_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastUploadStarted_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastUploadStarted_Notification::InternalSwap(CBroadcast_BroadcastUploadStarted_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &upload_token_, lhs_arena,
      &other->upload_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &upload_address_, lhs_arena,
      &other->upload_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &http_address_, lhs_arena,
      &other->http_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_BroadcastUploadStarted_Notification, is_rtmp_)
      + sizeof(CBroadcast_BroadcastUploadStarted_Notification::is_rtmp_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_BroadcastUploadStarted_Notification, broadcast_id_)>(
          reinterpret_cast<char*>(&broadcast_id_),
          reinterpret_cast<char*>(&other->broadcast_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_BroadcastUploadStarted_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[70]);
}

// ===================================================================

class CBroadcast_StopBroadcastUpload_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_StopBroadcastUpload_Notification>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_relay_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upload_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_too_many_poor_uploads(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_StopBroadcastUpload_Notification)
}
CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification(const CBroadcast_StopBroadcastUpload_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&too_many_poor_uploads_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_StopBroadcastUpload_Notification)
}

inline void CBroadcast_StopBroadcastUpload_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&too_many_poor_uploads_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
}

CBroadcast_StopBroadcastUpload_Notification::~CBroadcast_StopBroadcastUpload_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_StopBroadcastUpload_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_StopBroadcastUpload_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_StopBroadcastUpload_Notification::ArenaDtor(void* object) {
  CBroadcast_StopBroadcastUpload_Notification* _this = reinterpret_cast< CBroadcast_StopBroadcastUpload_Notification* >(object);
  (void)_this;
}
void CBroadcast_StopBroadcastUpload_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_StopBroadcastUpload_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_StopBroadcastUpload_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_StopBroadcastUpload_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&too_many_poor_uploads_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(too_many_poor_uploads_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_StopBroadcastUpload_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_relay_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_broadcast_relay_id(&has_bits);
          broadcast_relay_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upload_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upload_result(&has_bits);
          upload_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool too_many_poor_uploads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_too_many_poor_uploads(&has_bits);
          too_many_poor_uploads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_StopBroadcastUpload_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_StopBroadcastUpload_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  // optional fixed64 broadcast_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_broadcast_relay_id(), target);
  }

  // optional uint32 upload_result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_upload_result(), target);
  }

  // optional bool too_many_poor_uploads = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_too_many_poor_uploads(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_StopBroadcastUpload_Notification)
  return target;
}

size_t CBroadcast_StopBroadcastUpload_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_StopBroadcastUpload_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_relay_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_upload_result());
    }

    // optional bool too_many_poor_uploads = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_StopBroadcastUpload_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_StopBroadcastUpload_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_StopBroadcastUpload_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_StopBroadcastUpload_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_StopBroadcastUpload_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_StopBroadcastUpload_Notification &>(from));
}


void CBroadcast_StopBroadcastUpload_Notification::MergeFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_StopBroadcastUpload_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_relay_id_ = from.broadcast_relay_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      upload_result_ = from.upload_result_;
    }
    if (cached_has_bits & 0x00000008u) {
      too_many_poor_uploads_ = from.too_many_poor_uploads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_StopBroadcastUpload_Notification::CopyFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_StopBroadcastUpload_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StopBroadcastUpload_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_StopBroadcastUpload_Notification::InternalSwap(CBroadcast_StopBroadcastUpload_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, too_many_poor_uploads_)
      + sizeof(CBroadcast_StopBroadcastUpload_Notification::too_many_poor_uploads_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, broadcast_id_)>(
          reinterpret_cast<char*>(&broadcast_id_),
          reinterpret_cast<char*>(&other->broadcast_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_StopBroadcastUpload_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[71]);
}

// ===================================================================

class CBroadcast_SessionClosed_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_SessionClosed_Notification>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SessionClosed_Notification)
}
CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification(const CBroadcast_SessionClosed_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SessionClosed_Notification)
}

inline void CBroadcast_SessionClosed_Notification::SharedCtor() {
broadcast_id_ = uint64_t{0u};
}

CBroadcast_SessionClosed_Notification::~CBroadcast_SessionClosed_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_SessionClosed_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_SessionClosed_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_SessionClosed_Notification::ArenaDtor(void* object) {
  CBroadcast_SessionClosed_Notification* _this = reinterpret_cast< CBroadcast_SessionClosed_Notification* >(object);
  (void)_this;
}
void CBroadcast_SessionClosed_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_SessionClosed_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_SessionClosed_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SessionClosed_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_SessionClosed_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_SessionClosed_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SessionClosed_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SessionClosed_Notification)
  return target;
}

size_t CBroadcast_SessionClosed_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SessionClosed_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SessionClosed_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_SessionClosed_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SessionClosed_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_SessionClosed_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_SessionClosed_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_SessionClosed_Notification &>(from));
}


void CBroadcast_SessionClosed_Notification::MergeFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SessionClosed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_id()) {
    _internal_set_broadcast_id(from._internal_broadcast_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_SessionClosed_Notification::CopyFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SessionClosed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SessionClosed_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_SessionClosed_Notification::InternalSwap(CBroadcast_SessionClosed_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_id_, other->broadcast_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SessionClosed_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[72]);
}

// ===================================================================

class CBroadcast_ViewerBroadcastInvite_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_ViewerBroadcastInvite_Notification>()._has_bits_);
  static void set_has_broadcaster_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_ViewerBroadcastInvite_Notification)
}
CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification(const CBroadcast_ViewerBroadcastInvite_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcaster_steamid_ = from.broadcaster_steamid_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_ViewerBroadcastInvite_Notification)
}

inline void CBroadcast_ViewerBroadcastInvite_Notification::SharedCtor() {
broadcaster_steamid_ = uint64_t{0u};
}

CBroadcast_ViewerBroadcastInvite_Notification::~CBroadcast_ViewerBroadcastInvite_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_ViewerBroadcastInvite_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_ViewerBroadcastInvite_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_ViewerBroadcastInvite_Notification::ArenaDtor(void* object) {
  CBroadcast_ViewerBroadcastInvite_Notification* _this = reinterpret_cast< CBroadcast_ViewerBroadcastInvite_Notification* >(object);
  (void)_this;
}
void CBroadcast_ViewerBroadcastInvite_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_ViewerBroadcastInvite_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_ViewerBroadcastInvite_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_ViewerBroadcastInvite_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcaster_steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_ViewerBroadcastInvite_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcaster_steamid(&has_bits);
          broadcaster_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_ViewerBroadcastInvite_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_ViewerBroadcastInvite_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcaster_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_ViewerBroadcastInvite_Notification)
  return target;
}

size_t CBroadcast_ViewerBroadcastInvite_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_ViewerBroadcastInvite_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcaster_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_ViewerBroadcastInvite_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_ViewerBroadcastInvite_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_ViewerBroadcastInvite_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_ViewerBroadcastInvite_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_ViewerBroadcastInvite_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_ViewerBroadcastInvite_Notification &>(from));
}


void CBroadcast_ViewerBroadcastInvite_Notification::MergeFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_ViewerBroadcastInvite_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcaster_steamid()) {
    _internal_set_broadcaster_steamid(from._internal_broadcaster_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_ViewerBroadcastInvite_Notification::CopyFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_ViewerBroadcastInvite_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_ViewerBroadcastInvite_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_ViewerBroadcastInvite_Notification::InternalSwap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcaster_steamid_, other->broadcaster_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_ViewerBroadcastInvite_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[73]);
}

// ===================================================================

class CBroadcast_BroadcastStatus_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_BroadcastStatus_Notification>()._has_bits_);
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_BroadcastStatus_Notification)
}
CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification(const CBroadcast_BroadcastStatus_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BroadcastStatus_Notification)
}

inline void CBroadcast_BroadcastStatus_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
}

CBroadcast_BroadcastStatus_Notification::~CBroadcast_BroadcastStatus_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_BroadcastStatus_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_BroadcastStatus_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_BroadcastStatus_Notification::ArenaDtor(void* object) {
  CBroadcast_BroadcastStatus_Notification* _this = reinterpret_cast< CBroadcast_BroadcastStatus_Notification* >(object);
  (void)_this;
}
void CBroadcast_BroadcastStatus_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_BroadcastStatus_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_BroadcastStatus_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BroadcastStatus_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&broadcast_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_viewers_) -
        reinterpret_cast<char*>(&broadcast_id_)) + sizeof(num_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_BroadcastStatus_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_viewers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_viewers(&has_bits);
          num_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_BroadcastStatus_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BroadcastStatus_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_id(), target);
  }

  // optional int32 num_viewers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_viewers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BroadcastStatus_Notification)
  return target;
}

size_t CBroadcast_BroadcastStatus_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BroadcastStatus_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 broadcast_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 num_viewers = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_viewers());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_BroadcastStatus_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_BroadcastStatus_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_BroadcastStatus_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_BroadcastStatus_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_BroadcastStatus_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_BroadcastStatus_Notification &>(from));
}


void CBroadcast_BroadcastStatus_Notification::MergeFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BroadcastStatus_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_BroadcastStatus_Notification::CopyFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BroadcastStatus_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastStatus_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastStatus_Notification::InternalSwap(CBroadcast_BroadcastStatus_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_BroadcastStatus_Notification, num_viewers_)
      + sizeof(CBroadcast_BroadcastStatus_Notification::num_viewers_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_BroadcastStatus_Notification, broadcast_id_)>(
          reinterpret_cast<char*>(&broadcast_id_),
          reinterpret_cast<char*>(&other->broadcast_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_BroadcastStatus_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[74]);
}

// ===================================================================

class CBroadcast_BroadcastChannelLive_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_BroadcastChannelLive_Notification>()._has_bits_);
  static void set_has_broadcast_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_broadcast_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_channel_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CBroadcast_BroadcastChannelLive_Notification::CBroadcast_BroadcastChannelLive_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_BroadcastChannelLive_Notification)
}
CBroadcast_BroadcastChannelLive_Notification::CBroadcast_BroadcastChannelLive_Notification(const CBroadcast_BroadcastChannelLive_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    broadcast_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcast_channel_name()) {
    broadcast_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_broadcast_channel_name(), 
      GetArenaForAllocation());
  }
  broadcast_channel_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    broadcast_channel_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcast_channel_avatar()) {
    broadcast_channel_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_broadcast_channel_avatar(), 
      GetArenaForAllocation());
  }
  broadcast_channel_id_ = from.broadcast_channel_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_BroadcastChannelLive_Notification)
}

inline void CBroadcast_BroadcastChannelLive_Notification::SharedCtor() {
broadcast_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  broadcast_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
broadcast_channel_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  broadcast_channel_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
broadcast_channel_id_ = uint64_t{0u};
}

CBroadcast_BroadcastChannelLive_Notification::~CBroadcast_BroadcastChannelLive_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_BroadcastChannelLive_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_BroadcastChannelLive_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  broadcast_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_channel_avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BroadcastChannelLive_Notification::ArenaDtor(void* object) {
  CBroadcast_BroadcastChannelLive_Notification* _this = reinterpret_cast< CBroadcast_BroadcastChannelLive_Notification* >(object);
  (void)_this;
}
void CBroadcast_BroadcastChannelLive_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_BroadcastChannelLive_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_BroadcastChannelLive_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_BroadcastChannelLive_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_channel_avatar_.ClearNonDefaultToEmpty();
    }
  }
  broadcast_channel_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_BroadcastChannelLive_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_channel_id(&has_bits);
          broadcast_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string broadcast_channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_broadcast_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string broadcast_channel_avatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_broadcast_channel_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_avatar");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_BroadcastChannelLive_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_BroadcastChannelLive_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_channel_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_channel_id(), target);
  }

  // optional string broadcast_channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_channel_name().data(), static_cast<int>(this->_internal_broadcast_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_broadcast_channel_name(), target);
  }

  // optional string broadcast_channel_avatar = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_channel_avatar().data(), static_cast<int>(this->_internal_broadcast_channel_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_avatar");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_broadcast_channel_avatar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_BroadcastChannelLive_Notification)
  return target;
}

size_t CBroadcast_BroadcastChannelLive_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_BroadcastChannelLive_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string broadcast_channel_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_channel_name());
    }

    // optional string broadcast_channel_avatar = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_channel_avatar());
    }

    // optional fixed64 broadcast_channel_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_BroadcastChannelLive_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_BroadcastChannelLive_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_BroadcastChannelLive_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_BroadcastChannelLive_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_BroadcastChannelLive_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_BroadcastChannelLive_Notification &>(from));
}


void CBroadcast_BroadcastChannelLive_Notification::MergeFrom(const CBroadcast_BroadcastChannelLive_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_BroadcastChannelLive_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_broadcast_channel_name(from._internal_broadcast_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_broadcast_channel_avatar(from._internal_broadcast_channel_avatar());
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_channel_id_ = from.broadcast_channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_BroadcastChannelLive_Notification::CopyFrom(const CBroadcast_BroadcastChannelLive_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_BroadcastChannelLive_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastChannelLive_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastChannelLive_Notification::InternalSwap(CBroadcast_BroadcastChannelLive_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &broadcast_channel_name_, lhs_arena,
      &other->broadcast_channel_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &broadcast_channel_avatar_, lhs_arena,
      &other->broadcast_channel_avatar_, rhs_arena
  );
  swap(broadcast_channel_id_, other->broadcast_channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_BroadcastChannelLive_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[75]);
}

// ===================================================================

class CBroadcast_SendThumbnailToRelay_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_SendThumbnailToRelay_Notification>()._has_bits_);
  static void set_has_thumbnail_upload_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thumbnail_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thumbnail_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thumbnail_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_thumbnail_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CBroadcast_SendThumbnailToRelay_Notification::CBroadcast_SendThumbnailToRelay_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_SendThumbnailToRelay_Notification)
}
CBroadcast_SendThumbnailToRelay_Notification::CBroadcast_SendThumbnailToRelay_Notification(const CBroadcast_SendThumbnailToRelay_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thumbnail_upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_upload_token()) {
    thumbnail_upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_upload_token(), 
      GetArenaForAllocation());
  }
  thumbnail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnail_data()) {
    thumbnail_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumbnail_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&thumbnail_broadcast_session_id_, &from.thumbnail_broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_SendThumbnailToRelay_Notification)
}

inline void CBroadcast_SendThumbnailToRelay_Notification::SharedCtor() {
thumbnail_upload_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&thumbnail_broadcast_session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_height_) -
    reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
}

CBroadcast_SendThumbnailToRelay_Notification::~CBroadcast_SendThumbnailToRelay_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_SendThumbnailToRelay_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_SendThumbnailToRelay_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  thumbnail_upload_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumbnail_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SendThumbnailToRelay_Notification::ArenaDtor(void* object) {
  CBroadcast_SendThumbnailToRelay_Notification* _this = reinterpret_cast< CBroadcast_SendThumbnailToRelay_Notification* >(object);
  (void)_this;
}
void CBroadcast_SendThumbnailToRelay_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_SendThumbnailToRelay_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_SendThumbnailToRelay_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_SendThumbnailToRelay_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thumbnail_upload_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      thumbnail_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&thumbnail_broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thumbnail_height_) -
        reinterpret_cast<char*>(&thumbnail_broadcast_session_id_)) + sizeof(thumbnail_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_SendThumbnailToRelay_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string thumbnail_upload_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_thumbnail_upload_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 thumbnail_broadcast_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_thumbnail_broadcast_session_id(&has_bits);
          thumbnail_broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes thumbnail_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_thumbnail_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnail_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_thumbnail_width(&has_bits);
          thumbnail_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 thumbnail_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_thumbnail_height(&has_bits);
          thumbnail_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_SendThumbnailToRelay_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_SendThumbnailToRelay_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thumbnail_upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnail_upload_token().data(), static_cast<int>(this->_internal_thumbnail_upload_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thumbnail_upload_token(), target);
  }

  // optional fixed64 thumbnail_broadcast_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_thumbnail_broadcast_session_id(), target);
  }

  // optional bytes thumbnail_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_thumbnail_data(), target);
  }

  // optional uint32 thumbnail_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_thumbnail_width(), target);
  }

  // optional uint32 thumbnail_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_thumbnail_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_SendThumbnailToRelay_Notification)
  return target;
}

size_t CBroadcast_SendThumbnailToRelay_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_SendThumbnailToRelay_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string thumbnail_upload_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnail_upload_token());
    }

    // optional bytes thumbnail_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_thumbnail_data());
    }

    // optional fixed64 thumbnail_broadcast_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 thumbnail_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_thumbnail_width());
    }

    // optional uint32 thumbnail_height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_thumbnail_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_SendThumbnailToRelay_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_SendThumbnailToRelay_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_SendThumbnailToRelay_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_SendThumbnailToRelay_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_SendThumbnailToRelay_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_SendThumbnailToRelay_Notification &>(from));
}


void CBroadcast_SendThumbnailToRelay_Notification::MergeFrom(const CBroadcast_SendThumbnailToRelay_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_SendThumbnailToRelay_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_thumbnail_upload_token(from._internal_thumbnail_upload_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_thumbnail_data(from._internal_thumbnail_data());
    }
    if (cached_has_bits & 0x00000004u) {
      thumbnail_broadcast_session_id_ = from.thumbnail_broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thumbnail_width_ = from.thumbnail_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      thumbnail_height_ = from.thumbnail_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_SendThumbnailToRelay_Notification::CopyFrom(const CBroadcast_SendThumbnailToRelay_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_SendThumbnailToRelay_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendThumbnailToRelay_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_SendThumbnailToRelay_Notification::InternalSwap(CBroadcast_SendThumbnailToRelay_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_upload_token_, lhs_arena,
      &other->thumbnail_upload_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &thumbnail_data_, lhs_arena,
      &other->thumbnail_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_SendThumbnailToRelay_Notification, thumbnail_height_)
      + sizeof(CBroadcast_SendThumbnailToRelay_Notification::thumbnail_height_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_SendThumbnailToRelay_Notification, thumbnail_broadcast_session_id_)>(
          reinterpret_cast<char*>(&thumbnail_broadcast_session_id_),
          reinterpret_cast<char*>(&other->thumbnail_broadcast_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_SendThumbnailToRelay_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[76]);
}

// ===================================================================

class CBroadcast_WebRTCNeedTURNServer_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCNeedTURNServer_Notification>()._has_bits_);
  static void set_has_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCNeedTURNServer_Notification::CBroadcast_WebRTCNeedTURNServer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCNeedTURNServer_Notification)
}
CBroadcast_WebRTCNeedTURNServer_Notification::CBroadcast_WebRTCNeedTURNServer_Notification(const CBroadcast_WebRTCNeedTURNServer_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_session_id_ = from.broadcast_session_id_;
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCNeedTURNServer_Notification)
}

inline void CBroadcast_WebRTCNeedTURNServer_Notification::SharedCtor() {
broadcast_session_id_ = uint64_t{0u};
}

CBroadcast_WebRTCNeedTURNServer_Notification::~CBroadcast_WebRTCNeedTURNServer_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCNeedTURNServer_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCNeedTURNServer_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WebRTCNeedTURNServer_Notification::ArenaDtor(void* object) {
  CBroadcast_WebRTCNeedTURNServer_Notification* _this = reinterpret_cast< CBroadcast_WebRTCNeedTURNServer_Notification* >(object);
  (void)_this;
}
void CBroadcast_WebRTCNeedTURNServer_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCNeedTURNServer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCNeedTURNServer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCNeedTURNServer_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCNeedTURNServer_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_session_id(&has_bits);
          broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCNeedTURNServer_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCNeedTURNServer_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCNeedTURNServer_Notification)
  return target;
}

size_t CBroadcast_WebRTCNeedTURNServer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCNeedTURNServer_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 broadcast_session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCNeedTURNServer_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCNeedTURNServer_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCNeedTURNServer_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCNeedTURNServer_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCNeedTURNServer_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCNeedTURNServer_Notification &>(from));
}


void CBroadcast_WebRTCNeedTURNServer_Notification::MergeFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCNeedTURNServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_session_id()) {
    _internal_set_broadcast_session_id(from._internal_broadcast_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCNeedTURNServer_Notification::CopyFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCNeedTURNServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCNeedTURNServer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCNeedTURNServer_Notification::InternalSwap(CBroadcast_WebRTCNeedTURNServer_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_session_id_, other->broadcast_session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCNeedTURNServer_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[77]);
}

// ===================================================================

class CBroadcast_WebRTCStart_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCStart_Notification>()._has_bits_);
  static void set_has_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_viewer_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_viewer_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CBroadcast_WebRTCStart_Notification::CBroadcast_WebRTCStart_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCStart_Notification)
}
CBroadcast_WebRTCStart_Notification::CBroadcast_WebRTCStart_Notification(const CBroadcast_WebRTCStart_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&broadcast_session_id_, &from.broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(viewer_token_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCStart_Notification)
}

inline void CBroadcast_WebRTCStart_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(viewer_token_));
}

CBroadcast_WebRTCStart_Notification::~CBroadcast_WebRTCStart_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCStart_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCStart_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CBroadcast_WebRTCStart_Notification::ArenaDtor(void* object) {
  CBroadcast_WebRTCStart_Notification* _this = reinterpret_cast< CBroadcast_WebRTCStart_Notification* >(object);
  (void)_this;
}
void CBroadcast_WebRTCStart_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCStart_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCStart_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCStart_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viewer_token_) -
        reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(viewer_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCStart_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_session_id(&has_bits);
          broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 webrtc_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 viewer_steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_viewer_steamid(&has_bits);
          viewer_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 viewer_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_viewer_token(&has_bits);
          viewer_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCStart_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCStart_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_session_id(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_webrtc_session_id(), target);
  }

  // optional fixed64 viewer_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_viewer_steamid(), target);
  }

  // optional fixed64 viewer_token = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_viewer_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCStart_Notification)
  return target;
}

size_t CBroadcast_WebRTCStart_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCStart_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCStart_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCStart_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCStart_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCStart_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCStart_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCStart_Notification &>(from));
}


void CBroadcast_WebRTCStart_Notification::MergeFrom(const CBroadcast_WebRTCStart_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCStart_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_steamid_ = from.viewer_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      viewer_token_ = from.viewer_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCStart_Notification::CopyFrom(const CBroadcast_WebRTCStart_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCStart_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCStart_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCStart_Notification::InternalSwap(CBroadcast_WebRTCStart_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCStart_Notification, viewer_token_)
      + sizeof(CBroadcast_WebRTCStart_Notification::viewer_token_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCStart_Notification, broadcast_session_id_)>(
          reinterpret_cast<char*>(&broadcast_session_id_),
          reinterpret_cast<char*>(&other->broadcast_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCStart_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[78]);
}

// ===================================================================

class CBroadcast_WebRTCSetAnswer_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCSetAnswer_Notification>()._has_bits_);
  static void set_has_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_answer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_WebRTCSetAnswer_Notification::CBroadcast_WebRTCSetAnswer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCSetAnswer_Notification)
}
CBroadcast_WebRTCSetAnswer_Notification::CBroadcast_WebRTCSetAnswer_Notification(const CBroadcast_WebRTCSetAnswer_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_answer()) {
    answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_answer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&broadcast_session_id_, &from.broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCSetAnswer_Notification)
}

inline void CBroadcast_WebRTCSetAnswer_Notification::SharedCtor() {
answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&broadcast_session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCSetAnswer_Notification::~CBroadcast_WebRTCSetAnswer_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCSetAnswer_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCSetAnswer_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  answer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WebRTCSetAnswer_Notification::ArenaDtor(void* object) {
  CBroadcast_WebRTCSetAnswer_Notification* _this = reinterpret_cast< CBroadcast_WebRTCSetAnswer_Notification* >(object);
  (void)_this;
}
void CBroadcast_WebRTCSetAnswer_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCSetAnswer_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCSetAnswer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCSetAnswer_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    answer_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCSetAnswer_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_session_id(&has_bits);
          broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 webrtc_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string answer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_answer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CBroadcast_WebRTCSetAnswer_Notification.answer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCSetAnswer_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCSetAnswer_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_session_id(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_webrtc_session_id(), target);
  }

  // optional string answer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CBroadcast_WebRTCSetAnswer_Notification.answer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCSetAnswer_Notification)
  return target;
}

size_t CBroadcast_WebRTCSetAnswer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCSetAnswer_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string answer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_answer());
    }

    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCSetAnswer_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCSetAnswer_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCSetAnswer_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCSetAnswer_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCSetAnswer_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCSetAnswer_Notification &>(from));
}


void CBroadcast_WebRTCSetAnswer_Notification::MergeFrom(const CBroadcast_WebRTCSetAnswer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCSetAnswer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_answer(from._internal_answer());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCSetAnswer_Notification::CopyFrom(const CBroadcast_WebRTCSetAnswer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCSetAnswer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCSetAnswer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCSetAnswer_Notification::InternalSwap(CBroadcast_WebRTCSetAnswer_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &answer_, lhs_arena,
      &other->answer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCSetAnswer_Notification, webrtc_session_id_)
      + sizeof(CBroadcast_WebRTCSetAnswer_Notification::webrtc_session_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCSetAnswer_Notification, broadcast_session_id_)>(
          reinterpret_cast<char*>(&broadcast_session_id_),
          reinterpret_cast<char*>(&other->broadcast_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCSetAnswer_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[79]);
}

// ===================================================================

class CBroadcast_WebRTCAddViewerCandidate_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_WebRTCAddViewerCandidate_Notification>()._has_bits_);
  static void set_has_broadcast_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_webrtc_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CBroadcast_WebRTC_Candidate& candidate(const CBroadcast_WebRTCAddViewerCandidate_Notification* msg);
  static void set_has_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CBroadcast_WebRTC_Candidate&
CBroadcast_WebRTCAddViewerCandidate_Notification::_Internal::candidate(const CBroadcast_WebRTCAddViewerCandidate_Notification* msg) {
  return *msg->candidate_;
}
CBroadcast_WebRTCAddViewerCandidate_Notification::CBroadcast_WebRTCAddViewerCandidate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CBroadcast_WebRTCAddViewerCandidate_Notification)
}
CBroadcast_WebRTCAddViewerCandidate_Notification::CBroadcast_WebRTCAddViewerCandidate_Notification(const CBroadcast_WebRTCAddViewerCandidate_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candidate()) {
    candidate_ = new ::CBroadcast_WebRTC_Candidate(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  ::memcpy(&broadcast_session_id_, &from.broadcast_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_WebRTCAddViewerCandidate_Notification)
}

inline void CBroadcast_WebRTCAddViewerCandidate_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&candidate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&webrtc_session_id_) -
    reinterpret_cast<char*>(&candidate_)) + sizeof(webrtc_session_id_));
}

CBroadcast_WebRTCAddViewerCandidate_Notification::~CBroadcast_WebRTCAddViewerCandidate_Notification() {
  // @@protoc_insertion_point(destructor:CBroadcast_WebRTCAddViewerCandidate_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CBroadcast_WebRTCAddViewerCandidate_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete candidate_;
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::ArenaDtor(void* object) {
  CBroadcast_WebRTCAddViewerCandidate_Notification* _this = reinterpret_cast< CBroadcast_WebRTCAddViewerCandidate_Notification* >(object);
  (void)_this;
}
void CBroadcast_WebRTCAddViewerCandidate_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_WebRTCAddViewerCandidate_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_WebRTCAddViewerCandidate_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(candidate_ != nullptr);
    candidate_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&broadcast_session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webrtc_session_id_) -
        reinterpret_cast<char*>(&broadcast_session_id_)) + sizeof(webrtc_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_WebRTCAddViewerCandidate_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 broadcast_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_broadcast_session_id(&has_bits);
          broadcast_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 webrtc_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_webrtc_session_id(&has_bits);
          webrtc_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CBroadcast_WebRTC_Candidate candidate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CBroadcast_WebRTCAddViewerCandidate_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_WebRTCAddViewerCandidate_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_session_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_broadcast_session_id(), target);
  }

  // optional fixed64 webrtc_session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_webrtc_session_id(), target);
  }

  // optional .CBroadcast_WebRTC_Candidate candidate = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::candidate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_WebRTCAddViewerCandidate_Notification)
  return target;
}

size_t CBroadcast_WebRTCAddViewerCandidate_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_WebRTCAddViewerCandidate_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CBroadcast_WebRTC_Candidate candidate = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *candidate_);
    }

    // optional fixed64 broadcast_session_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 webrtc_session_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CBroadcast_WebRTCAddViewerCandidate_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CBroadcast_WebRTCAddViewerCandidate_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CBroadcast_WebRTCAddViewerCandidate_Notification::GetClassData() const { return &_class_data_; }

void CBroadcast_WebRTCAddViewerCandidate_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CBroadcast_WebRTCAddViewerCandidate_Notification *>(to)->MergeFrom(
      static_cast<const CBroadcast_WebRTCAddViewerCandidate_Notification &>(from));
}


void CBroadcast_WebRTCAddViewerCandidate_Notification::MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_WebRTCAddViewerCandidate_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_candidate()->::CBroadcast_WebRTC_Candidate::MergeFrom(from._internal_candidate());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_session_id_ = from.broadcast_session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      webrtc_session_id_ = from.webrtc_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_WebRTCAddViewerCandidate_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WebRTCAddViewerCandidate_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WebRTCAddViewerCandidate_Notification::InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCAddViewerCandidate_Notification, webrtc_session_id_)
      + sizeof(CBroadcast_WebRTCAddViewerCandidate_Notification::webrtc_session_id_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_WebRTCAddViewerCandidate_Notification, candidate_)>(
          reinterpret_cast<char*>(&candidate_),
          reinterpret_cast<char*>(&other->candidate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_WebRTCAddViewerCandidate_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fbroadcast_2esteamclient_2eproto[80]);
}

// ===================================================================

Broadcast::~Broadcast() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Broadcast::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Broadcast::GetDescriptor() {
  return descriptor();
}

void Broadcast::BeginBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_BeginBroadcastSession_Request*,
                         ::CBroadcast_BeginBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::EndBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_EndBroadcastSession_Request*,
                         ::CBroadcast_EndBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::StartBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_StartBroadcastUpload_Request*,
                         ::CBroadcast_StartBroadcastUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartBroadcastUpload() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastUploadStop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_NotifyBroadcastUploadStop_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastUploadStop() not implemented.");
  done->Run();
}

void Broadcast::WatchBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WatchBroadcast_Request*,
                         ::CBroadcast_WatchBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WatchBroadcast() not implemented.");
  done->Run();
}

void Broadcast::HeartbeatBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_HeartbeatBroadcast_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HeartbeatBroadcast() not implemented.");
  done->Run();
}

void Broadcast::StopWatchingBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_StopWatchingBroadcast_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopWatchingBroadcast() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetBroadcastStatus_Request*,
                         ::CBroadcast_GetBroadcastStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastStatus() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastThumbnail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetBroadcastThumbnail_Request*,
                         ::CBroadcast_GetBroadcastThumbnail_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastThumbnail() not implemented.");
  done->Run();
}

void Broadcast::InviteToBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_InviteToBroadcast_Request*,
                         ::CBroadcast_InviteToBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InviteToBroadcast() not implemented.");
  done->Run();
}

void Broadcast::SendBroadcastStateToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_SendBroadcastStateToServer_Request*,
                         ::CBroadcast_SendBroadcastStateToServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendBroadcastStateToServer() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastSessionHeartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastSessionHeartbeat() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetBroadcastChatInfo_Request*,
                         ::CBroadcast_GetBroadcastChatInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatInfo() not implemented.");
  done->Run();
}

void Broadcast::PostChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_PostChatMessage_Request*,
                         ::CBroadcast_PostChatMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PostChatMessage() not implemented.");
  done->Run();
}

void Broadcast::UpdateChatMessageFlair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_UpdateChatMessageFlair_Request*,
                         ::CBroadcast_UpdateChatMessageFlair_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateChatMessageFlair() not implemented.");
  done->Run();
}

void Broadcast::MuteBroadcastChatUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_MuteBroadcastChatUser_Request*,
                         ::CBroadcast_MuteBroadcastChatUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MuteBroadcastChatUser() not implemented.");
  done->Run();
}

void Broadcast::RemoveUserChatText(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_RemoveUserChatText_Request*,
                         ::CBroadcast_RemoveUserChatText_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveUserChatText() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatUserNames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetBroadcastChatUserNames_Request*,
                         ::CBroadcast_GetBroadcastChatUserNames_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatUserNames() not implemented.");
  done->Run();
}

void Broadcast::StartBuildClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_StartBuildClip_Request*,
                         ::CBroadcast_StartBuildClip_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartBuildClip() not implemented.");
  done->Run();
}

void Broadcast::GetBuildClipStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetBuildClipStatus_Request*,
                         ::CBroadcast_GetBuildClipStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBuildClipStatus() not implemented.");
  done->Run();
}

void Broadcast::SetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_SetClipDetails_Request*,
                         ::CBroadcast_SetClipDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetClipDetails() not implemented.");
  done->Run();
}

void Broadcast::GetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetClipDetails_Request*,
                         ::CBroadcast_GetClipDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClipDetails() not implemented.");
  done->Run();
}

void Broadcast::SetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_SetRTMPInfo_Request*,
                         ::CBroadcast_SetRTMPInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetRTMPInfo() not implemented.");
  done->Run();
}

void Broadcast::GetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetRTMPInfo_Request*,
                         ::CBroadcast_GetRTMPInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRTMPInfo() not implemented.");
  done->Run();
}

void Broadcast::NotifyWebRTCHaveTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCHaveTURNServer_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCHaveTURNServer() not implemented.");
  done->Run();
}

void Broadcast::WebRTCStartResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCStartResult_Request*,
                         ::CBroadcast_WebRTCStartResult_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCStartResult() not implemented.");
  done->Run();
}

void Broadcast::WebRTCStopped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCStopped_Request*,
                         ::CBroadcast_WebRTCStopped_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCStopped() not implemented.");
  done->Run();
}

void Broadcast::WebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCSetAnswer_Request*,
                         ::CBroadcast_WebRTCSetAnswer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCSetAnswer() not implemented.");
  done->Run();
}

void Broadcast::WebRTCLookupTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCLookupTURNServer_Request*,
                         ::CBroadcast_WebRTCLookupTURNServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCLookupTURNServer() not implemented.");
  done->Run();
}

void Broadcast::WebRTCAddHostCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCAddHostCandidate_Request*,
                         ::CBroadcast_WebRTCAddHostCandidate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCAddHostCandidate() not implemented.");
  done->Run();
}

void Broadcast::WebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCAddViewerCandidate_Request*,
                         ::CBroadcast_WebRTCAddViewerCandidate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCAddViewerCandidate() not implemented.");
  done->Run();
}

void Broadcast::WebRTCGetHostCandidates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCGetHostCandidates_Request*,
                         ::CBroadcast_WebRTCGetHostCandidates_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WebRTCGetHostCandidates() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastUploadStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetBroadcastUploadStats_Request*,
                         ::CBroadcast_GetBroadcastUploadStats_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastUploadStats() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_GetBroadcastViewerStats_Request*,
                         ::CBroadcast_GetBroadcastViewerStats_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastViewerStats() not implemented.");
  done->Run();
}

void Broadcast::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      BeginBroadcastSession(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_BeginBroadcastSession_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_BeginBroadcastSession_Response*>(
                 response),
             done);
      break;
    case 1:
      EndBroadcastSession(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_EndBroadcastSession_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_EndBroadcastSession_Response*>(
                 response),
             done);
      break;
    case 2:
      StartBroadcastUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_StartBroadcastUpload_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_StartBroadcastUpload_Response*>(
                 response),
             done);
      break;
    case 3:
      NotifyBroadcastUploadStop(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_NotifyBroadcastUploadStop_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 4:
      WatchBroadcast(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WatchBroadcast_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WatchBroadcast_Response*>(
                 response),
             done);
      break;
    case 5:
      HeartbeatBroadcast(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_HeartbeatBroadcast_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 6:
      StopWatchingBroadcast(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_StopWatchingBroadcast_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 7:
      GetBroadcastStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetBroadcastStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetBroadcastStatus_Response*>(
                 response),
             done);
      break;
    case 8:
      GetBroadcastThumbnail(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetBroadcastThumbnail_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetBroadcastThumbnail_Response*>(
                 response),
             done);
      break;
    case 9:
      InviteToBroadcast(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_InviteToBroadcast_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_InviteToBroadcast_Response*>(
                 response),
             done);
      break;
    case 10:
      SendBroadcastStateToServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_SendBroadcastStateToServer_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_SendBroadcastStateToServer_Response*>(
                 response),
             done);
      break;
    case 11:
      NotifyBroadcastSessionHeartbeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 12:
      GetBroadcastChatInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetBroadcastChatInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetBroadcastChatInfo_Response*>(
                 response),
             done);
      break;
    case 13:
      PostChatMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_PostChatMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_PostChatMessage_Response*>(
                 response),
             done);
      break;
    case 14:
      UpdateChatMessageFlair(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_UpdateChatMessageFlair_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_UpdateChatMessageFlair_Response*>(
                 response),
             done);
      break;
    case 15:
      MuteBroadcastChatUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_MuteBroadcastChatUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_MuteBroadcastChatUser_Response*>(
                 response),
             done);
      break;
    case 16:
      RemoveUserChatText(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_RemoveUserChatText_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_RemoveUserChatText_Response*>(
                 response),
             done);
      break;
    case 17:
      GetBroadcastChatUserNames(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetBroadcastChatUserNames_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetBroadcastChatUserNames_Response*>(
                 response),
             done);
      break;
    case 18:
      StartBuildClip(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_StartBuildClip_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_StartBuildClip_Response*>(
                 response),
             done);
      break;
    case 19:
      GetBuildClipStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetBuildClipStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetBuildClipStatus_Response*>(
                 response),
             done);
      break;
    case 20:
      SetClipDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_SetClipDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_SetClipDetails_Response*>(
                 response),
             done);
      break;
    case 21:
      GetClipDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetClipDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetClipDetails_Response*>(
                 response),
             done);
      break;
    case 22:
      SetRTMPInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_SetRTMPInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_SetRTMPInfo_Response*>(
                 response),
             done);
      break;
    case 23:
      GetRTMPInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetRTMPInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetRTMPInfo_Response*>(
                 response),
             done);
      break;
    case 24:
      NotifyWebRTCHaveTURNServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCHaveTURNServer_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 25:
      WebRTCStartResult(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCStartResult_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WebRTCStartResult_Response*>(
                 response),
             done);
      break;
    case 26:
      WebRTCStopped(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCStopped_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WebRTCStopped_Response*>(
                 response),
             done);
      break;
    case 27:
      WebRTCSetAnswer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCSetAnswer_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WebRTCSetAnswer_Response*>(
                 response),
             done);
      break;
    case 28:
      WebRTCLookupTURNServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCLookupTURNServer_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WebRTCLookupTURNServer_Response*>(
                 response),
             done);
      break;
    case 29:
      WebRTCAddHostCandidate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCAddHostCandidate_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WebRTCAddHostCandidate_Response*>(
                 response),
             done);
      break;
    case 30:
      WebRTCAddViewerCandidate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCAddViewerCandidate_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WebRTCAddViewerCandidate_Response*>(
                 response),
             done);
      break;
    case 31:
      WebRTCGetHostCandidates(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCGetHostCandidates_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_WebRTCGetHostCandidates_Response*>(
                 response),
             done);
      break;
    case 32:
      GetBroadcastUploadStats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetBroadcastUploadStats_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetBroadcastUploadStats_Response*>(
                 response),
             done);
      break;
    case 33:
      GetBroadcastViewerStats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_GetBroadcastViewerStats_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CBroadcast_GetBroadcastViewerStats_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Broadcast::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBroadcast_BeginBroadcastSession_Request::default_instance();
    case 1:
      return ::CBroadcast_EndBroadcastSession_Request::default_instance();
    case 2:
      return ::CBroadcast_StartBroadcastUpload_Request::default_instance();
    case 3:
      return ::CBroadcast_NotifyBroadcastUploadStop_Notification::default_instance();
    case 4:
      return ::CBroadcast_WatchBroadcast_Request::default_instance();
    case 5:
      return ::CBroadcast_HeartbeatBroadcast_Notification::default_instance();
    case 6:
      return ::CBroadcast_StopWatchingBroadcast_Notification::default_instance();
    case 7:
      return ::CBroadcast_GetBroadcastStatus_Request::default_instance();
    case 8:
      return ::CBroadcast_GetBroadcastThumbnail_Request::default_instance();
    case 9:
      return ::CBroadcast_InviteToBroadcast_Request::default_instance();
    case 10:
      return ::CBroadcast_SendBroadcastStateToServer_Request::default_instance();
    case 11:
      return ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::default_instance();
    case 12:
      return ::CBroadcast_GetBroadcastChatInfo_Request::default_instance();
    case 13:
      return ::CBroadcast_PostChatMessage_Request::default_instance();
    case 14:
      return ::CBroadcast_UpdateChatMessageFlair_Request::default_instance();
    case 15:
      return ::CBroadcast_MuteBroadcastChatUser_Request::default_instance();
    case 16:
      return ::CBroadcast_RemoveUserChatText_Request::default_instance();
    case 17:
      return ::CBroadcast_GetBroadcastChatUserNames_Request::default_instance();
    case 18:
      return ::CBroadcast_StartBuildClip_Request::default_instance();
    case 19:
      return ::CBroadcast_GetBuildClipStatus_Request::default_instance();
    case 20:
      return ::CBroadcast_SetClipDetails_Request::default_instance();
    case 21:
      return ::CBroadcast_GetClipDetails_Request::default_instance();
    case 22:
      return ::CBroadcast_SetRTMPInfo_Request::default_instance();
    case 23:
      return ::CBroadcast_GetRTMPInfo_Request::default_instance();
    case 24:
      return ::CBroadcast_WebRTCHaveTURNServer_Notification::default_instance();
    case 25:
      return ::CBroadcast_WebRTCStartResult_Request::default_instance();
    case 26:
      return ::CBroadcast_WebRTCStopped_Request::default_instance();
    case 27:
      return ::CBroadcast_WebRTCSetAnswer_Request::default_instance();
    case 28:
      return ::CBroadcast_WebRTCLookupTURNServer_Request::default_instance();
    case 29:
      return ::CBroadcast_WebRTCAddHostCandidate_Request::default_instance();
    case 30:
      return ::CBroadcast_WebRTCAddViewerCandidate_Request::default_instance();
    case 31:
      return ::CBroadcast_WebRTCGetHostCandidates_Request::default_instance();
    case 32:
      return ::CBroadcast_GetBroadcastUploadStats_Request::default_instance();
    case 33:
      return ::CBroadcast_GetBroadcastViewerStats_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Broadcast::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBroadcast_BeginBroadcastSession_Response::default_instance();
    case 1:
      return ::CBroadcast_EndBroadcastSession_Response::default_instance();
    case 2:
      return ::CBroadcast_StartBroadcastUpload_Response::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::CBroadcast_WatchBroadcast_Response::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    case 7:
      return ::CBroadcast_GetBroadcastStatus_Response::default_instance();
    case 8:
      return ::CBroadcast_GetBroadcastThumbnail_Response::default_instance();
    case 9:
      return ::CBroadcast_InviteToBroadcast_Response::default_instance();
    case 10:
      return ::CBroadcast_SendBroadcastStateToServer_Response::default_instance();
    case 11:
      return ::NoResponse::default_instance();
    case 12:
      return ::CBroadcast_GetBroadcastChatInfo_Response::default_instance();
    case 13:
      return ::CBroadcast_PostChatMessage_Response::default_instance();
    case 14:
      return ::CBroadcast_UpdateChatMessageFlair_Response::default_instance();
    case 15:
      return ::CBroadcast_MuteBroadcastChatUser_Response::default_instance();
    case 16:
      return ::CBroadcast_RemoveUserChatText_Response::default_instance();
    case 17:
      return ::CBroadcast_GetBroadcastChatUserNames_Response::default_instance();
    case 18:
      return ::CBroadcast_StartBuildClip_Response::default_instance();
    case 19:
      return ::CBroadcast_GetBuildClipStatus_Response::default_instance();
    case 20:
      return ::CBroadcast_SetClipDetails_Response::default_instance();
    case 21:
      return ::CBroadcast_GetClipDetails_Response::default_instance();
    case 22:
      return ::CBroadcast_SetRTMPInfo_Response::default_instance();
    case 23:
      return ::CBroadcast_GetRTMPInfo_Response::default_instance();
    case 24:
      return ::NoResponse::default_instance();
    case 25:
      return ::CBroadcast_WebRTCStartResult_Response::default_instance();
    case 26:
      return ::CBroadcast_WebRTCStopped_Response::default_instance();
    case 27:
      return ::CBroadcast_WebRTCSetAnswer_Response::default_instance();
    case 28:
      return ::CBroadcast_WebRTCLookupTURNServer_Response::default_instance();
    case 29:
      return ::CBroadcast_WebRTCAddHostCandidate_Response::default_instance();
    case 30:
      return ::CBroadcast_WebRTCAddViewerCandidate_Response::default_instance();
    case 31:
      return ::CBroadcast_WebRTCGetHostCandidates_Response::default_instance();
    case 32:
      return ::CBroadcast_GetBroadcastUploadStats_Response::default_instance();
    case 33:
      return ::CBroadcast_GetBroadcastViewerStats_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Broadcast_Stub::Broadcast_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Broadcast_Stub::Broadcast_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Broadcast_Stub::~Broadcast_Stub() {
  if (owns_channel_) delete channel_;
}

void Broadcast_Stub::BeginBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_BeginBroadcastSession_Request* request,
                              ::CBroadcast_BeginBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Broadcast_Stub::EndBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_EndBroadcastSession_Request* request,
                              ::CBroadcast_EndBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Broadcast_Stub::StartBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_StartBroadcastUpload_Request* request,
                              ::CBroadcast_StartBroadcastUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastUploadStop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Broadcast_Stub::WatchBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WatchBroadcast_Request* request,
                              ::CBroadcast_WatchBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Broadcast_Stub::HeartbeatBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_HeartbeatBroadcast_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Broadcast_Stub::StopWatchingBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_StopWatchingBroadcast_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetBroadcastStatus_Request* request,
                              ::CBroadcast_GetBroadcastStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastThumbnail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetBroadcastThumbnail_Request* request,
                              ::CBroadcast_GetBroadcastThumbnail_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Broadcast_Stub::InviteToBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_InviteToBroadcast_Request* request,
                              ::CBroadcast_InviteToBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Broadcast_Stub::SendBroadcastStateToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_SendBroadcastStateToServer_Request* request,
                              ::CBroadcast_SendBroadcastStateToServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastSessionHeartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetBroadcastChatInfo_Request* request,
                              ::CBroadcast_GetBroadcastChatInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Broadcast_Stub::PostChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_PostChatMessage_Request* request,
                              ::CBroadcast_PostChatMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Broadcast_Stub::UpdateChatMessageFlair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_UpdateChatMessageFlair_Request* request,
                              ::CBroadcast_UpdateChatMessageFlair_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Broadcast_Stub::MuteBroadcastChatUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_MuteBroadcastChatUser_Request* request,
                              ::CBroadcast_MuteBroadcastChatUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void Broadcast_Stub::RemoveUserChatText(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_RemoveUserChatText_Request* request,
                              ::CBroadcast_RemoveUserChatText_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatUserNames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetBroadcastChatUserNames_Request* request,
                              ::CBroadcast_GetBroadcastChatUserNames_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void Broadcast_Stub::StartBuildClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_StartBuildClip_Request* request,
                              ::CBroadcast_StartBuildClip_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBuildClipStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetBuildClipStatus_Request* request,
                              ::CBroadcast_GetBuildClipStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void Broadcast_Stub::SetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_SetClipDetails_Request* request,
                              ::CBroadcast_SetClipDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void Broadcast_Stub::GetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetClipDetails_Request* request,
                              ::CBroadcast_GetClipDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void Broadcast_Stub::SetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_SetRTMPInfo_Request* request,
                              ::CBroadcast_SetRTMPInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void Broadcast_Stub::GetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetRTMPInfo_Request* request,
                              ::CBroadcast_GetRTMPInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyWebRTCHaveTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCHaveTURNServer_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCStartResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCStartResult_Request* request,
                              ::CBroadcast_WebRTCStartResult_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCStopped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCStopped_Request* request,
                              ::CBroadcast_WebRTCStopped_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCSetAnswer_Request* request,
                              ::CBroadcast_WebRTCSetAnswer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCLookupTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCLookupTURNServer_Request* request,
                              ::CBroadcast_WebRTCLookupTURNServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCAddHostCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCAddHostCandidate_Request* request,
                              ::CBroadcast_WebRTCAddHostCandidate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCAddViewerCandidate_Request* request,
                              ::CBroadcast_WebRTCAddViewerCandidate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void Broadcast_Stub::WebRTCGetHostCandidates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCGetHostCandidates_Request* request,
                              ::CBroadcast_WebRTCGetHostCandidates_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastUploadStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetBroadcastUploadStats_Request* request,
                              ::CBroadcast_GetBroadcastUploadStats_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_GetBroadcastViewerStats_Request* request,
                              ::CBroadcast_GetBroadcastViewerStats_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33),
                       controller, request, response, done);
}
// ===================================================================

BroadcastClient::~BroadcastClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* BroadcastClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* BroadcastClient::GetDescriptor() {
  return descriptor();
}

void BroadcastClient::NotifyBroadcastViewerState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_BroadcastViewerState_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastViewerState() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWaitingBroadcastViewer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WaitingBroadcastViewer_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWaitingBroadcastViewer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyBroadcastUploadStarted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_BroadcastUploadStarted_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastUploadStarted() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyStopBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_StopBroadcastUpload_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStopBroadcastUpload() not implemented.");
  done->Run();
}

void BroadcastClient::NotifySessionClosed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_SessionClosed_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifySessionClosed() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyViewerBroadcastInvite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_ViewerBroadcastInvite_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyViewerBroadcastInvite() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_BroadcastStatus_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastStatus() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyBroadcastChannelLive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_BroadcastChannelLive_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastChannelLive() not implemented.");
  done->Run();
}

void BroadcastClient::SendThumbnailToRelay(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_SendThumbnailToRelay_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendThumbnailToRelay() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCNeedTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCNeedTURNServer_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCNeedTURNServer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCStart_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCStart() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCSetAnswer_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCSetAnswer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CBroadcast_WebRTCAddViewerCandidate_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWebRTCAddViewerCandidate() not implemented.");
  done->Run();
}

void BroadcastClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fbroadcast_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyBroadcastViewerState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_BroadcastViewerState_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      NotifyWaitingBroadcastViewer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WaitingBroadcastViewer_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      NotifyBroadcastUploadStarted(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_BroadcastUploadStarted_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 3:
      NotifyStopBroadcastUpload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_StopBroadcastUpload_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 4:
      NotifySessionClosed(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_SessionClosed_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 5:
      NotifyViewerBroadcastInvite(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_ViewerBroadcastInvite_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 6:
      NotifyBroadcastStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_BroadcastStatus_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 7:
      NotifyBroadcastChannelLive(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_BroadcastChannelLive_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 8:
      SendThumbnailToRelay(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_SendThumbnailToRelay_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 9:
      NotifyWebRTCNeedTURNServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCNeedTURNServer_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 10:
      NotifyWebRTCStart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCStart_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 11:
      NotifyWebRTCSetAnswer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCSetAnswer_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 12:
      NotifyWebRTCAddViewerCandidate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CBroadcast_WebRTCAddViewerCandidate_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& BroadcastClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CBroadcast_BroadcastViewerState_Notification::default_instance();
    case 1:
      return ::CBroadcast_WaitingBroadcastViewer_Notification::default_instance();
    case 2:
      return ::CBroadcast_BroadcastUploadStarted_Notification::default_instance();
    case 3:
      return ::CBroadcast_StopBroadcastUpload_Notification::default_instance();
    case 4:
      return ::CBroadcast_SessionClosed_Notification::default_instance();
    case 5:
      return ::CBroadcast_ViewerBroadcastInvite_Notification::default_instance();
    case 6:
      return ::CBroadcast_BroadcastStatus_Notification::default_instance();
    case 7:
      return ::CBroadcast_BroadcastChannelLive_Notification::default_instance();
    case 8:
      return ::CBroadcast_SendThumbnailToRelay_Notification::default_instance();
    case 9:
      return ::CBroadcast_WebRTCNeedTURNServer_Notification::default_instance();
    case 10:
      return ::CBroadcast_WebRTCStart_Notification::default_instance();
    case 11:
      return ::CBroadcast_WebRTCSetAnswer_Notification::default_instance();
    case 12:
      return ::CBroadcast_WebRTCAddViewerCandidate_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& BroadcastClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::NoResponse::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    case 7:
      return ::NoResponse::default_instance();
    case 8:
      return ::NoResponse::default_instance();
    case 9:
      return ::NoResponse::default_instance();
    case 10:
      return ::NoResponse::default_instance();
    case 11:
      return ::NoResponse::default_instance();
    case 12:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

BroadcastClient_Stub::BroadcastClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BroadcastClient_Stub::BroadcastClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
BroadcastClient_Stub::~BroadcastClient_Stub() {
  if (owns_channel_) delete channel_;
}

void BroadcastClient_Stub::NotifyBroadcastViewerState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_BroadcastViewerState_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWaitingBroadcastViewer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WaitingBroadcastViewer_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyBroadcastUploadStarted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_BroadcastUploadStarted_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyStopBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_StopBroadcastUpload_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifySessionClosed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_SessionClosed_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyViewerBroadcastInvite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_ViewerBroadcastInvite_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_BroadcastStatus_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyBroadcastChannelLive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_BroadcastChannelLive_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void BroadcastClient_Stub::SendThumbnailToRelay(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_SendThumbnailToRelay_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCNeedTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCNeedTURNServer_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCStart_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCSetAnswer_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CBroadcast_WebRTCAddViewerCandidate_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CBroadcast_BeginBroadcastSession_Request* Arena::CreateMaybeMessage< ::CBroadcast_BeginBroadcastSession_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_BeginBroadcastSession_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_BeginBroadcastSession_Response* Arena::CreateMaybeMessage< ::CBroadcast_BeginBroadcastSession_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_BeginBroadcastSession_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_EndBroadcastSession_Request* Arena::CreateMaybeMessage< ::CBroadcast_EndBroadcastSession_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_EndBroadcastSession_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_EndBroadcastSession_Response* Arena::CreateMaybeMessage< ::CBroadcast_EndBroadcastSession_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_EndBroadcastSession_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_StartBroadcastUpload_Request* Arena::CreateMaybeMessage< ::CBroadcast_StartBroadcastUpload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_StartBroadcastUpload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_StartBroadcastUpload_Response* Arena::CreateMaybeMessage< ::CBroadcast_StartBroadcastUpload_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_StartBroadcastUpload_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_NotifyBroadcastUploadStop_Notification* Arena::CreateMaybeMessage< ::CBroadcast_NotifyBroadcastUploadStop_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_NotifyBroadcastUploadStop_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WatchBroadcast_Request* Arena::CreateMaybeMessage< ::CBroadcast_WatchBroadcast_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WatchBroadcast_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WatchBroadcast_Response* Arena::CreateMaybeMessage< ::CBroadcast_WatchBroadcast_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WatchBroadcast_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_HeartbeatBroadcast_Notification* Arena::CreateMaybeMessage< ::CBroadcast_HeartbeatBroadcast_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_HeartbeatBroadcast_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_StopWatchingBroadcast_Notification* Arena::CreateMaybeMessage< ::CBroadcast_StopWatchingBroadcast_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_StopWatchingBroadcast_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastStatus_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastStatus_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastThumbnail_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastThumbnail_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastThumbnail_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastThumbnail_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastThumbnail_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastThumbnail_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_InviteToBroadcast_Request* Arena::CreateMaybeMessage< ::CBroadcast_InviteToBroadcast_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_InviteToBroadcast_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_InviteToBroadcast_Response* Arena::CreateMaybeMessage< ::CBroadcast_InviteToBroadcast_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_InviteToBroadcast_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SendBroadcastStateToServer_Request* Arena::CreateMaybeMessage< ::CBroadcast_SendBroadcastStateToServer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SendBroadcastStateToServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SendBroadcastStateToServer_Response* Arena::CreateMaybeMessage< ::CBroadcast_SendBroadcastStateToServer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SendBroadcastStateToServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* Arena::CreateMaybeMessage< ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastChatInfo_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastChatInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastChatInfo_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastChatInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_PostChatMessage_Request* Arena::CreateMaybeMessage< ::CBroadcast_PostChatMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_PostChatMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_PostChatMessage_Response* Arena::CreateMaybeMessage< ::CBroadcast_PostChatMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_PostChatMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_UpdateChatMessageFlair_Request* Arena::CreateMaybeMessage< ::CBroadcast_UpdateChatMessageFlair_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_UpdateChatMessageFlair_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_UpdateChatMessageFlair_Response* Arena::CreateMaybeMessage< ::CBroadcast_UpdateChatMessageFlair_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_UpdateChatMessageFlair_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_MuteBroadcastChatUser_Request* Arena::CreateMaybeMessage< ::CBroadcast_MuteBroadcastChatUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_MuteBroadcastChatUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_MuteBroadcastChatUser_Response* Arena::CreateMaybeMessage< ::CBroadcast_MuteBroadcastChatUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_MuteBroadcastChatUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_RemoveUserChatText_Request* Arena::CreateMaybeMessage< ::CBroadcast_RemoveUserChatText_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_RemoveUserChatText_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_RemoveUserChatText_Response* Arena::CreateMaybeMessage< ::CBroadcast_RemoveUserChatText_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_RemoveUserChatText_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastChatUserNames_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatUserNames_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastChatUserNames_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastChatUserNames_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastChatUserNames_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastChatUserNames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_StartBuildClip_Request* Arena::CreateMaybeMessage< ::CBroadcast_StartBuildClip_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_StartBuildClip_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_StartBuildClip_Response* Arena::CreateMaybeMessage< ::CBroadcast_StartBuildClip_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_StartBuildClip_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBuildClipStatus_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBuildClipStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBuildClipStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBuildClipStatus_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBuildClipStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBuildClipStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SetClipDetails_Request* Arena::CreateMaybeMessage< ::CBroadcast_SetClipDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SetClipDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SetClipDetails_Response* Arena::CreateMaybeMessage< ::CBroadcast_SetClipDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SetClipDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetClipDetails_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetClipDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetClipDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetClipDetails_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetClipDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetClipDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SetRTMPInfo_Request* Arena::CreateMaybeMessage< ::CBroadcast_SetRTMPInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SetRTMPInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SetRTMPInfo_Response* Arena::CreateMaybeMessage< ::CBroadcast_SetRTMPInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SetRTMPInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetRTMPInfo_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetRTMPInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetRTMPInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetRTMPInfo_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetRTMPInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetRTMPInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCHaveTURNServer_Notification* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCHaveTURNServer_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCHaveTURNServer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCStartResult_Request* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCStartResult_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCStartResult_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCStartResult_Response* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCStartResult_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCStartResult_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCStopped_Request* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCStopped_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCStopped_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCStopped_Response* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCStopped_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCStopped_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCSetAnswer_Request* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCSetAnswer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCSetAnswer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCSetAnswer_Response* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCSetAnswer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCSetAnswer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCLookupTURNServer_Request* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCLookupTURNServer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCLookupTURNServer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCLookupTURNServer_Response* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCLookupTURNServer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCLookupTURNServer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTC_Candidate* Arena::CreateMaybeMessage< ::CBroadcast_WebRTC_Candidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTC_Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCAddHostCandidate_Request* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCAddHostCandidate_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCAddHostCandidate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCAddHostCandidate_Response* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCAddHostCandidate_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCAddHostCandidate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCAddViewerCandidate_Request* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCAddViewerCandidate_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCAddViewerCandidate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCAddViewerCandidate_Response* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCAddViewerCandidate_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCAddViewerCandidate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCGetHostCandidates_Request* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCGetHostCandidates_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCGetHostCandidates_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCGetHostCandidates_Response* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCGetHostCandidates_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCGetHostCandidates_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastUploadStats_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastUploadStats_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastUploadStats_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastUploadStats_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastUploadStats_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastUploadStats_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastViewerStats_Request* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastViewerStats_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastViewerStats_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_GetBroadcastViewerStats_Response* Arena::CreateMaybeMessage< ::CBroadcast_GetBroadcastViewerStats_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_GetBroadcastViewerStats_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_BroadcastViewerState_Notification* Arena::CreateMaybeMessage< ::CBroadcast_BroadcastViewerState_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_BroadcastViewerState_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WaitingBroadcastViewer_Notification* Arena::CreateMaybeMessage< ::CBroadcast_WaitingBroadcastViewer_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WaitingBroadcastViewer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_BroadcastUploadStarted_Notification* Arena::CreateMaybeMessage< ::CBroadcast_BroadcastUploadStarted_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_BroadcastUploadStarted_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_StopBroadcastUpload_Notification* Arena::CreateMaybeMessage< ::CBroadcast_StopBroadcastUpload_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_StopBroadcastUpload_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SessionClosed_Notification* Arena::CreateMaybeMessage< ::CBroadcast_SessionClosed_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SessionClosed_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_ViewerBroadcastInvite_Notification* Arena::CreateMaybeMessage< ::CBroadcast_ViewerBroadcastInvite_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_ViewerBroadcastInvite_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_BroadcastStatus_Notification* Arena::CreateMaybeMessage< ::CBroadcast_BroadcastStatus_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_BroadcastStatus_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_BroadcastChannelLive_Notification* Arena::CreateMaybeMessage< ::CBroadcast_BroadcastChannelLive_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_BroadcastChannelLive_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_SendThumbnailToRelay_Notification* Arena::CreateMaybeMessage< ::CBroadcast_SendThumbnailToRelay_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_SendThumbnailToRelay_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCNeedTURNServer_Notification* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCNeedTURNServer_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCNeedTURNServer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCStart_Notification* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCStart_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCStart_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCSetAnswer_Notification* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCSetAnswer_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCSetAnswer_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_WebRTCAddViewerCandidate_Notification* Arena::CreateMaybeMessage< ::CBroadcast_WebRTCAddViewerCandidate_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_WebRTCAddViewerCandidate_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
