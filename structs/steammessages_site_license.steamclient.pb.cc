// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_site_license.steamclient.proto

#include "steammessages_site_license.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_instanceid_(uint64_t{0u})
  , client_steamid_(uint64_t{0u})
  , client_local_ip_(0u){}
struct CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal {
  constexpr CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal() {}
  union {
    CSiteManagerClient_IncomingClient_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteManagerClient_IncomingClient_RequestDefaultTypeInternal _CSiteManagerClient_IncomingClient_Request_default_instance_;
constexpr CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal {
  constexpr CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal() {}
  union {
    CSiteManagerClient_IncomingClient_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteManagerClient_IncomingClient_ResponseDefaultTypeInternal _CSiteManagerClient_IncomingClient_Response_default_instance_;
constexpr CSiteLicense_ClientSeatCheckout_Notification::CSiteLicense_ClientSeatCheckout_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , eresult_(0u){}
struct CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal {
  constexpr CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal() {}
  union {
    CSiteLicense_ClientSeatCheckout_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_ClientSeatCheckout_NotificationDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Notification_default_instance_;
constexpr CSiteManagerClient_TrackedPayments_Notification_Payment::CSiteManagerClient_TrackedPayments_Notification_Payment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , profile_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transid_(uint64_t{0u})
  , steamid_(uint64_t{0u})
  , amount_(int64_t{0})
  , ecurrency_(0u)
  , time_created_(0)
  , purchase_status_(0){}
struct CSiteManagerClient_TrackedPayments_Notification_PaymentDefaultTypeInternal {
  constexpr CSiteManagerClient_TrackedPayments_Notification_PaymentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteManagerClient_TrackedPayments_Notification_PaymentDefaultTypeInternal() {}
  union {
    CSiteManagerClient_TrackedPayments_Notification_Payment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteManagerClient_TrackedPayments_Notification_PaymentDefaultTypeInternal _CSiteManagerClient_TrackedPayments_Notification_Payment_default_instance_;
constexpr CSiteManagerClient_TrackedPayments_Notification::CSiteManagerClient_TrackedPayments_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payments_()
  , site_id_(uint64_t{0u}){}
struct CSiteManagerClient_TrackedPayments_NotificationDefaultTypeInternal {
  constexpr CSiteManagerClient_TrackedPayments_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteManagerClient_TrackedPayments_NotificationDefaultTypeInternal() {}
  union {
    CSiteManagerClient_TrackedPayments_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteManagerClient_TrackedPayments_NotificationDefaultTypeInternal _CSiteManagerClient_TrackedPayments_Notification_default_instance_;
constexpr CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : site_steamid_(uint64_t{0u})
  , site_instanceid_(uint64_t{0u})
  , client_local_ip_(0u){}
struct CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal {
  constexpr CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal() {}
  union {
    CSiteLicense_InitiateAssociation_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_InitiateAssociation_RequestDefaultTypeInternal _CSiteLicense_InitiateAssociation_Request_default_instance_;
constexpr CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal {
  constexpr CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal() {}
  union {
    CSiteLicense_InitiateAssociation_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_InitiateAssociation_ResponseDefaultTypeInternal _CSiteLicense_InitiateAssociation_Response_default_instance_;
constexpr CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instanceid_(uint64_t{0u}){}
struct CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal {
  constexpr CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal() {}
  union {
    CSiteLicense_LCSAuthenticate_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_LCSAuthenticate_RequestDefaultTypeInternal _CSiteLicense_LCSAuthenticate_Request_default_instance_;
constexpr CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : site_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , site_id_(uint64_t{0u})
  , new_session_(false)
  , no_site_licenses_(false){}
struct CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal {
  constexpr CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal() {}
  union {
    CSiteLicense_LCSAuthenticate_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_LCSAuthenticate_ResponseDefaultTypeInternal _CSiteLicense_LCSAuthenticate_Response_default_instance_;
constexpr CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , instanceid_(uint64_t{0u})
  , local_ip_(0u){}
struct CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal {
  constexpr CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal() {}
  union {
    CSiteLicense_LCSAssociateUser_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_LCSAssociateUser_RequestDefaultTypeInternal _CSiteLicense_LCSAssociateUser_Request_default_instance_;
constexpr CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal {
  constexpr CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal() {}
  union {
    CSiteLicense_LCSAssociateUser_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_LCSAssociateUser_ResponseDefaultTypeInternal _CSiteLicense_LCSAssociateUser_Response_default_instance_;
constexpr CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , instanceid_(uint64_t{0u})
  , appid_(0u){}
struct CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal {
  constexpr CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal() {}
  union {
    CSiteLicense_ClientSeatCheckout_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_ClientSeatCheckout_RequestDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Request_default_instance_;
constexpr CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal {
  constexpr CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal() {}
  union {
    CSiteLicense_ClientSeatCheckout_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_ClientSeatCheckout_ResponseDefaultTypeInternal _CSiteLicense_ClientSeatCheckout_Response_default_instance_;
constexpr CSiteLicense_ClientGetAvailableSeats_Request::CSiteLicense_ClientGetAvailableSeats_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , instanceid_(uint64_t{0u})
  , appid_(0u){}
struct CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal {
  constexpr CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal() {}
  union {
    CSiteLicense_ClientGetAvailableSeats_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_ClientGetAvailableSeats_RequestDefaultTypeInternal _CSiteLicense_ClientGetAvailableSeats_Request_default_instance_;
constexpr CSiteLicense_ClientGetAvailableSeats_Response::CSiteLicense_ClientGetAvailableSeats_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : available_seats_(0u){}
struct CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal {
  constexpr CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal() {}
  union {
    CSiteLicense_ClientGetAvailableSeats_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSiteLicense_ClientGetAvailableSeats_ResponseDefaultTypeInternal _CSiteLicense_ClientGetAvailableSeats_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, site_instanceid_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, client_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, client_local_ip_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Request, connection_key_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_IncomingClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Notification, eresult_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, transid_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, steamid_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, amount_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, ecurrency_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, time_created_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, purchase_status_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, profile_url_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification_Payment, avatar_url_),
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification, site_id_),
  PROTOBUF_FIELD_OFFSET(::CSiteManagerClient_TrackedPayments_Notification, payments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, site_steamid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, site_instanceid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Request, client_local_ip_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_InitiateAssociation_Response, connection_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Request, instanceid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, site_id_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, site_name_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, new_session_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAuthenticate_Response, no_site_licenses_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, local_ip_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, instanceid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Request, machine_name_),
  1,
  3,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_LCSAssociateUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, instanceid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Request, appid_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientSeatCheckout_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, instanceid_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Request, appid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSiteLicense_ClientGetAvailableSeats_Response, available_seats_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CSiteManagerClient_IncomingClient_Request)},
  { 14, -1, -1, sizeof(::CSiteManagerClient_IncomingClient_Response)},
  { 20, 28, -1, sizeof(::CSiteLicense_ClientSeatCheckout_Notification)},
  { 30, 46, -1, sizeof(::CSiteManagerClient_TrackedPayments_Notification_Payment)},
  { 56, 64, -1, sizeof(::CSiteManagerClient_TrackedPayments_Notification)},
  { 66, 75, -1, sizeof(::CSiteLicense_InitiateAssociation_Request)},
  { 78, 85, -1, sizeof(::CSiteLicense_InitiateAssociation_Response)},
  { 86, 93, -1, sizeof(::CSiteLicense_LCSAuthenticate_Request)},
  { 94, 104, -1, sizeof(::CSiteLicense_LCSAuthenticate_Response)},
  { 108, 118, -1, sizeof(::CSiteLicense_LCSAssociateUser_Request)},
  { 122, -1, -1, sizeof(::CSiteLicense_LCSAssociateUser_Response)},
  { 128, 137, -1, sizeof(::CSiteLicense_ClientSeatCheckout_Request)},
  { 140, -1, -1, sizeof(::CSiteLicense_ClientSeatCheckout_Response)},
  { 146, 155, -1, sizeof(::CSiteLicense_ClientGetAvailableSeats_Request)},
  { 158, 165, -1, sizeof(::CSiteLicense_ClientGetAvailableSeats_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteManagerClient_IncomingClient_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteManagerClient_IncomingClient_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_ClientSeatCheckout_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteManagerClient_TrackedPayments_Notification_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteManagerClient_TrackedPayments_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_InitiateAssociation_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_InitiateAssociation_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_LCSAuthenticate_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_LCSAuthenticate_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_LCSAssociateUser_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_LCSAssociateUser_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_ClientSeatCheckout_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_ClientSeatCheckout_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_ClientGetAvailableSeats_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSiteLicense_ClientGetAvailableSeats_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fsite_5flicense_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,steammessages_site_license.steamclient"
  ".proto\032\030steammessages_base.proto\032,steamm"
  "essages_unified_base.steamclient.proto\"\215"
  "\001\n)CSiteManagerClient_IncomingClient_Req"
  "uest\022\027\n\017site_instanceid\030\001 \001(\006\022\026\n\016client_"
  "steamid\030\002 \001(\006\022\027\n\017client_local_ip\030\003 \001(\007\022\026"
  "\n\016connection_key\030\004 \001(\014\",\n*CSiteManagerCl"
  "ient_IncomingClient_Response\"N\n,CSiteLic"
  "ense_ClientSeatCheckout_Notification\022\r\n\005"
  "appid\030\001 \001(\r\022\017\n\007eresult\030\002 \001(\r\"\343\002\n/CSiteMa"
  "nagerClient_TrackedPayments_Notification"
  "\022\017\n\007site_id\030\001 \001(\006\022J\n\010payments\030\002 \003(\01328.CS"
  "iteManagerClient_TrackedPayments_Notific"
  "ation.Payment\032\322\001\n\007Payment\022\017\n\007transid\030\001 \001"
  "(\004\022\017\n\007steamid\030\002 \001(\004\022\016\n\006amount\030\003 \001(\003\022\021\n\te"
  "currency\030\004 \001(\r\022\024\n\014time_created\030\005 \001(\005\022\027\n\017"
  "purchase_status\030\006 \001(\005\022\024\n\014machine_name\030\007 "
  "\001(\t\022\024\n\014persona_name\030\010 \001(\t\022\023\n\013profile_url"
  "\030\t \001(\t\022\022\n\navatar_url\030\n \001(\t\"r\n(CSiteLicen"
  "se_InitiateAssociation_Request\022\024\n\014site_s"
  "teamid\030\001 \001(\006\022\027\n\017site_instanceid\030\002 \001(\006\022\027\n"
  "\017client_local_ip\030\003 \001(\007\"C\n)CSiteLicense_I"
  "nitiateAssociation_Response\022\026\n\016connectio"
  "n_key\030\001 \001(\014\":\n$CSiteLicense_LCSAuthentic"
  "ate_Request\022\022\n\ninstanceid\030\001 \001(\006\"z\n%CSite"
  "License_LCSAuthenticate_Response\022\017\n\007site"
  "_id\030\001 \001(\004\022\021\n\tsite_name\030\002 \001(\t\022\023\n\013new_sess"
  "ion\030\003 \001(\010\022\030\n\020no_site_licenses\030\004 \001(\010\"t\n%C"
  "SiteLicense_LCSAssociateUser_Request\022\017\n\007"
  "steamid\030\001 \001(\006\022\020\n\010local_ip\030\002 \001(\007\022\022\n\ninsta"
  "nceid\030\003 \001(\006\022\024\n\014machine_name\030\004 \001(\t\"(\n&CSi"
  "teLicense_LCSAssociateUser_Response\"]\n\'C"
  "SiteLicense_ClientSeatCheckout_Request\022\017"
  "\n\007steamid\030\001 \001(\006\022\022\n\ninstanceid\030\002 \001(\006\022\r\n\005a"
  "ppid\030\003 \001(\r\"*\n(CSiteLicense_ClientSeatChe"
  "ckout_Response\"b\n,CSiteLicense_ClientGet"
  "AvailableSeats_Request\022\017\n\007steamid\030\001 \001(\006\022"
  "\022\n\ninstanceid\030\002 \001(\006\022\r\n\005appid\030\003 \001(\r\"H\n-CS"
  "iteLicense_ClientGetAvailableSeats_Respo"
  "nse\022\027\n\017available_seats\030\001 \001(\r2\243\004\n\021SiteMan"
  "agerClient\022\257\001\n\016IncomingClient\022*.CSiteMan"
  "agerClient_IncomingClient_Request\032+.CSit"
  "eManagerClient_IncomingClient_Response\"D"
  "\202\265\030@Rack informing site manager of new i"
  "nbound client PSK connection\022\223\001\n\036ClientS"
  "eatCheckoutNotification\022-.CSiteLicense_C"
  "lientSeatCheckout_Notification\032\013.NoRespo"
  "nse\"5\202\265\0301Notify client directly about se"
  "at checkout result\022\232\001\n\033TrackedPaymentsNo"
  "tification\0220.CSiteManagerClient_TrackedP"
  "ayments_Notification\032\013.NoResponse\"<\202\265\0308R"
  "ack informing site manager of existing t"
  "racked payments\032)\202\265\030!Local site manager "
  "client service\300\265\030\0022\325\006\n\013SiteLicense\022\244\001\n\023I"
  "nitiateAssociation\022).CSiteLicense_Initia"
  "teAssociation_Request\032*.CSiteLicense_Ini"
  "tiateAssociation_Response\"6\202\265\0302Client is"
  " requesting connetion info for local sit"
  "e\022\206\001\n\017LCSAuthenticate\022%.CSiteLicense_LCS"
  "Authenticate_Request\032&.CSiteLicense_LCSA"
  "uthenticate_Response\"$\202\265\030 Local cafe ser"
  "ver authentication\022\235\001\n\020LCSAssociateUser\022"
  "&.CSiteLicense_LCSAssociateUser_Request\032"
  "\'.CSiteLicense_LCSAssociateUser_Response"
  "\"8\202\265\0304Local cafe server wants to grant u"
  "ser access to site\022\236\001\n\022ClientSeatCheckou"
  "t\022(.CSiteLicense_ClientSeatCheckout_Requ"
  "est\032).CSiteLicense_ClientSeatCheckout_Re"
  "sponse\"3\202\265\030/Client is requesting use of "
  "a site license seat\022\272\001\n\027ClientGetAvailab"
  "leSeats\022-.CSiteLicense_ClientGetAvailabl"
  "eSeats_Request\032..CSiteLicense_ClientGetA"
  "vailableSeats_Response\"@\202\265\030<Client is re"
  "questing the number of currently availab"
  "le seats\032\030\202\265\030\024Site License serviceB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto = {
  false, false, 2999, descriptor_table_protodef_steammessages_5fsite_5flicense_2esteamclient_2eproto, "steammessages_site_license.steamclient.proto", 
  &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once, descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_deps, 2, 15,
  schemas, file_default_instances, TableStruct_steammessages_5fsite_5flicense_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fsite_5flicense_2esteamclient_2eproto(&descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto);

// ===================================================================

class CSiteManagerClient_IncomingClient_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteManagerClient_IncomingClient_Request>()._has_bits_);
  static void set_has_site_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_local_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_connection_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteManagerClient_IncomingClient_Request)
}
CSiteManagerClient_IncomingClient_Request::CSiteManagerClient_IncomingClient_Request(const CSiteManagerClient_IncomingClient_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_key()) {
    connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&site_instanceid_, &from.site_instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_instanceid_)) + sizeof(client_local_ip_));
  // @@protoc_insertion_point(copy_constructor:CSiteManagerClient_IncomingClient_Request)
}

inline void CSiteManagerClient_IncomingClient_Request::SharedCtor() {
connection_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&site_instanceid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_instanceid_)) + sizeof(client_local_ip_));
}

CSiteManagerClient_IncomingClient_Request::~CSiteManagerClient_IncomingClient_Request() {
  // @@protoc_insertion_point(destructor:CSiteManagerClient_IncomingClient_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteManagerClient_IncomingClient_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connection_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSiteManagerClient_IncomingClient_Request::ArenaDtor(void* object) {
  CSiteManagerClient_IncomingClient_Request* _this = reinterpret_cast< CSiteManagerClient_IncomingClient_Request* >(object);
  (void)_this;
}
void CSiteManagerClient_IncomingClient_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteManagerClient_IncomingClient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteManagerClient_IncomingClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteManagerClient_IncomingClient_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connection_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&site_instanceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_local_ip_) -
        reinterpret_cast<char*>(&site_instanceid_)) + sizeof(client_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteManagerClient_IncomingClient_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 site_instanceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_site_instanceid(&has_bits);
          site_instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 client_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_client_steamid(&has_bits);
          client_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 client_local_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_client_local_ip(&has_bits);
          client_local_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes connection_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_connection_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteManagerClient_IncomingClient_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteManagerClient_IncomingClient_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_instanceid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_site_instanceid(), target);
  }

  // optional fixed64 client_steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_client_steamid(), target);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_client_local_ip(), target);
  }

  // optional bytes connection_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_connection_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteManagerClient_IncomingClient_Request)
  return target;
}

size_t CSiteManagerClient_IncomingClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteManagerClient_IncomingClient_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes connection_key = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_connection_key());
    }

    // optional fixed64 site_instanceid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 client_steamid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_local_ip = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteManagerClient_IncomingClient_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteManagerClient_IncomingClient_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteManagerClient_IncomingClient_Request::GetClassData() const { return &_class_data_; }

void CSiteManagerClient_IncomingClient_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteManagerClient_IncomingClient_Request *>(to)->MergeFrom(
      static_cast<const CSiteManagerClient_IncomingClient_Request &>(from));
}


void CSiteManagerClient_IncomingClient_Request::MergeFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteManagerClient_IncomingClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connection_key(from._internal_connection_key());
    }
    if (cached_has_bits & 0x00000002u) {
      site_instanceid_ = from.site_instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_steamid_ = from.client_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_local_ip_ = from.client_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteManagerClient_IncomingClient_Request::CopyFrom(const CSiteManagerClient_IncomingClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteManagerClient_IncomingClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_IncomingClient_Request::IsInitialized() const {
  return true;
}

void CSiteManagerClient_IncomingClient_Request::InternalSwap(CSiteManagerClient_IncomingClient_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_key_, lhs_arena,
      &other->connection_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, client_local_ip_)
      + sizeof(CSiteManagerClient_IncomingClient_Request::client_local_ip_)
      - PROTOBUF_FIELD_OFFSET(CSiteManagerClient_IncomingClient_Request, site_instanceid_)>(
          reinterpret_cast<char*>(&site_instanceid_),
          reinterpret_cast<char*>(&other->site_instanceid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteManagerClient_IncomingClient_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[0]);
}

// ===================================================================

class CSiteManagerClient_IncomingClient_Response::_Internal {
 public:
};

CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CSiteManagerClient_IncomingClient_Response)
}
CSiteManagerClient_IncomingClient_Response::CSiteManagerClient_IncomingClient_Response(const CSiteManagerClient_IncomingClient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSiteManagerClient_IncomingClient_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteManagerClient_IncomingClient_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteManagerClient_IncomingClient_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSiteManagerClient_IncomingClient_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[1]);
}

// ===================================================================

class CSiteLicense_ClientSeatCheckout_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_ClientSeatCheckout_Notification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSiteLicense_ClientSeatCheckout_Notification::CSiteLicense_ClientSeatCheckout_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_ClientSeatCheckout_Notification)
}
CSiteLicense_ClientSeatCheckout_Notification::CSiteLicense_ClientSeatCheckout_Notification(const CSiteLicense_ClientSeatCheckout_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientSeatCheckout_Notification)
}

inline void CSiteLicense_ClientSeatCheckout_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(eresult_));
}

CSiteLicense_ClientSeatCheckout_Notification::~CSiteLicense_ClientSeatCheckout_Notification() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientSeatCheckout_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_ClientSeatCheckout_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSiteLicense_ClientSeatCheckout_Notification::ArenaDtor(void* object) {
  CSiteLicense_ClientSeatCheckout_Notification* _this = reinterpret_cast< CSiteLicense_ClientSeatCheckout_Notification* >(object);
  (void)_this;
}
void CSiteLicense_ClientSeatCheckout_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_ClientSeatCheckout_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_ClientSeatCheckout_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientSeatCheckout_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eresult_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(eresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_ClientSeatCheckout_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_ClientSeatCheckout_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientSeatCheckout_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientSeatCheckout_Notification)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientSeatCheckout_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 eresult = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_ClientSeatCheckout_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_ClientSeatCheckout_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_ClientSeatCheckout_Notification::GetClassData() const { return &_class_data_; }

void CSiteLicense_ClientSeatCheckout_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_ClientSeatCheckout_Notification *>(to)->MergeFrom(
      static_cast<const CSiteLicense_ClientSeatCheckout_Notification &>(from));
}


void CSiteLicense_ClientSeatCheckout_Notification::MergeFrom(const CSiteLicense_ClientSeatCheckout_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientSeatCheckout_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_ClientSeatCheckout_Notification::CopyFrom(const CSiteLicense_ClientSeatCheckout_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientSeatCheckout_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Notification::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Notification::InternalSwap(CSiteLicense_ClientSeatCheckout_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Notification, eresult_)
      + sizeof(CSiteLicense_ClientSeatCheckout_Notification::eresult_)
      - PROTOBUF_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Notification, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_ClientSeatCheckout_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[2]);
}

// ===================================================================

class CSiteManagerClient_TrackedPayments_Notification_Payment::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteManagerClient_TrackedPayments_Notification_Payment>()._has_bits_);
  static void set_has_transid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ecurrency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_purchase_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_profile_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CSiteManagerClient_TrackedPayments_Notification_Payment::CSiteManagerClient_TrackedPayments_Notification_Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteManagerClient_TrackedPayments_Notification.Payment)
}
CSiteManagerClient_TrackedPayments_Notification_Payment::CSiteManagerClient_TrackedPayments_Notification_Payment(const CSiteManagerClient_TrackedPayments_Notification_Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArenaForAllocation());
  }
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArenaForAllocation());
  }
  profile_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_url()) {
    profile_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_profile_url(), 
      GetArenaForAllocation());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_url()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&transid_, &from.transid_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_status_) -
    reinterpret_cast<char*>(&transid_)) + sizeof(purchase_status_));
  // @@protoc_insertion_point(copy_constructor:CSiteManagerClient_TrackedPayments_Notification.Payment)
}

inline void CSiteManagerClient_TrackedPayments_Notification_Payment::SharedCtor() {
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
profile_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_status_) -
    reinterpret_cast<char*>(&transid_)) + sizeof(purchase_status_));
}

CSiteManagerClient_TrackedPayments_Notification_Payment::~CSiteManagerClient_TrackedPayments_Notification_Payment() {
  // @@protoc_insertion_point(destructor:CSiteManagerClient_TrackedPayments_Notification.Payment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteManagerClient_TrackedPayments_Notification_Payment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  profile_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSiteManagerClient_TrackedPayments_Notification_Payment::ArenaDtor(void* object) {
  CSiteManagerClient_TrackedPayments_Notification_Payment* _this = reinterpret_cast< CSiteManagerClient_TrackedPayments_Notification_Payment* >(object);
  (void)_this;
}
void CSiteManagerClient_TrackedPayments_Notification_Payment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteManagerClient_TrackedPayments_Notification_Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteManagerClient_TrackedPayments_Notification_Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteManagerClient_TrackedPayments_Notification.Payment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      machine_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      profile_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      avatar_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&transid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ecurrency_) -
        reinterpret_cast<char*>(&transid_)) + sizeof(ecurrency_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&time_created_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_status_) -
        reinterpret_cast<char*>(&time_created_)) + sizeof(purchase_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteManagerClient_TrackedPayments_Notification_Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 transid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_transid(&has_bits);
          transid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ecurrency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ecurrency(&has_bits);
          ecurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_purchase_status(&has_bits);
          purchase_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string profile_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_profile_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteManagerClient_TrackedPayments_Notification_Payment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteManagerClient_TrackedPayments_Notification.Payment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 transid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_transid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional int64 amount = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount(), target);
  }

  // optional uint32 ecurrency = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ecurrency(), target);
  }

  // optional int32 time_created = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_time_created(), target);
  }

  // optional int32 purchase_status = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_purchase_status(), target);
  }

  // optional string machine_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSiteManagerClient_TrackedPayments_Notification.Payment.machine_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_machine_name(), target);
  }

  // optional string persona_name = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSiteManagerClient_TrackedPayments_Notification.Payment.persona_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_persona_name(), target);
  }

  // optional string profile_url = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profile_url().data(), static_cast<int>(this->_internal_profile_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSiteManagerClient_TrackedPayments_Notification.Payment.profile_url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_profile_url(), target);
  }

  // optional string avatar_url = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSiteManagerClient_TrackedPayments_Notification.Payment.avatar_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_avatar_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteManagerClient_TrackedPayments_Notification.Payment)
  return target;
}

size_t CSiteManagerClient_TrackedPayments_Notification_Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteManagerClient_TrackedPayments_Notification.Payment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string machine_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional string persona_name = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string profile_url = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_url());
    }

    // optional string avatar_url = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

    // optional uint64 transid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_transid());
    }

    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional int64 amount = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
    }

    // optional uint32 ecurrency = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ecurrency());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 time_created = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time_created());
    }

    // optional int32 purchase_status = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteManagerClient_TrackedPayments_Notification_Payment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteManagerClient_TrackedPayments_Notification_Payment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteManagerClient_TrackedPayments_Notification_Payment::GetClassData() const { return &_class_data_; }

void CSiteManagerClient_TrackedPayments_Notification_Payment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteManagerClient_TrackedPayments_Notification_Payment *>(to)->MergeFrom(
      static_cast<const CSiteManagerClient_TrackedPayments_Notification_Payment &>(from));
}


void CSiteManagerClient_TrackedPayments_Notification_Payment::MergeFrom(const CSiteManagerClient_TrackedPayments_Notification_Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteManagerClient_TrackedPayments_Notification.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_profile_url(from._internal_profile_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_avatar_url(from._internal_avatar_url());
    }
    if (cached_has_bits & 0x00000010u) {
      transid_ = from.transid_;
    }
    if (cached_has_bits & 0x00000020u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000080u) {
      ecurrency_ = from.ecurrency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000200u) {
      purchase_status_ = from.purchase_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteManagerClient_TrackedPayments_Notification_Payment::CopyFrom(const CSiteManagerClient_TrackedPayments_Notification_Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteManagerClient_TrackedPayments_Notification.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_TrackedPayments_Notification_Payment::IsInitialized() const {
  return true;
}

void CSiteManagerClient_TrackedPayments_Notification_Payment::InternalSwap(CSiteManagerClient_TrackedPayments_Notification_Payment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_, lhs_arena,
      &other->machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &persona_name_, lhs_arena,
      &other->persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &profile_url_, lhs_arena,
      &other->profile_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_url_, lhs_arena,
      &other->avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteManagerClient_TrackedPayments_Notification_Payment, purchase_status_)
      + sizeof(CSiteManagerClient_TrackedPayments_Notification_Payment::purchase_status_)
      - PROTOBUF_FIELD_OFFSET(CSiteManagerClient_TrackedPayments_Notification_Payment, transid_)>(
          reinterpret_cast<char*>(&transid_),
          reinterpret_cast<char*>(&other->transid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteManagerClient_TrackedPayments_Notification_Payment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[3]);
}

// ===================================================================

class CSiteManagerClient_TrackedPayments_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteManagerClient_TrackedPayments_Notification>()._has_bits_);
  static void set_has_site_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSiteManagerClient_TrackedPayments_Notification::CSiteManagerClient_TrackedPayments_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  payments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteManagerClient_TrackedPayments_Notification)
}
CSiteManagerClient_TrackedPayments_Notification::CSiteManagerClient_TrackedPayments_Notification(const CSiteManagerClient_TrackedPayments_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      payments_(from.payments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_id_ = from.site_id_;
  // @@protoc_insertion_point(copy_constructor:CSiteManagerClient_TrackedPayments_Notification)
}

inline void CSiteManagerClient_TrackedPayments_Notification::SharedCtor() {
site_id_ = uint64_t{0u};
}

CSiteManagerClient_TrackedPayments_Notification::~CSiteManagerClient_TrackedPayments_Notification() {
  // @@protoc_insertion_point(destructor:CSiteManagerClient_TrackedPayments_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteManagerClient_TrackedPayments_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSiteManagerClient_TrackedPayments_Notification::ArenaDtor(void* object) {
  CSiteManagerClient_TrackedPayments_Notification* _this = reinterpret_cast< CSiteManagerClient_TrackedPayments_Notification* >(object);
  (void)_this;
}
void CSiteManagerClient_TrackedPayments_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteManagerClient_TrackedPayments_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteManagerClient_TrackedPayments_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteManagerClient_TrackedPayments_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payments_.Clear();
  site_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteManagerClient_TrackedPayments_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 site_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_site_id(&has_bits);
          site_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSiteManagerClient_TrackedPayments_Notification.Payment payments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteManagerClient_TrackedPayments_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteManagerClient_TrackedPayments_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_site_id(), target);
  }

  // repeated .CSiteManagerClient_TrackedPayments_Notification.Payment payments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_payments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteManagerClient_TrackedPayments_Notification)
  return target;
}

size_t CSiteManagerClient_TrackedPayments_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteManagerClient_TrackedPayments_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSiteManagerClient_TrackedPayments_Notification.Payment payments = 2;
  total_size += 1UL * this->_internal_payments_size();
  for (const auto& msg : this->payments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 site_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteManagerClient_TrackedPayments_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteManagerClient_TrackedPayments_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteManagerClient_TrackedPayments_Notification::GetClassData() const { return &_class_data_; }

void CSiteManagerClient_TrackedPayments_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteManagerClient_TrackedPayments_Notification *>(to)->MergeFrom(
      static_cast<const CSiteManagerClient_TrackedPayments_Notification &>(from));
}


void CSiteManagerClient_TrackedPayments_Notification::MergeFrom(const CSiteManagerClient_TrackedPayments_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteManagerClient_TrackedPayments_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  payments_.MergeFrom(from.payments_);
  if (from._internal_has_site_id()) {
    _internal_set_site_id(from._internal_site_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteManagerClient_TrackedPayments_Notification::CopyFrom(const CSiteManagerClient_TrackedPayments_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteManagerClient_TrackedPayments_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteManagerClient_TrackedPayments_Notification::IsInitialized() const {
  return true;
}

void CSiteManagerClient_TrackedPayments_Notification::InternalSwap(CSiteManagerClient_TrackedPayments_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payments_.InternalSwap(&other->payments_);
  swap(site_id_, other->site_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteManagerClient_TrackedPayments_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[4]);
}

// ===================================================================

class CSiteLicense_InitiateAssociation_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_InitiateAssociation_Request>()._has_bits_);
  static void set_has_site_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_site_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_local_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_InitiateAssociation_Request)
}
CSiteLicense_InitiateAssociation_Request::CSiteLicense_InitiateAssociation_Request(const CSiteLicense_InitiateAssociation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&site_steamid_, &from.site_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_steamid_)) + sizeof(client_local_ip_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_InitiateAssociation_Request)
}

inline void CSiteLicense_InitiateAssociation_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&site_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_local_ip_) -
    reinterpret_cast<char*>(&site_steamid_)) + sizeof(client_local_ip_));
}

CSiteLicense_InitiateAssociation_Request::~CSiteLicense_InitiateAssociation_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_InitiateAssociation_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_InitiateAssociation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSiteLicense_InitiateAssociation_Request::ArenaDtor(void* object) {
  CSiteLicense_InitiateAssociation_Request* _this = reinterpret_cast< CSiteLicense_InitiateAssociation_Request* >(object);
  (void)_this;
}
void CSiteLicense_InitiateAssociation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_InitiateAssociation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_InitiateAssociation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_InitiateAssociation_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&site_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_local_ip_) -
        reinterpret_cast<char*>(&site_steamid_)) + sizeof(client_local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_InitiateAssociation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 site_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_site_steamid(&has_bits);
          site_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 site_instanceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_site_instanceid(&has_bits);
          site_instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 client_local_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_client_local_ip(&has_bits);
          client_local_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_InitiateAssociation_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_InitiateAssociation_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 site_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_site_steamid(), target);
  }

  // optional fixed64 site_instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_site_instanceid(), target);
  }

  // optional fixed32 client_local_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_client_local_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_InitiateAssociation_Request)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_InitiateAssociation_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 site_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 site_instanceid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_local_ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_InitiateAssociation_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_InitiateAssociation_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_InitiateAssociation_Request::GetClassData() const { return &_class_data_; }

void CSiteLicense_InitiateAssociation_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_InitiateAssociation_Request *>(to)->MergeFrom(
      static_cast<const CSiteLicense_InitiateAssociation_Request &>(from));
}


void CSiteLicense_InitiateAssociation_Request::MergeFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_InitiateAssociation_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      site_steamid_ = from.site_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      site_instanceid_ = from.site_instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_local_ip_ = from.client_local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_InitiateAssociation_Request::CopyFrom(const CSiteLicense_InitiateAssociation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_InitiateAssociation_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Request::InternalSwap(CSiteLicense_InitiateAssociation_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, client_local_ip_)
      + sizeof(CSiteLicense_InitiateAssociation_Request::client_local_ip_)
      - PROTOBUF_FIELD_OFFSET(CSiteLicense_InitiateAssociation_Request, site_steamid_)>(
          reinterpret_cast<char*>(&site_steamid_),
          reinterpret_cast<char*>(&other->site_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_InitiateAssociation_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[5]);
}

// ===================================================================

class CSiteLicense_InitiateAssociation_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_InitiateAssociation_Response>()._has_bits_);
  static void set_has_connection_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_InitiateAssociation_Response)
}
CSiteLicense_InitiateAssociation_Response::CSiteLicense_InitiateAssociation_Response(const CSiteLicense_InitiateAssociation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_connection_key()) {
    connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_InitiateAssociation_Response)
}

inline void CSiteLicense_InitiateAssociation_Response::SharedCtor() {
connection_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connection_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSiteLicense_InitiateAssociation_Response::~CSiteLicense_InitiateAssociation_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_InitiateAssociation_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_InitiateAssociation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  connection_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_InitiateAssociation_Response::ArenaDtor(void* object) {
  CSiteLicense_InitiateAssociation_Response* _this = reinterpret_cast< CSiteLicense_InitiateAssociation_Response* >(object);
  (void)_this;
}
void CSiteLicense_InitiateAssociation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_InitiateAssociation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_InitiateAssociation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_InitiateAssociation_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    connection_key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_InitiateAssociation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes connection_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_InitiateAssociation_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_InitiateAssociation_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_connection_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_InitiateAssociation_Response)
  return target;
}

size_t CSiteLicense_InitiateAssociation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_InitiateAssociation_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes connection_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_connection_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_InitiateAssociation_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_InitiateAssociation_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_InitiateAssociation_Response::GetClassData() const { return &_class_data_; }

void CSiteLicense_InitiateAssociation_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_InitiateAssociation_Response *>(to)->MergeFrom(
      static_cast<const CSiteLicense_InitiateAssociation_Response &>(from));
}


void CSiteLicense_InitiateAssociation_Response::MergeFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_InitiateAssociation_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_key()) {
    _internal_set_connection_key(from._internal_connection_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_InitiateAssociation_Response::CopyFrom(const CSiteLicense_InitiateAssociation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_InitiateAssociation_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_InitiateAssociation_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_InitiateAssociation_Response::InternalSwap(CSiteLicense_InitiateAssociation_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connection_key_, lhs_arena,
      &other->connection_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_InitiateAssociation_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[6]);
}

// ===================================================================

class CSiteLicense_LCSAuthenticate_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_LCSAuthenticate_Request>()._has_bits_);
  static void set_has_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_LCSAuthenticate_Request)
}
CSiteLicense_LCSAuthenticate_Request::CSiteLicense_LCSAuthenticate_Request(const CSiteLicense_LCSAuthenticate_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instanceid_ = from.instanceid_;
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAuthenticate_Request)
}

inline void CSiteLicense_LCSAuthenticate_Request::SharedCtor() {
instanceid_ = uint64_t{0u};
}

CSiteLicense_LCSAuthenticate_Request::~CSiteLicense_LCSAuthenticate_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_LCSAuthenticate_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_LCSAuthenticate_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSiteLicense_LCSAuthenticate_Request::ArenaDtor(void* object) {
  CSiteLicense_LCSAuthenticate_Request* _this = reinterpret_cast< CSiteLicense_LCSAuthenticate_Request* >(object);
  (void)_this;
}
void CSiteLicense_LCSAuthenticate_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_LCSAuthenticate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_LCSAuthenticate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_LCSAuthenticate_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instanceid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_LCSAuthenticate_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 instanceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_instanceid(&has_bits);
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_LCSAuthenticate_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_LCSAuthenticate_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 instanceid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_instanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_LCSAuthenticate_Request)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_LCSAuthenticate_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 instanceid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_LCSAuthenticate_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_LCSAuthenticate_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_LCSAuthenticate_Request::GetClassData() const { return &_class_data_; }

void CSiteLicense_LCSAuthenticate_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_LCSAuthenticate_Request *>(to)->MergeFrom(
      static_cast<const CSiteLicense_LCSAuthenticate_Request &>(from));
}


void CSiteLicense_LCSAuthenticate_Request::MergeFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_LCSAuthenticate_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instanceid()) {
    _internal_set_instanceid(from._internal_instanceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_LCSAuthenticate_Request::CopyFrom(const CSiteLicense_LCSAuthenticate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_LCSAuthenticate_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Request::InternalSwap(CSiteLicense_LCSAuthenticate_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(instanceid_, other->instanceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_LCSAuthenticate_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[7]);
}

// ===================================================================

class CSiteLicense_LCSAuthenticate_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_LCSAuthenticate_Response>()._has_bits_);
  static void set_has_site_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_site_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_session(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_no_site_licenses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_LCSAuthenticate_Response)
}
CSiteLicense_LCSAuthenticate_Response::CSiteLicense_LCSAuthenticate_Response(const CSiteLicense_LCSAuthenticate_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_site_name()) {
    site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_site_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&site_id_, &from.site_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_site_licenses_) -
    reinterpret_cast<char*>(&site_id_)) + sizeof(no_site_licenses_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAuthenticate_Response)
}

inline void CSiteLicense_LCSAuthenticate_Response::SharedCtor() {
site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&site_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&no_site_licenses_) -
    reinterpret_cast<char*>(&site_id_)) + sizeof(no_site_licenses_));
}

CSiteLicense_LCSAuthenticate_Response::~CSiteLicense_LCSAuthenticate_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_LCSAuthenticate_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_LCSAuthenticate_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_LCSAuthenticate_Response::ArenaDtor(void* object) {
  CSiteLicense_LCSAuthenticate_Response* _this = reinterpret_cast< CSiteLicense_LCSAuthenticate_Response* >(object);
  (void)_this;
}
void CSiteLicense_LCSAuthenticate_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_LCSAuthenticate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_LCSAuthenticate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_LCSAuthenticate_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    site_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&site_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_site_licenses_) -
        reinterpret_cast<char*>(&site_id_)) + sizeof(no_site_licenses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_LCSAuthenticate_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 site_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_site_id(&has_bits);
          site_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string site_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSiteLicense_LCSAuthenticate_Response.site_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool new_session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_session(&has_bits);
          new_session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool no_site_licenses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_no_site_licenses(&has_bits);
          no_site_licenses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_LCSAuthenticate_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_LCSAuthenticate_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 site_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_site_id(), target);
  }

  // optional string site_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_site_name().data(), static_cast<int>(this->_internal_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSiteLicense_LCSAuthenticate_Response.site_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_site_name(), target);
  }

  // optional bool new_session = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_new_session(), target);
  }

  // optional bool no_site_licenses = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_no_site_licenses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_LCSAuthenticate_Response)
  return target;
}

size_t CSiteLicense_LCSAuthenticate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_LCSAuthenticate_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string site_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_site_name());
    }

    // optional uint64 site_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_site_id());
    }

    // optional bool new_session = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool no_site_licenses = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_LCSAuthenticate_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_LCSAuthenticate_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_LCSAuthenticate_Response::GetClassData() const { return &_class_data_; }

void CSiteLicense_LCSAuthenticate_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_LCSAuthenticate_Response *>(to)->MergeFrom(
      static_cast<const CSiteLicense_LCSAuthenticate_Response &>(from));
}


void CSiteLicense_LCSAuthenticate_Response::MergeFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_LCSAuthenticate_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_site_name(from._internal_site_name());
    }
    if (cached_has_bits & 0x00000002u) {
      site_id_ = from.site_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_session_ = from.new_session_;
    }
    if (cached_has_bits & 0x00000008u) {
      no_site_licenses_ = from.no_site_licenses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_LCSAuthenticate_Response::CopyFrom(const CSiteLicense_LCSAuthenticate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_LCSAuthenticate_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAuthenticate_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAuthenticate_Response::InternalSwap(CSiteLicense_LCSAuthenticate_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &site_name_, lhs_arena,
      &other->site_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, no_site_licenses_)
      + sizeof(CSiteLicense_LCSAuthenticate_Response::no_site_licenses_)
      - PROTOBUF_FIELD_OFFSET(CSiteLicense_LCSAuthenticate_Response, site_id_)>(
          reinterpret_cast<char*>(&site_id_),
          reinterpret_cast<char*>(&other->site_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_LCSAuthenticate_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[8]);
}

// ===================================================================

class CSiteLicense_LCSAssociateUser_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_LCSAssociateUser_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_local_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_LCSAssociateUser_Request)
}
CSiteLicense_LCSAssociateUser_Request::CSiteLicense_LCSAssociateUser_Request(const CSiteLicense_LCSAssociateUser_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_ip_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(local_ip_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAssociateUser_Request)
}

inline void CSiteLicense_LCSAssociateUser_Request::SharedCtor() {
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&local_ip_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(local_ip_));
}

CSiteLicense_LCSAssociateUser_Request::~CSiteLicense_LCSAssociateUser_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_LCSAssociateUser_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_LCSAssociateUser_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSiteLicense_LCSAssociateUser_Request::ArenaDtor(void* object) {
  CSiteLicense_LCSAssociateUser_Request* _this = reinterpret_cast< CSiteLicense_LCSAssociateUser_Request* >(object);
  (void)_this;
}
void CSiteLicense_LCSAssociateUser_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_LCSAssociateUser_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_LCSAssociateUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_LCSAssociateUser_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_ip_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(local_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_LCSAssociateUser_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 local_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_local_ip(&has_bits);
          local_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 instanceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_instanceid(&has_bits);
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSiteLicense_LCSAssociateUser_Request.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_LCSAssociateUser_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_LCSAssociateUser_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed32 local_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_local_ip(), target);
  }

  // optional fixed64 instanceid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_instanceid(), target);
  }

  // optional string machine_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSiteLicense_LCSAssociateUser_Request.machine_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_machine_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_LCSAssociateUser_Request)
  return target;
}

size_t CSiteLicense_LCSAssociateUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_LCSAssociateUser_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string machine_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 local_ip = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_LCSAssociateUser_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_LCSAssociateUser_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_LCSAssociateUser_Request::GetClassData() const { return &_class_data_; }

void CSiteLicense_LCSAssociateUser_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_LCSAssociateUser_Request *>(to)->MergeFrom(
      static_cast<const CSiteLicense_LCSAssociateUser_Request &>(from));
}


void CSiteLicense_LCSAssociateUser_Request::MergeFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_LCSAssociateUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      local_ip_ = from.local_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_LCSAssociateUser_Request::CopyFrom(const CSiteLicense_LCSAssociateUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_LCSAssociateUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_LCSAssociateUser_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_LCSAssociateUser_Request::InternalSwap(CSiteLicense_LCSAssociateUser_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_, lhs_arena,
      &other->machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, local_ip_)
      + sizeof(CSiteLicense_LCSAssociateUser_Request::local_ip_)
      - PROTOBUF_FIELD_OFFSET(CSiteLicense_LCSAssociateUser_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_LCSAssociateUser_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[9]);
}

// ===================================================================

class CSiteLicense_LCSAssociateUser_Response::_Internal {
 public:
};

CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_LCSAssociateUser_Response)
}
CSiteLicense_LCSAssociateUser_Response::CSiteLicense_LCSAssociateUser_Response(const CSiteLicense_LCSAssociateUser_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_LCSAssociateUser_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_LCSAssociateUser_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_LCSAssociateUser_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_LCSAssociateUser_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[10]);
}

// ===================================================================

class CSiteLicense_ClientSeatCheckout_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_ClientSeatCheckout_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_ClientSeatCheckout_Request)
}
CSiteLicense_ClientSeatCheckout_Request::CSiteLicense_ClientSeatCheckout_Request(const CSiteLicense_ClientSeatCheckout_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientSeatCheckout_Request)
}

inline void CSiteLicense_ClientSeatCheckout_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CSiteLicense_ClientSeatCheckout_Request::~CSiteLicense_ClientSeatCheckout_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientSeatCheckout_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_ClientSeatCheckout_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSiteLicense_ClientSeatCheckout_Request::ArenaDtor(void* object) {
  CSiteLicense_ClientSeatCheckout_Request* _this = reinterpret_cast< CSiteLicense_ClientSeatCheckout_Request* >(object);
  (void)_this;
}
void CSiteLicense_ClientSeatCheckout_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_ClientSeatCheckout_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_ClientSeatCheckout_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientSeatCheckout_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_ClientSeatCheckout_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 instanceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_instanceid(&has_bits);
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_ClientSeatCheckout_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientSeatCheckout_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_instanceid(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientSeatCheckout_Request)
  return target;
}

size_t CSiteLicense_ClientSeatCheckout_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientSeatCheckout_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_ClientSeatCheckout_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_ClientSeatCheckout_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_ClientSeatCheckout_Request::GetClassData() const { return &_class_data_; }

void CSiteLicense_ClientSeatCheckout_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_ClientSeatCheckout_Request *>(to)->MergeFrom(
      static_cast<const CSiteLicense_ClientSeatCheckout_Request &>(from));
}


void CSiteLicense_ClientSeatCheckout_Request::MergeFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientSeatCheckout_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_ClientSeatCheckout_Request::CopyFrom(const CSiteLicense_ClientSeatCheckout_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientSeatCheckout_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientSeatCheckout_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientSeatCheckout_Request::InternalSwap(CSiteLicense_ClientSeatCheckout_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, appid_)
      + sizeof(CSiteLicense_ClientSeatCheckout_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CSiteLicense_ClientSeatCheckout_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_ClientSeatCheckout_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[11]);
}

// ===================================================================

class CSiteLicense_ClientSeatCheckout_Response::_Internal {
 public:
};

CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_ClientSeatCheckout_Response)
}
CSiteLicense_ClientSeatCheckout_Response::CSiteLicense_ClientSeatCheckout_Response(const CSiteLicense_ClientSeatCheckout_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientSeatCheckout_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_ClientSeatCheckout_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_ClientSeatCheckout_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_ClientSeatCheckout_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[12]);
}

// ===================================================================

class CSiteLicense_ClientGetAvailableSeats_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_ClientGetAvailableSeats_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSiteLicense_ClientGetAvailableSeats_Request::CSiteLicense_ClientGetAvailableSeats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_ClientGetAvailableSeats_Request)
}
CSiteLicense_ClientGetAvailableSeats_Request::CSiteLicense_ClientGetAvailableSeats_Request(const CSiteLicense_ClientGetAvailableSeats_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientGetAvailableSeats_Request)
}

inline void CSiteLicense_ClientGetAvailableSeats_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CSiteLicense_ClientGetAvailableSeats_Request::~CSiteLicense_ClientGetAvailableSeats_Request() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientGetAvailableSeats_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_ClientGetAvailableSeats_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSiteLicense_ClientGetAvailableSeats_Request::ArenaDtor(void* object) {
  CSiteLicense_ClientGetAvailableSeats_Request* _this = reinterpret_cast< CSiteLicense_ClientGetAvailableSeats_Request* >(object);
  (void)_this;
}
void CSiteLicense_ClientGetAvailableSeats_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_ClientGetAvailableSeats_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_ClientGetAvailableSeats_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientGetAvailableSeats_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_ClientGetAvailableSeats_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 instanceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_instanceid(&has_bits);
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_ClientGetAvailableSeats_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientGetAvailableSeats_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_instanceid(), target);
  }

  // optional uint32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientGetAvailableSeats_Request)
  return target;
}

size_t CSiteLicense_ClientGetAvailableSeats_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientGetAvailableSeats_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 instanceid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_ClientGetAvailableSeats_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_ClientGetAvailableSeats_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_ClientGetAvailableSeats_Request::GetClassData() const { return &_class_data_; }

void CSiteLicense_ClientGetAvailableSeats_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_ClientGetAvailableSeats_Request *>(to)->MergeFrom(
      static_cast<const CSiteLicense_ClientGetAvailableSeats_Request &>(from));
}


void CSiteLicense_ClientGetAvailableSeats_Request::MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientGetAvailableSeats_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_ClientGetAvailableSeats_Request::CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientGetAvailableSeats_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientGetAvailableSeats_Request::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientGetAvailableSeats_Request::InternalSwap(CSiteLicense_ClientGetAvailableSeats_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Request, appid_)
      + sizeof(CSiteLicense_ClientGetAvailableSeats_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CSiteLicense_ClientGetAvailableSeats_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_ClientGetAvailableSeats_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[13]);
}

// ===================================================================

class CSiteLicense_ClientGetAvailableSeats_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CSiteLicense_ClientGetAvailableSeats_Response>()._has_bits_);
  static void set_has_available_seats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSiteLicense_ClientGetAvailableSeats_Response::CSiteLicense_ClientGetAvailableSeats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSiteLicense_ClientGetAvailableSeats_Response)
}
CSiteLicense_ClientGetAvailableSeats_Response::CSiteLicense_ClientGetAvailableSeats_Response(const CSiteLicense_ClientGetAvailableSeats_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  available_seats_ = from.available_seats_;
  // @@protoc_insertion_point(copy_constructor:CSiteLicense_ClientGetAvailableSeats_Response)
}

inline void CSiteLicense_ClientGetAvailableSeats_Response::SharedCtor() {
available_seats_ = 0u;
}

CSiteLicense_ClientGetAvailableSeats_Response::~CSiteLicense_ClientGetAvailableSeats_Response() {
  // @@protoc_insertion_point(destructor:CSiteLicense_ClientGetAvailableSeats_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSiteLicense_ClientGetAvailableSeats_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSiteLicense_ClientGetAvailableSeats_Response::ArenaDtor(void* object) {
  CSiteLicense_ClientGetAvailableSeats_Response* _this = reinterpret_cast< CSiteLicense_ClientGetAvailableSeats_Response* >(object);
  (void)_this;
}
void CSiteLicense_ClientGetAvailableSeats_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSiteLicense_ClientGetAvailableSeats_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSiteLicense_ClientGetAvailableSeats_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CSiteLicense_ClientGetAvailableSeats_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_seats_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSiteLicense_ClientGetAvailableSeats_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 available_seats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_available_seats(&has_bits);
          available_seats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSiteLicense_ClientGetAvailableSeats_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSiteLicense_ClientGetAvailableSeats_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 available_seats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_available_seats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSiteLicense_ClientGetAvailableSeats_Response)
  return target;
}

size_t CSiteLicense_ClientGetAvailableSeats_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSiteLicense_ClientGetAvailableSeats_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 available_seats = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_available_seats());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSiteLicense_ClientGetAvailableSeats_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSiteLicense_ClientGetAvailableSeats_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSiteLicense_ClientGetAvailableSeats_Response::GetClassData() const { return &_class_data_; }

void CSiteLicense_ClientGetAvailableSeats_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSiteLicense_ClientGetAvailableSeats_Response *>(to)->MergeFrom(
      static_cast<const CSiteLicense_ClientGetAvailableSeats_Response &>(from));
}


void CSiteLicense_ClientGetAvailableSeats_Response::MergeFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSiteLicense_ClientGetAvailableSeats_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_available_seats()) {
    _internal_set_available_seats(from._internal_available_seats());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSiteLicense_ClientGetAvailableSeats_Response::CopyFrom(const CSiteLicense_ClientGetAvailableSeats_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSiteLicense_ClientGetAvailableSeats_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSiteLicense_ClientGetAvailableSeats_Response::IsInitialized() const {
  return true;
}

void CSiteLicense_ClientGetAvailableSeats_Response::InternalSwap(CSiteLicense_ClientGetAvailableSeats_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(available_seats_, other->available_seats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSiteLicense_ClientGetAvailableSeats_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fsite_5flicense_2esteamclient_2eproto[14]);
}

// ===================================================================

SiteManagerClient::~SiteManagerClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SiteManagerClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SiteManagerClient::GetDescriptor() {
  return descriptor();
}

void SiteManagerClient::IncomingClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteManagerClient_IncomingClient_Request*,
                         ::CSiteManagerClient_IncomingClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IncomingClient() not implemented.");
  done->Run();
}

void SiteManagerClient::ClientSeatCheckoutNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteLicense_ClientSeatCheckout_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSeatCheckoutNotification() not implemented.");
  done->Run();
}

void SiteManagerClient::TrackedPaymentsNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteManagerClient_TrackedPayments_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TrackedPaymentsNotification() not implemented.");
  done->Run();
}

void SiteManagerClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      IncomingClient(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteManagerClient_IncomingClient_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSiteManagerClient_IncomingClient_Response*>(
                 response),
             done);
      break;
    case 1:
      ClientSeatCheckoutNotification(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteLicense_ClientSeatCheckout_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      TrackedPaymentsNotification(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteManagerClient_TrackedPayments_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SiteManagerClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteManagerClient_IncomingClient_Request::default_instance();
    case 1:
      return ::CSiteLicense_ClientSeatCheckout_Notification::default_instance();
    case 2:
      return ::CSiteManagerClient_TrackedPayments_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SiteManagerClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteManagerClient_IncomingClient_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteManagerClient_Stub::SiteManagerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteManagerClient_Stub::SiteManagerClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SiteManagerClient_Stub::~SiteManagerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteManagerClient_Stub::IncomingClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteManagerClient_IncomingClient_Request* request,
                              ::CSiteManagerClient_IncomingClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SiteManagerClient_Stub::ClientSeatCheckoutNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteLicense_ClientSeatCheckout_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SiteManagerClient_Stub::TrackedPaymentsNotification(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteManagerClient_TrackedPayments_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
// ===================================================================

SiteLicense::~SiteLicense() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SiteLicense::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fsite_5flicense_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SiteLicense::GetDescriptor() {
  return descriptor();
}

void SiteLicense::InitiateAssociation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteLicense_InitiateAssociation_Request*,
                         ::CSiteLicense_InitiateAssociation_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InitiateAssociation() not implemented.");
  done->Run();
}

void SiteLicense::LCSAuthenticate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteLicense_LCSAuthenticate_Request*,
                         ::CSiteLicense_LCSAuthenticate_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAuthenticate() not implemented.");
  done->Run();
}

void SiteLicense::LCSAssociateUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteLicense_LCSAssociateUser_Request*,
                         ::CSiteLicense_LCSAssociateUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LCSAssociateUser() not implemented.");
  done->Run();
}

void SiteLicense::ClientSeatCheckout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteLicense_ClientSeatCheckout_Request*,
                         ::CSiteLicense_ClientSeatCheckout_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientSeatCheckout() not implemented.");
  done->Run();
}

void SiteLicense::ClientGetAvailableSeats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CSiteLicense_ClientGetAvailableSeats_Request*,
                         ::CSiteLicense_ClientGetAvailableSeats_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetAvailableSeats() not implemented.");
  done->Run();
}

void SiteLicense::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fsite_5flicense_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      InitiateAssociation(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteLicense_InitiateAssociation_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSiteLicense_InitiateAssociation_Response*>(
                 response),
             done);
      break;
    case 1:
      LCSAuthenticate(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteLicense_LCSAuthenticate_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSiteLicense_LCSAuthenticate_Response*>(
                 response),
             done);
      break;
    case 2:
      LCSAssociateUser(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteLicense_LCSAssociateUser_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSiteLicense_LCSAssociateUser_Response*>(
                 response),
             done);
      break;
    case 3:
      ClientSeatCheckout(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteLicense_ClientSeatCheckout_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSiteLicense_ClientSeatCheckout_Response*>(
                 response),
             done);
      break;
    case 4:
      ClientGetAvailableSeats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CSiteLicense_ClientGetAvailableSeats_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CSiteLicense_ClientGetAvailableSeats_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SiteLicense::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteLicense_InitiateAssociation_Request::default_instance();
    case 1:
      return ::CSiteLicense_LCSAuthenticate_Request::default_instance();
    case 2:
      return ::CSiteLicense_LCSAssociateUser_Request::default_instance();
    case 3:
      return ::CSiteLicense_ClientSeatCheckout_Request::default_instance();
    case 4:
      return ::CSiteLicense_ClientGetAvailableSeats_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SiteLicense::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CSiteLicense_InitiateAssociation_Response::default_instance();
    case 1:
      return ::CSiteLicense_LCSAuthenticate_Response::default_instance();
    case 2:
      return ::CSiteLicense_LCSAssociateUser_Response::default_instance();
    case 3:
      return ::CSiteLicense_ClientSeatCheckout_Response::default_instance();
    case 4:
      return ::CSiteLicense_ClientGetAvailableSeats_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SiteLicense_Stub::SiteLicense_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SiteLicense_Stub::SiteLicense_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SiteLicense_Stub::~SiteLicense_Stub() {
  if (owns_channel_) delete channel_;
}

void SiteLicense_Stub::InitiateAssociation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteLicense_InitiateAssociation_Request* request,
                              ::CSiteLicense_InitiateAssociation_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAuthenticate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteLicense_LCSAuthenticate_Request* request,
                              ::CSiteLicense_LCSAuthenticate_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void SiteLicense_Stub::LCSAssociateUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteLicense_LCSAssociateUser_Request* request,
                              ::CSiteLicense_LCSAssociateUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientSeatCheckout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteLicense_ClientSeatCheckout_Request* request,
                              ::CSiteLicense_ClientSeatCheckout_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void SiteLicense_Stub::ClientGetAvailableSeats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CSiteLicense_ClientGetAvailableSeats_Request* request,
                              ::CSiteLicense_ClientGetAvailableSeats_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSiteManagerClient_IncomingClient_Request* Arena::CreateMaybeMessage< ::CSiteManagerClient_IncomingClient_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteManagerClient_IncomingClient_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteManagerClient_IncomingClient_Response* Arena::CreateMaybeMessage< ::CSiteManagerClient_IncomingClient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteManagerClient_IncomingClient_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_ClientSeatCheckout_Notification* Arena::CreateMaybeMessage< ::CSiteLicense_ClientSeatCheckout_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_ClientSeatCheckout_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteManagerClient_TrackedPayments_Notification_Payment* Arena::CreateMaybeMessage< ::CSiteManagerClient_TrackedPayments_Notification_Payment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteManagerClient_TrackedPayments_Notification_Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteManagerClient_TrackedPayments_Notification* Arena::CreateMaybeMessage< ::CSiteManagerClient_TrackedPayments_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteManagerClient_TrackedPayments_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_InitiateAssociation_Request* Arena::CreateMaybeMessage< ::CSiteLicense_InitiateAssociation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_InitiateAssociation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_InitiateAssociation_Response* Arena::CreateMaybeMessage< ::CSiteLicense_InitiateAssociation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_InitiateAssociation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_LCSAuthenticate_Request* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAuthenticate_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_LCSAuthenticate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_LCSAuthenticate_Response* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAuthenticate_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_LCSAuthenticate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_LCSAssociateUser_Request* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAssociateUser_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_LCSAssociateUser_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_LCSAssociateUser_Response* Arena::CreateMaybeMessage< ::CSiteLicense_LCSAssociateUser_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_LCSAssociateUser_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_ClientSeatCheckout_Request* Arena::CreateMaybeMessage< ::CSiteLicense_ClientSeatCheckout_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_ClientSeatCheckout_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_ClientSeatCheckout_Response* Arena::CreateMaybeMessage< ::CSiteLicense_ClientSeatCheckout_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_ClientSeatCheckout_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_ClientGetAvailableSeats_Request* Arena::CreateMaybeMessage< ::CSiteLicense_ClientGetAvailableSeats_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_ClientGetAvailableSeats_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CSiteLicense_ClientGetAvailableSeats_Response* Arena::CreateMaybeMessage< ::CSiteLicense_ClientGetAvailableSeats_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSiteLicense_ClientGetAvailableSeats_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
