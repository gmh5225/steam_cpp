// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenetworking.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenetworking_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenetworking_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgamenetworking_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgamenetworking_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto;
class CGameNetworking_AllocateFakeIP_Request;
struct CGameNetworking_AllocateFakeIP_RequestDefaultTypeInternal;
extern CGameNetworking_AllocateFakeIP_RequestDefaultTypeInternal _CGameNetworking_AllocateFakeIP_Request_default_instance_;
class CGameNetworking_AllocateFakeIP_Response;
struct CGameNetworking_AllocateFakeIP_ResponseDefaultTypeInternal;
extern CGameNetworking_AllocateFakeIP_ResponseDefaultTypeInternal _CGameNetworking_AllocateFakeIP_Response_default_instance_;
class CGameNetworking_ReleaseFakeIP_Notification;
struct CGameNetworking_ReleaseFakeIP_NotificationDefaultTypeInternal;
extern CGameNetworking_ReleaseFakeIP_NotificationDefaultTypeInternal _CGameNetworking_ReleaseFakeIP_Notification_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameNetworking_AllocateFakeIP_Request* Arena::CreateMaybeMessage<::CGameNetworking_AllocateFakeIP_Request>(Arena*);
template<> ::CGameNetworking_AllocateFakeIP_Response* Arena::CreateMaybeMessage<::CGameNetworking_AllocateFakeIP_Response>(Arena*);
template<> ::CGameNetworking_ReleaseFakeIP_Notification* Arena::CreateMaybeMessage<::CGameNetworking_ReleaseFakeIP_Notification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CGameNetworking_AllocateFakeIP_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNetworking_AllocateFakeIP_Request) */ {
 public:
  inline CGameNetworking_AllocateFakeIP_Request() : CGameNetworking_AllocateFakeIP_Request(nullptr) {}
  ~CGameNetworking_AllocateFakeIP_Request() override;
  explicit constexpr CGameNetworking_AllocateFakeIP_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNetworking_AllocateFakeIP_Request(const CGameNetworking_AllocateFakeIP_Request& from);
  CGameNetworking_AllocateFakeIP_Request(CGameNetworking_AllocateFakeIP_Request&& from) noexcept
    : CGameNetworking_AllocateFakeIP_Request() {
    *this = ::std::move(from);
  }

  inline CGameNetworking_AllocateFakeIP_Request& operator=(const CGameNetworking_AllocateFakeIP_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworking_AllocateFakeIP_Request& operator=(CGameNetworking_AllocateFakeIP_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworking_AllocateFakeIP_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNetworking_AllocateFakeIP_Request* internal_default_instance() {
    return reinterpret_cast<const CGameNetworking_AllocateFakeIP_Request*>(
               &_CGameNetworking_AllocateFakeIP_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameNetworking_AllocateFakeIP_Request& a, CGameNetworking_AllocateFakeIP_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNetworking_AllocateFakeIP_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworking_AllocateFakeIP_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworking_AllocateFakeIP_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameNetworking_AllocateFakeIP_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameNetworking_AllocateFakeIP_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameNetworking_AllocateFakeIP_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNetworking_AllocateFakeIP_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNetworking_AllocateFakeIP_Request";
  }
  protected:
  explicit CGameNetworking_AllocateFakeIP_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kNumFakePortsFieldNumber = 2,
  };
  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 num_fake_ports = 2;
  bool has_num_fake_ports() const;
  private:
  bool _internal_has_num_fake_ports() const;
  public:
  void clear_num_fake_ports();
  uint32_t num_fake_ports() const;
  void set_num_fake_ports(uint32_t value);
  private:
  uint32_t _internal_num_fake_ports() const;
  void _internal_set_num_fake_ports(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNetworking_AllocateFakeIP_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t app_id_;
  uint32_t num_fake_ports_;
  friend struct ::TableStruct_steammessages_5fgamenetworking_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNetworking_AllocateFakeIP_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNetworking_AllocateFakeIP_Response) */ {
 public:
  inline CGameNetworking_AllocateFakeIP_Response() : CGameNetworking_AllocateFakeIP_Response(nullptr) {}
  ~CGameNetworking_AllocateFakeIP_Response() override;
  explicit constexpr CGameNetworking_AllocateFakeIP_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNetworking_AllocateFakeIP_Response(const CGameNetworking_AllocateFakeIP_Response& from);
  CGameNetworking_AllocateFakeIP_Response(CGameNetworking_AllocateFakeIP_Response&& from) noexcept
    : CGameNetworking_AllocateFakeIP_Response() {
    *this = ::std::move(from);
  }

  inline CGameNetworking_AllocateFakeIP_Response& operator=(const CGameNetworking_AllocateFakeIP_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworking_AllocateFakeIP_Response& operator=(CGameNetworking_AllocateFakeIP_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworking_AllocateFakeIP_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNetworking_AllocateFakeIP_Response* internal_default_instance() {
    return reinterpret_cast<const CGameNetworking_AllocateFakeIP_Response*>(
               &_CGameNetworking_AllocateFakeIP_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameNetworking_AllocateFakeIP_Response& a, CGameNetworking_AllocateFakeIP_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNetworking_AllocateFakeIP_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworking_AllocateFakeIP_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworking_AllocateFakeIP_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameNetworking_AllocateFakeIP_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameNetworking_AllocateFakeIP_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameNetworking_AllocateFakeIP_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNetworking_AllocateFakeIP_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNetworking_AllocateFakeIP_Response";
  }
  protected:
  explicit CGameNetworking_AllocateFakeIP_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFakePortsFieldNumber = 2,
    kFakeIpFieldNumber = 1,
  };
  // repeated uint32 fake_ports = 2;
  int fake_ports_size() const;
  private:
  int _internal_fake_ports_size() const;
  public:
  void clear_fake_ports();
  private:
  uint32_t _internal_fake_ports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_fake_ports() const;
  void _internal_add_fake_ports(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_fake_ports();
  public:
  uint32_t fake_ports(int index) const;
  void set_fake_ports(int index, uint32_t value);
  void add_fake_ports(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      fake_ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_fake_ports();

  // optional fixed32 fake_ip = 1;
  bool has_fake_ip() const;
  private:
  bool _internal_has_fake_ip() const;
  public:
  void clear_fake_ip();
  uint32_t fake_ip() const;
  void set_fake_ip(uint32_t value);
  private:
  uint32_t _internal_fake_ip() const;
  void _internal_set_fake_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNetworking_AllocateFakeIP_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > fake_ports_;
  uint32_t fake_ip_;
  friend struct ::TableStruct_steammessages_5fgamenetworking_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CGameNetworking_ReleaseFakeIP_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNetworking_ReleaseFakeIP_Notification) */ {
 public:
  inline CGameNetworking_ReleaseFakeIP_Notification() : CGameNetworking_ReleaseFakeIP_Notification(nullptr) {}
  ~CGameNetworking_ReleaseFakeIP_Notification() override;
  explicit constexpr CGameNetworking_ReleaseFakeIP_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNetworking_ReleaseFakeIP_Notification(const CGameNetworking_ReleaseFakeIP_Notification& from);
  CGameNetworking_ReleaseFakeIP_Notification(CGameNetworking_ReleaseFakeIP_Notification&& from) noexcept
    : CGameNetworking_ReleaseFakeIP_Notification() {
    *this = ::std::move(from);
  }

  inline CGameNetworking_ReleaseFakeIP_Notification& operator=(const CGameNetworking_ReleaseFakeIP_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworking_ReleaseFakeIP_Notification& operator=(CGameNetworking_ReleaseFakeIP_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworking_ReleaseFakeIP_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNetworking_ReleaseFakeIP_Notification* internal_default_instance() {
    return reinterpret_cast<const CGameNetworking_ReleaseFakeIP_Notification*>(
               &_CGameNetworking_ReleaseFakeIP_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameNetworking_ReleaseFakeIP_Notification& a, CGameNetworking_ReleaseFakeIP_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNetworking_ReleaseFakeIP_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworking_ReleaseFakeIP_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworking_ReleaseFakeIP_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CGameNetworking_ReleaseFakeIP_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CGameNetworking_ReleaseFakeIP_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CGameNetworking_ReleaseFakeIP_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNetworking_ReleaseFakeIP_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNetworking_ReleaseFakeIP_Notification";
  }
  protected:
  explicit CGameNetworking_ReleaseFakeIP_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFakePortsFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kFakeIpFieldNumber = 2,
  };
  // repeated uint32 fake_ports = 3;
  int fake_ports_size() const;
  private:
  int _internal_fake_ports_size() const;
  public:
  void clear_fake_ports();
  private:
  uint32_t _internal_fake_ports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_fake_ports() const;
  void _internal_add_fake_ports(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_fake_ports();
  public:
  uint32_t fake_ports(int index) const;
  void set_fake_ports(int index, uint32_t value);
  void add_fake_ports(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      fake_ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_fake_ports();

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional fixed32 fake_ip = 2;
  bool has_fake_ip() const;
  private:
  bool _internal_has_fake_ip() const;
  public:
  void clear_fake_ip();
  uint32_t fake_ip() const;
  void set_fake_ip(uint32_t value);
  private:
  uint32_t _internal_fake_ip() const;
  void _internal_set_fake_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNetworking_ReleaseFakeIP_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > fake_ports_;
  uint32_t app_id_;
  uint32_t fake_ip_;
  friend struct ::TableStruct_steammessages_5fgamenetworking_2esteamclient_2eproto;
};
// ===================================================================

class GameNetworking_Stub;

class GameNetworking : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GameNetworking() {};
 public:
  virtual ~GameNetworking();

  typedef GameNetworking_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AllocateFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNetworking_AllocateFakeIP_Request* request,
                       ::CGameNetworking_AllocateFakeIP_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyReleaseFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNetworking_ReleaseFakeIP_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNetworking);
};

class GameNetworking_Stub : public GameNetworking {
 public:
  GameNetworking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GameNetworking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GameNetworking_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GameNetworking ------------------------------------------

  void AllocateFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNetworking_AllocateFakeIP_Request* request,
                       ::CGameNetworking_AllocateFakeIP_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyReleaseFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CGameNetworking_ReleaseFakeIP_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GameNetworking_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameNetworking_AllocateFakeIP_Request

// optional uint32 app_id = 1;
inline bool CGameNetworking_AllocateFakeIP_Request::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNetworking_AllocateFakeIP_Request::has_app_id() const {
  return _internal_has_app_id();
}
inline void CGameNetworking_AllocateFakeIP_Request::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CGameNetworking_AllocateFakeIP_Request::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CGameNetworking_AllocateFakeIP_Request::app_id() const {
  // @@protoc_insertion_point(field_get:CGameNetworking_AllocateFakeIP_Request.app_id)
  return _internal_app_id();
}
inline void CGameNetworking_AllocateFakeIP_Request::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CGameNetworking_AllocateFakeIP_Request::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CGameNetworking_AllocateFakeIP_Request.app_id)
}

// optional uint32 num_fake_ports = 2;
inline bool CGameNetworking_AllocateFakeIP_Request::_internal_has_num_fake_ports() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNetworking_AllocateFakeIP_Request::has_num_fake_ports() const {
  return _internal_has_num_fake_ports();
}
inline void CGameNetworking_AllocateFakeIP_Request::clear_num_fake_ports() {
  num_fake_ports_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGameNetworking_AllocateFakeIP_Request::_internal_num_fake_ports() const {
  return num_fake_ports_;
}
inline uint32_t CGameNetworking_AllocateFakeIP_Request::num_fake_ports() const {
  // @@protoc_insertion_point(field_get:CGameNetworking_AllocateFakeIP_Request.num_fake_ports)
  return _internal_num_fake_ports();
}
inline void CGameNetworking_AllocateFakeIP_Request::_internal_set_num_fake_ports(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_fake_ports_ = value;
}
inline void CGameNetworking_AllocateFakeIP_Request::set_num_fake_ports(uint32_t value) {
  _internal_set_num_fake_ports(value);
  // @@protoc_insertion_point(field_set:CGameNetworking_AllocateFakeIP_Request.num_fake_ports)
}

// -------------------------------------------------------------------

// CGameNetworking_AllocateFakeIP_Response

// optional fixed32 fake_ip = 1;
inline bool CGameNetworking_AllocateFakeIP_Response::_internal_has_fake_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNetworking_AllocateFakeIP_Response::has_fake_ip() const {
  return _internal_has_fake_ip();
}
inline void CGameNetworking_AllocateFakeIP_Response::clear_fake_ip() {
  fake_ip_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CGameNetworking_AllocateFakeIP_Response::_internal_fake_ip() const {
  return fake_ip_;
}
inline uint32_t CGameNetworking_AllocateFakeIP_Response::fake_ip() const {
  // @@protoc_insertion_point(field_get:CGameNetworking_AllocateFakeIP_Response.fake_ip)
  return _internal_fake_ip();
}
inline void CGameNetworking_AllocateFakeIP_Response::_internal_set_fake_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  fake_ip_ = value;
}
inline void CGameNetworking_AllocateFakeIP_Response::set_fake_ip(uint32_t value) {
  _internal_set_fake_ip(value);
  // @@protoc_insertion_point(field_set:CGameNetworking_AllocateFakeIP_Response.fake_ip)
}

// repeated uint32 fake_ports = 2;
inline int CGameNetworking_AllocateFakeIP_Response::_internal_fake_ports_size() const {
  return fake_ports_.size();
}
inline int CGameNetworking_AllocateFakeIP_Response::fake_ports_size() const {
  return _internal_fake_ports_size();
}
inline void CGameNetworking_AllocateFakeIP_Response::clear_fake_ports() {
  fake_ports_.Clear();
}
inline uint32_t CGameNetworking_AllocateFakeIP_Response::_internal_fake_ports(int index) const {
  return fake_ports_.Get(index);
}
inline uint32_t CGameNetworking_AllocateFakeIP_Response::fake_ports(int index) const {
  // @@protoc_insertion_point(field_get:CGameNetworking_AllocateFakeIP_Response.fake_ports)
  return _internal_fake_ports(index);
}
inline void CGameNetworking_AllocateFakeIP_Response::set_fake_ports(int index, uint32_t value) {
  fake_ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGameNetworking_AllocateFakeIP_Response.fake_ports)
}
inline void CGameNetworking_AllocateFakeIP_Response::_internal_add_fake_ports(uint32_t value) {
  fake_ports_.Add(value);
}
inline void CGameNetworking_AllocateFakeIP_Response::add_fake_ports(uint32_t value) {
  _internal_add_fake_ports(value);
  // @@protoc_insertion_point(field_add:CGameNetworking_AllocateFakeIP_Response.fake_ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGameNetworking_AllocateFakeIP_Response::_internal_fake_ports() const {
  return fake_ports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGameNetworking_AllocateFakeIP_Response::fake_ports() const {
  // @@protoc_insertion_point(field_list:CGameNetworking_AllocateFakeIP_Response.fake_ports)
  return _internal_fake_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGameNetworking_AllocateFakeIP_Response::_internal_mutable_fake_ports() {
  return &fake_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGameNetworking_AllocateFakeIP_Response::mutable_fake_ports() {
  // @@protoc_insertion_point(field_mutable_list:CGameNetworking_AllocateFakeIP_Response.fake_ports)
  return _internal_mutable_fake_ports();
}

// -------------------------------------------------------------------

// CGameNetworking_ReleaseFakeIP_Notification

// optional uint32 app_id = 1;
inline bool CGameNetworking_ReleaseFakeIP_Notification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNetworking_ReleaseFakeIP_Notification::has_app_id() const {
  return _internal_has_app_id();
}
inline void CGameNetworking_ReleaseFakeIP_Notification::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CGameNetworking_ReleaseFakeIP_Notification::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CGameNetworking_ReleaseFakeIP_Notification::app_id() const {
  // @@protoc_insertion_point(field_get:CGameNetworking_ReleaseFakeIP_Notification.app_id)
  return _internal_app_id();
}
inline void CGameNetworking_ReleaseFakeIP_Notification::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CGameNetworking_ReleaseFakeIP_Notification::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CGameNetworking_ReleaseFakeIP_Notification.app_id)
}

// optional fixed32 fake_ip = 2;
inline bool CGameNetworking_ReleaseFakeIP_Notification::_internal_has_fake_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNetworking_ReleaseFakeIP_Notification::has_fake_ip() const {
  return _internal_has_fake_ip();
}
inline void CGameNetworking_ReleaseFakeIP_Notification::clear_fake_ip() {
  fake_ip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CGameNetworking_ReleaseFakeIP_Notification::_internal_fake_ip() const {
  return fake_ip_;
}
inline uint32_t CGameNetworking_ReleaseFakeIP_Notification::fake_ip() const {
  // @@protoc_insertion_point(field_get:CGameNetworking_ReleaseFakeIP_Notification.fake_ip)
  return _internal_fake_ip();
}
inline void CGameNetworking_ReleaseFakeIP_Notification::_internal_set_fake_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  fake_ip_ = value;
}
inline void CGameNetworking_ReleaseFakeIP_Notification::set_fake_ip(uint32_t value) {
  _internal_set_fake_ip(value);
  // @@protoc_insertion_point(field_set:CGameNetworking_ReleaseFakeIP_Notification.fake_ip)
}

// repeated uint32 fake_ports = 3;
inline int CGameNetworking_ReleaseFakeIP_Notification::_internal_fake_ports_size() const {
  return fake_ports_.size();
}
inline int CGameNetworking_ReleaseFakeIP_Notification::fake_ports_size() const {
  return _internal_fake_ports_size();
}
inline void CGameNetworking_ReleaseFakeIP_Notification::clear_fake_ports() {
  fake_ports_.Clear();
}
inline uint32_t CGameNetworking_ReleaseFakeIP_Notification::_internal_fake_ports(int index) const {
  return fake_ports_.Get(index);
}
inline uint32_t CGameNetworking_ReleaseFakeIP_Notification::fake_ports(int index) const {
  // @@protoc_insertion_point(field_get:CGameNetworking_ReleaseFakeIP_Notification.fake_ports)
  return _internal_fake_ports(index);
}
inline void CGameNetworking_ReleaseFakeIP_Notification::set_fake_ports(int index, uint32_t value) {
  fake_ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGameNetworking_ReleaseFakeIP_Notification.fake_ports)
}
inline void CGameNetworking_ReleaseFakeIP_Notification::_internal_add_fake_ports(uint32_t value) {
  fake_ports_.Add(value);
}
inline void CGameNetworking_ReleaseFakeIP_Notification::add_fake_ports(uint32_t value) {
  _internal_add_fake_ports(value);
  // @@protoc_insertion_point(field_add:CGameNetworking_ReleaseFakeIP_Notification.fake_ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGameNetworking_ReleaseFakeIP_Notification::_internal_fake_ports() const {
  return fake_ports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CGameNetworking_ReleaseFakeIP_Notification::fake_ports() const {
  // @@protoc_insertion_point(field_list:CGameNetworking_ReleaseFakeIP_Notification.fake_ports)
  return _internal_fake_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGameNetworking_ReleaseFakeIP_Notification::_internal_mutable_fake_ports() {
  return &fake_ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CGameNetworking_ReleaseFakeIP_Notification::mutable_fake_ports() {
  // @@protoc_insertion_point(field_mutable_list:CGameNetworking_ReleaseFakeIP_Notification.fake_ports)
  return _internal_mutable_fake_ports();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenetworking_2esteamclient_2eproto
