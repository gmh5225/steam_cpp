// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenetworking.steamclient.proto

#include "steammessages_gamenetworking.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameNetworking_AllocateFakeIP_Request::CGameNetworking_AllocateFakeIP_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , num_fake_ports_(0u){}
struct CGameNetworking_AllocateFakeIP_RequestDefaultTypeInternal {
  constexpr CGameNetworking_AllocateFakeIP_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNetworking_AllocateFakeIP_RequestDefaultTypeInternal() {}
  union {
    CGameNetworking_AllocateFakeIP_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNetworking_AllocateFakeIP_RequestDefaultTypeInternal _CGameNetworking_AllocateFakeIP_Request_default_instance_;
constexpr CGameNetworking_AllocateFakeIP_Response::CGameNetworking_AllocateFakeIP_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fake_ports_()
  , fake_ip_(0u){}
struct CGameNetworking_AllocateFakeIP_ResponseDefaultTypeInternal {
  constexpr CGameNetworking_AllocateFakeIP_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNetworking_AllocateFakeIP_ResponseDefaultTypeInternal() {}
  union {
    CGameNetworking_AllocateFakeIP_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNetworking_AllocateFakeIP_ResponseDefaultTypeInternal _CGameNetworking_AllocateFakeIP_Response_default_instance_;
constexpr CGameNetworking_ReleaseFakeIP_Notification::CGameNetworking_ReleaseFakeIP_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fake_ports_()
  , app_id_(0u)
  , fake_ip_(0u){}
struct CGameNetworking_ReleaseFakeIP_NotificationDefaultTypeInternal {
  constexpr CGameNetworking_ReleaseFakeIP_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNetworking_ReleaseFakeIP_NotificationDefaultTypeInternal() {}
  union {
    CGameNetworking_ReleaseFakeIP_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNetworking_ReleaseFakeIP_NotificationDefaultTypeInternal _CGameNetworking_ReleaseFakeIP_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fgamenetworking_2esteamclient_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fgamenetworking_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fgamenetworking_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5fgamenetworking_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Request, app_id_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Request, num_fake_ports_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Response, fake_ip_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_AllocateFakeIP_Response, fake_ports_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_ReleaseFakeIP_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_ReleaseFakeIP_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_ReleaseFakeIP_Notification, app_id_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_ReleaseFakeIP_Notification, fake_ip_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworking_ReleaseFakeIP_Notification, fake_ports_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CGameNetworking_AllocateFakeIP_Request)},
  { 10, 18, -1, sizeof(::CGameNetworking_AllocateFakeIP_Response)},
  { 20, 29, -1, sizeof(::CGameNetworking_ReleaseFakeIP_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNetworking_AllocateFakeIP_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNetworking_AllocateFakeIP_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNetworking_ReleaseFakeIP_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fgamenetworking_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.steammessages_gamenetworking.steamclie"
  "nt.proto\032\030steammessages_base.proto\032,stea"
  "mmessages_unified_base.steamclient.proto"
  "\"P\n&CGameNetworking_AllocateFakeIP_Reque"
  "st\022\016\n\006app_id\030\001 \001(\r\022\026\n\016num_fake_ports\030\002 \001"
  "(\r\"N\n\'CGameNetworking_AllocateFakeIP_Res"
  "ponse\022\017\n\007fake_ip\030\001 \001(\007\022\022\n\nfake_ports\030\002 \003"
  "(\r\"a\n*CGameNetworking_ReleaseFakeIP_Noti"
  "fication\022\016\n\006app_id\030\001 \001(\r\022\017\n\007fake_ip\030\002 \001("
  "\007\022\022\n\nfake_ports\030\003 \003(\r2\322\002\n\016GameNetworking"
  "\022\214\001\n\016AllocateFakeIP\022\'.CGameNetworking_Al"
  "locateFakeIP_Request\032(.CGameNetworking_A"
  "llocateFakeIP_Response\"\'\202\265\030#Client is as"
  "king to lease a FakeIP.\022\206\001\n\023NotifyReleas"
  "eFakeIP\022+.CGameNetworking_ReleaseFakeIP_"
  "Notification\032\013.NoResponse\"5\202\265\0301Client in"
  "forms server it is done with the FakeIP."
  "\032(\202\265\030$Services that support P2P networki"
  "ngB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto = {
  false, false, 727, descriptor_table_protodef_steammessages_5fgamenetworking_2esteamclient_2eproto, "steammessages_gamenetworking.steamclient.proto", 
  &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_once, descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_steammessages_5fgamenetworking_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fgamenetworking_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fgamenetworking_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fgamenetworking_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fgamenetworking_2esteamclient_2eproto(&descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto);

// ===================================================================

class CGameNetworking_AllocateFakeIP_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameNetworking_AllocateFakeIP_Request>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_fake_ports(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameNetworking_AllocateFakeIP_Request::CGameNetworking_AllocateFakeIP_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameNetworking_AllocateFakeIP_Request)
}
CGameNetworking_AllocateFakeIP_Request::CGameNetworking_AllocateFakeIP_Request(const CGameNetworking_AllocateFakeIP_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_fake_ports_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(num_fake_ports_));
  // @@protoc_insertion_point(copy_constructor:CGameNetworking_AllocateFakeIP_Request)
}

inline void CGameNetworking_AllocateFakeIP_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_fake_ports_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(num_fake_ports_));
}

CGameNetworking_AllocateFakeIP_Request::~CGameNetworking_AllocateFakeIP_Request() {
  // @@protoc_insertion_point(destructor:CGameNetworking_AllocateFakeIP_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameNetworking_AllocateFakeIP_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameNetworking_AllocateFakeIP_Request::ArenaDtor(void* object) {
  CGameNetworking_AllocateFakeIP_Request* _this = reinterpret_cast< CGameNetworking_AllocateFakeIP_Request* >(object);
  (void)_this;
}
void CGameNetworking_AllocateFakeIP_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNetworking_AllocateFakeIP_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNetworking_AllocateFakeIP_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworking_AllocateFakeIP_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fake_ports_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(num_fake_ports_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNetworking_AllocateFakeIP_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_fake_ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_fake_ports(&has_bits);
          num_fake_ports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameNetworking_AllocateFakeIP_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworking_AllocateFakeIP_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 num_fake_ports = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_fake_ports(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworking_AllocateFakeIP_Request)
  return target;
}

size_t CGameNetworking_AllocateFakeIP_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworking_AllocateFakeIP_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 num_fake_ports = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_fake_ports());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameNetworking_AllocateFakeIP_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameNetworking_AllocateFakeIP_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameNetworking_AllocateFakeIP_Request::GetClassData() const { return &_class_data_; }

void CGameNetworking_AllocateFakeIP_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameNetworking_AllocateFakeIP_Request *>(to)->MergeFrom(
      static_cast<const CGameNetworking_AllocateFakeIP_Request &>(from));
}


void CGameNetworking_AllocateFakeIP_Request::MergeFrom(const CGameNetworking_AllocateFakeIP_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworking_AllocateFakeIP_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_fake_ports_ = from.num_fake_ports_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworking_AllocateFakeIP_Request::CopyFrom(const CGameNetworking_AllocateFakeIP_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworking_AllocateFakeIP_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNetworking_AllocateFakeIP_Request::IsInitialized() const {
  return true;
}

void CGameNetworking_AllocateFakeIP_Request::InternalSwap(CGameNetworking_AllocateFakeIP_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameNetworking_AllocateFakeIP_Request, num_fake_ports_)
      + sizeof(CGameNetworking_AllocateFakeIP_Request::num_fake_ports_)
      - PROTOBUF_FIELD_OFFSET(CGameNetworking_AllocateFakeIP_Request, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNetworking_AllocateFakeIP_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgamenetworking_2esteamclient_2eproto[0]);
}

// ===================================================================

class CGameNetworking_AllocateFakeIP_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameNetworking_AllocateFakeIP_Response>()._has_bits_);
  static void set_has_fake_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGameNetworking_AllocateFakeIP_Response::CGameNetworking_AllocateFakeIP_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fake_ports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameNetworking_AllocateFakeIP_Response)
}
CGameNetworking_AllocateFakeIP_Response::CGameNetworking_AllocateFakeIP_Response(const CGameNetworking_AllocateFakeIP_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fake_ports_(from.fake_ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fake_ip_ = from.fake_ip_;
  // @@protoc_insertion_point(copy_constructor:CGameNetworking_AllocateFakeIP_Response)
}

inline void CGameNetworking_AllocateFakeIP_Response::SharedCtor() {
fake_ip_ = 0u;
}

CGameNetworking_AllocateFakeIP_Response::~CGameNetworking_AllocateFakeIP_Response() {
  // @@protoc_insertion_point(destructor:CGameNetworking_AllocateFakeIP_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameNetworking_AllocateFakeIP_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameNetworking_AllocateFakeIP_Response::ArenaDtor(void* object) {
  CGameNetworking_AllocateFakeIP_Response* _this = reinterpret_cast< CGameNetworking_AllocateFakeIP_Response* >(object);
  (void)_this;
}
void CGameNetworking_AllocateFakeIP_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNetworking_AllocateFakeIP_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNetworking_AllocateFakeIP_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworking_AllocateFakeIP_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fake_ports_.Clear();
  fake_ip_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNetworking_AllocateFakeIP_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 fake_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_fake_ip(&has_bits);
          fake_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 fake_ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fake_ports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fake_ports(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameNetworking_AllocateFakeIP_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworking_AllocateFakeIP_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 fake_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_fake_ip(), target);
  }

  // repeated uint32 fake_ports = 2;
  for (int i = 0, n = this->_internal_fake_ports_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fake_ports(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworking_AllocateFakeIP_Response)
  return target;
}

size_t CGameNetworking_AllocateFakeIP_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworking_AllocateFakeIP_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 fake_ports = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fake_ports_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fake_ports_size());
    total_size += data_size;
  }

  // optional fixed32 fake_ip = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameNetworking_AllocateFakeIP_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameNetworking_AllocateFakeIP_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameNetworking_AllocateFakeIP_Response::GetClassData() const { return &_class_data_; }

void CGameNetworking_AllocateFakeIP_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameNetworking_AllocateFakeIP_Response *>(to)->MergeFrom(
      static_cast<const CGameNetworking_AllocateFakeIP_Response &>(from));
}


void CGameNetworking_AllocateFakeIP_Response::MergeFrom(const CGameNetworking_AllocateFakeIP_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworking_AllocateFakeIP_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fake_ports_.MergeFrom(from.fake_ports_);
  if (from._internal_has_fake_ip()) {
    _internal_set_fake_ip(from._internal_fake_ip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworking_AllocateFakeIP_Response::CopyFrom(const CGameNetworking_AllocateFakeIP_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworking_AllocateFakeIP_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNetworking_AllocateFakeIP_Response::IsInitialized() const {
  return true;
}

void CGameNetworking_AllocateFakeIP_Response::InternalSwap(CGameNetworking_AllocateFakeIP_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fake_ports_.InternalSwap(&other->fake_ports_);
  swap(fake_ip_, other->fake_ip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNetworking_AllocateFakeIP_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgamenetworking_2esteamclient_2eproto[1]);
}

// ===================================================================

class CGameNetworking_ReleaseFakeIP_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameNetworking_ReleaseFakeIP_Notification>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fake_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGameNetworking_ReleaseFakeIP_Notification::CGameNetworking_ReleaseFakeIP_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fake_ports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGameNetworking_ReleaseFakeIP_Notification)
}
CGameNetworking_ReleaseFakeIP_Notification::CGameNetworking_ReleaseFakeIP_Notification(const CGameNetworking_ReleaseFakeIP_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fake_ports_(from.fake_ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fake_ip_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(fake_ip_));
  // @@protoc_insertion_point(copy_constructor:CGameNetworking_ReleaseFakeIP_Notification)
}

inline void CGameNetworking_ReleaseFakeIP_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fake_ip_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(fake_ip_));
}

CGameNetworking_ReleaseFakeIP_Notification::~CGameNetworking_ReleaseFakeIP_Notification() {
  // @@protoc_insertion_point(destructor:CGameNetworking_ReleaseFakeIP_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGameNetworking_ReleaseFakeIP_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGameNetworking_ReleaseFakeIP_Notification::ArenaDtor(void* object) {
  CGameNetworking_ReleaseFakeIP_Notification* _this = reinterpret_cast< CGameNetworking_ReleaseFakeIP_Notification* >(object);
  (void)_this;
}
void CGameNetworking_ReleaseFakeIP_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNetworking_ReleaseFakeIP_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNetworking_ReleaseFakeIP_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworking_ReleaseFakeIP_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fake_ports_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fake_ip_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(fake_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNetworking_ReleaseFakeIP_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 fake_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_fake_ip(&has_bits);
          fake_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 fake_ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fake_ports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fake_ports(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGameNetworking_ReleaseFakeIP_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworking_ReleaseFakeIP_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional fixed32 fake_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_fake_ip(), target);
  }

  // repeated uint32 fake_ports = 3;
  for (int i = 0, n = this->_internal_fake_ports_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fake_ports(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworking_ReleaseFakeIP_Notification)
  return target;
}

size_t CGameNetworking_ReleaseFakeIP_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworking_ReleaseFakeIP_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 fake_ports = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->fake_ports_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fake_ports_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional fixed32 fake_ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGameNetworking_ReleaseFakeIP_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGameNetworking_ReleaseFakeIP_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGameNetworking_ReleaseFakeIP_Notification::GetClassData() const { return &_class_data_; }

void CGameNetworking_ReleaseFakeIP_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGameNetworking_ReleaseFakeIP_Notification *>(to)->MergeFrom(
      static_cast<const CGameNetworking_ReleaseFakeIP_Notification &>(from));
}


void CGameNetworking_ReleaseFakeIP_Notification::MergeFrom(const CGameNetworking_ReleaseFakeIP_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworking_ReleaseFakeIP_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fake_ports_.MergeFrom(from.fake_ports_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fake_ip_ = from.fake_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworking_ReleaseFakeIP_Notification::CopyFrom(const CGameNetworking_ReleaseFakeIP_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworking_ReleaseFakeIP_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNetworking_ReleaseFakeIP_Notification::IsInitialized() const {
  return true;
}

void CGameNetworking_ReleaseFakeIP_Notification::InternalSwap(CGameNetworking_ReleaseFakeIP_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fake_ports_.InternalSwap(&other->fake_ports_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameNetworking_ReleaseFakeIP_Notification, fake_ip_)
      + sizeof(CGameNetworking_ReleaseFakeIP_Notification::fake_ip_)
      - PROTOBUF_FIELD_OFFSET(CGameNetworking_ReleaseFakeIP_Notification, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNetworking_ReleaseFakeIP_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fgamenetworking_2esteamclient_2eproto[2]);
}

// ===================================================================

GameNetworking::~GameNetworking() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameNetworking::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgamenetworking_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fgamenetworking_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GameNetworking::GetDescriptor() {
  return descriptor();
}

void GameNetworking::AllocateFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameNetworking_AllocateFakeIP_Request*,
                         ::CGameNetworking_AllocateFakeIP_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AllocateFakeIP() not implemented.");
  done->Run();
}

void GameNetworking::NotifyReleaseFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CGameNetworking_ReleaseFakeIP_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyReleaseFakeIP() not implemented.");
  done->Run();
}

void GameNetworking::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fgamenetworking_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      AllocateFakeIP(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameNetworking_AllocateFakeIP_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CGameNetworking_AllocateFakeIP_Response*>(
                 response),
             done);
      break;
    case 1:
      NotifyReleaseFakeIP(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CGameNetworking_ReleaseFakeIP_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameNetworking::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameNetworking_AllocateFakeIP_Request::default_instance();
    case 1:
      return ::CGameNetworking_ReleaseFakeIP_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GameNetworking::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CGameNetworking_AllocateFakeIP_Response::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameNetworking_Stub::GameNetworking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameNetworking_Stub::GameNetworking_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GameNetworking_Stub::~GameNetworking_Stub() {
  if (owns_channel_) delete channel_;
}

void GameNetworking_Stub::AllocateFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameNetworking_AllocateFakeIP_Request* request,
                              ::CGameNetworking_AllocateFakeIP_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameNetworking_Stub::NotifyReleaseFakeIP(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CGameNetworking_ReleaseFakeIP_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameNetworking_AllocateFakeIP_Request* Arena::CreateMaybeMessage< ::CGameNetworking_AllocateFakeIP_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNetworking_AllocateFakeIP_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameNetworking_AllocateFakeIP_Response* Arena::CreateMaybeMessage< ::CGameNetworking_AllocateFakeIP_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNetworking_AllocateFakeIP_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameNetworking_ReleaseFakeIP_Notification* Arena::CreateMaybeMessage< ::CGameNetworking_ReleaseFakeIP_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNetworking_ReleaseFakeIP_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
