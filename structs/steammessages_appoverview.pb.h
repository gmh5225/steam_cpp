// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_appoverview.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fappoverview_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fappoverview_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fappoverview_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fappoverview_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fappoverview_2eproto;
class CAppBootstrapData;
struct CAppBootstrapDataDefaultTypeInternal;
extern CAppBootstrapDataDefaultTypeInternal _CAppBootstrapData_default_instance_;
class CAppOverview;
struct CAppOverviewDefaultTypeInternal;
extern CAppOverviewDefaultTypeInternal _CAppOverview_default_instance_;
class CAppOverview_AppAssociation;
struct CAppOverview_AppAssociationDefaultTypeInternal;
extern CAppOverview_AppAssociationDefaultTypeInternal _CAppOverview_AppAssociation_default_instance_;
class CAppOverview_Change;
struct CAppOverview_ChangeDefaultTypeInternal;
extern CAppOverview_ChangeDefaultTypeInternal _CAppOverview_Change_default_instance_;
class CAppOverview_PerClientData;
struct CAppOverview_PerClientDataDefaultTypeInternal;
extern CAppOverview_PerClientDataDefaultTypeInternal _CAppOverview_PerClientData_default_instance_;
class CLibraryBootstrapData;
struct CLibraryBootstrapDataDefaultTypeInternal;
extern CLibraryBootstrapDataDefaultTypeInternal _CLibraryBootstrapData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CAppBootstrapData* Arena::CreateMaybeMessage<::CAppBootstrapData>(Arena*);
template<> ::CAppOverview* Arena::CreateMaybeMessage<::CAppOverview>(Arena*);
template<> ::CAppOverview_AppAssociation* Arena::CreateMaybeMessage<::CAppOverview_AppAssociation>(Arena*);
template<> ::CAppOverview_Change* Arena::CreateMaybeMessage<::CAppOverview_Change>(Arena*);
template<> ::CAppOverview_PerClientData* Arena::CreateMaybeMessage<::CAppOverview_PerClientData>(Arena*);
template<> ::CLibraryBootstrapData* Arena::CreateMaybeMessage<::CLibraryBootstrapData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EDisplayStatus : int {
  k_EDisplayStatusInvalid = 0,
  k_EDisplayStatusLaunching = 1,
  k_EDisplayStatusUninstalling = 2,
  k_EDisplayStatusInstalling = 3,
  k_EDisplayStatusRunning = 4,
  k_EDisplayStatusValidating = 5,
  k_EDisplayStatusUpdating = 6,
  k_EDisplayStatusDownloading = 7,
  k_EDisplayStatusSynchronizing = 8,
  k_EDisplayStatusReadyToInstall = 9,
  k_EDisplayStatusReadyToPreload = 10,
  k_EDisplayStatusReadyToLaunch = 11,
  k_EDisplayStatusRegionRestricted = 12,
  k_EDisplayStatusPresaleOnly = 13,
  k_EDisplayStatusInvalidPlatform = 14,
  k_EDisplayStatusPreloadComplete = 16,
  k_EDisplayStatusBorrowerLocked = 17,
  k_EDisplayStatusUpdatePaused = 18,
  k_EDisplayStatusUpdateQueued = 19,
  k_EDisplayStatusUpdateRequired = 20,
  k_EDisplayStatusUpdateDisabled = 21,
  k_EDisplayStatusDownloadPaused = 22,
  k_EDisplayStatusDownloadQueued = 23,
  k_EDisplayStatusDownloadRequired = 24,
  k_EDisplayStatusDownloadDisabled = 25,
  k_EDisplayStatusLicensePending = 26,
  k_EDisplayStatusLicenseExpired = 27,
  k_EDisplayStatusAvailForFree = 28,
  k_EDisplayStatusAvailToBorrow = 29,
  k_EDisplayStatusAvailGuestPass = 30,
  k_EDisplayStatusPurchase = 31,
  k_EDisplayStatusUnavailable = 32,
  k_EDisplayStatusNotLaunchable = 33,
  k_EDisplayStatusCloudError = 34,
  k_EDisplayStatusCloudOutOfDate = 35,
  k_EDisplayStatusTerminating = 36
};
bool EDisplayStatus_IsValid(int value);
constexpr EDisplayStatus EDisplayStatus_MIN = k_EDisplayStatusInvalid;
constexpr EDisplayStatus EDisplayStatus_MAX = k_EDisplayStatusTerminating;
constexpr int EDisplayStatus_ARRAYSIZE = EDisplayStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDisplayStatus_descriptor();
template<typename T>
inline const std::string& EDisplayStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDisplayStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDisplayStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDisplayStatus_descriptor(), enum_t_value);
}
inline bool EDisplayStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDisplayStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDisplayStatus>(
    EDisplayStatus_descriptor(), name, value);
}
enum EAppCloudStatus : int {
  k_EAppCloudStatusInvalid = 0,
  k_EAppCloudStatusDisabled = 1,
  k_EAppCloudStatusUnknown = 2,
  k_EAppCloudStatusSynchronized = 3,
  k_EAppCloudStatusChecking = 4,
  k_EAppCloudStatusOutOfSync = 5,
  k_EAppCloudStatusUploading = 6,
  k_EAppCloudStatusDownloading = 7,
  k_EAppCloudStatusSyncFailed = 8,
  k_EAppCloudStatusConflict = 9,
  k_EAppCloudStatusPendingElsewhere = 10
};
bool EAppCloudStatus_IsValid(int value);
constexpr EAppCloudStatus EAppCloudStatus_MIN = k_EAppCloudStatusInvalid;
constexpr EAppCloudStatus EAppCloudStatus_MAX = k_EAppCloudStatusPendingElsewhere;
constexpr int EAppCloudStatus_ARRAYSIZE = EAppCloudStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppCloudStatus_descriptor();
template<typename T>
inline const std::string& EAppCloudStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EAppCloudStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EAppCloudStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EAppCloudStatus_descriptor(), enum_t_value);
}
inline bool EAppCloudStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EAppCloudStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EAppCloudStatus>(
    EAppCloudStatus_descriptor(), name, value);
}
enum EProtoAppType : int {
  k_EAppTypeInvalid = 0,
  k_EAppTypeGame = 1,
  k_EAppTypeApplication = 2,
  k_EAppTypeTool = 4,
  k_EAppTypeDemo = 8,
  k_EAppTypeDeprected = 16,
  k_EAppTypeDLC = 32,
  k_EAppTypeGuide = 64,
  k_EAppTypeDriver = 128,
  k_EAppTypeConfig = 256,
  k_EAppTypeHardware = 512,
  k_EAppTypeFranchise = 1024,
  k_EAppTypeVideo = 2048,
  k_EAppTypePlugin = 4096,
  k_EAppTypeMusicAlbum = 8192,
  k_EAppTypeSeries = 16384,
  k_EAppTypeComic = 32768,
  k_EAppTypeBeta = 65536,
  k_EAppTypeShortcut = 1073741824,
  k_EAppTypeDepotOnly = -2147483647 - 1
};
bool EProtoAppType_IsValid(int value);
constexpr EProtoAppType EProtoAppType_MIN = k_EAppTypeDepotOnly;
constexpr EProtoAppType EProtoAppType_MAX = k_EAppTypeShortcut;
constexpr int EProtoAppType_ARRAYSIZE = EProtoAppType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoAppType_descriptor();
template<typename T>
inline const std::string& EProtoAppType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EProtoAppType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EProtoAppType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EProtoAppType_descriptor(), enum_t_value);
}
inline bool EProtoAppType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EProtoAppType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EProtoAppType>(
    EProtoAppType_descriptor(), name, value);
}
enum EAppAssociationType : int {
  k_EAppAssociationTypeInvalid = 0,
  k_EAppAssociationTypePublisher = 1,
  k_EAppAssociationTypeDeveloper = 2,
  k_EAppAssociationTypeFranchise = 3
};
bool EAppAssociationType_IsValid(int value);
constexpr EAppAssociationType EAppAssociationType_MIN = k_EAppAssociationTypeInvalid;
constexpr EAppAssociationType EAppAssociationType_MAX = k_EAppAssociationTypeFranchise;
constexpr int EAppAssociationType_ARRAYSIZE = EAppAssociationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppAssociationType_descriptor();
template<typename T>
inline const std::string& EAppAssociationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EAppAssociationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EAppAssociationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EAppAssociationType_descriptor(), enum_t_value);
}
inline bool EAppAssociationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EAppAssociationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EAppAssociationType>(
    EAppAssociationType_descriptor(), name, value);
}
enum EAppControllerSupportLevel : int {
  k_EAppControllerSupportLevelNone = 0,
  k_EAppControllerSupportLevelPartial = 1,
  k_EAppControllerSupportLevelFull = 2
};
bool EAppControllerSupportLevel_IsValid(int value);
constexpr EAppControllerSupportLevel EAppControllerSupportLevel_MIN = k_EAppControllerSupportLevelNone;
constexpr EAppControllerSupportLevel EAppControllerSupportLevel_MAX = k_EAppControllerSupportLevelFull;
constexpr int EAppControllerSupportLevel_ARRAYSIZE = EAppControllerSupportLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppControllerSupportLevel_descriptor();
template<typename T>
inline const std::string& EAppControllerSupportLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EAppControllerSupportLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EAppControllerSupportLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EAppControllerSupportLevel_descriptor(), enum_t_value);
}
inline bool EAppControllerSupportLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EAppControllerSupportLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EAppControllerSupportLevel>(
    EAppControllerSupportLevel_descriptor(), name, value);
}
enum EAppGamepadGyroTrackpadSupportLevel : int {
  k_EAppGamepadGyroTrackpadSupportLevelUnknown = -1,
  k_EAppGamepadGyroTrackpadSupportLevelNoGamepad = 0,
  k_EAppGamepadGyroTrackpadSupportLevelGamepad = 1,
  k_EAppGamepadGyroTrackpadSupportLevelSimultaneous = 2
};
bool EAppGamepadGyroTrackpadSupportLevel_IsValid(int value);
constexpr EAppGamepadGyroTrackpadSupportLevel EAppGamepadGyroTrackpadSupportLevel_MIN = k_EAppGamepadGyroTrackpadSupportLevelUnknown;
constexpr EAppGamepadGyroTrackpadSupportLevel EAppGamepadGyroTrackpadSupportLevel_MAX = k_EAppGamepadGyroTrackpadSupportLevelSimultaneous;
constexpr int EAppGamepadGyroTrackpadSupportLevel_ARRAYSIZE = EAppGamepadGyroTrackpadSupportLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAppGamepadGyroTrackpadSupportLevel_descriptor();
template<typename T>
inline const std::string& EAppGamepadGyroTrackpadSupportLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EAppGamepadGyroTrackpadSupportLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EAppGamepadGyroTrackpadSupportLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EAppGamepadGyroTrackpadSupportLevel_descriptor(), enum_t_value);
}
inline bool EAppGamepadGyroTrackpadSupportLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EAppGamepadGyroTrackpadSupportLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EAppGamepadGyroTrackpadSupportLevel>(
    EAppGamepadGyroTrackpadSupportLevel_descriptor(), name, value);
}
// ===================================================================

class CAppOverview_AppAssociation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAppOverview_AppAssociation) */ {
 public:
  inline CAppOverview_AppAssociation() : CAppOverview_AppAssociation(nullptr) {}
  ~CAppOverview_AppAssociation() override;
  explicit constexpr CAppOverview_AppAssociation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAppOverview_AppAssociation(const CAppOverview_AppAssociation& from);
  CAppOverview_AppAssociation(CAppOverview_AppAssociation&& from) noexcept
    : CAppOverview_AppAssociation() {
    *this = ::std::move(from);
  }

  inline CAppOverview_AppAssociation& operator=(const CAppOverview_AppAssociation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAppOverview_AppAssociation& operator=(CAppOverview_AppAssociation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAppOverview_AppAssociation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAppOverview_AppAssociation* internal_default_instance() {
    return reinterpret_cast<const CAppOverview_AppAssociation*>(
               &_CAppOverview_AppAssociation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CAppOverview_AppAssociation& a, CAppOverview_AppAssociation& b) {
    a.Swap(&b);
  }
  inline void Swap(CAppOverview_AppAssociation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAppOverview_AppAssociation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAppOverview_AppAssociation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAppOverview_AppAssociation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAppOverview_AppAssociation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAppOverview_AppAssociation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAppOverview_AppAssociation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAppOverview_AppAssociation";
  }
  protected:
  explicit CAppOverview_AppAssociation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .EAppAssociationType type = 1 [default = k_EAppAssociationTypeInvalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EAppAssociationType type() const;
  void set_type(::EAppAssociationType value);
  private:
  ::EAppAssociationType _internal_type() const;
  void _internal_set_type(::EAppAssociationType value);
  public:

  // @@protoc_insertion_point(class_scope:CAppOverview_AppAssociation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  friend struct ::TableStruct_steammessages_5fappoverview_2eproto;
};
// -------------------------------------------------------------------

class CAppOverview_PerClientData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAppOverview_PerClientData) */ {
 public:
  inline CAppOverview_PerClientData() : CAppOverview_PerClientData(nullptr) {}
  ~CAppOverview_PerClientData() override;
  explicit constexpr CAppOverview_PerClientData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAppOverview_PerClientData(const CAppOverview_PerClientData& from);
  CAppOverview_PerClientData(CAppOverview_PerClientData&& from) noexcept
    : CAppOverview_PerClientData() {
    *this = ::std::move(from);
  }

  inline CAppOverview_PerClientData& operator=(const CAppOverview_PerClientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAppOverview_PerClientData& operator=(CAppOverview_PerClientData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAppOverview_PerClientData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAppOverview_PerClientData* internal_default_instance() {
    return reinterpret_cast<const CAppOverview_PerClientData*>(
               &_CAppOverview_PerClientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CAppOverview_PerClientData& a, CAppOverview_PerClientData& b) {
    a.Swap(&b);
  }
  inline void Swap(CAppOverview_PerClientData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAppOverview_PerClientData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAppOverview_PerClientData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAppOverview_PerClientData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAppOverview_PerClientData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAppOverview_PerClientData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAppOverview_PerClientData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAppOverview_PerClientData";
  }
  protected:
  explicit CAppOverview_PerClientData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientNameFieldNumber = 2,
    kActiveBetaFieldNumber = 5,
    kClientidFieldNumber = 1,
    kDisplayStatusFieldNumber = 3,
    kStatusPercentageFieldNumber = 4,
    kBytesDownloadedFieldNumber = 7,
    kBytesTotalFieldNumber = 8,
    kInstalledFieldNumber = 6,
    kStreamingToLocalClientFieldNumber = 9,
    kIsAvailableOnCurrentPlatformFieldNumber = 10,
    kIsInvalidOsTypeFieldNumber = 11,
    kPlaytimeLeftFieldNumber = 12,
    kCloudStatusFieldNumber = 13,
  };
  // optional string client_name = 2;
  bool has_client_name() const;
  private:
  bool _internal_has_client_name() const;
  public:
  void clear_client_name();
  const std::string& client_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_name();
  PROTOBUF_NODISCARD std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // optional string active_beta = 5;
  bool has_active_beta() const;
  private:
  bool _internal_has_active_beta() const;
  public:
  void clear_active_beta();
  const std::string& active_beta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active_beta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active_beta();
  PROTOBUF_NODISCARD std::string* release_active_beta();
  void set_allocated_active_beta(std::string* active_beta);
  private:
  const std::string& _internal_active_beta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_beta(const std::string& value);
  std::string* _internal_mutable_active_beta();
  public:

  // optional uint64 clientid = 1;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  uint64_t clientid() const;
  void set_clientid(uint64_t value);
  private:
  uint64_t _internal_clientid() const;
  void _internal_set_clientid(uint64_t value);
  public:

  // optional .EDisplayStatus display_status = 3 [default = k_EDisplayStatusInvalid];
  bool has_display_status() const;
  private:
  bool _internal_has_display_status() const;
  public:
  void clear_display_status();
  ::EDisplayStatus display_status() const;
  void set_display_status(::EDisplayStatus value);
  private:
  ::EDisplayStatus _internal_display_status() const;
  void _internal_set_display_status(::EDisplayStatus value);
  public:

  // optional uint32 status_percentage = 4 [default = 0];
  bool has_status_percentage() const;
  private:
  bool _internal_has_status_percentage() const;
  public:
  void clear_status_percentage();
  uint32_t status_percentage() const;
  void set_status_percentage(uint32_t value);
  private:
  uint32_t _internal_status_percentage() const;
  void _internal_set_status_percentage(uint32_t value);
  public:

  // optional uint64 bytes_downloaded = 7 [default = 0];
  bool has_bytes_downloaded() const;
  private:
  bool _internal_has_bytes_downloaded() const;
  public:
  void clear_bytes_downloaded();
  uint64_t bytes_downloaded() const;
  void set_bytes_downloaded(uint64_t value);
  private:
  uint64_t _internal_bytes_downloaded() const;
  void _internal_set_bytes_downloaded(uint64_t value);
  public:

  // optional uint64 bytes_total = 8 [default = 0];
  bool has_bytes_total() const;
  private:
  bool _internal_has_bytes_total() const;
  public:
  void clear_bytes_total();
  uint64_t bytes_total() const;
  void set_bytes_total(uint64_t value);
  private:
  uint64_t _internal_bytes_total() const;
  void _internal_set_bytes_total(uint64_t value);
  public:

  // optional bool installed = 6;
  bool has_installed() const;
  private:
  bool _internal_has_installed() const;
  public:
  void clear_installed();
  bool installed() const;
  void set_installed(bool value);
  private:
  bool _internal_installed() const;
  void _internal_set_installed(bool value);
  public:

  // optional bool streaming_to_local_client = 9;
  bool has_streaming_to_local_client() const;
  private:
  bool _internal_has_streaming_to_local_client() const;
  public:
  void clear_streaming_to_local_client();
  bool streaming_to_local_client() const;
  void set_streaming_to_local_client(bool value);
  private:
  bool _internal_streaming_to_local_client() const;
  void _internal_set_streaming_to_local_client(bool value);
  public:

  // optional bool is_available_on_current_platform = 10;
  bool has_is_available_on_current_platform() const;
  private:
  bool _internal_has_is_available_on_current_platform() const;
  public:
  void clear_is_available_on_current_platform();
  bool is_available_on_current_platform() const;
  void set_is_available_on_current_platform(bool value);
  private:
  bool _internal_is_available_on_current_platform() const;
  void _internal_set_is_available_on_current_platform(bool value);
  public:

  // optional bool is_invalid_os_type = 11;
  bool has_is_invalid_os_type() const;
  private:
  bool _internal_has_is_invalid_os_type() const;
  public:
  void clear_is_invalid_os_type();
  bool is_invalid_os_type() const;
  void set_is_invalid_os_type(bool value);
  private:
  bool _internal_is_invalid_os_type() const;
  void _internal_set_is_invalid_os_type(bool value);
  public:

  // optional uint32 playtime_left = 12;
  bool has_playtime_left() const;
  private:
  bool _internal_has_playtime_left() const;
  public:
  void clear_playtime_left();
  uint32_t playtime_left() const;
  void set_playtime_left(uint32_t value);
  private:
  uint32_t _internal_playtime_left() const;
  void _internal_set_playtime_left(uint32_t value);
  public:

  // optional .EAppCloudStatus cloud_status = 13 [default = k_EAppCloudStatusInvalid];
  bool has_cloud_status() const;
  private:
  bool _internal_has_cloud_status() const;
  public:
  void clear_cloud_status();
  ::EAppCloudStatus cloud_status() const;
  void set_cloud_status(::EAppCloudStatus value);
  private:
  ::EAppCloudStatus _internal_cloud_status() const;
  void _internal_set_cloud_status(::EAppCloudStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CAppOverview_PerClientData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_beta_;
  uint64_t clientid_;
  int display_status_;
  uint32_t status_percentage_;
  uint64_t bytes_downloaded_;
  uint64_t bytes_total_;
  bool installed_;
  bool streaming_to_local_client_;
  bool is_available_on_current_platform_;
  bool is_invalid_os_type_;
  uint32_t playtime_left_;
  int cloud_status_;
  friend struct ::TableStruct_steammessages_5fappoverview_2eproto;
};
// -------------------------------------------------------------------

class CAppOverview final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAppOverview) */ {
 public:
  inline CAppOverview() : CAppOverview(nullptr) {}
  ~CAppOverview() override;
  explicit constexpr CAppOverview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAppOverview(const CAppOverview& from);
  CAppOverview(CAppOverview&& from) noexcept
    : CAppOverview() {
    *this = ::std::move(from);
  }

  inline CAppOverview& operator=(const CAppOverview& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAppOverview& operator=(CAppOverview&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAppOverview& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAppOverview* internal_default_instance() {
    return reinterpret_cast<const CAppOverview*>(
               &_CAppOverview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CAppOverview& a, CAppOverview& b) {
    a.Swap(&b);
  }
  inline void Swap(CAppOverview* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAppOverview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAppOverview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAppOverview>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAppOverview& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAppOverview& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAppOverview* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAppOverview";
  }
  protected:
  explicit CAppOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreTagFieldNumber = 19,
    kAssociationFieldNumber = 20,
    kStoreCategoryFieldNumber = 23,
    kPerClientDataFieldNumber = 43,
    kDisplayNameFieldNumber = 2,
    kSortAsFieldNumber = 6,
    kIconHashFieldNumber = 27,
    kIconDataFieldNumber = 39,
    kIconDataFormatFieldNumber = 40,
    kGameidFieldNumber = 41,
    kLibraryCapsuleFilenameFieldNumber = 42,
    kLibraryIdFieldNumber = 57,
    kMastersubIncludedwithLogoFieldNumber = 60,
    kSiteLicenseSiteNameFieldNumber = 62,
    kHeaderFilenameFieldNumber = 67,
    kAppidFieldNumber = 1,
    kAppTypeFieldNumber = 7,
    kMruIndexFieldNumber = 13,
    kRtRecentActivityTimeFieldNumber = 14,
    kMinutesPlaytimeForeverFieldNumber = 16,
    kMinutesPlaytimeLastTwoWeeksFieldNumber = 17,
    kRtLastTimePlayedFieldNumber = 18,
    kRtOriginalReleaseDateFieldNumber = 25,
    kRtSteamReleaseDateFieldNumber = 26,
    kControllerSupportFieldNumber = 31,
    kVisibleInGameListFieldNumber = 4,
    kVrSupportedFieldNumber = 32,
    kThirdPartyModFieldNumber = 38,
    kVrOnlyFieldNumber = 58,
    kMetacriticScoreFieldNumber = 36,
    kSizeOnDiskFieldNumber = 37,
    kMostAvailableClientidFieldNumber = 44,
    kSelectedClientidFieldNumber = 45,
    kRtStoreAssetMtimeFieldNumber = 46,
    kRtCustomImageMtimeFieldNumber = 47,
    kRtPurchasedTimeFieldNumber = 66,
    kOptionalParentAppIdFieldNumber = 48,
    kOwnerAccountIdFieldNumber = 49,
    kReviewScoreWithBombsFieldNumber = 53,
    kReviewPercentageWithBombsFieldNumber = 54,
    kReviewScoreWithoutBombsFieldNumber = 55,
    kReviewPercentageWithoutBombsFieldNumber = 56,
    kMastersubAppidFieldNumber = 59,
    kShortcutOverrideAppidFieldNumber = 63,
    kSteamDeckCompatCategoryFieldNumber = 64,
    kRtLastTimeLocallyPlayedFieldNumber = 65,
  };
  // repeated uint32 store_tag = 19;
  int store_tag_size() const;
  private:
  int _internal_store_tag_size() const;
  public:
  void clear_store_tag();
  private:
  uint32_t _internal_store_tag(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_store_tag() const;
  void _internal_add_store_tag(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_store_tag();
  public:
  uint32_t store_tag(int index) const;
  void set_store_tag(int index, uint32_t value);
  void add_store_tag(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      store_tag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_store_tag();

  // repeated .CAppOverview_AppAssociation association = 20;
  int association_size() const;
  private:
  int _internal_association_size() const;
  public:
  void clear_association();
  ::CAppOverview_AppAssociation* mutable_association(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_AppAssociation >*
      mutable_association();
  private:
  const ::CAppOverview_AppAssociation& _internal_association(int index) const;
  ::CAppOverview_AppAssociation* _internal_add_association();
  public:
  const ::CAppOverview_AppAssociation& association(int index) const;
  ::CAppOverview_AppAssociation* add_association();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_AppAssociation >&
      association() const;

  // repeated uint32 store_category = 23;
  int store_category_size() const;
  private:
  int _internal_store_category_size() const;
  public:
  void clear_store_category();
  private:
  uint32_t _internal_store_category(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_store_category() const;
  void _internal_add_store_category(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_store_category();
  public:
  uint32_t store_category(int index) const;
  void set_store_category(int index, uint32_t value);
  void add_store_category(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      store_category() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_store_category();

  // repeated .CAppOverview_PerClientData per_client_data = 43;
  int per_client_data_size() const;
  private:
  int _internal_per_client_data_size() const;
  public:
  void clear_per_client_data();
  ::CAppOverview_PerClientData* mutable_per_client_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_PerClientData >*
      mutable_per_client_data();
  private:
  const ::CAppOverview_PerClientData& _internal_per_client_data(int index) const;
  ::CAppOverview_PerClientData* _internal_add_per_client_data();
  public:
  const ::CAppOverview_PerClientData& per_client_data(int index) const;
  ::CAppOverview_PerClientData* add_per_client_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_PerClientData >&
      per_client_data() const;

  // optional string display_name = 2;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string sort_as = 6;
  bool has_sort_as() const;
  private:
  bool _internal_has_sort_as() const;
  public:
  void clear_sort_as();
  const std::string& sort_as() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sort_as(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sort_as();
  PROTOBUF_NODISCARD std::string* release_sort_as();
  void set_allocated_sort_as(std::string* sort_as);
  private:
  const std::string& _internal_sort_as() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sort_as(const std::string& value);
  std::string* _internal_mutable_sort_as();
  public:

  // optional string icon_hash = 27;
  bool has_icon_hash() const;
  private:
  bool _internal_has_icon_hash() const;
  public:
  void clear_icon_hash();
  const std::string& icon_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_hash();
  PROTOBUF_NODISCARD std::string* release_icon_hash();
  void set_allocated_icon_hash(std::string* icon_hash);
  private:
  const std::string& _internal_icon_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_hash(const std::string& value);
  std::string* _internal_mutable_icon_hash();
  public:

  // optional string icon_data = 39;
  bool has_icon_data() const;
  private:
  bool _internal_has_icon_data() const;
  public:
  void clear_icon_data();
  const std::string& icon_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_data();
  PROTOBUF_NODISCARD std::string* release_icon_data();
  void set_allocated_icon_data(std::string* icon_data);
  private:
  const std::string& _internal_icon_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_data(const std::string& value);
  std::string* _internal_mutable_icon_data();
  public:

  // optional string icon_data_format = 40;
  bool has_icon_data_format() const;
  private:
  bool _internal_has_icon_data_format() const;
  public:
  void clear_icon_data_format();
  const std::string& icon_data_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_data_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_data_format();
  PROTOBUF_NODISCARD std::string* release_icon_data_format();
  void set_allocated_icon_data_format(std::string* icon_data_format);
  private:
  const std::string& _internal_icon_data_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_data_format(const std::string& value);
  std::string* _internal_mutable_icon_data_format();
  public:

  // optional string gameid = 41;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  const std::string& gameid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gameid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gameid();
  PROTOBUF_NODISCARD std::string* release_gameid();
  void set_allocated_gameid(std::string* gameid);
  private:
  const std::string& _internal_gameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gameid(const std::string& value);
  std::string* _internal_mutable_gameid();
  public:

  // optional string library_capsule_filename = 42;
  bool has_library_capsule_filename() const;
  private:
  bool _internal_has_library_capsule_filename() const;
  public:
  void clear_library_capsule_filename();
  const std::string& library_capsule_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library_capsule_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library_capsule_filename();
  PROTOBUF_NODISCARD std::string* release_library_capsule_filename();
  void set_allocated_library_capsule_filename(std::string* library_capsule_filename);
  private:
  const std::string& _internal_library_capsule_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_library_capsule_filename(const std::string& value);
  std::string* _internal_mutable_library_capsule_filename();
  public:

  // optional string library_id = 57;
  bool has_library_id() const;
  private:
  bool _internal_has_library_id() const;
  public:
  void clear_library_id();
  const std::string& library_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library_id();
  PROTOBUF_NODISCARD std::string* release_library_id();
  void set_allocated_library_id(std::string* library_id);
  private:
  const std::string& _internal_library_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_library_id(const std::string& value);
  std::string* _internal_mutable_library_id();
  public:

  // optional string mastersub_includedwith_logo = 60;
  bool has_mastersub_includedwith_logo() const;
  private:
  bool _internal_has_mastersub_includedwith_logo() const;
  public:
  void clear_mastersub_includedwith_logo();
  const std::string& mastersub_includedwith_logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mastersub_includedwith_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mastersub_includedwith_logo();
  PROTOBUF_NODISCARD std::string* release_mastersub_includedwith_logo();
  void set_allocated_mastersub_includedwith_logo(std::string* mastersub_includedwith_logo);
  private:
  const std::string& _internal_mastersub_includedwith_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mastersub_includedwith_logo(const std::string& value);
  std::string* _internal_mutable_mastersub_includedwith_logo();
  public:

  // optional string site_license_site_name = 62;
  bool has_site_license_site_name() const;
  private:
  bool _internal_has_site_license_site_name() const;
  public:
  void clear_site_license_site_name();
  const std::string& site_license_site_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_site_license_site_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_site_license_site_name();
  PROTOBUF_NODISCARD std::string* release_site_license_site_name();
  void set_allocated_site_license_site_name(std::string* site_license_site_name);
  private:
  const std::string& _internal_site_license_site_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_site_license_site_name(const std::string& value);
  std::string* _internal_mutable_site_license_site_name();
  public:

  // optional string header_filename = 67;
  bool has_header_filename() const;
  private:
  bool _internal_has_header_filename() const;
  public:
  void clear_header_filename();
  const std::string& header_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header_filename();
  PROTOBUF_NODISCARD std::string* release_header_filename();
  void set_allocated_header_filename(std::string* header_filename);
  private:
  const std::string& _internal_header_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_filename(const std::string& value);
  std::string* _internal_mutable_header_filename();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional .EProtoAppType app_type = 7 [default = k_EAppTypeInvalid];
  bool has_app_type() const;
  private:
  bool _internal_has_app_type() const;
  public:
  void clear_app_type();
  ::EProtoAppType app_type() const;
  void set_app_type(::EProtoAppType value);
  private:
  ::EProtoAppType _internal_app_type() const;
  void _internal_set_app_type(::EProtoAppType value);
  public:

  // optional uint32 mru_index = 13;
  bool has_mru_index() const;
  private:
  bool _internal_has_mru_index() const;
  public:
  void clear_mru_index();
  uint32_t mru_index() const;
  void set_mru_index(uint32_t value);
  private:
  uint32_t _internal_mru_index() const;
  void _internal_set_mru_index(uint32_t value);
  public:

  // optional uint32 rt_recent_activity_time = 14 [default = 0];
  bool has_rt_recent_activity_time() const;
  private:
  bool _internal_has_rt_recent_activity_time() const;
  public:
  void clear_rt_recent_activity_time();
  uint32_t rt_recent_activity_time() const;
  void set_rt_recent_activity_time(uint32_t value);
  private:
  uint32_t _internal_rt_recent_activity_time() const;
  void _internal_set_rt_recent_activity_time(uint32_t value);
  public:

  // optional uint32 minutes_playtime_forever = 16 [default = 0];
  bool has_minutes_playtime_forever() const;
  private:
  bool _internal_has_minutes_playtime_forever() const;
  public:
  void clear_minutes_playtime_forever();
  uint32_t minutes_playtime_forever() const;
  void set_minutes_playtime_forever(uint32_t value);
  private:
  uint32_t _internal_minutes_playtime_forever() const;
  void _internal_set_minutes_playtime_forever(uint32_t value);
  public:

  // optional uint32 minutes_playtime_last_two_weeks = 17 [default = 0];
  bool has_minutes_playtime_last_two_weeks() const;
  private:
  bool _internal_has_minutes_playtime_last_two_weeks() const;
  public:
  void clear_minutes_playtime_last_two_weeks();
  uint32_t minutes_playtime_last_two_weeks() const;
  void set_minutes_playtime_last_two_weeks(uint32_t value);
  private:
  uint32_t _internal_minutes_playtime_last_two_weeks() const;
  void _internal_set_minutes_playtime_last_two_weeks(uint32_t value);
  public:

  // optional uint32 rt_last_time_played = 18 [default = 0];
  bool has_rt_last_time_played() const;
  private:
  bool _internal_has_rt_last_time_played() const;
  public:
  void clear_rt_last_time_played();
  uint32_t rt_last_time_played() const;
  void set_rt_last_time_played(uint32_t value);
  private:
  uint32_t _internal_rt_last_time_played() const;
  void _internal_set_rt_last_time_played(uint32_t value);
  public:

  // optional uint32 rt_original_release_date = 25 [default = 0];
  bool has_rt_original_release_date() const;
  private:
  bool _internal_has_rt_original_release_date() const;
  public:
  void clear_rt_original_release_date();
  uint32_t rt_original_release_date() const;
  void set_rt_original_release_date(uint32_t value);
  private:
  uint32_t _internal_rt_original_release_date() const;
  void _internal_set_rt_original_release_date(uint32_t value);
  public:

  // optional uint32 rt_steam_release_date = 26 [default = 0];
  bool has_rt_steam_release_date() const;
  private:
  bool _internal_has_rt_steam_release_date() const;
  public:
  void clear_rt_steam_release_date();
  uint32_t rt_steam_release_date() const;
  void set_rt_steam_release_date(uint32_t value);
  private:
  uint32_t _internal_rt_steam_release_date() const;
  void _internal_set_rt_steam_release_date(uint32_t value);
  public:

  // optional .EAppControllerSupportLevel controller_support = 31 [default = k_EAppControllerSupportLevelNone];
  bool has_controller_support() const;
  private:
  bool _internal_has_controller_support() const;
  public:
  void clear_controller_support();
  ::EAppControllerSupportLevel controller_support() const;
  void set_controller_support(::EAppControllerSupportLevel value);
  private:
  ::EAppControllerSupportLevel _internal_controller_support() const;
  void _internal_set_controller_support(::EAppControllerSupportLevel value);
  public:

  // optional bool visible_in_game_list = 4;
  bool has_visible_in_game_list() const;
  private:
  bool _internal_has_visible_in_game_list() const;
  public:
  void clear_visible_in_game_list();
  bool visible_in_game_list() const;
  void set_visible_in_game_list(bool value);
  private:
  bool _internal_visible_in_game_list() const;
  void _internal_set_visible_in_game_list(bool value);
  public:

  // optional bool vr_supported = 32;
  bool has_vr_supported() const;
  private:
  bool _internal_has_vr_supported() const;
  public:
  void clear_vr_supported();
  bool vr_supported() const;
  void set_vr_supported(bool value);
  private:
  bool _internal_vr_supported() const;
  void _internal_set_vr_supported(bool value);
  public:

  // optional bool third_party_mod = 38;
  bool has_third_party_mod() const;
  private:
  bool _internal_has_third_party_mod() const;
  public:
  void clear_third_party_mod();
  bool third_party_mod() const;
  void set_third_party_mod(bool value);
  private:
  bool _internal_third_party_mod() const;
  void _internal_set_third_party_mod(bool value);
  public:

  // optional bool vr_only = 58;
  bool has_vr_only() const;
  private:
  bool _internal_has_vr_only() const;
  public:
  void clear_vr_only();
  bool vr_only() const;
  void set_vr_only(bool value);
  private:
  bool _internal_vr_only() const;
  void _internal_set_vr_only(bool value);
  public:

  // optional uint32 metacritic_score = 36;
  bool has_metacritic_score() const;
  private:
  bool _internal_has_metacritic_score() const;
  public:
  void clear_metacritic_score();
  uint32_t metacritic_score() const;
  void set_metacritic_score(uint32_t value);
  private:
  uint32_t _internal_metacritic_score() const;
  void _internal_set_metacritic_score(uint32_t value);
  public:

  // optional uint64 size_on_disk = 37;
  bool has_size_on_disk() const;
  private:
  bool _internal_has_size_on_disk() const;
  public:
  void clear_size_on_disk();
  uint64_t size_on_disk() const;
  void set_size_on_disk(uint64_t value);
  private:
  uint64_t _internal_size_on_disk() const;
  void _internal_set_size_on_disk(uint64_t value);
  public:

  // optional uint64 most_available_clientid = 44;
  bool has_most_available_clientid() const;
  private:
  bool _internal_has_most_available_clientid() const;
  public:
  void clear_most_available_clientid();
  uint64_t most_available_clientid() const;
  void set_most_available_clientid(uint64_t value);
  private:
  uint64_t _internal_most_available_clientid() const;
  void _internal_set_most_available_clientid(uint64_t value);
  public:

  // optional uint64 selected_clientid = 45;
  bool has_selected_clientid() const;
  private:
  bool _internal_has_selected_clientid() const;
  public:
  void clear_selected_clientid();
  uint64_t selected_clientid() const;
  void set_selected_clientid(uint64_t value);
  private:
  uint64_t _internal_selected_clientid() const;
  void _internal_set_selected_clientid(uint64_t value);
  public:

  // optional uint32 rt_store_asset_mtime = 46;
  bool has_rt_store_asset_mtime() const;
  private:
  bool _internal_has_rt_store_asset_mtime() const;
  public:
  void clear_rt_store_asset_mtime();
  uint32_t rt_store_asset_mtime() const;
  void set_rt_store_asset_mtime(uint32_t value);
  private:
  uint32_t _internal_rt_store_asset_mtime() const;
  void _internal_set_rt_store_asset_mtime(uint32_t value);
  public:

  // optional uint32 rt_custom_image_mtime = 47;
  bool has_rt_custom_image_mtime() const;
  private:
  bool _internal_has_rt_custom_image_mtime() const;
  public:
  void clear_rt_custom_image_mtime();
  uint32_t rt_custom_image_mtime() const;
  void set_rt_custom_image_mtime(uint32_t value);
  private:
  uint32_t _internal_rt_custom_image_mtime() const;
  void _internal_set_rt_custom_image_mtime(uint32_t value);
  public:

  // optional uint32 rt_purchased_time = 66;
  bool has_rt_purchased_time() const;
  private:
  bool _internal_has_rt_purchased_time() const;
  public:
  void clear_rt_purchased_time();
  uint32_t rt_purchased_time() const;
  void set_rt_purchased_time(uint32_t value);
  private:
  uint32_t _internal_rt_purchased_time() const;
  void _internal_set_rt_purchased_time(uint32_t value);
  public:

  // optional uint32 optional_parent_app_id = 48;
  bool has_optional_parent_app_id() const;
  private:
  bool _internal_has_optional_parent_app_id() const;
  public:
  void clear_optional_parent_app_id();
  uint32_t optional_parent_app_id() const;
  void set_optional_parent_app_id(uint32_t value);
  private:
  uint32_t _internal_optional_parent_app_id() const;
  void _internal_set_optional_parent_app_id(uint32_t value);
  public:

  // optional uint32 owner_account_id = 49;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  uint32_t owner_account_id() const;
  void set_owner_account_id(uint32_t value);
  private:
  uint32_t _internal_owner_account_id() const;
  void _internal_set_owner_account_id(uint32_t value);
  public:

  // optional uint32 review_score_with_bombs = 53;
  bool has_review_score_with_bombs() const;
  private:
  bool _internal_has_review_score_with_bombs() const;
  public:
  void clear_review_score_with_bombs();
  uint32_t review_score_with_bombs() const;
  void set_review_score_with_bombs(uint32_t value);
  private:
  uint32_t _internal_review_score_with_bombs() const;
  void _internal_set_review_score_with_bombs(uint32_t value);
  public:

  // optional uint32 review_percentage_with_bombs = 54;
  bool has_review_percentage_with_bombs() const;
  private:
  bool _internal_has_review_percentage_with_bombs() const;
  public:
  void clear_review_percentage_with_bombs();
  uint32_t review_percentage_with_bombs() const;
  void set_review_percentage_with_bombs(uint32_t value);
  private:
  uint32_t _internal_review_percentage_with_bombs() const;
  void _internal_set_review_percentage_with_bombs(uint32_t value);
  public:

  // optional uint32 review_score_without_bombs = 55;
  bool has_review_score_without_bombs() const;
  private:
  bool _internal_has_review_score_without_bombs() const;
  public:
  void clear_review_score_without_bombs();
  uint32_t review_score_without_bombs() const;
  void set_review_score_without_bombs(uint32_t value);
  private:
  uint32_t _internal_review_score_without_bombs() const;
  void _internal_set_review_score_without_bombs(uint32_t value);
  public:

  // optional uint32 review_percentage_without_bombs = 56;
  bool has_review_percentage_without_bombs() const;
  private:
  bool _internal_has_review_percentage_without_bombs() const;
  public:
  void clear_review_percentage_without_bombs();
  uint32_t review_percentage_without_bombs() const;
  void set_review_percentage_without_bombs(uint32_t value);
  private:
  uint32_t _internal_review_percentage_without_bombs() const;
  void _internal_set_review_percentage_without_bombs(uint32_t value);
  public:

  // optional uint32 mastersub_appid = 59;
  bool has_mastersub_appid() const;
  private:
  bool _internal_has_mastersub_appid() const;
  public:
  void clear_mastersub_appid();
  uint32_t mastersub_appid() const;
  void set_mastersub_appid(uint32_t value);
  private:
  uint32_t _internal_mastersub_appid() const;
  void _internal_set_mastersub_appid(uint32_t value);
  public:

  // optional uint32 shortcut_override_appid = 63;
  bool has_shortcut_override_appid() const;
  private:
  bool _internal_has_shortcut_override_appid() const;
  public:
  void clear_shortcut_override_appid();
  uint32_t shortcut_override_appid() const;
  void set_shortcut_override_appid(uint32_t value);
  private:
  uint32_t _internal_shortcut_override_appid() const;
  void _internal_set_shortcut_override_appid(uint32_t value);
  public:

  // optional .ESteamDeckCompatibilityCategory steam_deck_compat_category = 64 [default = k_ESteamDeckCompatibilityCategory_Unknown];
  bool has_steam_deck_compat_category() const;
  private:
  bool _internal_has_steam_deck_compat_category() const;
  public:
  void clear_steam_deck_compat_category();
  ::ESteamDeckCompatibilityCategory steam_deck_compat_category() const;
  void set_steam_deck_compat_category(::ESteamDeckCompatibilityCategory value);
  private:
  ::ESteamDeckCompatibilityCategory _internal_steam_deck_compat_category() const;
  void _internal_set_steam_deck_compat_category(::ESteamDeckCompatibilityCategory value);
  public:

  // optional uint32 rt_last_time_locally_played = 65;
  bool has_rt_last_time_locally_played() const;
  private:
  bool _internal_has_rt_last_time_locally_played() const;
  public:
  void clear_rt_last_time_locally_played();
  uint32_t rt_last_time_locally_played() const;
  void set_rt_last_time_locally_played(uint32_t value);
  private:
  uint32_t _internal_rt_last_time_locally_played() const;
  void _internal_set_rt_last_time_locally_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CAppOverview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > store_tag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_AppAssociation > association_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > store_category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_PerClientData > per_client_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_as_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_data_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_capsule_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mastersub_includedwith_logo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_license_site_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_filename_;
  uint32_t appid_;
  int app_type_;
  uint32_t mru_index_;
  uint32_t rt_recent_activity_time_;
  uint32_t minutes_playtime_forever_;
  uint32_t minutes_playtime_last_two_weeks_;
  uint32_t rt_last_time_played_;
  uint32_t rt_original_release_date_;
  uint32_t rt_steam_release_date_;
  int controller_support_;
  bool visible_in_game_list_;
  bool vr_supported_;
  bool third_party_mod_;
  bool vr_only_;
  uint32_t metacritic_score_;
  uint64_t size_on_disk_;
  uint64_t most_available_clientid_;
  uint64_t selected_clientid_;
  uint32_t rt_store_asset_mtime_;
  uint32_t rt_custom_image_mtime_;
  uint32_t rt_purchased_time_;
  uint32_t optional_parent_app_id_;
  uint32_t owner_account_id_;
  uint32_t review_score_with_bombs_;
  uint32_t review_percentage_with_bombs_;
  uint32_t review_score_without_bombs_;
  uint32_t review_percentage_without_bombs_;
  uint32_t mastersub_appid_;
  uint32_t shortcut_override_appid_;
  int steam_deck_compat_category_;
  uint32_t rt_last_time_locally_played_;
  friend struct ::TableStruct_steammessages_5fappoverview_2eproto;
};
// -------------------------------------------------------------------

class CAppOverview_Change final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAppOverview_Change) */ {
 public:
  inline CAppOverview_Change() : CAppOverview_Change(nullptr) {}
  ~CAppOverview_Change() override;
  explicit constexpr CAppOverview_Change(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAppOverview_Change(const CAppOverview_Change& from);
  CAppOverview_Change(CAppOverview_Change&& from) noexcept
    : CAppOverview_Change() {
    *this = ::std::move(from);
  }

  inline CAppOverview_Change& operator=(const CAppOverview_Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAppOverview_Change& operator=(CAppOverview_Change&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAppOverview_Change& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAppOverview_Change* internal_default_instance() {
    return reinterpret_cast<const CAppOverview_Change*>(
               &_CAppOverview_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CAppOverview_Change& a, CAppOverview_Change& b) {
    a.Swap(&b);
  }
  inline void Swap(CAppOverview_Change* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAppOverview_Change* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAppOverview_Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAppOverview_Change>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAppOverview_Change& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAppOverview_Change& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAppOverview_Change* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAppOverview_Change";
  }
  protected:
  explicit CAppOverview_Change(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppOverviewFieldNumber = 1,
    kRemovedAppidFieldNumber = 2,
    kFullUpdateFieldNumber = 3,
    kUpdateCompleteFieldNumber = 4,
  };
  // repeated .CAppOverview app_overview = 1;
  int app_overview_size() const;
  private:
  int _internal_app_overview_size() const;
  public:
  void clear_app_overview();
  ::CAppOverview* mutable_app_overview(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview >*
      mutable_app_overview();
  private:
  const ::CAppOverview& _internal_app_overview(int index) const;
  ::CAppOverview* _internal_add_app_overview();
  public:
  const ::CAppOverview& app_overview(int index) const;
  ::CAppOverview* add_app_overview();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview >&
      app_overview() const;

  // repeated uint32 removed_appid = 2;
  int removed_appid_size() const;
  private:
  int _internal_removed_appid_size() const;
  public:
  void clear_removed_appid();
  private:
  uint32_t _internal_removed_appid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_removed_appid() const;
  void _internal_add_removed_appid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_removed_appid();
  public:
  uint32_t removed_appid(int index) const;
  void set_removed_appid(int index, uint32_t value);
  void add_removed_appid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      removed_appid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_removed_appid();

  // optional bool full_update = 3;
  bool has_full_update() const;
  private:
  bool _internal_has_full_update() const;
  public:
  void clear_full_update();
  bool full_update() const;
  void set_full_update(bool value);
  private:
  bool _internal_full_update() const;
  void _internal_set_full_update(bool value);
  public:

  // optional bool update_complete = 4;
  bool has_update_complete() const;
  private:
  bool _internal_has_update_complete() const;
  public:
  void clear_update_complete();
  bool update_complete() const;
  void set_update_complete(bool value);
  private:
  bool _internal_update_complete() const;
  void _internal_set_update_complete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CAppOverview_Change)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview > app_overview_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > removed_appid_;
  bool full_update_;
  bool update_complete_;
  friend struct ::TableStruct_steammessages_5fappoverview_2eproto;
};
// -------------------------------------------------------------------

class CAppBootstrapData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAppBootstrapData) */ {
 public:
  inline CAppBootstrapData() : CAppBootstrapData(nullptr) {}
  ~CAppBootstrapData() override;
  explicit constexpr CAppBootstrapData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAppBootstrapData(const CAppBootstrapData& from);
  CAppBootstrapData(CAppBootstrapData&& from) noexcept
    : CAppBootstrapData() {
    *this = ::std::move(from);
  }

  inline CAppBootstrapData& operator=(const CAppBootstrapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAppBootstrapData& operator=(CAppBootstrapData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAppBootstrapData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAppBootstrapData* internal_default_instance() {
    return reinterpret_cast<const CAppBootstrapData*>(
               &_CAppBootstrapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CAppBootstrapData& a, CAppBootstrapData& b) {
    a.Swap(&b);
  }
  inline void Swap(CAppBootstrapData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAppBootstrapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CAppBootstrapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CAppBootstrapData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAppBootstrapData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAppBootstrapData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAppBootstrapData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAppBootstrapData";
  }
  protected:
  explicit CAppBootstrapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTagFieldNumber = 3,
    kAppidFieldNumber = 1,
    kHiddenFieldNumber = 2,
  };
  // repeated string user_tag = 3;
  int user_tag_size() const;
  private:
  int _internal_user_tag_size() const;
  public:
  void clear_user_tag();
  const std::string& user_tag(int index) const;
  std::string* mutable_user_tag(int index);
  void set_user_tag(int index, const std::string& value);
  void set_user_tag(int index, std::string&& value);
  void set_user_tag(int index, const char* value);
  void set_user_tag(int index, const char* value, size_t size);
  std::string* add_user_tag();
  void add_user_tag(const std::string& value);
  void add_user_tag(std::string&& value);
  void add_user_tag(const char* value);
  void add_user_tag(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_tag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_tag();
  private:
  const std::string& _internal_user_tag(int index) const;
  std::string* _internal_add_user_tag();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool hidden = 2;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CAppBootstrapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_tag_;
  uint32_t appid_;
  bool hidden_;
  friend struct ::TableStruct_steammessages_5fappoverview_2eproto;
};
// -------------------------------------------------------------------

class CLibraryBootstrapData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLibraryBootstrapData) */ {
 public:
  inline CLibraryBootstrapData() : CLibraryBootstrapData(nullptr) {}
  ~CLibraryBootstrapData() override;
  explicit constexpr CLibraryBootstrapData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLibraryBootstrapData(const CLibraryBootstrapData& from);
  CLibraryBootstrapData(CLibraryBootstrapData&& from) noexcept
    : CLibraryBootstrapData() {
    *this = ::std::move(from);
  }

  inline CLibraryBootstrapData& operator=(const CLibraryBootstrapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLibraryBootstrapData& operator=(CLibraryBootstrapData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLibraryBootstrapData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLibraryBootstrapData* internal_default_instance() {
    return reinterpret_cast<const CLibraryBootstrapData*>(
               &_CLibraryBootstrapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CLibraryBootstrapData& a, CLibraryBootstrapData& b) {
    a.Swap(&b);
  }
  inline void Swap(CLibraryBootstrapData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLibraryBootstrapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLibraryBootstrapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLibraryBootstrapData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLibraryBootstrapData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CLibraryBootstrapData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLibraryBootstrapData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLibraryBootstrapData";
  }
  protected:
  explicit CLibraryBootstrapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppDataFieldNumber = 1,
  };
  // repeated .CAppBootstrapData app_data = 1;
  int app_data_size() const;
  private:
  int _internal_app_data_size() const;
  public:
  void clear_app_data();
  ::CAppBootstrapData* mutable_app_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppBootstrapData >*
      mutable_app_data();
  private:
  const ::CAppBootstrapData& _internal_app_data(int index) const;
  ::CAppBootstrapData* _internal_add_app_data();
  public:
  const ::CAppBootstrapData& app_data(int index) const;
  ::CAppBootstrapData* add_app_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppBootstrapData >&
      app_data() const;

  // @@protoc_insertion_point(class_scope:CLibraryBootstrapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppBootstrapData > app_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fappoverview_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CAppOverview_AppAssociation

// optional .EAppAssociationType type = 1 [default = k_EAppAssociationTypeInvalid];
inline bool CAppOverview_AppAssociation::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAppOverview_AppAssociation::has_type() const {
  return _internal_has_type();
}
inline void CAppOverview_AppAssociation::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EAppAssociationType CAppOverview_AppAssociation::_internal_type() const {
  return static_cast< ::EAppAssociationType >(type_);
}
inline ::EAppAssociationType CAppOverview_AppAssociation::type() const {
  // @@protoc_insertion_point(field_get:CAppOverview_AppAssociation.type)
  return _internal_type();
}
inline void CAppOverview_AppAssociation::_internal_set_type(::EAppAssociationType value) {
  assert(::EAppAssociationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CAppOverview_AppAssociation::set_type(::EAppAssociationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CAppOverview_AppAssociation.type)
}

// optional string name = 2;
inline bool CAppOverview_AppAssociation::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAppOverview_AppAssociation::has_name() const {
  return _internal_has_name();
}
inline void CAppOverview_AppAssociation::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAppOverview_AppAssociation::name() const {
  // @@protoc_insertion_point(field_get:CAppOverview_AppAssociation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview_AppAssociation::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview_AppAssociation.name)
}
inline std::string* CAppOverview_AppAssociation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CAppOverview_AppAssociation.name)
  return _s;
}
inline const std::string& CAppOverview_AppAssociation::_internal_name() const {
  return name_.Get();
}
inline void CAppOverview_AppAssociation::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview_AppAssociation::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview_AppAssociation::release_name() {
  // @@protoc_insertion_point(field_release:CAppOverview_AppAssociation.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview_AppAssociation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview_AppAssociation.name)
}

// -------------------------------------------------------------------

// CAppOverview_PerClientData

// optional uint64 clientid = 1;
inline bool CAppOverview_PerClientData::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_clientid() const {
  return _internal_has_clientid();
}
inline void CAppOverview_PerClientData::clear_clientid() {
  clientid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CAppOverview_PerClientData::_internal_clientid() const {
  return clientid_;
}
inline uint64_t CAppOverview_PerClientData::clientid() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.clientid)
  return _internal_clientid();
}
inline void CAppOverview_PerClientData::_internal_set_clientid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  clientid_ = value;
}
inline void CAppOverview_PerClientData::set_clientid(uint64_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.clientid)
}

// optional string client_name = 2;
inline bool CAppOverview_PerClientData::_internal_has_client_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_client_name() const {
  return _internal_has_client_name();
}
inline void CAppOverview_PerClientData::clear_client_name() {
  client_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAppOverview_PerClientData::client_name() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.client_name)
  return _internal_client_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview_PerClientData::set_client_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.client_name)
}
inline std::string* CAppOverview_PerClientData::mutable_client_name() {
  std::string* _s = _internal_mutable_client_name();
  // @@protoc_insertion_point(field_mutable:CAppOverview_PerClientData.client_name)
  return _s;
}
inline const std::string& CAppOverview_PerClientData::_internal_client_name() const {
  return client_name_.Get();
}
inline void CAppOverview_PerClientData::_internal_set_client_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview_PerClientData::_internal_mutable_client_name() {
  _has_bits_[0] |= 0x00000001u;
  return client_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview_PerClientData::release_client_name() {
  // @@protoc_insertion_point(field_release:CAppOverview_PerClientData.client_name)
  if (!_internal_has_client_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = client_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview_PerClientData::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview_PerClientData.client_name)
}

// optional .EDisplayStatus display_status = 3 [default = k_EDisplayStatusInvalid];
inline bool CAppOverview_PerClientData::_internal_has_display_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_display_status() const {
  return _internal_has_display_status();
}
inline void CAppOverview_PerClientData::clear_display_status() {
  display_status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EDisplayStatus CAppOverview_PerClientData::_internal_display_status() const {
  return static_cast< ::EDisplayStatus >(display_status_);
}
inline ::EDisplayStatus CAppOverview_PerClientData::display_status() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.display_status)
  return _internal_display_status();
}
inline void CAppOverview_PerClientData::_internal_set_display_status(::EDisplayStatus value) {
  assert(::EDisplayStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  display_status_ = value;
}
inline void CAppOverview_PerClientData::set_display_status(::EDisplayStatus value) {
  _internal_set_display_status(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.display_status)
}

// optional uint32 status_percentage = 4 [default = 0];
inline bool CAppOverview_PerClientData::_internal_has_status_percentage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_status_percentage() const {
  return _internal_has_status_percentage();
}
inline void CAppOverview_PerClientData::clear_status_percentage() {
  status_percentage_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CAppOverview_PerClientData::_internal_status_percentage() const {
  return status_percentage_;
}
inline uint32_t CAppOverview_PerClientData::status_percentage() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.status_percentage)
  return _internal_status_percentage();
}
inline void CAppOverview_PerClientData::_internal_set_status_percentage(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  status_percentage_ = value;
}
inline void CAppOverview_PerClientData::set_status_percentage(uint32_t value) {
  _internal_set_status_percentage(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.status_percentage)
}

// optional string active_beta = 5;
inline bool CAppOverview_PerClientData::_internal_has_active_beta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_active_beta() const {
  return _internal_has_active_beta();
}
inline void CAppOverview_PerClientData::clear_active_beta() {
  active_beta_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAppOverview_PerClientData::active_beta() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.active_beta)
  return _internal_active_beta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview_PerClientData::set_active_beta(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 active_beta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.active_beta)
}
inline std::string* CAppOverview_PerClientData::mutable_active_beta() {
  std::string* _s = _internal_mutable_active_beta();
  // @@protoc_insertion_point(field_mutable:CAppOverview_PerClientData.active_beta)
  return _s;
}
inline const std::string& CAppOverview_PerClientData::_internal_active_beta() const {
  return active_beta_.Get();
}
inline void CAppOverview_PerClientData::_internal_set_active_beta(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  active_beta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview_PerClientData::_internal_mutable_active_beta() {
  _has_bits_[0] |= 0x00000002u;
  return active_beta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview_PerClientData::release_active_beta() {
  // @@protoc_insertion_point(field_release:CAppOverview_PerClientData.active_beta)
  if (!_internal_has_active_beta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = active_beta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_beta_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview_PerClientData::set_allocated_active_beta(std::string* active_beta) {
  if (active_beta != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  active_beta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_beta,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_beta_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview_PerClientData.active_beta)
}

// optional bool installed = 6;
inline bool CAppOverview_PerClientData::_internal_has_installed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_installed() const {
  return _internal_has_installed();
}
inline void CAppOverview_PerClientData::clear_installed() {
  installed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CAppOverview_PerClientData::_internal_installed() const {
  return installed_;
}
inline bool CAppOverview_PerClientData::installed() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.installed)
  return _internal_installed();
}
inline void CAppOverview_PerClientData::_internal_set_installed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  installed_ = value;
}
inline void CAppOverview_PerClientData::set_installed(bool value) {
  _internal_set_installed(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.installed)
}

// optional uint64 bytes_downloaded = 7 [default = 0];
inline bool CAppOverview_PerClientData::_internal_has_bytes_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_bytes_downloaded() const {
  return _internal_has_bytes_downloaded();
}
inline void CAppOverview_PerClientData::clear_bytes_downloaded() {
  bytes_downloaded_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CAppOverview_PerClientData::_internal_bytes_downloaded() const {
  return bytes_downloaded_;
}
inline uint64_t CAppOverview_PerClientData::bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.bytes_downloaded)
  return _internal_bytes_downloaded();
}
inline void CAppOverview_PerClientData::_internal_set_bytes_downloaded(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  bytes_downloaded_ = value;
}
inline void CAppOverview_PerClientData::set_bytes_downloaded(uint64_t value) {
  _internal_set_bytes_downloaded(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.bytes_downloaded)
}

// optional uint64 bytes_total = 8 [default = 0];
inline bool CAppOverview_PerClientData::_internal_has_bytes_total() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_bytes_total() const {
  return _internal_has_bytes_total();
}
inline void CAppOverview_PerClientData::clear_bytes_total() {
  bytes_total_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CAppOverview_PerClientData::_internal_bytes_total() const {
  return bytes_total_;
}
inline uint64_t CAppOverview_PerClientData::bytes_total() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.bytes_total)
  return _internal_bytes_total();
}
inline void CAppOverview_PerClientData::_internal_set_bytes_total(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  bytes_total_ = value;
}
inline void CAppOverview_PerClientData::set_bytes_total(uint64_t value) {
  _internal_set_bytes_total(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.bytes_total)
}

// optional bool streaming_to_local_client = 9;
inline bool CAppOverview_PerClientData::_internal_has_streaming_to_local_client() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_streaming_to_local_client() const {
  return _internal_has_streaming_to_local_client();
}
inline void CAppOverview_PerClientData::clear_streaming_to_local_client() {
  streaming_to_local_client_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CAppOverview_PerClientData::_internal_streaming_to_local_client() const {
  return streaming_to_local_client_;
}
inline bool CAppOverview_PerClientData::streaming_to_local_client() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.streaming_to_local_client)
  return _internal_streaming_to_local_client();
}
inline void CAppOverview_PerClientData::_internal_set_streaming_to_local_client(bool value) {
  _has_bits_[0] |= 0x00000100u;
  streaming_to_local_client_ = value;
}
inline void CAppOverview_PerClientData::set_streaming_to_local_client(bool value) {
  _internal_set_streaming_to_local_client(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.streaming_to_local_client)
}

// optional bool is_available_on_current_platform = 10;
inline bool CAppOverview_PerClientData::_internal_has_is_available_on_current_platform() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_is_available_on_current_platform() const {
  return _internal_has_is_available_on_current_platform();
}
inline void CAppOverview_PerClientData::clear_is_available_on_current_platform() {
  is_available_on_current_platform_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CAppOverview_PerClientData::_internal_is_available_on_current_platform() const {
  return is_available_on_current_platform_;
}
inline bool CAppOverview_PerClientData::is_available_on_current_platform() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.is_available_on_current_platform)
  return _internal_is_available_on_current_platform();
}
inline void CAppOverview_PerClientData::_internal_set_is_available_on_current_platform(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_available_on_current_platform_ = value;
}
inline void CAppOverview_PerClientData::set_is_available_on_current_platform(bool value) {
  _internal_set_is_available_on_current_platform(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.is_available_on_current_platform)
}

// optional bool is_invalid_os_type = 11;
inline bool CAppOverview_PerClientData::_internal_has_is_invalid_os_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_is_invalid_os_type() const {
  return _internal_has_is_invalid_os_type();
}
inline void CAppOverview_PerClientData::clear_is_invalid_os_type() {
  is_invalid_os_type_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CAppOverview_PerClientData::_internal_is_invalid_os_type() const {
  return is_invalid_os_type_;
}
inline bool CAppOverview_PerClientData::is_invalid_os_type() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.is_invalid_os_type)
  return _internal_is_invalid_os_type();
}
inline void CAppOverview_PerClientData::_internal_set_is_invalid_os_type(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_invalid_os_type_ = value;
}
inline void CAppOverview_PerClientData::set_is_invalid_os_type(bool value) {
  _internal_set_is_invalid_os_type(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.is_invalid_os_type)
}

// optional uint32 playtime_left = 12;
inline bool CAppOverview_PerClientData::_internal_has_playtime_left() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_playtime_left() const {
  return _internal_has_playtime_left();
}
inline void CAppOverview_PerClientData::clear_playtime_left() {
  playtime_left_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CAppOverview_PerClientData::_internal_playtime_left() const {
  return playtime_left_;
}
inline uint32_t CAppOverview_PerClientData::playtime_left() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.playtime_left)
  return _internal_playtime_left();
}
inline void CAppOverview_PerClientData::_internal_set_playtime_left(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  playtime_left_ = value;
}
inline void CAppOverview_PerClientData::set_playtime_left(uint32_t value) {
  _internal_set_playtime_left(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.playtime_left)
}

// optional .EAppCloudStatus cloud_status = 13 [default = k_EAppCloudStatusInvalid];
inline bool CAppOverview_PerClientData::_internal_has_cloud_status() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CAppOverview_PerClientData::has_cloud_status() const {
  return _internal_has_cloud_status();
}
inline void CAppOverview_PerClientData::clear_cloud_status() {
  cloud_status_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::EAppCloudStatus CAppOverview_PerClientData::_internal_cloud_status() const {
  return static_cast< ::EAppCloudStatus >(cloud_status_);
}
inline ::EAppCloudStatus CAppOverview_PerClientData::cloud_status() const {
  // @@protoc_insertion_point(field_get:CAppOverview_PerClientData.cloud_status)
  return _internal_cloud_status();
}
inline void CAppOverview_PerClientData::_internal_set_cloud_status(::EAppCloudStatus value) {
  assert(::EAppCloudStatus_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  cloud_status_ = value;
}
inline void CAppOverview_PerClientData::set_cloud_status(::EAppCloudStatus value) {
  _internal_set_cloud_status(value);
  // @@protoc_insertion_point(field_set:CAppOverview_PerClientData.cloud_status)
}

// -------------------------------------------------------------------

// CAppOverview

// optional uint32 appid = 1;
inline bool CAppOverview::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CAppOverview::has_appid() const {
  return _internal_has_appid();
}
inline void CAppOverview::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CAppOverview::_internal_appid() const {
  return appid_;
}
inline uint32_t CAppOverview::appid() const {
  // @@protoc_insertion_point(field_get:CAppOverview.appid)
  return _internal_appid();
}
inline void CAppOverview::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  appid_ = value;
}
inline void CAppOverview::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CAppOverview.appid)
}

// optional string display_name = 2;
inline bool CAppOverview::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAppOverview::has_display_name() const {
  return _internal_has_display_name();
}
inline void CAppOverview::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAppOverview::display_name() const {
  // @@protoc_insertion_point(field_get:CAppOverview.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.display_name)
}
inline std::string* CAppOverview::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:CAppOverview.display_name)
  return _s;
}
inline const std::string& CAppOverview::_internal_display_name() const {
  return display_name_.Get();
}
inline void CAppOverview::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_display_name() {
  // @@protoc_insertion_point(field_release:CAppOverview.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.display_name)
}

// optional bool visible_in_game_list = 4;
inline bool CAppOverview::_internal_has_visible_in_game_list() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CAppOverview::has_visible_in_game_list() const {
  return _internal_has_visible_in_game_list();
}
inline void CAppOverview::clear_visible_in_game_list() {
  visible_in_game_list_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CAppOverview::_internal_visible_in_game_list() const {
  return visible_in_game_list_;
}
inline bool CAppOverview::visible_in_game_list() const {
  // @@protoc_insertion_point(field_get:CAppOverview.visible_in_game_list)
  return _internal_visible_in_game_list();
}
inline void CAppOverview::_internal_set_visible_in_game_list(bool value) {
  _has_bits_[0] |= 0x00200000u;
  visible_in_game_list_ = value;
}
inline void CAppOverview::set_visible_in_game_list(bool value) {
  _internal_set_visible_in_game_list(value);
  // @@protoc_insertion_point(field_set:CAppOverview.visible_in_game_list)
}

// optional string sort_as = 6;
inline bool CAppOverview::_internal_has_sort_as() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAppOverview::has_sort_as() const {
  return _internal_has_sort_as();
}
inline void CAppOverview::clear_sort_as() {
  sort_as_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CAppOverview::sort_as() const {
  // @@protoc_insertion_point(field_get:CAppOverview.sort_as)
  return _internal_sort_as();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_sort_as(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sort_as_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.sort_as)
}
inline std::string* CAppOverview::mutable_sort_as() {
  std::string* _s = _internal_mutable_sort_as();
  // @@protoc_insertion_point(field_mutable:CAppOverview.sort_as)
  return _s;
}
inline const std::string& CAppOverview::_internal_sort_as() const {
  return sort_as_.Get();
}
inline void CAppOverview::_internal_set_sort_as(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sort_as_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_sort_as() {
  _has_bits_[0] |= 0x00000002u;
  return sort_as_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_sort_as() {
  // @@protoc_insertion_point(field_release:CAppOverview.sort_as)
  if (!_internal_has_sort_as()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sort_as_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sort_as_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_sort_as(std::string* sort_as) {
  if (sort_as != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sort_as_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sort_as,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sort_as_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.sort_as)
}

// optional .EProtoAppType app_type = 7 [default = k_EAppTypeInvalid];
inline bool CAppOverview::_internal_has_app_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CAppOverview::has_app_type() const {
  return _internal_has_app_type();
}
inline void CAppOverview::clear_app_type() {
  app_type_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::EProtoAppType CAppOverview::_internal_app_type() const {
  return static_cast< ::EProtoAppType >(app_type_);
}
inline ::EProtoAppType CAppOverview::app_type() const {
  // @@protoc_insertion_point(field_get:CAppOverview.app_type)
  return _internal_app_type();
}
inline void CAppOverview::_internal_set_app_type(::EProtoAppType value) {
  assert(::EProtoAppType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  app_type_ = value;
}
inline void CAppOverview::set_app_type(::EProtoAppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:CAppOverview.app_type)
}

// optional uint32 mru_index = 13;
inline bool CAppOverview::_internal_has_mru_index() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CAppOverview::has_mru_index() const {
  return _internal_has_mru_index();
}
inline void CAppOverview::clear_mru_index() {
  mru_index_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CAppOverview::_internal_mru_index() const {
  return mru_index_;
}
inline uint32_t CAppOverview::mru_index() const {
  // @@protoc_insertion_point(field_get:CAppOverview.mru_index)
  return _internal_mru_index();
}
inline void CAppOverview::_internal_set_mru_index(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  mru_index_ = value;
}
inline void CAppOverview::set_mru_index(uint32_t value) {
  _internal_set_mru_index(value);
  // @@protoc_insertion_point(field_set:CAppOverview.mru_index)
}

// optional uint32 rt_recent_activity_time = 14 [default = 0];
inline bool CAppOverview::_internal_has_rt_recent_activity_time() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_recent_activity_time() const {
  return _internal_has_rt_recent_activity_time();
}
inline void CAppOverview::clear_rt_recent_activity_time() {
  rt_recent_activity_time_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CAppOverview::_internal_rt_recent_activity_time() const {
  return rt_recent_activity_time_;
}
inline uint32_t CAppOverview::rt_recent_activity_time() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_recent_activity_time)
  return _internal_rt_recent_activity_time();
}
inline void CAppOverview::_internal_set_rt_recent_activity_time(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  rt_recent_activity_time_ = value;
}
inline void CAppOverview::set_rt_recent_activity_time(uint32_t value) {
  _internal_set_rt_recent_activity_time(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_recent_activity_time)
}

// optional uint32 minutes_playtime_forever = 16 [default = 0];
inline bool CAppOverview::_internal_has_minutes_playtime_forever() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CAppOverview::has_minutes_playtime_forever() const {
  return _internal_has_minutes_playtime_forever();
}
inline void CAppOverview::clear_minutes_playtime_forever() {
  minutes_playtime_forever_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CAppOverview::_internal_minutes_playtime_forever() const {
  return minutes_playtime_forever_;
}
inline uint32_t CAppOverview::minutes_playtime_forever() const {
  // @@protoc_insertion_point(field_get:CAppOverview.minutes_playtime_forever)
  return _internal_minutes_playtime_forever();
}
inline void CAppOverview::_internal_set_minutes_playtime_forever(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  minutes_playtime_forever_ = value;
}
inline void CAppOverview::set_minutes_playtime_forever(uint32_t value) {
  _internal_set_minutes_playtime_forever(value);
  // @@protoc_insertion_point(field_set:CAppOverview.minutes_playtime_forever)
}

// optional uint32 minutes_playtime_last_two_weeks = 17 [default = 0];
inline bool CAppOverview::_internal_has_minutes_playtime_last_two_weeks() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CAppOverview::has_minutes_playtime_last_two_weeks() const {
  return _internal_has_minutes_playtime_last_two_weeks();
}
inline void CAppOverview::clear_minutes_playtime_last_two_weeks() {
  minutes_playtime_last_two_weeks_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CAppOverview::_internal_minutes_playtime_last_two_weeks() const {
  return minutes_playtime_last_two_weeks_;
}
inline uint32_t CAppOverview::minutes_playtime_last_two_weeks() const {
  // @@protoc_insertion_point(field_get:CAppOverview.minutes_playtime_last_two_weeks)
  return _internal_minutes_playtime_last_two_weeks();
}
inline void CAppOverview::_internal_set_minutes_playtime_last_two_weeks(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  minutes_playtime_last_two_weeks_ = value;
}
inline void CAppOverview::set_minutes_playtime_last_two_weeks(uint32_t value) {
  _internal_set_minutes_playtime_last_two_weeks(value);
  // @@protoc_insertion_point(field_set:CAppOverview.minutes_playtime_last_two_weeks)
}

// optional uint32 rt_last_time_played = 18 [default = 0];
inline bool CAppOverview::_internal_has_rt_last_time_played() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_last_time_played() const {
  return _internal_has_rt_last_time_played();
}
inline void CAppOverview::clear_rt_last_time_played() {
  rt_last_time_played_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CAppOverview::_internal_rt_last_time_played() const {
  return rt_last_time_played_;
}
inline uint32_t CAppOverview::rt_last_time_played() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_last_time_played)
  return _internal_rt_last_time_played();
}
inline void CAppOverview::_internal_set_rt_last_time_played(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  rt_last_time_played_ = value;
}
inline void CAppOverview::set_rt_last_time_played(uint32_t value) {
  _internal_set_rt_last_time_played(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_last_time_played)
}

// repeated uint32 store_tag = 19;
inline int CAppOverview::_internal_store_tag_size() const {
  return store_tag_.size();
}
inline int CAppOverview::store_tag_size() const {
  return _internal_store_tag_size();
}
inline void CAppOverview::clear_store_tag() {
  store_tag_.Clear();
}
inline uint32_t CAppOverview::_internal_store_tag(int index) const {
  return store_tag_.Get(index);
}
inline uint32_t CAppOverview::store_tag(int index) const {
  // @@protoc_insertion_point(field_get:CAppOverview.store_tag)
  return _internal_store_tag(index);
}
inline void CAppOverview::set_store_tag(int index, uint32_t value) {
  store_tag_.Set(index, value);
  // @@protoc_insertion_point(field_set:CAppOverview.store_tag)
}
inline void CAppOverview::_internal_add_store_tag(uint32_t value) {
  store_tag_.Add(value);
}
inline void CAppOverview::add_store_tag(uint32_t value) {
  _internal_add_store_tag(value);
  // @@protoc_insertion_point(field_add:CAppOverview.store_tag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CAppOverview::_internal_store_tag() const {
  return store_tag_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CAppOverview::store_tag() const {
  // @@protoc_insertion_point(field_list:CAppOverview.store_tag)
  return _internal_store_tag();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CAppOverview::_internal_mutable_store_tag() {
  return &store_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CAppOverview::mutable_store_tag() {
  // @@protoc_insertion_point(field_mutable_list:CAppOverview.store_tag)
  return _internal_mutable_store_tag();
}

// repeated .CAppOverview_AppAssociation association = 20;
inline int CAppOverview::_internal_association_size() const {
  return association_.size();
}
inline int CAppOverview::association_size() const {
  return _internal_association_size();
}
inline void CAppOverview::clear_association() {
  association_.Clear();
}
inline ::CAppOverview_AppAssociation* CAppOverview::mutable_association(int index) {
  // @@protoc_insertion_point(field_mutable:CAppOverview.association)
  return association_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_AppAssociation >*
CAppOverview::mutable_association() {
  // @@protoc_insertion_point(field_mutable_list:CAppOverview.association)
  return &association_;
}
inline const ::CAppOverview_AppAssociation& CAppOverview::_internal_association(int index) const {
  return association_.Get(index);
}
inline const ::CAppOverview_AppAssociation& CAppOverview::association(int index) const {
  // @@protoc_insertion_point(field_get:CAppOverview.association)
  return _internal_association(index);
}
inline ::CAppOverview_AppAssociation* CAppOverview::_internal_add_association() {
  return association_.Add();
}
inline ::CAppOverview_AppAssociation* CAppOverview::add_association() {
  ::CAppOverview_AppAssociation* _add = _internal_add_association();
  // @@protoc_insertion_point(field_add:CAppOverview.association)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_AppAssociation >&
CAppOverview::association() const {
  // @@protoc_insertion_point(field_list:CAppOverview.association)
  return association_;
}

// repeated uint32 store_category = 23;
inline int CAppOverview::_internal_store_category_size() const {
  return store_category_.size();
}
inline int CAppOverview::store_category_size() const {
  return _internal_store_category_size();
}
inline void CAppOverview::clear_store_category() {
  store_category_.Clear();
}
inline uint32_t CAppOverview::_internal_store_category(int index) const {
  return store_category_.Get(index);
}
inline uint32_t CAppOverview::store_category(int index) const {
  // @@protoc_insertion_point(field_get:CAppOverview.store_category)
  return _internal_store_category(index);
}
inline void CAppOverview::set_store_category(int index, uint32_t value) {
  store_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:CAppOverview.store_category)
}
inline void CAppOverview::_internal_add_store_category(uint32_t value) {
  store_category_.Add(value);
}
inline void CAppOverview::add_store_category(uint32_t value) {
  _internal_add_store_category(value);
  // @@protoc_insertion_point(field_add:CAppOverview.store_category)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CAppOverview::_internal_store_category() const {
  return store_category_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CAppOverview::store_category() const {
  // @@protoc_insertion_point(field_list:CAppOverview.store_category)
  return _internal_store_category();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CAppOverview::_internal_mutable_store_category() {
  return &store_category_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CAppOverview::mutable_store_category() {
  // @@protoc_insertion_point(field_mutable_list:CAppOverview.store_category)
  return _internal_mutable_store_category();
}

// optional uint32 rt_original_release_date = 25 [default = 0];
inline bool CAppOverview::_internal_has_rt_original_release_date() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_original_release_date() const {
  return _internal_has_rt_original_release_date();
}
inline void CAppOverview::clear_rt_original_release_date() {
  rt_original_release_date_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CAppOverview::_internal_rt_original_release_date() const {
  return rt_original_release_date_;
}
inline uint32_t CAppOverview::rt_original_release_date() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_original_release_date)
  return _internal_rt_original_release_date();
}
inline void CAppOverview::_internal_set_rt_original_release_date(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  rt_original_release_date_ = value;
}
inline void CAppOverview::set_rt_original_release_date(uint32_t value) {
  _internal_set_rt_original_release_date(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_original_release_date)
}

// optional uint32 rt_steam_release_date = 26 [default = 0];
inline bool CAppOverview::_internal_has_rt_steam_release_date() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_steam_release_date() const {
  return _internal_has_rt_steam_release_date();
}
inline void CAppOverview::clear_rt_steam_release_date() {
  rt_steam_release_date_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CAppOverview::_internal_rt_steam_release_date() const {
  return rt_steam_release_date_;
}
inline uint32_t CAppOverview::rt_steam_release_date() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_steam_release_date)
  return _internal_rt_steam_release_date();
}
inline void CAppOverview::_internal_set_rt_steam_release_date(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  rt_steam_release_date_ = value;
}
inline void CAppOverview::set_rt_steam_release_date(uint32_t value) {
  _internal_set_rt_steam_release_date(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_steam_release_date)
}

// optional string icon_hash = 27;
inline bool CAppOverview::_internal_has_icon_hash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAppOverview::has_icon_hash() const {
  return _internal_has_icon_hash();
}
inline void CAppOverview::clear_icon_hash() {
  icon_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CAppOverview::icon_hash() const {
  // @@protoc_insertion_point(field_get:CAppOverview.icon_hash)
  return _internal_icon_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_icon_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 icon_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.icon_hash)
}
inline std::string* CAppOverview::mutable_icon_hash() {
  std::string* _s = _internal_mutable_icon_hash();
  // @@protoc_insertion_point(field_mutable:CAppOverview.icon_hash)
  return _s;
}
inline const std::string& CAppOverview::_internal_icon_hash() const {
  return icon_hash_.Get();
}
inline void CAppOverview::_internal_set_icon_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_icon_hash() {
  _has_bits_[0] |= 0x00000004u;
  return icon_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_icon_hash() {
  // @@protoc_insertion_point(field_release:CAppOverview.icon_hash)
  if (!_internal_has_icon_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = icon_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_icon_hash(std::string* icon_hash) {
  if (icon_hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.icon_hash)
}

// optional .EAppControllerSupportLevel controller_support = 31 [default = k_EAppControllerSupportLevelNone];
inline bool CAppOverview::_internal_has_controller_support() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CAppOverview::has_controller_support() const {
  return _internal_has_controller_support();
}
inline void CAppOverview::clear_controller_support() {
  controller_support_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::EAppControllerSupportLevel CAppOverview::_internal_controller_support() const {
  return static_cast< ::EAppControllerSupportLevel >(controller_support_);
}
inline ::EAppControllerSupportLevel CAppOverview::controller_support() const {
  // @@protoc_insertion_point(field_get:CAppOverview.controller_support)
  return _internal_controller_support();
}
inline void CAppOverview::_internal_set_controller_support(::EAppControllerSupportLevel value) {
  assert(::EAppControllerSupportLevel_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  controller_support_ = value;
}
inline void CAppOverview::set_controller_support(::EAppControllerSupportLevel value) {
  _internal_set_controller_support(value);
  // @@protoc_insertion_point(field_set:CAppOverview.controller_support)
}

// optional bool vr_supported = 32;
inline bool CAppOverview::_internal_has_vr_supported() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CAppOverview::has_vr_supported() const {
  return _internal_has_vr_supported();
}
inline void CAppOverview::clear_vr_supported() {
  vr_supported_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CAppOverview::_internal_vr_supported() const {
  return vr_supported_;
}
inline bool CAppOverview::vr_supported() const {
  // @@protoc_insertion_point(field_get:CAppOverview.vr_supported)
  return _internal_vr_supported();
}
inline void CAppOverview::_internal_set_vr_supported(bool value) {
  _has_bits_[0] |= 0x00400000u;
  vr_supported_ = value;
}
inline void CAppOverview::set_vr_supported(bool value) {
  _internal_set_vr_supported(value);
  // @@protoc_insertion_point(field_set:CAppOverview.vr_supported)
}

// optional uint32 metacritic_score = 36;
inline bool CAppOverview::_internal_has_metacritic_score() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CAppOverview::has_metacritic_score() const {
  return _internal_has_metacritic_score();
}
inline void CAppOverview::clear_metacritic_score() {
  metacritic_score_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CAppOverview::_internal_metacritic_score() const {
  return metacritic_score_;
}
inline uint32_t CAppOverview::metacritic_score() const {
  // @@protoc_insertion_point(field_get:CAppOverview.metacritic_score)
  return _internal_metacritic_score();
}
inline void CAppOverview::_internal_set_metacritic_score(uint32_t value) {
  _has_bits_[0] |= 0x02000000u;
  metacritic_score_ = value;
}
inline void CAppOverview::set_metacritic_score(uint32_t value) {
  _internal_set_metacritic_score(value);
  // @@protoc_insertion_point(field_set:CAppOverview.metacritic_score)
}

// optional uint64 size_on_disk = 37;
inline bool CAppOverview::_internal_has_size_on_disk() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CAppOverview::has_size_on_disk() const {
  return _internal_has_size_on_disk();
}
inline void CAppOverview::clear_size_on_disk() {
  size_on_disk_ = uint64_t{0u};
  _has_bits_[0] &= ~0x04000000u;
}
inline uint64_t CAppOverview::_internal_size_on_disk() const {
  return size_on_disk_;
}
inline uint64_t CAppOverview::size_on_disk() const {
  // @@protoc_insertion_point(field_get:CAppOverview.size_on_disk)
  return _internal_size_on_disk();
}
inline void CAppOverview::_internal_set_size_on_disk(uint64_t value) {
  _has_bits_[0] |= 0x04000000u;
  size_on_disk_ = value;
}
inline void CAppOverview::set_size_on_disk(uint64_t value) {
  _internal_set_size_on_disk(value);
  // @@protoc_insertion_point(field_set:CAppOverview.size_on_disk)
}

// optional bool third_party_mod = 38;
inline bool CAppOverview::_internal_has_third_party_mod() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CAppOverview::has_third_party_mod() const {
  return _internal_has_third_party_mod();
}
inline void CAppOverview::clear_third_party_mod() {
  third_party_mod_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool CAppOverview::_internal_third_party_mod() const {
  return third_party_mod_;
}
inline bool CAppOverview::third_party_mod() const {
  // @@protoc_insertion_point(field_get:CAppOverview.third_party_mod)
  return _internal_third_party_mod();
}
inline void CAppOverview::_internal_set_third_party_mod(bool value) {
  _has_bits_[0] |= 0x00800000u;
  third_party_mod_ = value;
}
inline void CAppOverview::set_third_party_mod(bool value) {
  _internal_set_third_party_mod(value);
  // @@protoc_insertion_point(field_set:CAppOverview.third_party_mod)
}

// optional string icon_data = 39;
inline bool CAppOverview::_internal_has_icon_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAppOverview::has_icon_data() const {
  return _internal_has_icon_data();
}
inline void CAppOverview::clear_icon_data() {
  icon_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CAppOverview::icon_data() const {
  // @@protoc_insertion_point(field_get:CAppOverview.icon_data)
  return _internal_icon_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_icon_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 icon_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.icon_data)
}
inline std::string* CAppOverview::mutable_icon_data() {
  std::string* _s = _internal_mutable_icon_data();
  // @@protoc_insertion_point(field_mutable:CAppOverview.icon_data)
  return _s;
}
inline const std::string& CAppOverview::_internal_icon_data() const {
  return icon_data_.Get();
}
inline void CAppOverview::_internal_set_icon_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  icon_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_icon_data() {
  _has_bits_[0] |= 0x00000008u;
  return icon_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_icon_data() {
  // @@protoc_insertion_point(field_release:CAppOverview.icon_data)
  if (!_internal_has_icon_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = icon_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_icon_data(std::string* icon_data) {
  if (icon_data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  icon_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.icon_data)
}

// optional string icon_data_format = 40;
inline bool CAppOverview::_internal_has_icon_data_format() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAppOverview::has_icon_data_format() const {
  return _internal_has_icon_data_format();
}
inline void CAppOverview::clear_icon_data_format() {
  icon_data_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CAppOverview::icon_data_format() const {
  // @@protoc_insertion_point(field_get:CAppOverview.icon_data_format)
  return _internal_icon_data_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_icon_data_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 icon_data_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.icon_data_format)
}
inline std::string* CAppOverview::mutable_icon_data_format() {
  std::string* _s = _internal_mutable_icon_data_format();
  // @@protoc_insertion_point(field_mutable:CAppOverview.icon_data_format)
  return _s;
}
inline const std::string& CAppOverview::_internal_icon_data_format() const {
  return icon_data_format_.Get();
}
inline void CAppOverview::_internal_set_icon_data_format(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  icon_data_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_icon_data_format() {
  _has_bits_[0] |= 0x00000010u;
  return icon_data_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_icon_data_format() {
  // @@protoc_insertion_point(field_release:CAppOverview.icon_data_format)
  if (!_internal_has_icon_data_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = icon_data_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_data_format_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_data_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_icon_data_format(std::string* icon_data_format) {
  if (icon_data_format != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  icon_data_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_data_format,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_data_format_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_data_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.icon_data_format)
}

// optional string gameid = 41;
inline bool CAppOverview::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CAppOverview::has_gameid() const {
  return _internal_has_gameid();
}
inline void CAppOverview::clear_gameid() {
  gameid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CAppOverview::gameid() const {
  // @@protoc_insertion_point(field_get:CAppOverview.gameid)
  return _internal_gameid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_gameid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 gameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.gameid)
}
inline std::string* CAppOverview::mutable_gameid() {
  std::string* _s = _internal_mutable_gameid();
  // @@protoc_insertion_point(field_mutable:CAppOverview.gameid)
  return _s;
}
inline const std::string& CAppOverview::_internal_gameid() const {
  return gameid_.Get();
}
inline void CAppOverview::_internal_set_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  gameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_gameid() {
  _has_bits_[0] |= 0x00000020u;
  return gameid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_gameid() {
  // @@protoc_insertion_point(field_release:CAppOverview.gameid)
  if (!_internal_has_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gameid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_gameid(std::string* gameid) {
  if (gameid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gameid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.gameid)
}

// optional string library_capsule_filename = 42;
inline bool CAppOverview::_internal_has_library_capsule_filename() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CAppOverview::has_library_capsule_filename() const {
  return _internal_has_library_capsule_filename();
}
inline void CAppOverview::clear_library_capsule_filename() {
  library_capsule_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CAppOverview::library_capsule_filename() const {
  // @@protoc_insertion_point(field_get:CAppOverview.library_capsule_filename)
  return _internal_library_capsule_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_library_capsule_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 library_capsule_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.library_capsule_filename)
}
inline std::string* CAppOverview::mutable_library_capsule_filename() {
  std::string* _s = _internal_mutable_library_capsule_filename();
  // @@protoc_insertion_point(field_mutable:CAppOverview.library_capsule_filename)
  return _s;
}
inline const std::string& CAppOverview::_internal_library_capsule_filename() const {
  return library_capsule_filename_.Get();
}
inline void CAppOverview::_internal_set_library_capsule_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  library_capsule_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_library_capsule_filename() {
  _has_bits_[0] |= 0x00000040u;
  return library_capsule_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_library_capsule_filename() {
  // @@protoc_insertion_point(field_release:CAppOverview.library_capsule_filename)
  if (!_internal_has_library_capsule_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = library_capsule_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (library_capsule_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    library_capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_library_capsule_filename(std::string* library_capsule_filename) {
  if (library_capsule_filename != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  library_capsule_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_capsule_filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (library_capsule_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    library_capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.library_capsule_filename)
}

// repeated .CAppOverview_PerClientData per_client_data = 43;
inline int CAppOverview::_internal_per_client_data_size() const {
  return per_client_data_.size();
}
inline int CAppOverview::per_client_data_size() const {
  return _internal_per_client_data_size();
}
inline void CAppOverview::clear_per_client_data() {
  per_client_data_.Clear();
}
inline ::CAppOverview_PerClientData* CAppOverview::mutable_per_client_data(int index) {
  // @@protoc_insertion_point(field_mutable:CAppOverview.per_client_data)
  return per_client_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_PerClientData >*
CAppOverview::mutable_per_client_data() {
  // @@protoc_insertion_point(field_mutable_list:CAppOverview.per_client_data)
  return &per_client_data_;
}
inline const ::CAppOverview_PerClientData& CAppOverview::_internal_per_client_data(int index) const {
  return per_client_data_.Get(index);
}
inline const ::CAppOverview_PerClientData& CAppOverview::per_client_data(int index) const {
  // @@protoc_insertion_point(field_get:CAppOverview.per_client_data)
  return _internal_per_client_data(index);
}
inline ::CAppOverview_PerClientData* CAppOverview::_internal_add_per_client_data() {
  return per_client_data_.Add();
}
inline ::CAppOverview_PerClientData* CAppOverview::add_per_client_data() {
  ::CAppOverview_PerClientData* _add = _internal_add_per_client_data();
  // @@protoc_insertion_point(field_add:CAppOverview.per_client_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview_PerClientData >&
CAppOverview::per_client_data() const {
  // @@protoc_insertion_point(field_list:CAppOverview.per_client_data)
  return per_client_data_;
}

// optional uint64 most_available_clientid = 44;
inline bool CAppOverview::_internal_has_most_available_clientid() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CAppOverview::has_most_available_clientid() const {
  return _internal_has_most_available_clientid();
}
inline void CAppOverview::clear_most_available_clientid() {
  most_available_clientid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x08000000u;
}
inline uint64_t CAppOverview::_internal_most_available_clientid() const {
  return most_available_clientid_;
}
inline uint64_t CAppOverview::most_available_clientid() const {
  // @@protoc_insertion_point(field_get:CAppOverview.most_available_clientid)
  return _internal_most_available_clientid();
}
inline void CAppOverview::_internal_set_most_available_clientid(uint64_t value) {
  _has_bits_[0] |= 0x08000000u;
  most_available_clientid_ = value;
}
inline void CAppOverview::set_most_available_clientid(uint64_t value) {
  _internal_set_most_available_clientid(value);
  // @@protoc_insertion_point(field_set:CAppOverview.most_available_clientid)
}

// optional uint64 selected_clientid = 45;
inline bool CAppOverview::_internal_has_selected_clientid() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CAppOverview::has_selected_clientid() const {
  return _internal_has_selected_clientid();
}
inline void CAppOverview::clear_selected_clientid() {
  selected_clientid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x10000000u;
}
inline uint64_t CAppOverview::_internal_selected_clientid() const {
  return selected_clientid_;
}
inline uint64_t CAppOverview::selected_clientid() const {
  // @@protoc_insertion_point(field_get:CAppOverview.selected_clientid)
  return _internal_selected_clientid();
}
inline void CAppOverview::_internal_set_selected_clientid(uint64_t value) {
  _has_bits_[0] |= 0x10000000u;
  selected_clientid_ = value;
}
inline void CAppOverview::set_selected_clientid(uint64_t value) {
  _internal_set_selected_clientid(value);
  // @@protoc_insertion_point(field_set:CAppOverview.selected_clientid)
}

// optional uint32 rt_store_asset_mtime = 46;
inline bool CAppOverview::_internal_has_rt_store_asset_mtime() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_store_asset_mtime() const {
  return _internal_has_rt_store_asset_mtime();
}
inline void CAppOverview::clear_rt_store_asset_mtime() {
  rt_store_asset_mtime_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CAppOverview::_internal_rt_store_asset_mtime() const {
  return rt_store_asset_mtime_;
}
inline uint32_t CAppOverview::rt_store_asset_mtime() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_store_asset_mtime)
  return _internal_rt_store_asset_mtime();
}
inline void CAppOverview::_internal_set_rt_store_asset_mtime(uint32_t value) {
  _has_bits_[0] |= 0x20000000u;
  rt_store_asset_mtime_ = value;
}
inline void CAppOverview::set_rt_store_asset_mtime(uint32_t value) {
  _internal_set_rt_store_asset_mtime(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_store_asset_mtime)
}

// optional uint32 rt_custom_image_mtime = 47;
inline bool CAppOverview::_internal_has_rt_custom_image_mtime() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_custom_image_mtime() const {
  return _internal_has_rt_custom_image_mtime();
}
inline void CAppOverview::clear_rt_custom_image_mtime() {
  rt_custom_image_mtime_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CAppOverview::_internal_rt_custom_image_mtime() const {
  return rt_custom_image_mtime_;
}
inline uint32_t CAppOverview::rt_custom_image_mtime() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_custom_image_mtime)
  return _internal_rt_custom_image_mtime();
}
inline void CAppOverview::_internal_set_rt_custom_image_mtime(uint32_t value) {
  _has_bits_[0] |= 0x40000000u;
  rt_custom_image_mtime_ = value;
}
inline void CAppOverview::set_rt_custom_image_mtime(uint32_t value) {
  _internal_set_rt_custom_image_mtime(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_custom_image_mtime)
}

// optional uint32 optional_parent_app_id = 48;
inline bool CAppOverview::_internal_has_optional_parent_app_id() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CAppOverview::has_optional_parent_app_id() const {
  return _internal_has_optional_parent_app_id();
}
inline void CAppOverview::clear_optional_parent_app_id() {
  optional_parent_app_id_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CAppOverview::_internal_optional_parent_app_id() const {
  return optional_parent_app_id_;
}
inline uint32_t CAppOverview::optional_parent_app_id() const {
  // @@protoc_insertion_point(field_get:CAppOverview.optional_parent_app_id)
  return _internal_optional_parent_app_id();
}
inline void CAppOverview::_internal_set_optional_parent_app_id(uint32_t value) {
  _has_bits_[1] |= 0x00000001u;
  optional_parent_app_id_ = value;
}
inline void CAppOverview::set_optional_parent_app_id(uint32_t value) {
  _internal_set_optional_parent_app_id(value);
  // @@protoc_insertion_point(field_set:CAppOverview.optional_parent_app_id)
}

// optional uint32 owner_account_id = 49;
inline bool CAppOverview::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CAppOverview::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CAppOverview::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline uint32_t CAppOverview::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline uint32_t CAppOverview::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CAppOverview.owner_account_id)
  return _internal_owner_account_id();
}
inline void CAppOverview::_internal_set_owner_account_id(uint32_t value) {
  _has_bits_[1] |= 0x00000002u;
  owner_account_id_ = value;
}
inline void CAppOverview::set_owner_account_id(uint32_t value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CAppOverview.owner_account_id)
}

// optional uint32 review_score_with_bombs = 53;
inline bool CAppOverview::_internal_has_review_score_with_bombs() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CAppOverview::has_review_score_with_bombs() const {
  return _internal_has_review_score_with_bombs();
}
inline void CAppOverview::clear_review_score_with_bombs() {
  review_score_with_bombs_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CAppOverview::_internal_review_score_with_bombs() const {
  return review_score_with_bombs_;
}
inline uint32_t CAppOverview::review_score_with_bombs() const {
  // @@protoc_insertion_point(field_get:CAppOverview.review_score_with_bombs)
  return _internal_review_score_with_bombs();
}
inline void CAppOverview::_internal_set_review_score_with_bombs(uint32_t value) {
  _has_bits_[1] |= 0x00000004u;
  review_score_with_bombs_ = value;
}
inline void CAppOverview::set_review_score_with_bombs(uint32_t value) {
  _internal_set_review_score_with_bombs(value);
  // @@protoc_insertion_point(field_set:CAppOverview.review_score_with_bombs)
}

// optional uint32 review_percentage_with_bombs = 54;
inline bool CAppOverview::_internal_has_review_percentage_with_bombs() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CAppOverview::has_review_percentage_with_bombs() const {
  return _internal_has_review_percentage_with_bombs();
}
inline void CAppOverview::clear_review_percentage_with_bombs() {
  review_percentage_with_bombs_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CAppOverview::_internal_review_percentage_with_bombs() const {
  return review_percentage_with_bombs_;
}
inline uint32_t CAppOverview::review_percentage_with_bombs() const {
  // @@protoc_insertion_point(field_get:CAppOverview.review_percentage_with_bombs)
  return _internal_review_percentage_with_bombs();
}
inline void CAppOverview::_internal_set_review_percentage_with_bombs(uint32_t value) {
  _has_bits_[1] |= 0x00000008u;
  review_percentage_with_bombs_ = value;
}
inline void CAppOverview::set_review_percentage_with_bombs(uint32_t value) {
  _internal_set_review_percentage_with_bombs(value);
  // @@protoc_insertion_point(field_set:CAppOverview.review_percentage_with_bombs)
}

// optional uint32 review_score_without_bombs = 55;
inline bool CAppOverview::_internal_has_review_score_without_bombs() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CAppOverview::has_review_score_without_bombs() const {
  return _internal_has_review_score_without_bombs();
}
inline void CAppOverview::clear_review_score_without_bombs() {
  review_score_without_bombs_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CAppOverview::_internal_review_score_without_bombs() const {
  return review_score_without_bombs_;
}
inline uint32_t CAppOverview::review_score_without_bombs() const {
  // @@protoc_insertion_point(field_get:CAppOverview.review_score_without_bombs)
  return _internal_review_score_without_bombs();
}
inline void CAppOverview::_internal_set_review_score_without_bombs(uint32_t value) {
  _has_bits_[1] |= 0x00000010u;
  review_score_without_bombs_ = value;
}
inline void CAppOverview::set_review_score_without_bombs(uint32_t value) {
  _internal_set_review_score_without_bombs(value);
  // @@protoc_insertion_point(field_set:CAppOverview.review_score_without_bombs)
}

// optional uint32 review_percentage_without_bombs = 56;
inline bool CAppOverview::_internal_has_review_percentage_without_bombs() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CAppOverview::has_review_percentage_without_bombs() const {
  return _internal_has_review_percentage_without_bombs();
}
inline void CAppOverview::clear_review_percentage_without_bombs() {
  review_percentage_without_bombs_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CAppOverview::_internal_review_percentage_without_bombs() const {
  return review_percentage_without_bombs_;
}
inline uint32_t CAppOverview::review_percentage_without_bombs() const {
  // @@protoc_insertion_point(field_get:CAppOverview.review_percentage_without_bombs)
  return _internal_review_percentage_without_bombs();
}
inline void CAppOverview::_internal_set_review_percentage_without_bombs(uint32_t value) {
  _has_bits_[1] |= 0x00000020u;
  review_percentage_without_bombs_ = value;
}
inline void CAppOverview::set_review_percentage_without_bombs(uint32_t value) {
  _internal_set_review_percentage_without_bombs(value);
  // @@protoc_insertion_point(field_set:CAppOverview.review_percentage_without_bombs)
}

// optional string library_id = 57;
inline bool CAppOverview::_internal_has_library_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CAppOverview::has_library_id() const {
  return _internal_has_library_id();
}
inline void CAppOverview::clear_library_id() {
  library_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CAppOverview::library_id() const {
  // @@protoc_insertion_point(field_get:CAppOverview.library_id)
  return _internal_library_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_library_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 library_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.library_id)
}
inline std::string* CAppOverview::mutable_library_id() {
  std::string* _s = _internal_mutable_library_id();
  // @@protoc_insertion_point(field_mutable:CAppOverview.library_id)
  return _s;
}
inline const std::string& CAppOverview::_internal_library_id() const {
  return library_id_.Get();
}
inline void CAppOverview::_internal_set_library_id(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  library_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_library_id() {
  _has_bits_[0] |= 0x00000080u;
  return library_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_library_id() {
  // @@protoc_insertion_point(field_release:CAppOverview.library_id)
  if (!_internal_has_library_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = library_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (library_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    library_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_library_id(std::string* library_id) {
  if (library_id != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  library_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (library_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    library_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.library_id)
}

// optional bool vr_only = 58;
inline bool CAppOverview::_internal_has_vr_only() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CAppOverview::has_vr_only() const {
  return _internal_has_vr_only();
}
inline void CAppOverview::clear_vr_only() {
  vr_only_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool CAppOverview::_internal_vr_only() const {
  return vr_only_;
}
inline bool CAppOverview::vr_only() const {
  // @@protoc_insertion_point(field_get:CAppOverview.vr_only)
  return _internal_vr_only();
}
inline void CAppOverview::_internal_set_vr_only(bool value) {
  _has_bits_[0] |= 0x01000000u;
  vr_only_ = value;
}
inline void CAppOverview::set_vr_only(bool value) {
  _internal_set_vr_only(value);
  // @@protoc_insertion_point(field_set:CAppOverview.vr_only)
}

// optional uint32 mastersub_appid = 59;
inline bool CAppOverview::_internal_has_mastersub_appid() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CAppOverview::has_mastersub_appid() const {
  return _internal_has_mastersub_appid();
}
inline void CAppOverview::clear_mastersub_appid() {
  mastersub_appid_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CAppOverview::_internal_mastersub_appid() const {
  return mastersub_appid_;
}
inline uint32_t CAppOverview::mastersub_appid() const {
  // @@protoc_insertion_point(field_get:CAppOverview.mastersub_appid)
  return _internal_mastersub_appid();
}
inline void CAppOverview::_internal_set_mastersub_appid(uint32_t value) {
  _has_bits_[1] |= 0x00000040u;
  mastersub_appid_ = value;
}
inline void CAppOverview::set_mastersub_appid(uint32_t value) {
  _internal_set_mastersub_appid(value);
  // @@protoc_insertion_point(field_set:CAppOverview.mastersub_appid)
}

// optional string mastersub_includedwith_logo = 60;
inline bool CAppOverview::_internal_has_mastersub_includedwith_logo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CAppOverview::has_mastersub_includedwith_logo() const {
  return _internal_has_mastersub_includedwith_logo();
}
inline void CAppOverview::clear_mastersub_includedwith_logo() {
  mastersub_includedwith_logo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CAppOverview::mastersub_includedwith_logo() const {
  // @@protoc_insertion_point(field_get:CAppOverview.mastersub_includedwith_logo)
  return _internal_mastersub_includedwith_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_mastersub_includedwith_logo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 mastersub_includedwith_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.mastersub_includedwith_logo)
}
inline std::string* CAppOverview::mutable_mastersub_includedwith_logo() {
  std::string* _s = _internal_mutable_mastersub_includedwith_logo();
  // @@protoc_insertion_point(field_mutable:CAppOverview.mastersub_includedwith_logo)
  return _s;
}
inline const std::string& CAppOverview::_internal_mastersub_includedwith_logo() const {
  return mastersub_includedwith_logo_.Get();
}
inline void CAppOverview::_internal_set_mastersub_includedwith_logo(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  mastersub_includedwith_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_mastersub_includedwith_logo() {
  _has_bits_[0] |= 0x00000100u;
  return mastersub_includedwith_logo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_mastersub_includedwith_logo() {
  // @@protoc_insertion_point(field_release:CAppOverview.mastersub_includedwith_logo)
  if (!_internal_has_mastersub_includedwith_logo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = mastersub_includedwith_logo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mastersub_includedwith_logo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mastersub_includedwith_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_mastersub_includedwith_logo(std::string* mastersub_includedwith_logo) {
  if (mastersub_includedwith_logo != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  mastersub_includedwith_logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mastersub_includedwith_logo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mastersub_includedwith_logo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mastersub_includedwith_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.mastersub_includedwith_logo)
}

// optional string site_license_site_name = 62;
inline bool CAppOverview::_internal_has_site_license_site_name() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CAppOverview::has_site_license_site_name() const {
  return _internal_has_site_license_site_name();
}
inline void CAppOverview::clear_site_license_site_name() {
  site_license_site_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& CAppOverview::site_license_site_name() const {
  // @@protoc_insertion_point(field_get:CAppOverview.site_license_site_name)
  return _internal_site_license_site_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_site_license_site_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 site_license_site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.site_license_site_name)
}
inline std::string* CAppOverview::mutable_site_license_site_name() {
  std::string* _s = _internal_mutable_site_license_site_name();
  // @@protoc_insertion_point(field_mutable:CAppOverview.site_license_site_name)
  return _s;
}
inline const std::string& CAppOverview::_internal_site_license_site_name() const {
  return site_license_site_name_.Get();
}
inline void CAppOverview::_internal_set_site_license_site_name(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  site_license_site_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_site_license_site_name() {
  _has_bits_[0] |= 0x00000200u;
  return site_license_site_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_site_license_site_name() {
  // @@protoc_insertion_point(field_release:CAppOverview.site_license_site_name)
  if (!_internal_has_site_license_site_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = site_license_site_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_license_site_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_license_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_site_license_site_name(std::string* site_license_site_name) {
  if (site_license_site_name != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  site_license_site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_license_site_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (site_license_site_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    site_license_site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.site_license_site_name)
}

// optional uint32 shortcut_override_appid = 63;
inline bool CAppOverview::_internal_has_shortcut_override_appid() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CAppOverview::has_shortcut_override_appid() const {
  return _internal_has_shortcut_override_appid();
}
inline void CAppOverview::clear_shortcut_override_appid() {
  shortcut_override_appid_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CAppOverview::_internal_shortcut_override_appid() const {
  return shortcut_override_appid_;
}
inline uint32_t CAppOverview::shortcut_override_appid() const {
  // @@protoc_insertion_point(field_get:CAppOverview.shortcut_override_appid)
  return _internal_shortcut_override_appid();
}
inline void CAppOverview::_internal_set_shortcut_override_appid(uint32_t value) {
  _has_bits_[1] |= 0x00000080u;
  shortcut_override_appid_ = value;
}
inline void CAppOverview::set_shortcut_override_appid(uint32_t value) {
  _internal_set_shortcut_override_appid(value);
  // @@protoc_insertion_point(field_set:CAppOverview.shortcut_override_appid)
}

// optional .ESteamDeckCompatibilityCategory steam_deck_compat_category = 64 [default = k_ESteamDeckCompatibilityCategory_Unknown];
inline bool CAppOverview::_internal_has_steam_deck_compat_category() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CAppOverview::has_steam_deck_compat_category() const {
  return _internal_has_steam_deck_compat_category();
}
inline void CAppOverview::clear_steam_deck_compat_category() {
  steam_deck_compat_category_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::ESteamDeckCompatibilityCategory CAppOverview::_internal_steam_deck_compat_category() const {
  return static_cast< ::ESteamDeckCompatibilityCategory >(steam_deck_compat_category_);
}
inline ::ESteamDeckCompatibilityCategory CAppOverview::steam_deck_compat_category() const {
  // @@protoc_insertion_point(field_get:CAppOverview.steam_deck_compat_category)
  return _internal_steam_deck_compat_category();
}
inline void CAppOverview::_internal_set_steam_deck_compat_category(::ESteamDeckCompatibilityCategory value) {
  assert(::ESteamDeckCompatibilityCategory_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  steam_deck_compat_category_ = value;
}
inline void CAppOverview::set_steam_deck_compat_category(::ESteamDeckCompatibilityCategory value) {
  _internal_set_steam_deck_compat_category(value);
  // @@protoc_insertion_point(field_set:CAppOverview.steam_deck_compat_category)
}

// optional uint32 rt_last_time_locally_played = 65;
inline bool CAppOverview::_internal_has_rt_last_time_locally_played() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_last_time_locally_played() const {
  return _internal_has_rt_last_time_locally_played();
}
inline void CAppOverview::clear_rt_last_time_locally_played() {
  rt_last_time_locally_played_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline uint32_t CAppOverview::_internal_rt_last_time_locally_played() const {
  return rt_last_time_locally_played_;
}
inline uint32_t CAppOverview::rt_last_time_locally_played() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_last_time_locally_played)
  return _internal_rt_last_time_locally_played();
}
inline void CAppOverview::_internal_set_rt_last_time_locally_played(uint32_t value) {
  _has_bits_[1] |= 0x00000200u;
  rt_last_time_locally_played_ = value;
}
inline void CAppOverview::set_rt_last_time_locally_played(uint32_t value) {
  _internal_set_rt_last_time_locally_played(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_last_time_locally_played)
}

// optional uint32 rt_purchased_time = 66;
inline bool CAppOverview::_internal_has_rt_purchased_time() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CAppOverview::has_rt_purchased_time() const {
  return _internal_has_rt_purchased_time();
}
inline void CAppOverview::clear_rt_purchased_time() {
  rt_purchased_time_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CAppOverview::_internal_rt_purchased_time() const {
  return rt_purchased_time_;
}
inline uint32_t CAppOverview::rt_purchased_time() const {
  // @@protoc_insertion_point(field_get:CAppOverview.rt_purchased_time)
  return _internal_rt_purchased_time();
}
inline void CAppOverview::_internal_set_rt_purchased_time(uint32_t value) {
  _has_bits_[0] |= 0x80000000u;
  rt_purchased_time_ = value;
}
inline void CAppOverview::set_rt_purchased_time(uint32_t value) {
  _internal_set_rt_purchased_time(value);
  // @@protoc_insertion_point(field_set:CAppOverview.rt_purchased_time)
}

// optional string header_filename = 67;
inline bool CAppOverview::_internal_has_header_filename() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CAppOverview::has_header_filename() const {
  return _internal_has_header_filename();
}
inline void CAppOverview::clear_header_filename() {
  header_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& CAppOverview::header_filename() const {
  // @@protoc_insertion_point(field_get:CAppOverview.header_filename)
  return _internal_header_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAppOverview::set_header_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 header_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAppOverview.header_filename)
}
inline std::string* CAppOverview::mutable_header_filename() {
  std::string* _s = _internal_mutable_header_filename();
  // @@protoc_insertion_point(field_mutable:CAppOverview.header_filename)
  return _s;
}
inline const std::string& CAppOverview::_internal_header_filename() const {
  return header_filename_.Get();
}
inline void CAppOverview::_internal_set_header_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  header_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAppOverview::_internal_mutable_header_filename() {
  _has_bits_[0] |= 0x00000400u;
  return header_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAppOverview::release_header_filename() {
  // @@protoc_insertion_point(field_release:CAppOverview.header_filename)
  if (!_internal_has_header_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = header_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CAppOverview::set_allocated_header_filename(std::string* header_filename) {
  if (header_filename != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  header_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CAppOverview.header_filename)
}

// -------------------------------------------------------------------

// CAppOverview_Change

// repeated .CAppOverview app_overview = 1;
inline int CAppOverview_Change::_internal_app_overview_size() const {
  return app_overview_.size();
}
inline int CAppOverview_Change::app_overview_size() const {
  return _internal_app_overview_size();
}
inline void CAppOverview_Change::clear_app_overview() {
  app_overview_.Clear();
}
inline ::CAppOverview* CAppOverview_Change::mutable_app_overview(int index) {
  // @@protoc_insertion_point(field_mutable:CAppOverview_Change.app_overview)
  return app_overview_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview >*
CAppOverview_Change::mutable_app_overview() {
  // @@protoc_insertion_point(field_mutable_list:CAppOverview_Change.app_overview)
  return &app_overview_;
}
inline const ::CAppOverview& CAppOverview_Change::_internal_app_overview(int index) const {
  return app_overview_.Get(index);
}
inline const ::CAppOverview& CAppOverview_Change::app_overview(int index) const {
  // @@protoc_insertion_point(field_get:CAppOverview_Change.app_overview)
  return _internal_app_overview(index);
}
inline ::CAppOverview* CAppOverview_Change::_internal_add_app_overview() {
  return app_overview_.Add();
}
inline ::CAppOverview* CAppOverview_Change::add_app_overview() {
  ::CAppOverview* _add = _internal_add_app_overview();
  // @@protoc_insertion_point(field_add:CAppOverview_Change.app_overview)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppOverview >&
CAppOverview_Change::app_overview() const {
  // @@protoc_insertion_point(field_list:CAppOverview_Change.app_overview)
  return app_overview_;
}

// repeated uint32 removed_appid = 2;
inline int CAppOverview_Change::_internal_removed_appid_size() const {
  return removed_appid_.size();
}
inline int CAppOverview_Change::removed_appid_size() const {
  return _internal_removed_appid_size();
}
inline void CAppOverview_Change::clear_removed_appid() {
  removed_appid_.Clear();
}
inline uint32_t CAppOverview_Change::_internal_removed_appid(int index) const {
  return removed_appid_.Get(index);
}
inline uint32_t CAppOverview_Change::removed_appid(int index) const {
  // @@protoc_insertion_point(field_get:CAppOverview_Change.removed_appid)
  return _internal_removed_appid(index);
}
inline void CAppOverview_Change::set_removed_appid(int index, uint32_t value) {
  removed_appid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CAppOverview_Change.removed_appid)
}
inline void CAppOverview_Change::_internal_add_removed_appid(uint32_t value) {
  removed_appid_.Add(value);
}
inline void CAppOverview_Change::add_removed_appid(uint32_t value) {
  _internal_add_removed_appid(value);
  // @@protoc_insertion_point(field_add:CAppOverview_Change.removed_appid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CAppOverview_Change::_internal_removed_appid() const {
  return removed_appid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CAppOverview_Change::removed_appid() const {
  // @@protoc_insertion_point(field_list:CAppOverview_Change.removed_appid)
  return _internal_removed_appid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CAppOverview_Change::_internal_mutable_removed_appid() {
  return &removed_appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CAppOverview_Change::mutable_removed_appid() {
  // @@protoc_insertion_point(field_mutable_list:CAppOverview_Change.removed_appid)
  return _internal_mutable_removed_appid();
}

// optional bool full_update = 3;
inline bool CAppOverview_Change::_internal_has_full_update() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAppOverview_Change::has_full_update() const {
  return _internal_has_full_update();
}
inline void CAppOverview_Change::clear_full_update() {
  full_update_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CAppOverview_Change::_internal_full_update() const {
  return full_update_;
}
inline bool CAppOverview_Change::full_update() const {
  // @@protoc_insertion_point(field_get:CAppOverview_Change.full_update)
  return _internal_full_update();
}
inline void CAppOverview_Change::_internal_set_full_update(bool value) {
  _has_bits_[0] |= 0x00000001u;
  full_update_ = value;
}
inline void CAppOverview_Change::set_full_update(bool value) {
  _internal_set_full_update(value);
  // @@protoc_insertion_point(field_set:CAppOverview_Change.full_update)
}

// optional bool update_complete = 4;
inline bool CAppOverview_Change::_internal_has_update_complete() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAppOverview_Change::has_update_complete() const {
  return _internal_has_update_complete();
}
inline void CAppOverview_Change::clear_update_complete() {
  update_complete_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CAppOverview_Change::_internal_update_complete() const {
  return update_complete_;
}
inline bool CAppOverview_Change::update_complete() const {
  // @@protoc_insertion_point(field_get:CAppOverview_Change.update_complete)
  return _internal_update_complete();
}
inline void CAppOverview_Change::_internal_set_update_complete(bool value) {
  _has_bits_[0] |= 0x00000002u;
  update_complete_ = value;
}
inline void CAppOverview_Change::set_update_complete(bool value) {
  _internal_set_update_complete(value);
  // @@protoc_insertion_point(field_set:CAppOverview_Change.update_complete)
}

// -------------------------------------------------------------------

// CAppBootstrapData

// optional uint32 appid = 1;
inline bool CAppBootstrapData::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAppBootstrapData::has_appid() const {
  return _internal_has_appid();
}
inline void CAppBootstrapData::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CAppBootstrapData::_internal_appid() const {
  return appid_;
}
inline uint32_t CAppBootstrapData::appid() const {
  // @@protoc_insertion_point(field_get:CAppBootstrapData.appid)
  return _internal_appid();
}
inline void CAppBootstrapData::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CAppBootstrapData::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CAppBootstrapData.appid)
}

// optional bool hidden = 2;
inline bool CAppBootstrapData::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAppBootstrapData::has_hidden() const {
  return _internal_has_hidden();
}
inline void CAppBootstrapData::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CAppBootstrapData::_internal_hidden() const {
  return hidden_;
}
inline bool CAppBootstrapData::hidden() const {
  // @@protoc_insertion_point(field_get:CAppBootstrapData.hidden)
  return _internal_hidden();
}
inline void CAppBootstrapData::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hidden_ = value;
}
inline void CAppBootstrapData::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:CAppBootstrapData.hidden)
}

// repeated string user_tag = 3;
inline int CAppBootstrapData::_internal_user_tag_size() const {
  return user_tag_.size();
}
inline int CAppBootstrapData::user_tag_size() const {
  return _internal_user_tag_size();
}
inline void CAppBootstrapData::clear_user_tag() {
  user_tag_.Clear();
}
inline std::string* CAppBootstrapData::add_user_tag() {
  std::string* _s = _internal_add_user_tag();
  // @@protoc_insertion_point(field_add_mutable:CAppBootstrapData.user_tag)
  return _s;
}
inline const std::string& CAppBootstrapData::_internal_user_tag(int index) const {
  return user_tag_.Get(index);
}
inline const std::string& CAppBootstrapData::user_tag(int index) const {
  // @@protoc_insertion_point(field_get:CAppBootstrapData.user_tag)
  return _internal_user_tag(index);
}
inline std::string* CAppBootstrapData::mutable_user_tag(int index) {
  // @@protoc_insertion_point(field_mutable:CAppBootstrapData.user_tag)
  return user_tag_.Mutable(index);
}
inline void CAppBootstrapData::set_user_tag(int index, const std::string& value) {
  user_tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CAppBootstrapData.user_tag)
}
inline void CAppBootstrapData::set_user_tag(int index, std::string&& value) {
  user_tag_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CAppBootstrapData.user_tag)
}
inline void CAppBootstrapData::set_user_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CAppBootstrapData.user_tag)
}
inline void CAppBootstrapData::set_user_tag(int index, const char* value, size_t size) {
  user_tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CAppBootstrapData.user_tag)
}
inline std::string* CAppBootstrapData::_internal_add_user_tag() {
  return user_tag_.Add();
}
inline void CAppBootstrapData::add_user_tag(const std::string& value) {
  user_tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CAppBootstrapData.user_tag)
}
inline void CAppBootstrapData::add_user_tag(std::string&& value) {
  user_tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CAppBootstrapData.user_tag)
}
inline void CAppBootstrapData::add_user_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CAppBootstrapData.user_tag)
}
inline void CAppBootstrapData::add_user_tag(const char* value, size_t size) {
  user_tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CAppBootstrapData.user_tag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CAppBootstrapData::user_tag() const {
  // @@protoc_insertion_point(field_list:CAppBootstrapData.user_tag)
  return user_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CAppBootstrapData::mutable_user_tag() {
  // @@protoc_insertion_point(field_mutable_list:CAppBootstrapData.user_tag)
  return &user_tag_;
}

// -------------------------------------------------------------------

// CLibraryBootstrapData

// repeated .CAppBootstrapData app_data = 1;
inline int CLibraryBootstrapData::_internal_app_data_size() const {
  return app_data_.size();
}
inline int CLibraryBootstrapData::app_data_size() const {
  return _internal_app_data_size();
}
inline void CLibraryBootstrapData::clear_app_data() {
  app_data_.Clear();
}
inline ::CAppBootstrapData* CLibraryBootstrapData::mutable_app_data(int index) {
  // @@protoc_insertion_point(field_mutable:CLibraryBootstrapData.app_data)
  return app_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppBootstrapData >*
CLibraryBootstrapData::mutable_app_data() {
  // @@protoc_insertion_point(field_mutable_list:CLibraryBootstrapData.app_data)
  return &app_data_;
}
inline const ::CAppBootstrapData& CLibraryBootstrapData::_internal_app_data(int index) const {
  return app_data_.Get(index);
}
inline const ::CAppBootstrapData& CLibraryBootstrapData::app_data(int index) const {
  // @@protoc_insertion_point(field_get:CLibraryBootstrapData.app_data)
  return _internal_app_data(index);
}
inline ::CAppBootstrapData* CLibraryBootstrapData::_internal_add_app_data() {
  return app_data_.Add();
}
inline ::CAppBootstrapData* CLibraryBootstrapData::add_app_data() {
  ::CAppBootstrapData* _add = _internal_add_app_data();
  // @@protoc_insertion_point(field_add:CLibraryBootstrapData.app_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CAppBootstrapData >&
CLibraryBootstrapData::app_data() const {
  // @@protoc_insertion_point(field_list:CLibraryBootstrapData.app_data)
  return app_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EDisplayStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDisplayStatus>() {
  return ::EDisplayStatus_descriptor();
}
template <> struct is_proto_enum< ::EAppCloudStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EAppCloudStatus>() {
  return ::EAppCloudStatus_descriptor();
}
template <> struct is_proto_enum< ::EProtoAppType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProtoAppType>() {
  return ::EProtoAppType_descriptor();
}
template <> struct is_proto_enum< ::EAppAssociationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EAppAssociationType>() {
  return ::EAppAssociationType_descriptor();
}
template <> struct is_proto_enum< ::EAppControllerSupportLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EAppControllerSupportLevel>() {
  return ::EAppControllerSupportLevel_descriptor();
}
template <> struct is_proto_enum< ::EAppGamepadGyroTrackpadSupportLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EAppGamepadGyroTrackpadSupportLevel>() {
  return ::EAppGamepadGyroTrackpadSupportLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fappoverview_2eproto
