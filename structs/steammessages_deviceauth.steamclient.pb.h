// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_deviceauth.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fdeviceauth_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fdeviceauth_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fdeviceauth_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fdeviceauth_2esteamclient_2eproto;
class CDeviceAuth_AcceptAuthorizationRequest_Request;
struct CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal;
extern CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal _CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_;
class CDeviceAuth_AcceptAuthorizationRequest_Response;
struct CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal;
extern CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal _CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_;
class CDeviceAuth_AddAuthorizedBorrowers_Request;
struct CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal;
extern CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal _CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_AddAuthorizedBorrowers_Response;
struct CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal;
extern CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal _CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_AuthorizeRemoteDevice_Request;
struct CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal;
extern CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal _CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_;
class CDeviceAuth_AuthorizeRemoteDevice_Response;
struct CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal;
extern CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal _CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_;
class CDeviceAuth_DeauthorizeRemoteDevice_Request;
struct CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal;
extern CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal _CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_;
class CDeviceAuth_DeauthorizeRemoteDevice_Response;
struct CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal;
extern CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal _CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_Request;
struct CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal;
extern CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal _CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_Response;
struct CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal;
extern CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal _CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender;
struct CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal;
extern CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal _CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_Request;
struct CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal;
extern CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal _CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_Response;
struct CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal;
extern CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal _CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower;
struct CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal;
extern CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal _CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_Request;
struct CDeviceAuth_GetBorrowerPlayHistory_RequestDefaultTypeInternal;
extern CDeviceAuth_GetBorrowerPlayHistory_RequestDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Request_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_Response;
struct CDeviceAuth_GetBorrowerPlayHistory_ResponseDefaultTypeInternal;
extern CDeviceAuth_GetBorrowerPlayHistory_ResponseDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Response_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory;
struct CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistoryDefaultTypeInternal;
extern CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistoryDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_default_instance_;
class CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory;
struct CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistoryDefaultTypeInternal;
extern CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistoryDefaultTypeInternal _CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_Request;
struct CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal;
extern CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal _CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_Response;
struct CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal;
extern CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal _CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame;
struct CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal;
extern CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal _CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_;
class CDeviceAuth_GetOwnAuthorizedDevices_Request;
struct CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal;
extern CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal _CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_;
class CDeviceAuth_GetOwnAuthorizedDevices_Response;
struct CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal;
extern CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal _CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_;
class CDeviceAuth_GetOwnAuthorizedDevices_Response_Device;
struct CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal;
extern CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal _CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_Request;
struct CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal;
extern CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal _CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_Response;
struct CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal;
extern CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal _CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_Response_Device;
struct CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal;
extern CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal _CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_;
class CDeviceAuth_RemoveAuthorizedBorrowers_Request;
struct CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal;
extern CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal _CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_RemoveAuthorizedBorrowers_Response;
struct CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal;
extern CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal _CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDeviceAuth_AcceptAuthorizationRequest_Request* Arena::CreateMaybeMessage<::CDeviceAuth_AcceptAuthorizationRequest_Request>(Arena*);
template<> ::CDeviceAuth_AcceptAuthorizationRequest_Response* Arena::CreateMaybeMessage<::CDeviceAuth_AcceptAuthorizationRequest_Response>(Arena*);
template<> ::CDeviceAuth_AddAuthorizedBorrowers_Request* Arena::CreateMaybeMessage<::CDeviceAuth_AddAuthorizedBorrowers_Request>(Arena*);
template<> ::CDeviceAuth_AddAuthorizedBorrowers_Response* Arena::CreateMaybeMessage<::CDeviceAuth_AddAuthorizedBorrowers_Response>(Arena*);
template<> ::CDeviceAuth_AuthorizeRemoteDevice_Request* Arena::CreateMaybeMessage<::CDeviceAuth_AuthorizeRemoteDevice_Request>(Arena*);
template<> ::CDeviceAuth_AuthorizeRemoteDevice_Response* Arena::CreateMaybeMessage<::CDeviceAuth_AuthorizeRemoteDevice_Response>(Arena*);
template<> ::CDeviceAuth_DeauthorizeRemoteDevice_Request* Arena::CreateMaybeMessage<::CDeviceAuth_DeauthorizeRemoteDevice_Request>(Arena*);
template<> ::CDeviceAuth_DeauthorizeRemoteDevice_Response* Arena::CreateMaybeMessage<::CDeviceAuth_DeauthorizeRemoteDevice_Response>(Arena*);
template<> ::CDeviceAuth_GetAuthorizedAsBorrower_Request* Arena::CreateMaybeMessage<::CDeviceAuth_GetAuthorizedAsBorrower_Request>(Arena*);
template<> ::CDeviceAuth_GetAuthorizedAsBorrower_Response* Arena::CreateMaybeMessage<::CDeviceAuth_GetAuthorizedAsBorrower_Response>(Arena*);
template<> ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* Arena::CreateMaybeMessage<::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender>(Arena*);
template<> ::CDeviceAuth_GetAuthorizedBorrowers_Request* Arena::CreateMaybeMessage<::CDeviceAuth_GetAuthorizedBorrowers_Request>(Arena*);
template<> ::CDeviceAuth_GetAuthorizedBorrowers_Response* Arena::CreateMaybeMessage<::CDeviceAuth_GetAuthorizedBorrowers_Response>(Arena*);
template<> ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* Arena::CreateMaybeMessage<::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower>(Arena*);
template<> ::CDeviceAuth_GetBorrowerPlayHistory_Request* Arena::CreateMaybeMessage<::CDeviceAuth_GetBorrowerPlayHistory_Request>(Arena*);
template<> ::CDeviceAuth_GetBorrowerPlayHistory_Response* Arena::CreateMaybeMessage<::CDeviceAuth_GetBorrowerPlayHistory_Response>(Arena*);
template<> ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* Arena::CreateMaybeMessage<::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory>(Arena*);
template<> ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* Arena::CreateMaybeMessage<::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory>(Arena*);
template<> ::CDeviceAuth_GetExcludedGamesInLibrary_Request* Arena::CreateMaybeMessage<::CDeviceAuth_GetExcludedGamesInLibrary_Request>(Arena*);
template<> ::CDeviceAuth_GetExcludedGamesInLibrary_Response* Arena::CreateMaybeMessage<::CDeviceAuth_GetExcludedGamesInLibrary_Response>(Arena*);
template<> ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* Arena::CreateMaybeMessage<::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame>(Arena*);
template<> ::CDeviceAuth_GetOwnAuthorizedDevices_Request* Arena::CreateMaybeMessage<::CDeviceAuth_GetOwnAuthorizedDevices_Request>(Arena*);
template<> ::CDeviceAuth_GetOwnAuthorizedDevices_Response* Arena::CreateMaybeMessage<::CDeviceAuth_GetOwnAuthorizedDevices_Response>(Arena*);
template<> ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* Arena::CreateMaybeMessage<::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device>(Arena*);
template<> ::CDeviceAuth_GetUsedAuthorizedDevices_Request* Arena::CreateMaybeMessage<::CDeviceAuth_GetUsedAuthorizedDevices_Request>(Arena*);
template<> ::CDeviceAuth_GetUsedAuthorizedDevices_Response* Arena::CreateMaybeMessage<::CDeviceAuth_GetUsedAuthorizedDevices_Response>(Arena*);
template<> ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* Arena::CreateMaybeMessage<::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device>(Arena*);
template<> ::CDeviceAuth_RemoveAuthorizedBorrowers_Request* Arena::CreateMaybeMessage<::CDeviceAuth_RemoveAuthorizedBorrowers_Request>(Arena*);
template<> ::CDeviceAuth_RemoveAuthorizedBorrowers_Response* Arena::CreateMaybeMessage<::CDeviceAuth_RemoveAuthorizedBorrowers_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CDeviceAuth_GetOwnAuthorizedDevices_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetOwnAuthorizedDevices_Request) */ {
 public:
  inline CDeviceAuth_GetOwnAuthorizedDevices_Request() : CDeviceAuth_GetOwnAuthorizedDevices_Request(nullptr) {}
  ~CDeviceAuth_GetOwnAuthorizedDevices_Request() override;
  explicit constexpr CDeviceAuth_GetOwnAuthorizedDevices_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetOwnAuthorizedDevices_Request(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from);
  CDeviceAuth_GetOwnAuthorizedDevices_Request(CDeviceAuth_GetOwnAuthorizedDevices_Request&& from) noexcept
    : CDeviceAuth_GetOwnAuthorizedDevices_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetOwnAuthorizedDevices_Request& operator=(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetOwnAuthorizedDevices_Request& operator=(CDeviceAuth_GetOwnAuthorizedDevices_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetOwnAuthorizedDevices_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetOwnAuthorizedDevices_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetOwnAuthorizedDevices_Request*>(
               &_CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDeviceAuth_GetOwnAuthorizedDevices_Request& a, CDeviceAuth_GetOwnAuthorizedDevices_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetOwnAuthorizedDevices_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetOwnAuthorizedDevices_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetOwnAuthorizedDevices_Request";
  }
  protected:
  explicit CDeviceAuth_GetOwnAuthorizedDevices_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kIncludeCanceledFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool include_canceled = 2;
  bool has_include_canceled() const;
  private:
  bool _internal_has_include_canceled() const;
  public:
  void clear_include_canceled();
  bool include_canceled() const;
  void set_include_canceled(bool value);
  private:
  bool _internal_include_canceled() const;
  void _internal_set_include_canceled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetOwnAuthorizedDevices_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  bool include_canceled_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetOwnAuthorizedDevices_Response_Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device) */ {
 public:
  inline CDeviceAuth_GetOwnAuthorizedDevices_Response_Device() : CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(nullptr) {}
  ~CDeviceAuth_GetOwnAuthorizedDevices_Response_Device() override;
  explicit constexpr CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from);
  CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device&& from) noexcept
    : CDeviceAuth_GetOwnAuthorizedDevices_Response_Device() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& operator=(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& operator=(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device*>(
               &_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& a, CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetOwnAuthorizedDevices_Response_Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetOwnAuthorizedDevices_Response.Device";
  }
  protected:
  explicit CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 2,
    kAuthDeviceTokenFieldNumber = 1,
    kLastTimeUsedFieldNumber = 5,
    kIsPendingFieldNumber = 3,
    kIsCanceledFieldNumber = 4,
    kIsLimitedFieldNumber = 8,
    kLastBorrowerIdFieldNumber = 6,
    kLastAppPlayedFieldNumber = 7,
  };
  // optional string device_name = 2;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional fixed64 auth_device_token = 1;
  bool has_auth_device_token() const;
  private:
  bool _internal_has_auth_device_token() const;
  public:
  void clear_auth_device_token();
  uint64_t auth_device_token() const;
  void set_auth_device_token(uint64_t value);
  private:
  uint64_t _internal_auth_device_token() const;
  void _internal_set_auth_device_token(uint64_t value);
  public:

  // optional uint32 last_time_used = 5;
  bool has_last_time_used() const;
  private:
  bool _internal_has_last_time_used() const;
  public:
  void clear_last_time_used();
  uint32_t last_time_used() const;
  void set_last_time_used(uint32_t value);
  private:
  uint32_t _internal_last_time_used() const;
  void _internal_set_last_time_used(uint32_t value);
  public:

  // optional bool is_pending = 3;
  bool has_is_pending() const;
  private:
  bool _internal_has_is_pending() const;
  public:
  void clear_is_pending();
  bool is_pending() const;
  void set_is_pending(bool value);
  private:
  bool _internal_is_pending() const;
  void _internal_set_is_pending(bool value);
  public:

  // optional bool is_canceled = 4;
  bool has_is_canceled() const;
  private:
  bool _internal_has_is_canceled() const;
  public:
  void clear_is_canceled();
  bool is_canceled() const;
  void set_is_canceled(bool value);
  private:
  bool _internal_is_canceled() const;
  void _internal_set_is_canceled(bool value);
  public:

  // optional bool is_limited = 8;
  bool has_is_limited() const;
  private:
  bool _internal_has_is_limited() const;
  public:
  void clear_is_limited();
  bool is_limited() const;
  void set_is_limited(bool value);
  private:
  bool _internal_is_limited() const;
  void _internal_set_is_limited(bool value);
  public:

  // optional fixed64 last_borrower_id = 6;
  bool has_last_borrower_id() const;
  private:
  bool _internal_has_last_borrower_id() const;
  public:
  void clear_last_borrower_id();
  uint64_t last_borrower_id() const;
  void set_last_borrower_id(uint64_t value);
  private:
  uint64_t _internal_last_borrower_id() const;
  void _internal_set_last_borrower_id(uint64_t value);
  public:

  // optional uint32 last_app_played = 7;
  bool has_last_app_played() const;
  private:
  bool _internal_has_last_app_played() const;
  public:
  void clear_last_app_played();
  uint32_t last_app_played() const;
  void set_last_app_played(uint32_t value);
  private:
  uint32_t _internal_last_app_played() const;
  void _internal_set_last_app_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  uint64_t auth_device_token_;
  uint32_t last_time_used_;
  bool is_pending_;
  bool is_canceled_;
  bool is_limited_;
  uint64_t last_borrower_id_;
  uint32_t last_app_played_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetOwnAuthorizedDevices_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetOwnAuthorizedDevices_Response) */ {
 public:
  inline CDeviceAuth_GetOwnAuthorizedDevices_Response() : CDeviceAuth_GetOwnAuthorizedDevices_Response(nullptr) {}
  ~CDeviceAuth_GetOwnAuthorizedDevices_Response() override;
  explicit constexpr CDeviceAuth_GetOwnAuthorizedDevices_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetOwnAuthorizedDevices_Response(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from);
  CDeviceAuth_GetOwnAuthorizedDevices_Response(CDeviceAuth_GetOwnAuthorizedDevices_Response&& from) noexcept
    : CDeviceAuth_GetOwnAuthorizedDevices_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetOwnAuthorizedDevices_Response& operator=(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetOwnAuthorizedDevices_Response& operator=(CDeviceAuth_GetOwnAuthorizedDevices_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetOwnAuthorizedDevices_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetOwnAuthorizedDevices_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetOwnAuthorizedDevices_Response*>(
               &_CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CDeviceAuth_GetOwnAuthorizedDevices_Response& a, CDeviceAuth_GetOwnAuthorizedDevices_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetOwnAuthorizedDevices_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetOwnAuthorizedDevices_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetOwnAuthorizedDevices_Response";
  }
  protected:
  explicit CDeviceAuth_GetOwnAuthorizedDevices_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDeviceAuth_GetOwnAuthorizedDevices_Response_Device Device;

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >*
      mutable_devices();
  private:
  const ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& _internal_devices(int index) const;
  ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* _internal_add_devices();
  public:
  const ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& devices(int index) const;
  ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >&
      devices() const;

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetOwnAuthorizedDevices_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_AcceptAuthorizationRequest_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_AcceptAuthorizationRequest_Request) */ {
 public:
  inline CDeviceAuth_AcceptAuthorizationRequest_Request() : CDeviceAuth_AcceptAuthorizationRequest_Request(nullptr) {}
  ~CDeviceAuth_AcceptAuthorizationRequest_Request() override;
  explicit constexpr CDeviceAuth_AcceptAuthorizationRequest_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_AcceptAuthorizationRequest_Request(const CDeviceAuth_AcceptAuthorizationRequest_Request& from);
  CDeviceAuth_AcceptAuthorizationRequest_Request(CDeviceAuth_AcceptAuthorizationRequest_Request&& from) noexcept
    : CDeviceAuth_AcceptAuthorizationRequest_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_AcceptAuthorizationRequest_Request& operator=(const CDeviceAuth_AcceptAuthorizationRequest_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_AcceptAuthorizationRequest_Request& operator=(CDeviceAuth_AcceptAuthorizationRequest_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_AcceptAuthorizationRequest_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_AcceptAuthorizationRequest_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_AcceptAuthorizationRequest_Request*>(
               &_CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CDeviceAuth_AcceptAuthorizationRequest_Request& a, CDeviceAuth_AcceptAuthorizationRequest_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_AcceptAuthorizationRequest_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_AcceptAuthorizationRequest_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_AcceptAuthorizationRequest_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_AcceptAuthorizationRequest_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_AcceptAuthorizationRequest_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_AcceptAuthorizationRequest_Request";
  }
  protected:
  explicit CDeviceAuth_AcceptAuthorizationRequest_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAuthDeviceTokenFieldNumber = 2,
    kAuthCodeFieldNumber = 3,
    kFromSteamidFieldNumber = 4,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 auth_device_token = 2;
  bool has_auth_device_token() const;
  private:
  bool _internal_has_auth_device_token() const;
  public:
  void clear_auth_device_token();
  uint64_t auth_device_token() const;
  void set_auth_device_token(uint64_t value);
  private:
  uint64_t _internal_auth_device_token() const;
  void _internal_set_auth_device_token(uint64_t value);
  public:

  // optional fixed64 auth_code = 3;
  bool has_auth_code() const;
  private:
  bool _internal_has_auth_code() const;
  public:
  void clear_auth_code();
  uint64_t auth_code() const;
  void set_auth_code(uint64_t value);
  private:
  uint64_t _internal_auth_code() const;
  void _internal_set_auth_code(uint64_t value);
  public:

  // optional fixed64 from_steamid = 4;
  bool has_from_steamid() const;
  private:
  bool _internal_has_from_steamid() const;
  public:
  void clear_from_steamid();
  uint64_t from_steamid() const;
  void set_from_steamid(uint64_t value);
  private:
  uint64_t _internal_from_steamid() const;
  void _internal_set_from_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_AcceptAuthorizationRequest_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t auth_device_token_;
  uint64_t auth_code_;
  uint64_t from_steamid_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_AcceptAuthorizationRequest_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDeviceAuth_AcceptAuthorizationRequest_Response) */ {
 public:
  inline CDeviceAuth_AcceptAuthorizationRequest_Response() : CDeviceAuth_AcceptAuthorizationRequest_Response(nullptr) {}
  explicit constexpr CDeviceAuth_AcceptAuthorizationRequest_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_AcceptAuthorizationRequest_Response(const CDeviceAuth_AcceptAuthorizationRequest_Response& from);
  CDeviceAuth_AcceptAuthorizationRequest_Response(CDeviceAuth_AcceptAuthorizationRequest_Response&& from) noexcept
    : CDeviceAuth_AcceptAuthorizationRequest_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_AcceptAuthorizationRequest_Response& operator=(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_AcceptAuthorizationRequest_Response& operator=(CDeviceAuth_AcceptAuthorizationRequest_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_AcceptAuthorizationRequest_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_AcceptAuthorizationRequest_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_AcceptAuthorizationRequest_Response*>(
               &_CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CDeviceAuth_AcceptAuthorizationRequest_Response& a, CDeviceAuth_AcceptAuthorizationRequest_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_AcceptAuthorizationRequest_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_AcceptAuthorizationRequest_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_AcceptAuthorizationRequest_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_AcceptAuthorizationRequest_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_AcceptAuthorizationRequest_Response";
  }
  protected:
  explicit CDeviceAuth_AcceptAuthorizationRequest_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDeviceAuth_AcceptAuthorizationRequest_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_AuthorizeRemoteDevice_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_AuthorizeRemoteDevice_Request) */ {
 public:
  inline CDeviceAuth_AuthorizeRemoteDevice_Request() : CDeviceAuth_AuthorizeRemoteDevice_Request(nullptr) {}
  ~CDeviceAuth_AuthorizeRemoteDevice_Request() override;
  explicit constexpr CDeviceAuth_AuthorizeRemoteDevice_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_AuthorizeRemoteDevice_Request(const CDeviceAuth_AuthorizeRemoteDevice_Request& from);
  CDeviceAuth_AuthorizeRemoteDevice_Request(CDeviceAuth_AuthorizeRemoteDevice_Request&& from) noexcept
    : CDeviceAuth_AuthorizeRemoteDevice_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_AuthorizeRemoteDevice_Request& operator=(const CDeviceAuth_AuthorizeRemoteDevice_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_AuthorizeRemoteDevice_Request& operator=(CDeviceAuth_AuthorizeRemoteDevice_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_AuthorizeRemoteDevice_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_AuthorizeRemoteDevice_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_AuthorizeRemoteDevice_Request*>(
               &_CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CDeviceAuth_AuthorizeRemoteDevice_Request& a, CDeviceAuth_AuthorizeRemoteDevice_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_AuthorizeRemoteDevice_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_AuthorizeRemoteDevice_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_AuthorizeRemoteDevice_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_AuthorizeRemoteDevice_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_AuthorizeRemoteDevice_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_AuthorizeRemoteDevice_Request";
  }
  protected:
  explicit CDeviceAuth_AuthorizeRemoteDevice_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAuthDeviceTokenFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 auth_device_token = 2;
  bool has_auth_device_token() const;
  private:
  bool _internal_has_auth_device_token() const;
  public:
  void clear_auth_device_token();
  uint64_t auth_device_token() const;
  void set_auth_device_token(uint64_t value);
  private:
  uint64_t _internal_auth_device_token() const;
  void _internal_set_auth_device_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_AuthorizeRemoteDevice_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t auth_device_token_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_AuthorizeRemoteDevice_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDeviceAuth_AuthorizeRemoteDevice_Response) */ {
 public:
  inline CDeviceAuth_AuthorizeRemoteDevice_Response() : CDeviceAuth_AuthorizeRemoteDevice_Response(nullptr) {}
  explicit constexpr CDeviceAuth_AuthorizeRemoteDevice_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_AuthorizeRemoteDevice_Response(const CDeviceAuth_AuthorizeRemoteDevice_Response& from);
  CDeviceAuth_AuthorizeRemoteDevice_Response(CDeviceAuth_AuthorizeRemoteDevice_Response&& from) noexcept
    : CDeviceAuth_AuthorizeRemoteDevice_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_AuthorizeRemoteDevice_Response& operator=(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_AuthorizeRemoteDevice_Response& operator=(CDeviceAuth_AuthorizeRemoteDevice_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_AuthorizeRemoteDevice_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_AuthorizeRemoteDevice_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_AuthorizeRemoteDevice_Response*>(
               &_CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CDeviceAuth_AuthorizeRemoteDevice_Response& a, CDeviceAuth_AuthorizeRemoteDevice_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_AuthorizeRemoteDevice_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_AuthorizeRemoteDevice_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_AuthorizeRemoteDevice_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_AuthorizeRemoteDevice_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_AuthorizeRemoteDevice_Response";
  }
  protected:
  explicit CDeviceAuth_AuthorizeRemoteDevice_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDeviceAuth_AuthorizeRemoteDevice_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_DeauthorizeRemoteDevice_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_DeauthorizeRemoteDevice_Request) */ {
 public:
  inline CDeviceAuth_DeauthorizeRemoteDevice_Request() : CDeviceAuth_DeauthorizeRemoteDevice_Request(nullptr) {}
  ~CDeviceAuth_DeauthorizeRemoteDevice_Request() override;
  explicit constexpr CDeviceAuth_DeauthorizeRemoteDevice_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_DeauthorizeRemoteDevice_Request(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from);
  CDeviceAuth_DeauthorizeRemoteDevice_Request(CDeviceAuth_DeauthorizeRemoteDevice_Request&& from) noexcept
    : CDeviceAuth_DeauthorizeRemoteDevice_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_DeauthorizeRemoteDevice_Request& operator=(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_DeauthorizeRemoteDevice_Request& operator=(CDeviceAuth_DeauthorizeRemoteDevice_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_DeauthorizeRemoteDevice_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_DeauthorizeRemoteDevice_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_DeauthorizeRemoteDevice_Request*>(
               &_CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDeviceAuth_DeauthorizeRemoteDevice_Request& a, CDeviceAuth_DeauthorizeRemoteDevice_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_DeauthorizeRemoteDevice_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_DeauthorizeRemoteDevice_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_DeauthorizeRemoteDevice_Request";
  }
  protected:
  explicit CDeviceAuth_DeauthorizeRemoteDevice_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAuthDeviceTokenFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 auth_device_token = 2;
  bool has_auth_device_token() const;
  private:
  bool _internal_has_auth_device_token() const;
  public:
  void clear_auth_device_token();
  uint64_t auth_device_token() const;
  void set_auth_device_token(uint64_t value);
  private:
  uint64_t _internal_auth_device_token() const;
  void _internal_set_auth_device_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_DeauthorizeRemoteDevice_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t auth_device_token_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_DeauthorizeRemoteDevice_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDeviceAuth_DeauthorizeRemoteDevice_Response) */ {
 public:
  inline CDeviceAuth_DeauthorizeRemoteDevice_Response() : CDeviceAuth_DeauthorizeRemoteDevice_Response(nullptr) {}
  explicit constexpr CDeviceAuth_DeauthorizeRemoteDevice_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_DeauthorizeRemoteDevice_Response(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from);
  CDeviceAuth_DeauthorizeRemoteDevice_Response(CDeviceAuth_DeauthorizeRemoteDevice_Response&& from) noexcept
    : CDeviceAuth_DeauthorizeRemoteDevice_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_DeauthorizeRemoteDevice_Response& operator=(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_DeauthorizeRemoteDevice_Response& operator=(CDeviceAuth_DeauthorizeRemoteDevice_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_DeauthorizeRemoteDevice_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_DeauthorizeRemoteDevice_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_DeauthorizeRemoteDevice_Response*>(
               &_CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CDeviceAuth_DeauthorizeRemoteDevice_Response& a, CDeviceAuth_DeauthorizeRemoteDevice_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_DeauthorizeRemoteDevice_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_DeauthorizeRemoteDevice_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_DeauthorizeRemoteDevice_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_DeauthorizeRemoteDevice_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_DeauthorizeRemoteDevice_Response";
  }
  protected:
  explicit CDeviceAuth_DeauthorizeRemoteDevice_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDeviceAuth_DeauthorizeRemoteDevice_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetUsedAuthorizedDevices_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetUsedAuthorizedDevices_Request) */ {
 public:
  inline CDeviceAuth_GetUsedAuthorizedDevices_Request() : CDeviceAuth_GetUsedAuthorizedDevices_Request(nullptr) {}
  ~CDeviceAuth_GetUsedAuthorizedDevices_Request() override;
  explicit constexpr CDeviceAuth_GetUsedAuthorizedDevices_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetUsedAuthorizedDevices_Request(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from);
  CDeviceAuth_GetUsedAuthorizedDevices_Request(CDeviceAuth_GetUsedAuthorizedDevices_Request&& from) noexcept
    : CDeviceAuth_GetUsedAuthorizedDevices_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetUsedAuthorizedDevices_Request& operator=(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetUsedAuthorizedDevices_Request& operator=(CDeviceAuth_GetUsedAuthorizedDevices_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetUsedAuthorizedDevices_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetUsedAuthorizedDevices_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetUsedAuthorizedDevices_Request*>(
               &_CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CDeviceAuth_GetUsedAuthorizedDevices_Request& a, CDeviceAuth_GetUsedAuthorizedDevices_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetUsedAuthorizedDevices_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetUsedAuthorizedDevices_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetUsedAuthorizedDevices_Request";
  }
  protected:
  explicit CDeviceAuth_GetUsedAuthorizedDevices_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetUsedAuthorizedDevices_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetUsedAuthorizedDevices_Response_Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device) */ {
 public:
  inline CDeviceAuth_GetUsedAuthorizedDevices_Response_Device() : CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(nullptr) {}
  ~CDeviceAuth_GetUsedAuthorizedDevices_Response_Device() override;
  explicit constexpr CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from);
  CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device&& from) noexcept
    : CDeviceAuth_GetUsedAuthorizedDevices_Response_Device() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& operator=(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& operator=(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device*>(
               &_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& a, CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetUsedAuthorizedDevices_Response_Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetUsedAuthorizedDevices_Response.Device";
  }
  protected:
  explicit CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 2,
    kAuthDeviceTokenFieldNumber = 1,
    kOwnerSteamidFieldNumber = 3,
    kLastTimeUsedFieldNumber = 4,
    kLastAppPlayedFieldNumber = 5,
  };
  // optional string device_name = 2;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional fixed64 auth_device_token = 1;
  bool has_auth_device_token() const;
  private:
  bool _internal_has_auth_device_token() const;
  public:
  void clear_auth_device_token();
  uint64_t auth_device_token() const;
  void set_auth_device_token(uint64_t value);
  private:
  uint64_t _internal_auth_device_token() const;
  void _internal_set_auth_device_token(uint64_t value);
  public:

  // optional fixed64 owner_steamid = 3;
  bool has_owner_steamid() const;
  private:
  bool _internal_has_owner_steamid() const;
  public:
  void clear_owner_steamid();
  uint64_t owner_steamid() const;
  void set_owner_steamid(uint64_t value);
  private:
  uint64_t _internal_owner_steamid() const;
  void _internal_set_owner_steamid(uint64_t value);
  public:

  // optional uint32 last_time_used = 4;
  bool has_last_time_used() const;
  private:
  bool _internal_has_last_time_used() const;
  public:
  void clear_last_time_used();
  uint32_t last_time_used() const;
  void set_last_time_used(uint32_t value);
  private:
  uint32_t _internal_last_time_used() const;
  void _internal_set_last_time_used(uint32_t value);
  public:

  // optional uint32 last_app_played = 5;
  bool has_last_app_played() const;
  private:
  bool _internal_has_last_app_played() const;
  public:
  void clear_last_app_played();
  uint32_t last_app_played() const;
  void set_last_app_played(uint32_t value);
  private:
  uint32_t _internal_last_app_played() const;
  void _internal_set_last_app_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  uint64_t auth_device_token_;
  uint64_t owner_steamid_;
  uint32_t last_time_used_;
  uint32_t last_app_played_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetUsedAuthorizedDevices_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetUsedAuthorizedDevices_Response) */ {
 public:
  inline CDeviceAuth_GetUsedAuthorizedDevices_Response() : CDeviceAuth_GetUsedAuthorizedDevices_Response(nullptr) {}
  ~CDeviceAuth_GetUsedAuthorizedDevices_Response() override;
  explicit constexpr CDeviceAuth_GetUsedAuthorizedDevices_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetUsedAuthorizedDevices_Response(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from);
  CDeviceAuth_GetUsedAuthorizedDevices_Response(CDeviceAuth_GetUsedAuthorizedDevices_Response&& from) noexcept
    : CDeviceAuth_GetUsedAuthorizedDevices_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetUsedAuthorizedDevices_Response& operator=(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetUsedAuthorizedDevices_Response& operator=(CDeviceAuth_GetUsedAuthorizedDevices_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetUsedAuthorizedDevices_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetUsedAuthorizedDevices_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetUsedAuthorizedDevices_Response*>(
               &_CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CDeviceAuth_GetUsedAuthorizedDevices_Response& a, CDeviceAuth_GetUsedAuthorizedDevices_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetUsedAuthorizedDevices_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetUsedAuthorizedDevices_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetUsedAuthorizedDevices_Response";
  }
  protected:
  explicit CDeviceAuth_GetUsedAuthorizedDevices_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDeviceAuth_GetUsedAuthorizedDevices_Response_Device Device;

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >*
      mutable_devices();
  private:
  const ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& _internal_devices(int index) const;
  ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* _internal_add_devices();
  public:
  const ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& devices(int index) const;
  ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >&
      devices() const;

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetUsedAuthorizedDevices_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetAuthorizedBorrowers_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetAuthorizedBorrowers_Request) */ {
 public:
  inline CDeviceAuth_GetAuthorizedBorrowers_Request() : CDeviceAuth_GetAuthorizedBorrowers_Request(nullptr) {}
  ~CDeviceAuth_GetAuthorizedBorrowers_Request() override;
  explicit constexpr CDeviceAuth_GetAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetAuthorizedBorrowers_Request(const CDeviceAuth_GetAuthorizedBorrowers_Request& from);
  CDeviceAuth_GetAuthorizedBorrowers_Request(CDeviceAuth_GetAuthorizedBorrowers_Request&& from) noexcept
    : CDeviceAuth_GetAuthorizedBorrowers_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetAuthorizedBorrowers_Request& operator=(const CDeviceAuth_GetAuthorizedBorrowers_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetAuthorizedBorrowers_Request& operator=(CDeviceAuth_GetAuthorizedBorrowers_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetAuthorizedBorrowers_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetAuthorizedBorrowers_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetAuthorizedBorrowers_Request*>(
               &_CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CDeviceAuth_GetAuthorizedBorrowers_Request& a, CDeviceAuth_GetAuthorizedBorrowers_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetAuthorizedBorrowers_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetAuthorizedBorrowers_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetAuthorizedBorrowers_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetAuthorizedBorrowers_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetAuthorizedBorrowers_Request";
  }
  protected:
  explicit CDeviceAuth_GetAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kIncludeCanceledFieldNumber = 2,
    kIncludePendingFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool include_canceled = 2;
  bool has_include_canceled() const;
  private:
  bool _internal_has_include_canceled() const;
  public:
  void clear_include_canceled();
  bool include_canceled() const;
  void set_include_canceled(bool value);
  private:
  bool _internal_include_canceled() const;
  void _internal_set_include_canceled(bool value);
  public:

  // optional bool include_pending = 3;
  bool has_include_pending() const;
  private:
  bool _internal_has_include_pending() const;
  public:
  void clear_include_pending();
  bool include_pending() const;
  void set_include_pending(bool value);
  private:
  bool _internal_include_pending() const;
  void _internal_set_include_pending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetAuthorizedBorrowers_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  bool include_canceled_;
  bool include_pending_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower) */ {
 public:
  inline CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower() : CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(nullptr) {}
  ~CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower() override;
  explicit constexpr CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from);
  CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower&& from) noexcept
    : CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& operator=(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& operator=(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower*>(
               &_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& a, CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower";
  }
  protected:
  explicit CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kIsPendingFieldNumber = 2,
    kIsCanceledFieldNumber = 3,
    kTimeCreatedFieldNumber = 4,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool is_pending = 2;
  bool has_is_pending() const;
  private:
  bool _internal_has_is_pending() const;
  public:
  void clear_is_pending();
  bool is_pending() const;
  void set_is_pending(bool value);
  private:
  bool _internal_is_pending() const;
  void _internal_set_is_pending(bool value);
  public:

  // optional bool is_canceled = 3;
  bool has_is_canceled() const;
  private:
  bool _internal_has_is_canceled() const;
  public:
  void clear_is_canceled();
  bool is_canceled() const;
  void set_is_canceled(bool value);
  private:
  bool _internal_is_canceled() const;
  void _internal_set_is_canceled(bool value);
  public:

  // optional uint32 time_created = 4;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  bool is_pending_;
  bool is_canceled_;
  uint32_t time_created_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetAuthorizedBorrowers_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetAuthorizedBorrowers_Response) */ {
 public:
  inline CDeviceAuth_GetAuthorizedBorrowers_Response() : CDeviceAuth_GetAuthorizedBorrowers_Response(nullptr) {}
  ~CDeviceAuth_GetAuthorizedBorrowers_Response() override;
  explicit constexpr CDeviceAuth_GetAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetAuthorizedBorrowers_Response(const CDeviceAuth_GetAuthorizedBorrowers_Response& from);
  CDeviceAuth_GetAuthorizedBorrowers_Response(CDeviceAuth_GetAuthorizedBorrowers_Response&& from) noexcept
    : CDeviceAuth_GetAuthorizedBorrowers_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetAuthorizedBorrowers_Response& operator=(const CDeviceAuth_GetAuthorizedBorrowers_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetAuthorizedBorrowers_Response& operator=(CDeviceAuth_GetAuthorizedBorrowers_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetAuthorizedBorrowers_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetAuthorizedBorrowers_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetAuthorizedBorrowers_Response*>(
               &_CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CDeviceAuth_GetAuthorizedBorrowers_Response& a, CDeviceAuth_GetAuthorizedBorrowers_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetAuthorizedBorrowers_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetAuthorizedBorrowers_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetAuthorizedBorrowers_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetAuthorizedBorrowers_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetAuthorizedBorrowers_Response";
  }
  protected:
  explicit CDeviceAuth_GetAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower Borrower;

  // accessors -------------------------------------------------------

  enum : int {
    kBorrowersFieldNumber = 1,
  };
  // repeated .CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  int borrowers_size() const;
  private:
  int _internal_borrowers_size() const;
  public:
  void clear_borrowers();
  ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* mutable_borrowers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >*
      mutable_borrowers();
  private:
  const ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& _internal_borrowers(int index) const;
  ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* _internal_add_borrowers();
  public:
  const ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& borrowers(int index) const;
  ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* add_borrowers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >&
      borrowers() const;

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetAuthorizedBorrowers_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower > borrowers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_AddAuthorizedBorrowers_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_AddAuthorizedBorrowers_Request) */ {
 public:
  inline CDeviceAuth_AddAuthorizedBorrowers_Request() : CDeviceAuth_AddAuthorizedBorrowers_Request(nullptr) {}
  ~CDeviceAuth_AddAuthorizedBorrowers_Request() override;
  explicit constexpr CDeviceAuth_AddAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_AddAuthorizedBorrowers_Request(const CDeviceAuth_AddAuthorizedBorrowers_Request& from);
  CDeviceAuth_AddAuthorizedBorrowers_Request(CDeviceAuth_AddAuthorizedBorrowers_Request&& from) noexcept
    : CDeviceAuth_AddAuthorizedBorrowers_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_AddAuthorizedBorrowers_Request& operator=(const CDeviceAuth_AddAuthorizedBorrowers_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_AddAuthorizedBorrowers_Request& operator=(CDeviceAuth_AddAuthorizedBorrowers_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_AddAuthorizedBorrowers_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_AddAuthorizedBorrowers_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_AddAuthorizedBorrowers_Request*>(
               &_CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CDeviceAuth_AddAuthorizedBorrowers_Request& a, CDeviceAuth_AddAuthorizedBorrowers_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_AddAuthorizedBorrowers_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_AddAuthorizedBorrowers_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_AddAuthorizedBorrowers_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_AddAuthorizedBorrowers_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_AddAuthorizedBorrowers_Request";
  }
  protected:
  explicit CDeviceAuth_AddAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidBorrowerFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // repeated fixed64 steamid_borrower = 2;
  int steamid_borrower_size() const;
  private:
  int _internal_steamid_borrower_size() const;
  public:
  void clear_steamid_borrower();
  private:
  uint64_t _internal_steamid_borrower(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamid_borrower() const;
  void _internal_add_steamid_borrower(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamid_borrower();
  public:
  uint64_t steamid_borrower(int index) const;
  void set_steamid_borrower(int index, uint64_t value);
  void add_steamid_borrower(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamid_borrower() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamid_borrower();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_AddAuthorizedBorrowers_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamid_borrower_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_AddAuthorizedBorrowers_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_AddAuthorizedBorrowers_Response) */ {
 public:
  inline CDeviceAuth_AddAuthorizedBorrowers_Response() : CDeviceAuth_AddAuthorizedBorrowers_Response(nullptr) {}
  ~CDeviceAuth_AddAuthorizedBorrowers_Response() override;
  explicit constexpr CDeviceAuth_AddAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_AddAuthorizedBorrowers_Response(const CDeviceAuth_AddAuthorizedBorrowers_Response& from);
  CDeviceAuth_AddAuthorizedBorrowers_Response(CDeviceAuth_AddAuthorizedBorrowers_Response&& from) noexcept
    : CDeviceAuth_AddAuthorizedBorrowers_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_AddAuthorizedBorrowers_Response& operator=(const CDeviceAuth_AddAuthorizedBorrowers_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_AddAuthorizedBorrowers_Response& operator=(CDeviceAuth_AddAuthorizedBorrowers_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_AddAuthorizedBorrowers_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_AddAuthorizedBorrowers_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_AddAuthorizedBorrowers_Response*>(
               &_CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CDeviceAuth_AddAuthorizedBorrowers_Response& a, CDeviceAuth_AddAuthorizedBorrowers_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_AddAuthorizedBorrowers_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_AddAuthorizedBorrowers_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_AddAuthorizedBorrowers_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_AddAuthorizedBorrowers_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_AddAuthorizedBorrowers_Response";
  }
  protected:
  explicit CDeviceAuth_AddAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsToWaitFieldNumber = 1,
  };
  // optional int32 seconds_to_wait = 1;
  bool has_seconds_to_wait() const;
  private:
  bool _internal_has_seconds_to_wait() const;
  public:
  void clear_seconds_to_wait();
  int32_t seconds_to_wait() const;
  void set_seconds_to_wait(int32_t value);
  private:
  int32_t _internal_seconds_to_wait() const;
  void _internal_set_seconds_to_wait(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_AddAuthorizedBorrowers_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t seconds_to_wait_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_RemoveAuthorizedBorrowers_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_RemoveAuthorizedBorrowers_Request) */ {
 public:
  inline CDeviceAuth_RemoveAuthorizedBorrowers_Request() : CDeviceAuth_RemoveAuthorizedBorrowers_Request(nullptr) {}
  ~CDeviceAuth_RemoveAuthorizedBorrowers_Request() override;
  explicit constexpr CDeviceAuth_RemoveAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_RemoveAuthorizedBorrowers_Request(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from);
  CDeviceAuth_RemoveAuthorizedBorrowers_Request(CDeviceAuth_RemoveAuthorizedBorrowers_Request&& from) noexcept
    : CDeviceAuth_RemoveAuthorizedBorrowers_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_RemoveAuthorizedBorrowers_Request& operator=(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_RemoveAuthorizedBorrowers_Request& operator=(CDeviceAuth_RemoveAuthorizedBorrowers_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_RemoveAuthorizedBorrowers_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_RemoveAuthorizedBorrowers_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_RemoveAuthorizedBorrowers_Request*>(
               &_CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CDeviceAuth_RemoveAuthorizedBorrowers_Request& a, CDeviceAuth_RemoveAuthorizedBorrowers_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_RemoveAuthorizedBorrowers_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_RemoveAuthorizedBorrowers_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_RemoveAuthorizedBorrowers_Request";
  }
  protected:
  explicit CDeviceAuth_RemoveAuthorizedBorrowers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidBorrowerFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // repeated fixed64 steamid_borrower = 2;
  int steamid_borrower_size() const;
  private:
  int _internal_steamid_borrower_size() const;
  public:
  void clear_steamid_borrower();
  private:
  uint64_t _internal_steamid_borrower(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamid_borrower() const;
  void _internal_add_steamid_borrower(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamid_borrower();
  public:
  uint64_t steamid_borrower(int index) const;
  void set_steamid_borrower(int index, uint64_t value);
  void add_steamid_borrower(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamid_borrower() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamid_borrower();

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_RemoveAuthorizedBorrowers_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamid_borrower_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_RemoveAuthorizedBorrowers_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDeviceAuth_RemoveAuthorizedBorrowers_Response) */ {
 public:
  inline CDeviceAuth_RemoveAuthorizedBorrowers_Response() : CDeviceAuth_RemoveAuthorizedBorrowers_Response(nullptr) {}
  explicit constexpr CDeviceAuth_RemoveAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_RemoveAuthorizedBorrowers_Response(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from);
  CDeviceAuth_RemoveAuthorizedBorrowers_Response(CDeviceAuth_RemoveAuthorizedBorrowers_Response&& from) noexcept
    : CDeviceAuth_RemoveAuthorizedBorrowers_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_RemoveAuthorizedBorrowers_Response& operator=(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_RemoveAuthorizedBorrowers_Response& operator=(CDeviceAuth_RemoveAuthorizedBorrowers_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_RemoveAuthorizedBorrowers_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_RemoveAuthorizedBorrowers_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_RemoveAuthorizedBorrowers_Response*>(
               &_CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CDeviceAuth_RemoveAuthorizedBorrowers_Response& a, CDeviceAuth_RemoveAuthorizedBorrowers_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_RemoveAuthorizedBorrowers_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_RemoveAuthorizedBorrowers_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_RemoveAuthorizedBorrowers_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_RemoveAuthorizedBorrowers_Response";
  }
  protected:
  explicit CDeviceAuth_RemoveAuthorizedBorrowers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDeviceAuth_RemoveAuthorizedBorrowers_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetAuthorizedAsBorrower_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetAuthorizedAsBorrower_Request) */ {
 public:
  inline CDeviceAuth_GetAuthorizedAsBorrower_Request() : CDeviceAuth_GetAuthorizedAsBorrower_Request(nullptr) {}
  ~CDeviceAuth_GetAuthorizedAsBorrower_Request() override;
  explicit constexpr CDeviceAuth_GetAuthorizedAsBorrower_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetAuthorizedAsBorrower_Request(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from);
  CDeviceAuth_GetAuthorizedAsBorrower_Request(CDeviceAuth_GetAuthorizedAsBorrower_Request&& from) noexcept
    : CDeviceAuth_GetAuthorizedAsBorrower_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetAuthorizedAsBorrower_Request& operator=(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetAuthorizedAsBorrower_Request& operator=(CDeviceAuth_GetAuthorizedAsBorrower_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetAuthorizedAsBorrower_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetAuthorizedAsBorrower_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetAuthorizedAsBorrower_Request*>(
               &_CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CDeviceAuth_GetAuthorizedAsBorrower_Request& a, CDeviceAuth_GetAuthorizedAsBorrower_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetAuthorizedAsBorrower_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetAuthorizedAsBorrower_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetAuthorizedAsBorrower_Request";
  }
  protected:
  explicit CDeviceAuth_GetAuthorizedAsBorrower_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kIncludeCanceledFieldNumber = 2,
    kIncludePendingFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool include_canceled = 2;
  bool has_include_canceled() const;
  private:
  bool _internal_has_include_canceled() const;
  public:
  void clear_include_canceled();
  bool include_canceled() const;
  void set_include_canceled(bool value);
  private:
  bool _internal_include_canceled() const;
  void _internal_set_include_canceled(bool value);
  public:

  // optional bool include_pending = 3;
  bool has_include_pending() const;
  private:
  bool _internal_has_include_pending() const;
  public:
  void clear_include_pending();
  bool include_pending() const;
  void set_include_pending(bool value);
  private:
  bool _internal_include_pending() const;
  void _internal_set_include_pending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetAuthorizedAsBorrower_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  bool include_canceled_;
  bool include_pending_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender) */ {
 public:
  inline CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender() : CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(nullptr) {}
  ~CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender() override;
  explicit constexpr CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from);
  CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender&& from) noexcept
    : CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& operator=(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& operator=(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender*>(
               &_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& a, CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender";
  }
  protected:
  explicit CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kTimeCreatedFieldNumber = 2,
    kIsPendingFieldNumber = 3,
    kIsCanceledFieldNumber = 4,
    kIsUsedFieldNumber = 5,
    kTimeRemovedFieldNumber = 6,
    kTimeFirstFieldNumber = 7,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 time_created = 2;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // optional bool is_pending = 3;
  bool has_is_pending() const;
  private:
  bool _internal_has_is_pending() const;
  public:
  void clear_is_pending();
  bool is_pending() const;
  void set_is_pending(bool value);
  private:
  bool _internal_is_pending() const;
  void _internal_set_is_pending(bool value);
  public:

  // optional bool is_canceled = 4;
  bool has_is_canceled() const;
  private:
  bool _internal_has_is_canceled() const;
  public:
  void clear_is_canceled();
  bool is_canceled() const;
  void set_is_canceled(bool value);
  private:
  bool _internal_is_canceled() const;
  void _internal_set_is_canceled(bool value);
  public:

  // optional bool is_used = 5;
  bool has_is_used() const;
  private:
  bool _internal_has_is_used() const;
  public:
  void clear_is_used();
  bool is_used() const;
  void set_is_used(bool value);
  private:
  bool _internal_is_used() const;
  void _internal_set_is_used(bool value);
  public:

  // optional uint32 time_removed = 6;
  bool has_time_removed() const;
  private:
  bool _internal_has_time_removed() const;
  public:
  void clear_time_removed();
  uint32_t time_removed() const;
  void set_time_removed(uint32_t value);
  private:
  uint32_t _internal_time_removed() const;
  void _internal_set_time_removed(uint32_t value);
  public:

  // optional uint32 time_first = 7;
  bool has_time_first() const;
  private:
  bool _internal_has_time_first() const;
  public:
  void clear_time_first();
  uint32_t time_first() const;
  void set_time_first(uint32_t value);
  private:
  uint32_t _internal_time_first() const;
  void _internal_set_time_first(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t time_created_;
  bool is_pending_;
  bool is_canceled_;
  bool is_used_;
  uint32_t time_removed_;
  uint32_t time_first_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetAuthorizedAsBorrower_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetAuthorizedAsBorrower_Response) */ {
 public:
  inline CDeviceAuth_GetAuthorizedAsBorrower_Response() : CDeviceAuth_GetAuthorizedAsBorrower_Response(nullptr) {}
  ~CDeviceAuth_GetAuthorizedAsBorrower_Response() override;
  explicit constexpr CDeviceAuth_GetAuthorizedAsBorrower_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetAuthorizedAsBorrower_Response(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from);
  CDeviceAuth_GetAuthorizedAsBorrower_Response(CDeviceAuth_GetAuthorizedAsBorrower_Response&& from) noexcept
    : CDeviceAuth_GetAuthorizedAsBorrower_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetAuthorizedAsBorrower_Response& operator=(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetAuthorizedAsBorrower_Response& operator=(CDeviceAuth_GetAuthorizedAsBorrower_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetAuthorizedAsBorrower_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetAuthorizedAsBorrower_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetAuthorizedAsBorrower_Response*>(
               &_CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CDeviceAuth_GetAuthorizedAsBorrower_Response& a, CDeviceAuth_GetAuthorizedAsBorrower_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetAuthorizedAsBorrower_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetAuthorizedAsBorrower_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetAuthorizedAsBorrower_Response";
  }
  protected:
  explicit CDeviceAuth_GetAuthorizedAsBorrower_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender Lender;

  // accessors -------------------------------------------------------

  enum : int {
    kLendersFieldNumber = 1,
  };
  // repeated .CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  int lenders_size() const;
  private:
  int _internal_lenders_size() const;
  public:
  void clear_lenders();
  ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* mutable_lenders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >*
      mutable_lenders();
  private:
  const ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& _internal_lenders(int index) const;
  ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* _internal_add_lenders();
  public:
  const ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& lenders(int index) const;
  ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* add_lenders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >&
      lenders() const;

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetAuthorizedAsBorrower_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender > lenders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetExcludedGamesInLibrary_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetExcludedGamesInLibrary_Request) */ {
 public:
  inline CDeviceAuth_GetExcludedGamesInLibrary_Request() : CDeviceAuth_GetExcludedGamesInLibrary_Request(nullptr) {}
  ~CDeviceAuth_GetExcludedGamesInLibrary_Request() override;
  explicit constexpr CDeviceAuth_GetExcludedGamesInLibrary_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetExcludedGamesInLibrary_Request(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from);
  CDeviceAuth_GetExcludedGamesInLibrary_Request(CDeviceAuth_GetExcludedGamesInLibrary_Request&& from) noexcept
    : CDeviceAuth_GetExcludedGamesInLibrary_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetExcludedGamesInLibrary_Request& operator=(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetExcludedGamesInLibrary_Request& operator=(CDeviceAuth_GetExcludedGamesInLibrary_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetExcludedGamesInLibrary_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetExcludedGamesInLibrary_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetExcludedGamesInLibrary_Request*>(
               &_CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CDeviceAuth_GetExcludedGamesInLibrary_Request& a, CDeviceAuth_GetExcludedGamesInLibrary_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetExcludedGamesInLibrary_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetExcludedGamesInLibrary_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetExcludedGamesInLibrary_Request";
  }
  protected:
  explicit CDeviceAuth_GetExcludedGamesInLibrary_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetExcludedGamesInLibrary_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame) */ {
 public:
  inline CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame() : CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(nullptr) {}
  ~CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame() override;
  explicit constexpr CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from);
  CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame&& from) noexcept
    : CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& operator=(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& operator=(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame*>(
               &_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& a, CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame";
  }
  protected:
  explicit CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameNameFieldNumber = 2,
    kAppidFieldNumber = 1,
    kVacBannedFieldNumber = 3,
    kPackageExcludedFieldNumber = 4,
  };
  // optional string game_name = 2;
  bool has_game_name() const;
  private:
  bool _internal_has_game_name() const;
  public:
  void clear_game_name();
  const std::string& game_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_name();
  PROTOBUF_NODISCARD std::string* release_game_name();
  void set_allocated_game_name(std::string* game_name);
  private:
  const std::string& _internal_game_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_name(const std::string& value);
  std::string* _internal_mutable_game_name();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool vac_banned = 3;
  bool has_vac_banned() const;
  private:
  bool _internal_has_vac_banned() const;
  public:
  void clear_vac_banned();
  bool vac_banned() const;
  void set_vac_banned(bool value);
  private:
  bool _internal_vac_banned() const;
  void _internal_set_vac_banned(bool value);
  public:

  // optional bool package_excluded = 4;
  bool has_package_excluded() const;
  private:
  bool _internal_has_package_excluded() const;
  public:
  void clear_package_excluded();
  bool package_excluded() const;
  void set_package_excluded(bool value);
  private:
  bool _internal_package_excluded() const;
  void _internal_set_package_excluded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_name_;
  uint32_t appid_;
  bool vac_banned_;
  bool package_excluded_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetExcludedGamesInLibrary_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetExcludedGamesInLibrary_Response) */ {
 public:
  inline CDeviceAuth_GetExcludedGamesInLibrary_Response() : CDeviceAuth_GetExcludedGamesInLibrary_Response(nullptr) {}
  ~CDeviceAuth_GetExcludedGamesInLibrary_Response() override;
  explicit constexpr CDeviceAuth_GetExcludedGamesInLibrary_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetExcludedGamesInLibrary_Response(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from);
  CDeviceAuth_GetExcludedGamesInLibrary_Response(CDeviceAuth_GetExcludedGamesInLibrary_Response&& from) noexcept
    : CDeviceAuth_GetExcludedGamesInLibrary_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetExcludedGamesInLibrary_Response& operator=(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetExcludedGamesInLibrary_Response& operator=(CDeviceAuth_GetExcludedGamesInLibrary_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetExcludedGamesInLibrary_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetExcludedGamesInLibrary_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetExcludedGamesInLibrary_Response*>(
               &_CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CDeviceAuth_GetExcludedGamesInLibrary_Response& a, CDeviceAuth_GetExcludedGamesInLibrary_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetExcludedGamesInLibrary_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetExcludedGamesInLibrary_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetExcludedGamesInLibrary_Response";
  }
  protected:
  explicit CDeviceAuth_GetExcludedGamesInLibrary_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame ExcludedGame;

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedGamesFieldNumber = 1,
  };
  // repeated .CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  int excluded_games_size() const;
  private:
  int _internal_excluded_games_size() const;
  public:
  void clear_excluded_games();
  ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* mutable_excluded_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >*
      mutable_excluded_games();
  private:
  const ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& _internal_excluded_games(int index) const;
  ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* _internal_add_excluded_games();
  public:
  const ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& excluded_games(int index) const;
  ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* add_excluded_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >&
      excluded_games() const;

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetExcludedGamesInLibrary_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame > excluded_games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetBorrowerPlayHistory_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetBorrowerPlayHistory_Request) */ {
 public:
  inline CDeviceAuth_GetBorrowerPlayHistory_Request() : CDeviceAuth_GetBorrowerPlayHistory_Request(nullptr) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_Request() override;
  explicit constexpr CDeviceAuth_GetBorrowerPlayHistory_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetBorrowerPlayHistory_Request(const CDeviceAuth_GetBorrowerPlayHistory_Request& from);
  CDeviceAuth_GetBorrowerPlayHistory_Request(CDeviceAuth_GetBorrowerPlayHistory_Request&& from) noexcept
    : CDeviceAuth_GetBorrowerPlayHistory_Request() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetBorrowerPlayHistory_Request& operator=(const CDeviceAuth_GetBorrowerPlayHistory_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetBorrowerPlayHistory_Request& operator=(CDeviceAuth_GetBorrowerPlayHistory_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetBorrowerPlayHistory_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetBorrowerPlayHistory_Request* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetBorrowerPlayHistory_Request*>(
               &_CDeviceAuth_GetBorrowerPlayHistory_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CDeviceAuth_GetBorrowerPlayHistory_Request& a, CDeviceAuth_GetBorrowerPlayHistory_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetBorrowerPlayHistory_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetBorrowerPlayHistory_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetBorrowerPlayHistory_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetBorrowerPlayHistory_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetBorrowerPlayHistory_Request";
  }
  protected:
  explicit CDeviceAuth_GetBorrowerPlayHistory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetBorrowerPlayHistory_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory) */ {
 public:
  inline CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory() : CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(nullptr) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory() override;
  explicit constexpr CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from);
  CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory&& from) noexcept
    : CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& operator=(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& operator=(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory*>(
               &_CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& a, CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory";
  }
  protected:
  explicit CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kTimeLastFieldNumber = 2,
    kTimeTotalFieldNumber = 3,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 time_last = 2;
  bool has_time_last() const;
  private:
  bool _internal_has_time_last() const;
  public:
  void clear_time_last();
  uint32_t time_last() const;
  void set_time_last(uint32_t value);
  private:
  uint32_t _internal_time_last() const;
  void _internal_set_time_last(uint32_t value);
  public:

  // optional uint32 time_total = 3;
  bool has_time_total() const;
  private:
  bool _internal_has_time_total() const;
  public:
  void clear_time_total();
  uint32_t time_total() const;
  void set_time_total(uint32_t value);
  private:
  uint32_t _internal_time_total() const;
  void _internal_set_time_total(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  uint32_t time_last_;
  uint32_t time_total_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory) */ {
 public:
  inline CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory() : CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(nullptr) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory() override;
  explicit constexpr CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from);
  CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory&& from) noexcept
    : CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& operator=(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& operator=(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory*>(
               &_CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& a, CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory";
  }
  protected:
  explicit CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameHistoryFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
  int game_history_size() const;
  private:
  int _internal_game_history_size() const;
  public:
  void clear_game_history();
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* mutable_game_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >*
      mutable_game_history();
  private:
  const ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& _internal_game_history(int index) const;
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* _internal_add_game_history();
  public:
  const ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& game_history(int index) const;
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* add_game_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >&
      game_history() const;

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory > game_history_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDeviceAuth_GetBorrowerPlayHistory_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDeviceAuth_GetBorrowerPlayHistory_Response) */ {
 public:
  inline CDeviceAuth_GetBorrowerPlayHistory_Response() : CDeviceAuth_GetBorrowerPlayHistory_Response(nullptr) {}
  ~CDeviceAuth_GetBorrowerPlayHistory_Response() override;
  explicit constexpr CDeviceAuth_GetBorrowerPlayHistory_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDeviceAuth_GetBorrowerPlayHistory_Response(const CDeviceAuth_GetBorrowerPlayHistory_Response& from);
  CDeviceAuth_GetBorrowerPlayHistory_Response(CDeviceAuth_GetBorrowerPlayHistory_Response&& from) noexcept
    : CDeviceAuth_GetBorrowerPlayHistory_Response() {
    *this = ::std::move(from);
  }

  inline CDeviceAuth_GetBorrowerPlayHistory_Response& operator=(const CDeviceAuth_GetBorrowerPlayHistory_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeviceAuth_GetBorrowerPlayHistory_Response& operator=(CDeviceAuth_GetBorrowerPlayHistory_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDeviceAuth_GetBorrowerPlayHistory_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDeviceAuth_GetBorrowerPlayHistory_Response* internal_default_instance() {
    return reinterpret_cast<const CDeviceAuth_GetBorrowerPlayHistory_Response*>(
               &_CDeviceAuth_GetBorrowerPlayHistory_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CDeviceAuth_GetBorrowerPlayHistory_Response& a, CDeviceAuth_GetBorrowerPlayHistory_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeviceAuth_GetBorrowerPlayHistory_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeviceAuth_GetBorrowerPlayHistory_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDeviceAuth_GetBorrowerPlayHistory_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDeviceAuth_GetBorrowerPlayHistory_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDeviceAuth_GetBorrowerPlayHistory_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeviceAuth_GetBorrowerPlayHistory_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDeviceAuth_GetBorrowerPlayHistory_Response";
  }
  protected:
  explicit CDeviceAuth_GetBorrowerPlayHistory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory GameHistory;
  typedef CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory LenderHistory;

  // accessors -------------------------------------------------------

  enum : int {
    kLenderHistoryFieldNumber = 1,
  };
  // repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
  int lender_history_size() const;
  private:
  int _internal_lender_history_size() const;
  public:
  void clear_lender_history();
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* mutable_lender_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >*
      mutable_lender_history();
  private:
  const ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& _internal_lender_history(int index) const;
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* _internal_add_lender_history();
  public:
  const ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& lender_history(int index) const;
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* add_lender_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >&
      lender_history() const;

  // @@protoc_insertion_point(class_scope:CDeviceAuth_GetBorrowerPlayHistory_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory > lender_history_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdeviceauth_2esteamclient_2eproto;
};
// ===================================================================

class DeviceAuth_Stub;

class DeviceAuth : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DeviceAuth() {};
 public:
  virtual ~DeviceAuth();

  typedef DeviceAuth_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetOwnAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetOwnAuthorizedDevices_Request* request,
                       ::CDeviceAuth_GetOwnAuthorizedDevices_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AcceptAuthorizationRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_AcceptAuthorizationRequest_Request* request,
                       ::CDeviceAuth_AcceptAuthorizationRequest_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AuthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_AuthorizeRemoteDevice_Request* request,
                       ::CDeviceAuth_AuthorizeRemoteDevice_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeauthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_DeauthorizeRemoteDevice_Request* request,
                       ::CDeviceAuth_DeauthorizeRemoteDevice_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUsedAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetUsedAuthorizedDevices_Request* request,
                       ::CDeviceAuth_GetUsedAuthorizedDevices_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetAuthorizedBorrowers_Request* request,
                       ::CDeviceAuth_GetAuthorizedBorrowers_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_AddAuthorizedBorrowers_Request* request,
                       ::CDeviceAuth_AddAuthorizedBorrowers_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_RemoveAuthorizedBorrowers_Request* request,
                       ::CDeviceAuth_RemoveAuthorizedBorrowers_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAuthorizedAsBorrower(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetAuthorizedAsBorrower_Request* request,
                       ::CDeviceAuth_GetAuthorizedAsBorrower_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetExcludedGamesInLibrary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetExcludedGamesInLibrary_Request* request,
                       ::CDeviceAuth_GetExcludedGamesInLibrary_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBorrowerPlayHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetBorrowerPlayHistory_Request* request,
                       ::CDeviceAuth_GetBorrowerPlayHistory_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DeviceAuth);
};

class DeviceAuth_Stub : public DeviceAuth {
 public:
  DeviceAuth_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DeviceAuth_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DeviceAuth_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DeviceAuth ------------------------------------------

  void GetOwnAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetOwnAuthorizedDevices_Request* request,
                       ::CDeviceAuth_GetOwnAuthorizedDevices_Response* response,
                       ::google::protobuf::Closure* done);
  void AcceptAuthorizationRequest(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_AcceptAuthorizationRequest_Request* request,
                       ::CDeviceAuth_AcceptAuthorizationRequest_Response* response,
                       ::google::protobuf::Closure* done);
  void AuthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_AuthorizeRemoteDevice_Request* request,
                       ::CDeviceAuth_AuthorizeRemoteDevice_Response* response,
                       ::google::protobuf::Closure* done);
  void DeauthorizeRemoteDevice(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_DeauthorizeRemoteDevice_Request* request,
                       ::CDeviceAuth_DeauthorizeRemoteDevice_Response* response,
                       ::google::protobuf::Closure* done);
  void GetUsedAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetUsedAuthorizedDevices_Request* request,
                       ::CDeviceAuth_GetUsedAuthorizedDevices_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetAuthorizedBorrowers_Request* request,
                       ::CDeviceAuth_GetAuthorizedBorrowers_Response* response,
                       ::google::protobuf::Closure* done);
  void AddAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_AddAuthorizedBorrowers_Request* request,
                       ::CDeviceAuth_AddAuthorizedBorrowers_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveAuthorizedBorrowers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_RemoveAuthorizedBorrowers_Request* request,
                       ::CDeviceAuth_RemoveAuthorizedBorrowers_Response* response,
                       ::google::protobuf::Closure* done);
  void GetAuthorizedAsBorrower(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetAuthorizedAsBorrower_Request* request,
                       ::CDeviceAuth_GetAuthorizedAsBorrower_Response* response,
                       ::google::protobuf::Closure* done);
  void GetExcludedGamesInLibrary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetExcludedGamesInLibrary_Request* request,
                       ::CDeviceAuth_GetExcludedGamesInLibrary_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBorrowerPlayHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDeviceAuth_GetBorrowerPlayHistory_Request* request,
                       ::CDeviceAuth_GetBorrowerPlayHistory_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DeviceAuth_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDeviceAuth_GetOwnAuthorizedDevices_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetOwnAuthorizedDevices_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetOwnAuthorizedDevices_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Request.steamid)
}

// optional bool include_canceled = 2;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Request::_internal_has_include_canceled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Request::has_include_canceled() const {
  return _internal_has_include_canceled();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Request::clear_include_canceled() {
  include_canceled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Request::_internal_include_canceled() const {
  return include_canceled_;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Request::include_canceled() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Request.include_canceled)
  return _internal_include_canceled();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Request::_internal_set_include_canceled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  include_canceled_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Request::set_include_canceled(bool value) {
  _internal_set_include_canceled(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Request.include_canceled)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetOwnAuthorizedDevices_Response_Device

// optional fixed64 auth_device_token = 1;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_auth_device_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_auth_device_token() const {
  return _internal_has_auth_device_token();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_auth_device_token() {
  auth_device_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_auth_device_token() const {
  return auth_device_token_;
}
inline uint64_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::auth_device_token() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.auth_device_token)
  return _internal_auth_device_token();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_auth_device_token(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  auth_device_token_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_auth_device_token(uint64_t value) {
  _internal_set_auth_device_token(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.auth_device_token)
}

// optional string device_name = 2;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_device_name() const {
  return _internal_has_device_name();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_device_name() {
  device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::device_name() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
}
inline std::string* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
  return _s;
}
inline const std::string& CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_device_name() const {
  return device_name_.Get();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::release_device_name() {
  // @@protoc_insertion_point(field_release:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
}

// optional bool is_pending = 3;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_is_pending() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_is_pending() const {
  return _internal_has_is_pending();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_is_pending() {
  is_pending_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_is_pending() const {
  return is_pending_;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::is_pending() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_pending)
  return _internal_is_pending();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_is_pending(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_pending_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_is_pending(bool value) {
  _internal_set_is_pending(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_pending)
}

// optional bool is_canceled = 4;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_is_canceled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_is_canceled() const {
  return _internal_has_is_canceled();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_is_canceled() {
  is_canceled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_is_canceled() const {
  return is_canceled_;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::is_canceled() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_canceled)
  return _internal_is_canceled();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_is_canceled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_canceled_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_is_canceled(bool value) {
  _internal_set_is_canceled(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_canceled)
}

// optional uint32 last_time_used = 5;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_last_time_used() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_last_time_used() const {
  return _internal_has_last_time_used();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_last_time_used() {
  last_time_used_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_last_time_used() const {
  return last_time_used_;
}
inline uint32_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::last_time_used() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_time_used)
  return _internal_last_time_used();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_last_time_used(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_time_used_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_last_time_used(uint32_t value) {
  _internal_set_last_time_used(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_time_used)
}

// optional fixed64 last_borrower_id = 6;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_last_borrower_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_last_borrower_id() const {
  return _internal_has_last_borrower_id();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_last_borrower_id() {
  last_borrower_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_last_borrower_id() const {
  return last_borrower_id_;
}
inline uint64_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::last_borrower_id() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_borrower_id)
  return _internal_last_borrower_id();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_last_borrower_id(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  last_borrower_id_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_last_borrower_id(uint64_t value) {
  _internal_set_last_borrower_id(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_borrower_id)
}

// optional uint32 last_app_played = 7;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_last_app_played() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_last_app_played() const {
  return _internal_has_last_app_played();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_last_app_played() {
  last_app_played_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_last_app_played() const {
  return last_app_played_;
}
inline uint32_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::last_app_played() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_app_played)
  return _internal_last_app_played();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_last_app_played(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  last_app_played_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_last_app_played(uint32_t value) {
  _internal_set_last_app_played(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_app_played)
}

// optional bool is_limited = 8;
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_has_is_limited() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_is_limited() const {
  return _internal_has_is_limited();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_is_limited() {
  is_limited_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_is_limited() const {
  return is_limited_;
}
inline bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::is_limited() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_limited)
  return _internal_is_limited();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::_internal_set_is_limited(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_limited_ = value;
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_is_limited(bool value) {
  _internal_set_is_limited(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_limited)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetOwnAuthorizedDevices_Response

// repeated .CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
inline int CDeviceAuth_GetOwnAuthorizedDevices_Response::_internal_devices_size() const {
  return devices_.size();
}
inline int CDeviceAuth_GetOwnAuthorizedDevices_Response::devices_size() const {
  return _internal_devices_size();
}
inline void CDeviceAuth_GetOwnAuthorizedDevices_Response::clear_devices() {
  devices_.Clear();
}
inline ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* CDeviceAuth_GetOwnAuthorizedDevices_Response::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >*
CDeviceAuth_GetOwnAuthorizedDevices_Response::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return &devices_;
}
inline const ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& CDeviceAuth_GetOwnAuthorizedDevices_Response::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& CDeviceAuth_GetOwnAuthorizedDevices_Response::devices(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return _internal_devices(index);
}
inline ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* CDeviceAuth_GetOwnAuthorizedDevices_Response::_internal_add_devices() {
  return devices_.Add();
}
inline ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* CDeviceAuth_GetOwnAuthorizedDevices_Response::add_devices() {
  ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >&
CDeviceAuth_GetOwnAuthorizedDevices_Response::devices() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return devices_;
}

// -------------------------------------------------------------------

// CDeviceAuth_AcceptAuthorizationRequest_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AcceptAuthorizationRequest_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AcceptAuthorizationRequest_Request.steamid)
}

// optional fixed64 auth_device_token = 2;
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_has_auth_device_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_auth_device_token() const {
  return _internal_has_auth_device_token();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_auth_device_token() {
  auth_device_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_auth_device_token() const {
  return auth_device_token_;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::auth_device_token() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AcceptAuthorizationRequest_Request.auth_device_token)
  return _internal_auth_device_token();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_set_auth_device_token(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  auth_device_token_ = value;
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::set_auth_device_token(uint64_t value) {
  _internal_set_auth_device_token(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AcceptAuthorizationRequest_Request.auth_device_token)
}

// optional fixed64 auth_code = 3;
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_has_auth_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_auth_code() const {
  return _internal_has_auth_code();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_auth_code() {
  auth_code_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_auth_code() const {
  return auth_code_;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::auth_code() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AcceptAuthorizationRequest_Request.auth_code)
  return _internal_auth_code();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_set_auth_code(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  auth_code_ = value;
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::set_auth_code(uint64_t value) {
  _internal_set_auth_code(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AcceptAuthorizationRequest_Request.auth_code)
}

// optional fixed64 from_steamid = 4;
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_has_from_steamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_from_steamid() const {
  return _internal_has_from_steamid();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_from_steamid() {
  from_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_from_steamid() const {
  return from_steamid_;
}
inline uint64_t CDeviceAuth_AcceptAuthorizationRequest_Request::from_steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AcceptAuthorizationRequest_Request.from_steamid)
  return _internal_from_steamid();
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::_internal_set_from_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  from_steamid_ = value;
}
inline void CDeviceAuth_AcceptAuthorizationRequest_Request::set_from_steamid(uint64_t value) {
  _internal_set_from_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AcceptAuthorizationRequest_Request.from_steamid)
}

// -------------------------------------------------------------------

// CDeviceAuth_AcceptAuthorizationRequest_Response

// -------------------------------------------------------------------

// CDeviceAuth_AuthorizeRemoteDevice_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_AuthorizeRemoteDevice_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_AuthorizeRemoteDevice_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_AuthorizeRemoteDevice_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_AuthorizeRemoteDevice_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_AuthorizeRemoteDevice_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AuthorizeRemoteDevice_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_AuthorizeRemoteDevice_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_AuthorizeRemoteDevice_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AuthorizeRemoteDevice_Request.steamid)
}

// optional fixed64 auth_device_token = 2;
inline bool CDeviceAuth_AuthorizeRemoteDevice_Request::_internal_has_auth_device_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_AuthorizeRemoteDevice_Request::has_auth_device_token() const {
  return _internal_has_auth_device_token();
}
inline void CDeviceAuth_AuthorizeRemoteDevice_Request::clear_auth_device_token() {
  auth_device_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CDeviceAuth_AuthorizeRemoteDevice_Request::_internal_auth_device_token() const {
  return auth_device_token_;
}
inline uint64_t CDeviceAuth_AuthorizeRemoteDevice_Request::auth_device_token() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AuthorizeRemoteDevice_Request.auth_device_token)
  return _internal_auth_device_token();
}
inline void CDeviceAuth_AuthorizeRemoteDevice_Request::_internal_set_auth_device_token(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  auth_device_token_ = value;
}
inline void CDeviceAuth_AuthorizeRemoteDevice_Request::set_auth_device_token(uint64_t value) {
  _internal_set_auth_device_token(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AuthorizeRemoteDevice_Request.auth_device_token)
}

// -------------------------------------------------------------------

// CDeviceAuth_AuthorizeRemoteDevice_Response

// -------------------------------------------------------------------

// CDeviceAuth_DeauthorizeRemoteDevice_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_DeauthorizeRemoteDevice_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_DeauthorizeRemoteDevice_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_DeauthorizeRemoteDevice_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_DeauthorizeRemoteDevice_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_DeauthorizeRemoteDevice_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_DeauthorizeRemoteDevice_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_DeauthorizeRemoteDevice_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_DeauthorizeRemoteDevice_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_DeauthorizeRemoteDevice_Request.steamid)
}

// optional fixed64 auth_device_token = 2;
inline bool CDeviceAuth_DeauthorizeRemoteDevice_Request::_internal_has_auth_device_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_DeauthorizeRemoteDevice_Request::has_auth_device_token() const {
  return _internal_has_auth_device_token();
}
inline void CDeviceAuth_DeauthorizeRemoteDevice_Request::clear_auth_device_token() {
  auth_device_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CDeviceAuth_DeauthorizeRemoteDevice_Request::_internal_auth_device_token() const {
  return auth_device_token_;
}
inline uint64_t CDeviceAuth_DeauthorizeRemoteDevice_Request::auth_device_token() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_DeauthorizeRemoteDevice_Request.auth_device_token)
  return _internal_auth_device_token();
}
inline void CDeviceAuth_DeauthorizeRemoteDevice_Request::_internal_set_auth_device_token(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  auth_device_token_ = value;
}
inline void CDeviceAuth_DeauthorizeRemoteDevice_Request::set_auth_device_token(uint64_t value) {
  _internal_set_auth_device_token(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_DeauthorizeRemoteDevice_Request.auth_device_token)
}

// -------------------------------------------------------------------

// CDeviceAuth_DeauthorizeRemoteDevice_Response

// -------------------------------------------------------------------

// CDeviceAuth_GetUsedAuthorizedDevices_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetUsedAuthorizedDevices_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetUsedAuthorizedDevices_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetUsedAuthorizedDevices_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetUsedAuthorizedDevices_Request.steamid)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetUsedAuthorizedDevices_Response_Device

// optional fixed64 auth_device_token = 1;
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_has_auth_device_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_auth_device_token() const {
  return _internal_has_auth_device_token();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_auth_device_token() {
  auth_device_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_auth_device_token() const {
  return auth_device_token_;
}
inline uint64_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::auth_device_token() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.auth_device_token)
  return _internal_auth_device_token();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_set_auth_device_token(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  auth_device_token_ = value;
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_auth_device_token(uint64_t value) {
  _internal_set_auth_device_token(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.auth_device_token)
}

// optional string device_name = 2;
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_device_name() const {
  return _internal_has_device_name();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_device_name() {
  device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::device_name() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
}
inline std::string* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
  return _s;
}
inline const std::string& CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_device_name() const {
  return device_name_.Get();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::release_device_name() {
  // @@protoc_insertion_point(field_release:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
}

// optional fixed64 owner_steamid = 3;
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_has_owner_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_owner_steamid() const {
  return _internal_has_owner_steamid();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_owner_steamid() {
  owner_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_owner_steamid() const {
  return owner_steamid_;
}
inline uint64_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::owner_steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.owner_steamid)
  return _internal_owner_steamid();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_set_owner_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  owner_steamid_ = value;
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_owner_steamid(uint64_t value) {
  _internal_set_owner_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.owner_steamid)
}

// optional uint32 last_time_used = 4;
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_has_last_time_used() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_last_time_used() const {
  return _internal_has_last_time_used();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_last_time_used() {
  last_time_used_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_last_time_used() const {
  return last_time_used_;
}
inline uint32_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::last_time_used() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_time_used)
  return _internal_last_time_used();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_set_last_time_used(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  last_time_used_ = value;
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_last_time_used(uint32_t value) {
  _internal_set_last_time_used(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_time_used)
}

// optional uint32 last_app_played = 5;
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_has_last_app_played() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_last_app_played() const {
  return _internal_has_last_app_played();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_last_app_played() {
  last_app_played_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_last_app_played() const {
  return last_app_played_;
}
inline uint32_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::last_app_played() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_app_played)
  return _internal_last_app_played();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::_internal_set_last_app_played(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  last_app_played_ = value;
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_last_app_played(uint32_t value) {
  _internal_set_last_app_played(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_app_played)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetUsedAuthorizedDevices_Response

// repeated .CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
inline int CDeviceAuth_GetUsedAuthorizedDevices_Response::_internal_devices_size() const {
  return devices_.size();
}
inline int CDeviceAuth_GetUsedAuthorizedDevices_Response::devices_size() const {
  return _internal_devices_size();
}
inline void CDeviceAuth_GetUsedAuthorizedDevices_Response::clear_devices() {
  devices_.Clear();
}
inline ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* CDeviceAuth_GetUsedAuthorizedDevices_Response::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >*
CDeviceAuth_GetUsedAuthorizedDevices_Response::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return &devices_;
}
inline const ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& CDeviceAuth_GetUsedAuthorizedDevices_Response::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& CDeviceAuth_GetUsedAuthorizedDevices_Response::devices(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return _internal_devices(index);
}
inline ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* CDeviceAuth_GetUsedAuthorizedDevices_Response::_internal_add_devices() {
  return devices_.Add();
}
inline ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* CDeviceAuth_GetUsedAuthorizedDevices_Response::add_devices() {
  ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >&
CDeviceAuth_GetUsedAuthorizedDevices_Response::devices() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return devices_;
}

// -------------------------------------------------------------------

// CDeviceAuth_GetAuthorizedBorrowers_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetAuthorizedBorrowers_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedBorrowers_Request.steamid)
}

// optional bool include_canceled = 2;
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_has_include_canceled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::has_include_canceled() const {
  return _internal_has_include_canceled();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_include_canceled() {
  include_canceled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_include_canceled() const {
  return include_canceled_;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::include_canceled() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Request.include_canceled)
  return _internal_include_canceled();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_set_include_canceled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  include_canceled_ = value;
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::set_include_canceled(bool value) {
  _internal_set_include_canceled(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedBorrowers_Request.include_canceled)
}

// optional bool include_pending = 3;
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_has_include_pending() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::has_include_pending() const {
  return _internal_has_include_pending();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_include_pending() {
  include_pending_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_include_pending() const {
  return include_pending_;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Request::include_pending() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Request.include_pending)
  return _internal_include_pending();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::_internal_set_include_pending(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_pending_ = value;
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Request::set_include_pending(bool value) {
  _internal_set_include_pending(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedBorrowers_Request.include_pending)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.steamid)
}

// optional bool is_pending = 2;
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_has_is_pending() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_is_pending() const {
  return _internal_has_is_pending();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_is_pending() {
  is_pending_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_is_pending() const {
  return is_pending_;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::is_pending() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_pending)
  return _internal_is_pending();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_set_is_pending(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_pending_ = value;
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_is_pending(bool value) {
  _internal_set_is_pending(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_pending)
}

// optional bool is_canceled = 3;
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_has_is_canceled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_is_canceled() const {
  return _internal_has_is_canceled();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_is_canceled() {
  is_canceled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_is_canceled() const {
  return is_canceled_;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::is_canceled() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_canceled)
  return _internal_is_canceled();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_set_is_canceled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_canceled_ = value;
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_is_canceled(bool value) {
  _internal_set_is_canceled(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_canceled)
}

// optional uint32 time_created = 4;
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_time_created() const {
  return _internal_has_time_created();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_time_created() const {
  return time_created_;
}
inline uint32_t CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::time_created() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.time_created)
  return _internal_time_created();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::_internal_set_time_created(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  time_created_ = value;
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.time_created)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetAuthorizedBorrowers_Response

// repeated .CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
inline int CDeviceAuth_GetAuthorizedBorrowers_Response::_internal_borrowers_size() const {
  return borrowers_.size();
}
inline int CDeviceAuth_GetAuthorizedBorrowers_Response::borrowers_size() const {
  return _internal_borrowers_size();
}
inline void CDeviceAuth_GetAuthorizedBorrowers_Response::clear_borrowers() {
  borrowers_.Clear();
}
inline ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* CDeviceAuth_GetAuthorizedBorrowers_Response::mutable_borrowers(int index) {
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return borrowers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >*
CDeviceAuth_GetAuthorizedBorrowers_Response::mutable_borrowers() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return &borrowers_;
}
inline const ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& CDeviceAuth_GetAuthorizedBorrowers_Response::_internal_borrowers(int index) const {
  return borrowers_.Get(index);
}
inline const ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& CDeviceAuth_GetAuthorizedBorrowers_Response::borrowers(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return _internal_borrowers(index);
}
inline ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* CDeviceAuth_GetAuthorizedBorrowers_Response::_internal_add_borrowers() {
  return borrowers_.Add();
}
inline ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* CDeviceAuth_GetAuthorizedBorrowers_Response::add_borrowers() {
  ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* _add = _internal_add_borrowers();
  // @@protoc_insertion_point(field_add:CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >&
CDeviceAuth_GetAuthorizedBorrowers_Response::borrowers() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return borrowers_;
}

// -------------------------------------------------------------------

// CDeviceAuth_AddAuthorizedBorrowers_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_AddAuthorizedBorrowers_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_AddAuthorizedBorrowers_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid)
}

// repeated fixed64 steamid_borrower = 2;
inline int CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_steamid_borrower_size() const {
  return steamid_borrower_.size();
}
inline int CDeviceAuth_AddAuthorizedBorrowers_Request::steamid_borrower_size() const {
  return _internal_steamid_borrower_size();
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Request::clear_steamid_borrower() {
  steamid_borrower_.Clear();
}
inline uint64_t CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_steamid_borrower(int index) const {
  return steamid_borrower_.Get(index);
}
inline uint64_t CDeviceAuth_AddAuthorizedBorrowers_Request::steamid_borrower(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
  return _internal_steamid_borrower(index);
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Request::set_steamid_borrower(int index, uint64_t value) {
  steamid_borrower_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_add_steamid_borrower(uint64_t value) {
  steamid_borrower_.Add(value);
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Request::add_steamid_borrower(uint64_t value) {
  _internal_add_steamid_borrower(value);
  // @@protoc_insertion_point(field_add:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_steamid_borrower() const {
  return steamid_borrower_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CDeviceAuth_AddAuthorizedBorrowers_Request::steamid_borrower() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
  return _internal_steamid_borrower();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CDeviceAuth_AddAuthorizedBorrowers_Request::_internal_mutable_steamid_borrower() {
  return &steamid_borrower_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CDeviceAuth_AddAuthorizedBorrowers_Request::mutable_steamid_borrower() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
  return _internal_mutable_steamid_borrower();
}

// -------------------------------------------------------------------

// CDeviceAuth_AddAuthorizedBorrowers_Response

// optional int32 seconds_to_wait = 1;
inline bool CDeviceAuth_AddAuthorizedBorrowers_Response::_internal_has_seconds_to_wait() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_AddAuthorizedBorrowers_Response::has_seconds_to_wait() const {
  return _internal_has_seconds_to_wait();
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Response::clear_seconds_to_wait() {
  seconds_to_wait_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDeviceAuth_AddAuthorizedBorrowers_Response::_internal_seconds_to_wait() const {
  return seconds_to_wait_;
}
inline int32_t CDeviceAuth_AddAuthorizedBorrowers_Response::seconds_to_wait() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_AddAuthorizedBorrowers_Response.seconds_to_wait)
  return _internal_seconds_to_wait();
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Response::_internal_set_seconds_to_wait(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_to_wait_ = value;
}
inline void CDeviceAuth_AddAuthorizedBorrowers_Response::set_seconds_to_wait(int32_t value) {
  _internal_set_seconds_to_wait(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_AddAuthorizedBorrowers_Response.seconds_to_wait)
}

// -------------------------------------------------------------------

// CDeviceAuth_RemoveAuthorizedBorrowers_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_RemoveAuthorizedBorrowers_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_RemoveAuthorizedBorrowers_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid)
}

// repeated fixed64 steamid_borrower = 2;
inline int CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_steamid_borrower_size() const {
  return steamid_borrower_.size();
}
inline int CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid_borrower_size() const {
  return _internal_steamid_borrower_size();
}
inline void CDeviceAuth_RemoveAuthorizedBorrowers_Request::clear_steamid_borrower() {
  steamid_borrower_.Clear();
}
inline uint64_t CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_steamid_borrower(int index) const {
  return steamid_borrower_.Get(index);
}
inline uint64_t CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid_borrower(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
  return _internal_steamid_borrower(index);
}
inline void CDeviceAuth_RemoveAuthorizedBorrowers_Request::set_steamid_borrower(int index, uint64_t value) {
  steamid_borrower_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
}
inline void CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_add_steamid_borrower(uint64_t value) {
  steamid_borrower_.Add(value);
}
inline void CDeviceAuth_RemoveAuthorizedBorrowers_Request::add_steamid_borrower(uint64_t value) {
  _internal_add_steamid_borrower(value);
  // @@protoc_insertion_point(field_add:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_steamid_borrower() const {
  return steamid_borrower_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid_borrower() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
  return _internal_steamid_borrower();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CDeviceAuth_RemoveAuthorizedBorrowers_Request::_internal_mutable_steamid_borrower() {
  return &steamid_borrower_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CDeviceAuth_RemoveAuthorizedBorrowers_Request::mutable_steamid_borrower() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
  return _internal_mutable_steamid_borrower();
}

// -------------------------------------------------------------------

// CDeviceAuth_RemoveAuthorizedBorrowers_Response

// -------------------------------------------------------------------

// CDeviceAuth_GetAuthorizedAsBorrower_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetAuthorizedAsBorrower_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Request.steamid)
}

// optional bool include_canceled = 2;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_has_include_canceled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::has_include_canceled() const {
  return _internal_has_include_canceled();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_include_canceled() {
  include_canceled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_include_canceled() const {
  return include_canceled_;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::include_canceled() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Request.include_canceled)
  return _internal_include_canceled();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_set_include_canceled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  include_canceled_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_include_canceled(bool value) {
  _internal_set_include_canceled(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Request.include_canceled)
}

// optional bool include_pending = 3;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_has_include_pending() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::has_include_pending() const {
  return _internal_has_include_pending();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_include_pending() {
  include_pending_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_include_pending() const {
  return include_pending_;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Request::include_pending() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Request.include_pending)
  return _internal_include_pending();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::_internal_set_include_pending(bool value) {
  _has_bits_[0] |= 0x00000004u;
  include_pending_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_include_pending(bool value) {
  _internal_set_include_pending(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Request.include_pending)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.steamid)
}

// optional uint32 time_created = 2;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_time_created() const {
  return _internal_has_time_created();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_time_created() const {
  return time_created_;
}
inline uint32_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::time_created() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_created)
  return _internal_time_created();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_set_time_created(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_created_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_created)
}

// optional bool is_pending = 3;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_has_is_pending() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_is_pending() const {
  return _internal_has_is_pending();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_is_pending() {
  is_pending_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_is_pending() const {
  return is_pending_;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::is_pending() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_pending)
  return _internal_is_pending();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_set_is_pending(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_pending_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_is_pending(bool value) {
  _internal_set_is_pending(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_pending)
}

// optional bool is_canceled = 4;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_has_is_canceled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_is_canceled() const {
  return _internal_has_is_canceled();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_is_canceled() {
  is_canceled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_is_canceled() const {
  return is_canceled_;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::is_canceled() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_canceled)
  return _internal_is_canceled();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_set_is_canceled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_canceled_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_is_canceled(bool value) {
  _internal_set_is_canceled(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_canceled)
}

// optional bool is_used = 5;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_has_is_used() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_is_used() const {
  return _internal_has_is_used();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_is_used() {
  is_used_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_is_used() const {
  return is_used_;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::is_used() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_used)
  return _internal_is_used();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_set_is_used(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_used_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_is_used(bool value) {
  _internal_set_is_used(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_used)
}

// optional uint32 time_removed = 6;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_has_time_removed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_time_removed() const {
  return _internal_has_time_removed();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_time_removed() {
  time_removed_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_time_removed() const {
  return time_removed_;
}
inline uint32_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::time_removed() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_removed)
  return _internal_time_removed();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_set_time_removed(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  time_removed_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_time_removed(uint32_t value) {
  _internal_set_time_removed(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_removed)
}

// optional uint32 time_first = 7;
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_has_time_first() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_time_first() const {
  return _internal_has_time_first();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_time_first() {
  time_first_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_time_first() const {
  return time_first_;
}
inline uint32_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::time_first() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_first)
  return _internal_time_first();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::_internal_set_time_first(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  time_first_ = value;
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_time_first(uint32_t value) {
  _internal_set_time_first(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_first)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetAuthorizedAsBorrower_Response

// repeated .CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
inline int CDeviceAuth_GetAuthorizedAsBorrower_Response::_internal_lenders_size() const {
  return lenders_.size();
}
inline int CDeviceAuth_GetAuthorizedAsBorrower_Response::lenders_size() const {
  return _internal_lenders_size();
}
inline void CDeviceAuth_GetAuthorizedAsBorrower_Response::clear_lenders() {
  lenders_.Clear();
}
inline ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* CDeviceAuth_GetAuthorizedAsBorrower_Response::mutable_lenders(int index) {
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return lenders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >*
CDeviceAuth_GetAuthorizedAsBorrower_Response::mutable_lenders() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return &lenders_;
}
inline const ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& CDeviceAuth_GetAuthorizedAsBorrower_Response::_internal_lenders(int index) const {
  return lenders_.Get(index);
}
inline const ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& CDeviceAuth_GetAuthorizedAsBorrower_Response::lenders(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return _internal_lenders(index);
}
inline ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* CDeviceAuth_GetAuthorizedAsBorrower_Response::_internal_add_lenders() {
  return lenders_.Add();
}
inline ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* CDeviceAuth_GetAuthorizedAsBorrower_Response::add_lenders() {
  ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* _add = _internal_add_lenders();
  // @@protoc_insertion_point(field_add:CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >&
CDeviceAuth_GetAuthorizedAsBorrower_Response::lenders() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return lenders_;
}

// -------------------------------------------------------------------

// CDeviceAuth_GetExcludedGamesInLibrary_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetExcludedGamesInLibrary_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetExcludedGamesInLibrary_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetExcludedGamesInLibrary_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetExcludedGamesInLibrary_Request.steamid)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame

// optional uint32 appid = 1;
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_appid() const {
  return _internal_has_appid();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_appid() const {
  return appid_;
}
inline uint32_t CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::appid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.appid)
  return _internal_appid();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.appid)
}

// optional string game_name = 2;
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_has_game_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_game_name() const {
  return _internal_has_game_name();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_game_name() {
  game_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::game_name() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
  return _internal_game_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_game_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
}
inline std::string* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::mutable_game_name() {
  std::string* _s = _internal_mutable_game_name();
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
  return _s;
}
inline const std::string& CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_game_name() const {
  return game_name_.Get();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_set_game_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_mutable_game_name() {
  _has_bits_[0] |= 0x00000001u;
  return game_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::release_game_name() {
  // @@protoc_insertion_point(field_release:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
  if (!_internal_has_game_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = game_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_allocated_game_name(std::string* game_name) {
  if (game_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
}

// optional bool vac_banned = 3;
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_has_vac_banned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_vac_banned() const {
  return _internal_has_vac_banned();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_vac_banned() {
  vac_banned_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_vac_banned() const {
  return vac_banned_;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::vac_banned() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.vac_banned)
  return _internal_vac_banned();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_set_vac_banned(bool value) {
  _has_bits_[0] |= 0x00000004u;
  vac_banned_ = value;
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_vac_banned(bool value) {
  _internal_set_vac_banned(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.vac_banned)
}

// optional bool package_excluded = 4;
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_has_package_excluded() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_package_excluded() const {
  return _internal_has_package_excluded();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_package_excluded() {
  package_excluded_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_package_excluded() const {
  return package_excluded_;
}
inline bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::package_excluded() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.package_excluded)
  return _internal_package_excluded();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::_internal_set_package_excluded(bool value) {
  _has_bits_[0] |= 0x00000008u;
  package_excluded_ = value;
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_package_excluded(bool value) {
  _internal_set_package_excluded(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.package_excluded)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetExcludedGamesInLibrary_Response

// repeated .CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
inline int CDeviceAuth_GetExcludedGamesInLibrary_Response::_internal_excluded_games_size() const {
  return excluded_games_.size();
}
inline int CDeviceAuth_GetExcludedGamesInLibrary_Response::excluded_games_size() const {
  return _internal_excluded_games_size();
}
inline void CDeviceAuth_GetExcludedGamesInLibrary_Response::clear_excluded_games() {
  excluded_games_.Clear();
}
inline ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* CDeviceAuth_GetExcludedGamesInLibrary_Response::mutable_excluded_games(int index) {
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return excluded_games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >*
CDeviceAuth_GetExcludedGamesInLibrary_Response::mutable_excluded_games() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return &excluded_games_;
}
inline const ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& CDeviceAuth_GetExcludedGamesInLibrary_Response::_internal_excluded_games(int index) const {
  return excluded_games_.Get(index);
}
inline const ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& CDeviceAuth_GetExcludedGamesInLibrary_Response::excluded_games(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return _internal_excluded_games(index);
}
inline ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* CDeviceAuth_GetExcludedGamesInLibrary_Response::_internal_add_excluded_games() {
  return excluded_games_.Add();
}
inline ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* CDeviceAuth_GetExcludedGamesInLibrary_Response::add_excluded_games() {
  ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* _add = _internal_add_excluded_games();
  // @@protoc_insertion_point(field_add:CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >&
CDeviceAuth_GetExcludedGamesInLibrary_Response::excluded_games() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return excluded_games_;
}

// -------------------------------------------------------------------

// CDeviceAuth_GetBorrowerPlayHistory_Request

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetBorrowerPlayHistory_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetBorrowerPlayHistory_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetBorrowerPlayHistory_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetBorrowerPlayHistory_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Request.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetBorrowerPlayHistory_Request.steamid)
}

// optional uint32 appid = 2;
inline bool CDeviceAuth_GetBorrowerPlayHistory_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetBorrowerPlayHistory_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Request::appid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Request.appid)
  return _internal_appid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetBorrowerPlayHistory_Request.appid)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory

// optional uint32 appid = 1;
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::has_appid() const {
  return _internal_has_appid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_appid() const {
  return appid_;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::appid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.appid)
  return _internal_appid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.appid)
}

// optional uint32 time_last = 2;
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_has_time_last() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::has_time_last() const {
  return _internal_has_time_last();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::clear_time_last() {
  time_last_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_time_last() const {
  return time_last_;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::time_last() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.time_last)
  return _internal_time_last();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_set_time_last(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_last_ = value;
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::set_time_last(uint32_t value) {
  _internal_set_time_last(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.time_last)
}

// optional uint32 time_total = 3;
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_has_time_total() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::has_time_total() const {
  return _internal_has_time_total();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::clear_time_total() {
  time_total_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_time_total() const {
  return time_total_;
}
inline uint32_t CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::time_total() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.time_total)
  return _internal_time_total();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::_internal_set_time_total(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_total_ = value;
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory::set_time_total(uint32_t value) {
  _internal_set_time_total(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory.time_total)
}

// -------------------------------------------------------------------

// CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory

// optional fixed64 steamid = 1;
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::has_steamid() const {
  return _internal_has_steamid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::steamid() const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.steamid)
  return _internal_steamid();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.steamid)
}

// repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.GameHistory game_history = 2;
inline int CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_internal_game_history_size() const {
  return game_history_.size();
}
inline int CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::game_history_size() const {
  return _internal_game_history_size();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::clear_game_history() {
  game_history_.Clear();
}
inline ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::mutable_game_history(int index) {
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history)
  return game_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >*
CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::mutable_game_history() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history)
  return &game_history_;
}
inline const ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_internal_game_history(int index) const {
  return game_history_.Get(index);
}
inline const ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory& CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::game_history(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history)
  return _internal_game_history(index);
}
inline ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::_internal_add_game_history() {
  return game_history_.Add();
}
inline ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::add_game_history() {
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory* _add = _internal_add_game_history();
  // @@protoc_insertion_point(field_add:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_GameHistory >&
CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory::game_history() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory.game_history)
  return game_history_;
}

// -------------------------------------------------------------------

// CDeviceAuth_GetBorrowerPlayHistory_Response

// repeated .CDeviceAuth_GetBorrowerPlayHistory_Response.LenderHistory lender_history = 1;
inline int CDeviceAuth_GetBorrowerPlayHistory_Response::_internal_lender_history_size() const {
  return lender_history_.size();
}
inline int CDeviceAuth_GetBorrowerPlayHistory_Response::lender_history_size() const {
  return _internal_lender_history_size();
}
inline void CDeviceAuth_GetBorrowerPlayHistory_Response::clear_lender_history() {
  lender_history_.Clear();
}
inline ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* CDeviceAuth_GetBorrowerPlayHistory_Response::mutable_lender_history(int index) {
  // @@protoc_insertion_point(field_mutable:CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history)
  return lender_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >*
CDeviceAuth_GetBorrowerPlayHistory_Response::mutable_lender_history() {
  // @@protoc_insertion_point(field_mutable_list:CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history)
  return &lender_history_;
}
inline const ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& CDeviceAuth_GetBorrowerPlayHistory_Response::_internal_lender_history(int index) const {
  return lender_history_.Get(index);
}
inline const ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory& CDeviceAuth_GetBorrowerPlayHistory_Response::lender_history(int index) const {
  // @@protoc_insertion_point(field_get:CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history)
  return _internal_lender_history(index);
}
inline ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* CDeviceAuth_GetBorrowerPlayHistory_Response::_internal_add_lender_history() {
  return lender_history_.Add();
}
inline ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* CDeviceAuth_GetBorrowerPlayHistory_Response::add_lender_history() {
  ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory* _add = _internal_add_lender_history();
  // @@protoc_insertion_point(field_add:CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDeviceAuth_GetBorrowerPlayHistory_Response_LenderHistory >&
CDeviceAuth_GetBorrowerPlayHistory_Response::lender_history() const {
  // @@protoc_insertion_point(field_list:CDeviceAuth_GetBorrowerPlayHistory_Response.lender_history)
  return lender_history_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fdeviceauth_2esteamclient_2eproto
