// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_siteserverui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsiteserverui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsiteserverui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fsiteserverui_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fsiteserverui_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsiteserverui_2eproto;
class SiteServerUI_CancelLogin_Request;
struct SiteServerUI_CancelLogin_RequestDefaultTypeInternal;
extern SiteServerUI_CancelLogin_RequestDefaultTypeInternal _SiteServerUI_CancelLogin_Request_default_instance_;
class SiteServerUI_CancelLogin_Response;
struct SiteServerUI_CancelLogin_ResponseDefaultTypeInternal;
extern SiteServerUI_CancelLogin_ResponseDefaultTypeInternal _SiteServerUI_CancelLogin_Response_default_instance_;
class SiteServerUI_ClientStatus_Request;
struct SiteServerUI_ClientStatus_RequestDefaultTypeInternal;
extern SiteServerUI_ClientStatus_RequestDefaultTypeInternal _SiteServerUI_ClientStatus_Request_default_instance_;
class SiteServerUI_ClientStatus_Response;
struct SiteServerUI_ClientStatus_ResponseDefaultTypeInternal;
extern SiteServerUI_ClientStatus_ResponseDefaultTypeInternal _SiteServerUI_ClientStatus_Response_default_instance_;
class SiteServerUI_ClientStatus_Response_ClientInfo;
struct SiteServerUI_ClientStatus_Response_ClientInfoDefaultTypeInternal;
extern SiteServerUI_ClientStatus_Response_ClientInfoDefaultTypeInternal _SiteServerUI_ClientStatus_Response_ClientInfo_default_instance_;
class SiteServerUI_ClientStatus_Response_Payment;
struct SiteServerUI_ClientStatus_Response_PaymentDefaultTypeInternal;
extern SiteServerUI_ClientStatus_Response_PaymentDefaultTypeInternal _SiteServerUI_ClientStatus_Response_Payment_default_instance_;
class SiteServerUI_ContentCacheConfig_Request;
struct SiteServerUI_ContentCacheConfig_RequestDefaultTypeInternal;
extern SiteServerUI_ContentCacheConfig_RequestDefaultTypeInternal _SiteServerUI_ContentCacheConfig_Request_default_instance_;
class SiteServerUI_ContentCacheConfig_Response;
struct SiteServerUI_ContentCacheConfig_ResponseDefaultTypeInternal;
extern SiteServerUI_ContentCacheConfig_ResponseDefaultTypeInternal _SiteServerUI_ContentCacheConfig_Response_default_instance_;
class SiteServerUI_ContentCacheStatus_Request;
struct SiteServerUI_ContentCacheStatus_RequestDefaultTypeInternal;
extern SiteServerUI_ContentCacheStatus_RequestDefaultTypeInternal _SiteServerUI_ContentCacheStatus_Request_default_instance_;
class SiteServerUI_ContentCacheStatus_Response;
struct SiteServerUI_ContentCacheStatus_ResponseDefaultTypeInternal;
extern SiteServerUI_ContentCacheStatus_ResponseDefaultTypeInternal _SiteServerUI_ContentCacheStatus_Response_default_instance_;
class SiteServerUI_GetLanguage_Request;
struct SiteServerUI_GetLanguage_RequestDefaultTypeInternal;
extern SiteServerUI_GetLanguage_RequestDefaultTypeInternal _SiteServerUI_GetLanguage_Request_default_instance_;
class SiteServerUI_GetLanguage_Response;
struct SiteServerUI_GetLanguage_ResponseDefaultTypeInternal;
extern SiteServerUI_GetLanguage_ResponseDefaultTypeInternal _SiteServerUI_GetLanguage_Response_default_instance_;
class SiteServerUI_LoginStatus_Request;
struct SiteServerUI_LoginStatus_RequestDefaultTypeInternal;
extern SiteServerUI_LoginStatus_RequestDefaultTypeInternal _SiteServerUI_LoginStatus_Request_default_instance_;
class SiteServerUI_LoginStatus_Response;
struct SiteServerUI_LoginStatus_ResponseDefaultTypeInternal;
extern SiteServerUI_LoginStatus_ResponseDefaultTypeInternal _SiteServerUI_LoginStatus_Response_default_instance_;
class SiteServerUI_Login_Request;
struct SiteServerUI_Login_RequestDefaultTypeInternal;
extern SiteServerUI_Login_RequestDefaultTypeInternal _SiteServerUI_Login_Request_default_instance_;
class SiteServerUI_Login_Response;
struct SiteServerUI_Login_ResponseDefaultTypeInternal;
extern SiteServerUI_Login_ResponseDefaultTypeInternal _SiteServerUI_Login_Response_default_instance_;
class SiteServerUI_Logout_Request;
struct SiteServerUI_Logout_RequestDefaultTypeInternal;
extern SiteServerUI_Logout_RequestDefaultTypeInternal _SiteServerUI_Logout_Request_default_instance_;
class SiteServerUI_Logout_Response;
struct SiteServerUI_Logout_ResponseDefaultTypeInternal;
extern SiteServerUI_Logout_ResponseDefaultTypeInternal _SiteServerUI_Logout_Response_default_instance_;
class SiteServerUI_Quit_Request;
struct SiteServerUI_Quit_RequestDefaultTypeInternal;
extern SiteServerUI_Quit_RequestDefaultTypeInternal _SiteServerUI_Quit_Request_default_instance_;
class SiteServerUI_Quit_Response;
struct SiteServerUI_Quit_ResponseDefaultTypeInternal;
extern SiteServerUI_Quit_ResponseDefaultTypeInternal _SiteServerUI_Quit_Response_default_instance_;
class SiteServerUI_SetLanguage_Request;
struct SiteServerUI_SetLanguage_RequestDefaultTypeInternal;
extern SiteServerUI_SetLanguage_RequestDefaultTypeInternal _SiteServerUI_SetLanguage_Request_default_instance_;
class SiteServerUI_SetLanguage_Response;
struct SiteServerUI_SetLanguage_ResponseDefaultTypeInternal;
extern SiteServerUI_SetLanguage_ResponseDefaultTypeInternal _SiteServerUI_SetLanguage_Response_default_instance_;
class SiteServerUI_Status_Request;
struct SiteServerUI_Status_RequestDefaultTypeInternal;
extern SiteServerUI_Status_RequestDefaultTypeInternal _SiteServerUI_Status_Request_default_instance_;
class SiteServerUI_Status_Response;
struct SiteServerUI_Status_ResponseDefaultTypeInternal;
extern SiteServerUI_Status_ResponseDefaultTypeInternal _SiteServerUI_Status_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SiteServerUI_CancelLogin_Request* Arena::CreateMaybeMessage<::SiteServerUI_CancelLogin_Request>(Arena*);
template<> ::SiteServerUI_CancelLogin_Response* Arena::CreateMaybeMessage<::SiteServerUI_CancelLogin_Response>(Arena*);
template<> ::SiteServerUI_ClientStatus_Request* Arena::CreateMaybeMessage<::SiteServerUI_ClientStatus_Request>(Arena*);
template<> ::SiteServerUI_ClientStatus_Response* Arena::CreateMaybeMessage<::SiteServerUI_ClientStatus_Response>(Arena*);
template<> ::SiteServerUI_ClientStatus_Response_ClientInfo* Arena::CreateMaybeMessage<::SiteServerUI_ClientStatus_Response_ClientInfo>(Arena*);
template<> ::SiteServerUI_ClientStatus_Response_Payment* Arena::CreateMaybeMessage<::SiteServerUI_ClientStatus_Response_Payment>(Arena*);
template<> ::SiteServerUI_ContentCacheConfig_Request* Arena::CreateMaybeMessage<::SiteServerUI_ContentCacheConfig_Request>(Arena*);
template<> ::SiteServerUI_ContentCacheConfig_Response* Arena::CreateMaybeMessage<::SiteServerUI_ContentCacheConfig_Response>(Arena*);
template<> ::SiteServerUI_ContentCacheStatus_Request* Arena::CreateMaybeMessage<::SiteServerUI_ContentCacheStatus_Request>(Arena*);
template<> ::SiteServerUI_ContentCacheStatus_Response* Arena::CreateMaybeMessage<::SiteServerUI_ContentCacheStatus_Response>(Arena*);
template<> ::SiteServerUI_GetLanguage_Request* Arena::CreateMaybeMessage<::SiteServerUI_GetLanguage_Request>(Arena*);
template<> ::SiteServerUI_GetLanguage_Response* Arena::CreateMaybeMessage<::SiteServerUI_GetLanguage_Response>(Arena*);
template<> ::SiteServerUI_LoginStatus_Request* Arena::CreateMaybeMessage<::SiteServerUI_LoginStatus_Request>(Arena*);
template<> ::SiteServerUI_LoginStatus_Response* Arena::CreateMaybeMessage<::SiteServerUI_LoginStatus_Response>(Arena*);
template<> ::SiteServerUI_Login_Request* Arena::CreateMaybeMessage<::SiteServerUI_Login_Request>(Arena*);
template<> ::SiteServerUI_Login_Response* Arena::CreateMaybeMessage<::SiteServerUI_Login_Response>(Arena*);
template<> ::SiteServerUI_Logout_Request* Arena::CreateMaybeMessage<::SiteServerUI_Logout_Request>(Arena*);
template<> ::SiteServerUI_Logout_Response* Arena::CreateMaybeMessage<::SiteServerUI_Logout_Response>(Arena*);
template<> ::SiteServerUI_Quit_Request* Arena::CreateMaybeMessage<::SiteServerUI_Quit_Request>(Arena*);
template<> ::SiteServerUI_Quit_Response* Arena::CreateMaybeMessage<::SiteServerUI_Quit_Response>(Arena*);
template<> ::SiteServerUI_SetLanguage_Request* Arena::CreateMaybeMessage<::SiteServerUI_SetLanguage_Request>(Arena*);
template<> ::SiteServerUI_SetLanguage_Response* Arena::CreateMaybeMessage<::SiteServerUI_SetLanguage_Response>(Arena*);
template<> ::SiteServerUI_Status_Request* Arena::CreateMaybeMessage<::SiteServerUI_Status_Request>(Arena*);
template<> ::SiteServerUI_Status_Response* Arena::CreateMaybeMessage<::SiteServerUI_Status_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SiteServerUI_Login_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_Login_Request) */ {
 public:
  inline SiteServerUI_Login_Request() : SiteServerUI_Login_Request(nullptr) {}
  ~SiteServerUI_Login_Request() override;
  explicit constexpr SiteServerUI_Login_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Login_Request(const SiteServerUI_Login_Request& from);
  SiteServerUI_Login_Request(SiteServerUI_Login_Request&& from) noexcept
    : SiteServerUI_Login_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Login_Request& operator=(const SiteServerUI_Login_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Login_Request& operator=(SiteServerUI_Login_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Login_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Login_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Login_Request*>(
               &_SiteServerUI_Login_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteServerUI_Login_Request& a, SiteServerUI_Login_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Login_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Login_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Login_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Login_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_Login_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_Login_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_Login_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Login_Request";
  }
  protected:
  explicit SiteServerUI_Login_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kSteamguardcodeFieldNumber = 3,
    kRememberPasswordFieldNumber = 4,
  };
  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string steamguardcode = 3;
  bool has_steamguardcode() const;
  private:
  bool _internal_has_steamguardcode() const;
  public:
  void clear_steamguardcode();
  const std::string& steamguardcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_steamguardcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_steamguardcode();
  PROTOBUF_NODISCARD std::string* release_steamguardcode();
  void set_allocated_steamguardcode(std::string* steamguardcode);
  private:
  const std::string& _internal_steamguardcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_steamguardcode(const std::string& value);
  std::string* _internal_mutable_steamguardcode();
  public:

  // optional bool remember_password = 4;
  bool has_remember_password() const;
  private:
  bool _internal_has_remember_password() const;
  public:
  void clear_remember_password();
  bool remember_password() const;
  void set_remember_password(bool value);
  private:
  bool _internal_remember_password() const;
  void _internal_set_remember_password(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_Login_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steamguardcode_;
  bool remember_password_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_Login_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_Login_Response) */ {
 public:
  inline SiteServerUI_Login_Response() : SiteServerUI_Login_Response(nullptr) {}
  ~SiteServerUI_Login_Response() override;
  explicit constexpr SiteServerUI_Login_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Login_Response(const SiteServerUI_Login_Response& from);
  SiteServerUI_Login_Response(SiteServerUI_Login_Response&& from) noexcept
    : SiteServerUI_Login_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Login_Response& operator=(const SiteServerUI_Login_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Login_Response& operator=(SiteServerUI_Login_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Login_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Login_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Login_Response*>(
               &_SiteServerUI_Login_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SiteServerUI_Login_Response& a, SiteServerUI_Login_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Login_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Login_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Login_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Login_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_Login_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_Login_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_Login_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Login_Response";
  }
  protected:
  explicit SiteServerUI_Login_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogonStateFieldNumber = 1,
    kLogonEresultFieldNumber = 2,
  };
  // optional int32 logon_state = 1;
  bool has_logon_state() const;
  private:
  bool _internal_has_logon_state() const;
  public:
  void clear_logon_state();
  int32_t logon_state() const;
  void set_logon_state(int32_t value);
  private:
  int32_t _internal_logon_state() const;
  void _internal_set_logon_state(int32_t value);
  public:

  // optional int32 logon_eresult = 2;
  bool has_logon_eresult() const;
  private:
  bool _internal_has_logon_eresult() const;
  public:
  void clear_logon_eresult();
  int32_t logon_eresult() const;
  void set_logon_eresult(int32_t value);
  private:
  int32_t _internal_logon_eresult() const;
  void _internal_set_logon_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_Login_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t logon_state_;
  int32_t logon_eresult_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_LoginStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_LoginStatus_Request) */ {
 public:
  inline SiteServerUI_LoginStatus_Request() : SiteServerUI_LoginStatus_Request(nullptr) {}
  explicit constexpr SiteServerUI_LoginStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_LoginStatus_Request(const SiteServerUI_LoginStatus_Request& from);
  SiteServerUI_LoginStatus_Request(SiteServerUI_LoginStatus_Request&& from) noexcept
    : SiteServerUI_LoginStatus_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_LoginStatus_Request& operator=(const SiteServerUI_LoginStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_LoginStatus_Request& operator=(SiteServerUI_LoginStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_LoginStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_LoginStatus_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_LoginStatus_Request*>(
               &_SiteServerUI_LoginStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SiteServerUI_LoginStatus_Request& a, SiteServerUI_LoginStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_LoginStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_LoginStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_LoginStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_LoginStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_LoginStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_LoginStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_LoginStatus_Request";
  }
  protected:
  explicit SiteServerUI_LoginStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_LoginStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_LoginStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_LoginStatus_Response) */ {
 public:
  inline SiteServerUI_LoginStatus_Response() : SiteServerUI_LoginStatus_Response(nullptr) {}
  ~SiteServerUI_LoginStatus_Response() override;
  explicit constexpr SiteServerUI_LoginStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_LoginStatus_Response(const SiteServerUI_LoginStatus_Response& from);
  SiteServerUI_LoginStatus_Response(SiteServerUI_LoginStatus_Response&& from) noexcept
    : SiteServerUI_LoginStatus_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_LoginStatus_Response& operator=(const SiteServerUI_LoginStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_LoginStatus_Response& operator=(SiteServerUI_LoginStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_LoginStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_LoginStatus_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_LoginStatus_Response*>(
               &_SiteServerUI_LoginStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SiteServerUI_LoginStatus_Response& a, SiteServerUI_LoginStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_LoginStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_LoginStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_LoginStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_LoginStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_LoginStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_LoginStatus_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_LoginStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_LoginStatus_Response";
  }
  protected:
  explicit SiteServerUI_LoginStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kCachedCredentialsFieldNumber = 2,
    kLogonStateFieldNumber = 3,
    kLogonEresultFieldNumber = 4,
  };
  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional bool cached_credentials = 2;
  bool has_cached_credentials() const;
  private:
  bool _internal_has_cached_credentials() const;
  public:
  void clear_cached_credentials();
  bool cached_credentials() const;
  void set_cached_credentials(bool value);
  private:
  bool _internal_cached_credentials() const;
  void _internal_set_cached_credentials(bool value);
  public:

  // optional int32 logon_state = 3;
  bool has_logon_state() const;
  private:
  bool _internal_has_logon_state() const;
  public:
  void clear_logon_state();
  int32_t logon_state() const;
  void set_logon_state(int32_t value);
  private:
  int32_t _internal_logon_state() const;
  void _internal_set_logon_state(int32_t value);
  public:

  // optional int32 logon_eresult = 4;
  bool has_logon_eresult() const;
  private:
  bool _internal_has_logon_eresult() const;
  public:
  void clear_logon_eresult();
  int32_t logon_eresult() const;
  void set_logon_eresult(int32_t value);
  private:
  int32_t _internal_logon_eresult() const;
  void _internal_set_logon_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_LoginStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  bool cached_credentials_;
  int32_t logon_state_;
  int32_t logon_eresult_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_CancelLogin_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_CancelLogin_Request) */ {
 public:
  inline SiteServerUI_CancelLogin_Request() : SiteServerUI_CancelLogin_Request(nullptr) {}
  explicit constexpr SiteServerUI_CancelLogin_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_CancelLogin_Request(const SiteServerUI_CancelLogin_Request& from);
  SiteServerUI_CancelLogin_Request(SiteServerUI_CancelLogin_Request&& from) noexcept
    : SiteServerUI_CancelLogin_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_CancelLogin_Request& operator=(const SiteServerUI_CancelLogin_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_CancelLogin_Request& operator=(SiteServerUI_CancelLogin_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_CancelLogin_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_CancelLogin_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_CancelLogin_Request*>(
               &_SiteServerUI_CancelLogin_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SiteServerUI_CancelLogin_Request& a, SiteServerUI_CancelLogin_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_CancelLogin_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_CancelLogin_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_CancelLogin_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_CancelLogin_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_CancelLogin_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_CancelLogin_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_CancelLogin_Request";
  }
  protected:
  explicit SiteServerUI_CancelLogin_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_CancelLogin_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_CancelLogin_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_CancelLogin_Response) */ {
 public:
  inline SiteServerUI_CancelLogin_Response() : SiteServerUI_CancelLogin_Response(nullptr) {}
  ~SiteServerUI_CancelLogin_Response() override;
  explicit constexpr SiteServerUI_CancelLogin_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_CancelLogin_Response(const SiteServerUI_CancelLogin_Response& from);
  SiteServerUI_CancelLogin_Response(SiteServerUI_CancelLogin_Response&& from) noexcept
    : SiteServerUI_CancelLogin_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_CancelLogin_Response& operator=(const SiteServerUI_CancelLogin_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_CancelLogin_Response& operator=(SiteServerUI_CancelLogin_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_CancelLogin_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_CancelLogin_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_CancelLogin_Response*>(
               &_SiteServerUI_CancelLogin_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SiteServerUI_CancelLogin_Response& a, SiteServerUI_CancelLogin_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_CancelLogin_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_CancelLogin_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_CancelLogin_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_CancelLogin_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_CancelLogin_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_CancelLogin_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_CancelLogin_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_CancelLogin_Response";
  }
  protected:
  explicit SiteServerUI_CancelLogin_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogonStateFieldNumber = 1,
    kLogonEresultFieldNumber = 2,
  };
  // optional int32 logon_state = 1;
  bool has_logon_state() const;
  private:
  bool _internal_has_logon_state() const;
  public:
  void clear_logon_state();
  int32_t logon_state() const;
  void set_logon_state(int32_t value);
  private:
  int32_t _internal_logon_state() const;
  void _internal_set_logon_state(int32_t value);
  public:

  // optional int32 logon_eresult = 2;
  bool has_logon_eresult() const;
  private:
  bool _internal_has_logon_eresult() const;
  public:
  void clear_logon_eresult();
  int32_t logon_eresult() const;
  void set_logon_eresult(int32_t value);
  private:
  int32_t _internal_logon_eresult() const;
  void _internal_set_logon_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_CancelLogin_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t logon_state_;
  int32_t logon_eresult_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_Logout_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_Logout_Request) */ {
 public:
  inline SiteServerUI_Logout_Request() : SiteServerUI_Logout_Request(nullptr) {}
  explicit constexpr SiteServerUI_Logout_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Logout_Request(const SiteServerUI_Logout_Request& from);
  SiteServerUI_Logout_Request(SiteServerUI_Logout_Request&& from) noexcept
    : SiteServerUI_Logout_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Logout_Request& operator=(const SiteServerUI_Logout_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Logout_Request& operator=(SiteServerUI_Logout_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Logout_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Logout_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Logout_Request*>(
               &_SiteServerUI_Logout_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SiteServerUI_Logout_Request& a, SiteServerUI_Logout_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Logout_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Logout_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Logout_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Logout_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_Logout_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_Logout_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Logout_Request";
  }
  protected:
  explicit SiteServerUI_Logout_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_Logout_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_Logout_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_Logout_Response) */ {
 public:
  inline SiteServerUI_Logout_Response() : SiteServerUI_Logout_Response(nullptr) {}
  ~SiteServerUI_Logout_Response() override;
  explicit constexpr SiteServerUI_Logout_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Logout_Response(const SiteServerUI_Logout_Response& from);
  SiteServerUI_Logout_Response(SiteServerUI_Logout_Response&& from) noexcept
    : SiteServerUI_Logout_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Logout_Response& operator=(const SiteServerUI_Logout_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Logout_Response& operator=(SiteServerUI_Logout_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Logout_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Logout_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Logout_Response*>(
               &_SiteServerUI_Logout_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SiteServerUI_Logout_Response& a, SiteServerUI_Logout_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Logout_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Logout_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Logout_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Logout_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_Logout_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_Logout_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_Logout_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Logout_Response";
  }
  protected:
  explicit SiteServerUI_Logout_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogonStateFieldNumber = 1,
    kLogoutEresultFieldNumber = 2,
  };
  // optional int32 logon_state = 1;
  bool has_logon_state() const;
  private:
  bool _internal_has_logon_state() const;
  public:
  void clear_logon_state();
  int32_t logon_state() const;
  void set_logon_state(int32_t value);
  private:
  int32_t _internal_logon_state() const;
  void _internal_set_logon_state(int32_t value);
  public:

  // optional int32 logout_eresult = 2;
  bool has_logout_eresult() const;
  private:
  bool _internal_has_logout_eresult() const;
  public:
  void clear_logout_eresult();
  int32_t logout_eresult() const;
  void set_logout_eresult(int32_t value);
  private:
  int32_t _internal_logout_eresult() const;
  void _internal_set_logout_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_Logout_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t logon_state_;
  int32_t logout_eresult_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_Quit_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_Quit_Request) */ {
 public:
  inline SiteServerUI_Quit_Request() : SiteServerUI_Quit_Request(nullptr) {}
  ~SiteServerUI_Quit_Request() override;
  explicit constexpr SiteServerUI_Quit_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Quit_Request(const SiteServerUI_Quit_Request& from);
  SiteServerUI_Quit_Request(SiteServerUI_Quit_Request&& from) noexcept
    : SiteServerUI_Quit_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Quit_Request& operator=(const SiteServerUI_Quit_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Quit_Request& operator=(SiteServerUI_Quit_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Quit_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Quit_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Quit_Request*>(
               &_SiteServerUI_Quit_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SiteServerUI_Quit_Request& a, SiteServerUI_Quit_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Quit_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Quit_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Quit_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Quit_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_Quit_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_Quit_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_Quit_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Quit_Request";
  }
  protected:
  explicit SiteServerUI_Quit_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRestartFieldNumber = 1,
  };
  // optional bool restart = 1;
  bool has_restart() const;
  private:
  bool _internal_has_restart() const;
  public:
  void clear_restart();
  bool restart() const;
  void set_restart(bool value);
  private:
  bool _internal_restart() const;
  void _internal_set_restart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_Quit_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool restart_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_Quit_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_Quit_Response) */ {
 public:
  inline SiteServerUI_Quit_Response() : SiteServerUI_Quit_Response(nullptr) {}
  explicit constexpr SiteServerUI_Quit_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Quit_Response(const SiteServerUI_Quit_Response& from);
  SiteServerUI_Quit_Response(SiteServerUI_Quit_Response&& from) noexcept
    : SiteServerUI_Quit_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Quit_Response& operator=(const SiteServerUI_Quit_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Quit_Response& operator=(SiteServerUI_Quit_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Quit_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Quit_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Quit_Response*>(
               &_SiteServerUI_Quit_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SiteServerUI_Quit_Response& a, SiteServerUI_Quit_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Quit_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Quit_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Quit_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Quit_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_Quit_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_Quit_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Quit_Response";
  }
  protected:
  explicit SiteServerUI_Quit_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_Quit_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_Status_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_Status_Request) */ {
 public:
  inline SiteServerUI_Status_Request() : SiteServerUI_Status_Request(nullptr) {}
  explicit constexpr SiteServerUI_Status_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Status_Request(const SiteServerUI_Status_Request& from);
  SiteServerUI_Status_Request(SiteServerUI_Status_Request&& from) noexcept
    : SiteServerUI_Status_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Status_Request& operator=(const SiteServerUI_Status_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Status_Request& operator=(SiteServerUI_Status_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Status_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Status_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Status_Request*>(
               &_SiteServerUI_Status_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SiteServerUI_Status_Request& a, SiteServerUI_Status_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Status_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Status_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Status_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Status_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_Status_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_Status_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Status_Request";
  }
  protected:
  explicit SiteServerUI_Status_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_Status_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_Status_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_Status_Response) */ {
 public:
  inline SiteServerUI_Status_Response() : SiteServerUI_Status_Response(nullptr) {}
  ~SiteServerUI_Status_Response() override;
  explicit constexpr SiteServerUI_Status_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_Status_Response(const SiteServerUI_Status_Response& from);
  SiteServerUI_Status_Response(SiteServerUI_Status_Response&& from) noexcept
    : SiteServerUI_Status_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_Status_Response& operator=(const SiteServerUI_Status_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_Status_Response& operator=(SiteServerUI_Status_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_Status_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_Status_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_Status_Response*>(
               &_SiteServerUI_Status_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SiteServerUI_Status_Response& a, SiteServerUI_Status_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_Status_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_Status_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_Status_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_Status_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_Status_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_Status_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_Status_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_Status_Response";
  }
  protected:
  explicit SiteServerUI_Status_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogonStateFieldNumber = 1,
    kLogonEresultFieldNumber = 2,
    kConnectedFieldNumber = 3,
    kCacheEnabledFieldNumber = 4,
    kAcctStatusFieldNumber = 5,
  };
  // optional int32 logon_state = 1;
  bool has_logon_state() const;
  private:
  bool _internal_has_logon_state() const;
  public:
  void clear_logon_state();
  int32_t logon_state() const;
  void set_logon_state(int32_t value);
  private:
  int32_t _internal_logon_state() const;
  void _internal_set_logon_state(int32_t value);
  public:

  // optional int32 logon_eresult = 2;
  bool has_logon_eresult() const;
  private:
  bool _internal_has_logon_eresult() const;
  public:
  void clear_logon_eresult();
  int32_t logon_eresult() const;
  void set_logon_eresult(int32_t value);
  private:
  int32_t _internal_logon_eresult() const;
  void _internal_set_logon_eresult(int32_t value);
  public:

  // optional bool connected = 3;
  bool has_connected() const;
  private:
  bool _internal_has_connected() const;
  public:
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // optional bool cache_enabled = 4;
  bool has_cache_enabled() const;
  private:
  bool _internal_has_cache_enabled() const;
  public:
  void clear_cache_enabled();
  bool cache_enabled() const;
  void set_cache_enabled(bool value);
  private:
  bool _internal_cache_enabled() const;
  void _internal_set_cache_enabled(bool value);
  public:

  // optional int32 acct_status = 5;
  bool has_acct_status() const;
  private:
  bool _internal_has_acct_status() const;
  public:
  void clear_acct_status();
  int32_t acct_status() const;
  void set_acct_status(int32_t value);
  private:
  int32_t _internal_acct_status() const;
  void _internal_set_acct_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_Status_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t logon_state_;
  int32_t logon_eresult_;
  bool connected_;
  bool cache_enabled_;
  int32_t acct_status_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_GetLanguage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_GetLanguage_Request) */ {
 public:
  inline SiteServerUI_GetLanguage_Request() : SiteServerUI_GetLanguage_Request(nullptr) {}
  explicit constexpr SiteServerUI_GetLanguage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_GetLanguage_Request(const SiteServerUI_GetLanguage_Request& from);
  SiteServerUI_GetLanguage_Request(SiteServerUI_GetLanguage_Request&& from) noexcept
    : SiteServerUI_GetLanguage_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_GetLanguage_Request& operator=(const SiteServerUI_GetLanguage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_GetLanguage_Request& operator=(SiteServerUI_GetLanguage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_GetLanguage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_GetLanguage_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_GetLanguage_Request*>(
               &_SiteServerUI_GetLanguage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SiteServerUI_GetLanguage_Request& a, SiteServerUI_GetLanguage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_GetLanguage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_GetLanguage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_GetLanguage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_GetLanguage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_GetLanguage_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_GetLanguage_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_GetLanguage_Request";
  }
  protected:
  explicit SiteServerUI_GetLanguage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_GetLanguage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_GetLanguage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_GetLanguage_Response) */ {
 public:
  inline SiteServerUI_GetLanguage_Response() : SiteServerUI_GetLanguage_Response(nullptr) {}
  ~SiteServerUI_GetLanguage_Response() override;
  explicit constexpr SiteServerUI_GetLanguage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_GetLanguage_Response(const SiteServerUI_GetLanguage_Response& from);
  SiteServerUI_GetLanguage_Response(SiteServerUI_GetLanguage_Response&& from) noexcept
    : SiteServerUI_GetLanguage_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_GetLanguage_Response& operator=(const SiteServerUI_GetLanguage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_GetLanguage_Response& operator=(SiteServerUI_GetLanguage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_GetLanguage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_GetLanguage_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_GetLanguage_Response*>(
               &_SiteServerUI_GetLanguage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SiteServerUI_GetLanguage_Response& a, SiteServerUI_GetLanguage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_GetLanguage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_GetLanguage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_GetLanguage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_GetLanguage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_GetLanguage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_GetLanguage_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_GetLanguage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_GetLanguage_Response";
  }
  protected:
  explicit SiteServerUI_GetLanguage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_GetLanguage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_SetLanguage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_SetLanguage_Request) */ {
 public:
  inline SiteServerUI_SetLanguage_Request() : SiteServerUI_SetLanguage_Request(nullptr) {}
  ~SiteServerUI_SetLanguage_Request() override;
  explicit constexpr SiteServerUI_SetLanguage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_SetLanguage_Request(const SiteServerUI_SetLanguage_Request& from);
  SiteServerUI_SetLanguage_Request(SiteServerUI_SetLanguage_Request&& from) noexcept
    : SiteServerUI_SetLanguage_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_SetLanguage_Request& operator=(const SiteServerUI_SetLanguage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_SetLanguage_Request& operator=(SiteServerUI_SetLanguage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_SetLanguage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_SetLanguage_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_SetLanguage_Request*>(
               &_SiteServerUI_SetLanguage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SiteServerUI_SetLanguage_Request& a, SiteServerUI_SetLanguage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_SetLanguage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_SetLanguage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_SetLanguage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_SetLanguage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_SetLanguage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_SetLanguage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_SetLanguage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_SetLanguage_Request";
  }
  protected:
  explicit SiteServerUI_SetLanguage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // optional string language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_SetLanguage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_SetLanguage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_SetLanguage_Response) */ {
 public:
  inline SiteServerUI_SetLanguage_Response() : SiteServerUI_SetLanguage_Response(nullptr) {}
  explicit constexpr SiteServerUI_SetLanguage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_SetLanguage_Response(const SiteServerUI_SetLanguage_Response& from);
  SiteServerUI_SetLanguage_Response(SiteServerUI_SetLanguage_Response&& from) noexcept
    : SiteServerUI_SetLanguage_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_SetLanguage_Response& operator=(const SiteServerUI_SetLanguage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_SetLanguage_Response& operator=(SiteServerUI_SetLanguage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_SetLanguage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_SetLanguage_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_SetLanguage_Response*>(
               &_SiteServerUI_SetLanguage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SiteServerUI_SetLanguage_Response& a, SiteServerUI_SetLanguage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_SetLanguage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_SetLanguage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_SetLanguage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_SetLanguage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_SetLanguage_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_SetLanguage_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_SetLanguage_Response";
  }
  protected:
  explicit SiteServerUI_SetLanguage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_SetLanguage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ClientStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_ClientStatus_Request) */ {
 public:
  inline SiteServerUI_ClientStatus_Request() : SiteServerUI_ClientStatus_Request(nullptr) {}
  explicit constexpr SiteServerUI_ClientStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ClientStatus_Request(const SiteServerUI_ClientStatus_Request& from);
  SiteServerUI_ClientStatus_Request(SiteServerUI_ClientStatus_Request&& from) noexcept
    : SiteServerUI_ClientStatus_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ClientStatus_Request& operator=(const SiteServerUI_ClientStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ClientStatus_Request& operator=(SiteServerUI_ClientStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ClientStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ClientStatus_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ClientStatus_Request*>(
               &_SiteServerUI_ClientStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SiteServerUI_ClientStatus_Request& a, SiteServerUI_ClientStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ClientStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ClientStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ClientStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ClientStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_ClientStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_ClientStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ClientStatus_Request";
  }
  protected:
  explicit SiteServerUI_ClientStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_ClientStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ClientStatus_Response_ClientInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_ClientStatus_Response.ClientInfo) */ {
 public:
  inline SiteServerUI_ClientStatus_Response_ClientInfo() : SiteServerUI_ClientStatus_Response_ClientInfo(nullptr) {}
  ~SiteServerUI_ClientStatus_Response_ClientInfo() override;
  explicit constexpr SiteServerUI_ClientStatus_Response_ClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ClientStatus_Response_ClientInfo(const SiteServerUI_ClientStatus_Response_ClientInfo& from);
  SiteServerUI_ClientStatus_Response_ClientInfo(SiteServerUI_ClientStatus_Response_ClientInfo&& from) noexcept
    : SiteServerUI_ClientStatus_Response_ClientInfo() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ClientStatus_Response_ClientInfo& operator=(const SiteServerUI_ClientStatus_Response_ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ClientStatus_Response_ClientInfo& operator=(SiteServerUI_ClientStatus_Response_ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ClientStatus_Response_ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ClientStatus_Response_ClientInfo* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ClientStatus_Response_ClientInfo*>(
               &_SiteServerUI_ClientStatus_Response_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SiteServerUI_ClientStatus_Response_ClientInfo& a, SiteServerUI_ClientStatus_Response_ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ClientStatus_Response_ClientInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ClientStatus_Response_ClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ClientStatus_Response_ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ClientStatus_Response_ClientInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_ClientStatus_Response_ClientInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_ClientStatus_Response_ClientInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_ClientStatus_Response_ClientInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ClientStatus_Response.ClientInfo";
  }
  protected:
  explicit SiteServerUI_ClientStatus_Response_ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 2,
    kIpFieldNumber = 1,
    kConnectedFieldNumber = 3,
    kInstanceIdFieldNumber = 4,
  };
  // optional string hostname = 2;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional uint32 ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // optional bool connected = 3;
  bool has_connected() const;
  private:
  bool _internal_has_connected() const;
  public:
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // optional uint64 instance_id = 4;
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  uint64_t instance_id() const;
  void set_instance_id(uint64_t value);
  private:
  uint64_t _internal_instance_id() const;
  void _internal_set_instance_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_ClientStatus_Response.ClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  uint32_t ip_;
  bool connected_;
  uint64_t instance_id_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ClientStatus_Response_Payment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_ClientStatus_Response.Payment) */ {
 public:
  inline SiteServerUI_ClientStatus_Response_Payment() : SiteServerUI_ClientStatus_Response_Payment(nullptr) {}
  ~SiteServerUI_ClientStatus_Response_Payment() override;
  explicit constexpr SiteServerUI_ClientStatus_Response_Payment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ClientStatus_Response_Payment(const SiteServerUI_ClientStatus_Response_Payment& from);
  SiteServerUI_ClientStatus_Response_Payment(SiteServerUI_ClientStatus_Response_Payment&& from) noexcept
    : SiteServerUI_ClientStatus_Response_Payment() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ClientStatus_Response_Payment& operator=(const SiteServerUI_ClientStatus_Response_Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ClientStatus_Response_Payment& operator=(SiteServerUI_ClientStatus_Response_Payment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ClientStatus_Response_Payment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ClientStatus_Response_Payment* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ClientStatus_Response_Payment*>(
               &_SiteServerUI_ClientStatus_Response_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SiteServerUI_ClientStatus_Response_Payment& a, SiteServerUI_ClientStatus_Response_Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ClientStatus_Response_Payment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ClientStatus_Response_Payment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ClientStatus_Response_Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ClientStatus_Response_Payment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_ClientStatus_Response_Payment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_ClientStatus_Response_Payment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_ClientStatus_Response_Payment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ClientStatus_Response.Payment";
  }
  protected:
  explicit SiteServerUI_ClientStatus_Response_Payment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 3,
    kHostnameFieldNumber = 6,
    kPersonaNameFieldNumber = 7,
    kProfileUrlFieldNumber = 8,
    kAvatarUrlFieldNumber = 9,
    kTransidFieldNumber = 1,
    kSteamidFieldNumber = 2,
    kTimeCreatedFieldNumber = 4,
    kPurchaseStatusFieldNumber = 5,
  };
  // optional string amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // optional string hostname = 6;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional string persona_name = 7;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional string profile_url = 8;
  bool has_profile_url() const;
  private:
  bool _internal_has_profile_url() const;
  public:
  void clear_profile_url();
  const std::string& profile_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_url();
  PROTOBUF_NODISCARD std::string* release_profile_url();
  void set_allocated_profile_url(std::string* profile_url);
  private:
  const std::string& _internal_profile_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_url(const std::string& value);
  std::string* _internal_mutable_profile_url();
  public:

  // optional string avatar_url = 9;
  bool has_avatar_url() const;
  private:
  bool _internal_has_avatar_url() const;
  public:
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // optional uint64 transid = 1;
  bool has_transid() const;
  private:
  bool _internal_has_transid() const;
  public:
  void clear_transid();
  uint64_t transid() const;
  void set_transid(uint64_t value);
  private:
  uint64_t _internal_transid() const;
  void _internal_set_transid(uint64_t value);
  public:

  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional int32 time_created = 4;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  int32_t time_created() const;
  void set_time_created(int32_t value);
  private:
  int32_t _internal_time_created() const;
  void _internal_set_time_created(int32_t value);
  public:

  // optional int32 purchase_status = 5;
  bool has_purchase_status() const;
  private:
  bool _internal_has_purchase_status() const;
  public:
  void clear_purchase_status();
  int32_t purchase_status() const;
  void set_purchase_status(int32_t value);
  private:
  int32_t _internal_purchase_status() const;
  void _internal_set_purchase_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_ClientStatus_Response.Payment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  uint64_t transid_;
  uint64_t steamid_;
  int32_t time_created_;
  int32_t purchase_status_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ClientStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_ClientStatus_Response) */ {
 public:
  inline SiteServerUI_ClientStatus_Response() : SiteServerUI_ClientStatus_Response(nullptr) {}
  ~SiteServerUI_ClientStatus_Response() override;
  explicit constexpr SiteServerUI_ClientStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ClientStatus_Response(const SiteServerUI_ClientStatus_Response& from);
  SiteServerUI_ClientStatus_Response(SiteServerUI_ClientStatus_Response&& from) noexcept
    : SiteServerUI_ClientStatus_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ClientStatus_Response& operator=(const SiteServerUI_ClientStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ClientStatus_Response& operator=(SiteServerUI_ClientStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ClientStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ClientStatus_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ClientStatus_Response*>(
               &_SiteServerUI_ClientStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SiteServerUI_ClientStatus_Response& a, SiteServerUI_ClientStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ClientStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ClientStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ClientStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ClientStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_ClientStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_ClientStatus_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_ClientStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ClientStatus_Response";
  }
  protected:
  explicit SiteServerUI_ClientStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SiteServerUI_ClientStatus_Response_ClientInfo ClientInfo;
  typedef SiteServerUI_ClientStatus_Response_Payment Payment;

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 4,
    kPaymentsFieldNumber = 5,
  };
  // repeated .SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::SiteServerUI_ClientStatus_Response_ClientInfo* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_ClientInfo >*
      mutable_clients();
  private:
  const ::SiteServerUI_ClientStatus_Response_ClientInfo& _internal_clients(int index) const;
  ::SiteServerUI_ClientStatus_Response_ClientInfo* _internal_add_clients();
  public:
  const ::SiteServerUI_ClientStatus_Response_ClientInfo& clients(int index) const;
  ::SiteServerUI_ClientStatus_Response_ClientInfo* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_ClientInfo >&
      clients() const;

  // repeated .SiteServerUI_ClientStatus_Response.Payment payments = 5;
  int payments_size() const;
  private:
  int _internal_payments_size() const;
  public:
  void clear_payments();
  ::SiteServerUI_ClientStatus_Response_Payment* mutable_payments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_Payment >*
      mutable_payments();
  private:
  const ::SiteServerUI_ClientStatus_Response_Payment& _internal_payments(int index) const;
  ::SiteServerUI_ClientStatus_Response_Payment* _internal_add_payments();
  public:
  const ::SiteServerUI_ClientStatus_Response_Payment& payments(int index) const;
  ::SiteServerUI_ClientStatus_Response_Payment* add_payments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_Payment >&
      payments() const;

  // @@protoc_insertion_point(class_scope:SiteServerUI_ClientStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_ClientInfo > clients_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_Payment > payments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ContentCacheStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_ContentCacheStatus_Request) */ {
 public:
  inline SiteServerUI_ContentCacheStatus_Request() : SiteServerUI_ContentCacheStatus_Request(nullptr) {}
  explicit constexpr SiteServerUI_ContentCacheStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ContentCacheStatus_Request(const SiteServerUI_ContentCacheStatus_Request& from);
  SiteServerUI_ContentCacheStatus_Request(SiteServerUI_ContentCacheStatus_Request&& from) noexcept
    : SiteServerUI_ContentCacheStatus_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ContentCacheStatus_Request& operator=(const SiteServerUI_ContentCacheStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ContentCacheStatus_Request& operator=(SiteServerUI_ContentCacheStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ContentCacheStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ContentCacheStatus_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ContentCacheStatus_Request*>(
               &_SiteServerUI_ContentCacheStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SiteServerUI_ContentCacheStatus_Request& a, SiteServerUI_ContentCacheStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ContentCacheStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ContentCacheStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ContentCacheStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ContentCacheStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_ContentCacheStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_ContentCacheStatus_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ContentCacheStatus_Request";
  }
  protected:
  explicit SiteServerUI_ContentCacheStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_ContentCacheStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ContentCacheStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_ContentCacheStatus_Response) */ {
 public:
  inline SiteServerUI_ContentCacheStatus_Response() : SiteServerUI_ContentCacheStatus_Response(nullptr) {}
  ~SiteServerUI_ContentCacheStatus_Response() override;
  explicit constexpr SiteServerUI_ContentCacheStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ContentCacheStatus_Response(const SiteServerUI_ContentCacheStatus_Response& from);
  SiteServerUI_ContentCacheStatus_Response(SiteServerUI_ContentCacheStatus_Response&& from) noexcept
    : SiteServerUI_ContentCacheStatus_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ContentCacheStatus_Response& operator=(const SiteServerUI_ContentCacheStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ContentCacheStatus_Response& operator=(SiteServerUI_ContentCacheStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ContentCacheStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ContentCacheStatus_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ContentCacheStatus_Response*>(
               &_SiteServerUI_ContentCacheStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SiteServerUI_ContentCacheStatus_Response& a, SiteServerUI_ContentCacheStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ContentCacheStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ContentCacheStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ContentCacheStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ContentCacheStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_ContentCacheStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_ContentCacheStatus_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_ContentCacheStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ContentCacheStatus_Response";
  }
  protected:
  explicit SiteServerUI_ContentCacheStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheLocationFieldNumber = 3,
    kExplicitIpAddressFieldNumber = 9,
    kPortFieldNumber = 2,
    kMaxSizeGbFieldNumber = 4,
    kEnabledFieldNumber = 1,
    kP2PEnabledFieldNumber = 5,
    kExternalProcessFieldNumber = 10,
    kCurrentSizeGbFieldNumber = 6,
    kCurrentBwFieldNumber = 7,
    kTotalBytesServedFieldNumber = 8,
  };
  // optional string cache_location = 3;
  bool has_cache_location() const;
  private:
  bool _internal_has_cache_location() const;
  public:
  void clear_cache_location();
  const std::string& cache_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_location();
  PROTOBUF_NODISCARD std::string* release_cache_location();
  void set_allocated_cache_location(std::string* cache_location);
  private:
  const std::string& _internal_cache_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_location(const std::string& value);
  std::string* _internal_mutable_cache_location();
  public:

  // optional string explicit_ip_address = 9;
  bool has_explicit_ip_address() const;
  private:
  bool _internal_has_explicit_ip_address() const;
  public:
  void clear_explicit_ip_address();
  const std::string& explicit_ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explicit_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explicit_ip_address();
  PROTOBUF_NODISCARD std::string* release_explicit_ip_address();
  void set_allocated_explicit_ip_address(std::string* explicit_ip_address);
  private:
  const std::string& _internal_explicit_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explicit_ip_address(const std::string& value);
  std::string* _internal_mutable_explicit_ip_address();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // optional uint32 max_size_gb = 4;
  bool has_max_size_gb() const;
  private:
  bool _internal_has_max_size_gb() const;
  public:
  void clear_max_size_gb();
  uint32_t max_size_gb() const;
  void set_max_size_gb(uint32_t value);
  private:
  uint32_t _internal_max_size_gb() const;
  void _internal_set_max_size_gb(uint32_t value);
  public:

  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool p2p_enabled = 5;
  bool has_p2p_enabled() const;
  private:
  bool _internal_has_p2p_enabled() const;
  public:
  void clear_p2p_enabled();
  bool p2p_enabled() const;
  void set_p2p_enabled(bool value);
  private:
  bool _internal_p2p_enabled() const;
  void _internal_set_p2p_enabled(bool value);
  public:

  // optional bool external_process = 10;
  bool has_external_process() const;
  private:
  bool _internal_has_external_process() const;
  public:
  void clear_external_process();
  bool external_process() const;
  void set_external_process(bool value);
  private:
  bool _internal_external_process() const;
  void _internal_set_external_process(bool value);
  public:

  // optional uint32 current_size_gb = 6;
  bool has_current_size_gb() const;
  private:
  bool _internal_has_current_size_gb() const;
  public:
  void clear_current_size_gb();
  uint32_t current_size_gb() const;
  void set_current_size_gb(uint32_t value);
  private:
  uint32_t _internal_current_size_gb() const;
  void _internal_set_current_size_gb(uint32_t value);
  public:

  // optional uint64 current_bw = 7;
  bool has_current_bw() const;
  private:
  bool _internal_has_current_bw() const;
  public:
  void clear_current_bw();
  uint64_t current_bw() const;
  void set_current_bw(uint64_t value);
  private:
  uint64_t _internal_current_bw() const;
  void _internal_set_current_bw(uint64_t value);
  public:

  // optional uint64 total_bytes_served = 8;
  bool has_total_bytes_served() const;
  private:
  bool _internal_has_total_bytes_served() const;
  public:
  void clear_total_bytes_served();
  uint64_t total_bytes_served() const;
  void set_total_bytes_served(uint64_t value);
  private:
  uint64_t _internal_total_bytes_served() const;
  void _internal_set_total_bytes_served(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_ContentCacheStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explicit_ip_address_;
  uint32_t port_;
  uint32_t max_size_gb_;
  bool enabled_;
  bool p2p_enabled_;
  bool external_process_;
  uint32_t current_size_gb_;
  uint64_t current_bw_;
  uint64_t total_bytes_served_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ContentCacheConfig_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SiteServerUI_ContentCacheConfig_Request) */ {
 public:
  inline SiteServerUI_ContentCacheConfig_Request() : SiteServerUI_ContentCacheConfig_Request(nullptr) {}
  ~SiteServerUI_ContentCacheConfig_Request() override;
  explicit constexpr SiteServerUI_ContentCacheConfig_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ContentCacheConfig_Request(const SiteServerUI_ContentCacheConfig_Request& from);
  SiteServerUI_ContentCacheConfig_Request(SiteServerUI_ContentCacheConfig_Request&& from) noexcept
    : SiteServerUI_ContentCacheConfig_Request() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ContentCacheConfig_Request& operator=(const SiteServerUI_ContentCacheConfig_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ContentCacheConfig_Request& operator=(SiteServerUI_ContentCacheConfig_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ContentCacheConfig_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ContentCacheConfig_Request* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ContentCacheConfig_Request*>(
               &_SiteServerUI_ContentCacheConfig_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SiteServerUI_ContentCacheConfig_Request& a, SiteServerUI_ContentCacheConfig_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ContentCacheConfig_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ContentCacheConfig_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ContentCacheConfig_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ContentCacheConfig_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SiteServerUI_ContentCacheConfig_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SiteServerUI_ContentCacheConfig_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteServerUI_ContentCacheConfig_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ContentCacheConfig_Request";
  }
  protected:
  explicit SiteServerUI_ContentCacheConfig_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheLocationFieldNumber = 3,
    kExplicitIpAddressFieldNumber = 7,
    kPortFieldNumber = 2,
    kMaxSizeGbFieldNumber = 4,
    kEnabledFieldNumber = 1,
    kP2PEnabledFieldNumber = 5,
    kExternalProcessFieldNumber = 6,
  };
  // optional string cache_location = 3;
  bool has_cache_location() const;
  private:
  bool _internal_has_cache_location() const;
  public:
  void clear_cache_location();
  const std::string& cache_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_location();
  PROTOBUF_NODISCARD std::string* release_cache_location();
  void set_allocated_cache_location(std::string* cache_location);
  private:
  const std::string& _internal_cache_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_location(const std::string& value);
  std::string* _internal_mutable_cache_location();
  public:

  // optional string explicit_ip_address = 7;
  bool has_explicit_ip_address() const;
  private:
  bool _internal_has_explicit_ip_address() const;
  public:
  void clear_explicit_ip_address();
  const std::string& explicit_ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explicit_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explicit_ip_address();
  PROTOBUF_NODISCARD std::string* release_explicit_ip_address();
  void set_allocated_explicit_ip_address(std::string* explicit_ip_address);
  private:
  const std::string& _internal_explicit_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explicit_ip_address(const std::string& value);
  std::string* _internal_mutable_explicit_ip_address();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // optional uint32 max_size_gb = 4;
  bool has_max_size_gb() const;
  private:
  bool _internal_has_max_size_gb() const;
  public:
  void clear_max_size_gb();
  uint32_t max_size_gb() const;
  void set_max_size_gb(uint32_t value);
  private:
  uint32_t _internal_max_size_gb() const;
  void _internal_set_max_size_gb(uint32_t value);
  public:

  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool p2p_enabled = 5;
  bool has_p2p_enabled() const;
  private:
  bool _internal_has_p2p_enabled() const;
  public:
  void clear_p2p_enabled();
  bool p2p_enabled() const;
  void set_p2p_enabled(bool value);
  private:
  bool _internal_p2p_enabled() const;
  void _internal_set_p2p_enabled(bool value);
  public:

  // optional bool external_process = 6;
  bool has_external_process() const;
  private:
  bool _internal_has_external_process() const;
  public:
  void clear_external_process();
  bool external_process() const;
  void set_external_process(bool value);
  private:
  bool _internal_external_process() const;
  void _internal_set_external_process(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SiteServerUI_ContentCacheConfig_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explicit_ip_address_;
  uint32_t port_;
  uint32_t max_size_gb_;
  bool enabled_;
  bool p2p_enabled_;
  bool external_process_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// -------------------------------------------------------------------

class SiteServerUI_ContentCacheConfig_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SiteServerUI_ContentCacheConfig_Response) */ {
 public:
  inline SiteServerUI_ContentCacheConfig_Response() : SiteServerUI_ContentCacheConfig_Response(nullptr) {}
  explicit constexpr SiteServerUI_ContentCacheConfig_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SiteServerUI_ContentCacheConfig_Response(const SiteServerUI_ContentCacheConfig_Response& from);
  SiteServerUI_ContentCacheConfig_Response(SiteServerUI_ContentCacheConfig_Response&& from) noexcept
    : SiteServerUI_ContentCacheConfig_Response() {
    *this = ::std::move(from);
  }

  inline SiteServerUI_ContentCacheConfig_Response& operator=(const SiteServerUI_ContentCacheConfig_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteServerUI_ContentCacheConfig_Response& operator=(SiteServerUI_ContentCacheConfig_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SiteServerUI_ContentCacheConfig_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SiteServerUI_ContentCacheConfig_Response* internal_default_instance() {
    return reinterpret_cast<const SiteServerUI_ContentCacheConfig_Response*>(
               &_SiteServerUI_ContentCacheConfig_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SiteServerUI_ContentCacheConfig_Response& a, SiteServerUI_ContentCacheConfig_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteServerUI_ContentCacheConfig_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteServerUI_ContentCacheConfig_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SiteServerUI_ContentCacheConfig_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SiteServerUI_ContentCacheConfig_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SiteServerUI_ContentCacheConfig_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SiteServerUI_ContentCacheConfig_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteServerUI_ContentCacheConfig_Response";
  }
  protected:
  explicit SiteServerUI_ContentCacheConfig_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SiteServerUI_ContentCacheConfig_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fsiteserverui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteServerUI_Login_Request

// optional string username = 1;
inline bool SiteServerUI_Login_Request::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_Login_Request::has_username() const {
  return _internal_has_username();
}
inline void SiteServerUI_Login_Request::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_Login_Request::username() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Login_Request.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_Login_Request::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_Login_Request.username)
}
inline std::string* SiteServerUI_Login_Request::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_Login_Request.username)
  return _s;
}
inline const std::string& SiteServerUI_Login_Request::_internal_username() const {
  return username_.Get();
}
inline void SiteServerUI_Login_Request::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_Login_Request::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_Login_Request::release_username() {
  // @@protoc_insertion_point(field_release:SiteServerUI_Login_Request.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_Login_Request::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_Login_Request.username)
}

// optional string password = 2;
inline bool SiteServerUI_Login_Request::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_Login_Request::has_password() const {
  return _internal_has_password();
}
inline void SiteServerUI_Login_Request::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SiteServerUI_Login_Request::password() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Login_Request.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_Login_Request::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_Login_Request.password)
}
inline std::string* SiteServerUI_Login_Request::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_Login_Request.password)
  return _s;
}
inline const std::string& SiteServerUI_Login_Request::_internal_password() const {
  return password_.Get();
}
inline void SiteServerUI_Login_Request::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_Login_Request::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_Login_Request::release_password() {
  // @@protoc_insertion_point(field_release:SiteServerUI_Login_Request.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_Login_Request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_Login_Request.password)
}

// optional string steamguardcode = 3;
inline bool SiteServerUI_Login_Request::_internal_has_steamguardcode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteServerUI_Login_Request::has_steamguardcode() const {
  return _internal_has_steamguardcode();
}
inline void SiteServerUI_Login_Request::clear_steamguardcode() {
  steamguardcode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SiteServerUI_Login_Request::steamguardcode() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Login_Request.steamguardcode)
  return _internal_steamguardcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_Login_Request::set_steamguardcode(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 steamguardcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_Login_Request.steamguardcode)
}
inline std::string* SiteServerUI_Login_Request::mutable_steamguardcode() {
  std::string* _s = _internal_mutable_steamguardcode();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_Login_Request.steamguardcode)
  return _s;
}
inline const std::string& SiteServerUI_Login_Request::_internal_steamguardcode() const {
  return steamguardcode_.Get();
}
inline void SiteServerUI_Login_Request::_internal_set_steamguardcode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  steamguardcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_Login_Request::_internal_mutable_steamguardcode() {
  _has_bits_[0] |= 0x00000004u;
  return steamguardcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_Login_Request::release_steamguardcode() {
  // @@protoc_insertion_point(field_release:SiteServerUI_Login_Request.steamguardcode)
  if (!_internal_has_steamguardcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = steamguardcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (steamguardcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    steamguardcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_Login_Request::set_allocated_steamguardcode(std::string* steamguardcode) {
  if (steamguardcode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  steamguardcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steamguardcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (steamguardcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    steamguardcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_Login_Request.steamguardcode)
}

// optional bool remember_password = 4;
inline bool SiteServerUI_Login_Request::_internal_has_remember_password() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteServerUI_Login_Request::has_remember_password() const {
  return _internal_has_remember_password();
}
inline void SiteServerUI_Login_Request::clear_remember_password() {
  remember_password_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SiteServerUI_Login_Request::_internal_remember_password() const {
  return remember_password_;
}
inline bool SiteServerUI_Login_Request::remember_password() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Login_Request.remember_password)
  return _internal_remember_password();
}
inline void SiteServerUI_Login_Request::_internal_set_remember_password(bool value) {
  _has_bits_[0] |= 0x00000008u;
  remember_password_ = value;
}
inline void SiteServerUI_Login_Request::set_remember_password(bool value) {
  _internal_set_remember_password(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Login_Request.remember_password)
}

// -------------------------------------------------------------------

// SiteServerUI_Login_Response

// optional int32 logon_state = 1;
inline bool SiteServerUI_Login_Response::_internal_has_logon_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_Login_Response::has_logon_state() const {
  return _internal_has_logon_state();
}
inline void SiteServerUI_Login_Response::clear_logon_state() {
  logon_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SiteServerUI_Login_Response::_internal_logon_state() const {
  return logon_state_;
}
inline int32_t SiteServerUI_Login_Response::logon_state() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Login_Response.logon_state)
  return _internal_logon_state();
}
inline void SiteServerUI_Login_Response::_internal_set_logon_state(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  logon_state_ = value;
}
inline void SiteServerUI_Login_Response::set_logon_state(int32_t value) {
  _internal_set_logon_state(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Login_Response.logon_state)
}

// optional int32 logon_eresult = 2;
inline bool SiteServerUI_Login_Response::_internal_has_logon_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_Login_Response::has_logon_eresult() const {
  return _internal_has_logon_eresult();
}
inline void SiteServerUI_Login_Response::clear_logon_eresult() {
  logon_eresult_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SiteServerUI_Login_Response::_internal_logon_eresult() const {
  return logon_eresult_;
}
inline int32_t SiteServerUI_Login_Response::logon_eresult() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Login_Response.logon_eresult)
  return _internal_logon_eresult();
}
inline void SiteServerUI_Login_Response::_internal_set_logon_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  logon_eresult_ = value;
}
inline void SiteServerUI_Login_Response::set_logon_eresult(int32_t value) {
  _internal_set_logon_eresult(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Login_Response.logon_eresult)
}

// -------------------------------------------------------------------

// SiteServerUI_LoginStatus_Request

// -------------------------------------------------------------------

// SiteServerUI_LoginStatus_Response

// optional string username = 1;
inline bool SiteServerUI_LoginStatus_Response::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_LoginStatus_Response::has_username() const {
  return _internal_has_username();
}
inline void SiteServerUI_LoginStatus_Response::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_LoginStatus_Response::username() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_LoginStatus_Response.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_LoginStatus_Response::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_LoginStatus_Response.username)
}
inline std::string* SiteServerUI_LoginStatus_Response::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_LoginStatus_Response.username)
  return _s;
}
inline const std::string& SiteServerUI_LoginStatus_Response::_internal_username() const {
  return username_.Get();
}
inline void SiteServerUI_LoginStatus_Response::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_LoginStatus_Response::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_LoginStatus_Response::release_username() {
  // @@protoc_insertion_point(field_release:SiteServerUI_LoginStatus_Response.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_LoginStatus_Response::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_LoginStatus_Response.username)
}

// optional bool cached_credentials = 2;
inline bool SiteServerUI_LoginStatus_Response::_internal_has_cached_credentials() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_LoginStatus_Response::has_cached_credentials() const {
  return _internal_has_cached_credentials();
}
inline void SiteServerUI_LoginStatus_Response::clear_cached_credentials() {
  cached_credentials_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SiteServerUI_LoginStatus_Response::_internal_cached_credentials() const {
  return cached_credentials_;
}
inline bool SiteServerUI_LoginStatus_Response::cached_credentials() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_LoginStatus_Response.cached_credentials)
  return _internal_cached_credentials();
}
inline void SiteServerUI_LoginStatus_Response::_internal_set_cached_credentials(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cached_credentials_ = value;
}
inline void SiteServerUI_LoginStatus_Response::set_cached_credentials(bool value) {
  _internal_set_cached_credentials(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_LoginStatus_Response.cached_credentials)
}

// optional int32 logon_state = 3;
inline bool SiteServerUI_LoginStatus_Response::_internal_has_logon_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteServerUI_LoginStatus_Response::has_logon_state() const {
  return _internal_has_logon_state();
}
inline void SiteServerUI_LoginStatus_Response::clear_logon_state() {
  logon_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SiteServerUI_LoginStatus_Response::_internal_logon_state() const {
  return logon_state_;
}
inline int32_t SiteServerUI_LoginStatus_Response::logon_state() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_LoginStatus_Response.logon_state)
  return _internal_logon_state();
}
inline void SiteServerUI_LoginStatus_Response::_internal_set_logon_state(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  logon_state_ = value;
}
inline void SiteServerUI_LoginStatus_Response::set_logon_state(int32_t value) {
  _internal_set_logon_state(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_LoginStatus_Response.logon_state)
}

// optional int32 logon_eresult = 4;
inline bool SiteServerUI_LoginStatus_Response::_internal_has_logon_eresult() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteServerUI_LoginStatus_Response::has_logon_eresult() const {
  return _internal_has_logon_eresult();
}
inline void SiteServerUI_LoginStatus_Response::clear_logon_eresult() {
  logon_eresult_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t SiteServerUI_LoginStatus_Response::_internal_logon_eresult() const {
  return logon_eresult_;
}
inline int32_t SiteServerUI_LoginStatus_Response::logon_eresult() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_LoginStatus_Response.logon_eresult)
  return _internal_logon_eresult();
}
inline void SiteServerUI_LoginStatus_Response::_internal_set_logon_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  logon_eresult_ = value;
}
inline void SiteServerUI_LoginStatus_Response::set_logon_eresult(int32_t value) {
  _internal_set_logon_eresult(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_LoginStatus_Response.logon_eresult)
}

// -------------------------------------------------------------------

// SiteServerUI_CancelLogin_Request

// -------------------------------------------------------------------

// SiteServerUI_CancelLogin_Response

// optional int32 logon_state = 1;
inline bool SiteServerUI_CancelLogin_Response::_internal_has_logon_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_CancelLogin_Response::has_logon_state() const {
  return _internal_has_logon_state();
}
inline void SiteServerUI_CancelLogin_Response::clear_logon_state() {
  logon_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SiteServerUI_CancelLogin_Response::_internal_logon_state() const {
  return logon_state_;
}
inline int32_t SiteServerUI_CancelLogin_Response::logon_state() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_CancelLogin_Response.logon_state)
  return _internal_logon_state();
}
inline void SiteServerUI_CancelLogin_Response::_internal_set_logon_state(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  logon_state_ = value;
}
inline void SiteServerUI_CancelLogin_Response::set_logon_state(int32_t value) {
  _internal_set_logon_state(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_CancelLogin_Response.logon_state)
}

// optional int32 logon_eresult = 2;
inline bool SiteServerUI_CancelLogin_Response::_internal_has_logon_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_CancelLogin_Response::has_logon_eresult() const {
  return _internal_has_logon_eresult();
}
inline void SiteServerUI_CancelLogin_Response::clear_logon_eresult() {
  logon_eresult_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SiteServerUI_CancelLogin_Response::_internal_logon_eresult() const {
  return logon_eresult_;
}
inline int32_t SiteServerUI_CancelLogin_Response::logon_eresult() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_CancelLogin_Response.logon_eresult)
  return _internal_logon_eresult();
}
inline void SiteServerUI_CancelLogin_Response::_internal_set_logon_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  logon_eresult_ = value;
}
inline void SiteServerUI_CancelLogin_Response::set_logon_eresult(int32_t value) {
  _internal_set_logon_eresult(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_CancelLogin_Response.logon_eresult)
}

// -------------------------------------------------------------------

// SiteServerUI_Logout_Request

// -------------------------------------------------------------------

// SiteServerUI_Logout_Response

// optional int32 logon_state = 1;
inline bool SiteServerUI_Logout_Response::_internal_has_logon_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_Logout_Response::has_logon_state() const {
  return _internal_has_logon_state();
}
inline void SiteServerUI_Logout_Response::clear_logon_state() {
  logon_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SiteServerUI_Logout_Response::_internal_logon_state() const {
  return logon_state_;
}
inline int32_t SiteServerUI_Logout_Response::logon_state() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Logout_Response.logon_state)
  return _internal_logon_state();
}
inline void SiteServerUI_Logout_Response::_internal_set_logon_state(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  logon_state_ = value;
}
inline void SiteServerUI_Logout_Response::set_logon_state(int32_t value) {
  _internal_set_logon_state(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Logout_Response.logon_state)
}

// optional int32 logout_eresult = 2;
inline bool SiteServerUI_Logout_Response::_internal_has_logout_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_Logout_Response::has_logout_eresult() const {
  return _internal_has_logout_eresult();
}
inline void SiteServerUI_Logout_Response::clear_logout_eresult() {
  logout_eresult_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SiteServerUI_Logout_Response::_internal_logout_eresult() const {
  return logout_eresult_;
}
inline int32_t SiteServerUI_Logout_Response::logout_eresult() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Logout_Response.logout_eresult)
  return _internal_logout_eresult();
}
inline void SiteServerUI_Logout_Response::_internal_set_logout_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  logout_eresult_ = value;
}
inline void SiteServerUI_Logout_Response::set_logout_eresult(int32_t value) {
  _internal_set_logout_eresult(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Logout_Response.logout_eresult)
}

// -------------------------------------------------------------------

// SiteServerUI_Quit_Request

// optional bool restart = 1;
inline bool SiteServerUI_Quit_Request::_internal_has_restart() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_Quit_Request::has_restart() const {
  return _internal_has_restart();
}
inline void SiteServerUI_Quit_Request::clear_restart() {
  restart_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SiteServerUI_Quit_Request::_internal_restart() const {
  return restart_;
}
inline bool SiteServerUI_Quit_Request::restart() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Quit_Request.restart)
  return _internal_restart();
}
inline void SiteServerUI_Quit_Request::_internal_set_restart(bool value) {
  _has_bits_[0] |= 0x00000001u;
  restart_ = value;
}
inline void SiteServerUI_Quit_Request::set_restart(bool value) {
  _internal_set_restart(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Quit_Request.restart)
}

// -------------------------------------------------------------------

// SiteServerUI_Quit_Response

// -------------------------------------------------------------------

// SiteServerUI_Status_Request

// -------------------------------------------------------------------

// SiteServerUI_Status_Response

// optional int32 logon_state = 1;
inline bool SiteServerUI_Status_Response::_internal_has_logon_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_Status_Response::has_logon_state() const {
  return _internal_has_logon_state();
}
inline void SiteServerUI_Status_Response::clear_logon_state() {
  logon_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SiteServerUI_Status_Response::_internal_logon_state() const {
  return logon_state_;
}
inline int32_t SiteServerUI_Status_Response::logon_state() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Status_Response.logon_state)
  return _internal_logon_state();
}
inline void SiteServerUI_Status_Response::_internal_set_logon_state(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  logon_state_ = value;
}
inline void SiteServerUI_Status_Response::set_logon_state(int32_t value) {
  _internal_set_logon_state(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Status_Response.logon_state)
}

// optional int32 logon_eresult = 2;
inline bool SiteServerUI_Status_Response::_internal_has_logon_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_Status_Response::has_logon_eresult() const {
  return _internal_has_logon_eresult();
}
inline void SiteServerUI_Status_Response::clear_logon_eresult() {
  logon_eresult_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SiteServerUI_Status_Response::_internal_logon_eresult() const {
  return logon_eresult_;
}
inline int32_t SiteServerUI_Status_Response::logon_eresult() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Status_Response.logon_eresult)
  return _internal_logon_eresult();
}
inline void SiteServerUI_Status_Response::_internal_set_logon_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  logon_eresult_ = value;
}
inline void SiteServerUI_Status_Response::set_logon_eresult(int32_t value) {
  _internal_set_logon_eresult(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Status_Response.logon_eresult)
}

// optional bool connected = 3;
inline bool SiteServerUI_Status_Response::_internal_has_connected() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteServerUI_Status_Response::has_connected() const {
  return _internal_has_connected();
}
inline void SiteServerUI_Status_Response::clear_connected() {
  connected_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SiteServerUI_Status_Response::_internal_connected() const {
  return connected_;
}
inline bool SiteServerUI_Status_Response::connected() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Status_Response.connected)
  return _internal_connected();
}
inline void SiteServerUI_Status_Response::_internal_set_connected(bool value) {
  _has_bits_[0] |= 0x00000004u;
  connected_ = value;
}
inline void SiteServerUI_Status_Response::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Status_Response.connected)
}

// optional bool cache_enabled = 4;
inline bool SiteServerUI_Status_Response::_internal_has_cache_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteServerUI_Status_Response::has_cache_enabled() const {
  return _internal_has_cache_enabled();
}
inline void SiteServerUI_Status_Response::clear_cache_enabled() {
  cache_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SiteServerUI_Status_Response::_internal_cache_enabled() const {
  return cache_enabled_;
}
inline bool SiteServerUI_Status_Response::cache_enabled() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Status_Response.cache_enabled)
  return _internal_cache_enabled();
}
inline void SiteServerUI_Status_Response::_internal_set_cache_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  cache_enabled_ = value;
}
inline void SiteServerUI_Status_Response::set_cache_enabled(bool value) {
  _internal_set_cache_enabled(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Status_Response.cache_enabled)
}

// optional int32 acct_status = 5;
inline bool SiteServerUI_Status_Response::_internal_has_acct_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SiteServerUI_Status_Response::has_acct_status() const {
  return _internal_has_acct_status();
}
inline void SiteServerUI_Status_Response::clear_acct_status() {
  acct_status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t SiteServerUI_Status_Response::_internal_acct_status() const {
  return acct_status_;
}
inline int32_t SiteServerUI_Status_Response::acct_status() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_Status_Response.acct_status)
  return _internal_acct_status();
}
inline void SiteServerUI_Status_Response::_internal_set_acct_status(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  acct_status_ = value;
}
inline void SiteServerUI_Status_Response::set_acct_status(int32_t value) {
  _internal_set_acct_status(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_Status_Response.acct_status)
}

// -------------------------------------------------------------------

// SiteServerUI_GetLanguage_Request

// -------------------------------------------------------------------

// SiteServerUI_GetLanguage_Response

// optional string language = 1;
inline bool SiteServerUI_GetLanguage_Response::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_GetLanguage_Response::has_language() const {
  return _internal_has_language();
}
inline void SiteServerUI_GetLanguage_Response::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_GetLanguage_Response::language() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_GetLanguage_Response.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_GetLanguage_Response::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_GetLanguage_Response.language)
}
inline std::string* SiteServerUI_GetLanguage_Response::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_GetLanguage_Response.language)
  return _s;
}
inline const std::string& SiteServerUI_GetLanguage_Response::_internal_language() const {
  return language_.Get();
}
inline void SiteServerUI_GetLanguage_Response::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_GetLanguage_Response::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_GetLanguage_Response::release_language() {
  // @@protoc_insertion_point(field_release:SiteServerUI_GetLanguage_Response.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_GetLanguage_Response::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_GetLanguage_Response.language)
}

// -------------------------------------------------------------------

// SiteServerUI_SetLanguage_Request

// optional string language = 1;
inline bool SiteServerUI_SetLanguage_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_SetLanguage_Request::has_language() const {
  return _internal_has_language();
}
inline void SiteServerUI_SetLanguage_Request::clear_language() {
  language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_SetLanguage_Request::language() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_SetLanguage_Request.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_SetLanguage_Request::set_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_SetLanguage_Request.language)
}
inline std::string* SiteServerUI_SetLanguage_Request::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_SetLanguage_Request.language)
  return _s;
}
inline const std::string& SiteServerUI_SetLanguage_Request::_internal_language() const {
  return language_.Get();
}
inline void SiteServerUI_SetLanguage_Request::_internal_set_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_SetLanguage_Request::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000001u;
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_SetLanguage_Request::release_language() {
  // @@protoc_insertion_point(field_release:SiteServerUI_SetLanguage_Request.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_SetLanguage_Request::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (language_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_SetLanguage_Request.language)
}

// -------------------------------------------------------------------

// SiteServerUI_SetLanguage_Response

// -------------------------------------------------------------------

// SiteServerUI_ClientStatus_Request

// -------------------------------------------------------------------

// SiteServerUI_ClientStatus_Response_ClientInfo

// optional uint32 ip = 1;
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::has_ip() const {
  return _internal_has_ip();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SiteServerUI_ClientStatus_Response_ClientInfo::_internal_ip() const {
  return ip_;
}
inline uint32_t SiteServerUI_ClientStatus_Response_ClientInfo::ip() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.ClientInfo.ip)
  return _internal_ip();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::_internal_set_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.ClientInfo.ip)
}

// optional string hostname = 2;
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::has_hostname() const {
  return _internal_has_hostname();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_ClientStatus_Response_ClientInfo::hostname() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.ClientInfo.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ClientStatus_Response_ClientInfo::set_hostname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.ClientInfo.hostname)
}
inline std::string* SiteServerUI_ClientStatus_Response_ClientInfo::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.ClientInfo.hostname)
  return _s;
}
inline const std::string& SiteServerUI_ClientStatus_Response_ClientInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_ClientInfo::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_ClientInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ClientStatus_Response.ClientInfo.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ClientStatus_Response.ClientInfo.hostname)
}

// optional bool connected = 3;
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::_internal_has_connected() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::has_connected() const {
  return _internal_has_connected();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::clear_connected() {
  connected_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::_internal_connected() const {
  return connected_;
}
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::connected() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.ClientInfo.connected)
  return _internal_connected();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::_internal_set_connected(bool value) {
  _has_bits_[0] |= 0x00000004u;
  connected_ = value;
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.ClientInfo.connected)
}

// optional uint64 instance_id = 4;
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::_internal_has_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_ClientInfo::has_instance_id() const {
  return _internal_has_instance_id();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::clear_instance_id() {
  instance_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t SiteServerUI_ClientStatus_Response_ClientInfo::_internal_instance_id() const {
  return instance_id_;
}
inline uint64_t SiteServerUI_ClientStatus_Response_ClientInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.ClientInfo.instance_id)
  return _internal_instance_id();
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::_internal_set_instance_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  instance_id_ = value;
}
inline void SiteServerUI_ClientStatus_Response_ClientInfo::set_instance_id(uint64_t value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.ClientInfo.instance_id)
}

// -------------------------------------------------------------------

// SiteServerUI_ClientStatus_Response_Payment

// optional uint64 transid = 1;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_transid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_transid() const {
  return _internal_has_transid();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_transid() {
  transid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t SiteServerUI_ClientStatus_Response_Payment::_internal_transid() const {
  return transid_;
}
inline uint64_t SiteServerUI_ClientStatus_Response_Payment::transid() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.transid)
  return _internal_transid();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_transid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  transid_ = value;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_transid(uint64_t value) {
  _internal_set_transid(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.transid)
}

// optional uint64 steamid = 2;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_steamid() const {
  return _internal_has_steamid();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t SiteServerUI_ClientStatus_Response_Payment::_internal_steamid() const {
  return steamid_;
}
inline uint64_t SiteServerUI_ClientStatus_Response_Payment::steamid() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.steamid)
  return _internal_steamid();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  steamid_ = value;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.steamid)
}

// optional string amount = 3;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_amount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_amount() const {
  return _internal_has_amount();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_amount() {
  amount_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::amount() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ClientStatus_Response_Payment::set_amount(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.amount)
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.Payment.amount)
  return _s;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::_internal_amount() const {
  return amount_.Get();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_amount(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::_internal_mutable_amount() {
  _has_bits_[0] |= 0x00000001u;
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::release_amount() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ClientStatus_Response.Payment.amount)
  if (!_internal_has_amount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = amount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ClientStatus_Response.Payment.amount)
}

// optional int32 time_created = 4;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_time_created() const {
  return _internal_has_time_created();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_time_created() {
  time_created_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t SiteServerUI_ClientStatus_Response_Payment::_internal_time_created() const {
  return time_created_;
}
inline int32_t SiteServerUI_ClientStatus_Response_Payment::time_created() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.time_created)
  return _internal_time_created();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_time_created(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  time_created_ = value;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_time_created(int32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.time_created)
}

// optional int32 purchase_status = 5;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_purchase_status() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_purchase_status() const {
  return _internal_has_purchase_status();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_purchase_status() {
  purchase_status_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t SiteServerUI_ClientStatus_Response_Payment::_internal_purchase_status() const {
  return purchase_status_;
}
inline int32_t SiteServerUI_ClientStatus_Response_Payment::purchase_status() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.purchase_status)
  return _internal_purchase_status();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_purchase_status(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  purchase_status_ = value;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_purchase_status(int32_t value) {
  _internal_set_purchase_status(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.purchase_status)
}

// optional string hostname = 6;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_hostname() const {
  return _internal_has_hostname();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::hostname() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ClientStatus_Response_Payment::set_hostname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.hostname)
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.Payment.hostname)
  return _s;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::_internal_hostname() const {
  return hostname_.Get();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000002u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::release_hostname() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ClientStatus_Response.Payment.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ClientStatus_Response.Payment.hostname)
}

// optional string persona_name = 7;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::persona_name() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ClientStatus_Response_Payment::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.persona_name)
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.Payment.persona_name)
  return _s;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000004u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::release_persona_name() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ClientStatus_Response.Payment.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ClientStatus_Response.Payment.persona_name)
}

// optional string profile_url = 8;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_profile_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_profile_url() const {
  return _internal_has_profile_url();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_profile_url() {
  profile_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::profile_url() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.profile_url)
  return _internal_profile_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ClientStatus_Response_Payment::set_profile_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 profile_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.profile_url)
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::mutable_profile_url() {
  std::string* _s = _internal_mutable_profile_url();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.Payment.profile_url)
  return _s;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::_internal_profile_url() const {
  return profile_url_.Get();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_profile_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  profile_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::_internal_mutable_profile_url() {
  _has_bits_[0] |= 0x00000008u;
  return profile_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::release_profile_url() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ClientStatus_Response.Payment.profile_url)
  if (!_internal_has_profile_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = profile_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_allocated_profile_url(std::string* profile_url) {
  if (profile_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  profile_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ClientStatus_Response.Payment.profile_url)
}

// optional string avatar_url = 9;
inline bool SiteServerUI_ClientStatus_Response_Payment::_internal_has_avatar_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SiteServerUI_ClientStatus_Response_Payment::has_avatar_url() const {
  return _internal_has_avatar_url();
}
inline void SiteServerUI_ClientStatus_Response_Payment::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::avatar_url() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.Payment.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ClientStatus_Response_Payment::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ClientStatus_Response.Payment.avatar_url)
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.Payment.avatar_url)
  return _s;
}
inline const std::string& SiteServerUI_ClientStatus_Response_Payment::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void SiteServerUI_ClientStatus_Response_Payment::_internal_set_avatar_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::_internal_mutable_avatar_url() {
  _has_bits_[0] |= 0x00000010u;
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ClientStatus_Response_Payment::release_avatar_url() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ClientStatus_Response.Payment.avatar_url)
  if (!_internal_has_avatar_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = avatar_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ClientStatus_Response_Payment::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ClientStatus_Response.Payment.avatar_url)
}

// -------------------------------------------------------------------

// SiteServerUI_ClientStatus_Response

// repeated .SiteServerUI_ClientStatus_Response.ClientInfo clients = 4;
inline int SiteServerUI_ClientStatus_Response::_internal_clients_size() const {
  return clients_.size();
}
inline int SiteServerUI_ClientStatus_Response::clients_size() const {
  return _internal_clients_size();
}
inline void SiteServerUI_ClientStatus_Response::clear_clients() {
  clients_.Clear();
}
inline ::SiteServerUI_ClientStatus_Response_ClientInfo* SiteServerUI_ClientStatus_Response::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.clients)
  return clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_ClientInfo >*
SiteServerUI_ClientStatus_Response::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:SiteServerUI_ClientStatus_Response.clients)
  return &clients_;
}
inline const ::SiteServerUI_ClientStatus_Response_ClientInfo& SiteServerUI_ClientStatus_Response::_internal_clients(int index) const {
  return clients_.Get(index);
}
inline const ::SiteServerUI_ClientStatus_Response_ClientInfo& SiteServerUI_ClientStatus_Response::clients(int index) const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.clients)
  return _internal_clients(index);
}
inline ::SiteServerUI_ClientStatus_Response_ClientInfo* SiteServerUI_ClientStatus_Response::_internal_add_clients() {
  return clients_.Add();
}
inline ::SiteServerUI_ClientStatus_Response_ClientInfo* SiteServerUI_ClientStatus_Response::add_clients() {
  ::SiteServerUI_ClientStatus_Response_ClientInfo* _add = _internal_add_clients();
  // @@protoc_insertion_point(field_add:SiteServerUI_ClientStatus_Response.clients)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_ClientInfo >&
SiteServerUI_ClientStatus_Response::clients() const {
  // @@protoc_insertion_point(field_list:SiteServerUI_ClientStatus_Response.clients)
  return clients_;
}

// repeated .SiteServerUI_ClientStatus_Response.Payment payments = 5;
inline int SiteServerUI_ClientStatus_Response::_internal_payments_size() const {
  return payments_.size();
}
inline int SiteServerUI_ClientStatus_Response::payments_size() const {
  return _internal_payments_size();
}
inline void SiteServerUI_ClientStatus_Response::clear_payments() {
  payments_.Clear();
}
inline ::SiteServerUI_ClientStatus_Response_Payment* SiteServerUI_ClientStatus_Response::mutable_payments(int index) {
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ClientStatus_Response.payments)
  return payments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_Payment >*
SiteServerUI_ClientStatus_Response::mutable_payments() {
  // @@protoc_insertion_point(field_mutable_list:SiteServerUI_ClientStatus_Response.payments)
  return &payments_;
}
inline const ::SiteServerUI_ClientStatus_Response_Payment& SiteServerUI_ClientStatus_Response::_internal_payments(int index) const {
  return payments_.Get(index);
}
inline const ::SiteServerUI_ClientStatus_Response_Payment& SiteServerUI_ClientStatus_Response::payments(int index) const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ClientStatus_Response.payments)
  return _internal_payments(index);
}
inline ::SiteServerUI_ClientStatus_Response_Payment* SiteServerUI_ClientStatus_Response::_internal_add_payments() {
  return payments_.Add();
}
inline ::SiteServerUI_ClientStatus_Response_Payment* SiteServerUI_ClientStatus_Response::add_payments() {
  ::SiteServerUI_ClientStatus_Response_Payment* _add = _internal_add_payments();
  // @@protoc_insertion_point(field_add:SiteServerUI_ClientStatus_Response.payments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SiteServerUI_ClientStatus_Response_Payment >&
SiteServerUI_ClientStatus_Response::payments() const {
  // @@protoc_insertion_point(field_list:SiteServerUI_ClientStatus_Response.payments)
  return payments_;
}

// -------------------------------------------------------------------

// SiteServerUI_ContentCacheStatus_Request

// -------------------------------------------------------------------

// SiteServerUI_ContentCacheStatus_Response

// optional bool enabled = 1;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_enabled() const {
  return _internal_has_enabled();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_enabled() const {
  return enabled_;
}
inline bool SiteServerUI_ContentCacheStatus_Response::enabled() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.enabled)
  return _internal_enabled();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enabled_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.enabled)
}

// optional uint32 port = 2;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_port() const {
  return _internal_has_port();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SiteServerUI_ContentCacheStatus_Response::_internal_port() const {
  return port_;
}
inline uint32_t SiteServerUI_ContentCacheStatus_Response::port() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.port)
  return _internal_port();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_port(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.port)
}

// optional string cache_location = 3;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_cache_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_cache_location() const {
  return _internal_has_cache_location();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_cache_location() {
  cache_location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_ContentCacheStatus_Response::cache_location() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.cache_location)
  return _internal_cache_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ContentCacheStatus_Response::set_cache_location(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cache_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.cache_location)
}
inline std::string* SiteServerUI_ContentCacheStatus_Response::mutable_cache_location() {
  std::string* _s = _internal_mutable_cache_location();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ContentCacheStatus_Response.cache_location)
  return _s;
}
inline const std::string& SiteServerUI_ContentCacheStatus_Response::_internal_cache_location() const {
  return cache_location_.Get();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_cache_location(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheStatus_Response::_internal_mutable_cache_location() {
  _has_bits_[0] |= 0x00000001u;
  return cache_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheStatus_Response::release_cache_location() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ContentCacheStatus_Response.cache_location)
  if (!_internal_has_cache_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cache_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_allocated_cache_location(std::string* cache_location) {
  if (cache_location != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ContentCacheStatus_Response.cache_location)
}

// optional uint32 max_size_gb = 4;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_max_size_gb() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_max_size_gb() const {
  return _internal_has_max_size_gb();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_max_size_gb() {
  max_size_gb_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t SiteServerUI_ContentCacheStatus_Response::_internal_max_size_gb() const {
  return max_size_gb_;
}
inline uint32_t SiteServerUI_ContentCacheStatus_Response::max_size_gb() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.max_size_gb)
  return _internal_max_size_gb();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_max_size_gb(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  max_size_gb_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_max_size_gb(uint32_t value) {
  _internal_set_max_size_gb(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.max_size_gb)
}

// optional bool p2p_enabled = 5;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_p2p_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_p2p_enabled() const {
  return _internal_has_p2p_enabled();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_p2p_enabled() {
  p2p_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_p2p_enabled() const {
  return p2p_enabled_;
}
inline bool SiteServerUI_ContentCacheStatus_Response::p2p_enabled() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.p2p_enabled)
  return _internal_p2p_enabled();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_p2p_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  p2p_enabled_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_p2p_enabled(bool value) {
  _internal_set_p2p_enabled(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.p2p_enabled)
}

// optional string explicit_ip_address = 9;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_explicit_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_explicit_ip_address() const {
  return _internal_has_explicit_ip_address();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_explicit_ip_address() {
  explicit_ip_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SiteServerUI_ContentCacheStatus_Response::explicit_ip_address() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.explicit_ip_address)
  return _internal_explicit_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ContentCacheStatus_Response::set_explicit_ip_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 explicit_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.explicit_ip_address)
}
inline std::string* SiteServerUI_ContentCacheStatus_Response::mutable_explicit_ip_address() {
  std::string* _s = _internal_mutable_explicit_ip_address();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ContentCacheStatus_Response.explicit_ip_address)
  return _s;
}
inline const std::string& SiteServerUI_ContentCacheStatus_Response::_internal_explicit_ip_address() const {
  return explicit_ip_address_.Get();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_explicit_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  explicit_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheStatus_Response::_internal_mutable_explicit_ip_address() {
  _has_bits_[0] |= 0x00000002u;
  return explicit_ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheStatus_Response::release_explicit_ip_address() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ContentCacheStatus_Response.explicit_ip_address)
  if (!_internal_has_explicit_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = explicit_ip_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (explicit_ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_allocated_explicit_ip_address(std::string* explicit_ip_address) {
  if (explicit_ip_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  explicit_ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explicit_ip_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (explicit_ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ContentCacheStatus_Response.explicit_ip_address)
}

// optional bool external_process = 10;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_external_process() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_external_process() const {
  return _internal_has_external_process();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_external_process() {
  external_process_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_external_process() const {
  return external_process_;
}
inline bool SiteServerUI_ContentCacheStatus_Response::external_process() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.external_process)
  return _internal_external_process();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_external_process(bool value) {
  _has_bits_[0] |= 0x00000040u;
  external_process_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_external_process(bool value) {
  _internal_set_external_process(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.external_process)
}

// optional uint32 current_size_gb = 6;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_current_size_gb() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_current_size_gb() const {
  return _internal_has_current_size_gb();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_current_size_gb() {
  current_size_gb_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t SiteServerUI_ContentCacheStatus_Response::_internal_current_size_gb() const {
  return current_size_gb_;
}
inline uint32_t SiteServerUI_ContentCacheStatus_Response::current_size_gb() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.current_size_gb)
  return _internal_current_size_gb();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_current_size_gb(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  current_size_gb_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_current_size_gb(uint32_t value) {
  _internal_set_current_size_gb(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.current_size_gb)
}

// optional uint64 current_bw = 7;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_current_bw() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_current_bw() const {
  return _internal_has_current_bw();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_current_bw() {
  current_bw_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t SiteServerUI_ContentCacheStatus_Response::_internal_current_bw() const {
  return current_bw_;
}
inline uint64_t SiteServerUI_ContentCacheStatus_Response::current_bw() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.current_bw)
  return _internal_current_bw();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_current_bw(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  current_bw_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_current_bw(uint64_t value) {
  _internal_set_current_bw(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.current_bw)
}

// optional uint64 total_bytes_served = 8;
inline bool SiteServerUI_ContentCacheStatus_Response::_internal_has_total_bytes_served() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheStatus_Response::has_total_bytes_served() const {
  return _internal_has_total_bytes_served();
}
inline void SiteServerUI_ContentCacheStatus_Response::clear_total_bytes_served() {
  total_bytes_served_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t SiteServerUI_ContentCacheStatus_Response::_internal_total_bytes_served() const {
  return total_bytes_served_;
}
inline uint64_t SiteServerUI_ContentCacheStatus_Response::total_bytes_served() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheStatus_Response.total_bytes_served)
  return _internal_total_bytes_served();
}
inline void SiteServerUI_ContentCacheStatus_Response::_internal_set_total_bytes_served(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  total_bytes_served_ = value;
}
inline void SiteServerUI_ContentCacheStatus_Response::set_total_bytes_served(uint64_t value) {
  _internal_set_total_bytes_served(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheStatus_Response.total_bytes_served)
}

// -------------------------------------------------------------------

// SiteServerUI_ContentCacheConfig_Request

// optional bool enabled = 1;
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheConfig_Request::has_enabled() const {
  return _internal_has_enabled();
}
inline void SiteServerUI_ContentCacheConfig_Request::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_enabled() const {
  return enabled_;
}
inline bool SiteServerUI_ContentCacheConfig_Request::enabled() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheConfig_Request.enabled)
  return _internal_enabled();
}
inline void SiteServerUI_ContentCacheConfig_Request::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enabled_ = value;
}
inline void SiteServerUI_ContentCacheConfig_Request::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheConfig_Request.enabled)
}

// optional uint32 port = 2;
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheConfig_Request::has_port() const {
  return _internal_has_port();
}
inline void SiteServerUI_ContentCacheConfig_Request::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SiteServerUI_ContentCacheConfig_Request::_internal_port() const {
  return port_;
}
inline uint32_t SiteServerUI_ContentCacheConfig_Request::port() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheConfig_Request.port)
  return _internal_port();
}
inline void SiteServerUI_ContentCacheConfig_Request::_internal_set_port(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void SiteServerUI_ContentCacheConfig_Request::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheConfig_Request.port)
}

// optional string cache_location = 3;
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_has_cache_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheConfig_Request::has_cache_location() const {
  return _internal_has_cache_location();
}
inline void SiteServerUI_ContentCacheConfig_Request::clear_cache_location() {
  cache_location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SiteServerUI_ContentCacheConfig_Request::cache_location() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheConfig_Request.cache_location)
  return _internal_cache_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ContentCacheConfig_Request::set_cache_location(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cache_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheConfig_Request.cache_location)
}
inline std::string* SiteServerUI_ContentCacheConfig_Request::mutable_cache_location() {
  std::string* _s = _internal_mutable_cache_location();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ContentCacheConfig_Request.cache_location)
  return _s;
}
inline const std::string& SiteServerUI_ContentCacheConfig_Request::_internal_cache_location() const {
  return cache_location_.Get();
}
inline void SiteServerUI_ContentCacheConfig_Request::_internal_set_cache_location(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cache_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheConfig_Request::_internal_mutable_cache_location() {
  _has_bits_[0] |= 0x00000001u;
  return cache_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheConfig_Request::release_cache_location() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ContentCacheConfig_Request.cache_location)
  if (!_internal_has_cache_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = cache_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ContentCacheConfig_Request::set_allocated_cache_location(std::string* cache_location) {
  if (cache_location != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cache_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache_location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cache_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ContentCacheConfig_Request.cache_location)
}

// optional uint32 max_size_gb = 4;
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_has_max_size_gb() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheConfig_Request::has_max_size_gb() const {
  return _internal_has_max_size_gb();
}
inline void SiteServerUI_ContentCacheConfig_Request::clear_max_size_gb() {
  max_size_gb_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t SiteServerUI_ContentCacheConfig_Request::_internal_max_size_gb() const {
  return max_size_gb_;
}
inline uint32_t SiteServerUI_ContentCacheConfig_Request::max_size_gb() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheConfig_Request.max_size_gb)
  return _internal_max_size_gb();
}
inline void SiteServerUI_ContentCacheConfig_Request::_internal_set_max_size_gb(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  max_size_gb_ = value;
}
inline void SiteServerUI_ContentCacheConfig_Request::set_max_size_gb(uint32_t value) {
  _internal_set_max_size_gb(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheConfig_Request.max_size_gb)
}

// optional bool p2p_enabled = 5;
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_has_p2p_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheConfig_Request::has_p2p_enabled() const {
  return _internal_has_p2p_enabled();
}
inline void SiteServerUI_ContentCacheConfig_Request::clear_p2p_enabled() {
  p2p_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_p2p_enabled() const {
  return p2p_enabled_;
}
inline bool SiteServerUI_ContentCacheConfig_Request::p2p_enabled() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheConfig_Request.p2p_enabled)
  return _internal_p2p_enabled();
}
inline void SiteServerUI_ContentCacheConfig_Request::_internal_set_p2p_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  p2p_enabled_ = value;
}
inline void SiteServerUI_ContentCacheConfig_Request::set_p2p_enabled(bool value) {
  _internal_set_p2p_enabled(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheConfig_Request.p2p_enabled)
}

// optional bool external_process = 6;
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_has_external_process() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheConfig_Request::has_external_process() const {
  return _internal_has_external_process();
}
inline void SiteServerUI_ContentCacheConfig_Request::clear_external_process() {
  external_process_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_external_process() const {
  return external_process_;
}
inline bool SiteServerUI_ContentCacheConfig_Request::external_process() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheConfig_Request.external_process)
  return _internal_external_process();
}
inline void SiteServerUI_ContentCacheConfig_Request::_internal_set_external_process(bool value) {
  _has_bits_[0] |= 0x00000040u;
  external_process_ = value;
}
inline void SiteServerUI_ContentCacheConfig_Request::set_external_process(bool value) {
  _internal_set_external_process(value);
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheConfig_Request.external_process)
}

// optional string explicit_ip_address = 7;
inline bool SiteServerUI_ContentCacheConfig_Request::_internal_has_explicit_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiteServerUI_ContentCacheConfig_Request::has_explicit_ip_address() const {
  return _internal_has_explicit_ip_address();
}
inline void SiteServerUI_ContentCacheConfig_Request::clear_explicit_ip_address() {
  explicit_ip_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SiteServerUI_ContentCacheConfig_Request::explicit_ip_address() const {
  // @@protoc_insertion_point(field_get:SiteServerUI_ContentCacheConfig_Request.explicit_ip_address)
  return _internal_explicit_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SiteServerUI_ContentCacheConfig_Request::set_explicit_ip_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 explicit_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SiteServerUI_ContentCacheConfig_Request.explicit_ip_address)
}
inline std::string* SiteServerUI_ContentCacheConfig_Request::mutable_explicit_ip_address() {
  std::string* _s = _internal_mutable_explicit_ip_address();
  // @@protoc_insertion_point(field_mutable:SiteServerUI_ContentCacheConfig_Request.explicit_ip_address)
  return _s;
}
inline const std::string& SiteServerUI_ContentCacheConfig_Request::_internal_explicit_ip_address() const {
  return explicit_ip_address_.Get();
}
inline void SiteServerUI_ContentCacheConfig_Request::_internal_set_explicit_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  explicit_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheConfig_Request::_internal_mutable_explicit_ip_address() {
  _has_bits_[0] |= 0x00000002u;
  return explicit_ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SiteServerUI_ContentCacheConfig_Request::release_explicit_ip_address() {
  // @@protoc_insertion_point(field_release:SiteServerUI_ContentCacheConfig_Request.explicit_ip_address)
  if (!_internal_has_explicit_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = explicit_ip_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (explicit_ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SiteServerUI_ContentCacheConfig_Request::set_allocated_explicit_ip_address(std::string* explicit_ip_address) {
  if (explicit_ip_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  explicit_ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explicit_ip_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (explicit_ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    explicit_ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SiteServerUI_ContentCacheConfig_Request.explicit_ip_address)
}

// -------------------------------------------------------------------

// SiteServerUI_ContentCacheConfig_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsiteserverui_2eproto
