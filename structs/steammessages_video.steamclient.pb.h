// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_video.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvideo_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvideo_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fvideo_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fvideo_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvideo_2esteamclient_2eproto;
class CFovasVideo_ClientGetOPFSettings_Request;
struct CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal;
extern CFovasVideo_ClientGetOPFSettings_RequestDefaultTypeInternal _CFovasVideo_ClientGetOPFSettings_Request_default_instance_;
class CFovasVideo_ClientGetOPFSettings_Response;
struct CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal;
extern CFovasVideo_ClientGetOPFSettings_ResponseDefaultTypeInternal _CFovasVideo_ClientGetOPFSettings_Response_default_instance_;
class CVideo_BeginGameClipSegmentsUpload_Request;
struct CVideo_BeginGameClipSegmentsUpload_RequestDefaultTypeInternal;
extern CVideo_BeginGameClipSegmentsUpload_RequestDefaultTypeInternal _CVideo_BeginGameClipSegmentsUpload_Request_default_instance_;
class CVideo_BeginGameClipSegmentsUpload_Response;
struct CVideo_BeginGameClipSegmentsUpload_ResponseDefaultTypeInternal;
extern CVideo_BeginGameClipSegmentsUpload_ResponseDefaultTypeInternal _CVideo_BeginGameClipSegmentsUpload_Response_default_instance_;
class CVideo_ClientGetVideoURL_Request;
struct CVideo_ClientGetVideoURL_RequestDefaultTypeInternal;
extern CVideo_ClientGetVideoURL_RequestDefaultTypeInternal _CVideo_ClientGetVideoURL_Request_default_instance_;
class CVideo_ClientGetVideoURL_Response;
struct CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal;
extern CVideo_ClientGetVideoURL_ResponseDefaultTypeInternal _CVideo_ClientGetVideoURL_Response_default_instance_;
class CVideo_CommitGameClipSegmentsUpload_Request;
struct CVideo_CommitGameClipSegmentsUpload_RequestDefaultTypeInternal;
extern CVideo_CommitGameClipSegmentsUpload_RequestDefaultTypeInternal _CVideo_CommitGameClipSegmentsUpload_Request_default_instance_;
class CVideo_CommitGameClipSegmentsUpload_Response;
struct CVideo_CommitGameClipSegmentsUpload_ResponseDefaultTypeInternal;
extern CVideo_CommitGameClipSegmentsUpload_ResponseDefaultTypeInternal _CVideo_CommitGameClipSegmentsUpload_Response_default_instance_;
class CVideo_CreateGameClip_Request;
struct CVideo_CreateGameClip_RequestDefaultTypeInternal;
extern CVideo_CreateGameClip_RequestDefaultTypeInternal _CVideo_CreateGameClip_Request_default_instance_;
class CVideo_CreateGameClip_Response;
struct CVideo_CreateGameClip_ResponseDefaultTypeInternal;
extern CVideo_CreateGameClip_ResponseDefaultTypeInternal _CVideo_CreateGameClip_Response_default_instance_;
class CVideo_GameClipComponent;
struct CVideo_GameClipComponentDefaultTypeInternal;
extern CVideo_GameClipComponentDefaultTypeInternal _CVideo_GameClipComponent_default_instance_;
class CVideo_GameClipRepresentation;
struct CVideo_GameClipRepresentationDefaultTypeInternal;
extern CVideo_GameClipRepresentationDefaultTypeInternal _CVideo_GameClipRepresentation_default_instance_;
class CVideo_GameClipSegmentInfo;
struct CVideo_GameClipSegmentInfoDefaultTypeInternal;
extern CVideo_GameClipSegmentInfoDefaultTypeInternal _CVideo_GameClipSegmentInfo_default_instance_;
class CVideo_GameClipSegmentUploadInfo;
struct CVideo_GameClipSegmentUploadInfoDefaultTypeInternal;
extern CVideo_GameClipSegmentUploadInfoDefaultTypeInternal _CVideo_GameClipSegmentUploadInfo_default_instance_;
class CVideo_GameClipSegmentUploadInfo_HTTPHeaders;
struct CVideo_GameClipSegmentUploadInfo_HTTPHeadersDefaultTypeInternal;
extern CVideo_GameClipSegmentUploadInfo_HTTPHeadersDefaultTypeInternal _CVideo_GameClipSegmentUploadInfo_HTTPHeaders_default_instance_;
class CVideo_GetVideoBookmarks_Request;
struct CVideo_GetVideoBookmarks_RequestDefaultTypeInternal;
extern CVideo_GetVideoBookmarks_RequestDefaultTypeInternal _CVideo_GetVideoBookmarks_Request_default_instance_;
class CVideo_GetVideoBookmarks_Response;
struct CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal;
extern CVideo_GetVideoBookmarks_ResponseDefaultTypeInternal _CVideo_GetVideoBookmarks_Response_default_instance_;
class CVideo_SetVideoBookmark_Notification;
struct CVideo_SetVideoBookmark_NotificationDefaultTypeInternal;
extern CVideo_SetVideoBookmark_NotificationDefaultTypeInternal _CVideo_SetVideoBookmark_Notification_default_instance_;
class CVideo_UnlockedH264_Notification;
struct CVideo_UnlockedH264_NotificationDefaultTypeInternal;
extern CVideo_UnlockedH264_NotificationDefaultTypeInternal _CVideo_UnlockedH264_Notification_default_instance_;
class VideoBookmark;
struct VideoBookmarkDefaultTypeInternal;
extern VideoBookmarkDefaultTypeInternal _VideoBookmark_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CFovasVideo_ClientGetOPFSettings_Request* Arena::CreateMaybeMessage<::CFovasVideo_ClientGetOPFSettings_Request>(Arena*);
template<> ::CFovasVideo_ClientGetOPFSettings_Response* Arena::CreateMaybeMessage<::CFovasVideo_ClientGetOPFSettings_Response>(Arena*);
template<> ::CVideo_BeginGameClipSegmentsUpload_Request* Arena::CreateMaybeMessage<::CVideo_BeginGameClipSegmentsUpload_Request>(Arena*);
template<> ::CVideo_BeginGameClipSegmentsUpload_Response* Arena::CreateMaybeMessage<::CVideo_BeginGameClipSegmentsUpload_Response>(Arena*);
template<> ::CVideo_ClientGetVideoURL_Request* Arena::CreateMaybeMessage<::CVideo_ClientGetVideoURL_Request>(Arena*);
template<> ::CVideo_ClientGetVideoURL_Response* Arena::CreateMaybeMessage<::CVideo_ClientGetVideoURL_Response>(Arena*);
template<> ::CVideo_CommitGameClipSegmentsUpload_Request* Arena::CreateMaybeMessage<::CVideo_CommitGameClipSegmentsUpload_Request>(Arena*);
template<> ::CVideo_CommitGameClipSegmentsUpload_Response* Arena::CreateMaybeMessage<::CVideo_CommitGameClipSegmentsUpload_Response>(Arena*);
template<> ::CVideo_CreateGameClip_Request* Arena::CreateMaybeMessage<::CVideo_CreateGameClip_Request>(Arena*);
template<> ::CVideo_CreateGameClip_Response* Arena::CreateMaybeMessage<::CVideo_CreateGameClip_Response>(Arena*);
template<> ::CVideo_GameClipComponent* Arena::CreateMaybeMessage<::CVideo_GameClipComponent>(Arena*);
template<> ::CVideo_GameClipRepresentation* Arena::CreateMaybeMessage<::CVideo_GameClipRepresentation>(Arena*);
template<> ::CVideo_GameClipSegmentInfo* Arena::CreateMaybeMessage<::CVideo_GameClipSegmentInfo>(Arena*);
template<> ::CVideo_GameClipSegmentUploadInfo* Arena::CreateMaybeMessage<::CVideo_GameClipSegmentUploadInfo>(Arena*);
template<> ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* Arena::CreateMaybeMessage<::CVideo_GameClipSegmentUploadInfo_HTTPHeaders>(Arena*);
template<> ::CVideo_GetVideoBookmarks_Request* Arena::CreateMaybeMessage<::CVideo_GetVideoBookmarks_Request>(Arena*);
template<> ::CVideo_GetVideoBookmarks_Response* Arena::CreateMaybeMessage<::CVideo_GetVideoBookmarks_Response>(Arena*);
template<> ::CVideo_SetVideoBookmark_Notification* Arena::CreateMaybeMessage<::CVideo_SetVideoBookmark_Notification>(Arena*);
template<> ::CVideo_UnlockedH264_Notification* Arena::CreateMaybeMessage<::CVideo_UnlockedH264_Notification>(Arena*);
template<> ::VideoBookmark* Arena::CreateMaybeMessage<::VideoBookmark>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CVideo_ClientGetVideoURL_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_ClientGetVideoURL_Request) */ {
 public:
  inline CVideo_ClientGetVideoURL_Request() : CVideo_ClientGetVideoURL_Request(nullptr) {}
  ~CVideo_ClientGetVideoURL_Request() override;
  explicit constexpr CVideo_ClientGetVideoURL_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_ClientGetVideoURL_Request(const CVideo_ClientGetVideoURL_Request& from);
  CVideo_ClientGetVideoURL_Request(CVideo_ClientGetVideoURL_Request&& from) noexcept
    : CVideo_ClientGetVideoURL_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_ClientGetVideoURL_Request& operator=(const CVideo_ClientGetVideoURL_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_ClientGetVideoURL_Request& operator=(CVideo_ClientGetVideoURL_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_ClientGetVideoURL_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_ClientGetVideoURL_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_ClientGetVideoURL_Request*>(
               &_CVideo_ClientGetVideoURL_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CVideo_ClientGetVideoURL_Request& a, CVideo_ClientGetVideoURL_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_ClientGetVideoURL_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_ClientGetVideoURL_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_ClientGetVideoURL_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_ClientGetVideoURL_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_ClientGetVideoURL_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_ClientGetVideoURL_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_ClientGetVideoURL_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_ClientGetVideoURL_Request";
  }
  protected:
  explicit CVideo_ClientGetVideoURL_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoIdFieldNumber = 1,
    kClientCellidFieldNumber = 2,
  };
  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  bool has_video_id() const;
  private:
  bool _internal_has_video_id() const;
  public:
  void clear_video_id();
  uint64_t video_id() const;
  void set_video_id(uint64_t value);
  private:
  uint64_t _internal_video_id() const;
  void _internal_set_video_id(uint64_t value);
  public:

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  bool has_client_cellid() const;
  private:
  bool _internal_has_client_cellid() const;
  public:
  void clear_client_cellid();
  uint32_t client_cellid() const;
  void set_client_cellid(uint32_t value);
  private:
  uint32_t _internal_client_cellid() const;
  void _internal_set_client_cellid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_ClientGetVideoURL_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t video_id_;
  uint32_t client_cellid_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_ClientGetVideoURL_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_ClientGetVideoURL_Response) */ {
 public:
  inline CVideo_ClientGetVideoURL_Response() : CVideo_ClientGetVideoURL_Response(nullptr) {}
  ~CVideo_ClientGetVideoURL_Response() override;
  explicit constexpr CVideo_ClientGetVideoURL_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_ClientGetVideoURL_Response(const CVideo_ClientGetVideoURL_Response& from);
  CVideo_ClientGetVideoURL_Response(CVideo_ClientGetVideoURL_Response&& from) noexcept
    : CVideo_ClientGetVideoURL_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_ClientGetVideoURL_Response& operator=(const CVideo_ClientGetVideoURL_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_ClientGetVideoURL_Response& operator=(CVideo_ClientGetVideoURL_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_ClientGetVideoURL_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_ClientGetVideoURL_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_ClientGetVideoURL_Response*>(
               &_CVideo_ClientGetVideoURL_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CVideo_ClientGetVideoURL_Response& a, CVideo_ClientGetVideoURL_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_ClientGetVideoURL_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_ClientGetVideoURL_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_ClientGetVideoURL_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_ClientGetVideoURL_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_ClientGetVideoURL_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_ClientGetVideoURL_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_ClientGetVideoURL_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_ClientGetVideoURL_Response";
  }
  protected:
  explicit CVideo_ClientGetVideoURL_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoUrlFieldNumber = 2,
    kVideoIdFieldNumber = 1,
  };
  // optional string video_url = 2 [(.description) = "URL for video manifest"];
  bool has_video_url() const;
  private:
  bool _internal_has_video_url() const;
  public:
  void clear_video_url();
  const std::string& video_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_url();
  PROTOBUF_NODISCARD std::string* release_video_url();
  void set_allocated_video_url(std::string* video_url);
  private:
  const std::string& _internal_video_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_url(const std::string& value);
  std::string* _internal_mutable_video_url();
  public:

  // optional uint64 video_id = 1 [(.description) = "Video ID"];
  bool has_video_id() const;
  private:
  bool _internal_has_video_id() const;
  public:
  void clear_video_id();
  uint64_t video_id() const;
  void set_video_id(uint64_t value);
  private:
  uint64_t _internal_video_id() const;
  void _internal_set_video_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_ClientGetVideoURL_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_url_;
  uint64_t video_id_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class VideoBookmark final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VideoBookmark) */ {
 public:
  inline VideoBookmark() : VideoBookmark(nullptr) {}
  ~VideoBookmark() override;
  explicit constexpr VideoBookmark(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoBookmark(const VideoBookmark& from);
  VideoBookmark(VideoBookmark&& from) noexcept
    : VideoBookmark() {
    *this = ::std::move(from);
  }

  inline VideoBookmark& operator=(const VideoBookmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoBookmark& operator=(VideoBookmark&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoBookmark& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoBookmark* internal_default_instance() {
    return reinterpret_cast<const VideoBookmark*>(
               &_VideoBookmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoBookmark& a, VideoBookmark& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoBookmark* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoBookmark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoBookmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoBookmark>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoBookmark& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VideoBookmark& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoBookmark* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VideoBookmark";
  }
  protected:
  explicit VideoBookmark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kPlaybackPositionInSecondsFieldNumber = 2,
    kVideoTrackIdFieldNumber = 3,
    kAudioTrackIdFieldNumber = 4,
    kTimedtextTrackIdFieldNumber = 5,
    kLastModifiedFieldNumber = 6,
    kHideFromWatchHistoryFieldNumber = 7,
    kHideFromLibraryFieldNumber = 8,
  };
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
  bool has_playback_position_in_seconds() const;
  private:
  bool _internal_has_playback_position_in_seconds() const;
  public:
  void clear_playback_position_in_seconds();
  uint32_t playback_position_in_seconds() const;
  void set_playback_position_in_seconds(uint32_t value);
  private:
  uint32_t _internal_playback_position_in_seconds() const;
  void _internal_set_playback_position_in_seconds(uint32_t value);
  public:

  // optional uint64 video_track_id = 3 [(.description) = "video track choice."];
  bool has_video_track_id() const;
  private:
  bool _internal_has_video_track_id() const;
  public:
  void clear_video_track_id();
  uint64_t video_track_id() const;
  void set_video_track_id(uint64_t value);
  private:
  uint64_t _internal_video_track_id() const;
  void _internal_set_video_track_id(uint64_t value);
  public:

  // optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
  bool has_audio_track_id() const;
  private:
  bool _internal_has_audio_track_id() const;
  public:
  void clear_audio_track_id();
  uint64_t audio_track_id() const;
  void set_audio_track_id(uint64_t value);
  private:
  uint64_t _internal_audio_track_id() const;
  void _internal_set_audio_track_id(uint64_t value);
  public:

  // optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
  bool has_timedtext_track_id() const;
  private:
  bool _internal_has_timedtext_track_id() const;
  public:
  void clear_timedtext_track_id();
  uint64_t timedtext_track_id() const;
  void set_timedtext_track_id(uint64_t value);
  private:
  uint64_t _internal_timedtext_track_id() const;
  void _internal_set_timedtext_track_id(uint64_t value);
  public:

  // optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
  bool has_last_modified() const;
  private:
  bool _internal_has_last_modified() const;
  public:
  void clear_last_modified();
  uint32_t last_modified() const;
  void set_last_modified(uint32_t value);
  private:
  uint32_t _internal_last_modified() const;
  void _internal_set_last_modified(uint32_t value);
  public:

  // optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
  bool has_hide_from_watch_history() const;
  private:
  bool _internal_has_hide_from_watch_history() const;
  public:
  void clear_hide_from_watch_history();
  bool hide_from_watch_history() const;
  void set_hide_from_watch_history(bool value);
  private:
  bool _internal_hide_from_watch_history() const;
  void _internal_set_hide_from_watch_history(bool value);
  public:

  // optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
  bool has_hide_from_library() const;
  private:
  bool _internal_has_hide_from_library() const;
  public:
  void clear_hide_from_library();
  bool hide_from_library() const;
  void set_hide_from_library(bool value);
  private:
  bool _internal_hide_from_library() const;
  void _internal_set_hide_from_library(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VideoBookmark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t app_id_;
  uint32_t playback_position_in_seconds_;
  uint64_t video_track_id_;
  uint64_t audio_track_id_;
  uint64_t timedtext_track_id_;
  uint32_t last_modified_;
  bool hide_from_watch_history_;
  bool hide_from_library_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_SetVideoBookmark_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_SetVideoBookmark_Notification) */ {
 public:
  inline CVideo_SetVideoBookmark_Notification() : CVideo_SetVideoBookmark_Notification(nullptr) {}
  ~CVideo_SetVideoBookmark_Notification() override;
  explicit constexpr CVideo_SetVideoBookmark_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_SetVideoBookmark_Notification(const CVideo_SetVideoBookmark_Notification& from);
  CVideo_SetVideoBookmark_Notification(CVideo_SetVideoBookmark_Notification&& from) noexcept
    : CVideo_SetVideoBookmark_Notification() {
    *this = ::std::move(from);
  }

  inline CVideo_SetVideoBookmark_Notification& operator=(const CVideo_SetVideoBookmark_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_SetVideoBookmark_Notification& operator=(CVideo_SetVideoBookmark_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_SetVideoBookmark_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_SetVideoBookmark_Notification* internal_default_instance() {
    return reinterpret_cast<const CVideo_SetVideoBookmark_Notification*>(
               &_CVideo_SetVideoBookmark_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CVideo_SetVideoBookmark_Notification& a, CVideo_SetVideoBookmark_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_SetVideoBookmark_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_SetVideoBookmark_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_SetVideoBookmark_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_SetVideoBookmark_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_SetVideoBookmark_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_SetVideoBookmark_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_SetVideoBookmark_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_SetVideoBookmark_Notification";
  }
  protected:
  explicit CVideo_SetVideoBookmark_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookmarksFieldNumber = 1,
  };
  // repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
  int bookmarks_size() const;
  private:
  int _internal_bookmarks_size() const;
  public:
  void clear_bookmarks();
  ::VideoBookmark* mutable_bookmarks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >*
      mutable_bookmarks();
  private:
  const ::VideoBookmark& _internal_bookmarks(int index) const;
  ::VideoBookmark* _internal_add_bookmarks();
  public:
  const ::VideoBookmark& bookmarks(int index) const;
  ::VideoBookmark* add_bookmarks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >&
      bookmarks() const;

  // @@protoc_insertion_point(class_scope:CVideo_SetVideoBookmark_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark > bookmarks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GetVideoBookmarks_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GetVideoBookmarks_Request) */ {
 public:
  inline CVideo_GetVideoBookmarks_Request() : CVideo_GetVideoBookmarks_Request(nullptr) {}
  ~CVideo_GetVideoBookmarks_Request() override;
  explicit constexpr CVideo_GetVideoBookmarks_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GetVideoBookmarks_Request(const CVideo_GetVideoBookmarks_Request& from);
  CVideo_GetVideoBookmarks_Request(CVideo_GetVideoBookmarks_Request&& from) noexcept
    : CVideo_GetVideoBookmarks_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_GetVideoBookmarks_Request& operator=(const CVideo_GetVideoBookmarks_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GetVideoBookmarks_Request& operator=(CVideo_GetVideoBookmarks_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_GetVideoBookmarks_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GetVideoBookmarks_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_GetVideoBookmarks_Request*>(
               &_CVideo_GetVideoBookmarks_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CVideo_GetVideoBookmarks_Request& a, CVideo_GetVideoBookmarks_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GetVideoBookmarks_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GetVideoBookmarks_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_GetVideoBookmarks_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_GetVideoBookmarks_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_GetVideoBookmarks_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_GetVideoBookmarks_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GetVideoBookmarks_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GetVideoBookmarks_Request";
  }
  protected:
  explicit CVideo_GetVideoBookmarks_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFieldNumber = 1,
    kUpdatedSinceFieldNumber = 2,
  };
  // repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
  int appids_size() const;
  private:
  int _internal_appids_size() const;
  public:
  void clear_appids();
  private:
  uint32_t _internal_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids() const;
  void _internal_add_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids();
  public:
  uint32_t appids(int index) const;
  void set_appids(int index, uint32_t value);
  void add_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids();

  // optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
  bool has_updated_since() const;
  private:
  bool _internal_has_updated_since() const;
  public:
  void clear_updated_since();
  uint32_t updated_since() const;
  void set_updated_since(uint32_t value);
  private:
  uint32_t _internal_updated_since() const;
  void _internal_set_updated_since(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GetVideoBookmarks_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_;
  uint32_t updated_since_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GetVideoBookmarks_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GetVideoBookmarks_Response) */ {
 public:
  inline CVideo_GetVideoBookmarks_Response() : CVideo_GetVideoBookmarks_Response(nullptr) {}
  ~CVideo_GetVideoBookmarks_Response() override;
  explicit constexpr CVideo_GetVideoBookmarks_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GetVideoBookmarks_Response(const CVideo_GetVideoBookmarks_Response& from);
  CVideo_GetVideoBookmarks_Response(CVideo_GetVideoBookmarks_Response&& from) noexcept
    : CVideo_GetVideoBookmarks_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_GetVideoBookmarks_Response& operator=(const CVideo_GetVideoBookmarks_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GetVideoBookmarks_Response& operator=(CVideo_GetVideoBookmarks_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_GetVideoBookmarks_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GetVideoBookmarks_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_GetVideoBookmarks_Response*>(
               &_CVideo_GetVideoBookmarks_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CVideo_GetVideoBookmarks_Response& a, CVideo_GetVideoBookmarks_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GetVideoBookmarks_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GetVideoBookmarks_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_GetVideoBookmarks_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_GetVideoBookmarks_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_GetVideoBookmarks_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_GetVideoBookmarks_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GetVideoBookmarks_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GetVideoBookmarks_Response";
  }
  protected:
  explicit CVideo_GetVideoBookmarks_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookmarksFieldNumber = 1,
  };
  // repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
  int bookmarks_size() const;
  private:
  int _internal_bookmarks_size() const;
  public:
  void clear_bookmarks();
  ::VideoBookmark* mutable_bookmarks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >*
      mutable_bookmarks();
  private:
  const ::VideoBookmark& _internal_bookmarks(int index) const;
  ::VideoBookmark* _internal_add_bookmarks();
  public:
  const ::VideoBookmark& bookmarks(int index) const;
  ::VideoBookmark* add_bookmarks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >&
      bookmarks() const;

  // @@protoc_insertion_point(class_scope:CVideo_GetVideoBookmarks_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark > bookmarks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameClipRepresentation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameClipRepresentation) */ {
 public:
  inline CVideo_GameClipRepresentation() : CVideo_GameClipRepresentation(nullptr) {}
  ~CVideo_GameClipRepresentation() override;
  explicit constexpr CVideo_GameClipRepresentation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameClipRepresentation(const CVideo_GameClipRepresentation& from);
  CVideo_GameClipRepresentation(CVideo_GameClipRepresentation&& from) noexcept
    : CVideo_GameClipRepresentation() {
    *this = ::std::move(from);
  }

  inline CVideo_GameClipRepresentation& operator=(const CVideo_GameClipRepresentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameClipRepresentation& operator=(CVideo_GameClipRepresentation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_GameClipRepresentation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameClipRepresentation* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameClipRepresentation*>(
               &_CVideo_GameClipRepresentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CVideo_GameClipRepresentation& a, CVideo_GameClipRepresentation& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameClipRepresentation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameClipRepresentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_GameClipRepresentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_GameClipRepresentation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_GameClipRepresentation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_GameClipRepresentation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameClipRepresentation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameClipRepresentation";
  }
  protected:
  explicit CVideo_GameClipRepresentation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepresentationNameFieldNumber = 2,
    kFrameRateStringFieldNumber = 8,
    kCodecFieldNumber = 9,
    kHorizontalResolutionFieldNumber = 3,
    kVerticalResolutionFieldNumber = 4,
    kFrameRateFieldNumber = 5,
    kBandwidthFieldNumber = 6,
    kAudioSampleRateFieldNumber = 7,
    kAudioChannelConfigFieldNumber = 10,
  };
  // optional string representation_name = 2 [(.description) = "EG 480p30"];
  bool has_representation_name() const;
  private:
  bool _internal_has_representation_name() const;
  public:
  void clear_representation_name();
  const std::string& representation_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_representation_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_representation_name();
  PROTOBUF_NODISCARD std::string* release_representation_name();
  void set_allocated_representation_name(std::string* representation_name);
  private:
  const std::string& _internal_representation_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_representation_name(const std::string& value);
  std::string* _internal_mutable_representation_name();
  public:

  // optional string frame_rate_string = 8 [(.description) = "Frame Rate string if contains video"];
  bool has_frame_rate_string() const;
  private:
  bool _internal_has_frame_rate_string() const;
  public:
  void clear_frame_rate_string();
  const std::string& frame_rate_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_rate_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_rate_string();
  PROTOBUF_NODISCARD std::string* release_frame_rate_string();
  void set_allocated_frame_rate_string(std::string* frame_rate_string);
  private:
  const std::string& _internal_frame_rate_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_rate_string(const std::string& value);
  std::string* _internal_mutable_frame_rate_string();
  public:

  // optional string codec = 9 [(.description) = "codec(s) used"];
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // optional uint32 horizontal_resolution = 3 [(.description) = "Width in pixels if contains video"];
  bool has_horizontal_resolution() const;
  private:
  bool _internal_has_horizontal_resolution() const;
  public:
  void clear_horizontal_resolution();
  uint32_t horizontal_resolution() const;
  void set_horizontal_resolution(uint32_t value);
  private:
  uint32_t _internal_horizontal_resolution() const;
  void _internal_set_horizontal_resolution(uint32_t value);
  public:

  // optional uint32 vertical_resolution = 4 [(.description) = "Height in pixels if contains video"];
  bool has_vertical_resolution() const;
  private:
  bool _internal_has_vertical_resolution() const;
  public:
  void clear_vertical_resolution();
  uint32_t vertical_resolution() const;
  void set_vertical_resolution(uint32_t value);
  private:
  uint32_t _internal_vertical_resolution() const;
  void _internal_set_vertical_resolution(uint32_t value);
  public:

  // optional double frame_rate = 5 [(.description) = "Frame Rate if contains video"];
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  double frame_rate() const;
  void set_frame_rate(double value);
  private:
  double _internal_frame_rate() const;
  void _internal_set_frame_rate(double value);
  public:

  // optional uint32 bandwidth = 6 [(.description) = "Kbps"];
  bool has_bandwidth() const;
  private:
  bool _internal_has_bandwidth() const;
  public:
  void clear_bandwidth();
  uint32_t bandwidth() const;
  void set_bandwidth(uint32_t value);
  private:
  uint32_t _internal_bandwidth() const;
  void _internal_set_bandwidth(uint32_t value);
  public:

  // optional uint32 audio_sample_rate = 7 [(.description) = "Sample rate in Hz if contains audio"];
  bool has_audio_sample_rate() const;
  private:
  bool _internal_has_audio_sample_rate() const;
  public:
  void clear_audio_sample_rate();
  uint32_t audio_sample_rate() const;
  void set_audio_sample_rate(uint32_t value);
  private:
  uint32_t _internal_audio_sample_rate() const;
  void _internal_set_audio_sample_rate(uint32_t value);
  public:

  // optional uint32 audio_channel_config = 10 [(.description) = "audio channel config if relevant"];
  bool has_audio_channel_config() const;
  private:
  bool _internal_has_audio_channel_config() const;
  public:
  void clear_audio_channel_config();
  uint32_t audio_channel_config() const;
  void set_audio_channel_config(uint32_t value);
  private:
  uint32_t _internal_audio_channel_config() const;
  void _internal_set_audio_channel_config(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameClipRepresentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representation_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_rate_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  uint32_t horizontal_resolution_;
  uint32_t vertical_resolution_;
  double frame_rate_;
  uint32_t bandwidth_;
  uint32_t audio_sample_rate_;
  uint32_t audio_channel_config_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameClipComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameClipComponent) */ {
 public:
  inline CVideo_GameClipComponent() : CVideo_GameClipComponent(nullptr) {}
  ~CVideo_GameClipComponent() override;
  explicit constexpr CVideo_GameClipComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameClipComponent(const CVideo_GameClipComponent& from);
  CVideo_GameClipComponent(CVideo_GameClipComponent&& from) noexcept
    : CVideo_GameClipComponent() {
    *this = ::std::move(from);
  }

  inline CVideo_GameClipComponent& operator=(const CVideo_GameClipComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameClipComponent& operator=(CVideo_GameClipComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_GameClipComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameClipComponent* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameClipComponent*>(
               &_CVideo_GameClipComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CVideo_GameClipComponent& a, CVideo_GameClipComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameClipComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameClipComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_GameClipComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_GameClipComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_GameClipComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_GameClipComponent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameClipComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameClipComponent";
  }
  protected:
  explicit CVideo_GameClipComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepresentationsFieldNumber = 5,
    kComponentNameFieldNumber = 1,
    kFileTypeFieldNumber = 4,
    kContentsFieldNumber = 2,
    kSegmentSizeFieldNumber = 3,
  };
  // repeated .CVideo_GameClipRepresentation representations = 5 [(.description) = "list of representations"];
  int representations_size() const;
  private:
  int _internal_representations_size() const;
  public:
  void clear_representations();
  ::CVideo_GameClipRepresentation* mutable_representations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipRepresentation >*
      mutable_representations();
  private:
  const ::CVideo_GameClipRepresentation& _internal_representations(int index) const;
  ::CVideo_GameClipRepresentation* _internal_add_representations();
  public:
  const ::CVideo_GameClipRepresentation& representations(int index) const;
  ::CVideo_GameClipRepresentation* add_representations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipRepresentation >&
      representations() const;

  // optional string component_name = 1 [(.description) = "video/audio/etc"];
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // optional string file_type = 4 [(.description) = "file type"];
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  const std::string& file_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_type();
  PROTOBUF_NODISCARD std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // optional uint32 contents = 2 [(.description) = "EVideoTrackContents"];
  bool has_contents() const;
  private:
  bool _internal_has_contents() const;
  public:
  void clear_contents();
  uint32_t contents() const;
  void set_contents(uint32_t value);
  private:
  uint32_t _internal_contents() const;
  void _internal_set_contents(uint32_t value);
  public:

  // optional uint32 segment_size = 3 [(.description) = "size of most segments (last may be shorter)"];
  bool has_segment_size() const;
  private:
  bool _internal_has_segment_size() const;
  public:
  void clear_segment_size();
  uint32_t segment_size() const;
  void set_segment_size(uint32_t value);
  private:
  uint32_t _internal_segment_size() const;
  void _internal_set_segment_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameClipComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipRepresentation > representations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  uint32_t contents_;
  uint32_t segment_size_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_CreateGameClip_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_CreateGameClip_Request) */ {
 public:
  inline CVideo_CreateGameClip_Request() : CVideo_CreateGameClip_Request(nullptr) {}
  ~CVideo_CreateGameClip_Request() override;
  explicit constexpr CVideo_CreateGameClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_CreateGameClip_Request(const CVideo_CreateGameClip_Request& from);
  CVideo_CreateGameClip_Request(CVideo_CreateGameClip_Request&& from) noexcept
    : CVideo_CreateGameClip_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_CreateGameClip_Request& operator=(const CVideo_CreateGameClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_CreateGameClip_Request& operator=(CVideo_CreateGameClip_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_CreateGameClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_CreateGameClip_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_CreateGameClip_Request*>(
               &_CVideo_CreateGameClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CVideo_CreateGameClip_Request& a, CVideo_CreateGameClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_CreateGameClip_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_CreateGameClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_CreateGameClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_CreateGameClip_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_CreateGameClip_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_CreateGameClip_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_CreateGameClip_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_CreateGameClip_Request";
  }
  protected:
  explicit CVideo_CreateGameClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kNumSegmentsFieldNumber = 2,
    kLengthMillisecondsFieldNumber = 3,
    kSegmentDurationTimescaleFieldNumber = 4,
    kSegmentDurationFieldNumber = 5,
  };
  // repeated .CVideo_GameClipComponent components = 6 [(.description) = "List of components"];
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::CVideo_GameClipComponent* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipComponent >*
      mutable_components();
  private:
  const ::CVideo_GameClipComponent& _internal_components(int index) const;
  ::CVideo_GameClipComponent* _internal_add_components();
  public:
  const ::CVideo_GameClipComponent& components(int index) const;
  ::CVideo_GameClipComponent* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipComponent >&
      components() const;

  // optional uint32 app_id = 1 [(.description) = "app ID stream is tagged with"];
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 num_segments = 2 [(.description) = "number of segments in this clip"];
  bool has_num_segments() const;
  private:
  bool _internal_has_num_segments() const;
  public:
  void clear_num_segments();
  uint32_t num_segments() const;
  void set_num_segments(uint32_t value);
  private:
  uint32_t _internal_num_segments() const;
  void _internal_set_num_segments(uint32_t value);
  public:

  // optional uint32 length_milliseconds = 3 [(.description) = "length of video in ms"];
  bool has_length_milliseconds() const;
  private:
  bool _internal_has_length_milliseconds() const;
  public:
  void clear_length_milliseconds();
  uint32_t length_milliseconds() const;
  void set_length_milliseconds(uint32_t value);
  private:
  uint32_t _internal_length_milliseconds() const;
  void _internal_set_length_milliseconds(uint32_t value);
  public:

  // optional uint32 segment_duration_timescale = 4 [(.description) = "timescale (denominator) for segment duration below, eg 1000 for milliseconds"];
  bool has_segment_duration_timescale() const;
  private:
  bool _internal_has_segment_duration_timescale() const;
  public:
  void clear_segment_duration_timescale();
  uint32_t segment_duration_timescale() const;
  void set_segment_duration_timescale(uint32_t value);
  private:
  uint32_t _internal_segment_duration_timescale() const;
  void _internal_set_segment_duration_timescale(uint32_t value);
  public:

  // optional uint32 segment_duration = 5 [(.description) = "length of most segments in \'timescale\' units (last may be shorter)"];
  bool has_segment_duration() const;
  private:
  bool _internal_has_segment_duration() const;
  public:
  void clear_segment_duration();
  uint32_t segment_duration() const;
  void set_segment_duration(uint32_t value);
  private:
  uint32_t _internal_segment_duration() const;
  void _internal_set_segment_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_CreateGameClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipComponent > components_;
  uint32_t app_id_;
  uint32_t num_segments_;
  uint32_t length_milliseconds_;
  uint32_t segment_duration_timescale_;
  uint32_t segment_duration_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_CreateGameClip_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_CreateGameClip_Response) */ {
 public:
  inline CVideo_CreateGameClip_Response() : CVideo_CreateGameClip_Response(nullptr) {}
  ~CVideo_CreateGameClip_Response() override;
  explicit constexpr CVideo_CreateGameClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_CreateGameClip_Response(const CVideo_CreateGameClip_Response& from);
  CVideo_CreateGameClip_Response(CVideo_CreateGameClip_Response&& from) noexcept
    : CVideo_CreateGameClip_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_CreateGameClip_Response& operator=(const CVideo_CreateGameClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_CreateGameClip_Response& operator=(CVideo_CreateGameClip_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_CreateGameClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_CreateGameClip_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_CreateGameClip_Response*>(
               &_CVideo_CreateGameClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CVideo_CreateGameClip_Response& a, CVideo_CreateGameClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_CreateGameClip_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_CreateGameClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_CreateGameClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_CreateGameClip_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_CreateGameClip_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_CreateGameClip_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_CreateGameClip_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_CreateGameClip_Response";
  }
  protected:
  explicit CVideo_CreateGameClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipIdFieldNumber = 1,
  };
  // optional uint64 clip_id = 1 [(.description) = "Clip ID if successful"];
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  uint64_t clip_id() const;
  void set_clip_id(uint64_t value);
  private:
  uint64_t _internal_clip_id() const;
  void _internal_set_clip_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_CreateGameClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t clip_id_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameClipSegmentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameClipSegmentInfo) */ {
 public:
  inline CVideo_GameClipSegmentInfo() : CVideo_GameClipSegmentInfo(nullptr) {}
  ~CVideo_GameClipSegmentInfo() override;
  explicit constexpr CVideo_GameClipSegmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameClipSegmentInfo(const CVideo_GameClipSegmentInfo& from);
  CVideo_GameClipSegmentInfo(CVideo_GameClipSegmentInfo&& from) noexcept
    : CVideo_GameClipSegmentInfo() {
    *this = ::std::move(from);
  }

  inline CVideo_GameClipSegmentInfo& operator=(const CVideo_GameClipSegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameClipSegmentInfo& operator=(CVideo_GameClipSegmentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_GameClipSegmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameClipSegmentInfo* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameClipSegmentInfo*>(
               &_CVideo_GameClipSegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CVideo_GameClipSegmentInfo& a, CVideo_GameClipSegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameClipSegmentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameClipSegmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_GameClipSegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_GameClipSegmentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_GameClipSegmentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_GameClipSegmentInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameClipSegmentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameClipSegmentInfo";
  }
  protected:
  explicit CVideo_GameClipSegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentNumberFieldNumber = 4,
    kSegmentSizeBytesFieldNumber = 5,
  };
  // optional uint32 segment_number = 4 [(.description) = "segment number"];
  bool has_segment_number() const;
  private:
  bool _internal_has_segment_number() const;
  public:
  void clear_segment_number();
  uint32_t segment_number() const;
  void set_segment_number(uint32_t value);
  private:
  uint32_t _internal_segment_number() const;
  void _internal_set_segment_number(uint32_t value);
  public:

  // optional uint64 segment_size_bytes = 5 [(.description) = "segment size in bytes"];
  bool has_segment_size_bytes() const;
  private:
  bool _internal_has_segment_size_bytes() const;
  public:
  void clear_segment_size_bytes();
  uint64_t segment_size_bytes() const;
  void set_segment_size_bytes(uint64_t value);
  private:
  uint64_t _internal_segment_size_bytes() const;
  void _internal_set_segment_size_bytes(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameClipSegmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t segment_number_;
  uint64_t segment_size_bytes_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_BeginGameClipSegmentsUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_BeginGameClipSegmentsUpload_Request) */ {
 public:
  inline CVideo_BeginGameClipSegmentsUpload_Request() : CVideo_BeginGameClipSegmentsUpload_Request(nullptr) {}
  ~CVideo_BeginGameClipSegmentsUpload_Request() override;
  explicit constexpr CVideo_BeginGameClipSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_BeginGameClipSegmentsUpload_Request(const CVideo_BeginGameClipSegmentsUpload_Request& from);
  CVideo_BeginGameClipSegmentsUpload_Request(CVideo_BeginGameClipSegmentsUpload_Request&& from) noexcept
    : CVideo_BeginGameClipSegmentsUpload_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_BeginGameClipSegmentsUpload_Request& operator=(const CVideo_BeginGameClipSegmentsUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_BeginGameClipSegmentsUpload_Request& operator=(CVideo_BeginGameClipSegmentsUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_BeginGameClipSegmentsUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_BeginGameClipSegmentsUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_BeginGameClipSegmentsUpload_Request*>(
               &_CVideo_BeginGameClipSegmentsUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CVideo_BeginGameClipSegmentsUpload_Request& a, CVideo_BeginGameClipSegmentsUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_BeginGameClipSegmentsUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_BeginGameClipSegmentsUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_BeginGameClipSegmentsUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_BeginGameClipSegmentsUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_BeginGameClipSegmentsUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_BeginGameClipSegmentsUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_BeginGameClipSegmentsUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_BeginGameClipSegmentsUpload_Request";
  }
  protected:
  explicit CVideo_BeginGameClipSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsToStoreFieldNumber = 4,
    kComponentNameFieldNumber = 2,
    kRepresentationNameFieldNumber = 3,
    kClipIdFieldNumber = 1,
  };
  // repeated .CVideo_GameClipSegmentInfo segments_to_store = 4 [(.description) = "Segments the client has to upload"];
  int segments_to_store_size() const;
  private:
  int _internal_segments_to_store_size() const;
  public:
  void clear_segments_to_store();
  ::CVideo_GameClipSegmentInfo* mutable_segments_to_store(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentInfo >*
      mutable_segments_to_store();
  private:
  const ::CVideo_GameClipSegmentInfo& _internal_segments_to_store(int index) const;
  ::CVideo_GameClipSegmentInfo* _internal_add_segments_to_store();
  public:
  const ::CVideo_GameClipSegmentInfo& segments_to_store(int index) const;
  ::CVideo_GameClipSegmentInfo* add_segments_to_store();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentInfo >&
      segments_to_store() const;

  // optional string component_name = 2 [(.description) = "component segments belong to"];
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // optional string representation_name = 3 [(.description) = "representation name"];
  bool has_representation_name() const;
  private:
  bool _internal_has_representation_name() const;
  public:
  void clear_representation_name();
  const std::string& representation_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_representation_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_representation_name();
  PROTOBUF_NODISCARD std::string* release_representation_name();
  void set_allocated_representation_name(std::string* representation_name);
  private:
  const std::string& _internal_representation_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_representation_name(const std::string& value);
  std::string* _internal_mutable_representation_name();
  public:

  // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  uint64_t clip_id() const;
  void set_clip_id(uint64_t value);
  private:
  uint64_t _internal_clip_id() const;
  void _internal_set_clip_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_BeginGameClipSegmentsUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentInfo > segments_to_store_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representation_name_;
  uint64_t clip_id_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameClipSegmentUploadInfo_HTTPHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameClipSegmentUploadInfo.HTTPHeaders) */ {
 public:
  inline CVideo_GameClipSegmentUploadInfo_HTTPHeaders() : CVideo_GameClipSegmentUploadInfo_HTTPHeaders(nullptr) {}
  ~CVideo_GameClipSegmentUploadInfo_HTTPHeaders() override;
  explicit constexpr CVideo_GameClipSegmentUploadInfo_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameClipSegmentUploadInfo_HTTPHeaders(const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& from);
  CVideo_GameClipSegmentUploadInfo_HTTPHeaders(CVideo_GameClipSegmentUploadInfo_HTTPHeaders&& from) noexcept
    : CVideo_GameClipSegmentUploadInfo_HTTPHeaders() {
    *this = ::std::move(from);
  }

  inline CVideo_GameClipSegmentUploadInfo_HTTPHeaders& operator=(const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameClipSegmentUploadInfo_HTTPHeaders& operator=(CVideo_GameClipSegmentUploadInfo_HTTPHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameClipSegmentUploadInfo_HTTPHeaders* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameClipSegmentUploadInfo_HTTPHeaders*>(
               &_CVideo_GameClipSegmentUploadInfo_HTTPHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CVideo_GameClipSegmentUploadInfo_HTTPHeaders& a, CVideo_GameClipSegmentUploadInfo_HTTPHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameClipSegmentUploadInfo_HTTPHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameClipSegmentUploadInfo_HTTPHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_GameClipSegmentUploadInfo_HTTPHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_GameClipSegmentUploadInfo_HTTPHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_GameClipSegmentUploadInfo_HTTPHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameClipSegmentUploadInfo_HTTPHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameClipSegmentUploadInfo.HTTPHeaders";
  }
  protected:
  explicit CVideo_GameClipSegmentUploadInfo_HTTPHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1 [(.description) = "HTTP header name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2 [(.description) = "HTTP header value"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameClipSegmentUploadInfo.HTTPHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_GameClipSegmentUploadInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_GameClipSegmentUploadInfo) */ {
 public:
  inline CVideo_GameClipSegmentUploadInfo() : CVideo_GameClipSegmentUploadInfo(nullptr) {}
  ~CVideo_GameClipSegmentUploadInfo() override;
  explicit constexpr CVideo_GameClipSegmentUploadInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_GameClipSegmentUploadInfo(const CVideo_GameClipSegmentUploadInfo& from);
  CVideo_GameClipSegmentUploadInfo(CVideo_GameClipSegmentUploadInfo&& from) noexcept
    : CVideo_GameClipSegmentUploadInfo() {
    *this = ::std::move(from);
  }

  inline CVideo_GameClipSegmentUploadInfo& operator=(const CVideo_GameClipSegmentUploadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_GameClipSegmentUploadInfo& operator=(CVideo_GameClipSegmentUploadInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_GameClipSegmentUploadInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_GameClipSegmentUploadInfo* internal_default_instance() {
    return reinterpret_cast<const CVideo_GameClipSegmentUploadInfo*>(
               &_CVideo_GameClipSegmentUploadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CVideo_GameClipSegmentUploadInfo& a, CVideo_GameClipSegmentUploadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_GameClipSegmentUploadInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_GameClipSegmentUploadInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_GameClipSegmentUploadInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_GameClipSegmentUploadInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_GameClipSegmentUploadInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_GameClipSegmentUploadInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_GameClipSegmentUploadInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_GameClipSegmentUploadInfo";
  }
  protected:
  explicit CVideo_GameClipSegmentUploadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CVideo_GameClipSegmentUploadInfo_HTTPHeaders HTTPHeaders;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestHeadersFieldNumber = 5,
    kUrlHostFieldNumber = 2,
    kUrlPathFieldNumber = 3,
    kSegmentInfoFieldNumber = 1,
    kUseHttpsFieldNumber = 4,
  };
  // repeated .CVideo_GameClipSegmentUploadInfo.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
  int request_headers_size() const;
  private:
  int _internal_request_headers_size() const;
  public:
  void clear_request_headers();
  ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* mutable_request_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders >*
      mutable_request_headers();
  private:
  const ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders& _internal_request_headers(int index) const;
  ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* _internal_add_request_headers();
  public:
  const ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders& request_headers(int index) const;
  ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* add_request_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders >&
      request_headers() const;

  // optional string url_host = 2 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  bool has_url_host() const;
  private:
  bool _internal_has_url_host() const;
  public:
  void clear_url_host();
  const std::string& url_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_host();
  PROTOBUF_NODISCARD std::string* release_url_host();
  void set_allocated_url_host(std::string* url_host);
  private:
  const std::string& _internal_url_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_host(const std::string& value);
  std::string* _internal_mutable_url_host();
  public:

  // optional string url_path = 3 [(.description) = "Relative path on server to which file should be uploaded."];
  bool has_url_path() const;
  private:
  bool _internal_has_url_path() const;
  public:
  void clear_url_path();
  const std::string& url_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url_path();
  PROTOBUF_NODISCARD std::string* release_url_path();
  void set_allocated_url_path(std::string* url_path);
  private:
  const std::string& _internal_url_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url_path(const std::string& value);
  std::string* _internal_mutable_url_path();
  public:

  // optional .CVideo_GameClipSegmentInfo segment_info = 1 [(.description) = "segment ID information"];
  bool has_segment_info() const;
  private:
  bool _internal_has_segment_info() const;
  public:
  void clear_segment_info();
  const ::CVideo_GameClipSegmentInfo& segment_info() const;
  PROTOBUF_NODISCARD ::CVideo_GameClipSegmentInfo* release_segment_info();
  ::CVideo_GameClipSegmentInfo* mutable_segment_info();
  void set_allocated_segment_info(::CVideo_GameClipSegmentInfo* segment_info);
  private:
  const ::CVideo_GameClipSegmentInfo& _internal_segment_info() const;
  ::CVideo_GameClipSegmentInfo* _internal_mutable_segment_info();
  public:
  void unsafe_arena_set_allocated_segment_info(
      ::CVideo_GameClipSegmentInfo* segment_info);
  ::CVideo_GameClipSegmentInfo* unsafe_arena_release_segment_info();

  // optional bool use_https = 4 [(.description) = "If true, use https, otherwise use http."];
  bool has_use_https() const;
  private:
  bool _internal_has_use_https() const;
  public:
  void clear_use_https();
  bool use_https() const;
  void set_use_https(bool value);
  private:
  bool _internal_use_https() const;
  void _internal_set_use_https(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_GameClipSegmentUploadInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders > request_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_path_;
  ::CVideo_GameClipSegmentInfo* segment_info_;
  bool use_https_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_BeginGameClipSegmentsUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_BeginGameClipSegmentsUpload_Response) */ {
 public:
  inline CVideo_BeginGameClipSegmentsUpload_Response() : CVideo_BeginGameClipSegmentsUpload_Response(nullptr) {}
  ~CVideo_BeginGameClipSegmentsUpload_Response() override;
  explicit constexpr CVideo_BeginGameClipSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_BeginGameClipSegmentsUpload_Response(const CVideo_BeginGameClipSegmentsUpload_Response& from);
  CVideo_BeginGameClipSegmentsUpload_Response(CVideo_BeginGameClipSegmentsUpload_Response&& from) noexcept
    : CVideo_BeginGameClipSegmentsUpload_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_BeginGameClipSegmentsUpload_Response& operator=(const CVideo_BeginGameClipSegmentsUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_BeginGameClipSegmentsUpload_Response& operator=(CVideo_BeginGameClipSegmentsUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_BeginGameClipSegmentsUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_BeginGameClipSegmentsUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_BeginGameClipSegmentsUpload_Response*>(
               &_CVideo_BeginGameClipSegmentsUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CVideo_BeginGameClipSegmentsUpload_Response& a, CVideo_BeginGameClipSegmentsUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_BeginGameClipSegmentsUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_BeginGameClipSegmentsUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_BeginGameClipSegmentsUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_BeginGameClipSegmentsUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_BeginGameClipSegmentsUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_BeginGameClipSegmentsUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_BeginGameClipSegmentsUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_BeginGameClipSegmentsUpload_Response";
  }
  protected:
  explicit CVideo_BeginGameClipSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsNeededFieldNumber = 1,
    kCallAgainFieldNumber = 2,
  };
  // repeated .CVideo_GameClipSegmentUploadInfo segments_needed = 1 [(.description) = "Segments that need uploading"];
  int segments_needed_size() const;
  private:
  int _internal_segments_needed_size() const;
  public:
  void clear_segments_needed();
  ::CVideo_GameClipSegmentUploadInfo* mutable_segments_needed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo >*
      mutable_segments_needed();
  private:
  const ::CVideo_GameClipSegmentUploadInfo& _internal_segments_needed(int index) const;
  ::CVideo_GameClipSegmentUploadInfo* _internal_add_segments_needed();
  public:
  const ::CVideo_GameClipSegmentUploadInfo& segments_needed(int index) const;
  ::CVideo_GameClipSegmentUploadInfo* add_segments_needed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo >&
      segments_needed() const;

  // optional bool call_again = 2 [(.description) = "If true, you should ask again once you\'ve uploaded the segments indicated in this response. There may be more we want. If there was no work to do in this response, then wait a few seconds before asking again"];
  bool has_call_again() const;
  private:
  bool _internal_has_call_again() const;
  public:
  void clear_call_again();
  bool call_again() const;
  void set_call_again(bool value);
  private:
  bool _internal_call_again() const;
  void _internal_set_call_again(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_BeginGameClipSegmentsUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo > segments_needed_;
  bool call_again_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_CommitGameClipSegmentsUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_CommitGameClipSegmentsUpload_Request) */ {
 public:
  inline CVideo_CommitGameClipSegmentsUpload_Request() : CVideo_CommitGameClipSegmentsUpload_Request(nullptr) {}
  ~CVideo_CommitGameClipSegmentsUpload_Request() override;
  explicit constexpr CVideo_CommitGameClipSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_CommitGameClipSegmentsUpload_Request(const CVideo_CommitGameClipSegmentsUpload_Request& from);
  CVideo_CommitGameClipSegmentsUpload_Request(CVideo_CommitGameClipSegmentsUpload_Request&& from) noexcept
    : CVideo_CommitGameClipSegmentsUpload_Request() {
    *this = ::std::move(from);
  }

  inline CVideo_CommitGameClipSegmentsUpload_Request& operator=(const CVideo_CommitGameClipSegmentsUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_CommitGameClipSegmentsUpload_Request& operator=(CVideo_CommitGameClipSegmentsUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_CommitGameClipSegmentsUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_CommitGameClipSegmentsUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CVideo_CommitGameClipSegmentsUpload_Request*>(
               &_CVideo_CommitGameClipSegmentsUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CVideo_CommitGameClipSegmentsUpload_Request& a, CVideo_CommitGameClipSegmentsUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_CommitGameClipSegmentsUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_CommitGameClipSegmentsUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_CommitGameClipSegmentsUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_CommitGameClipSegmentsUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_CommitGameClipSegmentsUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_CommitGameClipSegmentsUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_CommitGameClipSegmentsUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_CommitGameClipSegmentsUpload_Request";
  }
  protected:
  explicit CVideo_CommitGameClipSegmentsUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 2,
    kRepresentationNameFieldNumber = 3,
    kClipIdFieldNumber = 1,
    kFirstSegmentNumberFieldNumber = 4,
    kNumSegmentsFieldNumber = 5,
    kUploadResultFieldNumber = 6,
  };
  // optional string component_name = 2 [(.description) = "component segments belong to"];
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // optional string representation_name = 3 [(.description) = "representation name"];
  bool has_representation_name() const;
  private:
  bool _internal_has_representation_name() const;
  public:
  void clear_representation_name();
  const std::string& representation_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_representation_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_representation_name();
  PROTOBUF_NODISCARD std::string* release_representation_name();
  void set_allocated_representation_name(std::string* representation_name);
  private:
  const std::string& _internal_representation_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_representation_name(const std::string& value);
  std::string* _internal_mutable_representation_name();
  public:

  // optional uint64 clip_id = 1 [(.description) = "Clip ID"];
  bool has_clip_id() const;
  private:
  bool _internal_has_clip_id() const;
  public:
  void clear_clip_id();
  uint64_t clip_id() const;
  void set_clip_id(uint64_t value);
  private:
  uint64_t _internal_clip_id() const;
  void _internal_set_clip_id(uint64_t value);
  public:

  // optional uint32 first_segment_number = 4 [(.description) = "Segment Number of first segment uploaded in this batch"];
  bool has_first_segment_number() const;
  private:
  bool _internal_has_first_segment_number() const;
  public:
  void clear_first_segment_number();
  uint32_t first_segment_number() const;
  void set_first_segment_number(uint32_t value);
  private:
  uint32_t _internal_first_segment_number() const;
  void _internal_set_first_segment_number(uint32_t value);
  public:

  // optional uint32 num_segments = 5 [(.description) = "Number of segments in Batch"];
  bool has_num_segments() const;
  private:
  bool _internal_has_num_segments() const;
  public:
  void clear_num_segments();
  uint32_t num_segments() const;
  void set_num_segments(uint32_t value);
  private:
  uint32_t _internal_num_segments() const;
  void _internal_set_num_segments(uint32_t value);
  public:

  // optional uint32 upload_result = 6 [(.description) = "eresult of the upload attempt"];
  bool has_upload_result() const;
  private:
  bool _internal_has_upload_result() const;
  public:
  void clear_upload_result();
  uint32_t upload_result() const;
  void set_upload_result(uint32_t value);
  private:
  uint32_t _internal_upload_result() const;
  void _internal_set_upload_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CVideo_CommitGameClipSegmentsUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr representation_name_;
  uint64_t clip_id_;
  uint32_t first_segment_number_;
  uint32_t num_segments_;
  uint32_t upload_result_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_CommitGameClipSegmentsUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CVideo_CommitGameClipSegmentsUpload_Response) */ {
 public:
  inline CVideo_CommitGameClipSegmentsUpload_Response() : CVideo_CommitGameClipSegmentsUpload_Response(nullptr) {}
  explicit constexpr CVideo_CommitGameClipSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_CommitGameClipSegmentsUpload_Response(const CVideo_CommitGameClipSegmentsUpload_Response& from);
  CVideo_CommitGameClipSegmentsUpload_Response(CVideo_CommitGameClipSegmentsUpload_Response&& from) noexcept
    : CVideo_CommitGameClipSegmentsUpload_Response() {
    *this = ::std::move(from);
  }

  inline CVideo_CommitGameClipSegmentsUpload_Response& operator=(const CVideo_CommitGameClipSegmentsUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_CommitGameClipSegmentsUpload_Response& operator=(CVideo_CommitGameClipSegmentsUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_CommitGameClipSegmentsUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_CommitGameClipSegmentsUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CVideo_CommitGameClipSegmentsUpload_Response*>(
               &_CVideo_CommitGameClipSegmentsUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CVideo_CommitGameClipSegmentsUpload_Response& a, CVideo_CommitGameClipSegmentsUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_CommitGameClipSegmentsUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_CommitGameClipSegmentsUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_CommitGameClipSegmentsUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_CommitGameClipSegmentsUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CVideo_CommitGameClipSegmentsUpload_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CVideo_CommitGameClipSegmentsUpload_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_CommitGameClipSegmentsUpload_Response";
  }
  protected:
  explicit CVideo_CommitGameClipSegmentsUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CVideo_CommitGameClipSegmentsUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CVideo_UnlockedH264_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CVideo_UnlockedH264_Notification) */ {
 public:
  inline CVideo_UnlockedH264_Notification() : CVideo_UnlockedH264_Notification(nullptr) {}
  ~CVideo_UnlockedH264_Notification() override;
  explicit constexpr CVideo_UnlockedH264_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CVideo_UnlockedH264_Notification(const CVideo_UnlockedH264_Notification& from);
  CVideo_UnlockedH264_Notification(CVideo_UnlockedH264_Notification&& from) noexcept
    : CVideo_UnlockedH264_Notification() {
    *this = ::std::move(from);
  }

  inline CVideo_UnlockedH264_Notification& operator=(const CVideo_UnlockedH264_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CVideo_UnlockedH264_Notification& operator=(CVideo_UnlockedH264_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CVideo_UnlockedH264_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CVideo_UnlockedH264_Notification* internal_default_instance() {
    return reinterpret_cast<const CVideo_UnlockedH264_Notification*>(
               &_CVideo_UnlockedH264_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CVideo_UnlockedH264_Notification& a, CVideo_UnlockedH264_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CVideo_UnlockedH264_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CVideo_UnlockedH264_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CVideo_UnlockedH264_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CVideo_UnlockedH264_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CVideo_UnlockedH264_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CVideo_UnlockedH264_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CVideo_UnlockedH264_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CVideo_UnlockedH264_Notification";
  }
  protected:
  explicit CVideo_UnlockedH264_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber = 1,
  };
  // optional bytes encryption_key = 1;
  bool has_encryption_key() const;
  private:
  bool _internal_has_encryption_key() const;
  public:
  void clear_encryption_key();
  const std::string& encryption_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encryption_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encryption_key();
  PROTOBUF_NODISCARD std::string* release_encryption_key();
  void set_allocated_encryption_key(std::string* encryption_key);
  private:
  const std::string& _internal_encryption_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encryption_key(const std::string& value);
  std::string* _internal_mutable_encryption_key();
  public:

  // @@protoc_insertion_point(class_scope:CVideo_UnlockedH264_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFovasVideo_ClientGetOPFSettings_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFovasVideo_ClientGetOPFSettings_Request) */ {
 public:
  inline CFovasVideo_ClientGetOPFSettings_Request() : CFovasVideo_ClientGetOPFSettings_Request(nullptr) {}
  ~CFovasVideo_ClientGetOPFSettings_Request() override;
  explicit constexpr CFovasVideo_ClientGetOPFSettings_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFovasVideo_ClientGetOPFSettings_Request(const CFovasVideo_ClientGetOPFSettings_Request& from);
  CFovasVideo_ClientGetOPFSettings_Request(CFovasVideo_ClientGetOPFSettings_Request&& from) noexcept
    : CFovasVideo_ClientGetOPFSettings_Request() {
    *this = ::std::move(from);
  }

  inline CFovasVideo_ClientGetOPFSettings_Request& operator=(const CFovasVideo_ClientGetOPFSettings_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFovasVideo_ClientGetOPFSettings_Request& operator=(CFovasVideo_ClientGetOPFSettings_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFovasVideo_ClientGetOPFSettings_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFovasVideo_ClientGetOPFSettings_Request* internal_default_instance() {
    return reinterpret_cast<const CFovasVideo_ClientGetOPFSettings_Request*>(
               &_CFovasVideo_ClientGetOPFSettings_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CFovasVideo_ClientGetOPFSettings_Request& a, CFovasVideo_ClientGetOPFSettings_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFovasVideo_ClientGetOPFSettings_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFovasVideo_ClientGetOPFSettings_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFovasVideo_ClientGetOPFSettings_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFovasVideo_ClientGetOPFSettings_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFovasVideo_ClientGetOPFSettings_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFovasVideo_ClientGetOPFSettings_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFovasVideo_ClientGetOPFSettings_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFovasVideo_ClientGetOPFSettings_Request";
  }
  protected:
  explicit CFovasVideo_ClientGetOPFSettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kClientCellidFieldNumber = 2,
  };
  // optional uint32 app_id = 1 [(.description) = "App ID"];
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
  bool has_client_cellid() const;
  private:
  bool _internal_has_client_cellid() const;
  public:
  void clear_client_cellid();
  uint32_t client_cellid() const;
  void set_client_cellid(uint32_t value);
  private:
  uint32_t _internal_client_cellid() const;
  void _internal_set_client_cellid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFovasVideo_ClientGetOPFSettings_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t app_id_;
  uint32_t client_cellid_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFovasVideo_ClientGetOPFSettings_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFovasVideo_ClientGetOPFSettings_Response) */ {
 public:
  inline CFovasVideo_ClientGetOPFSettings_Response() : CFovasVideo_ClientGetOPFSettings_Response(nullptr) {}
  ~CFovasVideo_ClientGetOPFSettings_Response() override;
  explicit constexpr CFovasVideo_ClientGetOPFSettings_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFovasVideo_ClientGetOPFSettings_Response(const CFovasVideo_ClientGetOPFSettings_Response& from);
  CFovasVideo_ClientGetOPFSettings_Response(CFovasVideo_ClientGetOPFSettings_Response&& from) noexcept
    : CFovasVideo_ClientGetOPFSettings_Response() {
    *this = ::std::move(from);
  }

  inline CFovasVideo_ClientGetOPFSettings_Response& operator=(const CFovasVideo_ClientGetOPFSettings_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFovasVideo_ClientGetOPFSettings_Response& operator=(CFovasVideo_ClientGetOPFSettings_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFovasVideo_ClientGetOPFSettings_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFovasVideo_ClientGetOPFSettings_Response* internal_default_instance() {
    return reinterpret_cast<const CFovasVideo_ClientGetOPFSettings_Response*>(
               &_CFovasVideo_ClientGetOPFSettings_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CFovasVideo_ClientGetOPFSettings_Response& a, CFovasVideo_ClientGetOPFSettings_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFovasVideo_ClientGetOPFSettings_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFovasVideo_ClientGetOPFSettings_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFovasVideo_ClientGetOPFSettings_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFovasVideo_ClientGetOPFSettings_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFovasVideo_ClientGetOPFSettings_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFovasVideo_ClientGetOPFSettings_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFovasVideo_ClientGetOPFSettings_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFovasVideo_ClientGetOPFSettings_Response";
  }
  protected:
  explicit CFovasVideo_ClientGetOPFSettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpfSettingsFieldNumber = 2,
    kAppIdFieldNumber = 1,
  };
  // optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
  bool has_opf_settings() const;
  private:
  bool _internal_has_opf_settings() const;
  public:
  void clear_opf_settings();
  const std::string& opf_settings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opf_settings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opf_settings();
  PROTOBUF_NODISCARD std::string* release_opf_settings();
  void set_allocated_opf_settings(std::string* opf_settings);
  private:
  const std::string& _internal_opf_settings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opf_settings(const std::string& value);
  std::string* _internal_mutable_opf_settings();
  public:

  // optional uint32 app_id = 1 [(.description) = "App ID"];
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFovasVideo_ClientGetOPFSettings_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opf_settings_;
  uint32_t app_id_;
  friend struct ::TableStruct_steammessages_5fvideo_2esteamclient_2eproto;
};
// ===================================================================

class Video_Stub;

class Video : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Video() {};
 public:
  virtual ~Video();

  typedef Video_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ClientGetVideoURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_ClientGetVideoURL_Request* request,
                       ::CVideo_ClientGetVideoURL_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetVideoBookmark(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_SetVideoBookmark_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetVideoBookmarks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_GetVideoBookmarks_Request* request,
                       ::CVideo_GetVideoBookmarks_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateGameClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_CreateGameClip_Request* request,
                       ::CVideo_CreateGameClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void BeginGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_BeginGameClipSegmentsUpload_Request* request,
                       ::CVideo_BeginGameClipSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_CommitGameClipSegmentsUpload_Request* request,
                       ::CVideo_CommitGameClipSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Video);
};

class Video_Stub : public Video {
 public:
  Video_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Video_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Video_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Video ------------------------------------------

  void ClientGetVideoURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_ClientGetVideoURL_Request* request,
                       ::CVideo_ClientGetVideoURL_Response* response,
                       ::google::protobuf::Closure* done);
  void SetVideoBookmark(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_SetVideoBookmark_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetVideoBookmarks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_GetVideoBookmarks_Request* request,
                       ::CVideo_GetVideoBookmarks_Response* response,
                       ::google::protobuf::Closure* done);
  void CreateGameClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_CreateGameClip_Request* request,
                       ::CVideo_CreateGameClip_Response* response,
                       ::google::protobuf::Closure* done);
  void BeginGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_BeginGameClipSegmentsUpload_Request* request,
                       ::CVideo_BeginGameClipSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void CommitGameClipSegmentsUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_CommitGameClipSegmentsUpload_Request* request,
                       ::CVideo_CommitGameClipSegmentsUpload_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Video_Stub);
};


// -------------------------------------------------------------------

class VideoClient_Stub;

class VideoClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline VideoClient() {};
 public:
  virtual ~VideoClient();

  typedef VideoClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyUnlockedH264(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_UnlockedH264_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(VideoClient);
};

class VideoClient_Stub : public VideoClient {
 public:
  VideoClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  VideoClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~VideoClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements VideoClient ------------------------------------------

  void NotifyUnlockedH264(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CVideo_UnlockedH264_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(VideoClient_Stub);
};


// -------------------------------------------------------------------

class FovasVideo_Stub;

class FovasVideo : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FovasVideo() {};
 public:
  virtual ~FovasVideo();

  typedef FovasVideo_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ClientGetOPFSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFovasVideo_ClientGetOPFSettings_Request* request,
                       ::CFovasVideo_ClientGetOPFSettings_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FovasVideo);
};

class FovasVideo_Stub : public FovasVideo {
 public:
  FovasVideo_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FovasVideo_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FovasVideo_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FovasVideo ------------------------------------------

  void ClientGetOPFSettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFovasVideo_ClientGetOPFSettings_Request* request,
                       ::CFovasVideo_ClientGetOPFSettings_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FovasVideo_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CVideo_ClientGetVideoURL_Request

// optional uint64 video_id = 1 [(.description) = "Video ID"];
inline bool CVideo_ClientGetVideoURL_Request::_internal_has_video_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_ClientGetVideoURL_Request::has_video_id() const {
  return _internal_has_video_id();
}
inline void CVideo_ClientGetVideoURL_Request::clear_video_id() {
  video_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CVideo_ClientGetVideoURL_Request::_internal_video_id() const {
  return video_id_;
}
inline uint64_t CVideo_ClientGetVideoURL_Request::video_id() const {
  // @@protoc_insertion_point(field_get:CVideo_ClientGetVideoURL_Request.video_id)
  return _internal_video_id();
}
inline void CVideo_ClientGetVideoURL_Request::_internal_set_video_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  video_id_ = value;
}
inline void CVideo_ClientGetVideoURL_Request::set_video_id(uint64_t value) {
  _internal_set_video_id(value);
  // @@protoc_insertion_point(field_set:CVideo_ClientGetVideoURL_Request.video_id)
}

// optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
inline bool CVideo_ClientGetVideoURL_Request::_internal_has_client_cellid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_ClientGetVideoURL_Request::has_client_cellid() const {
  return _internal_has_client_cellid();
}
inline void CVideo_ClientGetVideoURL_Request::clear_client_cellid() {
  client_cellid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CVideo_ClientGetVideoURL_Request::_internal_client_cellid() const {
  return client_cellid_;
}
inline uint32_t CVideo_ClientGetVideoURL_Request::client_cellid() const {
  // @@protoc_insertion_point(field_get:CVideo_ClientGetVideoURL_Request.client_cellid)
  return _internal_client_cellid();
}
inline void CVideo_ClientGetVideoURL_Request::_internal_set_client_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_cellid_ = value;
}
inline void CVideo_ClientGetVideoURL_Request::set_client_cellid(uint32_t value) {
  _internal_set_client_cellid(value);
  // @@protoc_insertion_point(field_set:CVideo_ClientGetVideoURL_Request.client_cellid)
}

// -------------------------------------------------------------------

// CVideo_ClientGetVideoURL_Response

// optional uint64 video_id = 1 [(.description) = "Video ID"];
inline bool CVideo_ClientGetVideoURL_Response::_internal_has_video_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_ClientGetVideoURL_Response::has_video_id() const {
  return _internal_has_video_id();
}
inline void CVideo_ClientGetVideoURL_Response::clear_video_id() {
  video_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CVideo_ClientGetVideoURL_Response::_internal_video_id() const {
  return video_id_;
}
inline uint64_t CVideo_ClientGetVideoURL_Response::video_id() const {
  // @@protoc_insertion_point(field_get:CVideo_ClientGetVideoURL_Response.video_id)
  return _internal_video_id();
}
inline void CVideo_ClientGetVideoURL_Response::_internal_set_video_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  video_id_ = value;
}
inline void CVideo_ClientGetVideoURL_Response::set_video_id(uint64_t value) {
  _internal_set_video_id(value);
  // @@protoc_insertion_point(field_set:CVideo_ClientGetVideoURL_Response.video_id)
}

// optional string video_url = 2 [(.description) = "URL for video manifest"];
inline bool CVideo_ClientGetVideoURL_Response::_internal_has_video_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_ClientGetVideoURL_Response::has_video_url() const {
  return _internal_has_video_url();
}
inline void CVideo_ClientGetVideoURL_Response::clear_video_url() {
  video_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_ClientGetVideoURL_Response::video_url() const {
  // @@protoc_insertion_point(field_get:CVideo_ClientGetVideoURL_Response.video_url)
  return _internal_video_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_ClientGetVideoURL_Response::set_video_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 video_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_ClientGetVideoURL_Response.video_url)
}
inline std::string* CVideo_ClientGetVideoURL_Response::mutable_video_url() {
  std::string* _s = _internal_mutable_video_url();
  // @@protoc_insertion_point(field_mutable:CVideo_ClientGetVideoURL_Response.video_url)
  return _s;
}
inline const std::string& CVideo_ClientGetVideoURL_Response::_internal_video_url() const {
  return video_url_.Get();
}
inline void CVideo_ClientGetVideoURL_Response::_internal_set_video_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  video_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_ClientGetVideoURL_Response::_internal_mutable_video_url() {
  _has_bits_[0] |= 0x00000001u;
  return video_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_ClientGetVideoURL_Response::release_video_url() {
  // @@protoc_insertion_point(field_release:CVideo_ClientGetVideoURL_Response.video_url)
  if (!_internal_has_video_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = video_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_ClientGetVideoURL_Response::set_allocated_video_url(std::string* video_url) {
  if (video_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  video_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_ClientGetVideoURL_Response.video_url)
}

// -------------------------------------------------------------------

// VideoBookmark

// optional uint32 app_id = 1 [(.description) = "App ID"];
inline bool VideoBookmark::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VideoBookmark::has_app_id() const {
  return _internal_has_app_id();
}
inline void VideoBookmark::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t VideoBookmark::_internal_app_id() const {
  return app_id_;
}
inline uint32_t VideoBookmark::app_id() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.app_id)
  return _internal_app_id();
}
inline void VideoBookmark::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void VideoBookmark::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.app_id)
}

// optional uint32 playback_position_in_seconds = 2 [(.description) = "How many seconds into the video the bookmark is for"];
inline bool VideoBookmark::_internal_has_playback_position_in_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VideoBookmark::has_playback_position_in_seconds() const {
  return _internal_has_playback_position_in_seconds();
}
inline void VideoBookmark::clear_playback_position_in_seconds() {
  playback_position_in_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t VideoBookmark::_internal_playback_position_in_seconds() const {
  return playback_position_in_seconds_;
}
inline uint32_t VideoBookmark::playback_position_in_seconds() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.playback_position_in_seconds)
  return _internal_playback_position_in_seconds();
}
inline void VideoBookmark::_internal_set_playback_position_in_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  playback_position_in_seconds_ = value;
}
inline void VideoBookmark::set_playback_position_in_seconds(uint32_t value) {
  _internal_set_playback_position_in_seconds(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.playback_position_in_seconds)
}

// optional uint64 video_track_id = 3 [(.description) = "video track choice."];
inline bool VideoBookmark::_internal_has_video_track_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VideoBookmark::has_video_track_id() const {
  return _internal_has_video_track_id();
}
inline void VideoBookmark::clear_video_track_id() {
  video_track_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t VideoBookmark::_internal_video_track_id() const {
  return video_track_id_;
}
inline uint64_t VideoBookmark::video_track_id() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.video_track_id)
  return _internal_video_track_id();
}
inline void VideoBookmark::_internal_set_video_track_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  video_track_id_ = value;
}
inline void VideoBookmark::set_video_track_id(uint64_t value) {
  _internal_set_video_track_id(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.video_track_id)
}

// optional uint64 audio_track_id = 4 [(.description) = "audio track choice."];
inline bool VideoBookmark::_internal_has_audio_track_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VideoBookmark::has_audio_track_id() const {
  return _internal_has_audio_track_id();
}
inline void VideoBookmark::clear_audio_track_id() {
  audio_track_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t VideoBookmark::_internal_audio_track_id() const {
  return audio_track_id_;
}
inline uint64_t VideoBookmark::audio_track_id() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.audio_track_id)
  return _internal_audio_track_id();
}
inline void VideoBookmark::_internal_set_audio_track_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  audio_track_id_ = value;
}
inline void VideoBookmark::set_audio_track_id(uint64_t value) {
  _internal_set_audio_track_id(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.audio_track_id)
}

// optional uint64 timedtext_track_id = 5 [(.description) = "timedtimed or subtitle track choice"];
inline bool VideoBookmark::_internal_has_timedtext_track_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VideoBookmark::has_timedtext_track_id() const {
  return _internal_has_timedtext_track_id();
}
inline void VideoBookmark::clear_timedtext_track_id() {
  timedtext_track_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t VideoBookmark::_internal_timedtext_track_id() const {
  return timedtext_track_id_;
}
inline uint64_t VideoBookmark::timedtext_track_id() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.timedtext_track_id)
  return _internal_timedtext_track_id();
}
inline void VideoBookmark::_internal_set_timedtext_track_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  timedtext_track_id_ = value;
}
inline void VideoBookmark::set_timedtext_track_id(uint64_t value) {
  _internal_set_timedtext_track_id(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.timedtext_track_id)
}

// optional uint32 last_modified = 6 [(.description) = "when we recorded it was last modified. Not settable."];
inline bool VideoBookmark::_internal_has_last_modified() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VideoBookmark::has_last_modified() const {
  return _internal_has_last_modified();
}
inline void VideoBookmark::clear_last_modified() {
  last_modified_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t VideoBookmark::_internal_last_modified() const {
  return last_modified_;
}
inline uint32_t VideoBookmark::last_modified() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.last_modified)
  return _internal_last_modified();
}
inline void VideoBookmark::_internal_set_last_modified(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  last_modified_ = value;
}
inline void VideoBookmark::set_last_modified(uint32_t value) {
  _internal_set_last_modified(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.last_modified)
}

// optional bool hide_from_watch_history = 7 [default = false, (.description) = "Whether I want to show this in my history"];
inline bool VideoBookmark::_internal_has_hide_from_watch_history() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VideoBookmark::has_hide_from_watch_history() const {
  return _internal_has_hide_from_watch_history();
}
inline void VideoBookmark::clear_hide_from_watch_history() {
  hide_from_watch_history_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool VideoBookmark::_internal_hide_from_watch_history() const {
  return hide_from_watch_history_;
}
inline bool VideoBookmark::hide_from_watch_history() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.hide_from_watch_history)
  return _internal_hide_from_watch_history();
}
inline void VideoBookmark::_internal_set_hide_from_watch_history(bool value) {
  _has_bits_[0] |= 0x00000040u;
  hide_from_watch_history_ = value;
}
inline void VideoBookmark::set_hide_from_watch_history(bool value) {
  _internal_set_hide_from_watch_history(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.hide_from_watch_history)
}

// optional bool hide_from_library = 8 [default = false, (.description) = "Whether I want to show this in my library"];
inline bool VideoBookmark::_internal_has_hide_from_library() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VideoBookmark::has_hide_from_library() const {
  return _internal_has_hide_from_library();
}
inline void VideoBookmark::clear_hide_from_library() {
  hide_from_library_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool VideoBookmark::_internal_hide_from_library() const {
  return hide_from_library_;
}
inline bool VideoBookmark::hide_from_library() const {
  // @@protoc_insertion_point(field_get:VideoBookmark.hide_from_library)
  return _internal_hide_from_library();
}
inline void VideoBookmark::_internal_set_hide_from_library(bool value) {
  _has_bits_[0] |= 0x00000080u;
  hide_from_library_ = value;
}
inline void VideoBookmark::set_hide_from_library(bool value) {
  _internal_set_hide_from_library(value);
  // @@protoc_insertion_point(field_set:VideoBookmark.hide_from_library)
}

// -------------------------------------------------------------------

// CVideo_SetVideoBookmark_Notification

// repeated .VideoBookmark bookmarks = 1 [(.description) = "list of bookmarks we want to store."];
inline int CVideo_SetVideoBookmark_Notification::_internal_bookmarks_size() const {
  return bookmarks_.size();
}
inline int CVideo_SetVideoBookmark_Notification::bookmarks_size() const {
  return _internal_bookmarks_size();
}
inline void CVideo_SetVideoBookmark_Notification::clear_bookmarks() {
  bookmarks_.Clear();
}
inline ::VideoBookmark* CVideo_SetVideoBookmark_Notification::mutable_bookmarks(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_SetVideoBookmark_Notification.bookmarks)
  return bookmarks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >*
CVideo_SetVideoBookmark_Notification::mutable_bookmarks() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_SetVideoBookmark_Notification.bookmarks)
  return &bookmarks_;
}
inline const ::VideoBookmark& CVideo_SetVideoBookmark_Notification::_internal_bookmarks(int index) const {
  return bookmarks_.Get(index);
}
inline const ::VideoBookmark& CVideo_SetVideoBookmark_Notification::bookmarks(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_SetVideoBookmark_Notification.bookmarks)
  return _internal_bookmarks(index);
}
inline ::VideoBookmark* CVideo_SetVideoBookmark_Notification::_internal_add_bookmarks() {
  return bookmarks_.Add();
}
inline ::VideoBookmark* CVideo_SetVideoBookmark_Notification::add_bookmarks() {
  ::VideoBookmark* _add = _internal_add_bookmarks();
  // @@protoc_insertion_point(field_add:CVideo_SetVideoBookmark_Notification.bookmarks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >&
CVideo_SetVideoBookmark_Notification::bookmarks() const {
  // @@protoc_insertion_point(field_list:CVideo_SetVideoBookmark_Notification.bookmarks)
  return bookmarks_;
}

// -------------------------------------------------------------------

// CVideo_GetVideoBookmarks_Request

// repeated uint32 appids = 1 [(.description) = "List of App IDs to grab bookmarks for. Can be empty if using updated_since."];
inline int CVideo_GetVideoBookmarks_Request::_internal_appids_size() const {
  return appids_.size();
}
inline int CVideo_GetVideoBookmarks_Request::appids_size() const {
  return _internal_appids_size();
}
inline void CVideo_GetVideoBookmarks_Request::clear_appids() {
  appids_.Clear();
}
inline uint32_t CVideo_GetVideoBookmarks_Request::_internal_appids(int index) const {
  return appids_.Get(index);
}
inline uint32_t CVideo_GetVideoBookmarks_Request::appids(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_GetVideoBookmarks_Request.appids)
  return _internal_appids(index);
}
inline void CVideo_GetVideoBookmarks_Request::set_appids(int index, uint32_t value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CVideo_GetVideoBookmarks_Request.appids)
}
inline void CVideo_GetVideoBookmarks_Request::_internal_add_appids(uint32_t value) {
  appids_.Add(value);
}
inline void CVideo_GetVideoBookmarks_Request::add_appids(uint32_t value) {
  _internal_add_appids(value);
  // @@protoc_insertion_point(field_add:CVideo_GetVideoBookmarks_Request.appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CVideo_GetVideoBookmarks_Request::_internal_appids() const {
  return appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CVideo_GetVideoBookmarks_Request::appids() const {
  // @@protoc_insertion_point(field_list:CVideo_GetVideoBookmarks_Request.appids)
  return _internal_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CVideo_GetVideoBookmarks_Request::_internal_mutable_appids() {
  return &appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CVideo_GetVideoBookmarks_Request::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_GetVideoBookmarks_Request.appids)
  return _internal_mutable_appids();
}

// optional uint32 updated_since = 2 [(.description) = "Only return results after time. Min value is 1. (seconds since epoch January 1st, 1970 Unix Time)"];
inline bool CVideo_GetVideoBookmarks_Request::_internal_has_updated_since() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GetVideoBookmarks_Request::has_updated_since() const {
  return _internal_has_updated_since();
}
inline void CVideo_GetVideoBookmarks_Request::clear_updated_since() {
  updated_since_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CVideo_GetVideoBookmarks_Request::_internal_updated_since() const {
  return updated_since_;
}
inline uint32_t CVideo_GetVideoBookmarks_Request::updated_since() const {
  // @@protoc_insertion_point(field_get:CVideo_GetVideoBookmarks_Request.updated_since)
  return _internal_updated_since();
}
inline void CVideo_GetVideoBookmarks_Request::_internal_set_updated_since(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  updated_since_ = value;
}
inline void CVideo_GetVideoBookmarks_Request::set_updated_since(uint32_t value) {
  _internal_set_updated_since(value);
  // @@protoc_insertion_point(field_set:CVideo_GetVideoBookmarks_Request.updated_since)
}

// -------------------------------------------------------------------

// CVideo_GetVideoBookmarks_Response

// repeated .VideoBookmark bookmarks = 1 [(.description) = "List of bookmarks we found. Can be empty."];
inline int CVideo_GetVideoBookmarks_Response::_internal_bookmarks_size() const {
  return bookmarks_.size();
}
inline int CVideo_GetVideoBookmarks_Response::bookmarks_size() const {
  return _internal_bookmarks_size();
}
inline void CVideo_GetVideoBookmarks_Response::clear_bookmarks() {
  bookmarks_.Clear();
}
inline ::VideoBookmark* CVideo_GetVideoBookmarks_Response::mutable_bookmarks(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_GetVideoBookmarks_Response.bookmarks)
  return bookmarks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >*
CVideo_GetVideoBookmarks_Response::mutable_bookmarks() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_GetVideoBookmarks_Response.bookmarks)
  return &bookmarks_;
}
inline const ::VideoBookmark& CVideo_GetVideoBookmarks_Response::_internal_bookmarks(int index) const {
  return bookmarks_.Get(index);
}
inline const ::VideoBookmark& CVideo_GetVideoBookmarks_Response::bookmarks(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_GetVideoBookmarks_Response.bookmarks)
  return _internal_bookmarks(index);
}
inline ::VideoBookmark* CVideo_GetVideoBookmarks_Response::_internal_add_bookmarks() {
  return bookmarks_.Add();
}
inline ::VideoBookmark* CVideo_GetVideoBookmarks_Response::add_bookmarks() {
  ::VideoBookmark* _add = _internal_add_bookmarks();
  // @@protoc_insertion_point(field_add:CVideo_GetVideoBookmarks_Response.bookmarks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VideoBookmark >&
CVideo_GetVideoBookmarks_Response::bookmarks() const {
  // @@protoc_insertion_point(field_list:CVideo_GetVideoBookmarks_Response.bookmarks)
  return bookmarks_;
}

// -------------------------------------------------------------------

// CVideo_GameClipRepresentation

// optional string representation_name = 2 [(.description) = "EG 480p30"];
inline bool CVideo_GameClipRepresentation::_internal_has_representation_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_representation_name() const {
  return _internal_has_representation_name();
}
inline void CVideo_GameClipRepresentation::clear_representation_name() {
  representation_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_GameClipRepresentation::representation_name() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.representation_name)
  return _internal_representation_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipRepresentation::set_representation_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.representation_name)
}
inline std::string* CVideo_GameClipRepresentation::mutable_representation_name() {
  std::string* _s = _internal_mutable_representation_name();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipRepresentation.representation_name)
  return _s;
}
inline const std::string& CVideo_GameClipRepresentation::_internal_representation_name() const {
  return representation_name_.Get();
}
inline void CVideo_GameClipRepresentation::_internal_set_representation_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipRepresentation::_internal_mutable_representation_name() {
  _has_bits_[0] |= 0x00000001u;
  return representation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipRepresentation::release_representation_name() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipRepresentation.representation_name)
  if (!_internal_has_representation_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = representation_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (representation_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipRepresentation::set_allocated_representation_name(std::string* representation_name) {
  if (representation_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  representation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representation_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (representation_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipRepresentation.representation_name)
}

// optional uint32 horizontal_resolution = 3 [(.description) = "Width in pixels if contains video"];
inline bool CVideo_GameClipRepresentation::_internal_has_horizontal_resolution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_horizontal_resolution() const {
  return _internal_has_horizontal_resolution();
}
inline void CVideo_GameClipRepresentation::clear_horizontal_resolution() {
  horizontal_resolution_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CVideo_GameClipRepresentation::_internal_horizontal_resolution() const {
  return horizontal_resolution_;
}
inline uint32_t CVideo_GameClipRepresentation::horizontal_resolution() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.horizontal_resolution)
  return _internal_horizontal_resolution();
}
inline void CVideo_GameClipRepresentation::_internal_set_horizontal_resolution(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  horizontal_resolution_ = value;
}
inline void CVideo_GameClipRepresentation::set_horizontal_resolution(uint32_t value) {
  _internal_set_horizontal_resolution(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.horizontal_resolution)
}

// optional uint32 vertical_resolution = 4 [(.description) = "Height in pixels if contains video"];
inline bool CVideo_GameClipRepresentation::_internal_has_vertical_resolution() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_vertical_resolution() const {
  return _internal_has_vertical_resolution();
}
inline void CVideo_GameClipRepresentation::clear_vertical_resolution() {
  vertical_resolution_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CVideo_GameClipRepresentation::_internal_vertical_resolution() const {
  return vertical_resolution_;
}
inline uint32_t CVideo_GameClipRepresentation::vertical_resolution() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.vertical_resolution)
  return _internal_vertical_resolution();
}
inline void CVideo_GameClipRepresentation::_internal_set_vertical_resolution(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  vertical_resolution_ = value;
}
inline void CVideo_GameClipRepresentation::set_vertical_resolution(uint32_t value) {
  _internal_set_vertical_resolution(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.vertical_resolution)
}

// optional double frame_rate = 5 [(.description) = "Frame Rate if contains video"];
inline bool CVideo_GameClipRepresentation::_internal_has_frame_rate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void CVideo_GameClipRepresentation::clear_frame_rate() {
  frame_rate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CVideo_GameClipRepresentation::_internal_frame_rate() const {
  return frame_rate_;
}
inline double CVideo_GameClipRepresentation::frame_rate() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.frame_rate)
  return _internal_frame_rate();
}
inline void CVideo_GameClipRepresentation::_internal_set_frame_rate(double value) {
  _has_bits_[0] |= 0x00000020u;
  frame_rate_ = value;
}
inline void CVideo_GameClipRepresentation::set_frame_rate(double value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.frame_rate)
}

// optional uint32 bandwidth = 6 [(.description) = "Kbps"];
inline bool CVideo_GameClipRepresentation::_internal_has_bandwidth() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_bandwidth() const {
  return _internal_has_bandwidth();
}
inline void CVideo_GameClipRepresentation::clear_bandwidth() {
  bandwidth_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CVideo_GameClipRepresentation::_internal_bandwidth() const {
  return bandwidth_;
}
inline uint32_t CVideo_GameClipRepresentation::bandwidth() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.bandwidth)
  return _internal_bandwidth();
}
inline void CVideo_GameClipRepresentation::_internal_set_bandwidth(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  bandwidth_ = value;
}
inline void CVideo_GameClipRepresentation::set_bandwidth(uint32_t value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.bandwidth)
}

// optional uint32 audio_sample_rate = 7 [(.description) = "Sample rate in Hz if contains audio"];
inline bool CVideo_GameClipRepresentation::_internal_has_audio_sample_rate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_audio_sample_rate() const {
  return _internal_has_audio_sample_rate();
}
inline void CVideo_GameClipRepresentation::clear_audio_sample_rate() {
  audio_sample_rate_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CVideo_GameClipRepresentation::_internal_audio_sample_rate() const {
  return audio_sample_rate_;
}
inline uint32_t CVideo_GameClipRepresentation::audio_sample_rate() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.audio_sample_rate)
  return _internal_audio_sample_rate();
}
inline void CVideo_GameClipRepresentation::_internal_set_audio_sample_rate(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  audio_sample_rate_ = value;
}
inline void CVideo_GameClipRepresentation::set_audio_sample_rate(uint32_t value) {
  _internal_set_audio_sample_rate(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.audio_sample_rate)
}

// optional string frame_rate_string = 8 [(.description) = "Frame Rate string if contains video"];
inline bool CVideo_GameClipRepresentation::_internal_has_frame_rate_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_frame_rate_string() const {
  return _internal_has_frame_rate_string();
}
inline void CVideo_GameClipRepresentation::clear_frame_rate_string() {
  frame_rate_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_GameClipRepresentation::frame_rate_string() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.frame_rate_string)
  return _internal_frame_rate_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipRepresentation::set_frame_rate_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 frame_rate_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.frame_rate_string)
}
inline std::string* CVideo_GameClipRepresentation::mutable_frame_rate_string() {
  std::string* _s = _internal_mutable_frame_rate_string();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipRepresentation.frame_rate_string)
  return _s;
}
inline const std::string& CVideo_GameClipRepresentation::_internal_frame_rate_string() const {
  return frame_rate_string_.Get();
}
inline void CVideo_GameClipRepresentation::_internal_set_frame_rate_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  frame_rate_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipRepresentation::_internal_mutable_frame_rate_string() {
  _has_bits_[0] |= 0x00000002u;
  return frame_rate_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipRepresentation::release_frame_rate_string() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipRepresentation.frame_rate_string)
  if (!_internal_has_frame_rate_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = frame_rate_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_rate_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    frame_rate_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipRepresentation::set_allocated_frame_rate_string(std::string* frame_rate_string) {
  if (frame_rate_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_rate_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_rate_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_rate_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    frame_rate_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipRepresentation.frame_rate_string)
}

// optional string codec = 9 [(.description) = "codec(s) used"];
inline bool CVideo_GameClipRepresentation::_internal_has_codec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_codec() const {
  return _internal_has_codec();
}
inline void CVideo_GameClipRepresentation::clear_codec() {
  codec_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CVideo_GameClipRepresentation::codec() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipRepresentation::set_codec(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.codec)
}
inline std::string* CVideo_GameClipRepresentation::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipRepresentation.codec)
  return _s;
}
inline const std::string& CVideo_GameClipRepresentation::_internal_codec() const {
  return codec_.Get();
}
inline void CVideo_GameClipRepresentation::_internal_set_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipRepresentation::_internal_mutable_codec() {
  _has_bits_[0] |= 0x00000004u;
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipRepresentation::release_codec() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipRepresentation.codec)
  if (!_internal_has_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = codec_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipRepresentation::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    codec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipRepresentation.codec)
}

// optional uint32 audio_channel_config = 10 [(.description) = "audio channel config if relevant"];
inline bool CVideo_GameClipRepresentation::_internal_has_audio_channel_config() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CVideo_GameClipRepresentation::has_audio_channel_config() const {
  return _internal_has_audio_channel_config();
}
inline void CVideo_GameClipRepresentation::clear_audio_channel_config() {
  audio_channel_config_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CVideo_GameClipRepresentation::_internal_audio_channel_config() const {
  return audio_channel_config_;
}
inline uint32_t CVideo_GameClipRepresentation::audio_channel_config() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipRepresentation.audio_channel_config)
  return _internal_audio_channel_config();
}
inline void CVideo_GameClipRepresentation::_internal_set_audio_channel_config(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  audio_channel_config_ = value;
}
inline void CVideo_GameClipRepresentation::set_audio_channel_config(uint32_t value) {
  _internal_set_audio_channel_config(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipRepresentation.audio_channel_config)
}

// -------------------------------------------------------------------

// CVideo_GameClipComponent

// optional string component_name = 1 [(.description) = "video/audio/etc"];
inline bool CVideo_GameClipComponent::_internal_has_component_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameClipComponent::has_component_name() const {
  return _internal_has_component_name();
}
inline void CVideo_GameClipComponent::clear_component_name() {
  component_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_GameClipComponent::component_name() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipComponent.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipComponent::set_component_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipComponent.component_name)
}
inline std::string* CVideo_GameClipComponent::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipComponent.component_name)
  return _s;
}
inline const std::string& CVideo_GameClipComponent::_internal_component_name() const {
  return component_name_.Get();
}
inline void CVideo_GameClipComponent::_internal_set_component_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipComponent::_internal_mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipComponent::release_component_name() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipComponent.component_name)
  if (!_internal_has_component_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = component_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipComponent::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipComponent.component_name)
}

// optional uint32 contents = 2 [(.description) = "EVideoTrackContents"];
inline bool CVideo_GameClipComponent::_internal_has_contents() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_GameClipComponent::has_contents() const {
  return _internal_has_contents();
}
inline void CVideo_GameClipComponent::clear_contents() {
  contents_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CVideo_GameClipComponent::_internal_contents() const {
  return contents_;
}
inline uint32_t CVideo_GameClipComponent::contents() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipComponent.contents)
  return _internal_contents();
}
inline void CVideo_GameClipComponent::_internal_set_contents(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  contents_ = value;
}
inline void CVideo_GameClipComponent::set_contents(uint32_t value) {
  _internal_set_contents(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipComponent.contents)
}

// optional uint32 segment_size = 3 [(.description) = "size of most segments (last may be shorter)"];
inline bool CVideo_GameClipComponent::_internal_has_segment_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_GameClipComponent::has_segment_size() const {
  return _internal_has_segment_size();
}
inline void CVideo_GameClipComponent::clear_segment_size() {
  segment_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CVideo_GameClipComponent::_internal_segment_size() const {
  return segment_size_;
}
inline uint32_t CVideo_GameClipComponent::segment_size() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipComponent.segment_size)
  return _internal_segment_size();
}
inline void CVideo_GameClipComponent::_internal_set_segment_size(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  segment_size_ = value;
}
inline void CVideo_GameClipComponent::set_segment_size(uint32_t value) {
  _internal_set_segment_size(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipComponent.segment_size)
}

// optional string file_type = 4 [(.description) = "file type"];
inline bool CVideo_GameClipComponent::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameClipComponent::has_file_type() const {
  return _internal_has_file_type();
}
inline void CVideo_GameClipComponent::clear_file_type() {
  file_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_GameClipComponent::file_type() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipComponent.file_type)
  return _internal_file_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipComponent::set_file_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipComponent.file_type)
}
inline std::string* CVideo_GameClipComponent::mutable_file_type() {
  std::string* _s = _internal_mutable_file_type();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipComponent.file_type)
  return _s;
}
inline const std::string& CVideo_GameClipComponent::_internal_file_type() const {
  return file_type_.Get();
}
inline void CVideo_GameClipComponent::_internal_set_file_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipComponent::_internal_mutable_file_type() {
  _has_bits_[0] |= 0x00000002u;
  return file_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipComponent::release_file_type() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipComponent.file_type)
  if (!_internal_has_file_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = file_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipComponent::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipComponent.file_type)
}

// repeated .CVideo_GameClipRepresentation representations = 5 [(.description) = "list of representations"];
inline int CVideo_GameClipComponent::_internal_representations_size() const {
  return representations_.size();
}
inline int CVideo_GameClipComponent::representations_size() const {
  return _internal_representations_size();
}
inline void CVideo_GameClipComponent::clear_representations() {
  representations_.Clear();
}
inline ::CVideo_GameClipRepresentation* CVideo_GameClipComponent::mutable_representations(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipComponent.representations)
  return representations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipRepresentation >*
CVideo_GameClipComponent::mutable_representations() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_GameClipComponent.representations)
  return &representations_;
}
inline const ::CVideo_GameClipRepresentation& CVideo_GameClipComponent::_internal_representations(int index) const {
  return representations_.Get(index);
}
inline const ::CVideo_GameClipRepresentation& CVideo_GameClipComponent::representations(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipComponent.representations)
  return _internal_representations(index);
}
inline ::CVideo_GameClipRepresentation* CVideo_GameClipComponent::_internal_add_representations() {
  return representations_.Add();
}
inline ::CVideo_GameClipRepresentation* CVideo_GameClipComponent::add_representations() {
  ::CVideo_GameClipRepresentation* _add = _internal_add_representations();
  // @@protoc_insertion_point(field_add:CVideo_GameClipComponent.representations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipRepresentation >&
CVideo_GameClipComponent::representations() const {
  // @@protoc_insertion_point(field_list:CVideo_GameClipComponent.representations)
  return representations_;
}

// -------------------------------------------------------------------

// CVideo_CreateGameClip_Request

// optional uint32 app_id = 1 [(.description) = "app ID stream is tagged with"];
inline bool CVideo_CreateGameClip_Request::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_CreateGameClip_Request::has_app_id() const {
  return _internal_has_app_id();
}
inline void CVideo_CreateGameClip_Request::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CVideo_CreateGameClip_Request::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CVideo_CreateGameClip_Request::app_id() const {
  // @@protoc_insertion_point(field_get:CVideo_CreateGameClip_Request.app_id)
  return _internal_app_id();
}
inline void CVideo_CreateGameClip_Request::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CVideo_CreateGameClip_Request::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CVideo_CreateGameClip_Request.app_id)
}

// optional uint32 num_segments = 2 [(.description) = "number of segments in this clip"];
inline bool CVideo_CreateGameClip_Request::_internal_has_num_segments() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_CreateGameClip_Request::has_num_segments() const {
  return _internal_has_num_segments();
}
inline void CVideo_CreateGameClip_Request::clear_num_segments() {
  num_segments_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CVideo_CreateGameClip_Request::_internal_num_segments() const {
  return num_segments_;
}
inline uint32_t CVideo_CreateGameClip_Request::num_segments() const {
  // @@protoc_insertion_point(field_get:CVideo_CreateGameClip_Request.num_segments)
  return _internal_num_segments();
}
inline void CVideo_CreateGameClip_Request::_internal_set_num_segments(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_segments_ = value;
}
inline void CVideo_CreateGameClip_Request::set_num_segments(uint32_t value) {
  _internal_set_num_segments(value);
  // @@protoc_insertion_point(field_set:CVideo_CreateGameClip_Request.num_segments)
}

// optional uint32 length_milliseconds = 3 [(.description) = "length of video in ms"];
inline bool CVideo_CreateGameClip_Request::_internal_has_length_milliseconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_CreateGameClip_Request::has_length_milliseconds() const {
  return _internal_has_length_milliseconds();
}
inline void CVideo_CreateGameClip_Request::clear_length_milliseconds() {
  length_milliseconds_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CVideo_CreateGameClip_Request::_internal_length_milliseconds() const {
  return length_milliseconds_;
}
inline uint32_t CVideo_CreateGameClip_Request::length_milliseconds() const {
  // @@protoc_insertion_point(field_get:CVideo_CreateGameClip_Request.length_milliseconds)
  return _internal_length_milliseconds();
}
inline void CVideo_CreateGameClip_Request::_internal_set_length_milliseconds(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  length_milliseconds_ = value;
}
inline void CVideo_CreateGameClip_Request::set_length_milliseconds(uint32_t value) {
  _internal_set_length_milliseconds(value);
  // @@protoc_insertion_point(field_set:CVideo_CreateGameClip_Request.length_milliseconds)
}

// optional uint32 segment_duration_timescale = 4 [(.description) = "timescale (denominator) for segment duration below, eg 1000 for milliseconds"];
inline bool CVideo_CreateGameClip_Request::_internal_has_segment_duration_timescale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_CreateGameClip_Request::has_segment_duration_timescale() const {
  return _internal_has_segment_duration_timescale();
}
inline void CVideo_CreateGameClip_Request::clear_segment_duration_timescale() {
  segment_duration_timescale_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CVideo_CreateGameClip_Request::_internal_segment_duration_timescale() const {
  return segment_duration_timescale_;
}
inline uint32_t CVideo_CreateGameClip_Request::segment_duration_timescale() const {
  // @@protoc_insertion_point(field_get:CVideo_CreateGameClip_Request.segment_duration_timescale)
  return _internal_segment_duration_timescale();
}
inline void CVideo_CreateGameClip_Request::_internal_set_segment_duration_timescale(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  segment_duration_timescale_ = value;
}
inline void CVideo_CreateGameClip_Request::set_segment_duration_timescale(uint32_t value) {
  _internal_set_segment_duration_timescale(value);
  // @@protoc_insertion_point(field_set:CVideo_CreateGameClip_Request.segment_duration_timescale)
}

// optional uint32 segment_duration = 5 [(.description) = "length of most segments in \'timescale\' units (last may be shorter)"];
inline bool CVideo_CreateGameClip_Request::_internal_has_segment_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVideo_CreateGameClip_Request::has_segment_duration() const {
  return _internal_has_segment_duration();
}
inline void CVideo_CreateGameClip_Request::clear_segment_duration() {
  segment_duration_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CVideo_CreateGameClip_Request::_internal_segment_duration() const {
  return segment_duration_;
}
inline uint32_t CVideo_CreateGameClip_Request::segment_duration() const {
  // @@protoc_insertion_point(field_get:CVideo_CreateGameClip_Request.segment_duration)
  return _internal_segment_duration();
}
inline void CVideo_CreateGameClip_Request::_internal_set_segment_duration(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  segment_duration_ = value;
}
inline void CVideo_CreateGameClip_Request::set_segment_duration(uint32_t value) {
  _internal_set_segment_duration(value);
  // @@protoc_insertion_point(field_set:CVideo_CreateGameClip_Request.segment_duration)
}

// repeated .CVideo_GameClipComponent components = 6 [(.description) = "List of components"];
inline int CVideo_CreateGameClip_Request::_internal_components_size() const {
  return components_.size();
}
inline int CVideo_CreateGameClip_Request::components_size() const {
  return _internal_components_size();
}
inline void CVideo_CreateGameClip_Request::clear_components() {
  components_.Clear();
}
inline ::CVideo_GameClipComponent* CVideo_CreateGameClip_Request::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_CreateGameClip_Request.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipComponent >*
CVideo_CreateGameClip_Request::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_CreateGameClip_Request.components)
  return &components_;
}
inline const ::CVideo_GameClipComponent& CVideo_CreateGameClip_Request::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::CVideo_GameClipComponent& CVideo_CreateGameClip_Request::components(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_CreateGameClip_Request.components)
  return _internal_components(index);
}
inline ::CVideo_GameClipComponent* CVideo_CreateGameClip_Request::_internal_add_components() {
  return components_.Add();
}
inline ::CVideo_GameClipComponent* CVideo_CreateGameClip_Request::add_components() {
  ::CVideo_GameClipComponent* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:CVideo_CreateGameClip_Request.components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipComponent >&
CVideo_CreateGameClip_Request::components() const {
  // @@protoc_insertion_point(field_list:CVideo_CreateGameClip_Request.components)
  return components_;
}

// -------------------------------------------------------------------

// CVideo_CreateGameClip_Response

// optional uint64 clip_id = 1 [(.description) = "Clip ID if successful"];
inline bool CVideo_CreateGameClip_Response::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_CreateGameClip_Response::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CVideo_CreateGameClip_Response::clear_clip_id() {
  clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CVideo_CreateGameClip_Response::_internal_clip_id() const {
  return clip_id_;
}
inline uint64_t CVideo_CreateGameClip_Response::clip_id() const {
  // @@protoc_insertion_point(field_get:CVideo_CreateGameClip_Response.clip_id)
  return _internal_clip_id();
}
inline void CVideo_CreateGameClip_Response::_internal_set_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  clip_id_ = value;
}
inline void CVideo_CreateGameClip_Response::set_clip_id(uint64_t value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CVideo_CreateGameClip_Response.clip_id)
}

// -------------------------------------------------------------------

// CVideo_GameClipSegmentInfo

// optional uint32 segment_number = 4 [(.description) = "segment number"];
inline bool CVideo_GameClipSegmentInfo::_internal_has_segment_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameClipSegmentInfo::has_segment_number() const {
  return _internal_has_segment_number();
}
inline void CVideo_GameClipSegmentInfo::clear_segment_number() {
  segment_number_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CVideo_GameClipSegmentInfo::_internal_segment_number() const {
  return segment_number_;
}
inline uint32_t CVideo_GameClipSegmentInfo::segment_number() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentInfo.segment_number)
  return _internal_segment_number();
}
inline void CVideo_GameClipSegmentInfo::_internal_set_segment_number(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  segment_number_ = value;
}
inline void CVideo_GameClipSegmentInfo::set_segment_number(uint32_t value) {
  _internal_set_segment_number(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipSegmentInfo.segment_number)
}

// optional uint64 segment_size_bytes = 5 [(.description) = "segment size in bytes"];
inline bool CVideo_GameClipSegmentInfo::_internal_has_segment_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameClipSegmentInfo::has_segment_size_bytes() const {
  return _internal_has_segment_size_bytes();
}
inline void CVideo_GameClipSegmentInfo::clear_segment_size_bytes() {
  segment_size_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CVideo_GameClipSegmentInfo::_internal_segment_size_bytes() const {
  return segment_size_bytes_;
}
inline uint64_t CVideo_GameClipSegmentInfo::segment_size_bytes() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentInfo.segment_size_bytes)
  return _internal_segment_size_bytes();
}
inline void CVideo_GameClipSegmentInfo::_internal_set_segment_size_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  segment_size_bytes_ = value;
}
inline void CVideo_GameClipSegmentInfo::set_segment_size_bytes(uint64_t value) {
  _internal_set_segment_size_bytes(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipSegmentInfo.segment_size_bytes)
}

// -------------------------------------------------------------------

// CVideo_BeginGameClipSegmentsUpload_Request

// optional uint64 clip_id = 1 [(.description) = "Clip ID"];
inline bool CVideo_BeginGameClipSegmentsUpload_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_BeginGameClipSegmentsUpload_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::clear_clip_id() {
  clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CVideo_BeginGameClipSegmentsUpload_Request::_internal_clip_id() const {
  return clip_id_;
}
inline uint64_t CVideo_BeginGameClipSegmentsUpload_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameClipSegmentsUpload_Request.clip_id)
  return _internal_clip_id();
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::_internal_set_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  clip_id_ = value;
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::set_clip_id(uint64_t value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CVideo_BeginGameClipSegmentsUpload_Request.clip_id)
}

// optional string component_name = 2 [(.description) = "component segments belong to"];
inline bool CVideo_BeginGameClipSegmentsUpload_Request::_internal_has_component_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_BeginGameClipSegmentsUpload_Request::has_component_name() const {
  return _internal_has_component_name();
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::clear_component_name() {
  component_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_BeginGameClipSegmentsUpload_Request::component_name() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameClipSegmentsUpload_Request.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_BeginGameClipSegmentsUpload_Request::set_component_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_BeginGameClipSegmentsUpload_Request.component_name)
}
inline std::string* CVideo_BeginGameClipSegmentsUpload_Request::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameClipSegmentsUpload_Request.component_name)
  return _s;
}
inline const std::string& CVideo_BeginGameClipSegmentsUpload_Request::_internal_component_name() const {
  return component_name_.Get();
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::_internal_set_component_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_BeginGameClipSegmentsUpload_Request::_internal_mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_BeginGameClipSegmentsUpload_Request::release_component_name() {
  // @@protoc_insertion_point(field_release:CVideo_BeginGameClipSegmentsUpload_Request.component_name)
  if (!_internal_has_component_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = component_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_BeginGameClipSegmentsUpload_Request.component_name)
}

// optional string representation_name = 3 [(.description) = "representation name"];
inline bool CVideo_BeginGameClipSegmentsUpload_Request::_internal_has_representation_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_BeginGameClipSegmentsUpload_Request::has_representation_name() const {
  return _internal_has_representation_name();
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::clear_representation_name() {
  representation_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_BeginGameClipSegmentsUpload_Request::representation_name() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameClipSegmentsUpload_Request.representation_name)
  return _internal_representation_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_BeginGameClipSegmentsUpload_Request::set_representation_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_BeginGameClipSegmentsUpload_Request.representation_name)
}
inline std::string* CVideo_BeginGameClipSegmentsUpload_Request::mutable_representation_name() {
  std::string* _s = _internal_mutable_representation_name();
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameClipSegmentsUpload_Request.representation_name)
  return _s;
}
inline const std::string& CVideo_BeginGameClipSegmentsUpload_Request::_internal_representation_name() const {
  return representation_name_.Get();
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::_internal_set_representation_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_BeginGameClipSegmentsUpload_Request::_internal_mutable_representation_name() {
  _has_bits_[0] |= 0x00000002u;
  return representation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_BeginGameClipSegmentsUpload_Request::release_representation_name() {
  // @@protoc_insertion_point(field_release:CVideo_BeginGameClipSegmentsUpload_Request.representation_name)
  if (!_internal_has_representation_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = representation_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (representation_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::set_allocated_representation_name(std::string* representation_name) {
  if (representation_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  representation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representation_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (representation_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_BeginGameClipSegmentsUpload_Request.representation_name)
}

// repeated .CVideo_GameClipSegmentInfo segments_to_store = 4 [(.description) = "Segments the client has to upload"];
inline int CVideo_BeginGameClipSegmentsUpload_Request::_internal_segments_to_store_size() const {
  return segments_to_store_.size();
}
inline int CVideo_BeginGameClipSegmentsUpload_Request::segments_to_store_size() const {
  return _internal_segments_to_store_size();
}
inline void CVideo_BeginGameClipSegmentsUpload_Request::clear_segments_to_store() {
  segments_to_store_.Clear();
}
inline ::CVideo_GameClipSegmentInfo* CVideo_BeginGameClipSegmentsUpload_Request::mutable_segments_to_store(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameClipSegmentsUpload_Request.segments_to_store)
  return segments_to_store_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentInfo >*
CVideo_BeginGameClipSegmentsUpload_Request::mutable_segments_to_store() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_BeginGameClipSegmentsUpload_Request.segments_to_store)
  return &segments_to_store_;
}
inline const ::CVideo_GameClipSegmentInfo& CVideo_BeginGameClipSegmentsUpload_Request::_internal_segments_to_store(int index) const {
  return segments_to_store_.Get(index);
}
inline const ::CVideo_GameClipSegmentInfo& CVideo_BeginGameClipSegmentsUpload_Request::segments_to_store(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameClipSegmentsUpload_Request.segments_to_store)
  return _internal_segments_to_store(index);
}
inline ::CVideo_GameClipSegmentInfo* CVideo_BeginGameClipSegmentsUpload_Request::_internal_add_segments_to_store() {
  return segments_to_store_.Add();
}
inline ::CVideo_GameClipSegmentInfo* CVideo_BeginGameClipSegmentsUpload_Request::add_segments_to_store() {
  ::CVideo_GameClipSegmentInfo* _add = _internal_add_segments_to_store();
  // @@protoc_insertion_point(field_add:CVideo_BeginGameClipSegmentsUpload_Request.segments_to_store)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentInfo >&
CVideo_BeginGameClipSegmentsUpload_Request::segments_to_store() const {
  // @@protoc_insertion_point(field_list:CVideo_BeginGameClipSegmentsUpload_Request.segments_to_store)
  return segments_to_store_;
}

// -------------------------------------------------------------------

// CVideo_GameClipSegmentUploadInfo_HTTPHeaders

// optional string name = 1 [(.description) = "HTTP header name"];
inline bool CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameClipSegmentUploadInfo_HTTPHeaders::has_name() const {
  return _internal_has_name();
}
inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.name)
}
inline std::string* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.name)
  return _s;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_name() const {
  return name_.Get();
}
inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.name)
}

// optional string value = 2 [(.description) = "HTTP header value"];
inline bool CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameClipSegmentUploadInfo_HTTPHeaders::has_value() const {
  return _internal_has_value();
}
inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.value)
}
inline std::string* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.value)
  return _s;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_value() const {
  return value_.Get();
}
inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipSegmentUploadInfo_HTTPHeaders::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipSegmentUploadInfo.HTTPHeaders.value)
}

// -------------------------------------------------------------------

// CVideo_GameClipSegmentUploadInfo

// optional .CVideo_GameClipSegmentInfo segment_info = 1 [(.description) = "segment ID information"];
inline bool CVideo_GameClipSegmentUploadInfo::_internal_has_segment_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || segment_info_ != nullptr);
  return value;
}
inline bool CVideo_GameClipSegmentUploadInfo::has_segment_info() const {
  return _internal_has_segment_info();
}
inline void CVideo_GameClipSegmentUploadInfo::clear_segment_info() {
  if (segment_info_ != nullptr) segment_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CVideo_GameClipSegmentInfo& CVideo_GameClipSegmentUploadInfo::_internal_segment_info() const {
  const ::CVideo_GameClipSegmentInfo* p = segment_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CVideo_GameClipSegmentInfo&>(
      ::_CVideo_GameClipSegmentInfo_default_instance_);
}
inline const ::CVideo_GameClipSegmentInfo& CVideo_GameClipSegmentUploadInfo::segment_info() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentUploadInfo.segment_info)
  return _internal_segment_info();
}
inline void CVideo_GameClipSegmentUploadInfo::unsafe_arena_set_allocated_segment_info(
    ::CVideo_GameClipSegmentInfo* segment_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segment_info_);
  }
  segment_info_ = segment_info;
  if (segment_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CVideo_GameClipSegmentUploadInfo.segment_info)
}
inline ::CVideo_GameClipSegmentInfo* CVideo_GameClipSegmentUploadInfo::release_segment_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::CVideo_GameClipSegmentInfo* temp = segment_info_;
  segment_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CVideo_GameClipSegmentInfo* CVideo_GameClipSegmentUploadInfo::unsafe_arena_release_segment_info() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipSegmentUploadInfo.segment_info)
  _has_bits_[0] &= ~0x00000004u;
  ::CVideo_GameClipSegmentInfo* temp = segment_info_;
  segment_info_ = nullptr;
  return temp;
}
inline ::CVideo_GameClipSegmentInfo* CVideo_GameClipSegmentUploadInfo::_internal_mutable_segment_info() {
  _has_bits_[0] |= 0x00000004u;
  if (segment_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CVideo_GameClipSegmentInfo>(GetArenaForAllocation());
    segment_info_ = p;
  }
  return segment_info_;
}
inline ::CVideo_GameClipSegmentInfo* CVideo_GameClipSegmentUploadInfo::mutable_segment_info() {
  ::CVideo_GameClipSegmentInfo* _msg = _internal_mutable_segment_info();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipSegmentUploadInfo.segment_info)
  return _msg;
}
inline void CVideo_GameClipSegmentUploadInfo::set_allocated_segment_info(::CVideo_GameClipSegmentInfo* segment_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete segment_info_;
  }
  if (segment_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CVideo_GameClipSegmentInfo>::GetOwningArena(segment_info);
    if (message_arena != submessage_arena) {
      segment_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  segment_info_ = segment_info;
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipSegmentUploadInfo.segment_info)
}

// optional string url_host = 2 [(.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
inline bool CVideo_GameClipSegmentUploadInfo::_internal_has_url_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_GameClipSegmentUploadInfo::has_url_host() const {
  return _internal_has_url_host();
}
inline void CVideo_GameClipSegmentUploadInfo::clear_url_host() {
  url_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo::url_host() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentUploadInfo.url_host)
  return _internal_url_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipSegmentUploadInfo::set_url_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipSegmentUploadInfo.url_host)
}
inline std::string* CVideo_GameClipSegmentUploadInfo::mutable_url_host() {
  std::string* _s = _internal_mutable_url_host();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipSegmentUploadInfo.url_host)
  return _s;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo::_internal_url_host() const {
  return url_host_.Get();
}
inline void CVideo_GameClipSegmentUploadInfo::_internal_set_url_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo::_internal_mutable_url_host() {
  _has_bits_[0] |= 0x00000001u;
  return url_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo::release_url_host() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipSegmentUploadInfo.url_host)
  if (!_internal_has_url_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipSegmentUploadInfo::set_allocated_url_host(std::string* url_host) {
  if (url_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipSegmentUploadInfo.url_host)
}

// optional string url_path = 3 [(.description) = "Relative path on server to which file should be uploaded."];
inline bool CVideo_GameClipSegmentUploadInfo::_internal_has_url_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_GameClipSegmentUploadInfo::has_url_path() const {
  return _internal_has_url_path();
}
inline void CVideo_GameClipSegmentUploadInfo::clear_url_path() {
  url_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo::url_path() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentUploadInfo.url_path)
  return _internal_url_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_GameClipSegmentUploadInfo::set_url_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_GameClipSegmentUploadInfo.url_path)
}
inline std::string* CVideo_GameClipSegmentUploadInfo::mutable_url_path() {
  std::string* _s = _internal_mutable_url_path();
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipSegmentUploadInfo.url_path)
  return _s;
}
inline const std::string& CVideo_GameClipSegmentUploadInfo::_internal_url_path() const {
  return url_path_.Get();
}
inline void CVideo_GameClipSegmentUploadInfo::_internal_set_url_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo::_internal_mutable_url_path() {
  _has_bits_[0] |= 0x00000002u;
  return url_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_GameClipSegmentUploadInfo::release_url_path() {
  // @@protoc_insertion_point(field_release:CVideo_GameClipSegmentUploadInfo.url_path)
  if (!_internal_has_url_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_GameClipSegmentUploadInfo::set_allocated_url_path(std::string* url_path) {
  if (url_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    url_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_GameClipSegmentUploadInfo.url_path)
}

// optional bool use_https = 4 [(.description) = "If true, use https, otherwise use http."];
inline bool CVideo_GameClipSegmentUploadInfo::_internal_has_use_https() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_GameClipSegmentUploadInfo::has_use_https() const {
  return _internal_has_use_https();
}
inline void CVideo_GameClipSegmentUploadInfo::clear_use_https() {
  use_https_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CVideo_GameClipSegmentUploadInfo::_internal_use_https() const {
  return use_https_;
}
inline bool CVideo_GameClipSegmentUploadInfo::use_https() const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentUploadInfo.use_https)
  return _internal_use_https();
}
inline void CVideo_GameClipSegmentUploadInfo::_internal_set_use_https(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_https_ = value;
}
inline void CVideo_GameClipSegmentUploadInfo::set_use_https(bool value) {
  _internal_set_use_https(value);
  // @@protoc_insertion_point(field_set:CVideo_GameClipSegmentUploadInfo.use_https)
}

// repeated .CVideo_GameClipSegmentUploadInfo.HTTPHeaders request_headers = 5 [(.description) = "Name-value pairs to be sent in HTTP PUT request."];
inline int CVideo_GameClipSegmentUploadInfo::_internal_request_headers_size() const {
  return request_headers_.size();
}
inline int CVideo_GameClipSegmentUploadInfo::request_headers_size() const {
  return _internal_request_headers_size();
}
inline void CVideo_GameClipSegmentUploadInfo::clear_request_headers() {
  request_headers_.Clear();
}
inline ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* CVideo_GameClipSegmentUploadInfo::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_GameClipSegmentUploadInfo.request_headers)
  return request_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders >*
CVideo_GameClipSegmentUploadInfo::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_GameClipSegmentUploadInfo.request_headers)
  return &request_headers_;
}
inline const ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders& CVideo_GameClipSegmentUploadInfo::_internal_request_headers(int index) const {
  return request_headers_.Get(index);
}
inline const ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders& CVideo_GameClipSegmentUploadInfo::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_GameClipSegmentUploadInfo.request_headers)
  return _internal_request_headers(index);
}
inline ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* CVideo_GameClipSegmentUploadInfo::_internal_add_request_headers() {
  return request_headers_.Add();
}
inline ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* CVideo_GameClipSegmentUploadInfo::add_request_headers() {
  ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders* _add = _internal_add_request_headers();
  // @@protoc_insertion_point(field_add:CVideo_GameClipSegmentUploadInfo.request_headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo_HTTPHeaders >&
CVideo_GameClipSegmentUploadInfo::request_headers() const {
  // @@protoc_insertion_point(field_list:CVideo_GameClipSegmentUploadInfo.request_headers)
  return request_headers_;
}

// -------------------------------------------------------------------

// CVideo_BeginGameClipSegmentsUpload_Response

// repeated .CVideo_GameClipSegmentUploadInfo segments_needed = 1 [(.description) = "Segments that need uploading"];
inline int CVideo_BeginGameClipSegmentsUpload_Response::_internal_segments_needed_size() const {
  return segments_needed_.size();
}
inline int CVideo_BeginGameClipSegmentsUpload_Response::segments_needed_size() const {
  return _internal_segments_needed_size();
}
inline void CVideo_BeginGameClipSegmentsUpload_Response::clear_segments_needed() {
  segments_needed_.Clear();
}
inline ::CVideo_GameClipSegmentUploadInfo* CVideo_BeginGameClipSegmentsUpload_Response::mutable_segments_needed(int index) {
  // @@protoc_insertion_point(field_mutable:CVideo_BeginGameClipSegmentsUpload_Response.segments_needed)
  return segments_needed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo >*
CVideo_BeginGameClipSegmentsUpload_Response::mutable_segments_needed() {
  // @@protoc_insertion_point(field_mutable_list:CVideo_BeginGameClipSegmentsUpload_Response.segments_needed)
  return &segments_needed_;
}
inline const ::CVideo_GameClipSegmentUploadInfo& CVideo_BeginGameClipSegmentsUpload_Response::_internal_segments_needed(int index) const {
  return segments_needed_.Get(index);
}
inline const ::CVideo_GameClipSegmentUploadInfo& CVideo_BeginGameClipSegmentsUpload_Response::segments_needed(int index) const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameClipSegmentsUpload_Response.segments_needed)
  return _internal_segments_needed(index);
}
inline ::CVideo_GameClipSegmentUploadInfo* CVideo_BeginGameClipSegmentsUpload_Response::_internal_add_segments_needed() {
  return segments_needed_.Add();
}
inline ::CVideo_GameClipSegmentUploadInfo* CVideo_BeginGameClipSegmentsUpload_Response::add_segments_needed() {
  ::CVideo_GameClipSegmentUploadInfo* _add = _internal_add_segments_needed();
  // @@protoc_insertion_point(field_add:CVideo_BeginGameClipSegmentsUpload_Response.segments_needed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CVideo_GameClipSegmentUploadInfo >&
CVideo_BeginGameClipSegmentsUpload_Response::segments_needed() const {
  // @@protoc_insertion_point(field_list:CVideo_BeginGameClipSegmentsUpload_Response.segments_needed)
  return segments_needed_;
}

// optional bool call_again = 2 [(.description) = "If true, you should ask again once you\'ve uploaded the segments indicated in this response. There may be more we want. If there was no work to do in this response, then wait a few seconds before asking again"];
inline bool CVideo_BeginGameClipSegmentsUpload_Response::_internal_has_call_again() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_BeginGameClipSegmentsUpload_Response::has_call_again() const {
  return _internal_has_call_again();
}
inline void CVideo_BeginGameClipSegmentsUpload_Response::clear_call_again() {
  call_again_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CVideo_BeginGameClipSegmentsUpload_Response::_internal_call_again() const {
  return call_again_;
}
inline bool CVideo_BeginGameClipSegmentsUpload_Response::call_again() const {
  // @@protoc_insertion_point(field_get:CVideo_BeginGameClipSegmentsUpload_Response.call_again)
  return _internal_call_again();
}
inline void CVideo_BeginGameClipSegmentsUpload_Response::_internal_set_call_again(bool value) {
  _has_bits_[0] |= 0x00000001u;
  call_again_ = value;
}
inline void CVideo_BeginGameClipSegmentsUpload_Response::set_call_again(bool value) {
  _internal_set_call_again(value);
  // @@protoc_insertion_point(field_set:CVideo_BeginGameClipSegmentsUpload_Response.call_again)
}

// -------------------------------------------------------------------

// CVideo_CommitGameClipSegmentsUpload_Request

// optional uint64 clip_id = 1 [(.description) = "Clip ID"];
inline bool CVideo_CommitGameClipSegmentsUpload_Request::_internal_has_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CVideo_CommitGameClipSegmentsUpload_Request::has_clip_id() const {
  return _internal_has_clip_id();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::clear_clip_id() {
  clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CVideo_CommitGameClipSegmentsUpload_Request::_internal_clip_id() const {
  return clip_id_;
}
inline uint64_t CVideo_CommitGameClipSegmentsUpload_Request::clip_id() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameClipSegmentsUpload_Request.clip_id)
  return _internal_clip_id();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::_internal_set_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  clip_id_ = value;
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::set_clip_id(uint64_t value) {
  _internal_set_clip_id(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameClipSegmentsUpload_Request.clip_id)
}

// optional string component_name = 2 [(.description) = "component segments belong to"];
inline bool CVideo_CommitGameClipSegmentsUpload_Request::_internal_has_component_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_CommitGameClipSegmentsUpload_Request::has_component_name() const {
  return _internal_has_component_name();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::clear_component_name() {
  component_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_CommitGameClipSegmentsUpload_Request::component_name() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameClipSegmentsUpload_Request.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_CommitGameClipSegmentsUpload_Request::set_component_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_CommitGameClipSegmentsUpload_Request.component_name)
}
inline std::string* CVideo_CommitGameClipSegmentsUpload_Request::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:CVideo_CommitGameClipSegmentsUpload_Request.component_name)
  return _s;
}
inline const std::string& CVideo_CommitGameClipSegmentsUpload_Request::_internal_component_name() const {
  return component_name_.Get();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::_internal_set_component_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_CommitGameClipSegmentsUpload_Request::_internal_mutable_component_name() {
  _has_bits_[0] |= 0x00000001u;
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_CommitGameClipSegmentsUpload_Request::release_component_name() {
  // @@protoc_insertion_point(field_release:CVideo_CommitGameClipSegmentsUpload_Request.component_name)
  if (!_internal_has_component_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = component_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_CommitGameClipSegmentsUpload_Request.component_name)
}

// optional string representation_name = 3 [(.description) = "representation name"];
inline bool CVideo_CommitGameClipSegmentsUpload_Request::_internal_has_representation_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CVideo_CommitGameClipSegmentsUpload_Request::has_representation_name() const {
  return _internal_has_representation_name();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::clear_representation_name() {
  representation_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CVideo_CommitGameClipSegmentsUpload_Request::representation_name() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameClipSegmentsUpload_Request.representation_name)
  return _internal_representation_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_CommitGameClipSegmentsUpload_Request::set_representation_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_CommitGameClipSegmentsUpload_Request.representation_name)
}
inline std::string* CVideo_CommitGameClipSegmentsUpload_Request::mutable_representation_name() {
  std::string* _s = _internal_mutable_representation_name();
  // @@protoc_insertion_point(field_mutable:CVideo_CommitGameClipSegmentsUpload_Request.representation_name)
  return _s;
}
inline const std::string& CVideo_CommitGameClipSegmentsUpload_Request::_internal_representation_name() const {
  return representation_name_.Get();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::_internal_set_representation_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  representation_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_CommitGameClipSegmentsUpload_Request::_internal_mutable_representation_name() {
  _has_bits_[0] |= 0x00000002u;
  return representation_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_CommitGameClipSegmentsUpload_Request::release_representation_name() {
  // @@protoc_insertion_point(field_release:CVideo_CommitGameClipSegmentsUpload_Request.representation_name)
  if (!_internal_has_representation_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = representation_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (representation_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::set_allocated_representation_name(std::string* representation_name) {
  if (representation_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  representation_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), representation_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (representation_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    representation_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_CommitGameClipSegmentsUpload_Request.representation_name)
}

// optional uint32 first_segment_number = 4 [(.description) = "Segment Number of first segment uploaded in this batch"];
inline bool CVideo_CommitGameClipSegmentsUpload_Request::_internal_has_first_segment_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CVideo_CommitGameClipSegmentsUpload_Request::has_first_segment_number() const {
  return _internal_has_first_segment_number();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::clear_first_segment_number() {
  first_segment_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CVideo_CommitGameClipSegmentsUpload_Request::_internal_first_segment_number() const {
  return first_segment_number_;
}
inline uint32_t CVideo_CommitGameClipSegmentsUpload_Request::first_segment_number() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameClipSegmentsUpload_Request.first_segment_number)
  return _internal_first_segment_number();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::_internal_set_first_segment_number(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  first_segment_number_ = value;
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::set_first_segment_number(uint32_t value) {
  _internal_set_first_segment_number(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameClipSegmentsUpload_Request.first_segment_number)
}

// optional uint32 num_segments = 5 [(.description) = "Number of segments in Batch"];
inline bool CVideo_CommitGameClipSegmentsUpload_Request::_internal_has_num_segments() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CVideo_CommitGameClipSegmentsUpload_Request::has_num_segments() const {
  return _internal_has_num_segments();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::clear_num_segments() {
  num_segments_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CVideo_CommitGameClipSegmentsUpload_Request::_internal_num_segments() const {
  return num_segments_;
}
inline uint32_t CVideo_CommitGameClipSegmentsUpload_Request::num_segments() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameClipSegmentsUpload_Request.num_segments)
  return _internal_num_segments();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::_internal_set_num_segments(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  num_segments_ = value;
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::set_num_segments(uint32_t value) {
  _internal_set_num_segments(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameClipSegmentsUpload_Request.num_segments)
}

// optional uint32 upload_result = 6 [(.description) = "eresult of the upload attempt"];
inline bool CVideo_CommitGameClipSegmentsUpload_Request::_internal_has_upload_result() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CVideo_CommitGameClipSegmentsUpload_Request::has_upload_result() const {
  return _internal_has_upload_result();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::clear_upload_result() {
  upload_result_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CVideo_CommitGameClipSegmentsUpload_Request::_internal_upload_result() const {
  return upload_result_;
}
inline uint32_t CVideo_CommitGameClipSegmentsUpload_Request::upload_result() const {
  // @@protoc_insertion_point(field_get:CVideo_CommitGameClipSegmentsUpload_Request.upload_result)
  return _internal_upload_result();
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::_internal_set_upload_result(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  upload_result_ = value;
}
inline void CVideo_CommitGameClipSegmentsUpload_Request::set_upload_result(uint32_t value) {
  _internal_set_upload_result(value);
  // @@protoc_insertion_point(field_set:CVideo_CommitGameClipSegmentsUpload_Request.upload_result)
}

// -------------------------------------------------------------------

// CVideo_CommitGameClipSegmentsUpload_Response

// -------------------------------------------------------------------

// CVideo_UnlockedH264_Notification

// optional bytes encryption_key = 1;
inline bool CVideo_UnlockedH264_Notification::_internal_has_encryption_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CVideo_UnlockedH264_Notification::has_encryption_key() const {
  return _internal_has_encryption_key();
}
inline void CVideo_UnlockedH264_Notification::clear_encryption_key() {
  encryption_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CVideo_UnlockedH264_Notification::encryption_key() const {
  // @@protoc_insertion_point(field_get:CVideo_UnlockedH264_Notification.encryption_key)
  return _internal_encryption_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CVideo_UnlockedH264_Notification::set_encryption_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encryption_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CVideo_UnlockedH264_Notification.encryption_key)
}
inline std::string* CVideo_UnlockedH264_Notification::mutable_encryption_key() {
  std::string* _s = _internal_mutable_encryption_key();
  // @@protoc_insertion_point(field_mutable:CVideo_UnlockedH264_Notification.encryption_key)
  return _s;
}
inline const std::string& CVideo_UnlockedH264_Notification::_internal_encryption_key() const {
  return encryption_key_.Get();
}
inline void CVideo_UnlockedH264_Notification::_internal_set_encryption_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CVideo_UnlockedH264_Notification::_internal_mutable_encryption_key() {
  _has_bits_[0] |= 0x00000001u;
  return encryption_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CVideo_UnlockedH264_Notification::release_encryption_key() {
  // @@protoc_insertion_point(field_release:CVideo_UnlockedH264_Notification.encryption_key)
  if (!_internal_has_encryption_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = encryption_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encryption_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CVideo_UnlockedH264_Notification::set_allocated_encryption_key(std::string* encryption_key) {
  if (encryption_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encryption_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encryption_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CVideo_UnlockedH264_Notification.encryption_key)
}

// -------------------------------------------------------------------

// CFovasVideo_ClientGetOPFSettings_Request

// optional uint32 app_id = 1 [(.description) = "App ID"];
inline bool CFovasVideo_ClientGetOPFSettings_Request::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFovasVideo_ClientGetOPFSettings_Request::has_app_id() const {
  return _internal_has_app_id();
}
inline void CFovasVideo_ClientGetOPFSettings_Request::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CFovasVideo_ClientGetOPFSettings_Request::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CFovasVideo_ClientGetOPFSettings_Request::app_id() const {
  // @@protoc_insertion_point(field_get:CFovasVideo_ClientGetOPFSettings_Request.app_id)
  return _internal_app_id();
}
inline void CFovasVideo_ClientGetOPFSettings_Request::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_ = value;
}
inline void CFovasVideo_ClientGetOPFSettings_Request::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CFovasVideo_ClientGetOPFSettings_Request.app_id)
}

// optional uint32 client_cellid = 2 [(.description) = "Cell ID of client, zero if unknown"];
inline bool CFovasVideo_ClientGetOPFSettings_Request::_internal_has_client_cellid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFovasVideo_ClientGetOPFSettings_Request::has_client_cellid() const {
  return _internal_has_client_cellid();
}
inline void CFovasVideo_ClientGetOPFSettings_Request::clear_client_cellid() {
  client_cellid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CFovasVideo_ClientGetOPFSettings_Request::_internal_client_cellid() const {
  return client_cellid_;
}
inline uint32_t CFovasVideo_ClientGetOPFSettings_Request::client_cellid() const {
  // @@protoc_insertion_point(field_get:CFovasVideo_ClientGetOPFSettings_Request.client_cellid)
  return _internal_client_cellid();
}
inline void CFovasVideo_ClientGetOPFSettings_Request::_internal_set_client_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_cellid_ = value;
}
inline void CFovasVideo_ClientGetOPFSettings_Request::set_client_cellid(uint32_t value) {
  _internal_set_client_cellid(value);
  // @@protoc_insertion_point(field_set:CFovasVideo_ClientGetOPFSettings_Request.client_cellid)
}

// -------------------------------------------------------------------

// CFovasVideo_ClientGetOPFSettings_Response

// optional uint32 app_id = 1 [(.description) = "App ID"];
inline bool CFovasVideo_ClientGetOPFSettings_Response::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFovasVideo_ClientGetOPFSettings_Response::has_app_id() const {
  return _internal_has_app_id();
}
inline void CFovasVideo_ClientGetOPFSettings_Response::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CFovasVideo_ClientGetOPFSettings_Response::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CFovasVideo_ClientGetOPFSettings_Response::app_id() const {
  // @@protoc_insertion_point(field_get:CFovasVideo_ClientGetOPFSettings_Response.app_id)
  return _internal_app_id();
}
inline void CFovasVideo_ClientGetOPFSettings_Response::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CFovasVideo_ClientGetOPFSettings_Response::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CFovasVideo_ClientGetOPFSettings_Response.app_id)
}

// optional string opf_settings = 2 [(.description) = "JSON blob of OPF Settings"];
inline bool CFovasVideo_ClientGetOPFSettings_Response::_internal_has_opf_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFovasVideo_ClientGetOPFSettings_Response::has_opf_settings() const {
  return _internal_has_opf_settings();
}
inline void CFovasVideo_ClientGetOPFSettings_Response::clear_opf_settings() {
  opf_settings_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFovasVideo_ClientGetOPFSettings_Response::opf_settings() const {
  // @@protoc_insertion_point(field_get:CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
  return _internal_opf_settings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFovasVideo_ClientGetOPFSettings_Response::set_opf_settings(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 opf_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
}
inline std::string* CFovasVideo_ClientGetOPFSettings_Response::mutable_opf_settings() {
  std::string* _s = _internal_mutable_opf_settings();
  // @@protoc_insertion_point(field_mutable:CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
  return _s;
}
inline const std::string& CFovasVideo_ClientGetOPFSettings_Response::_internal_opf_settings() const {
  return opf_settings_.Get();
}
inline void CFovasVideo_ClientGetOPFSettings_Response::_internal_set_opf_settings(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opf_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFovasVideo_ClientGetOPFSettings_Response::_internal_mutable_opf_settings() {
  _has_bits_[0] |= 0x00000001u;
  return opf_settings_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFovasVideo_ClientGetOPFSettings_Response::release_opf_settings() {
  // @@protoc_insertion_point(field_release:CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
  if (!_internal_has_opf_settings()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = opf_settings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opf_settings_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opf_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFovasVideo_ClientGetOPFSettings_Response::set_allocated_opf_settings(std::string* opf_settings) {
  if (opf_settings != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opf_settings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opf_settings,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (opf_settings_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    opf_settings_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFovasVideo_ClientGetOPFSettings_Response.opf_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvideo_2esteamclient_2eproto
