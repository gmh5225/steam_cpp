// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_linkfilter.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5flinkfilter_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5flinkfilter_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5flinkfilter_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5flinkfilter_2esteamclient_2eproto;
class CCommunity_GetLinkFilterHashPrefixes_Request;
struct CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal _CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_;
class CCommunity_GetLinkFilterHashPrefixes_Response;
struct CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_;
class CCommunity_GetLinkFilterHashes_Request;
struct CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal _CCommunity_GetLinkFilterHashes_Request_default_instance_;
class CCommunity_GetLinkFilterHashes_Response;
struct CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterHashes_Response_default_instance_;
class CCommunity_GetLinkFilterListVersion_Request;
struct CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal;
extern CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal _CCommunity_GetLinkFilterListVersion_Request_default_instance_;
class CCommunity_GetLinkFilterListVersion_Response;
struct CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal;
extern CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterListVersion_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCommunity_GetLinkFilterHashPrefixes_Request* Arena::CreateMaybeMessage<::CCommunity_GetLinkFilterHashPrefixes_Request>(Arena*);
template<> ::CCommunity_GetLinkFilterHashPrefixes_Response* Arena::CreateMaybeMessage<::CCommunity_GetLinkFilterHashPrefixes_Response>(Arena*);
template<> ::CCommunity_GetLinkFilterHashes_Request* Arena::CreateMaybeMessage<::CCommunity_GetLinkFilterHashes_Request>(Arena*);
template<> ::CCommunity_GetLinkFilterHashes_Response* Arena::CreateMaybeMessage<::CCommunity_GetLinkFilterHashes_Response>(Arena*);
template<> ::CCommunity_GetLinkFilterListVersion_Request* Arena::CreateMaybeMessage<::CCommunity_GetLinkFilterListVersion_Request>(Arena*);
template<> ::CCommunity_GetLinkFilterListVersion_Response* Arena::CreateMaybeMessage<::CCommunity_GetLinkFilterListVersion_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CCommunity_GetLinkFilterHashPrefixes_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetLinkFilterHashPrefixes_Request) */ {
 public:
  inline CCommunity_GetLinkFilterHashPrefixes_Request() : CCommunity_GetLinkFilterHashPrefixes_Request(nullptr) {}
  ~CCommunity_GetLinkFilterHashPrefixes_Request() override;
  explicit constexpr CCommunity_GetLinkFilterHashPrefixes_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetLinkFilterHashPrefixes_Request(const CCommunity_GetLinkFilterHashPrefixes_Request& from);
  CCommunity_GetLinkFilterHashPrefixes_Request(CCommunity_GetLinkFilterHashPrefixes_Request&& from) noexcept
    : CCommunity_GetLinkFilterHashPrefixes_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetLinkFilterHashPrefixes_Request& operator=(const CCommunity_GetLinkFilterHashPrefixes_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetLinkFilterHashPrefixes_Request& operator=(CCommunity_GetLinkFilterHashPrefixes_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetLinkFilterHashPrefixes_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetLinkFilterHashPrefixes_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashPrefixes_Request*>(
               &_CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCommunity_GetLinkFilterHashPrefixes_Request& a, CCommunity_GetLinkFilterHashPrefixes_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetLinkFilterHashPrefixes_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetLinkFilterHashPrefixes_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetLinkFilterHashPrefixes_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetLinkFilterHashPrefixes_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetLinkFilterHashPrefixes_Request";
  }
  protected:
  explicit CCommunity_GetLinkFilterHashPrefixes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitTypeFieldNumber = 1,
    kCountFieldNumber = 2,
    kStartFieldNumber = 3,
  };
  // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
  bool has_hit_type() const;
  private:
  bool _internal_has_hit_type() const;
  public:
  void clear_hit_type();
  uint32_t hit_type() const;
  void set_hit_type(uint32_t value);
  private:
  uint32_t _internal_hit_type() const;
  void _internal_set_hit_type(uint32_t value);
  public:

  // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetLinkFilterHashPrefixes_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t hit_type_;
  uint32_t count_;
  uint64_t start_;
  friend struct ::TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterHashPrefixes_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetLinkFilterHashPrefixes_Response) */ {
 public:
  inline CCommunity_GetLinkFilterHashPrefixes_Response() : CCommunity_GetLinkFilterHashPrefixes_Response(nullptr) {}
  ~CCommunity_GetLinkFilterHashPrefixes_Response() override;
  explicit constexpr CCommunity_GetLinkFilterHashPrefixes_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetLinkFilterHashPrefixes_Response(const CCommunity_GetLinkFilterHashPrefixes_Response& from);
  CCommunity_GetLinkFilterHashPrefixes_Response(CCommunity_GetLinkFilterHashPrefixes_Response&& from) noexcept
    : CCommunity_GetLinkFilterHashPrefixes_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetLinkFilterHashPrefixes_Response& operator=(const CCommunity_GetLinkFilterHashPrefixes_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetLinkFilterHashPrefixes_Response& operator=(CCommunity_GetLinkFilterHashPrefixes_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetLinkFilterHashPrefixes_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetLinkFilterHashPrefixes_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashPrefixes_Response*>(
               &_CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCommunity_GetLinkFilterHashPrefixes_Response& a, CCommunity_GetLinkFilterHashPrefixes_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetLinkFilterHashPrefixes_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetLinkFilterHashPrefixes_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetLinkFilterHashPrefixes_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetLinkFilterHashPrefixes_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetLinkFilterHashPrefixes_Response";
  }
  protected:
  explicit CCommunity_GetLinkFilterHashPrefixes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashPrefixesFieldNumber = 1,
  };
  // repeated uint32 hash_prefixes = 1 [(.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
  int hash_prefixes_size() const;
  private:
  int _internal_hash_prefixes_size() const;
  public:
  void clear_hash_prefixes();
  private:
  uint32_t _internal_hash_prefixes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hash_prefixes() const;
  void _internal_add_hash_prefixes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hash_prefixes();
  public:
  uint32_t hash_prefixes(int index) const;
  void set_hash_prefixes(int index, uint32_t value);
  void add_hash_prefixes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hash_prefixes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hash_prefixes();

  // @@protoc_insertion_point(class_scope:CCommunity_GetLinkFilterHashPrefixes_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hash_prefixes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterHashes_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetLinkFilterHashes_Request) */ {
 public:
  inline CCommunity_GetLinkFilterHashes_Request() : CCommunity_GetLinkFilterHashes_Request(nullptr) {}
  ~CCommunity_GetLinkFilterHashes_Request() override;
  explicit constexpr CCommunity_GetLinkFilterHashes_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetLinkFilterHashes_Request(const CCommunity_GetLinkFilterHashes_Request& from);
  CCommunity_GetLinkFilterHashes_Request(CCommunity_GetLinkFilterHashes_Request&& from) noexcept
    : CCommunity_GetLinkFilterHashes_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetLinkFilterHashes_Request& operator=(const CCommunity_GetLinkFilterHashes_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetLinkFilterHashes_Request& operator=(CCommunity_GetLinkFilterHashes_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetLinkFilterHashes_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetLinkFilterHashes_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashes_Request*>(
               &_CCommunity_GetLinkFilterHashes_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CCommunity_GetLinkFilterHashes_Request& a, CCommunity_GetLinkFilterHashes_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetLinkFilterHashes_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetLinkFilterHashes_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetLinkFilterHashes_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetLinkFilterHashes_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetLinkFilterHashes_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCommunity_GetLinkFilterHashes_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetLinkFilterHashes_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetLinkFilterHashes_Request";
  }
  protected:
  explicit CCommunity_GetLinkFilterHashes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitTypeFieldNumber = 1,
    kCountFieldNumber = 2,
    kStartFieldNumber = 3,
  };
  // optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
  bool has_hit_type() const;
  private:
  bool _internal_has_hit_type() const;
  public:
  void clear_hit_type();
  uint32_t hit_type() const;
  void set_hit_type(uint32_t value);
  private:
  uint32_t _internal_hit_type() const;
  void _internal_set_hit_type(uint32_t value);
  public:

  // optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetLinkFilterHashes_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t hit_type_;
  uint32_t count_;
  uint64_t start_;
  friend struct ::TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterHashes_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetLinkFilterHashes_Response) */ {
 public:
  inline CCommunity_GetLinkFilterHashes_Response() : CCommunity_GetLinkFilterHashes_Response(nullptr) {}
  ~CCommunity_GetLinkFilterHashes_Response() override;
  explicit constexpr CCommunity_GetLinkFilterHashes_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetLinkFilterHashes_Response(const CCommunity_GetLinkFilterHashes_Response& from);
  CCommunity_GetLinkFilterHashes_Response(CCommunity_GetLinkFilterHashes_Response&& from) noexcept
    : CCommunity_GetLinkFilterHashes_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetLinkFilterHashes_Response& operator=(const CCommunity_GetLinkFilterHashes_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetLinkFilterHashes_Response& operator=(CCommunity_GetLinkFilterHashes_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetLinkFilterHashes_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetLinkFilterHashes_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashes_Response*>(
               &_CCommunity_GetLinkFilterHashes_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCommunity_GetLinkFilterHashes_Response& a, CCommunity_GetLinkFilterHashes_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetLinkFilterHashes_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetLinkFilterHashes_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetLinkFilterHashes_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetLinkFilterHashes_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetLinkFilterHashes_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCommunity_GetLinkFilterHashes_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetLinkFilterHashes_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetLinkFilterHashes_Response";
  }
  protected:
  explicit CCommunity_GetLinkFilterHashes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
  };
  // repeated bytes hashes = 1 [(.description) = "A list of hashes returned from our request."];
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  const std::string& hashes(int index) const;
  std::string* mutable_hashes(int index);
  void set_hashes(int index, const std::string& value);
  void set_hashes(int index, std::string&& value);
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const void* value, size_t size);
  std::string* add_hashes();
  void add_hashes(const std::string& value);
  void add_hashes(std::string&& value);
  void add_hashes(const char* value);
  void add_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashes();
  private:
  const std::string& _internal_hashes(int index) const;
  std::string* _internal_add_hashes();
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetLinkFilterHashes_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterListVersion_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetLinkFilterListVersion_Request) */ {
 public:
  inline CCommunity_GetLinkFilterListVersion_Request() : CCommunity_GetLinkFilterListVersion_Request(nullptr) {}
  ~CCommunity_GetLinkFilterListVersion_Request() override;
  explicit constexpr CCommunity_GetLinkFilterListVersion_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetLinkFilterListVersion_Request(const CCommunity_GetLinkFilterListVersion_Request& from);
  CCommunity_GetLinkFilterListVersion_Request(CCommunity_GetLinkFilterListVersion_Request&& from) noexcept
    : CCommunity_GetLinkFilterListVersion_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetLinkFilterListVersion_Request& operator=(const CCommunity_GetLinkFilterListVersion_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetLinkFilterListVersion_Request& operator=(CCommunity_GetLinkFilterListVersion_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetLinkFilterListVersion_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetLinkFilterListVersion_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterListVersion_Request*>(
               &_CCommunity_GetLinkFilterListVersion_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCommunity_GetLinkFilterListVersion_Request& a, CCommunity_GetLinkFilterListVersion_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetLinkFilterListVersion_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetLinkFilterListVersion_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetLinkFilterListVersion_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetLinkFilterListVersion_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetLinkFilterListVersion_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCommunity_GetLinkFilterListVersion_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetLinkFilterListVersion_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetLinkFilterListVersion_Request";
  }
  protected:
  explicit CCommunity_GetLinkFilterListVersion_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitTypeFieldNumber = 1,
  };
  // optional uint32 hit_type = 1 [(.description) = "The version hashes for this type\'s chunks will be returned."];
  bool has_hit_type() const;
  private:
  bool _internal_has_hit_type() const;
  public:
  void clear_hit_type();
  uint32_t hit_type() const;
  void set_hit_type(uint32_t value);
  private:
  uint32_t _internal_hit_type() const;
  void _internal_set_hit_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetLinkFilterListVersion_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t hit_type_;
  friend struct ::TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterListVersion_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetLinkFilterListVersion_Response) */ {
 public:
  inline CCommunity_GetLinkFilterListVersion_Response() : CCommunity_GetLinkFilterListVersion_Response(nullptr) {}
  ~CCommunity_GetLinkFilterListVersion_Response() override;
  explicit constexpr CCommunity_GetLinkFilterListVersion_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetLinkFilterListVersion_Response(const CCommunity_GetLinkFilterListVersion_Response& from);
  CCommunity_GetLinkFilterListVersion_Response(CCommunity_GetLinkFilterListVersion_Response&& from) noexcept
    : CCommunity_GetLinkFilterListVersion_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetLinkFilterListVersion_Response& operator=(const CCommunity_GetLinkFilterListVersion_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetLinkFilterListVersion_Response& operator=(CCommunity_GetLinkFilterListVersion_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetLinkFilterListVersion_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetLinkFilterListVersion_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterListVersion_Response*>(
               &_CCommunity_GetLinkFilterListVersion_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CCommunity_GetLinkFilterListVersion_Response& a, CCommunity_GetLinkFilterListVersion_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetLinkFilterListVersion_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetLinkFilterListVersion_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetLinkFilterListVersion_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetLinkFilterListVersion_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetLinkFilterListVersion_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCommunity_GetLinkFilterListVersion_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetLinkFilterListVersion_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetLinkFilterListVersion_Response";
  }
  protected:
  explicit CCommunity_GetLinkFilterListVersion_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional string version = 1 [(.description) = "A hash built using the IDs of the contained hits."];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional uint64 count = 2 [(.description) = "The number of hits of this type"];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetLinkFilterListVersion_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  uint64_t count_;
  friend struct ::TableStruct_steammessages_5flinkfilter_2esteamclient_2eproto;
};
// ===================================================================

class CommunityLinkFilter_Stub;

class CommunityLinkFilter : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CommunityLinkFilter() {};
 public:
  virtual ~CommunityLinkFilter();

  typedef CommunityLinkFilter_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetLinkFilterHashPrefixes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCommunity_GetLinkFilterHashPrefixes_Request* request,
                       ::CCommunity_GetLinkFilterHashPrefixes_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLinkFilterHashes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCommunity_GetLinkFilterHashes_Request* request,
                       ::CCommunity_GetLinkFilterHashes_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLinkFilterListVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCommunity_GetLinkFilterListVersion_Request* request,
                       ::CCommunity_GetLinkFilterListVersion_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CommunityLinkFilter);
};

class CommunityLinkFilter_Stub : public CommunityLinkFilter {
 public:
  CommunityLinkFilter_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CommunityLinkFilter_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CommunityLinkFilter_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CommunityLinkFilter ------------------------------------------

  void GetLinkFilterHashPrefixes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCommunity_GetLinkFilterHashPrefixes_Request* request,
                       ::CCommunity_GetLinkFilterHashPrefixes_Response* response,
                       ::google::protobuf::Closure* done);
  void GetLinkFilterHashes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCommunity_GetLinkFilterHashes_Request* request,
                       ::CCommunity_GetLinkFilterHashes_Response* response,
                       ::google::protobuf::Closure* done);
  void GetLinkFilterListVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CCommunity_GetLinkFilterListVersion_Request* request,
                       ::CCommunity_GetLinkFilterListVersion_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CommunityLinkFilter_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCommunity_GetLinkFilterHashPrefixes_Request

// optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::_internal_has_hit_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::has_hit_type() const {
  return _internal_has_hit_type();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_hit_type() {
  hit_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCommunity_GetLinkFilterHashPrefixes_Request::_internal_hit_type() const {
  return hit_type_;
}
inline uint32_t CCommunity_GetLinkFilterHashPrefixes_Request::hit_type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashPrefixes_Request.hit_type)
  return _internal_hit_type();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::_internal_set_hit_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  hit_type_ = value;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_hit_type(uint32_t value) {
  _internal_set_hit_type(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashPrefixes_Request.hit_type)
}

// optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::has_count() const {
  return _internal_has_count();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCommunity_GetLinkFilterHashPrefixes_Request::_internal_count() const {
  return count_;
}
inline uint32_t CCommunity_GetLinkFilterHashPrefixes_Request::count() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashPrefixes_Request.count)
  return _internal_count();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashPrefixes_Request.count)
}

// optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::has_start() const {
  return _internal_has_start();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_start() {
  start_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCommunity_GetLinkFilterHashPrefixes_Request::_internal_start() const {
  return start_;
}
inline uint64_t CCommunity_GetLinkFilterHashPrefixes_Request::start() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashPrefixes_Request.start)
  return _internal_start();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::_internal_set_start(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashPrefixes_Request.start)
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterHashPrefixes_Response

// repeated uint32 hash_prefixes = 1 [(.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
inline int CCommunity_GetLinkFilterHashPrefixes_Response::_internal_hash_prefixes_size() const {
  return hash_prefixes_.size();
}
inline int CCommunity_GetLinkFilterHashPrefixes_Response::hash_prefixes_size() const {
  return _internal_hash_prefixes_size();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Response::clear_hash_prefixes() {
  hash_prefixes_.Clear();
}
inline uint32_t CCommunity_GetLinkFilterHashPrefixes_Response::_internal_hash_prefixes(int index) const {
  return hash_prefixes_.Get(index);
}
inline uint32_t CCommunity_GetLinkFilterHashPrefixes_Response::hash_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
  return _internal_hash_prefixes(index);
}
inline void CCommunity_GetLinkFilterHashPrefixes_Response::set_hash_prefixes(int index, uint32_t value) {
  hash_prefixes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
}
inline void CCommunity_GetLinkFilterHashPrefixes_Response::_internal_add_hash_prefixes(uint32_t value) {
  hash_prefixes_.Add(value);
}
inline void CCommunity_GetLinkFilterHashPrefixes_Response::add_hash_prefixes(uint32_t value) {
  _internal_add_hash_prefixes(value);
  // @@protoc_insertion_point(field_add:CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCommunity_GetLinkFilterHashPrefixes_Response::_internal_hash_prefixes() const {
  return hash_prefixes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CCommunity_GetLinkFilterHashPrefixes_Response::hash_prefixes() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
  return _internal_hash_prefixes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCommunity_GetLinkFilterHashPrefixes_Response::_internal_mutable_hash_prefixes() {
  return &hash_prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CCommunity_GetLinkFilterHashPrefixes_Response::mutable_hash_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
  return _internal_mutable_hash_prefixes();
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterHashes_Request

// optional uint32 hit_type = 1 [(.description) = "The retrieved hits will be filtered to this type."];
inline bool CCommunity_GetLinkFilterHashes_Request::_internal_has_hit_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterHashes_Request::has_hit_type() const {
  return _internal_has_hit_type();
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_hit_type() {
  hit_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCommunity_GetLinkFilterHashes_Request::_internal_hit_type() const {
  return hit_type_;
}
inline uint32_t CCommunity_GetLinkFilterHashes_Request::hit_type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashes_Request.hit_type)
  return _internal_hit_type();
}
inline void CCommunity_GetLinkFilterHashes_Request::_internal_set_hit_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  hit_type_ = value;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_hit_type(uint32_t value) {
  _internal_set_hit_type(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashes_Request.hit_type)
}

// optional uint32 count = 2 [(.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
inline bool CCommunity_GetLinkFilterHashes_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterHashes_Request::has_count() const {
  return _internal_has_count();
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCommunity_GetLinkFilterHashes_Request::_internal_count() const {
  return count_;
}
inline uint32_t CCommunity_GetLinkFilterHashes_Request::count() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashes_Request.count)
  return _internal_count();
}
inline void CCommunity_GetLinkFilterHashes_Request::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashes_Request.count)
}

// optional uint64 start = 3 [(.description) = "The starting count when retrieving hits in batches."];
inline bool CCommunity_GetLinkFilterHashes_Request::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterHashes_Request::has_start() const {
  return _internal_has_start();
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_start() {
  start_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCommunity_GetLinkFilterHashes_Request::_internal_start() const {
  return start_;
}
inline uint64_t CCommunity_GetLinkFilterHashes_Request::start() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashes_Request.start)
  return _internal_start();
}
inline void CCommunity_GetLinkFilterHashes_Request::_internal_set_start(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashes_Request.start)
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterHashes_Response

// repeated bytes hashes = 1 [(.description) = "A list of hashes returned from our request."];
inline int CCommunity_GetLinkFilterHashes_Response::_internal_hashes_size() const {
  return hashes_.size();
}
inline int CCommunity_GetLinkFilterHashes_Response::hashes_size() const {
  return _internal_hashes_size();
}
inline void CCommunity_GetLinkFilterHashes_Response::clear_hashes() {
  hashes_.Clear();
}
inline std::string* CCommunity_GetLinkFilterHashes_Response::add_hashes() {
  std::string* _s = _internal_add_hashes();
  // @@protoc_insertion_point(field_add_mutable:CCommunity_GetLinkFilterHashes_Response.hashes)
  return _s;
}
inline const std::string& CCommunity_GetLinkFilterHashes_Response::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const std::string& CCommunity_GetLinkFilterHashes_Response::hashes(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterHashes_Response.hashes)
  return _internal_hashes(index);
}
inline std::string* CCommunity_GetLinkFilterHashes_Response::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetLinkFilterHashes_Response.hashes)
  return hashes_.Mutable(index);
}
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, const std::string& value) {
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, std::string&& value) {
  hashes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline std::string* CCommunity_GetLinkFilterHashes_Response::_internal_add_hashes() {
  return hashes_.Add();
}
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(const std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCommunity_GetLinkFilterHashes_Response::hashes() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetLinkFilterHashes_Response.hashes)
  return hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCommunity_GetLinkFilterHashes_Response::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetLinkFilterHashes_Response.hashes)
  return &hashes_;
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterListVersion_Request

// optional uint32 hit_type = 1 [(.description) = "The version hashes for this type\'s chunks will be returned."];
inline bool CCommunity_GetLinkFilterListVersion_Request::_internal_has_hit_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterListVersion_Request::has_hit_type() const {
  return _internal_has_hit_type();
}
inline void CCommunity_GetLinkFilterListVersion_Request::clear_hit_type() {
  hit_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCommunity_GetLinkFilterListVersion_Request::_internal_hit_type() const {
  return hit_type_;
}
inline uint32_t CCommunity_GetLinkFilterListVersion_Request::hit_type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterListVersion_Request.hit_type)
  return _internal_hit_type();
}
inline void CCommunity_GetLinkFilterListVersion_Request::_internal_set_hit_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  hit_type_ = value;
}
inline void CCommunity_GetLinkFilterListVersion_Request::set_hit_type(uint32_t value) {
  _internal_set_hit_type(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterListVersion_Request.hit_type)
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterListVersion_Response

// optional string version = 1 [(.description) = "A hash built using the IDs of the contained hits."];
inline bool CCommunity_GetLinkFilterListVersion_Response::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterListVersion_Response::has_version() const {
  return _internal_has_version();
}
inline void CCommunity_GetLinkFilterListVersion_Response::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GetLinkFilterListVersion_Response::version() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterListVersion_Response.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetLinkFilterListVersion_Response::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterListVersion_Response.version)
}
inline std::string* CCommunity_GetLinkFilterListVersion_Response::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetLinkFilterListVersion_Response.version)
  return _s;
}
inline const std::string& CCommunity_GetLinkFilterListVersion_Response::_internal_version() const {
  return version_.Get();
}
inline void CCommunity_GetLinkFilterListVersion_Response::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetLinkFilterListVersion_Response::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCommunity_GetLinkFilterListVersion_Response::release_version() {
  // @@protoc_insertion_point(field_release:CCommunity_GetLinkFilterListVersion_Response.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetLinkFilterListVersion_Response.version)
}

// optional uint64 count = 2 [(.description) = "The number of hits of this type"];
inline bool CCommunity_GetLinkFilterListVersion_Response::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GetLinkFilterListVersion_Response::has_count() const {
  return _internal_has_count();
}
inline void CCommunity_GetLinkFilterListVersion_Response::clear_count() {
  count_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCommunity_GetLinkFilterListVersion_Response::_internal_count() const {
  return count_;
}
inline uint64_t CCommunity_GetLinkFilterListVersion_Response::count() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetLinkFilterListVersion_Response.count)
  return _internal_count();
}
inline void CCommunity_GetLinkFilterListVersion_Response::_internal_set_count(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetLinkFilterListVersion_Response.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5flinkfilter_2esteamclient_2eproto
