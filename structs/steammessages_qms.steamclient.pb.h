// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_qms.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fqms_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fqms_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fqms_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fqms_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fqms_2esteamclient_2eproto;
class CQueuedMatchmakingGameHost_EndGame_Request;
struct CQueuedMatchmakingGameHost_EndGame_RequestDefaultTypeInternal;
extern CQueuedMatchmakingGameHost_EndGame_RequestDefaultTypeInternal _CQueuedMatchmakingGameHost_EndGame_Request_default_instance_;
class CQueuedMatchmakingGameHost_EndGame_Response;
struct CQueuedMatchmakingGameHost_EndGame_ResponseDefaultTypeInternal;
extern CQueuedMatchmakingGameHost_EndGame_ResponseDefaultTypeInternal _CQueuedMatchmakingGameHost_EndGame_Response_default_instance_;
class CQueuedMatchmakingGameHost_SearchForPlayers_Request;
struct CQueuedMatchmakingGameHost_SearchForPlayers_RequestDefaultTypeInternal;
extern CQueuedMatchmakingGameHost_SearchForPlayers_RequestDefaultTypeInternal _CQueuedMatchmakingGameHost_SearchForPlayers_Request_default_instance_;
class CQueuedMatchmakingGameHost_SearchForPlayers_Response;
struct CQueuedMatchmakingGameHost_SearchForPlayers_ResponseDefaultTypeInternal;
extern CQueuedMatchmakingGameHost_SearchForPlayers_ResponseDefaultTypeInternal _CQueuedMatchmakingGameHost_SearchForPlayers_Response_default_instance_;
class CQueuedMatchmakingGameHost_SubmitPlayerResult_Request;
struct CQueuedMatchmakingGameHost_SubmitPlayerResult_RequestDefaultTypeInternal;
extern CQueuedMatchmakingGameHost_SubmitPlayerResult_RequestDefaultTypeInternal _CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_default_instance_;
class CQueuedMatchmakingGameHost_SubmitPlayerResult_Response;
struct CQueuedMatchmakingGameHost_SubmitPlayerResult_ResponseDefaultTypeInternal;
extern CQueuedMatchmakingGameHost_SubmitPlayerResult_ResponseDefaultTypeInternal _CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_default_instance_;
class CQueuedMatchmaking_SearchForGame_Request;
struct CQueuedMatchmaking_SearchForGame_RequestDefaultTypeInternal;
extern CQueuedMatchmaking_SearchForGame_RequestDefaultTypeInternal _CQueuedMatchmaking_SearchForGame_Request_default_instance_;
class CQueuedMatchmaking_SearchForGame_Response;
struct CQueuedMatchmaking_SearchForGame_ResponseDefaultTypeInternal;
extern CQueuedMatchmaking_SearchForGame_ResponseDefaultTypeInternal _CQueuedMatchmaking_SearchForGame_Response_default_instance_;
class GameSearchParam;
struct GameSearchParamDefaultTypeInternal;
extern GameSearchParamDefaultTypeInternal _GameSearchParam_default_instance_;
class PlayerFound;
struct PlayerFoundDefaultTypeInternal;
extern PlayerFoundDefaultTypeInternal _PlayerFound_default_instance_;
class PlayerResult;
struct PlayerResultDefaultTypeInternal;
extern PlayerResultDefaultTypeInternal _PlayerResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CQueuedMatchmakingGameHost_EndGame_Request* Arena::CreateMaybeMessage<::CQueuedMatchmakingGameHost_EndGame_Request>(Arena*);
template<> ::CQueuedMatchmakingGameHost_EndGame_Response* Arena::CreateMaybeMessage<::CQueuedMatchmakingGameHost_EndGame_Response>(Arena*);
template<> ::CQueuedMatchmakingGameHost_SearchForPlayers_Request* Arena::CreateMaybeMessage<::CQueuedMatchmakingGameHost_SearchForPlayers_Request>(Arena*);
template<> ::CQueuedMatchmakingGameHost_SearchForPlayers_Response* Arena::CreateMaybeMessage<::CQueuedMatchmakingGameHost_SearchForPlayers_Response>(Arena*);
template<> ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* Arena::CreateMaybeMessage<::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request>(Arena*);
template<> ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* Arena::CreateMaybeMessage<::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response>(Arena*);
template<> ::CQueuedMatchmaking_SearchForGame_Request* Arena::CreateMaybeMessage<::CQueuedMatchmaking_SearchForGame_Request>(Arena*);
template<> ::CQueuedMatchmaking_SearchForGame_Response* Arena::CreateMaybeMessage<::CQueuedMatchmaking_SearchForGame_Response>(Arena*);
template<> ::GameSearchParam* Arena::CreateMaybeMessage<::GameSearchParam>(Arena*);
template<> ::PlayerFound* Arena::CreateMaybeMessage<::PlayerFound>(Arena*);
template<> ::PlayerResult* Arena::CreateMaybeMessage<::PlayerResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EGameSearchAction : int {
  k_EGameSearchAction_None = 0,
  k_EGameSearchAction_Accept = 1,
  k_EGameSearchAction_Decline = 2,
  k_EGameSearchAction_Cancel = 3
};
bool EGameSearchAction_IsValid(int value);
constexpr EGameSearchAction EGameSearchAction_MIN = k_EGameSearchAction_None;
constexpr EGameSearchAction EGameSearchAction_MAX = k_EGameSearchAction_Cancel;
constexpr int EGameSearchAction_ARRAYSIZE = EGameSearchAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameSearchAction_descriptor();
template<typename T>
inline const std::string& EGameSearchAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGameSearchAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGameSearchAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGameSearchAction_descriptor(), enum_t_value);
}
inline bool EGameSearchAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGameSearchAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGameSearchAction>(
    EGameSearchAction_descriptor(), name, value);
}
enum EGameSearchResult : int {
  k_EGameSearchResult_Invalid = 0,
  k_EGameSearchResult_SearchInProgress = 1,
  k_EGameSearchResult_SearchFailedNoHosts = 2,
  k_EGameSearchResult_SearchGameFound = 3,
  k_EGameSearchResult_SearchCompleteAccepted = 4,
  k_EGameSearchResult_SearchCompleteDeclined = 5,
  k_EGameSearchResult_SearchCanceled = 6
};
bool EGameSearchResult_IsValid(int value);
constexpr EGameSearchResult EGameSearchResult_MIN = k_EGameSearchResult_Invalid;
constexpr EGameSearchResult EGameSearchResult_MAX = k_EGameSearchResult_SearchCanceled;
constexpr int EGameSearchResult_ARRAYSIZE = EGameSearchResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameSearchResult_descriptor();
template<typename T>
inline const std::string& EGameSearchResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGameSearchResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGameSearchResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGameSearchResult_descriptor(), enum_t_value);
}
inline bool EGameSearchResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGameSearchResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGameSearchResult>(
    EGameSearchResult_descriptor(), name, value);
}
// ===================================================================

class GameSearchParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameSearchParam) */ {
 public:
  inline GameSearchParam() : GameSearchParam(nullptr) {}
  ~GameSearchParam() override;
  explicit constexpr GameSearchParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameSearchParam(const GameSearchParam& from);
  GameSearchParam(GameSearchParam&& from) noexcept
    : GameSearchParam() {
    *this = ::std::move(from);
  }

  inline GameSearchParam& operator=(const GameSearchParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameSearchParam& operator=(GameSearchParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameSearchParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameSearchParam* internal_default_instance() {
    return reinterpret_cast<const GameSearchParam*>(
               &_GameSearchParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameSearchParam& a, GameSearchParam& b) {
    a.Swap(&b);
  }
  inline void Swap(GameSearchParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameSearchParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameSearchParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameSearchParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameSearchParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameSearchParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSearchParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameSearchParam";
  }
  protected:
  explicit GameSearchParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyNameFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // optional string key_name = 1;
  bool has_key_name() const;
  private:
  bool _internal_has_key_name() const;
  public:
  void clear_key_name();
  const std::string& key_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_name();
  PROTOBUF_NODISCARD std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // @@protoc_insertion_point(class_scope:GameSearchParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmaking_SearchForGame_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQueuedMatchmaking_SearchForGame_Request) */ {
 public:
  inline CQueuedMatchmaking_SearchForGame_Request() : CQueuedMatchmaking_SearchForGame_Request(nullptr) {}
  ~CQueuedMatchmaking_SearchForGame_Request() override;
  explicit constexpr CQueuedMatchmaking_SearchForGame_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmaking_SearchForGame_Request(const CQueuedMatchmaking_SearchForGame_Request& from);
  CQueuedMatchmaking_SearchForGame_Request(CQueuedMatchmaking_SearchForGame_Request&& from) noexcept
    : CQueuedMatchmaking_SearchForGame_Request() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmaking_SearchForGame_Request& operator=(const CQueuedMatchmaking_SearchForGame_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmaking_SearchForGame_Request& operator=(CQueuedMatchmaking_SearchForGame_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmaking_SearchForGame_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmaking_SearchForGame_Request* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmaking_SearchForGame_Request*>(
               &_CQueuedMatchmaking_SearchForGame_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CQueuedMatchmaking_SearchForGame_Request& a, CQueuedMatchmaking_SearchForGame_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmaking_SearchForGame_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmaking_SearchForGame_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmaking_SearchForGame_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmaking_SearchForGame_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQueuedMatchmaking_SearchForGame_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CQueuedMatchmaking_SearchForGame_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQueuedMatchmaking_SearchForGame_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmaking_SearchForGame_Request";
  }
  protected:
  explicit CQueuedMatchmaking_SearchForGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kAppidFieldNumber = 1,
    kActionFieldNumber = 2,
    kPlayerMinFieldNumber = 4,
    kPlayerMaxFieldNumber = 5,
    kSteamidlobbyFieldNumber = 6,
    kSearchidFieldNumber = 7,
  };
  // repeated .GameSearchParam params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::GameSearchParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >*
      mutable_params();
  private:
  const ::GameSearchParam& _internal_params(int index) const;
  ::GameSearchParam* _internal_add_params();
  public:
  const ::GameSearchParam& params(int index) const;
  ::GameSearchParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >&
      params() const;

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional .EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::EGameSearchAction action() const;
  void set_action(::EGameSearchAction value);
  private:
  ::EGameSearchAction _internal_action() const;
  void _internal_set_action(::EGameSearchAction value);
  public:

  // optional uint32 player_min = 4;
  bool has_player_min() const;
  private:
  bool _internal_has_player_min() const;
  public:
  void clear_player_min();
  uint32_t player_min() const;
  void set_player_min(uint32_t value);
  private:
  uint32_t _internal_player_min() const;
  void _internal_set_player_min(uint32_t value);
  public:

  // optional uint32 player_max = 5;
  bool has_player_max() const;
  private:
  bool _internal_has_player_max() const;
  public:
  void clear_player_max();
  uint32_t player_max() const;
  void set_player_max(uint32_t value);
  private:
  uint32_t _internal_player_max() const;
  void _internal_set_player_max(uint32_t value);
  public:

  // optional fixed64 steamidlobby = 6;
  bool has_steamidlobby() const;
  private:
  bool _internal_has_steamidlobby() const;
  public:
  void clear_steamidlobby();
  uint64_t steamidlobby() const;
  void set_steamidlobby(uint64_t value);
  private:
  uint64_t _internal_steamidlobby() const;
  void _internal_set_steamidlobby(uint64_t value);
  public:

  // optional uint64 searchid = 7;
  bool has_searchid() const;
  private:
  bool _internal_has_searchid() const;
  public:
  void clear_searchid();
  uint64_t searchid() const;
  void set_searchid(uint64_t value);
  private:
  uint64_t _internal_searchid() const;
  void _internal_set_searchid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQueuedMatchmaking_SearchForGame_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam > params_;
  uint32_t appid_;
  int action_;
  uint32_t player_min_;
  uint32_t player_max_;
  uint64_t steamidlobby_;
  uint64_t searchid_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmaking_SearchForGame_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQueuedMatchmaking_SearchForGame_Response) */ {
 public:
  inline CQueuedMatchmaking_SearchForGame_Response() : CQueuedMatchmaking_SearchForGame_Response(nullptr) {}
  ~CQueuedMatchmaking_SearchForGame_Response() override;
  explicit constexpr CQueuedMatchmaking_SearchForGame_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmaking_SearchForGame_Response(const CQueuedMatchmaking_SearchForGame_Response& from);
  CQueuedMatchmaking_SearchForGame_Response(CQueuedMatchmaking_SearchForGame_Response&& from) noexcept
    : CQueuedMatchmaking_SearchForGame_Response() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmaking_SearchForGame_Response& operator=(const CQueuedMatchmaking_SearchForGame_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmaking_SearchForGame_Response& operator=(CQueuedMatchmaking_SearchForGame_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmaking_SearchForGame_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmaking_SearchForGame_Response* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmaking_SearchForGame_Response*>(
               &_CQueuedMatchmaking_SearchForGame_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CQueuedMatchmaking_SearchForGame_Response& a, CQueuedMatchmaking_SearchForGame_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmaking_SearchForGame_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmaking_SearchForGame_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmaking_SearchForGame_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmaking_SearchForGame_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQueuedMatchmaking_SearchForGame_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CQueuedMatchmaking_SearchForGame_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQueuedMatchmaking_SearchForGame_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmaking_SearchForGame_Response";
  }
  protected:
  explicit CQueuedMatchmaking_SearchForGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectStringFieldNumber = 9,
    kSearchidFieldNumber = 2,
    kGamesearchresultFieldNumber = 1,
    kSecondsTimeEstimateFieldNumber = 3,
    kPollFrequencyFieldNumber = 4,
    kCountSearchingFieldNumber = 5,
    kPlayersInMatchFieldNumber = 6,
    kPlayersAcceptedFieldNumber = 7,
    kSteamidhostFieldNumber = 10,
    kRtimeMatchMadeFieldNumber = 11,
    kRtimeNowFieldNumber = 12,
    kSteamidCanceledSearchFieldNumber = 13,
  };
  // optional string connect_string = 9;
  bool has_connect_string() const;
  private:
  bool _internal_has_connect_string() const;
  public:
  void clear_connect_string();
  const std::string& connect_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connect_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connect_string();
  PROTOBUF_NODISCARD std::string* release_connect_string();
  void set_allocated_connect_string(std::string* connect_string);
  private:
  const std::string& _internal_connect_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connect_string(const std::string& value);
  std::string* _internal_mutable_connect_string();
  public:

  // optional uint64 searchid = 2;
  bool has_searchid() const;
  private:
  bool _internal_has_searchid() const;
  public:
  void clear_searchid();
  uint64_t searchid() const;
  void set_searchid(uint64_t value);
  private:
  uint64_t _internal_searchid() const;
  void _internal_set_searchid(uint64_t value);
  public:

  // optional .EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
  bool has_gamesearchresult() const;
  private:
  bool _internal_has_gamesearchresult() const;
  public:
  void clear_gamesearchresult();
  ::EGameSearchResult gamesearchresult() const;
  void set_gamesearchresult(::EGameSearchResult value);
  private:
  ::EGameSearchResult _internal_gamesearchresult() const;
  void _internal_set_gamesearchresult(::EGameSearchResult value);
  public:

  // optional uint32 seconds_time_estimate = 3;
  bool has_seconds_time_estimate() const;
  private:
  bool _internal_has_seconds_time_estimate() const;
  public:
  void clear_seconds_time_estimate();
  uint32_t seconds_time_estimate() const;
  void set_seconds_time_estimate(uint32_t value);
  private:
  uint32_t _internal_seconds_time_estimate() const;
  void _internal_set_seconds_time_estimate(uint32_t value);
  public:

  // optional uint32 poll_frequency = 4;
  bool has_poll_frequency() const;
  private:
  bool _internal_has_poll_frequency() const;
  public:
  void clear_poll_frequency();
  uint32_t poll_frequency() const;
  void set_poll_frequency(uint32_t value);
  private:
  uint32_t _internal_poll_frequency() const;
  void _internal_set_poll_frequency(uint32_t value);
  public:

  // optional uint32 count_searching = 5;
  bool has_count_searching() const;
  private:
  bool _internal_has_count_searching() const;
  public:
  void clear_count_searching();
  uint32_t count_searching() const;
  void set_count_searching(uint32_t value);
  private:
  uint32_t _internal_count_searching() const;
  void _internal_set_count_searching(uint32_t value);
  public:

  // optional uint32 players_in_match = 6;
  bool has_players_in_match() const;
  private:
  bool _internal_has_players_in_match() const;
  public:
  void clear_players_in_match();
  uint32_t players_in_match() const;
  void set_players_in_match(uint32_t value);
  private:
  uint32_t _internal_players_in_match() const;
  void _internal_set_players_in_match(uint32_t value);
  public:

  // optional uint32 players_accepted = 7;
  bool has_players_accepted() const;
  private:
  bool _internal_has_players_accepted() const;
  public:
  void clear_players_accepted();
  uint32_t players_accepted() const;
  void set_players_accepted(uint32_t value);
  private:
  uint32_t _internal_players_accepted() const;
  void _internal_set_players_accepted(uint32_t value);
  public:

  // optional fixed64 steamidhost = 10;
  bool has_steamidhost() const;
  private:
  bool _internal_has_steamidhost() const;
  public:
  void clear_steamidhost();
  uint64_t steamidhost() const;
  void set_steamidhost(uint64_t value);
  private:
  uint64_t _internal_steamidhost() const;
  void _internal_set_steamidhost(uint64_t value);
  public:

  // optional uint32 rtime_match_made = 11;
  bool has_rtime_match_made() const;
  private:
  bool _internal_has_rtime_match_made() const;
  public:
  void clear_rtime_match_made();
  uint32_t rtime_match_made() const;
  void set_rtime_match_made(uint32_t value);
  private:
  uint32_t _internal_rtime_match_made() const;
  void _internal_set_rtime_match_made(uint32_t value);
  public:

  // optional uint32 rtime_now = 12;
  bool has_rtime_now() const;
  private:
  bool _internal_has_rtime_now() const;
  public:
  void clear_rtime_now();
  uint32_t rtime_now() const;
  void set_rtime_now(uint32_t value);
  private:
  uint32_t _internal_rtime_now() const;
  void _internal_set_rtime_now(uint32_t value);
  public:

  // optional fixed64 steamid_canceled_search = 13;
  bool has_steamid_canceled_search() const;
  private:
  bool _internal_has_steamid_canceled_search() const;
  public:
  void clear_steamid_canceled_search();
  uint64_t steamid_canceled_search() const;
  void set_steamid_canceled_search(uint64_t value);
  private:
  uint64_t _internal_steamid_canceled_search() const;
  void _internal_set_steamid_canceled_search(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQueuedMatchmaking_SearchForGame_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connect_string_;
  uint64_t searchid_;
  int gamesearchresult_;
  uint32_t seconds_time_estimate_;
  uint32_t poll_frequency_;
  uint32_t count_searching_;
  uint32_t players_in_match_;
  uint32_t players_accepted_;
  uint64_t steamidhost_;
  uint32_t rtime_match_made_;
  uint32_t rtime_now_;
  uint64_t steamid_canceled_search_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmakingGameHost_SearchForPlayers_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQueuedMatchmakingGameHost_SearchForPlayers_Request) */ {
 public:
  inline CQueuedMatchmakingGameHost_SearchForPlayers_Request() : CQueuedMatchmakingGameHost_SearchForPlayers_Request(nullptr) {}
  ~CQueuedMatchmakingGameHost_SearchForPlayers_Request() override;
  explicit constexpr CQueuedMatchmakingGameHost_SearchForPlayers_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmakingGameHost_SearchForPlayers_Request(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from);
  CQueuedMatchmakingGameHost_SearchForPlayers_Request(CQueuedMatchmakingGameHost_SearchForPlayers_Request&& from) noexcept
    : CQueuedMatchmakingGameHost_SearchForPlayers_Request() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmakingGameHost_SearchForPlayers_Request& operator=(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmakingGameHost_SearchForPlayers_Request& operator=(CQueuedMatchmakingGameHost_SearchForPlayers_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmakingGameHost_SearchForPlayers_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmakingGameHost_SearchForPlayers_Request* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmakingGameHost_SearchForPlayers_Request*>(
               &_CQueuedMatchmakingGameHost_SearchForPlayers_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CQueuedMatchmakingGameHost_SearchForPlayers_Request& a, CQueuedMatchmakingGameHost_SearchForPlayers_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmakingGameHost_SearchForPlayers_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmakingGameHost_SearchForPlayers_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmakingGameHost_SearchForPlayers_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmakingGameHost_SearchForPlayers_Request";
  }
  protected:
  explicit CQueuedMatchmakingGameHost_SearchForPlayers_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kConnectionStringFieldNumber = 7,
    kAppidFieldNumber = 1,
    kActionFieldNumber = 2,
    kPlayerMinFieldNumber = 4,
    kPlayerMaxFieldNumber = 5,
    kSearchidFieldNumber = 8,
    kPlayerMaxTeamSizeFieldNumber = 6,
  };
  // repeated .GameSearchParam params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::GameSearchParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >*
      mutable_params();
  private:
  const ::GameSearchParam& _internal_params(int index) const;
  ::GameSearchParam* _internal_add_params();
  public:
  const ::GameSearchParam& params(int index) const;
  ::GameSearchParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >&
      params() const;

  // optional string connection_string = 7;
  bool has_connection_string() const;
  private:
  bool _internal_has_connection_string() const;
  public:
  void clear_connection_string();
  const std::string& connection_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connection_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connection_string();
  PROTOBUF_NODISCARD std::string* release_connection_string();
  void set_allocated_connection_string(std::string* connection_string);
  private:
  const std::string& _internal_connection_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_string(const std::string& value);
  std::string* _internal_mutable_connection_string();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional .EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::EGameSearchAction action() const;
  void set_action(::EGameSearchAction value);
  private:
  ::EGameSearchAction _internal_action() const;
  void _internal_set_action(::EGameSearchAction value);
  public:

  // optional uint32 player_min = 4;
  bool has_player_min() const;
  private:
  bool _internal_has_player_min() const;
  public:
  void clear_player_min();
  uint32_t player_min() const;
  void set_player_min(uint32_t value);
  private:
  uint32_t _internal_player_min() const;
  void _internal_set_player_min(uint32_t value);
  public:

  // optional uint32 player_max = 5;
  bool has_player_max() const;
  private:
  bool _internal_has_player_max() const;
  public:
  void clear_player_max();
  uint32_t player_max() const;
  void set_player_max(uint32_t value);
  private:
  uint32_t _internal_player_max() const;
  void _internal_set_player_max(uint32_t value);
  public:

  // optional uint64 searchid = 8;
  bool has_searchid() const;
  private:
  bool _internal_has_searchid() const;
  public:
  void clear_searchid();
  uint64_t searchid() const;
  void set_searchid(uint64_t value);
  private:
  uint64_t _internal_searchid() const;
  void _internal_set_searchid(uint64_t value);
  public:

  // optional uint32 player_max_team_size = 6;
  bool has_player_max_team_size() const;
  private:
  bool _internal_has_player_max_team_size() const;
  public:
  void clear_player_max_team_size();
  uint32_t player_max_team_size() const;
  void set_player_max_team_size(uint32_t value);
  private:
  uint32_t _internal_player_max_team_size() const;
  void _internal_set_player_max_team_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQueuedMatchmakingGameHost_SearchForPlayers_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_string_;
  uint32_t appid_;
  int action_;
  uint32_t player_min_;
  uint32_t player_max_;
  uint64_t searchid_;
  uint32_t player_max_team_size_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PlayerFound final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerFound) */ {
 public:
  inline PlayerFound() : PlayerFound(nullptr) {}
  ~PlayerFound() override;
  explicit constexpr PlayerFound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerFound(const PlayerFound& from);
  PlayerFound(PlayerFound&& from) noexcept
    : PlayerFound() {
    *this = ::std::move(from);
  }

  inline PlayerFound& operator=(const PlayerFound& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerFound& operator=(PlayerFound&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerFound& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerFound* internal_default_instance() {
    return reinterpret_cast<const PlayerFound*>(
               &_PlayerFound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerFound& a, PlayerFound& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerFound* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerFound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerFound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerFound>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerFound& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerFound& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerFound* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerFound";
  }
  protected:
  explicit PlayerFound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kActionFieldNumber = 2,
    kTeamNumberFieldNumber = 4,
  };
  // repeated .GameSearchParam params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::GameSearchParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >*
      mutable_params();
  private:
  const ::GameSearchParam& _internal_params(int index) const;
  ::GameSearchParam* _internal_add_params();
  public:
  const ::GameSearchParam& params(int index) const;
  ::GameSearchParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >&
      params() const;

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional .EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::EGameSearchAction action() const;
  void set_action(::EGameSearchAction value);
  private:
  ::EGameSearchAction _internal_action() const;
  void _internal_set_action(::EGameSearchAction value);
  public:

  // optional uint32 team_number = 4;
  bool has_team_number() const;
  private:
  bool _internal_has_team_number() const;
  public:
  void clear_team_number();
  uint32_t team_number() const;
  void set_team_number(uint32_t value);
  private:
  uint32_t _internal_team_number() const;
  void _internal_set_team_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerFound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam > params_;
  uint64_t steamid_;
  int action_;
  uint32_t team_number_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmakingGameHost_SearchForPlayers_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQueuedMatchmakingGameHost_SearchForPlayers_Response) */ {
 public:
  inline CQueuedMatchmakingGameHost_SearchForPlayers_Response() : CQueuedMatchmakingGameHost_SearchForPlayers_Response(nullptr) {}
  ~CQueuedMatchmakingGameHost_SearchForPlayers_Response() override;
  explicit constexpr CQueuedMatchmakingGameHost_SearchForPlayers_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmakingGameHost_SearchForPlayers_Response(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from);
  CQueuedMatchmakingGameHost_SearchForPlayers_Response(CQueuedMatchmakingGameHost_SearchForPlayers_Response&& from) noexcept
    : CQueuedMatchmakingGameHost_SearchForPlayers_Response() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmakingGameHost_SearchForPlayers_Response& operator=(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmakingGameHost_SearchForPlayers_Response& operator=(CQueuedMatchmakingGameHost_SearchForPlayers_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmakingGameHost_SearchForPlayers_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmakingGameHost_SearchForPlayers_Response* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmakingGameHost_SearchForPlayers_Response*>(
               &_CQueuedMatchmakingGameHost_SearchForPlayers_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CQueuedMatchmakingGameHost_SearchForPlayers_Response& a, CQueuedMatchmakingGameHost_SearchForPlayers_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmakingGameHost_SearchForPlayers_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmakingGameHost_SearchForPlayers_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmakingGameHost_SearchForPlayers_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CQueuedMatchmakingGameHost_SearchForPlayers_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQueuedMatchmakingGameHost_SearchForPlayers_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmakingGameHost_SearchForPlayers_Response";
  }
  protected:
  explicit CQueuedMatchmakingGameHost_SearchForPlayers_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 5,
    kSearchidFieldNumber = 2,
    kGamesearchresultFieldNumber = 1,
    kPollFrequencyFieldNumber = 3,
    kMatchidFieldNumber = 4,
    kRtimeMatchMadeFieldNumber = 6,
    kRtimeNowFieldNumber = 7,
  };
  // repeated .PlayerFound players = 5;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::PlayerFound* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerFound >*
      mutable_players();
  private:
  const ::PlayerFound& _internal_players(int index) const;
  ::PlayerFound* _internal_add_players();
  public:
  const ::PlayerFound& players(int index) const;
  ::PlayerFound* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerFound >&
      players() const;

  // optional uint64 searchid = 2;
  bool has_searchid() const;
  private:
  bool _internal_has_searchid() const;
  public:
  void clear_searchid();
  uint64_t searchid() const;
  void set_searchid(uint64_t value);
  private:
  uint64_t _internal_searchid() const;
  void _internal_set_searchid(uint64_t value);
  public:

  // optional .EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
  bool has_gamesearchresult() const;
  private:
  bool _internal_has_gamesearchresult() const;
  public:
  void clear_gamesearchresult();
  ::EGameSearchResult gamesearchresult() const;
  void set_gamesearchresult(::EGameSearchResult value);
  private:
  ::EGameSearchResult _internal_gamesearchresult() const;
  void _internal_set_gamesearchresult(::EGameSearchResult value);
  public:

  // optional uint32 poll_frequency = 3;
  bool has_poll_frequency() const;
  private:
  bool _internal_has_poll_frequency() const;
  public:
  void clear_poll_frequency();
  uint32_t poll_frequency() const;
  void set_poll_frequency(uint32_t value);
  private:
  uint32_t _internal_poll_frequency() const;
  void _internal_set_poll_frequency(uint32_t value);
  public:

  // optional uint64 matchid = 4;
  bool has_matchid() const;
  private:
  bool _internal_has_matchid() const;
  public:
  void clear_matchid();
  uint64_t matchid() const;
  void set_matchid(uint64_t value);
  private:
  uint64_t _internal_matchid() const;
  void _internal_set_matchid(uint64_t value);
  public:

  // optional uint32 rtime_match_made = 6;
  bool has_rtime_match_made() const;
  private:
  bool _internal_has_rtime_match_made() const;
  public:
  void clear_rtime_match_made();
  uint32_t rtime_match_made() const;
  void set_rtime_match_made(uint32_t value);
  private:
  uint32_t _internal_rtime_match_made() const;
  void _internal_set_rtime_match_made(uint32_t value);
  public:

  // optional uint32 rtime_now = 7;
  bool has_rtime_now() const;
  private:
  bool _internal_has_rtime_now() const;
  public:
  void clear_rtime_now();
  uint32_t rtime_now() const;
  void set_rtime_now(uint32_t value);
  private:
  uint32_t _internal_rtime_now() const;
  void _internal_set_rtime_now(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQueuedMatchmakingGameHost_SearchForPlayers_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerFound > players_;
  uint64_t searchid_;
  int gamesearchresult_;
  uint32_t poll_frequency_;
  uint64_t matchid_;
  uint32_t rtime_match_made_;
  uint32_t rtime_now_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class PlayerResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerResult) */ {
 public:
  inline PlayerResult() : PlayerResult(nullptr) {}
  ~PlayerResult() override;
  explicit constexpr PlayerResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerResult(const PlayerResult& from);
  PlayerResult(PlayerResult&& from) noexcept
    : PlayerResult() {
    *this = ::std::move(from);
  }

  inline PlayerResult& operator=(const PlayerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerResult& operator=(PlayerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerResult* internal_default_instance() {
    return reinterpret_cast<const PlayerResult*>(
               &_PlayerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerResult& a, PlayerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerResult";
  }
  protected:
  explicit PlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t value_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmakingGameHost_SubmitPlayerResult_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) */ {
 public:
  inline CQueuedMatchmakingGameHost_SubmitPlayerResult_Request() : CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(nullptr) {}
  ~CQueuedMatchmakingGameHost_SubmitPlayerResult_Request() override;
  explicit constexpr CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from);
  CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request&& from) noexcept
    : CQueuedMatchmakingGameHost_SubmitPlayerResult_Request() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& operator=(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& operator=(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request*>(
               &_CQueuedMatchmakingGameHost_SubmitPlayerResult_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& a, CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmakingGameHost_SubmitPlayerResult_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmakingGameHost_SubmitPlayerResult_Request";
  }
  protected:
  explicit CQueuedMatchmakingGameHost_SubmitPlayerResult_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerResultsFieldNumber = 3,
    kMatchidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // repeated .PlayerResult player_results = 3;
  int player_results_size() const;
  private:
  int _internal_player_results_size() const;
  public:
  void clear_player_results();
  ::PlayerResult* mutable_player_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerResult >*
      mutable_player_results();
  private:
  const ::PlayerResult& _internal_player_results(int index) const;
  ::PlayerResult* _internal_add_player_results();
  public:
  const ::PlayerResult& player_results(int index) const;
  ::PlayerResult* add_player_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerResult >&
      player_results() const;

  // optional uint64 matchid = 2;
  bool has_matchid() const;
  private:
  bool _internal_has_matchid() const;
  public:
  void clear_matchid();
  uint64_t matchid() const;
  void set_matchid(uint64_t value);
  private:
  uint64_t _internal_matchid() const;
  void _internal_set_matchid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerResult > player_results_;
  uint64_t matchid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmakingGameHost_SubmitPlayerResult_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) */ {
 public:
  inline CQueuedMatchmakingGameHost_SubmitPlayerResult_Response() : CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(nullptr) {}
  explicit constexpr CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from);
  CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response&& from) noexcept
    : CQueuedMatchmakingGameHost_SubmitPlayerResult_Response() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& operator=(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& operator=(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response*>(
               &_CQueuedMatchmakingGameHost_SubmitPlayerResult_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& a, CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmakingGameHost_SubmitPlayerResult_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CQueuedMatchmakingGameHost_SubmitPlayerResult_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmakingGameHost_SubmitPlayerResult_Response";
  }
  protected:
  explicit CQueuedMatchmakingGameHost_SubmitPlayerResult_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmakingGameHost_EndGame_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQueuedMatchmakingGameHost_EndGame_Request) */ {
 public:
  inline CQueuedMatchmakingGameHost_EndGame_Request() : CQueuedMatchmakingGameHost_EndGame_Request(nullptr) {}
  ~CQueuedMatchmakingGameHost_EndGame_Request() override;
  explicit constexpr CQueuedMatchmakingGameHost_EndGame_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmakingGameHost_EndGame_Request(const CQueuedMatchmakingGameHost_EndGame_Request& from);
  CQueuedMatchmakingGameHost_EndGame_Request(CQueuedMatchmakingGameHost_EndGame_Request&& from) noexcept
    : CQueuedMatchmakingGameHost_EndGame_Request() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmakingGameHost_EndGame_Request& operator=(const CQueuedMatchmakingGameHost_EndGame_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmakingGameHost_EndGame_Request& operator=(CQueuedMatchmakingGameHost_EndGame_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmakingGameHost_EndGame_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmakingGameHost_EndGame_Request* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmakingGameHost_EndGame_Request*>(
               &_CQueuedMatchmakingGameHost_EndGame_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CQueuedMatchmakingGameHost_EndGame_Request& a, CQueuedMatchmakingGameHost_EndGame_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmakingGameHost_EndGame_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmakingGameHost_EndGame_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmakingGameHost_EndGame_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmakingGameHost_EndGame_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQueuedMatchmakingGameHost_EndGame_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CQueuedMatchmakingGameHost_EndGame_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQueuedMatchmakingGameHost_EndGame_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmakingGameHost_EndGame_Request";
  }
  protected:
  explicit CQueuedMatchmakingGameHost_EndGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 matchid = 2;
  bool has_matchid() const;
  private:
  bool _internal_has_matchid() const;
  public:
  void clear_matchid();
  uint64_t matchid() const;
  void set_matchid(uint64_t value);
  private:
  uint64_t _internal_matchid() const;
  void _internal_set_matchid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQueuedMatchmakingGameHost_EndGame_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t matchid_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CQueuedMatchmakingGameHost_EndGame_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CQueuedMatchmakingGameHost_EndGame_Response) */ {
 public:
  inline CQueuedMatchmakingGameHost_EndGame_Response() : CQueuedMatchmakingGameHost_EndGame_Response(nullptr) {}
  explicit constexpr CQueuedMatchmakingGameHost_EndGame_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQueuedMatchmakingGameHost_EndGame_Response(const CQueuedMatchmakingGameHost_EndGame_Response& from);
  CQueuedMatchmakingGameHost_EndGame_Response(CQueuedMatchmakingGameHost_EndGame_Response&& from) noexcept
    : CQueuedMatchmakingGameHost_EndGame_Response() {
    *this = ::std::move(from);
  }

  inline CQueuedMatchmakingGameHost_EndGame_Response& operator=(const CQueuedMatchmakingGameHost_EndGame_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQueuedMatchmakingGameHost_EndGame_Response& operator=(CQueuedMatchmakingGameHost_EndGame_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQueuedMatchmakingGameHost_EndGame_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQueuedMatchmakingGameHost_EndGame_Response* internal_default_instance() {
    return reinterpret_cast<const CQueuedMatchmakingGameHost_EndGame_Response*>(
               &_CQueuedMatchmakingGameHost_EndGame_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CQueuedMatchmakingGameHost_EndGame_Response& a, CQueuedMatchmakingGameHost_EndGame_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CQueuedMatchmakingGameHost_EndGame_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQueuedMatchmakingGameHost_EndGame_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQueuedMatchmakingGameHost_EndGame_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQueuedMatchmakingGameHost_EndGame_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CQueuedMatchmakingGameHost_EndGame_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CQueuedMatchmakingGameHost_EndGame_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQueuedMatchmakingGameHost_EndGame_Response";
  }
  protected:
  explicit CQueuedMatchmakingGameHost_EndGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CQueuedMatchmakingGameHost_EndGame_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fqms_2esteamclient_2eproto;
};
// ===================================================================

class QueuedMatchmaking_Stub;

class QueuedMatchmaking : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline QueuedMatchmaking() {};
 public:
  virtual ~QueuedMatchmaking();

  typedef QueuedMatchmaking_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SearchForGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmaking_SearchForGame_Request* request,
                       ::CQueuedMatchmaking_SearchForGame_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueuedMatchmaking);
};

class QueuedMatchmaking_Stub : public QueuedMatchmaking {
 public:
  QueuedMatchmaking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  QueuedMatchmaking_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~QueuedMatchmaking_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements QueuedMatchmaking ------------------------------------------

  void SearchForGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmaking_SearchForGame_Request* request,
                       ::CQueuedMatchmaking_SearchForGame_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueuedMatchmaking_Stub);
};


// -------------------------------------------------------------------

class QueuedMatchmakingGameHost_Stub;

class QueuedMatchmakingGameHost : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline QueuedMatchmakingGameHost() {};
 public:
  virtual ~QueuedMatchmakingGameHost();

  typedef QueuedMatchmakingGameHost_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SearchForPlayers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmakingGameHost_SearchForPlayers_Request* request,
                       ::CQueuedMatchmakingGameHost_SearchForPlayers_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SubmitPlayerResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* request,
                       ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EndGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmakingGameHost_EndGame_Request* request,
                       ::CQueuedMatchmakingGameHost_EndGame_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueuedMatchmakingGameHost);
};

class QueuedMatchmakingGameHost_Stub : public QueuedMatchmakingGameHost {
 public:
  QueuedMatchmakingGameHost_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  QueuedMatchmakingGameHost_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~QueuedMatchmakingGameHost_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements QueuedMatchmakingGameHost ------------------------------------------

  void SearchForPlayers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmakingGameHost_SearchForPlayers_Request* request,
                       ::CQueuedMatchmakingGameHost_SearchForPlayers_Response* response,
                       ::google::protobuf::Closure* done);
  void SubmitPlayerResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Request* request,
                       ::CQueuedMatchmakingGameHost_SubmitPlayerResult_Response* response,
                       ::google::protobuf::Closure* done);
  void EndGame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CQueuedMatchmakingGameHost_EndGame_Request* request,
                       ::CQueuedMatchmakingGameHost_EndGame_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(QueuedMatchmakingGameHost_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameSearchParam

// optional string key_name = 1;
inline bool GameSearchParam::_internal_has_key_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameSearchParam::has_key_name() const {
  return _internal_has_key_name();
}
inline void GameSearchParam::clear_key_name() {
  key_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameSearchParam::key_name() const {
  // @@protoc_insertion_point(field_get:GameSearchParam.key_name)
  return _internal_key_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameSearchParam::set_key_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameSearchParam.key_name)
}
inline std::string* GameSearchParam::mutable_key_name() {
  std::string* _s = _internal_mutable_key_name();
  // @@protoc_insertion_point(field_mutable:GameSearchParam.key_name)
  return _s;
}
inline const std::string& GameSearchParam::_internal_key_name() const {
  return key_name_.Get();
}
inline void GameSearchParam::_internal_set_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameSearchParam::_internal_mutable_key_name() {
  _has_bits_[0] |= 0x00000001u;
  return key_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameSearchParam::release_key_name() {
  // @@protoc_insertion_point(field_release:GameSearchParam.key_name)
  if (!_internal_has_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameSearchParam::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameSearchParam.key_name)
}

// repeated string value = 2;
inline int GameSearchParam::_internal_value_size() const {
  return value_.size();
}
inline int GameSearchParam::value_size() const {
  return _internal_value_size();
}
inline void GameSearchParam::clear_value() {
  value_.Clear();
}
inline std::string* GameSearchParam::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:GameSearchParam.value)
  return _s;
}
inline const std::string& GameSearchParam::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& GameSearchParam::value(int index) const {
  // @@protoc_insertion_point(field_get:GameSearchParam.value)
  return _internal_value(index);
}
inline std::string* GameSearchParam::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:GameSearchParam.value)
  return value_.Mutable(index);
}
inline void GameSearchParam::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GameSearchParam.value)
}
inline void GameSearchParam::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GameSearchParam.value)
}
inline void GameSearchParam::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GameSearchParam.value)
}
inline void GameSearchParam::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GameSearchParam.value)
}
inline std::string* GameSearchParam::_internal_add_value() {
  return value_.Add();
}
inline void GameSearchParam::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GameSearchParam.value)
}
inline void GameSearchParam::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GameSearchParam.value)
}
inline void GameSearchParam::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GameSearchParam.value)
}
inline void GameSearchParam::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GameSearchParam.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameSearchParam::value() const {
  // @@protoc_insertion_point(field_list:GameSearchParam.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GameSearchParam::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:GameSearchParam.value)
  return &value_;
}

// -------------------------------------------------------------------

// CQueuedMatchmaking_SearchForGame_Request

// optional uint32 appid = 1;
inline bool CQueuedMatchmaking_SearchForGame_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CQueuedMatchmaking_SearchForGame_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Request::appid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Request.appid)
  return _internal_appid();
}
inline void CQueuedMatchmaking_SearchForGame_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Request.appid)
}

// optional .EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
inline bool CQueuedMatchmaking_SearchForGame_Request::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Request::has_action() const {
  return _internal_has_action();
}
inline void CQueuedMatchmaking_SearchForGame_Request::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EGameSearchAction CQueuedMatchmaking_SearchForGame_Request::_internal_action() const {
  return static_cast< ::EGameSearchAction >(action_);
}
inline ::EGameSearchAction CQueuedMatchmaking_SearchForGame_Request::action() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Request.action)
  return _internal_action();
}
inline void CQueuedMatchmaking_SearchForGame_Request::_internal_set_action(::EGameSearchAction value) {
  assert(::EGameSearchAction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Request::set_action(::EGameSearchAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Request.action)
}

// repeated .GameSearchParam params = 3;
inline int CQueuedMatchmaking_SearchForGame_Request::_internal_params_size() const {
  return params_.size();
}
inline int CQueuedMatchmaking_SearchForGame_Request::params_size() const {
  return _internal_params_size();
}
inline void CQueuedMatchmaking_SearchForGame_Request::clear_params() {
  params_.Clear();
}
inline ::GameSearchParam* CQueuedMatchmaking_SearchForGame_Request::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:CQueuedMatchmaking_SearchForGame_Request.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >*
CQueuedMatchmaking_SearchForGame_Request::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:CQueuedMatchmaking_SearchForGame_Request.params)
  return &params_;
}
inline const ::GameSearchParam& CQueuedMatchmaking_SearchForGame_Request::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::GameSearchParam& CQueuedMatchmaking_SearchForGame_Request::params(int index) const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Request.params)
  return _internal_params(index);
}
inline ::GameSearchParam* CQueuedMatchmaking_SearchForGame_Request::_internal_add_params() {
  return params_.Add();
}
inline ::GameSearchParam* CQueuedMatchmaking_SearchForGame_Request::add_params() {
  ::GameSearchParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:CQueuedMatchmaking_SearchForGame_Request.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >&
CQueuedMatchmaking_SearchForGame_Request::params() const {
  // @@protoc_insertion_point(field_list:CQueuedMatchmaking_SearchForGame_Request.params)
  return params_;
}

// optional uint32 player_min = 4;
inline bool CQueuedMatchmaking_SearchForGame_Request::_internal_has_player_min() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Request::has_player_min() const {
  return _internal_has_player_min();
}
inline void CQueuedMatchmaking_SearchForGame_Request::clear_player_min() {
  player_min_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Request::_internal_player_min() const {
  return player_min_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Request::player_min() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Request.player_min)
  return _internal_player_min();
}
inline void CQueuedMatchmaking_SearchForGame_Request::_internal_set_player_min(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  player_min_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Request::set_player_min(uint32_t value) {
  _internal_set_player_min(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Request.player_min)
}

// optional uint32 player_max = 5;
inline bool CQueuedMatchmaking_SearchForGame_Request::_internal_has_player_max() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Request::has_player_max() const {
  return _internal_has_player_max();
}
inline void CQueuedMatchmaking_SearchForGame_Request::clear_player_max() {
  player_max_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Request::_internal_player_max() const {
  return player_max_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Request::player_max() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Request.player_max)
  return _internal_player_max();
}
inline void CQueuedMatchmaking_SearchForGame_Request::_internal_set_player_max(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  player_max_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Request::set_player_max(uint32_t value) {
  _internal_set_player_max(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Request.player_max)
}

// optional fixed64 steamidlobby = 6;
inline bool CQueuedMatchmaking_SearchForGame_Request::_internal_has_steamidlobby() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Request::has_steamidlobby() const {
  return _internal_has_steamidlobby();
}
inline void CQueuedMatchmaking_SearchForGame_Request::clear_steamidlobby() {
  steamidlobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Request::_internal_steamidlobby() const {
  return steamidlobby_;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Request::steamidlobby() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Request.steamidlobby)
  return _internal_steamidlobby();
}
inline void CQueuedMatchmaking_SearchForGame_Request::_internal_set_steamidlobby(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  steamidlobby_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Request::set_steamidlobby(uint64_t value) {
  _internal_set_steamidlobby(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Request.steamidlobby)
}

// optional uint64 searchid = 7;
inline bool CQueuedMatchmaking_SearchForGame_Request::_internal_has_searchid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Request::has_searchid() const {
  return _internal_has_searchid();
}
inline void CQueuedMatchmaking_SearchForGame_Request::clear_searchid() {
  searchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Request::_internal_searchid() const {
  return searchid_;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Request::searchid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Request.searchid)
  return _internal_searchid();
}
inline void CQueuedMatchmaking_SearchForGame_Request::_internal_set_searchid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  searchid_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Request::set_searchid(uint64_t value) {
  _internal_set_searchid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Request.searchid)
}

// -------------------------------------------------------------------

// CQueuedMatchmaking_SearchForGame_Response

// optional .EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_gamesearchresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_gamesearchresult() const {
  return _internal_has_gamesearchresult();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_gamesearchresult() {
  gamesearchresult_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EGameSearchResult CQueuedMatchmaking_SearchForGame_Response::_internal_gamesearchresult() const {
  return static_cast< ::EGameSearchResult >(gamesearchresult_);
}
inline ::EGameSearchResult CQueuedMatchmaking_SearchForGame_Response::gamesearchresult() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.gamesearchresult)
  return _internal_gamesearchresult();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_gamesearchresult(::EGameSearchResult value) {
  assert(::EGameSearchResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  gamesearchresult_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_gamesearchresult(::EGameSearchResult value) {
  _internal_set_gamesearchresult(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.gamesearchresult)
}

// optional uint64 searchid = 2;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_searchid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_searchid() const {
  return _internal_has_searchid();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_searchid() {
  searchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Response::_internal_searchid() const {
  return searchid_;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Response::searchid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.searchid)
  return _internal_searchid();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_searchid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  searchid_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_searchid(uint64_t value) {
  _internal_set_searchid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.searchid)
}

// optional uint32 seconds_time_estimate = 3;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_seconds_time_estimate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_seconds_time_estimate() const {
  return _internal_has_seconds_time_estimate();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_seconds_time_estimate() {
  seconds_time_estimate_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::_internal_seconds_time_estimate() const {
  return seconds_time_estimate_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::seconds_time_estimate() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.seconds_time_estimate)
  return _internal_seconds_time_estimate();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_seconds_time_estimate(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  seconds_time_estimate_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_seconds_time_estimate(uint32_t value) {
  _internal_set_seconds_time_estimate(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.seconds_time_estimate)
}

// optional uint32 poll_frequency = 4;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_poll_frequency() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_poll_frequency() const {
  return _internal_has_poll_frequency();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_poll_frequency() {
  poll_frequency_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::_internal_poll_frequency() const {
  return poll_frequency_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::poll_frequency() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.poll_frequency)
  return _internal_poll_frequency();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_poll_frequency(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  poll_frequency_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_poll_frequency(uint32_t value) {
  _internal_set_poll_frequency(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.poll_frequency)
}

// optional uint32 count_searching = 5;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_count_searching() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_count_searching() const {
  return _internal_has_count_searching();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_count_searching() {
  count_searching_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::_internal_count_searching() const {
  return count_searching_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::count_searching() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.count_searching)
  return _internal_count_searching();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_count_searching(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  count_searching_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_count_searching(uint32_t value) {
  _internal_set_count_searching(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.count_searching)
}

// optional uint32 players_in_match = 6;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_players_in_match() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_players_in_match() const {
  return _internal_has_players_in_match();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_players_in_match() {
  players_in_match_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::_internal_players_in_match() const {
  return players_in_match_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::players_in_match() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.players_in_match)
  return _internal_players_in_match();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_players_in_match(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  players_in_match_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_players_in_match(uint32_t value) {
  _internal_set_players_in_match(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.players_in_match)
}

// optional uint32 players_accepted = 7;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_players_accepted() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_players_accepted() const {
  return _internal_has_players_accepted();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_players_accepted() {
  players_accepted_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::_internal_players_accepted() const {
  return players_accepted_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::players_accepted() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.players_accepted)
  return _internal_players_accepted();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_players_accepted(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  players_accepted_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_players_accepted(uint32_t value) {
  _internal_set_players_accepted(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.players_accepted)
}

// optional string connect_string = 9;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_connect_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_connect_string() const {
  return _internal_has_connect_string();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_connect_string() {
  connect_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CQueuedMatchmaking_SearchForGame_Response::connect_string() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.connect_string)
  return _internal_connect_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CQueuedMatchmaking_SearchForGame_Response::set_connect_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.connect_string)
}
inline std::string* CQueuedMatchmaking_SearchForGame_Response::mutable_connect_string() {
  std::string* _s = _internal_mutable_connect_string();
  // @@protoc_insertion_point(field_mutable:CQueuedMatchmaking_SearchForGame_Response.connect_string)
  return _s;
}
inline const std::string& CQueuedMatchmaking_SearchForGame_Response::_internal_connect_string() const {
  return connect_string_.Get();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_connect_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CQueuedMatchmaking_SearchForGame_Response::_internal_mutable_connect_string() {
  _has_bits_[0] |= 0x00000001u;
  return connect_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CQueuedMatchmaking_SearchForGame_Response::release_connect_string() {
  // @@protoc_insertion_point(field_release:CQueuedMatchmaking_SearchForGame_Response.connect_string)
  if (!_internal_has_connect_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connect_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_allocated_connect_string(std::string* connect_string) {
  if (connect_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connect_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connect_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CQueuedMatchmaking_SearchForGame_Response.connect_string)
}

// optional fixed64 steamidhost = 10;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_steamidhost() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_steamidhost() const {
  return _internal_has_steamidhost();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_steamidhost() {
  steamidhost_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Response::_internal_steamidhost() const {
  return steamidhost_;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Response::steamidhost() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.steamidhost)
  return _internal_steamidhost();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_steamidhost(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  steamidhost_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_steamidhost(uint64_t value) {
  _internal_set_steamidhost(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.steamidhost)
}

// optional uint32 rtime_match_made = 11;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_rtime_match_made() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_rtime_match_made() const {
  return _internal_has_rtime_match_made();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_rtime_match_made() {
  rtime_match_made_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::_internal_rtime_match_made() const {
  return rtime_match_made_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::rtime_match_made() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.rtime_match_made)
  return _internal_rtime_match_made();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_rtime_match_made(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  rtime_match_made_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_rtime_match_made(uint32_t value) {
  _internal_set_rtime_match_made(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.rtime_match_made)
}

// optional uint32 rtime_now = 12;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_rtime_now() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_rtime_now() const {
  return _internal_has_rtime_now();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_rtime_now() {
  rtime_now_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::_internal_rtime_now() const {
  return rtime_now_;
}
inline uint32_t CQueuedMatchmaking_SearchForGame_Response::rtime_now() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.rtime_now)
  return _internal_rtime_now();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_rtime_now(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  rtime_now_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_rtime_now(uint32_t value) {
  _internal_set_rtime_now(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.rtime_now)
}

// optional fixed64 steamid_canceled_search = 13;
inline bool CQueuedMatchmaking_SearchForGame_Response::_internal_has_steamid_canceled_search() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CQueuedMatchmaking_SearchForGame_Response::has_steamid_canceled_search() const {
  return _internal_has_steamid_canceled_search();
}
inline void CQueuedMatchmaking_SearchForGame_Response::clear_steamid_canceled_search() {
  steamid_canceled_search_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Response::_internal_steamid_canceled_search() const {
  return steamid_canceled_search_;
}
inline uint64_t CQueuedMatchmaking_SearchForGame_Response::steamid_canceled_search() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmaking_SearchForGame_Response.steamid_canceled_search)
  return _internal_steamid_canceled_search();
}
inline void CQueuedMatchmaking_SearchForGame_Response::_internal_set_steamid_canceled_search(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  steamid_canceled_search_ = value;
}
inline void CQueuedMatchmaking_SearchForGame_Response::set_steamid_canceled_search(uint64_t value) {
  _internal_set_steamid_canceled_search(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmaking_SearchForGame_Response.steamid_canceled_search)
}

// -------------------------------------------------------------------

// CQueuedMatchmakingGameHost_SearchForPlayers_Request

// optional uint32 appid = 1;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::appid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.appid)
  return _internal_appid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Request.appid)
}

// optional .EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::has_action() const {
  return _internal_has_action();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EGameSearchAction CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_action() const {
  return static_cast< ::EGameSearchAction >(action_);
}
inline ::EGameSearchAction CQueuedMatchmakingGameHost_SearchForPlayers_Request::action() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.action)
  return _internal_action();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_set_action(::EGameSearchAction value) {
  assert(::EGameSearchAction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_action(::EGameSearchAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Request.action)
}

// repeated .GameSearchParam params = 3;
inline int CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_params_size() const {
  return params_.size();
}
inline int CQueuedMatchmakingGameHost_SearchForPlayers_Request::params_size() const {
  return _internal_params_size();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_params() {
  params_.Clear();
}
inline ::GameSearchParam* CQueuedMatchmakingGameHost_SearchForPlayers_Request::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:CQueuedMatchmakingGameHost_SearchForPlayers_Request.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >*
CQueuedMatchmakingGameHost_SearchForPlayers_Request::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:CQueuedMatchmakingGameHost_SearchForPlayers_Request.params)
  return &params_;
}
inline const ::GameSearchParam& CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::GameSearchParam& CQueuedMatchmakingGameHost_SearchForPlayers_Request::params(int index) const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.params)
  return _internal_params(index);
}
inline ::GameSearchParam* CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_add_params() {
  return params_.Add();
}
inline ::GameSearchParam* CQueuedMatchmakingGameHost_SearchForPlayers_Request::add_params() {
  ::GameSearchParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:CQueuedMatchmakingGameHost_SearchForPlayers_Request.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >&
CQueuedMatchmakingGameHost_SearchForPlayers_Request::params() const {
  // @@protoc_insertion_point(field_list:CQueuedMatchmakingGameHost_SearchForPlayers_Request.params)
  return params_;
}

// optional uint32 player_min = 4;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_has_player_min() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::has_player_min() const {
  return _internal_has_player_min();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_player_min() {
  player_min_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_player_min() const {
  return player_min_;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::player_min() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_min)
  return _internal_player_min();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_set_player_min(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  player_min_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_player_min(uint32_t value) {
  _internal_set_player_min(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_min)
}

// optional uint32 player_max = 5;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_has_player_max() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::has_player_max() const {
  return _internal_has_player_max();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_player_max() {
  player_max_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_player_max() const {
  return player_max_;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::player_max() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_max)
  return _internal_player_max();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_set_player_max(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  player_max_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_player_max(uint32_t value) {
  _internal_set_player_max(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_max)
}

// optional uint32 player_max_team_size = 6;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_has_player_max_team_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::has_player_max_team_size() const {
  return _internal_has_player_max_team_size();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_player_max_team_size() {
  player_max_team_size_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_player_max_team_size() const {
  return player_max_team_size_;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::player_max_team_size() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_max_team_size)
  return _internal_player_max_team_size();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_set_player_max_team_size(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  player_max_team_size_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_player_max_team_size(uint32_t value) {
  _internal_set_player_max_team_size(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Request.player_max_team_size)
}

// optional string connection_string = 7;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_has_connection_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::has_connection_string() const {
  return _internal_has_connection_string();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_connection_string() {
  connection_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CQueuedMatchmakingGameHost_SearchForPlayers_Request::connection_string() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string)
  return _internal_connection_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_connection_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connection_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string)
}
inline std::string* CQueuedMatchmakingGameHost_SearchForPlayers_Request::mutable_connection_string() {
  std::string* _s = _internal_mutable_connection_string();
  // @@protoc_insertion_point(field_mutable:CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string)
  return _s;
}
inline const std::string& CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_connection_string() const {
  return connection_string_.Get();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_set_connection_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_mutable_connection_string() {
  _has_bits_[0] |= 0x00000001u;
  return connection_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CQueuedMatchmakingGameHost_SearchForPlayers_Request::release_connection_string() {
  // @@protoc_insertion_point(field_release:CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string)
  if (!_internal_has_connection_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connection_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_allocated_connection_string(std::string* connection_string) {
  if (connection_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connection_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connection_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CQueuedMatchmakingGameHost_SearchForPlayers_Request.connection_string)
}

// optional uint64 searchid = 8;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_has_searchid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Request::has_searchid() const {
  return _internal_has_searchid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::clear_searchid() {
  searchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_searchid() const {
  return searchid_;
}
inline uint64_t CQueuedMatchmakingGameHost_SearchForPlayers_Request::searchid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Request.searchid)
  return _internal_searchid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::_internal_set_searchid(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  searchid_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Request::set_searchid(uint64_t value) {
  _internal_set_searchid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Request.searchid)
}

// -------------------------------------------------------------------

// PlayerFound

// optional fixed64 steamid = 1;
inline bool PlayerFound::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerFound::has_steamid() const {
  return _internal_has_steamid();
}
inline void PlayerFound::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PlayerFound::_internal_steamid() const {
  return steamid_;
}
inline uint64_t PlayerFound::steamid() const {
  // @@protoc_insertion_point(field_get:PlayerFound.steamid)
  return _internal_steamid();
}
inline void PlayerFound::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void PlayerFound::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:PlayerFound.steamid)
}

// optional .EGameSearchAction action = 2 [default = k_EGameSearchAction_None];
inline bool PlayerFound::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerFound::has_action() const {
  return _internal_has_action();
}
inline void PlayerFound::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EGameSearchAction PlayerFound::_internal_action() const {
  return static_cast< ::EGameSearchAction >(action_);
}
inline ::EGameSearchAction PlayerFound::action() const {
  // @@protoc_insertion_point(field_get:PlayerFound.action)
  return _internal_action();
}
inline void PlayerFound::_internal_set_action(::EGameSearchAction value) {
  assert(::EGameSearchAction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  action_ = value;
}
inline void PlayerFound::set_action(::EGameSearchAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:PlayerFound.action)
}

// repeated .GameSearchParam params = 3;
inline int PlayerFound::_internal_params_size() const {
  return params_.size();
}
inline int PlayerFound::params_size() const {
  return _internal_params_size();
}
inline void PlayerFound::clear_params() {
  params_.Clear();
}
inline ::GameSearchParam* PlayerFound::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerFound.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >*
PlayerFound::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:PlayerFound.params)
  return &params_;
}
inline const ::GameSearchParam& PlayerFound::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::GameSearchParam& PlayerFound::params(int index) const {
  // @@protoc_insertion_point(field_get:PlayerFound.params)
  return _internal_params(index);
}
inline ::GameSearchParam* PlayerFound::_internal_add_params() {
  return params_.Add();
}
inline ::GameSearchParam* PlayerFound::add_params() {
  ::GameSearchParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:PlayerFound.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameSearchParam >&
PlayerFound::params() const {
  // @@protoc_insertion_point(field_list:PlayerFound.params)
  return params_;
}

// optional uint32 team_number = 4;
inline bool PlayerFound::_internal_has_team_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerFound::has_team_number() const {
  return _internal_has_team_number();
}
inline void PlayerFound::clear_team_number() {
  team_number_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PlayerFound::_internal_team_number() const {
  return team_number_;
}
inline uint32_t PlayerFound::team_number() const {
  // @@protoc_insertion_point(field_get:PlayerFound.team_number)
  return _internal_team_number();
}
inline void PlayerFound::_internal_set_team_number(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  team_number_ = value;
}
inline void PlayerFound::set_team_number(uint32_t value) {
  _internal_set_team_number(value);
  // @@protoc_insertion_point(field_set:PlayerFound.team_number)
}

// -------------------------------------------------------------------

// CQueuedMatchmakingGameHost_SearchForPlayers_Response

// optional .EGameSearchResult gamesearchresult = 1 [default = k_EGameSearchResult_Invalid];
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_has_gamesearchresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::has_gamesearchresult() const {
  return _internal_has_gamesearchresult();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::clear_gamesearchresult() {
  gamesearchresult_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EGameSearchResult CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_gamesearchresult() const {
  return static_cast< ::EGameSearchResult >(gamesearchresult_);
}
inline ::EGameSearchResult CQueuedMatchmakingGameHost_SearchForPlayers_Response::gamesearchresult() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Response.gamesearchresult)
  return _internal_gamesearchresult();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_set_gamesearchresult(::EGameSearchResult value) {
  assert(::EGameSearchResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  gamesearchresult_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::set_gamesearchresult(::EGameSearchResult value) {
  _internal_set_gamesearchresult(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Response.gamesearchresult)
}

// optional uint64 searchid = 2;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_has_searchid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::has_searchid() const {
  return _internal_has_searchid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::clear_searchid() {
  searchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_searchid() const {
  return searchid_;
}
inline uint64_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::searchid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Response.searchid)
  return _internal_searchid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_set_searchid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  searchid_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::set_searchid(uint64_t value) {
  _internal_set_searchid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Response.searchid)
}

// optional uint32 poll_frequency = 3;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_has_poll_frequency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::has_poll_frequency() const {
  return _internal_has_poll_frequency();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::clear_poll_frequency() {
  poll_frequency_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_poll_frequency() const {
  return poll_frequency_;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::poll_frequency() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Response.poll_frequency)
  return _internal_poll_frequency();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_set_poll_frequency(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  poll_frequency_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::set_poll_frequency(uint32_t value) {
  _internal_set_poll_frequency(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Response.poll_frequency)
}

// optional uint64 matchid = 4;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_has_matchid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::has_matchid() const {
  return _internal_has_matchid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::clear_matchid() {
  matchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_matchid() const {
  return matchid_;
}
inline uint64_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::matchid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Response.matchid)
  return _internal_matchid();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_set_matchid(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  matchid_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::set_matchid(uint64_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Response.matchid)
}

// repeated .PlayerFound players = 5;
inline int CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_players_size() const {
  return players_.size();
}
inline int CQueuedMatchmakingGameHost_SearchForPlayers_Response::players_size() const {
  return _internal_players_size();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::clear_players() {
  players_.Clear();
}
inline ::PlayerFound* CQueuedMatchmakingGameHost_SearchForPlayers_Response::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CQueuedMatchmakingGameHost_SearchForPlayers_Response.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerFound >*
CQueuedMatchmakingGameHost_SearchForPlayers_Response::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CQueuedMatchmakingGameHost_SearchForPlayers_Response.players)
  return &players_;
}
inline const ::PlayerFound& CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::PlayerFound& CQueuedMatchmakingGameHost_SearchForPlayers_Response::players(int index) const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Response.players)
  return _internal_players(index);
}
inline ::PlayerFound* CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_add_players() {
  return players_.Add();
}
inline ::PlayerFound* CQueuedMatchmakingGameHost_SearchForPlayers_Response::add_players() {
  ::PlayerFound* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CQueuedMatchmakingGameHost_SearchForPlayers_Response.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerFound >&
CQueuedMatchmakingGameHost_SearchForPlayers_Response::players() const {
  // @@protoc_insertion_point(field_list:CQueuedMatchmakingGameHost_SearchForPlayers_Response.players)
  return players_;
}

// optional uint32 rtime_match_made = 6;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_has_rtime_match_made() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::has_rtime_match_made() const {
  return _internal_has_rtime_match_made();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::clear_rtime_match_made() {
  rtime_match_made_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_rtime_match_made() const {
  return rtime_match_made_;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::rtime_match_made() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Response.rtime_match_made)
  return _internal_rtime_match_made();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_set_rtime_match_made(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  rtime_match_made_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::set_rtime_match_made(uint32_t value) {
  _internal_set_rtime_match_made(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Response.rtime_match_made)
}

// optional uint32 rtime_now = 7;
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_has_rtime_now() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SearchForPlayers_Response::has_rtime_now() const {
  return _internal_has_rtime_now();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::clear_rtime_now() {
  rtime_now_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_rtime_now() const {
  return rtime_now_;
}
inline uint32_t CQueuedMatchmakingGameHost_SearchForPlayers_Response::rtime_now() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SearchForPlayers_Response.rtime_now)
  return _internal_rtime_now();
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::_internal_set_rtime_now(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  rtime_now_ = value;
}
inline void CQueuedMatchmakingGameHost_SearchForPlayers_Response::set_rtime_now(uint32_t value) {
  _internal_set_rtime_now(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SearchForPlayers_Response.rtime_now)
}

// -------------------------------------------------------------------

// PlayerResult

// optional fixed64 steamid = 1;
inline bool PlayerResult::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerResult::has_steamid() const {
  return _internal_has_steamid();
}
inline void PlayerResult::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PlayerResult::_internal_steamid() const {
  return steamid_;
}
inline uint64_t PlayerResult::steamid() const {
  // @@protoc_insertion_point(field_get:PlayerResult.steamid)
  return _internal_steamid();
}
inline void PlayerResult::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void PlayerResult::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:PlayerResult.steamid)
}

// optional uint32 value = 2;
inline bool PlayerResult::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerResult::has_value() const {
  return _internal_has_value();
}
inline void PlayerResult::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PlayerResult::_internal_value() const {
  return value_;
}
inline uint32_t PlayerResult::value() const {
  // @@protoc_insertion_point(field_get:PlayerResult.value)
  return _internal_value();
}
inline void PlayerResult::_internal_set_value(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void PlayerResult::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PlayerResult.value)
}

// -------------------------------------------------------------------

// CQueuedMatchmakingGameHost_SubmitPlayerResult_Request

// optional uint32 appid = 1;
inline bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::appid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.appid)
  return _internal_appid();
}
inline void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.appid)
}

// optional uint64 matchid = 2;
inline bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_has_matchid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::has_matchid() const {
  return _internal_has_matchid();
}
inline void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::clear_matchid() {
  matchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_matchid() const {
  return matchid_;
}
inline uint64_t CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::matchid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.matchid)
  return _internal_matchid();
}
inline void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_set_matchid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  matchid_ = value;
}
inline void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::set_matchid(uint64_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.matchid)
}

// repeated .PlayerResult player_results = 3;
inline int CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_player_results_size() const {
  return player_results_.size();
}
inline int CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::player_results_size() const {
  return _internal_player_results_size();
}
inline void CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::clear_player_results() {
  player_results_.Clear();
}
inline ::PlayerResult* CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::mutable_player_results(int index) {
  // @@protoc_insertion_point(field_mutable:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results)
  return player_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerResult >*
CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::mutable_player_results() {
  // @@protoc_insertion_point(field_mutable_list:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results)
  return &player_results_;
}
inline const ::PlayerResult& CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_player_results(int index) const {
  return player_results_.Get(index);
}
inline const ::PlayerResult& CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::player_results(int index) const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results)
  return _internal_player_results(index);
}
inline ::PlayerResult* CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::_internal_add_player_results() {
  return player_results_.Add();
}
inline ::PlayerResult* CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::add_player_results() {
  ::PlayerResult* _add = _internal_add_player_results();
  // @@protoc_insertion_point(field_add:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerResult >&
CQueuedMatchmakingGameHost_SubmitPlayerResult_Request::player_results() const {
  // @@protoc_insertion_point(field_list:CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results)
  return player_results_;
}

// -------------------------------------------------------------------

// CQueuedMatchmakingGameHost_SubmitPlayerResult_Response

// -------------------------------------------------------------------

// CQueuedMatchmakingGameHost_EndGame_Request

// optional uint32 appid = 1;
inline bool CQueuedMatchmakingGameHost_EndGame_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_EndGame_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CQueuedMatchmakingGameHost_EndGame_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CQueuedMatchmakingGameHost_EndGame_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CQueuedMatchmakingGameHost_EndGame_Request::appid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_EndGame_Request.appid)
  return _internal_appid();
}
inline void CQueuedMatchmakingGameHost_EndGame_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CQueuedMatchmakingGameHost_EndGame_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_EndGame_Request.appid)
}

// optional uint64 matchid = 2;
inline bool CQueuedMatchmakingGameHost_EndGame_Request::_internal_has_matchid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQueuedMatchmakingGameHost_EndGame_Request::has_matchid() const {
  return _internal_has_matchid();
}
inline void CQueuedMatchmakingGameHost_EndGame_Request::clear_matchid() {
  matchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CQueuedMatchmakingGameHost_EndGame_Request::_internal_matchid() const {
  return matchid_;
}
inline uint64_t CQueuedMatchmakingGameHost_EndGame_Request::matchid() const {
  // @@protoc_insertion_point(field_get:CQueuedMatchmakingGameHost_EndGame_Request.matchid)
  return _internal_matchid();
}
inline void CQueuedMatchmakingGameHost_EndGame_Request::_internal_set_matchid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  matchid_ = value;
}
inline void CQueuedMatchmakingGameHost_EndGame_Request::set_matchid(uint64_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:CQueuedMatchmakingGameHost_EndGame_Request.matchid)
}

// -------------------------------------------------------------------

// CQueuedMatchmakingGameHost_EndGame_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EGameSearchAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGameSearchAction>() {
  return ::EGameSearchAction_descriptor();
}
template <> struct is_proto_enum< ::EGameSearchResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGameSearchResult>() {
  return ::EGameSearchResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fqms_2esteamclient_2eproto
