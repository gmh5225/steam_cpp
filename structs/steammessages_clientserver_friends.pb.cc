// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_friends.proto

#include "steammessages_clientserver_friends.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientFriendMsg::CMsgClientFriendMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , chat_entry_type_(0)
  , rtime32_server_timestamp_(0u)
  , echo_to_sender_(false){}
struct CMsgClientFriendMsgDefaultTypeInternal {
  constexpr CMsgClientFriendMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendMsgDefaultTypeInternal() {}
  union {
    CMsgClientFriendMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendMsgDefaultTypeInternal _CMsgClientFriendMsg_default_instance_;
constexpr CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_from_(uint64_t{0u})
  , chat_entry_type_(0)
  , from_limited_account_(false)
  , rtime32_server_timestamp_(0u){}
struct CMsgClientFriendMsgIncomingDefaultTypeInternal {
  constexpr CMsgClientFriendMsgIncomingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendMsgIncomingDefaultTypeInternal() {}
  union {
    CMsgClientFriendMsgIncoming _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendMsgIncomingDefaultTypeInternal _CMsgClientFriendMsgIncoming_default_instance_;
constexpr CMsgClientAddFriend::CMsgClientAddFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountname_or_email_to_add_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_to_add_(uint64_t{0u}){}
struct CMsgClientAddFriendDefaultTypeInternal {
  constexpr CMsgClientAddFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAddFriendDefaultTypeInternal() {}
  union {
    CMsgClientAddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAddFriendDefaultTypeInternal _CMsgClientAddFriend_default_instance_;
constexpr CMsgClientAddFriendResponse::CMsgClientAddFriendResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_added_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_added_(uint64_t{0u})
  , eresult_(2){}
struct CMsgClientAddFriendResponseDefaultTypeInternal {
  constexpr CMsgClientAddFriendResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAddFriendResponseDefaultTypeInternal() {}
  union {
    CMsgClientAddFriendResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAddFriendResponseDefaultTypeInternal _CMsgClientAddFriendResponse_default_instance_;
constexpr CMsgClientRemoveFriend::CMsgClientRemoveFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friendid_(uint64_t{0u}){}
struct CMsgClientRemoveFriendDefaultTypeInternal {
  constexpr CMsgClientRemoveFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRemoveFriendDefaultTypeInternal() {}
  union {
    CMsgClientRemoveFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRemoveFriendDefaultTypeInternal _CMsgClientRemoveFriend_default_instance_;
constexpr CMsgClientHideFriend::CMsgClientHideFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friendid_(uint64_t{0u})
  , hide_(false){}
struct CMsgClientHideFriendDefaultTypeInternal {
  constexpr CMsgClientHideFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientHideFriendDefaultTypeInternal() {}
  union {
    CMsgClientHideFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientHideFriendDefaultTypeInternal _CMsgClientHideFriend_default_instance_;
constexpr CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ulfriendid_(uint64_t{0u})
  , efriendrelationship_(0u){}
struct CMsgClientFriendsList_FriendDefaultTypeInternal {
  constexpr CMsgClientFriendsList_FriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendsList_FriendDefaultTypeInternal() {}
  union {
    CMsgClientFriendsList_Friend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendsList_FriendDefaultTypeInternal _CMsgClientFriendsList_Friend_default_instance_;
constexpr CMsgClientFriendsList::CMsgClientFriendsList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friends_()
  , max_friend_count_(0u)
  , bincremental_(false)
  , friends_limit_hit_(false)
  , active_friend_count_(0u){}
struct CMsgClientFriendsListDefaultTypeInternal {
  constexpr CMsgClientFriendsListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendsListDefaultTypeInternal() {}
  union {
    CMsgClientFriendsList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendsListDefaultTypeInternal _CMsgClientFriendsList_default_instance_;
constexpr CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strgroupname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ngroupid_(0){}
struct CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal {
  constexpr CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal() {}
  union {
    CMsgClientFriendsGroupsList_FriendGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal _CMsgClientFriendsGroupsList_FriendGroup_default_instance_;
constexpr CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ulsteamid_(uint64_t{0u})
  , ngroupid_(0){}
struct CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal {
  constexpr CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal() {}
  union {
    CMsgClientFriendsGroupsList_FriendGroupsMembership _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal _CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_;
constexpr CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friendgroups_()
  , memberships_()
  , bremoval_(false)
  , bincremental_(false){}
struct CMsgClientFriendsGroupsListDefaultTypeInternal {
  constexpr CMsgClientFriendsGroupsListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendsGroupsListDefaultTypeInternal() {}
  union {
    CMsgClientFriendsGroupsList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendsGroupsListDefaultTypeInternal _CMsgClientFriendsGroupsList_default_instance_;
constexpr CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal {
  constexpr CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal() {}
  union {
    CMsgClientPlayerNicknameList_PlayerNickname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal _CMsgClientPlayerNicknameList_PlayerNickname_default_instance_;
constexpr CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nicknames_()
  , removal_(false)
  , incremental_(false){}
struct CMsgClientPlayerNicknameListDefaultTypeInternal {
  constexpr CMsgClientPlayerNicknameListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPlayerNicknameListDefaultTypeInternal() {}
  union {
    CMsgClientPlayerNicknameList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPlayerNicknameListDefaultTypeInternal _CMsgClientPlayerNicknameList_default_instance_;
constexpr CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CMsgClientSetPlayerNicknameDefaultTypeInternal {
  constexpr CMsgClientSetPlayerNicknameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSetPlayerNicknameDefaultTypeInternal() {}
  union {
    CMsgClientSetPlayerNickname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSetPlayerNicknameDefaultTypeInternal _CMsgClientSetPlayerNickname_default_instance_;
constexpr CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u){}
struct CMsgClientSetPlayerNicknameResponseDefaultTypeInternal {
  constexpr CMsgClientSetPlayerNicknameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSetPlayerNicknameResponseDefaultTypeInternal() {}
  union {
    CMsgClientSetPlayerNicknameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSetPlayerNicknameResponseDefaultTypeInternal _CMsgClientSetPlayerNicknameResponse_default_instance_;
constexpr CMsgClientRequestFriendData::CMsgClientRequestFriendData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friends_()
  , persona_state_requested_(0u){}
struct CMsgClientRequestFriendDataDefaultTypeInternal {
  constexpr CMsgClientRequestFriendDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestFriendDataDefaultTypeInternal() {}
  union {
    CMsgClientRequestFriendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestFriendDataDefaultTypeInternal _CMsgClientRequestFriendData_default_instance_;
constexpr CMsgClientChangeStatus::CMsgClientChangeStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , persona_state_(0u)
  , is_auto_generated_name_(false)
  , high_priority_(false)
  , persona_set_by_user_(false)
  , need_persona_response_(false)
  , persona_state_flags_(0u)
  , is_client_idle_(false){}
struct CMsgClientChangeStatusDefaultTypeInternal {
  constexpr CMsgClientChangeStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChangeStatusDefaultTypeInternal() {}
  union {
    CMsgClientChangeStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChangeStatusDefaultTypeInternal _CMsgClientChangeStatus_default_instance_;
constexpr CMsgPersonaChangeResponse::CMsgPersonaChangeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0u){}
struct CMsgPersonaChangeResponseDefaultTypeInternal {
  constexpr CMsgPersonaChangeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPersonaChangeResponseDefaultTypeInternal() {}
  union {
    CMsgPersonaChangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPersonaChangeResponseDefaultTypeInternal _CMsgPersonaChangeResponse_default_instance_;
constexpr CMsgClientPersonaState_Friend_ClanData::CMsgClientPersonaState_Friend_ClanData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(uint64_t{0u})
  , ogg_app_id_(0u){}
struct CMsgClientPersonaState_Friend_ClanDataDefaultTypeInternal {
  constexpr CMsgClientPersonaState_Friend_ClanDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPersonaState_Friend_ClanDataDefaultTypeInternal() {}
  union {
    CMsgClientPersonaState_Friend_ClanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPersonaState_Friend_ClanDataDefaultTypeInternal _CMsgClientPersonaState_Friend_ClanData_default_instance_;
constexpr CMsgClientPersonaState_Friend_KV::CMsgClientPersonaState_Friend_KV(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientPersonaState_Friend_KVDefaultTypeInternal {
  constexpr CMsgClientPersonaState_Friend_KVDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPersonaState_Friend_KVDefaultTypeInternal() {}
  union {
    CMsgClientPersonaState_Friend_KV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPersonaState_Friend_KVDefaultTypeInternal _CMsgClientPersonaState_Friend_KV_default_instance_;
constexpr CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rich_presence_()
  , player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_data_blob_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clan_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , watching_broadcast_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clan_data_(nullptr)
  , friendid_(uint64_t{0u})
  , persona_state_(0u)
  , game_played_app_id_(0u)
  , game_server_ip_(0u)
  , game_server_port_(0u)
  , persona_state_flags_(0u)
  , online_session_instances_(0u)
  , steamid_source_(uint64_t{0u})
  , watching_broadcast_viewers_(0u)
  , query_port_(0u)
  , last_logoff_(0u)
  , last_logon_(0u)
  , last_seen_online_(0u)
  , gameid_(uint64_t{0u})
  , clan_rank_(0u)
  , persona_set_by_user_(false)
  , is_community_banned_(false)
  , player_name_pending_review_(false)
  , avatar_pending_review_(false)
  , broadcast_id_(uint64_t{0u})
  , game_lobby_id_(uint64_t{0u})
  , watching_broadcast_accountid_(0u)
  , watching_broadcast_appid_(0u){}
struct CMsgClientPersonaState_FriendDefaultTypeInternal {
  constexpr CMsgClientPersonaState_FriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPersonaState_FriendDefaultTypeInternal() {}
  union {
    CMsgClientPersonaState_Friend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPersonaState_FriendDefaultTypeInternal _CMsgClientPersonaState_Friend_default_instance_;
constexpr CMsgClientPersonaState::CMsgClientPersonaState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friends_()
  , status_flags_(0u){}
struct CMsgClientPersonaStateDefaultTypeInternal {
  constexpr CMsgClientPersonaStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPersonaStateDefaultTypeInternal() {}
  union {
    CMsgClientPersonaState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPersonaStateDefaultTypeInternal _CMsgClientPersonaState_default_instance_;
constexpr CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_friend_(uint64_t{0u}){}
struct CMsgClientFriendProfileInfoDefaultTypeInternal {
  constexpr CMsgClientFriendProfileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendProfileInfoDefaultTypeInternal() {}
  union {
    CMsgClientFriendProfileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendProfileInfoDefaultTypeInternal _CMsgClientFriendProfileInfo_default_instance_;
constexpr CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , city_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_friend_(uint64_t{0u})
  , time_created_(0u)
  , eresult_(2){}
struct CMsgClientFriendProfileInfoResponseDefaultTypeInternal {
  constexpr CMsgClientFriendProfileInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendProfileInfoResponseDefaultTypeInternal() {}
  union {
    CMsgClientFriendProfileInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendProfileInfoResponseDefaultTypeInternal _CMsgClientFriendProfileInfoResponse_default_instance_;
constexpr CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_friends_()
  , groupname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CMsgClientCreateFriendsGroupDefaultTypeInternal {
  constexpr CMsgClientCreateFriendsGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCreateFriendsGroupDefaultTypeInternal() {}
  union {
    CMsgClientCreateFriendsGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCreateFriendsGroupDefaultTypeInternal _CMsgClientCreateFriendsGroup_default_instance_;
constexpr CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u)
  , groupid_(0){}
struct CMsgClientCreateFriendsGroupResponseDefaultTypeInternal {
  constexpr CMsgClientCreateFriendsGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCreateFriendsGroupResponseDefaultTypeInternal() {}
  union {
    CMsgClientCreateFriendsGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCreateFriendsGroupResponseDefaultTypeInternal _CMsgClientCreateFriendsGroupResponse_default_instance_;
constexpr CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , groupid_(0){}
struct CMsgClientDeleteFriendsGroupDefaultTypeInternal {
  constexpr CMsgClientDeleteFriendsGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDeleteFriendsGroupDefaultTypeInternal() {}
  union {
    CMsgClientDeleteFriendsGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDeleteFriendsGroupDefaultTypeInternal _CMsgClientDeleteFriendsGroup_default_instance_;
constexpr CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u){}
struct CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal {
  constexpr CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal() {}
  union {
    CMsgClientDeleteFriendsGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal _CMsgClientDeleteFriendsGroupResponse_default_instance_;
constexpr CMsgClientManageFriendsGroup::CMsgClientManageFriendsGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_friends_added_()
  , steamid_friends_removed_()
  , groupname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , groupid_(0){}
struct CMsgClientManageFriendsGroupDefaultTypeInternal {
  constexpr CMsgClientManageFriendsGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientManageFriendsGroupDefaultTypeInternal() {}
  union {
    CMsgClientManageFriendsGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientManageFriendsGroupDefaultTypeInternal _CMsgClientManageFriendsGroup_default_instance_;
constexpr CMsgClientManageFriendsGroupResponse::CMsgClientManageFriendsGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u){}
struct CMsgClientManageFriendsGroupResponseDefaultTypeInternal {
  constexpr CMsgClientManageFriendsGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientManageFriendsGroupResponseDefaultTypeInternal() {}
  union {
    CMsgClientManageFriendsGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientManageFriendsGroupResponseDefaultTypeInternal _CMsgClientManageFriendsGroupResponse_default_instance_;
constexpr CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamiduser_(uint64_t{0u})
  , groupid_(0){}
struct CMsgClientAddFriendToGroupDefaultTypeInternal {
  constexpr CMsgClientAddFriendToGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAddFriendToGroupDefaultTypeInternal() {}
  union {
    CMsgClientAddFriendToGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAddFriendToGroupDefaultTypeInternal _CMsgClientAddFriendToGroup_default_instance_;
constexpr CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u){}
struct CMsgClientAddFriendToGroupResponseDefaultTypeInternal {
  constexpr CMsgClientAddFriendToGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAddFriendToGroupResponseDefaultTypeInternal() {}
  union {
    CMsgClientAddFriendToGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAddFriendToGroupResponseDefaultTypeInternal _CMsgClientAddFriendToGroupResponse_default_instance_;
constexpr CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamiduser_(uint64_t{0u})
  , groupid_(0){}
struct CMsgClientRemoveFriendFromGroupDefaultTypeInternal {
  constexpr CMsgClientRemoveFriendFromGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRemoveFriendFromGroupDefaultTypeInternal() {}
  union {
    CMsgClientRemoveFriendFromGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRemoveFriendFromGroupDefaultTypeInternal _CMsgClientRemoveFriendFromGroup_default_instance_;
constexpr CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u){}
struct CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal {
  constexpr CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal() {}
  union {
    CMsgClientRemoveFriendFromGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal _CMsgClientRemoveFriendFromGroupResponse_default_instance_;
constexpr CMsgClientGetEmoticonList::CMsgClientGetEmoticonList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientGetEmoticonListDefaultTypeInternal {
  constexpr CMsgClientGetEmoticonListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetEmoticonListDefaultTypeInternal() {}
  union {
    CMsgClientGetEmoticonList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetEmoticonListDefaultTypeInternal _CMsgClientGetEmoticonList_default_instance_;
constexpr CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0)
  , time_last_used_(0u)
  , use_count_(0u)
  , time_received_(0u)
  , appid_(0u){}
struct CMsgClientEmoticonList_EmoticonDefaultTypeInternal {
  constexpr CMsgClientEmoticonList_EmoticonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientEmoticonList_EmoticonDefaultTypeInternal() {}
  union {
    CMsgClientEmoticonList_Emoticon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientEmoticonList_EmoticonDefaultTypeInternal _CMsgClientEmoticonList_Emoticon_default_instance_;
constexpr CMsgClientEmoticonList_Sticker::CMsgClientEmoticonList_Sticker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0)
  , time_received_(0u)
  , appid_(0u)
  , time_last_used_(0u)
  , use_count_(0u){}
struct CMsgClientEmoticonList_StickerDefaultTypeInternal {
  constexpr CMsgClientEmoticonList_StickerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientEmoticonList_StickerDefaultTypeInternal() {}
  union {
    CMsgClientEmoticonList_Sticker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientEmoticonList_StickerDefaultTypeInternal _CMsgClientEmoticonList_Sticker_default_instance_;
constexpr CMsgClientEmoticonList_Effect::CMsgClientEmoticonList_Effect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0)
  , time_received_(0u)
  , infinite_use_(false)
  , appid_(0u){}
struct CMsgClientEmoticonList_EffectDefaultTypeInternal {
  constexpr CMsgClientEmoticonList_EffectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientEmoticonList_EffectDefaultTypeInternal() {}
  union {
    CMsgClientEmoticonList_Effect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientEmoticonList_EffectDefaultTypeInternal _CMsgClientEmoticonList_Effect_default_instance_;
constexpr CMsgClientEmoticonList::CMsgClientEmoticonList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : emoticons_()
  , stickers_()
  , effects_(){}
struct CMsgClientEmoticonListDefaultTypeInternal {
  constexpr CMsgClientEmoticonListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientEmoticonListDefaultTypeInternal() {}
  union {
    CMsgClientEmoticonList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientEmoticonListDefaultTypeInternal _CMsgClientEmoticonList_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[39];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5ffriends_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5ffriends_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientserver_5ffriends_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsg, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsg, chat_entry_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsg, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsg, rtime32_server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsg, echo_to_sender_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsgIncoming, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsgIncoming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsgIncoming, steamid_from_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsgIncoming, chat_entry_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsgIncoming, from_limited_account_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsgIncoming, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendMsgIncoming, rtime32_server_timestamp_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriend, steamid_to_add_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriend, accountname_or_email_to_add_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendResponse, steam_id_added_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendResponse, persona_name_added_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriend, friendid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientHideFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHideFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientHideFriend, friendid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHideFriend, hide_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList_Friend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList_Friend, ulfriendid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList_Friend, efriendrelationship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList, bincremental_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList, friends_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList, max_friend_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList, active_friend_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsList, friends_limit_hit_),
  1,
  ~0u,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroup, ngroupid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroup, strgroupname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroupsMembership, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroupsMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroupsMembership, ulsteamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList_FriendGroupsMembership, ngroupid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList, bremoval_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList, bincremental_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList, friendgroups_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendsGroupsList, memberships_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList_PlayerNickname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList_PlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList_PlayerNickname, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList_PlayerNickname, nickname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList, removal_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList, incremental_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayerNicknameList, nicknames_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetPlayerNickname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetPlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetPlayerNickname, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetPlayerNickname, nickname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetPlayerNicknameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetPlayerNicknameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSetPlayerNicknameResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFriendData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFriendData, persona_state_requested_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFriendData, friends_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, persona_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, player_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, is_auto_generated_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, high_priority_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, persona_set_by_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, persona_state_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, need_persona_response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChangeStatus, is_client_idle_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgPersonaChangeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPersonaChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPersonaChangeResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgPersonaChangeResponse, player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_ClanData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_ClanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_ClanData, ogg_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_ClanData, chat_group_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_KV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_KV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_KV, key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend_KV, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, friendid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, persona_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, game_played_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, game_server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, persona_state_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, online_session_instances_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, persona_set_by_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, player_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, query_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, steamid_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, avatar_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, last_logoff_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, last_logon_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, last_seen_online_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, clan_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, game_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, gameid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, game_data_blob_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, clan_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, clan_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, rich_presence_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, game_lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, watching_broadcast_accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, watching_broadcast_appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, watching_broadcast_viewers_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, watching_broadcast_title_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, is_community_banned_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, player_name_pending_review_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState_Friend, avatar_pending_review_),
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  22,
  0,
  16,
  14,
  1,
  17,
  18,
  19,
  21,
  2,
  20,
  3,
  6,
  4,
  ~0u,
  26,
  27,
  28,
  29,
  15,
  5,
  23,
  24,
  25,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState, status_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPersonaState, friends_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfo, steamid_friend_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, steamid_friend_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, real_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, city_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, state_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, country_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, headline_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendProfileInfoResponse, summary_),
  8,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroup, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroup, groupname_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroup, steamid_friends_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroupResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCreateFriendsGroupResponse, groupid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeleteFriendsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeleteFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeleteFriendsGroup, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeleteFriendsGroup, groupid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeleteFriendsGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeleteFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeleteFriendsGroupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroup, groupname_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroup, steamid_friends_added_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroup, steamid_friends_removed_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientManageFriendsGroupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendToGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendToGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendToGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendToGroup, steamiduser_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendToGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendToGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAddFriendToGroupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriendFromGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriendFromGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriendFromGroup, groupid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriendFromGroup, steamiduser_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriendFromGroupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriendFromGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRemoveFriendFromGroupResponse, eresult_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetEmoticonList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, time_last_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, use_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, time_received_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Emoticon, appid_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, time_received_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, time_last_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Sticker, use_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Effect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Effect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Effect, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Effect, count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Effect, time_received_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Effect, infinite_use_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList_Effect, appid_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList, emoticons_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList, stickers_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmoticonList, effects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::CMsgClientFriendMsg)},
  { 16, 27, -1, sizeof(::CMsgClientFriendMsgIncoming)},
  { 32, 40, -1, sizeof(::CMsgClientAddFriend)},
  { 42, 51, -1, sizeof(::CMsgClientAddFriendResponse)},
  { 54, 61, -1, sizeof(::CMsgClientRemoveFriend)},
  { 62, 70, -1, sizeof(::CMsgClientHideFriend)},
  { 72, 80, -1, sizeof(::CMsgClientFriendsList_Friend)},
  { 82, 93, -1, sizeof(::CMsgClientFriendsList)},
  { 98, 106, -1, sizeof(::CMsgClientFriendsGroupsList_FriendGroup)},
  { 108, 116, -1, sizeof(::CMsgClientFriendsGroupsList_FriendGroupsMembership)},
  { 118, 128, -1, sizeof(::CMsgClientFriendsGroupsList)},
  { 132, 140, -1, sizeof(::CMsgClientPlayerNicknameList_PlayerNickname)},
  { 142, 151, -1, sizeof(::CMsgClientPlayerNicknameList)},
  { 154, 162, -1, sizeof(::CMsgClientSetPlayerNickname)},
  { 164, 171, -1, sizeof(::CMsgClientSetPlayerNicknameResponse)},
  { 172, 180, -1, sizeof(::CMsgClientRequestFriendData)},
  { 182, 196, -1, sizeof(::CMsgClientChangeStatus)},
  { 204, 212, -1, sizeof(::CMsgPersonaChangeResponse)},
  { 214, 222, -1, sizeof(::CMsgClientPersonaState_Friend_ClanData)},
  { 224, 232, -1, sizeof(::CMsgClientPersonaState_Friend_KV)},
  { 234, 271, -1, sizeof(::CMsgClientPersonaState_Friend)},
  { 302, 310, -1, sizeof(::CMsgClientPersonaState)},
  { 312, 319, -1, sizeof(::CMsgClientFriendProfileInfo)},
  { 320, 335, -1, sizeof(::CMsgClientFriendProfileInfoResponse)},
  { 344, 353, -1, sizeof(::CMsgClientCreateFriendsGroup)},
  { 356, 364, -1, sizeof(::CMsgClientCreateFriendsGroupResponse)},
  { 366, 374, -1, sizeof(::CMsgClientDeleteFriendsGroup)},
  { 376, 383, -1, sizeof(::CMsgClientDeleteFriendsGroupResponse)},
  { 384, 394, -1, sizeof(::CMsgClientManageFriendsGroup)},
  { 398, 405, -1, sizeof(::CMsgClientManageFriendsGroupResponse)},
  { 406, 414, -1, sizeof(::CMsgClientAddFriendToGroup)},
  { 416, 423, -1, sizeof(::CMsgClientAddFriendToGroupResponse)},
  { 424, 432, -1, sizeof(::CMsgClientRemoveFriendFromGroup)},
  { 434, 441, -1, sizeof(::CMsgClientRemoveFriendFromGroupResponse)},
  { 442, -1, -1, sizeof(::CMsgClientGetEmoticonList)},
  { 448, 460, -1, sizeof(::CMsgClientEmoticonList_Emoticon)},
  { 466, 478, -1, sizeof(::CMsgClientEmoticonList_Sticker)},
  { 484, 495, -1, sizeof(::CMsgClientEmoticonList_Effect)},
  { 500, -1, -1, sizeof(::CMsgClientEmoticonList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendMsgIncoming_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAddFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAddFriendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRemoveFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientHideFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendsList_Friend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendsList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendsGroupsList_FriendGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendsGroupsList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPlayerNicknameList_PlayerNickname_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPlayerNicknameList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSetPlayerNickname_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSetPlayerNicknameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestFriendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChangeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPersonaChangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPersonaState_Friend_ClanData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPersonaState_Friend_KV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPersonaState_Friend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPersonaState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendProfileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendProfileInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCreateFriendsGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCreateFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDeleteFriendsGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDeleteFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientManageFriendsGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientManageFriendsGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAddFriendToGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAddFriendToGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRemoveFriendFromGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRemoveFriendFromGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetEmoticonList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientEmoticonList_Emoticon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientEmoticonList_Sticker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientEmoticonList_Effect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientEmoticonList_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5ffriends_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(steammessages_clientserver_friends.pro"
  "to\032\030steammessages_base.proto\"\212\001\n\023CMsgCli"
  "entFriendMsg\022\017\n\007steamid\030\001 \001(\006\022\027\n\017chat_en"
  "try_type\030\002 \001(\005\022\017\n\007message\030\003 \001(\014\022 \n\030rtime"
  "32_server_timestamp\030\004 \001(\007\022\026\n\016echo_to_sen"
  "der\030\005 \001(\010\"\235\001\n\033CMsgClientFriendMsgIncomin"
  "g\022\024\n\014steamid_from\030\001 \001(\006\022\027\n\017chat_entry_ty"
  "pe\030\002 \001(\005\022\034\n\024from_limited_account\030\003 \001(\010\022\017"
  "\n\007message\030\004 \001(\014\022 \n\030rtime32_server_timest"
  "amp\030\005 \001(\007\"R\n\023CMsgClientAddFriend\022\026\n\016stea"
  "mid_to_add\030\001 \001(\006\022#\n\033accountname_or_email"
  "_to_add\030\002 \001(\t\"e\n\033CMsgClientAddFriendResp"
  "onse\022\022\n\007eresult\030\001 \001(\005:\0012\022\026\n\016steam_id_add"
  "ed\030\002 \001(\006\022\032\n\022persona_name_added\030\003 \001(\t\"*\n\026"
  "CMsgClientRemoveFriend\022\020\n\010friendid\030\001 \001(\006"
  "\"6\n\024CMsgClientHideFriend\022\020\n\010friendid\030\001 \001"
  "(\006\022\014\n\004hide\030\002 \001(\010\"\352\001\n\025CMsgClientFriendsLi"
  "st\022\024\n\014bincremental\030\001 \001(\010\022.\n\007friends\030\002 \003("
  "\0132\035.CMsgClientFriendsList.Friend\022\030\n\020max_"
  "friend_count\030\003 \001(\r\022\033\n\023active_friend_coun"
  "t\030\004 \001(\r\022\031\n\021friends_limit_hit\030\005 \001(\010\0329\n\006Fr"
  "iend\022\022\n\nulfriendid\030\001 \001(\006\022\033\n\023efriendrelat"
  "ionship\030\002 \001(\r\"\305\002\n\033CMsgClientFriendsGroup"
  "sList\022\020\n\010bremoval\030\001 \001(\010\022\024\n\014bincremental\030"
  "\002 \001(\010\022>\n\014friendGroups\030\003 \003(\0132(.CMsgClient"
  "FriendsGroupsList.FriendGroup\022H\n\013members"
  "hips\030\004 \003(\01323.CMsgClientFriendsGroupsList"
  ".FriendGroupsMembership\0325\n\013FriendGroup\022\020"
  "\n\010nGroupID\030\001 \001(\005\022\024\n\014strGroupName\030\002 \001(\t\032="
  "\n\026FriendGroupsMembership\022\021\n\tulSteamID\030\001 "
  "\001(\006\022\020\n\010nGroupID\030\002 \001(\005\"\272\001\n\034CMsgClientPlay"
  "erNicknameList\022\017\n\007removal\030\001 \001(\010\022\023\n\013incre"
  "mental\030\002 \001(\010\022\?\n\tnicknames\030\003 \003(\0132,.CMsgCl"
  "ientPlayerNicknameList.PlayerNickname\0323\n"
  "\016PlayerNickname\022\017\n\007steamid\030\001 \001(\006\022\020\n\010nick"
  "name\030\003 \001(\t\"@\n\033CMsgClientSetPlayerNicknam"
  "e\022\017\n\007steamid\030\001 \001(\006\022\020\n\010nickname\030\002 \001(\t\"6\n#"
  "CMsgClientSetPlayerNicknameResponse\022\017\n\007e"
  "result\030\001 \001(\r\"O\n\033CMsgClientRequestFriendD"
  "ata\022\037\n\027persona_state_requested\030\001 \001(\r\022\017\n\007"
  "friends\030\002 \003(\006\"\357\001\n\026CMsgClientChangeStatus"
  "\022\025\n\rpersona_state\030\001 \001(\r\022\023\n\013player_name\030\002"
  " \001(\t\022\036\n\026is_auto_generated_name\030\003 \001(\010\022\025\n\r"
  "high_priority\030\004 \001(\010\022\033\n\023persona_set_by_us"
  "er\030\005 \001(\010\022\036\n\023persona_state_flags\030\006 \001(\r:\0010"
  "\022\035\n\025need_persona_response\030\007 \001(\010\022\026\n\016is_cl"
  "ient_idle\030\010 \001(\010\"@\n\031CMsgPersonaChangeResp"
  "onse\022\016\n\006result\030\001 \001(\r\022\023\n\013player_name\030\002 \001("
  "\t\"\240\010\n\026CMsgClientPersonaState\022\024\n\014status_f"
  "lags\030\001 \001(\r\022/\n\007friends\030\002 \003(\0132\036.CMsgClient"
  "PersonaState.Friend\032\276\007\n\006Friend\022\020\n\010friend"
  "id\030\001 \001(\006\022\025\n\rpersona_state\030\002 \001(\r\022\032\n\022game_"
  "played_app_id\030\003 \001(\r\022\026\n\016game_server_ip\030\004 "
  "\001(\r\022\030\n\020game_server_port\030\005 \001(\r\022\033\n\023persona"
  "_state_flags\030\006 \001(\r\022 \n\030online_session_ins"
  "tances\030\007 \001(\r\022\033\n\023persona_set_by_user\030\n \001("
  "\010\022\023\n\013player_name\030\017 \001(\t\022\022\n\nquery_port\030\024 \001"
  "(\r\022\026\n\016steamid_source\030\031 \001(\006\022\023\n\013avatar_has"
  "h\030\037 \001(\014\022\023\n\013last_logoff\030- \001(\r\022\022\n\nlast_log"
  "on\030. \001(\r\022\030\n\020last_seen_online\030/ \001(\r\022\021\n\tcl"
  "an_rank\0302 \001(\r\022\021\n\tgame_name\0307 \001(\t\022\016\n\006game"
  "id\0308 \001(\006\022\026\n\016game_data_blob\030< \001(\014\022:\n\tclan"
  "_data\030@ \001(\0132\'.CMsgClientPersonaState.Fri"
  "end.ClanData\022\020\n\010clan_tag\030A \001(\t\0228\n\rrich_p"
  "resence\030G \003(\0132!.CMsgClientPersonaState.F"
  "riend.KV\022\024\n\014broadcast_id\030H \001(\006\022\025\n\rgame_l"
  "obby_id\030I \001(\006\022$\n\034watching_broadcast_acco"
  "untid\030J \001(\r\022 \n\030watching_broadcast_appid\030"
  "K \001(\r\022\"\n\032watching_broadcast_viewers\030L \001("
  "\r\022 \n\030watching_broadcast_title\030M \001(\t\022\033\n\023i"
  "s_community_banned\030N \001(\010\022\"\n\032player_name_"
  "pending_review\030O \001(\010\022\035\n\025avatar_pending_r"
  "eview\030P \001(\010\0325\n\010ClanData\022\022\n\nogg_app_id\030\001 "
  "\001(\r\022\025\n\rchat_group_id\030\002 \001(\004\032 \n\002KV\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t\"5\n\033CMsgClientFriend"
  "ProfileInfo\022\026\n\016steamid_friend\030\001 \001(\006\"\332\001\n#"
  "CMsgClientFriendProfileInfoResponse\022\022\n\007e"
  "result\030\001 \001(\005:\0012\022\026\n\016steamid_friend\030\002 \001(\006\022"
  "\024\n\014time_created\030\003 \001(\r\022\021\n\treal_name\030\004 \001(\t"
  "\022\021\n\tcity_name\030\005 \001(\t\022\022\n\nstate_name\030\006 \001(\t\022"
  "\024\n\014country_name\030\007 \001(\t\022\020\n\010headline\030\010 \001(\t\022"
  "\017\n\007summary\030\t \001(\t\"[\n\034CMsgClientCreateFrie"
  "ndsGroup\022\017\n\007steamid\030\001 \001(\006\022\021\n\tgroupname\030\002"
  " \001(\t\022\027\n\017steamid_friends\030\003 \003(\006\"H\n$CMsgCli"
  "entCreateFriendsGroupResponse\022\017\n\007eresult"
  "\030\001 \001(\r\022\017\n\007groupid\030\002 \001(\005\"@\n\034CMsgClientDel"
  "eteFriendsGroup\022\017\n\007steamid\030\001 \001(\006\022\017\n\007grou"
  "pid\030\002 \001(\005\"7\n$CMsgClientDeleteFriendsGrou"
  "pResponse\022\017\n\007eresult\030\001 \001(\r\"\202\001\n\034CMsgClien"
  "tManageFriendsGroup\022\017\n\007groupid\030\001 \001(\005\022\021\n\t"
  "groupname\030\002 \001(\t\022\035\n\025steamid_friends_added"
  "\030\003 \003(\006\022\037\n\027steamid_friends_removed\030\004 \003(\006\""
  "7\n$CMsgClientManageFriendsGroupResponse\022"
  "\017\n\007eresult\030\001 \001(\r\"B\n\032CMsgClientAddFriendT"
  "oGroup\022\017\n\007groupid\030\001 \001(\005\022\023\n\013steamiduser\030\002"
  " \001(\006\"5\n\"CMsgClientAddFriendToGroupRespon"
  "se\022\017\n\007eresult\030\001 \001(\r\"G\n\037CMsgClientRemoveF"
  "riendFromGroup\022\017\n\007groupid\030\001 \001(\005\022\023\n\013steam"
  "iduser\030\002 \001(\006\":\n\'CMsgClientRemoveFriendFr"
  "omGroupResponse\022\017\n\007eresult\030\001 \001(\r\"\033\n\031CMsg"
  "ClientGetEmoticonList\"\207\004\n\026CMsgClientEmot"
  "iconList\0223\n\temoticons\030\001 \003(\0132 .CMsgClient"
  "EmoticonList.Emoticon\0221\n\010stickers\030\002 \003(\0132"
  "\037.CMsgClientEmoticonList.Sticker\022/\n\007effe"
  "cts\030\003 \003(\0132\036.CMsgClientEmoticonList.Effec"
  "t\032x\n\010Emoticon\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 \001"
  "(\005\022\026\n\016time_last_used\030\003 \001(\r\022\021\n\tuse_count\030"
  "\004 \001(\r\022\025\n\rtime_received\030\005 \001(\r\022\r\n\005appid\030\006 "
  "\001(\r\032w\n\007Sticker\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 "
  "\001(\005\022\025\n\rtime_received\030\003 \001(\r\022\r\n\005appid\030\004 \001("
  "\r\022\026\n\016time_last_used\030\005 \001(\r\022\021\n\tuse_count\030\006"
  " \001(\r\032a\n\006Effect\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 "
  "\001(\005\022\025\n\rtime_received\030\003 \001(\r\022\024\n\014infinite_u"
  "se\030\004 \001(\010\022\r\n\005appid\030\005 \001(\rB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5ffriends_2eproto = {
  false, false, 4550, descriptor_table_protodef_steammessages_5fclientserver_5ffriends_2eproto, "steammessages_clientserver_friends.proto", 
  &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once, descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_deps, 1, 39,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5ffriends_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5ffriends_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5ffriends_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5ffriends_2eproto(&descriptor_table_steammessages_5fclientserver_5ffriends_2eproto);

// ===================================================================

class CMsgClientFriendMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendMsg>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtime32_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_echo_to_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientFriendMsg::CMsgClientFriendMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendMsg)
}
CMsgClientFriendMsg::CMsgClientFriendMsg(const CMsgClientFriendMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&echo_to_sender_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(echo_to_sender_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendMsg)
}

inline void CMsgClientFriendMsg::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&echo_to_sender_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(echo_to_sender_));
}

CMsgClientFriendMsg::~CMsgClientFriendMsg() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendMsg::ArenaDtor(void* object) {
  CMsgClientFriendMsg* _this = reinterpret_cast< CMsgClientFriendMsg* >(object);
  (void)_this;
}
void CMsgClientFriendMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&echo_to_sender_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(echo_to_sender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_entry_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_entry_type(&has_bits);
          chat_entry_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_server_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_rtime32_server_timestamp(&has_bits);
          rtime32_server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool echo_to_sender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_echo_to_sender(&has_bits);
          echo_to_sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_entry_type(), target);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_rtime32_server_timestamp(), target);
  }

  // optional bool echo_to_sender = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_echo_to_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendMsg)
  return target;
}

size_t CMsgClientFriendMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_entry_type());
    }

    // optional fixed32 rtime32_server_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool echo_to_sender = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendMsg::GetClassData() const { return &_class_data_; }

void CMsgClientFriendMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendMsg *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendMsg &>(from));
}


void CMsgClientFriendMsg::MergeFrom(const CMsgClientFriendMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      echo_to_sender_ = from.echo_to_sender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendMsg::CopyFrom(const CMsgClientFriendMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsg::IsInitialized() const {
  return true;
}

void CMsgClientFriendMsg::InternalSwap(CMsgClientFriendMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendMsg, echo_to_sender_)
      + sizeof(CMsgClientFriendMsg::echo_to_sender_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendMsg, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[0]);
}

// ===================================================================

class CMsgClientFriendMsgIncoming::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendMsgIncoming>()._has_bits_);
  static void set_has_steamid_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_limited_account(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtime32_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendMsgIncoming)
}
CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming(const CMsgClientFriendMsgIncoming& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_from_, &from.steamid_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime32_server_timestamp_) -
    reinterpret_cast<char*>(&steamid_from_)) + sizeof(rtime32_server_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendMsgIncoming)
}

inline void CMsgClientFriendMsgIncoming::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime32_server_timestamp_) -
    reinterpret_cast<char*>(&steamid_from_)) + sizeof(rtime32_server_timestamp_));
}

CMsgClientFriendMsgIncoming::~CMsgClientFriendMsgIncoming() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendMsgIncoming)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendMsgIncoming::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendMsgIncoming::ArenaDtor(void* object) {
  CMsgClientFriendMsgIncoming* _this = reinterpret_cast< CMsgClientFriendMsgIncoming* >(object);
  (void)_this;
}
void CMsgClientFriendMsgIncoming::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendMsgIncoming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendMsgIncoming::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendMsgIncoming)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime32_server_timestamp_) -
        reinterpret_cast<char*>(&steamid_from_)) + sizeof(rtime32_server_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendMsgIncoming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_from(&has_bits);
          steamid_from_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_entry_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_entry_type(&has_bits);
          chat_entry_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_limited_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_from_limited_account(&has_bits);
          from_limited_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_server_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_rtime32_server_timestamp(&has_bits);
          rtime32_server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendMsgIncoming::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendMsgIncoming)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_from = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_from(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_entry_type(), target);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_limited_account(), target);
  }

  // optional bytes message = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_rtime32_server_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendMsgIncoming)
  return target;
}

size_t CMsgClientFriendMsgIncoming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendMsgIncoming)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message());
    }

    // optional fixed64 steamid_from = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_entry_type());
    }

    // optional bool from_limited_account = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional fixed32 rtime32_server_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendMsgIncoming::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendMsgIncoming::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendMsgIncoming::GetClassData() const { return &_class_data_; }

void CMsgClientFriendMsgIncoming::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendMsgIncoming *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendMsgIncoming &>(from));
}


void CMsgClientFriendMsgIncoming::MergeFrom(const CMsgClientFriendMsgIncoming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendMsgIncoming)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_from_ = from.steamid_from_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_limited_account_ = from.from_limited_account_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendMsgIncoming::CopyFrom(const CMsgClientFriendMsgIncoming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendMsgIncoming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsgIncoming::IsInitialized() const {
  return true;
}

void CMsgClientFriendMsgIncoming::InternalSwap(CMsgClientFriendMsgIncoming* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendMsgIncoming, rtime32_server_timestamp_)
      + sizeof(CMsgClientFriendMsgIncoming::rtime32_server_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendMsgIncoming, steamid_from_)>(
          reinterpret_cast<char*>(&steamid_from_),
          reinterpret_cast<char*>(&other->steamid_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendMsgIncoming::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[1]);
}

// ===================================================================

class CMsgClientAddFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAddFriend>()._has_bits_);
  static void set_has_steamid_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountname_or_email_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAddFriend::CMsgClientAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAddFriend)
}
CMsgClientAddFriend::CMsgClientAddFriend(const CMsgClientAddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountname_or_email_to_add_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    accountname_or_email_to_add_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accountname_or_email_to_add()) {
    accountname_or_email_to_add_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accountname_or_email_to_add(), 
      GetArenaForAllocation());
  }
  steamid_to_add_ = from.steamid_to_add_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAddFriend)
}

inline void CMsgClientAddFriend::SharedCtor() {
accountname_or_email_to_add_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  accountname_or_email_to_add_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_to_add_ = uint64_t{0u};
}

CMsgClientAddFriend::~CMsgClientAddFriend() {
  // @@protoc_insertion_point(destructor:CMsgClientAddFriend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  accountname_or_email_to_add_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAddFriend::ArenaDtor(void* object) {
  CMsgClientAddFriend* _this = reinterpret_cast< CMsgClientAddFriend* >(object);
  (void)_this;
}
void CMsgClientAddFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAddFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    accountname_or_email_to_add_.ClearNonDefaultToEmpty();
  }
  steamid_to_add_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAddFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_to_add = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_to_add(&has_bits);
          steamid_to_add_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string accountname_or_email_to_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accountname_or_email_to_add();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAddFriend.accountname_or_email_to_add");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAddFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAddFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_to_add = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_to_add(), target);
  }

  // optional string accountname_or_email_to_add = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accountname_or_email_to_add().data(), static_cast<int>(this->_internal_accountname_or_email_to_add().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAddFriend.accountname_or_email_to_add");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accountname_or_email_to_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAddFriend)
  return target;
}

size_t CMsgClientAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAddFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string accountname_or_email_to_add = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accountname_or_email_to_add());
    }

    // optional fixed64 steamid_to_add = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAddFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAddFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAddFriend::GetClassData() const { return &_class_data_; }

void CMsgClientAddFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAddFriend *>(to)->MergeFrom(
      static_cast<const CMsgClientAddFriend &>(from));
}


void CMsgClientAddFriend::MergeFrom(const CMsgClientAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_accountname_or_email_to_add(from._internal_accountname_or_email_to_add());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_to_add_ = from.steamid_to_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAddFriend::CopyFrom(const CMsgClientAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriend::IsInitialized() const {
  return true;
}

void CMsgClientAddFriend::InternalSwap(CMsgClientAddFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &accountname_or_email_to_add_, lhs_arena,
      &other->accountname_or_email_to_add_, rhs_arena
  );
  swap(steamid_to_add_, other->steamid_to_add_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAddFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[2]);
}

// ===================================================================

class CMsgClientAddFriendResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAddFriendResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id_added(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name_added(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAddFriendResponse::CMsgClientAddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAddFriendResponse)
}
CMsgClientAddFriendResponse::CMsgClientAddFriendResponse(const CMsgClientAddFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_added_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    persona_name_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name_added()) {
    persona_name_added_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name_added(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steam_id_added_, &from.steam_id_added_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_added_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAddFriendResponse)
}

inline void CMsgClientAddFriendResponse::SharedCtor() {
persona_name_added_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  persona_name_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steam_id_added_ = uint64_t{0u};
eresult_ = 2;
}

CMsgClientAddFriendResponse::~CMsgClientAddFriendResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientAddFriendResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAddFriendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  persona_name_added_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAddFriendResponse::ArenaDtor(void* object) {
  CMsgClientAddFriendResponse* _this = reinterpret_cast< CMsgClientAddFriendResponse* >(object);
  (void)_this;
}
void CMsgClientAddFriendResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAddFriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAddFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAddFriendResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_added_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    steam_id_added_ = uint64_t{0u};
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAddFriendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id_added = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steam_id_added(&has_bits);
          steam_id_added_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name_added = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_persona_name_added();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAddFriendResponse.persona_name_added");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAddFriendResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAddFriendResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional fixed64 steam_id_added = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id_added(), target);
  }

  // optional string persona_name_added = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name_added().data(), static_cast<int>(this->_internal_persona_name_added().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAddFriendResponse.persona_name_added");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_persona_name_added(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAddFriendResponse)
  return target;
}

size_t CMsgClientAddFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAddFriendResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string persona_name_added = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name_added());
    }

    // optional fixed64 steam_id_added = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAddFriendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAddFriendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAddFriendResponse::GetClassData() const { return &_class_data_; }

void CMsgClientAddFriendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAddFriendResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientAddFriendResponse &>(from));
}


void CMsgClientAddFriendResponse::MergeFrom(const CMsgClientAddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAddFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name_added(from._internal_persona_name_added());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_added_ = from.steam_id_added_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAddFriendResponse::CopyFrom(const CMsgClientAddFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAddFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendResponse::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendResponse::InternalSwap(CMsgClientAddFriendResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &persona_name_added_, lhs_arena,
      &other->persona_name_added_, rhs_arena
  );
  swap(steam_id_added_, other->steam_id_added_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAddFriendResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[3]);
}

// ===================================================================

class CMsgClientRemoveFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRemoveFriend>()._has_bits_);
  static void set_has_friendid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRemoveFriend::CMsgClientRemoveFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRemoveFriend)
}
CMsgClientRemoveFriend::CMsgClientRemoveFriend(const CMsgClientRemoveFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friendid_ = from.friendid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRemoveFriend)
}

inline void CMsgClientRemoveFriend::SharedCtor() {
friendid_ = uint64_t{0u};
}

CMsgClientRemoveFriend::~CMsgClientRemoveFriend() {
  // @@protoc_insertion_point(destructor:CMsgClientRemoveFriend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRemoveFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRemoveFriend::ArenaDtor(void* object) {
  CMsgClientRemoveFriend* _this = reinterpret_cast< CMsgClientRemoveFriend* >(object);
  (void)_this;
}
void CMsgClientRemoveFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRemoveFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRemoveFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRemoveFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friendid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRemoveFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 friendid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_friendid(&has_bits);
          friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRemoveFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRemoveFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_friendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRemoveFriend)
  return target;
}

size_t CMsgClientRemoveFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRemoveFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 friendid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRemoveFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRemoveFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRemoveFriend::GetClassData() const { return &_class_data_; }

void CMsgClientRemoveFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRemoveFriend *>(to)->MergeFrom(
      static_cast<const CMsgClientRemoveFriend &>(from));
}


void CMsgClientRemoveFriend::MergeFrom(const CMsgClientRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRemoveFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friendid()) {
    _internal_set_friendid(from._internal_friendid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRemoveFriend::CopyFrom(const CMsgClientRemoveFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRemoveFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriend::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriend::InternalSwap(CMsgClientRemoveFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friendid_, other->friendid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRemoveFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[4]);
}

// ===================================================================

class CMsgClientHideFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientHideFriend>()._has_bits_);
  static void set_has_friendid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientHideFriend::CMsgClientHideFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientHideFriend)
}
CMsgClientHideFriend::CMsgClientHideFriend(const CMsgClientHideFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&friendid_, &from.friendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_) -
    reinterpret_cast<char*>(&friendid_)) + sizeof(hide_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientHideFriend)
}

inline void CMsgClientHideFriend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&friendid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hide_) -
    reinterpret_cast<char*>(&friendid_)) + sizeof(hide_));
}

CMsgClientHideFriend::~CMsgClientHideFriend() {
  // @@protoc_insertion_point(destructor:CMsgClientHideFriend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientHideFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientHideFriend::ArenaDtor(void* object) {
  CMsgClientHideFriend* _this = reinterpret_cast< CMsgClientHideFriend* >(object);
  (void)_this;
}
void CMsgClientHideFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientHideFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientHideFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientHideFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&friendid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_) -
        reinterpret_cast<char*>(&friendid_)) + sizeof(hide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientHideFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 friendid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_friendid(&has_bits);
          friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hide(&has_bits);
          hide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientHideFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientHideFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_friendid(), target);
  }

  // optional bool hide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientHideFriend)
  return target;
}

size_t CMsgClientHideFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientHideFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 friendid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool hide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientHideFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientHideFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientHideFriend::GetClassData() const { return &_class_data_; }

void CMsgClientHideFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientHideFriend *>(to)->MergeFrom(
      static_cast<const CMsgClientHideFriend &>(from));
}


void CMsgClientHideFriend::MergeFrom(const CMsgClientHideFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientHideFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      friendid_ = from.friendid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hide_ = from.hide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientHideFriend::CopyFrom(const CMsgClientHideFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientHideFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHideFriend::IsInitialized() const {
  return true;
}

void CMsgClientHideFriend::InternalSwap(CMsgClientHideFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientHideFriend, hide_)
      + sizeof(CMsgClientHideFriend::hide_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientHideFriend, friendid_)>(
          reinterpret_cast<char*>(&friendid_),
          reinterpret_cast<char*>(&other->friendid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientHideFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[5]);
}

// ===================================================================

class CMsgClientFriendsList_Friend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendsList_Friend>()._has_bits_);
  static void set_has_ulfriendid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_efriendrelationship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendsList.Friend)
}
CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend(const CMsgClientFriendsList_Friend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ulfriendid_, &from.ulfriendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&efriendrelationship_) -
    reinterpret_cast<char*>(&ulfriendid_)) + sizeof(efriendrelationship_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendsList.Friend)
}

inline void CMsgClientFriendsList_Friend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ulfriendid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&efriendrelationship_) -
    reinterpret_cast<char*>(&ulfriendid_)) + sizeof(efriendrelationship_));
}

CMsgClientFriendsList_Friend::~CMsgClientFriendsList_Friend() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendsList.Friend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendsList_Friend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFriendsList_Friend::ArenaDtor(void* object) {
  CMsgClientFriendsList_Friend* _this = reinterpret_cast< CMsgClientFriendsList_Friend* >(object);
  (void)_this;
}
void CMsgClientFriendsList_Friend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendsList_Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendsList_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendsList.Friend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ulfriendid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&efriendrelationship_) -
        reinterpret_cast<char*>(&ulfriendid_)) + sizeof(efriendrelationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendsList_Friend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 ulfriendid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_ulfriendid(&has_bits);
          ulfriendid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 efriendrelationship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_efriendrelationship(&has_bits);
          efriendrelationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendsList_Friend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendsList.Friend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulfriendid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_ulfriendid(), target);
  }

  // optional uint32 efriendrelationship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_efriendrelationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendsList.Friend)
  return target;
}

size_t CMsgClientFriendsList_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendsList.Friend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 ulfriendid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 efriendrelationship = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_efriendrelationship());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendsList_Friend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendsList_Friend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendsList_Friend::GetClassData() const { return &_class_data_; }

void CMsgClientFriendsList_Friend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendsList_Friend *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendsList_Friend &>(from));
}


void CMsgClientFriendsList_Friend::MergeFrom(const CMsgClientFriendsList_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendsList.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ulfriendid_ = from.ulfriendid_;
    }
    if (cached_has_bits & 0x00000002u) {
      efriendrelationship_ = from.efriendrelationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendsList_Friend::CopyFrom(const CMsgClientFriendsList_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendsList.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList_Friend::IsInitialized() const {
  return true;
}

void CMsgClientFriendsList_Friend::InternalSwap(CMsgClientFriendsList_Friend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendsList_Friend, efriendrelationship_)
      + sizeof(CMsgClientFriendsList_Friend::efriendrelationship_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendsList_Friend, ulfriendid_)>(
          reinterpret_cast<char*>(&ulfriendid_),
          reinterpret_cast<char*>(&other->ulfriendid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendsList_Friend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[6]);
}

// ===================================================================

class CMsgClientFriendsList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendsList>()._has_bits_);
  static void set_has_bincremental(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_friend_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_friend_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_friends_limit_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientFriendsList::CMsgClientFriendsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendsList)
}
CMsgClientFriendsList::CMsgClientFriendsList(const CMsgClientFriendsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_friend_count_, &from.max_friend_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_friend_count_) -
    reinterpret_cast<char*>(&max_friend_count_)) + sizeof(active_friend_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendsList)
}

inline void CMsgClientFriendsList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_friend_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_friend_count_) -
    reinterpret_cast<char*>(&max_friend_count_)) + sizeof(active_friend_count_));
}

CMsgClientFriendsList::~CMsgClientFriendsList() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendsList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendsList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFriendsList::ArenaDtor(void* object) {
  CMsgClientFriendsList* _this = reinterpret_cast< CMsgClientFriendsList* >(object);
  (void)_this;
}
void CMsgClientFriendsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendsList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&max_friend_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_friend_count_) -
        reinterpret_cast<char*>(&max_friend_count_)) + sizeof(active_friend_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bincremental = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bincremental(&has_bits);
          bincremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientFriendsList.Friend friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_friend_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_friend_count(&has_bits);
          max_friend_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_friend_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_active_friend_count(&has_bits);
          active_friend_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool friends_limit_hit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_friends_limit_hit(&has_bits);
          friends_limit_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendsList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendsList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bincremental = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bincremental(), target);
  }

  // repeated .CMsgClientFriendsList.Friend friends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_friends(i), target, stream);
  }

  // optional uint32 max_friend_count = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_friend_count(), target);
  }

  // optional uint32 active_friend_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_active_friend_count(), target);
  }

  // optional bool friends_limit_hit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_friends_limit_hit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendsList)
  return target;
}

size_t CMsgClientFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendsList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientFriendsList.Friend friends = 2;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 max_friend_count = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_friend_count());
    }

    // optional bool bincremental = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool friends_limit_hit = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 active_friend_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_active_friend_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendsList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendsList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendsList::GetClassData() const { return &_class_data_; }

void CMsgClientFriendsList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendsList *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendsList &>(from));
}


void CMsgClientFriendsList::MergeFrom(const CMsgClientFriendsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      max_friend_count_ = from.max_friend_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      bincremental_ = from.bincremental_;
    }
    if (cached_has_bits & 0x00000004u) {
      friends_limit_hit_ = from.friends_limit_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_friend_count_ = from.active_friend_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendsList::CopyFrom(const CMsgClientFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList::IsInitialized() const {
  return true;
}

void CMsgClientFriendsList::InternalSwap(CMsgClientFriendsList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_.InternalSwap(&other->friends_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendsList, active_friend_count_)
      + sizeof(CMsgClientFriendsList::active_friend_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendsList, max_friend_count_)>(
          reinterpret_cast<char*>(&max_friend_count_),
          reinterpret_cast<char*>(&other->max_friend_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendsList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[7]);
}

// ===================================================================

class CMsgClientFriendsGroupsList_FriendGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendsGroupsList_FriendGroup>()._has_bits_);
  static void set_has_ngroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strgroupname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendsGroupsList.FriendGroup)
}
CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup(const CMsgClientFriendsGroupsList_FriendGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strgroupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strgroupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strgroupname()) {
    strgroupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strgroupname(), 
      GetArenaForAllocation());
  }
  ngroupid_ = from.ngroupid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendsGroupsList.FriendGroup)
}

inline void CMsgClientFriendsGroupsList_FriendGroup::SharedCtor() {
strgroupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strgroupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ngroupid_ = 0;
}

CMsgClientFriendsGroupsList_FriendGroup::~CMsgClientFriendsGroupsList_FriendGroup() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendsGroupsList.FriendGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendsGroupsList_FriendGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strgroupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendsGroupsList_FriendGroup::ArenaDtor(void* object) {
  CMsgClientFriendsGroupsList_FriendGroup* _this = reinterpret_cast< CMsgClientFriendsGroupsList_FriendGroup* >(object);
  (void)_this;
}
void CMsgClientFriendsGroupsList_FriendGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendsGroupsList_FriendGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendsGroupsList_FriendGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendsGroupsList.FriendGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strgroupname_.ClearNonDefaultToEmpty();
  }
  ngroupid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendsGroupsList_FriendGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nGroupID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ngroupid(&has_bits);
          ngroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string strGroupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strgroupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendsGroupsList_FriendGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendsGroupsList.FriendGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nGroupID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ngroupid(), target);
  }

  // optional string strGroupName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strgroupname().data(), static_cast<int>(this->_internal_strgroupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendsGroupsList.FriendGroup.strGroupName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strgroupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendsGroupsList.FriendGroup)
  return target;
}

size_t CMsgClientFriendsGroupsList_FriendGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendsGroupsList.FriendGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strGroupName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strgroupname());
    }

    // optional int32 nGroupID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ngroupid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendsGroupsList_FriendGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendsGroupsList_FriendGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendsGroupsList_FriendGroup::GetClassData() const { return &_class_data_; }

void CMsgClientFriendsGroupsList_FriendGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendsGroupsList_FriendGroup *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendsGroupsList_FriendGroup &>(from));
}


void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendsGroupsList.FriendGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strgroupname(from._internal_strgroupname());
    }
    if (cached_has_bits & 0x00000002u) {
      ngroupid_ = from.ngroupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendsGroupsList.FriendGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroup::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList_FriendGroup::InternalSwap(CMsgClientFriendsGroupsList_FriendGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strgroupname_, lhs_arena,
      &other->strgroupname_, rhs_arena
  );
  swap(ngroupid_, other->ngroupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendsGroupsList_FriendGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[8]);
}

// ===================================================================

class CMsgClientFriendsGroupsList_FriendGroupsMembership::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendsGroupsList_FriendGroupsMembership>()._has_bits_);
  static void set_has_ulsteamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ngroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendsGroupsList.FriendGroupsMembership)
}
CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ulsteamid_, &from.ulsteamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ngroupid_) -
    reinterpret_cast<char*>(&ulsteamid_)) + sizeof(ngroupid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendsGroupsList.FriendGroupsMembership)
}

inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ulsteamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ngroupid_) -
    reinterpret_cast<char*>(&ulsteamid_)) + sizeof(ngroupid_));
}

CMsgClientFriendsGroupsList_FriendGroupsMembership::~CMsgClientFriendsGroupsList_FriendGroupsMembership() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendsGroupsList.FriendGroupsMembership)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::ArenaDtor(void* object) {
  CMsgClientFriendsGroupsList_FriendGroupsMembership* _this = reinterpret_cast< CMsgClientFriendsGroupsList_FriendGroupsMembership* >(object);
  (void)_this;
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendsGroupsList_FriendGroupsMembership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendsGroupsList.FriendGroupsMembership)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ulsteamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ngroupid_) -
        reinterpret_cast<char*>(&ulsteamid_)) + sizeof(ngroupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendsGroupsList_FriendGroupsMembership::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 ulSteamID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_ulsteamid(&has_bits);
          ulsteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nGroupID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ngroupid(&has_bits);
          ngroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendsGroupsList_FriendGroupsMembership::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendsGroupsList.FriendGroupsMembership)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ulSteamID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_ulsteamid(), target);
  }

  // optional int32 nGroupID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ngroupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendsGroupsList.FriendGroupsMembership)
  return target;
}

size_t CMsgClientFriendsGroupsList_FriendGroupsMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendsGroupsList.FriendGroupsMembership)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 ulSteamID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 nGroupID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ngroupid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendsGroupsList_FriendGroupsMembership::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendsGroupsList_FriendGroupsMembership::GetClassData() const { return &_class_data_; }

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendsGroupsList_FriendGroupsMembership *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendsGroupsList_FriendGroupsMembership &>(from));
}


void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendsGroupsList.FriendGroupsMembership)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ulsteamid_ = from.ulsteamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ngroupid_ = from.ngroupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendsGroupsList.FriendGroupsMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::InternalSwap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, ngroupid_)
      + sizeof(CMsgClientFriendsGroupsList_FriendGroupsMembership::ngroupid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendsGroupsList_FriendGroupsMembership, ulsteamid_)>(
          reinterpret_cast<char*>(&ulsteamid_),
          reinterpret_cast<char*>(&other->ulsteamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendsGroupsList_FriendGroupsMembership::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[9]);
}

// ===================================================================

class CMsgClientFriendsGroupsList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendsGroupsList>()._has_bits_);
  static void set_has_bremoval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bincremental(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friendgroups_(arena),
  memberships_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendsGroupsList)
}
CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList(const CMsgClientFriendsGroupsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      friendgroups_(from.friendgroups_),
      memberships_(from.memberships_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bremoval_, &from.bremoval_,
    static_cast<size_t>(reinterpret_cast<char*>(&bincremental_) -
    reinterpret_cast<char*>(&bremoval_)) + sizeof(bincremental_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendsGroupsList)
}

inline void CMsgClientFriendsGroupsList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bremoval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bincremental_) -
    reinterpret_cast<char*>(&bremoval_)) + sizeof(bincremental_));
}

CMsgClientFriendsGroupsList::~CMsgClientFriendsGroupsList() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendsGroupsList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendsGroupsList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFriendsGroupsList::ArenaDtor(void* object) {
  CMsgClientFriendsGroupsList* _this = reinterpret_cast< CMsgClientFriendsGroupsList* >(object);
  (void)_this;
}
void CMsgClientFriendsGroupsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendsGroupsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendsGroupsList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendsGroupsList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friendgroups_.Clear();
  memberships_.Clear();
  ::memset(&bremoval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bincremental_) -
      reinterpret_cast<char*>(&bremoval_)) + sizeof(bincremental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendsGroupsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bremoval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bremoval(&has_bits);
          bremoval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bincremental = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bincremental(&has_bits);
          bincremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friendgroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memberships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendsGroupsList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendsGroupsList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bremoval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bremoval(), target);
  }

  // optional bool bincremental = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bincremental(), target);
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friendgroups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_friendgroups(i), target, stream);
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memberships_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_memberships(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendsGroupsList)
  return target;
}

size_t CMsgClientFriendsGroupsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendsGroupsList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  total_size += 1UL * this->_internal_friendgroups_size();
  for (const auto& msg : this->friendgroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  total_size += 1UL * this->_internal_memberships_size();
  for (const auto& msg : this->memberships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool bremoval = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool bincremental = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendsGroupsList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendsGroupsList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendsGroupsList::GetClassData() const { return &_class_data_; }

void CMsgClientFriendsGroupsList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendsGroupsList *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendsGroupsList &>(from));
}


void CMsgClientFriendsGroupsList::MergeFrom(const CMsgClientFriendsGroupsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendsGroupsList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friendgroups_.MergeFrom(from.friendgroups_);
  memberships_.MergeFrom(from.memberships_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bremoval_ = from.bremoval_;
    }
    if (cached_has_bits & 0x00000002u) {
      bincremental_ = from.bincremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendsGroupsList::CopyFrom(const CMsgClientFriendsGroupsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendsGroupsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList::IsInitialized() const {
  return true;
}

void CMsgClientFriendsGroupsList::InternalSwap(CMsgClientFriendsGroupsList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friendgroups_.InternalSwap(&other->friendgroups_);
  memberships_.InternalSwap(&other->memberships_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendsGroupsList, bincremental_)
      + sizeof(CMsgClientFriendsGroupsList::bincremental_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendsGroupsList, bremoval_)>(
          reinterpret_cast<char*>(&bremoval_),
          reinterpret_cast<char*>(&other->bremoval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendsGroupsList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[10]);
}

// ===================================================================

class CMsgClientPlayerNicknameList_PlayerNickname::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPlayerNicknameList_PlayerNickname>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPlayerNicknameList.PlayerNickname)
}
CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname(const CMsgClientPlayerNicknameList_PlayerNickname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientPlayerNicknameList.PlayerNickname)
}

inline void CMsgClientPlayerNicknameList_PlayerNickname::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CMsgClientPlayerNicknameList_PlayerNickname::~CMsgClientPlayerNicknameList_PlayerNickname() {
  // @@protoc_insertion_point(destructor:CMsgClientPlayerNicknameList.PlayerNickname)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPlayerNicknameList_PlayerNickname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPlayerNicknameList_PlayerNickname::ArenaDtor(void* object) {
  CMsgClientPlayerNicknameList_PlayerNickname* _this = reinterpret_cast< CMsgClientPlayerNicknameList_PlayerNickname* >(object);
  (void)_this;
}
void CMsgClientPlayerNicknameList_PlayerNickname::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPlayerNicknameList_PlayerNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPlayerNicknameList_PlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPlayerNicknameList.PlayerNickname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPlayerNicknameList_PlayerNickname::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPlayerNicknameList.PlayerNickname.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPlayerNicknameList_PlayerNickname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPlayerNicknameList.PlayerNickname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string nickname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPlayerNicknameList.PlayerNickname.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPlayerNicknameList.PlayerNickname)
  return target;
}

size_t CMsgClientPlayerNicknameList_PlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPlayerNicknameList.PlayerNickname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPlayerNicknameList_PlayerNickname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPlayerNicknameList_PlayerNickname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPlayerNicknameList_PlayerNickname::GetClassData() const { return &_class_data_; }

void CMsgClientPlayerNicknameList_PlayerNickname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPlayerNicknameList_PlayerNickname *>(to)->MergeFrom(
      static_cast<const CMsgClientPlayerNicknameList_PlayerNickname &>(from));
}


void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPlayerNicknameList.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPlayerNicknameList.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList_PlayerNickname::IsInitialized() const {
  return true;
}

void CMsgClientPlayerNicknameList_PlayerNickname::InternalSwap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPlayerNicknameList_PlayerNickname::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[11]);
}

// ===================================================================

class CMsgClientPlayerNicknameList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPlayerNicknameList>()._has_bits_);
  static void set_has_removal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_incremental(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nicknames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPlayerNicknameList)
}
CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList(const CMsgClientPlayerNicknameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nicknames_(from.nicknames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&removal_, &from.removal_,
    static_cast<size_t>(reinterpret_cast<char*>(&incremental_) -
    reinterpret_cast<char*>(&removal_)) + sizeof(incremental_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPlayerNicknameList)
}

inline void CMsgClientPlayerNicknameList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&removal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&incremental_) -
    reinterpret_cast<char*>(&removal_)) + sizeof(incremental_));
}

CMsgClientPlayerNicknameList::~CMsgClientPlayerNicknameList() {
  // @@protoc_insertion_point(destructor:CMsgClientPlayerNicknameList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPlayerNicknameList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPlayerNicknameList::ArenaDtor(void* object) {
  CMsgClientPlayerNicknameList* _this = reinterpret_cast< CMsgClientPlayerNicknameList* >(object);
  (void)_this;
}
void CMsgClientPlayerNicknameList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPlayerNicknameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPlayerNicknameList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPlayerNicknameList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nicknames_.Clear();
  ::memset(&removal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incremental_) -
      reinterpret_cast<char*>(&removal_)) + sizeof(incremental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPlayerNicknameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool removal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_removal(&has_bits);
          removal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool incremental = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_incremental(&has_bits);
          incremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nicknames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPlayerNicknameList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPlayerNicknameList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool removal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_removal(), target);
  }

  // optional bool incremental = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_incremental(), target);
  }

  // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nicknames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nicknames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPlayerNicknameList)
  return target;
}

size_t CMsgClientPlayerNicknameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPlayerNicknameList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  total_size += 1UL * this->_internal_nicknames_size();
  for (const auto& msg : this->nicknames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool removal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool incremental = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPlayerNicknameList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPlayerNicknameList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPlayerNicknameList::GetClassData() const { return &_class_data_; }

void CMsgClientPlayerNicknameList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPlayerNicknameList *>(to)->MergeFrom(
      static_cast<const CMsgClientPlayerNicknameList &>(from));
}


void CMsgClientPlayerNicknameList::MergeFrom(const CMsgClientPlayerNicknameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPlayerNicknameList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nicknames_.MergeFrom(from.nicknames_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      removal_ = from.removal_;
    }
    if (cached_has_bits & 0x00000002u) {
      incremental_ = from.incremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPlayerNicknameList::CopyFrom(const CMsgClientPlayerNicknameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPlayerNicknameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList::IsInitialized() const {
  return true;
}

void CMsgClientPlayerNicknameList::InternalSwap(CMsgClientPlayerNicknameList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nicknames_.InternalSwap(&other->nicknames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPlayerNicknameList, incremental_)
      + sizeof(CMsgClientPlayerNicknameList::incremental_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPlayerNicknameList, removal_)>(
          reinterpret_cast<char*>(&removal_),
          reinterpret_cast<char*>(&other->removal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPlayerNicknameList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[12]);
}

// ===================================================================

class CMsgClientSetPlayerNickname::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSetPlayerNickname>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSetPlayerNickname)
}
CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname(const CMsgClientSetPlayerNickname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSetPlayerNickname)
}

inline void CMsgClientSetPlayerNickname::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CMsgClientSetPlayerNickname::~CMsgClientSetPlayerNickname() {
  // @@protoc_insertion_point(destructor:CMsgClientSetPlayerNickname)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSetPlayerNickname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSetPlayerNickname::ArenaDtor(void* object) {
  CMsgClientSetPlayerNickname* _this = reinterpret_cast< CMsgClientSetPlayerNickname* >(object);
  (void)_this;
}
void CMsgClientSetPlayerNickname::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSetPlayerNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSetPlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSetPlayerNickname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSetPlayerNickname::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSetPlayerNickname.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSetPlayerNickname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSetPlayerNickname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSetPlayerNickname.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSetPlayerNickname)
  return target;
}

size_t CMsgClientSetPlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSetPlayerNickname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSetPlayerNickname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSetPlayerNickname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSetPlayerNickname::GetClassData() const { return &_class_data_; }

void CMsgClientSetPlayerNickname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSetPlayerNickname *>(to)->MergeFrom(
      static_cast<const CMsgClientSetPlayerNickname &>(from));
}


void CMsgClientSetPlayerNickname::MergeFrom(const CMsgClientSetPlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSetPlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSetPlayerNickname::CopyFrom(const CMsgClientSetPlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSetPlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNickname::IsInitialized() const {
  return true;
}

void CMsgClientSetPlayerNickname::InternalSwap(CMsgClientSetPlayerNickname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSetPlayerNickname::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[13]);
}

// ===================================================================

class CMsgClientSetPlayerNicknameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSetPlayerNicknameResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSetPlayerNicknameResponse)
}
CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse(const CMsgClientSetPlayerNicknameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSetPlayerNicknameResponse)
}

inline void CMsgClientSetPlayerNicknameResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgClientSetPlayerNicknameResponse::~CMsgClientSetPlayerNicknameResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientSetPlayerNicknameResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSetPlayerNicknameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSetPlayerNicknameResponse::ArenaDtor(void* object) {
  CMsgClientSetPlayerNicknameResponse* _this = reinterpret_cast< CMsgClientSetPlayerNicknameResponse* >(object);
  (void)_this;
}
void CMsgClientSetPlayerNicknameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSetPlayerNicknameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSetPlayerNicknameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSetPlayerNicknameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSetPlayerNicknameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSetPlayerNicknameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSetPlayerNicknameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSetPlayerNicknameResponse)
  return target;
}

size_t CMsgClientSetPlayerNicknameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSetPlayerNicknameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSetPlayerNicknameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSetPlayerNicknameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSetPlayerNicknameResponse::GetClassData() const { return &_class_data_; }

void CMsgClientSetPlayerNicknameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSetPlayerNicknameResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientSetPlayerNicknameResponse &>(from));
}


void CMsgClientSetPlayerNicknameResponse::MergeFrom(const CMsgClientSetPlayerNicknameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSetPlayerNicknameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const CMsgClientSetPlayerNicknameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSetPlayerNicknameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNicknameResponse::IsInitialized() const {
  return true;
}

void CMsgClientSetPlayerNicknameResponse::InternalSwap(CMsgClientSetPlayerNicknameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSetPlayerNicknameResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[14]);
}

// ===================================================================

class CMsgClientRequestFriendData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestFriendData>()._has_bits_);
  static void set_has_persona_state_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRequestFriendData::CMsgClientRequestFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestFriendData)
}
CMsgClientRequestFriendData::CMsgClientRequestFriendData(const CMsgClientRequestFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_state_requested_ = from.persona_state_requested_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestFriendData)
}

inline void CMsgClientRequestFriendData::SharedCtor() {
persona_state_requested_ = 0u;
}

CMsgClientRequestFriendData::~CMsgClientRequestFriendData() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestFriendData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRequestFriendData::ArenaDtor(void* object) {
  CMsgClientRequestFriendData* _this = reinterpret_cast< CMsgClientRequestFriendData* >(object);
  (void)_this;
}
void CMsgClientRequestFriendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestFriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestFriendData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  persona_state_requested_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestFriendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 persona_state_requested = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_persona_state_requested(&has_bits);
          persona_state_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_friends(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_friends(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestFriendData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestFriendData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state_requested = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_persona_state_requested(), target);
  }

  // repeated fixed64 friends = 2;
  for (int i = 0, n = this->_internal_friends_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_friends(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestFriendData)
  return target;
}

size_t CMsgClientRequestFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestFriendData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 friends = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_friends_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_friends_size());
    total_size += data_size;
  }

  // optional uint32 persona_state_requested = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_persona_state_requested());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestFriendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestFriendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestFriendData::GetClassData() const { return &_class_data_; }

void CMsgClientRequestFriendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestFriendData *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestFriendData &>(from));
}


void CMsgClientRequestFriendData::MergeFrom(const CMsgClientRequestFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from._internal_has_persona_state_requested()) {
    _internal_set_persona_state_requested(from._internal_persona_state_requested());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestFriendData::CopyFrom(const CMsgClientRequestFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFriendData::IsInitialized() const {
  return true;
}

void CMsgClientRequestFriendData::InternalSwap(CMsgClientRequestFriendData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_.InternalSwap(&other->friends_);
  swap(persona_state_requested_, other->persona_state_requested_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestFriendData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[15]);
}

// ===================================================================

class CMsgClientChangeStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChangeStatus>()._has_bits_);
  static void set_has_persona_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_auto_generated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_high_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_persona_set_by_user(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_persona_state_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_need_persona_response(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_client_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgClientChangeStatus::CMsgClientChangeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientChangeStatus)
}
CMsgClientChangeStatus::CMsgClientChangeStatus(const CMsgClientChangeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&persona_state_, &from.persona_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_client_idle_) -
    reinterpret_cast<char*>(&persona_state_)) + sizeof(is_client_idle_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientChangeStatus)
}

inline void CMsgClientChangeStatus::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&persona_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_client_idle_) -
    reinterpret_cast<char*>(&persona_state_)) + sizeof(is_client_idle_));
}

CMsgClientChangeStatus::~CMsgClientChangeStatus() {
  // @@protoc_insertion_point(destructor:CMsgClientChangeStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientChangeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientChangeStatus::ArenaDtor(void* object) {
  CMsgClientChangeStatus* _this = reinterpret_cast< CMsgClientChangeStatus* >(object);
  (void)_this;
}
void CMsgClientChangeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientChangeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientChangeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChangeStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&persona_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_client_idle_) -
        reinterpret_cast<char*>(&persona_state_)) + sizeof(is_client_idle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChangeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 persona_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_persona_state(&has_bits);
          persona_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientChangeStatus.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_auto_generated_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_auto_generated_name(&has_bits);
          is_auto_generated_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool high_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_high_priority(&has_bits);
          high_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool persona_set_by_user = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_persona_set_by_user(&has_bits);
          persona_set_by_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 persona_state_flags = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_persona_state_flags(&has_bits);
          persona_state_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool need_persona_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_need_persona_response(&has_bits);
          need_persona_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_client_idle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_client_idle(&has_bits);
          is_client_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientChangeStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChangeStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 persona_state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_persona_state(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientChangeStatus.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // optional bool is_auto_generated_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_auto_generated_name(), target);
  }

  // optional bool high_priority = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_high_priority(), target);
  }

  // optional bool persona_set_by_user = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_persona_set_by_user(), target);
  }

  // optional uint32 persona_state_flags = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_persona_state_flags(), target);
  }

  // optional bool need_persona_response = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_need_persona_response(), target);
  }

  // optional bool is_client_idle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_client_idle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChangeStatus)
  return target;
}

size_t CMsgClientChangeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChangeStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 persona_state = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_persona_state());
    }

    // optional bool is_auto_generated_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool high_priority = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool persona_set_by_user = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool need_persona_response = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 persona_state_flags = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_persona_state_flags());
    }

    // optional bool is_client_idle = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientChangeStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientChangeStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientChangeStatus::GetClassData() const { return &_class_data_; }

void CMsgClientChangeStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientChangeStatus *>(to)->MergeFrom(
      static_cast<const CMsgClientChangeStatus &>(from));
}


void CMsgClientChangeStatus::MergeFrom(const CMsgClientChangeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      persona_state_ = from.persona_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_auto_generated_name_ = from.is_auto_generated_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      high_priority_ = from.high_priority_;
    }
    if (cached_has_bits & 0x00000010u) {
      persona_set_by_user_ = from.persona_set_by_user_;
    }
    if (cached_has_bits & 0x00000020u) {
      need_persona_response_ = from.need_persona_response_;
    }
    if (cached_has_bits & 0x00000040u) {
      persona_state_flags_ = from.persona_state_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_client_idle_ = from.is_client_idle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientChangeStatus::CopyFrom(const CMsgClientChangeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChangeStatus::IsInitialized() const {
  return true;
}

void CMsgClientChangeStatus::InternalSwap(CMsgClientChangeStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &player_name_, lhs_arena,
      &other->player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientChangeStatus, is_client_idle_)
      + sizeof(CMsgClientChangeStatus::is_client_idle_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientChangeStatus, persona_state_)>(
          reinterpret_cast<char*>(&persona_state_),
          reinterpret_cast<char*>(&other->persona_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChangeStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[16]);
}

// ===================================================================

class CMsgPersonaChangeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPersonaChangeResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPersonaChangeResponse::CMsgPersonaChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgPersonaChangeResponse)
}
CMsgPersonaChangeResponse::CMsgPersonaChangeResponse(const CMsgPersonaChangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgPersonaChangeResponse)
}

inline void CMsgPersonaChangeResponse::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = 0u;
}

CMsgPersonaChangeResponse::~CMsgPersonaChangeResponse() {
  // @@protoc_insertion_point(destructor:CMsgPersonaChangeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgPersonaChangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPersonaChangeResponse::ArenaDtor(void* object) {
  CMsgPersonaChangeResponse* _this = reinterpret_cast< CMsgPersonaChangeResponse* >(object);
  (void)_this;
}
void CMsgPersonaChangeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPersonaChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPersonaChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPersonaChangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmpty();
  }
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPersonaChangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPersonaChangeResponse.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPersonaChangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPersonaChangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPersonaChangeResponse.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPersonaChangeResponse)
  return target;
}

size_t CMsgPersonaChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPersonaChangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPersonaChangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgPersonaChangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPersonaChangeResponse::GetClassData() const { return &_class_data_; }

void CMsgPersonaChangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgPersonaChangeResponse *>(to)->MergeFrom(
      static_cast<const CMsgPersonaChangeResponse &>(from));
}


void CMsgPersonaChangeResponse::MergeFrom(const CMsgPersonaChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPersonaChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPersonaChangeResponse::CopyFrom(const CMsgPersonaChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPersonaChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPersonaChangeResponse::IsInitialized() const {
  return true;
}

void CMsgPersonaChangeResponse::InternalSwap(CMsgPersonaChangeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &player_name_, lhs_arena,
      &other->player_name_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPersonaChangeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[17]);
}

// ===================================================================

class CMsgClientPersonaState_Friend_ClanData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPersonaState_Friend_ClanData>()._has_bits_);
  static void set_has_ogg_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPersonaState_Friend_ClanData::CMsgClientPersonaState_Friend_ClanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPersonaState.Friend.ClanData)
}
CMsgClientPersonaState_Friend_ClanData::CMsgClientPersonaState_Friend_ClanData(const CMsgClientPersonaState_Friend_ClanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_group_id_, &from.chat_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ogg_app_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ogg_app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPersonaState.Friend.ClanData)
}

inline void CMsgClientPersonaState_Friend_ClanData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ogg_app_id_) -
    reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ogg_app_id_));
}

CMsgClientPersonaState_Friend_ClanData::~CMsgClientPersonaState_Friend_ClanData() {
  // @@protoc_insertion_point(destructor:CMsgClientPersonaState.Friend.ClanData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPersonaState_Friend_ClanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPersonaState_Friend_ClanData::ArenaDtor(void* object) {
  CMsgClientPersonaState_Friend_ClanData* _this = reinterpret_cast< CMsgClientPersonaState_Friend_ClanData* >(object);
  (void)_this;
}
void CMsgClientPersonaState_Friend_ClanData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPersonaState_Friend_ClanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPersonaState_Friend_ClanData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPersonaState.Friend.ClanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&chat_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ogg_app_id_) -
        reinterpret_cast<char*>(&chat_group_id_)) + sizeof(ogg_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPersonaState_Friend_ClanData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ogg_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ogg_app_id(&has_bits);
          ogg_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chat_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_group_id(&has_bits);
          chat_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPersonaState_Friend_ClanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPersonaState.Friend.ClanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ogg_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ogg_app_id(), target);
  }

  // optional uint64 chat_group_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPersonaState.Friend.ClanData)
  return target;
}

size_t CMsgClientPersonaState_Friend_ClanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPersonaState.Friend.ClanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 chat_group_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chat_group_id());
    }

    // optional uint32 ogg_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ogg_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPersonaState_Friend_ClanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPersonaState_Friend_ClanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPersonaState_Friend_ClanData::GetClassData() const { return &_class_data_; }

void CMsgClientPersonaState_Friend_ClanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPersonaState_Friend_ClanData *>(to)->MergeFrom(
      static_cast<const CMsgClientPersonaState_Friend_ClanData &>(from));
}


void CMsgClientPersonaState_Friend_ClanData::MergeFrom(const CMsgClientPersonaState_Friend_ClanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPersonaState.Friend.ClanData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chat_group_id_ = from.chat_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ogg_app_id_ = from.ogg_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPersonaState_Friend_ClanData::CopyFrom(const CMsgClientPersonaState_Friend_ClanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPersonaState.Friend.ClanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend_ClanData::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState_Friend_ClanData::InternalSwap(CMsgClientPersonaState_Friend_ClanData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPersonaState_Friend_ClanData, ogg_app_id_)
      + sizeof(CMsgClientPersonaState_Friend_ClanData::ogg_app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPersonaState_Friend_ClanData, chat_group_id_)>(
          reinterpret_cast<char*>(&chat_group_id_),
          reinterpret_cast<char*>(&other->chat_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPersonaState_Friend_ClanData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[18]);
}

// ===================================================================

class CMsgClientPersonaState_Friend_KV::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPersonaState_Friend_KV>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientPersonaState_Friend_KV::CMsgClientPersonaState_Friend_KV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPersonaState.Friend.KV)
}
CMsgClientPersonaState_Friend_KV::CMsgClientPersonaState_Friend_KV(const CMsgClientPersonaState_Friend_KV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientPersonaState.Friend.KV)
}

inline void CMsgClientPersonaState_Friend_KV::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientPersonaState_Friend_KV::~CMsgClientPersonaState_Friend_KV() {
  // @@protoc_insertion_point(destructor:CMsgClientPersonaState.Friend.KV)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPersonaState_Friend_KV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPersonaState_Friend_KV::ArenaDtor(void* object) {
  CMsgClientPersonaState_Friend_KV* _this = reinterpret_cast< CMsgClientPersonaState_Friend_KV* >(object);
  (void)_this;
}
void CMsgClientPersonaState_Friend_KV::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPersonaState_Friend_KV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPersonaState_Friend_KV::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPersonaState.Friend.KV)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPersonaState_Friend_KV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPersonaState.Friend.KV.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPersonaState.Friend.KV.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPersonaState_Friend_KV::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPersonaState.Friend.KV)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPersonaState.Friend.KV.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPersonaState.Friend.KV.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPersonaState.Friend.KV)
  return target;
}

size_t CMsgClientPersonaState_Friend_KV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPersonaState.Friend.KV)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPersonaState_Friend_KV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPersonaState_Friend_KV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPersonaState_Friend_KV::GetClassData() const { return &_class_data_; }

void CMsgClientPersonaState_Friend_KV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPersonaState_Friend_KV *>(to)->MergeFrom(
      static_cast<const CMsgClientPersonaState_Friend_KV &>(from));
}


void CMsgClientPersonaState_Friend_KV::MergeFrom(const CMsgClientPersonaState_Friend_KV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPersonaState.Friend.KV)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPersonaState_Friend_KV::CopyFrom(const CMsgClientPersonaState_Friend_KV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPersonaState.Friend.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend_KV::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState_Friend_KV::InternalSwap(CMsgClientPersonaState_Friend_KV* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPersonaState_Friend_KV::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[19]);
}

// ===================================================================

class CMsgClientPersonaState_Friend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPersonaState_Friend>()._has_bits_);
  static void set_has_friendid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_persona_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_played_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_game_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_game_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_persona_state_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_online_session_instances(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_persona_set_by_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_query_port(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_steamid_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_avatar_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_logoff(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_last_logon(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_seen_online(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_clan_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_game_data_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgClientPersonaState_Friend_ClanData& clan_data(const CMsgClientPersonaState_Friend* msg);
  static void set_has_clan_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_clan_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_game_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_watching_broadcast_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_watching_broadcast_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_watching_broadcast_viewers(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_watching_broadcast_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_community_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_player_name_pending_review(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_avatar_pending_review(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

const ::CMsgClientPersonaState_Friend_ClanData&
CMsgClientPersonaState_Friend::_Internal::clan_data(const CMsgClientPersonaState_Friend* msg) {
  return *msg->clan_data_;
}
CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rich_presence_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPersonaState.Friend)
}
CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend(const CMsgClientPersonaState_Friend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rich_presence_(from.rich_presence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArenaForAllocation());
  }
  avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_hash()) {
    avatar_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_hash(), 
      GetArenaForAllocation());
  }
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArenaForAllocation());
  }
  game_data_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_data_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_data_blob()) {
    game_data_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_data_blob(), 
      GetArenaForAllocation());
  }
  clan_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    clan_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clan_tag()) {
    clan_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clan_tag(), 
      GetArenaForAllocation());
  }
  watching_broadcast_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    watching_broadcast_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_watching_broadcast_title()) {
    watching_broadcast_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_watching_broadcast_title(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_clan_data()) {
    clan_data_ = new ::CMsgClientPersonaState_Friend_ClanData(*from.clan_data_);
  } else {
    clan_data_ = nullptr;
  }
  ::memcpy(&friendid_, &from.friendid_,
    static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_appid_) -
    reinterpret_cast<char*>(&friendid_)) + sizeof(watching_broadcast_appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPersonaState.Friend)
}

inline void CMsgClientPersonaState_Friend::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
avatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_data_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_data_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clan_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clan_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
watching_broadcast_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  watching_broadcast_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clan_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&watching_broadcast_appid_) -
    reinterpret_cast<char*>(&clan_data_)) + sizeof(watching_broadcast_appid_));
}

CMsgClientPersonaState_Friend::~CMsgClientPersonaState_Friend() {
  // @@protoc_insertion_point(destructor:CMsgClientPersonaState.Friend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPersonaState_Friend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_data_blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  watching_broadcast_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_data_;
}

void CMsgClientPersonaState_Friend::ArenaDtor(void* object) {
  CMsgClientPersonaState_Friend* _this = reinterpret_cast< CMsgClientPersonaState_Friend* >(object);
  (void)_this;
}
void CMsgClientPersonaState_Friend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPersonaState_Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPersonaState_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPersonaState.Friend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rich_presence_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      avatar_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      game_data_blob_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      clan_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      watching_broadcast_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(clan_data_ != nullptr);
      clan_data_->Clear();
    }
  }
  friendid_ = uint64_t{0u};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&persona_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_viewers_) -
        reinterpret_cast<char*>(&persona_state_)) + sizeof(watching_broadcast_viewers_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&query_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_community_banned_) -
        reinterpret_cast<char*>(&query_port_)) + sizeof(is_community_banned_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&player_name_pending_review_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watching_broadcast_appid_) -
        reinterpret_cast<char*>(&player_name_pending_review_)) + sizeof(watching_broadcast_appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPersonaState_Friend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 friendid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_friendid(&has_bits);
          friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 persona_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_persona_state(&has_bits);
          persona_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_played_app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_played_app_id(&has_bits);
          game_played_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_server_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_server_ip(&has_bits);
          game_server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_server_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_game_server_port(&has_bits);
          game_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 persona_state_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_persona_state_flags(&has_bits);
          persona_state_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 online_session_instances = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_online_session_instances(&has_bits);
          online_session_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool persona_set_by_user = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_persona_set_by_user(&has_bits);
          persona_set_by_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPersonaState.Friend.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 query_port = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_query_port(&has_bits);
          query_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_source = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_steamid_source(&has_bits);
          steamid_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes avatar_hash = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_avatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_logoff = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_last_logoff(&has_bits);
          last_logoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_logon = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_last_logon(&has_bits);
          last_logon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_seen_online = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_last_seen_online(&has_bits);
          last_seen_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 clan_rank = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_clan_rank(&has_bits);
          clan_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_name = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPersonaState.Friend.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 gameid = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes game_data_blob = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_game_data_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string clan_tag = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clan_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPersonaState.Friend.clan_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rich_presence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<570>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 game_lobby_id = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_game_lobby_id(&has_bits);
          game_lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watching_broadcast_accountid = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_watching_broadcast_accountid(&has_bits);
          watching_broadcast_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watching_broadcast_appid = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_watching_broadcast_appid(&has_bits);
          watching_broadcast_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 watching_broadcast_viewers = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_watching_broadcast_viewers(&has_bits);
          watching_broadcast_viewers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string watching_broadcast_title = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_watching_broadcast_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientPersonaState.Friend.watching_broadcast_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_community_banned = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_community_banned(&has_bits);
          is_community_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool player_name_pending_review = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_player_name_pending_review(&has_bits);
          player_name_pending_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool avatar_pending_review = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_avatar_pending_review(&has_bits);
          avatar_pending_review_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPersonaState_Friend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPersonaState.Friend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friendid = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_friendid(), target);
  }

  // optional uint32 persona_state = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_persona_state(), target);
  }

  // optional uint32 game_played_app_id = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_played_app_id(), target);
  }

  // optional uint32 game_server_ip = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_server_ip(), target);
  }

  // optional uint32 game_server_port = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_game_server_port(), target);
  }

  // optional uint32 persona_state_flags = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_persona_state_flags(), target);
  }

  // optional uint32 online_session_instances = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_online_session_instances(), target);
  }

  // optional bool persona_set_by_user = 10;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_persona_set_by_user(), target);
  }

  // optional string player_name = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPersonaState.Friend.player_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_player_name(), target);
  }

  // optional uint32 query_port = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_query_port(), target);
  }

  // optional fixed64 steamid_source = 25;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(25, this->_internal_steamid_source(), target);
  }

  // optional bytes avatar_hash = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_avatar_hash(), target);
  }

  // optional uint32 last_logoff = 45;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_last_logoff(), target);
  }

  // optional uint32 last_logon = 46;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_last_logon(), target);
  }

  // optional uint32 last_seen_online = 47;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_last_seen_online(), target);
  }

  // optional uint32 clan_rank = 50;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_clan_rank(), target);
  }

  // optional string game_name = 55;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPersonaState.Friend.game_name");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_game_name(), target);
  }

  // optional fixed64 gameid = 56;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(56, this->_internal_gameid(), target);
  }

  // optional bytes game_data_blob = 60;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_game_data_blob(), target);
  }

  // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        64, _Internal::clan_data(this), target, stream);
  }

  // optional string clan_tag = 65;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clan_tag().data(), static_cast<int>(this->_internal_clan_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPersonaState.Friend.clan_tag");
    target = stream->WriteStringMaybeAliased(
        65, this->_internal_clan_tag(), target);
  }

  // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rich_presence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, this->_internal_rich_presence(i), target, stream);
  }

  // optional fixed64 broadcast_id = 72;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(72, this->_internal_broadcast_id(), target);
  }

  // optional fixed64 game_lobby_id = 73;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(73, this->_internal_game_lobby_id(), target);
  }

  // optional uint32 watching_broadcast_accountid = 74;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(74, this->_internal_watching_broadcast_accountid(), target);
  }

  // optional uint32 watching_broadcast_appid = 75;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_watching_broadcast_appid(), target);
  }

  // optional uint32 watching_broadcast_viewers = 76;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(76, this->_internal_watching_broadcast_viewers(), target);
  }

  // optional string watching_broadcast_title = 77;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_watching_broadcast_title().data(), static_cast<int>(this->_internal_watching_broadcast_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientPersonaState.Friend.watching_broadcast_title");
    target = stream->WriteStringMaybeAliased(
        77, this->_internal_watching_broadcast_title(), target);
  }

  // optional bool is_community_banned = 78;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(78, this->_internal_is_community_banned(), target);
  }

  // optional bool player_name_pending_review = 79;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(79, this->_internal_player_name_pending_review(), target);
  }

  // optional bool avatar_pending_review = 80;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(80, this->_internal_avatar_pending_review(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPersonaState.Friend)
  return target;
}

size_t CMsgClientPersonaState_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPersonaState.Friend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
  total_size += 2UL * this->_internal_rich_presence_size();
  for (const auto& msg : this->rich_presence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional bytes avatar_hash = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_avatar_hash());
    }

    // optional string game_name = 55;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional bytes game_data_blob = 60;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_data_blob());
    }

    // optional string clan_tag = 65;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clan_tag());
    }

    // optional string watching_broadcast_title = 77;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_watching_broadcast_title());
    }

    // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clan_data_);
    }

    // optional fixed64 friendid = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 persona_state = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_persona_state());
    }

    // optional uint32 game_played_app_id = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_played_app_id());
    }

    // optional uint32 game_server_ip = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_server_ip());
    }

    // optional uint32 game_server_port = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_server_port());
    }

    // optional uint32 persona_state_flags = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_persona_state_flags());
    }

    // optional uint32 online_session_instances = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_online_session_instances());
    }

    // optional fixed64 steamid_source = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional uint32 watching_broadcast_viewers = 76;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_watching_broadcast_viewers());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 query_port = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_query_port());
    }

    // optional uint32 last_logoff = 45;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_logoff());
    }

    // optional uint32 last_logon = 46;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_logon());
    }

    // optional uint32 last_seen_online = 47;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_seen_online());
    }

    // optional fixed64 gameid = 56;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional uint32 clan_rank = 50;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_clan_rank());
    }

    // optional bool persona_set_by_user = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool is_community_banned = 78;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional bool player_name_pending_review = 79;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool avatar_pending_review = 80;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional fixed64 broadcast_id = 72;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 game_lobby_id = 73;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional uint32 watching_broadcast_accountid = 74;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_watching_broadcast_accountid());
    }

    // optional uint32 watching_broadcast_appid = 75;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_watching_broadcast_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPersonaState_Friend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPersonaState_Friend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPersonaState_Friend::GetClassData() const { return &_class_data_; }

void CMsgClientPersonaState_Friend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPersonaState_Friend *>(to)->MergeFrom(
      static_cast<const CMsgClientPersonaState_Friend &>(from));
}


void CMsgClientPersonaState_Friend::MergeFrom(const CMsgClientPersonaState_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPersonaState.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rich_presence_.MergeFrom(from.rich_presence_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_avatar_hash(from._internal_avatar_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_game_data_blob(from._internal_game_data_blob());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_clan_tag(from._internal_clan_tag());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_watching_broadcast_title(from._internal_watching_broadcast_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_clan_data()->::CMsgClientPersonaState_Friend_ClanData::MergeFrom(from._internal_clan_data());
    }
    if (cached_has_bits & 0x00000080u) {
      friendid_ = from.friendid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      persona_state_ = from.persona_state_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_played_app_id_ = from.game_played_app_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      game_server_ip_ = from.game_server_ip_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_server_port_ = from.game_server_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      persona_state_flags_ = from.persona_state_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      online_session_instances_ = from.online_session_instances_;
    }
    if (cached_has_bits & 0x00004000u) {
      steamid_source_ = from.steamid_source_;
    }
    if (cached_has_bits & 0x00008000u) {
      watching_broadcast_viewers_ = from.watching_broadcast_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      query_port_ = from.query_port_;
    }
    if (cached_has_bits & 0x00020000u) {
      last_logoff_ = from.last_logoff_;
    }
    if (cached_has_bits & 0x00040000u) {
      last_logon_ = from.last_logon_;
    }
    if (cached_has_bits & 0x00080000u) {
      last_seen_online_ = from.last_seen_online_;
    }
    if (cached_has_bits & 0x00100000u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00200000u) {
      clan_rank_ = from.clan_rank_;
    }
    if (cached_has_bits & 0x00400000u) {
      persona_set_by_user_ = from.persona_set_by_user_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_community_banned_ = from.is_community_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      player_name_pending_review_ = from.player_name_pending_review_;
    }
    if (cached_has_bits & 0x02000000u) {
      avatar_pending_review_ = from.avatar_pending_review_;
    }
    if (cached_has_bits & 0x04000000u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      game_lobby_id_ = from.game_lobby_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      watching_broadcast_accountid_ = from.watching_broadcast_accountid_;
    }
    if (cached_has_bits & 0x20000000u) {
      watching_broadcast_appid_ = from.watching_broadcast_appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPersonaState_Friend::CopyFrom(const CMsgClientPersonaState_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPersonaState.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState_Friend::InternalSwap(CMsgClientPersonaState_Friend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rich_presence_.InternalSwap(&other->rich_presence_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &player_name_, lhs_arena,
      &other->player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_hash_, lhs_arena,
      &other->avatar_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_name_, lhs_arena,
      &other->game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_data_blob_, lhs_arena,
      &other->game_data_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clan_tag_, lhs_arena,
      &other->clan_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &watching_broadcast_title_, lhs_arena,
      &other->watching_broadcast_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPersonaState_Friend, watching_broadcast_appid_)
      + sizeof(CMsgClientPersonaState_Friend::watching_broadcast_appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPersonaState_Friend, clan_data_)>(
          reinterpret_cast<char*>(&clan_data_),
          reinterpret_cast<char*>(&other->clan_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPersonaState_Friend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[20]);
}

// ===================================================================

class CMsgClientPersonaState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPersonaState>()._has_bits_);
  static void set_has_status_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPersonaState::CMsgClientPersonaState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPersonaState)
}
CMsgClientPersonaState::CMsgClientPersonaState(const CMsgClientPersonaState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_flags_ = from.status_flags_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientPersonaState)
}

inline void CMsgClientPersonaState::SharedCtor() {
status_flags_ = 0u;
}

CMsgClientPersonaState::~CMsgClientPersonaState() {
  // @@protoc_insertion_point(destructor:CMsgClientPersonaState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPersonaState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPersonaState::ArenaDtor(void* object) {
  CMsgClientPersonaState* _this = reinterpret_cast< CMsgClientPersonaState* >(object);
  (void)_this;
}
void CMsgClientPersonaState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPersonaState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPersonaState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPersonaState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  status_flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPersonaState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status_flags(&has_bits);
          status_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientPersonaState.Friend friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPersonaState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPersonaState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status_flags(), target);
  }

  // repeated .CMsgClientPersonaState.Friend friends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPersonaState)
  return target;
}

size_t CMsgClientPersonaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPersonaState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientPersonaState.Friend friends = 2;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 status_flags = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPersonaState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPersonaState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPersonaState::GetClassData() const { return &_class_data_; }

void CMsgClientPersonaState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPersonaState *>(to)->MergeFrom(
      static_cast<const CMsgClientPersonaState &>(from));
}


void CMsgClientPersonaState::MergeFrom(const CMsgClientPersonaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPersonaState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from._internal_has_status_flags()) {
    _internal_set_status_flags(from._internal_status_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPersonaState::CopyFrom(const CMsgClientPersonaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPersonaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState::IsInitialized() const {
  return true;
}

void CMsgClientPersonaState::InternalSwap(CMsgClientPersonaState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_.InternalSwap(&other->friends_);
  swap(status_flags_, other->status_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPersonaState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[21]);
}

// ===================================================================

class CMsgClientFriendProfileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendProfileInfo>()._has_bits_);
  static void set_has_steamid_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendProfileInfo)
}
CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo(const CMsgClientFriendProfileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_friend_ = from.steamid_friend_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendProfileInfo)
}

inline void CMsgClientFriendProfileInfo::SharedCtor() {
steamid_friend_ = uint64_t{0u};
}

CMsgClientFriendProfileInfo::~CMsgClientFriendProfileInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendProfileInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendProfileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFriendProfileInfo::ArenaDtor(void* object) {
  CMsgClientFriendProfileInfo* _this = reinterpret_cast< CMsgClientFriendProfileInfo* >(object);
  (void)_this;
}
void CMsgClientFriendProfileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendProfileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendProfileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendProfileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_friend_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendProfileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_friend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_friend(&has_bits);
          steamid_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendProfileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendProfileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_friend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendProfileInfo)
  return target;
}

size_t CMsgClientFriendProfileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendProfileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid_friend = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendProfileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendProfileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendProfileInfo::GetClassData() const { return &_class_data_; }

void CMsgClientFriendProfileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendProfileInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendProfileInfo &>(from));
}


void CMsgClientFriendProfileInfo::MergeFrom(const CMsgClientFriendProfileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendProfileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid_friend()) {
    _internal_set_steamid_friend(from._internal_steamid_friend());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendProfileInfo::CopyFrom(const CMsgClientFriendProfileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendProfileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfo::IsInitialized() const {
  return true;
}

void CMsgClientFriendProfileInfo::InternalSwap(CMsgClientFriendProfileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_friend_, other->steamid_friend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendProfileInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[22]);
}

// ===================================================================

class CMsgClientFriendProfileInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendProfileInfoResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steamid_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_city_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_country_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendProfileInfoResponse)
}
CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse(const CMsgClientFriendProfileInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    real_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_real_name()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArenaForAllocation());
  }
  city_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    city_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_city_name()) {
    city_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_city_name(), 
      GetArenaForAllocation());
  }
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_state_name()) {
    state_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state_name(), 
      GetArenaForAllocation());
  }
  country_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_name()) {
    country_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_name(), 
      GetArenaForAllocation());
  }
  headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_headline()) {
    headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headline(), 
      GetArenaForAllocation());
  }
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_summary()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_friend_, &from.steamid_friend_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendProfileInfoResponse)
}

inline void CMsgClientFriendProfileInfoResponse::SharedCtor() {
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  real_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
city_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  city_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
country_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_friend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(time_created_));
eresult_ = 2;
}

CMsgClientFriendProfileInfoResponse::~CMsgClientFriendProfileInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendProfileInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendProfileInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendProfileInfoResponse::ArenaDtor(void* object) {
  CMsgClientFriendProfileInfoResponse* _this = reinterpret_cast< CMsgClientFriendProfileInfoResponse* >(object);
  (void)_this;
}
void CMsgClientFriendProfileInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendProfileInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendProfileInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendProfileInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      real_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      city_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      state_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      country_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      summary_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&steamid_friend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_created_) -
        reinterpret_cast<char*>(&steamid_friend_)) + sizeof(time_created_));
  }
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendProfileInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_friend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid_friend(&has_bits);
          steamid_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_created = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string real_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendProfileInfoResponse.real_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string city_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_city_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendProfileInfoResponse.city_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string state_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendProfileInfoResponse.state_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_country_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendProfileInfoResponse.country_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string headline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendProfileInfoResponse.headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string summary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendProfileInfoResponse.summary");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendProfileInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendProfileInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional fixed64 steamid_friend = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_friend(), target);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_created(), target);
  }

  // optional string real_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendProfileInfoResponse.real_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_real_name(), target);
  }

  // optional string city_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_city_name().data(), static_cast<int>(this->_internal_city_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendProfileInfoResponse.city_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_city_name(), target);
  }

  // optional string state_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state_name().data(), static_cast<int>(this->_internal_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendProfileInfoResponse.state_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state_name(), target);
  }

  // optional string country_name = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_name().data(), static_cast<int>(this->_internal_country_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendProfileInfoResponse.country_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country_name(), target);
  }

  // optional string headline = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headline().data(), static_cast<int>(this->_internal_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendProfileInfoResponse.headline");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_headline(), target);
  }

  // optional string summary = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendProfileInfoResponse.summary");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_summary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendProfileInfoResponse)
  return target;
}

size_t CMsgClientFriendProfileInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendProfileInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string real_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional string city_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city_name());
    }

    // optional string state_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state_name());
    }

    // optional string country_name = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_name());
    }

    // optional string headline = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headline());
    }

    // optional string summary = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_summary());
    }

    // optional fixed64 steamid_friend = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_created());
    }

  }
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendProfileInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendProfileInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendProfileInfoResponse::GetClassData() const { return &_class_data_; }

void CMsgClientFriendProfileInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendProfileInfoResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendProfileInfoResponse &>(from));
}


void CMsgClientFriendProfileInfoResponse::MergeFrom(const CMsgClientFriendProfileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendProfileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_city_name(from._internal_city_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_state_name(from._internal_state_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_country_name(from._internal_country_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_headline(from._internal_headline());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_summary(from._internal_summary());
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_friend_ = from.steamid_friend_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const CMsgClientFriendProfileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendProfileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientFriendProfileInfoResponse::InternalSwap(CMsgClientFriendProfileInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &real_name_, lhs_arena,
      &other->real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &city_name_, lhs_arena,
      &other->city_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_name_, lhs_arena,
      &other->state_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_name_, lhs_arena,
      &other->country_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &headline_, lhs_arena,
      &other->headline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_, lhs_arena,
      &other->summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, time_created_)
      + sizeof(CMsgClientFriendProfileInfoResponse::time_created_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendProfileInfoResponse, steamid_friend_)>(
          reinterpret_cast<char*>(&steamid_friend_),
          reinterpret_cast<char*>(&other->steamid_friend_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendProfileInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[23]);
}

// ===================================================================

class CMsgClientCreateFriendsGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCreateFriendsGroup>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_groupname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamid_friends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCreateFriendsGroup)
}
CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup(const CMsgClientCreateFriendsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamid_friends_(from.steamid_friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupname()) {
    groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_groupname(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientCreateFriendsGroup)
}

inline void CMsgClientCreateFriendsGroup::SharedCtor() {
groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CMsgClientCreateFriendsGroup::~CMsgClientCreateFriendsGroup() {
  // @@protoc_insertion_point(destructor:CMsgClientCreateFriendsGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCreateFriendsGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientCreateFriendsGroup::ArenaDtor(void* object) {
  CMsgClientCreateFriendsGroup* _this = reinterpret_cast< CMsgClientCreateFriendsGroup* >(object);
  (void)_this;
}
void CMsgClientCreateFriendsGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCreateFriendsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCreateFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCreateFriendsGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_friends_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    groupname_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCreateFriendsGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string groupname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientCreateFriendsGroup.groupname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamid_friends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_friends(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_friends(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCreateFriendsGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCreateFriendsGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientCreateFriendsGroup.groupname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // repeated fixed64 steamid_friends = 3;
  for (int i = 0, n = this->_internal_steamid_friends_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid_friends(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCreateFriendsGroup)
  return target;
}

size_t CMsgClientCreateFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCreateFriendsGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_friends = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_friends_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_friends_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string groupname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupname());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCreateFriendsGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCreateFriendsGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCreateFriendsGroup::GetClassData() const { return &_class_data_; }

void CMsgClientCreateFriendsGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCreateFriendsGroup *>(to)->MergeFrom(
      static_cast<const CMsgClientCreateFriendsGroup &>(from));
}


void CMsgClientCreateFriendsGroup::MergeFrom(const CMsgClientCreateFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCreateFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_friends_.MergeFrom(from.steamid_friends_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_groupname(from._internal_groupname());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCreateFriendsGroup::CopyFrom(const CMsgClientCreateFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCreateFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientCreateFriendsGroup::InternalSwap(CMsgClientCreateFriendsGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_friends_.InternalSwap(&other->steamid_friends_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &groupname_, lhs_arena,
      &other->groupname_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCreateFriendsGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[24]);
}

// ===================================================================

class CMsgClientCreateFriendsGroupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCreateFriendsGroupResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCreateFriendsGroupResponse)
}
CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse(const CMsgClientCreateFriendsGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientCreateFriendsGroupResponse)
}

inline void CMsgClientCreateFriendsGroupResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eresult_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(groupid_));
}

CMsgClientCreateFriendsGroupResponse::~CMsgClientCreateFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientCreateFriendsGroupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCreateFriendsGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientCreateFriendsGroupResponse::ArenaDtor(void* object) {
  CMsgClientCreateFriendsGroupResponse* _this = reinterpret_cast< CMsgClientCreateFriendsGroupResponse* >(object);
  (void)_this;
}
void CMsgClientCreateFriendsGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCreateFriendsGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCreateFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCreateFriendsGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&eresult_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&eresult_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCreateFriendsGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCreateFriendsGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCreateFriendsGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCreateFriendsGroupResponse)
  return target;
}

size_t CMsgClientCreateFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCreateFriendsGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 eresult = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

    // optional int32 groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCreateFriendsGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCreateFriendsGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCreateFriendsGroupResponse::GetClassData() const { return &_class_data_; }

void CMsgClientCreateFriendsGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCreateFriendsGroupResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientCreateFriendsGroupResponse &>(from));
}


void CMsgClientCreateFriendsGroupResponse::MergeFrom(const CMsgClientCreateFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCreateFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const CMsgClientCreateFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCreateFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientCreateFriendsGroupResponse::InternalSwap(CMsgClientCreateFriendsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, groupid_)
      + sizeof(CMsgClientCreateFriendsGroupResponse::groupid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientCreateFriendsGroupResponse, eresult_)>(
          reinterpret_cast<char*>(&eresult_),
          reinterpret_cast<char*>(&other->eresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCreateFriendsGroupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[25]);
}

// ===================================================================

class CMsgClientDeleteFriendsGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDeleteFriendsGroup>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDeleteFriendsGroup)
}
CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup(const CMsgClientDeleteFriendsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientDeleteFriendsGroup)
}

inline void CMsgClientDeleteFriendsGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(groupid_));
}

CMsgClientDeleteFriendsGroup::~CMsgClientDeleteFriendsGroup() {
  // @@protoc_insertion_point(destructor:CMsgClientDeleteFriendsGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDeleteFriendsGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientDeleteFriendsGroup::ArenaDtor(void* object) {
  CMsgClientDeleteFriendsGroup* _this = reinterpret_cast< CMsgClientDeleteFriendsGroup* >(object);
  (void)_this;
}
void CMsgClientDeleteFriendsGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDeleteFriendsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDeleteFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDeleteFriendsGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDeleteFriendsGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDeleteFriendsGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDeleteFriendsGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDeleteFriendsGroup)
  return target;
}

size_t CMsgClientDeleteFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDeleteFriendsGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDeleteFriendsGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDeleteFriendsGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDeleteFriendsGroup::GetClassData() const { return &_class_data_; }

void CMsgClientDeleteFriendsGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDeleteFriendsGroup *>(to)->MergeFrom(
      static_cast<const CMsgClientDeleteFriendsGroup &>(from));
}


void CMsgClientDeleteFriendsGroup::MergeFrom(const CMsgClientDeleteFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDeleteFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const CMsgClientDeleteFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDeleteFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientDeleteFriendsGroup::InternalSwap(CMsgClientDeleteFriendsGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, groupid_)
      + sizeof(CMsgClientDeleteFriendsGroup::groupid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientDeleteFriendsGroup, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDeleteFriendsGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[26]);
}

// ===================================================================

class CMsgClientDeleteFriendsGroupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDeleteFriendsGroupResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDeleteFriendsGroupResponse)
}
CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse(const CMsgClientDeleteFriendsGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientDeleteFriendsGroupResponse)
}

inline void CMsgClientDeleteFriendsGroupResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgClientDeleteFriendsGroupResponse::~CMsgClientDeleteFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientDeleteFriendsGroupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDeleteFriendsGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientDeleteFriendsGroupResponse::ArenaDtor(void* object) {
  CMsgClientDeleteFriendsGroupResponse* _this = reinterpret_cast< CMsgClientDeleteFriendsGroupResponse* >(object);
  (void)_this;
}
void CMsgClientDeleteFriendsGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDeleteFriendsGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDeleteFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDeleteFriendsGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDeleteFriendsGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDeleteFriendsGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDeleteFriendsGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDeleteFriendsGroupResponse)
  return target;
}

size_t CMsgClientDeleteFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDeleteFriendsGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDeleteFriendsGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDeleteFriendsGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDeleteFriendsGroupResponse::GetClassData() const { return &_class_data_; }

void CMsgClientDeleteFriendsGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDeleteFriendsGroupResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientDeleteFriendsGroupResponse &>(from));
}


void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDeleteFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDeleteFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientDeleteFriendsGroupResponse::InternalSwap(CMsgClientDeleteFriendsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDeleteFriendsGroupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[27]);
}

// ===================================================================

class CMsgClientManageFriendsGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientManageFriendsGroup>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_groupname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientManageFriendsGroup::CMsgClientManageFriendsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamid_friends_added_(arena),
  steamid_friends_removed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientManageFriendsGroup)
}
CMsgClientManageFriendsGroup::CMsgClientManageFriendsGroup(const CMsgClientManageFriendsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamid_friends_added_(from.steamid_friends_added_),
      steamid_friends_removed_(from.steamid_friends_removed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupname()) {
    groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_groupname(), 
      GetArenaForAllocation());
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientManageFriendsGroup)
}

inline void CMsgClientManageFriendsGroup::SharedCtor() {
groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
groupid_ = 0;
}

CMsgClientManageFriendsGroup::~CMsgClientManageFriendsGroup() {
  // @@protoc_insertion_point(destructor:CMsgClientManageFriendsGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientManageFriendsGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientManageFriendsGroup::ArenaDtor(void* object) {
  CMsgClientManageFriendsGroup* _this = reinterpret_cast< CMsgClientManageFriendsGroup* >(object);
  (void)_this;
}
void CMsgClientManageFriendsGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientManageFriendsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientManageFriendsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientManageFriendsGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_friends_added_.Clear();
  steamid_friends_removed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    groupname_.ClearNonDefaultToEmpty();
  }
  groupid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientManageFriendsGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string groupname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientManageFriendsGroup.groupname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamid_friends_added = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_friends_added(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_friends_added(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamid_friends_removed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_friends_removed(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_friends_removed(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientManageFriendsGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientManageFriendsGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  // optional string groupname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientManageFriendsGroup.groupname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // repeated fixed64 steamid_friends_added = 3;
  for (int i = 0, n = this->_internal_steamid_friends_added_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid_friends_added(i), target);
  }

  // repeated fixed64 steamid_friends_removed = 4;
  for (int i = 0, n = this->_internal_steamid_friends_removed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid_friends_removed(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientManageFriendsGroup)
  return target;
}

size_t CMsgClientManageFriendsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientManageFriendsGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_friends_added = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_friends_added_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_friends_added_size());
    total_size += data_size;
  }

  // repeated fixed64 steamid_friends_removed = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_friends_removed_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_friends_removed_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string groupname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupname());
    }

    // optional int32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientManageFriendsGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientManageFriendsGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientManageFriendsGroup::GetClassData() const { return &_class_data_; }

void CMsgClientManageFriendsGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientManageFriendsGroup *>(to)->MergeFrom(
      static_cast<const CMsgClientManageFriendsGroup &>(from));
}


void CMsgClientManageFriendsGroup::MergeFrom(const CMsgClientManageFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientManageFriendsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_friends_added_.MergeFrom(from.steamid_friends_added_);
  steamid_friends_removed_.MergeFrom(from.steamid_friends_removed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_groupname(from._internal_groupname());
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientManageFriendsGroup::CopyFrom(const CMsgClientManageFriendsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientManageFriendsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientManageFriendsGroup::IsInitialized() const {
  return true;
}

void CMsgClientManageFriendsGroup::InternalSwap(CMsgClientManageFriendsGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_friends_added_.InternalSwap(&other->steamid_friends_added_);
  steamid_friends_removed_.InternalSwap(&other->steamid_friends_removed_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &groupname_, lhs_arena,
      &other->groupname_, rhs_arena
  );
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientManageFriendsGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[28]);
}

// ===================================================================

class CMsgClientManageFriendsGroupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientManageFriendsGroupResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientManageFriendsGroupResponse::CMsgClientManageFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientManageFriendsGroupResponse)
}
CMsgClientManageFriendsGroupResponse::CMsgClientManageFriendsGroupResponse(const CMsgClientManageFriendsGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientManageFriendsGroupResponse)
}

inline void CMsgClientManageFriendsGroupResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgClientManageFriendsGroupResponse::~CMsgClientManageFriendsGroupResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientManageFriendsGroupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientManageFriendsGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientManageFriendsGroupResponse::ArenaDtor(void* object) {
  CMsgClientManageFriendsGroupResponse* _this = reinterpret_cast< CMsgClientManageFriendsGroupResponse* >(object);
  (void)_this;
}
void CMsgClientManageFriendsGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientManageFriendsGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientManageFriendsGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientManageFriendsGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientManageFriendsGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientManageFriendsGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientManageFriendsGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientManageFriendsGroupResponse)
  return target;
}

size_t CMsgClientManageFriendsGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientManageFriendsGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientManageFriendsGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientManageFriendsGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientManageFriendsGroupResponse::GetClassData() const { return &_class_data_; }

void CMsgClientManageFriendsGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientManageFriendsGroupResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientManageFriendsGroupResponse &>(from));
}


void CMsgClientManageFriendsGroupResponse::MergeFrom(const CMsgClientManageFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientManageFriendsGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientManageFriendsGroupResponse::CopyFrom(const CMsgClientManageFriendsGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientManageFriendsGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientManageFriendsGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientManageFriendsGroupResponse::InternalSwap(CMsgClientManageFriendsGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientManageFriendsGroupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[29]);
}

// ===================================================================

class CMsgClientAddFriendToGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAddFriendToGroup>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamiduser(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAddFriendToGroup)
}
CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup(const CMsgClientAddFriendToGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamiduser_, &from.steamiduser_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAddFriendToGroup)
}

inline void CMsgClientAddFriendToGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamiduser_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
}

CMsgClientAddFriendToGroup::~CMsgClientAddFriendToGroup() {
  // @@protoc_insertion_point(destructor:CMsgClientAddFriendToGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAddFriendToGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAddFriendToGroup::ArenaDtor(void* object) {
  CMsgClientAddFriendToGroup* _this = reinterpret_cast< CMsgClientAddFriendToGroup* >(object);
  (void)_this;
}
void CMsgClientAddFriendToGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAddFriendToGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAddFriendToGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAddFriendToGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamiduser_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAddFriendToGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamiduser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamiduser(&has_bits);
          steamiduser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAddFriendToGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAddFriendToGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamiduser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAddFriendToGroup)
  return target;
}

size_t CMsgClientAddFriendToGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAddFriendToGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamiduser = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAddFriendToGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAddFriendToGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAddFriendToGroup::GetClassData() const { return &_class_data_; }

void CMsgClientAddFriendToGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAddFriendToGroup *>(to)->MergeFrom(
      static_cast<const CMsgClientAddFriendToGroup &>(from));
}


void CMsgClientAddFriendToGroup::MergeFrom(const CMsgClientAddFriendToGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAddFriendToGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamiduser_ = from.steamiduser_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAddFriendToGroup::CopyFrom(const CMsgClientAddFriendToGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAddFriendToGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroup::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendToGroup::InternalSwap(CMsgClientAddFriendToGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAddFriendToGroup, groupid_)
      + sizeof(CMsgClientAddFriendToGroup::groupid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAddFriendToGroup, steamiduser_)>(
          reinterpret_cast<char*>(&steamiduser_),
          reinterpret_cast<char*>(&other->steamiduser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAddFriendToGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[30]);
}

// ===================================================================

class CMsgClientAddFriendToGroupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAddFriendToGroupResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAddFriendToGroupResponse)
}
CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse(const CMsgClientAddFriendToGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAddFriendToGroupResponse)
}

inline void CMsgClientAddFriendToGroupResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgClientAddFriendToGroupResponse::~CMsgClientAddFriendToGroupResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientAddFriendToGroupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAddFriendToGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAddFriendToGroupResponse::ArenaDtor(void* object) {
  CMsgClientAddFriendToGroupResponse* _this = reinterpret_cast< CMsgClientAddFriendToGroupResponse* >(object);
  (void)_this;
}
void CMsgClientAddFriendToGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAddFriendToGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAddFriendToGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAddFriendToGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAddFriendToGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAddFriendToGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAddFriendToGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAddFriendToGroupResponse)
  return target;
}

size_t CMsgClientAddFriendToGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAddFriendToGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAddFriendToGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAddFriendToGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAddFriendToGroupResponse::GetClassData() const { return &_class_data_; }

void CMsgClientAddFriendToGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAddFriendToGroupResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientAddFriendToGroupResponse &>(from));
}


void CMsgClientAddFriendToGroupResponse::MergeFrom(const CMsgClientAddFriendToGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAddFriendToGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const CMsgClientAddFriendToGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAddFriendToGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientAddFriendToGroupResponse::InternalSwap(CMsgClientAddFriendToGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAddFriendToGroupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[31]);
}

// ===================================================================

class CMsgClientRemoveFriendFromGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRemoveFriendFromGroup>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamiduser(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRemoveFriendFromGroup)
}
CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup(const CMsgClientRemoveFriendFromGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamiduser_, &from.steamiduser_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRemoveFriendFromGroup)
}

inline void CMsgClientRemoveFriendFromGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamiduser_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
}

CMsgClientRemoveFriendFromGroup::~CMsgClientRemoveFriendFromGroup() {
  // @@protoc_insertion_point(destructor:CMsgClientRemoveFriendFromGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRemoveFriendFromGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRemoveFriendFromGroup::ArenaDtor(void* object) {
  CMsgClientRemoveFriendFromGroup* _this = reinterpret_cast< CMsgClientRemoveFriendFromGroup* >(object);
  (void)_this;
}
void CMsgClientRemoveFriendFromGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRemoveFriendFromGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRemoveFriendFromGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRemoveFriendFromGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamiduser_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&steamiduser_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRemoveFriendFromGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamiduser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamiduser(&has_bits);
          steamiduser_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRemoveFriendFromGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRemoveFriendFromGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 groupid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  // optional fixed64 steamiduser = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamiduser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRemoveFriendFromGroup)
  return target;
}

size_t CMsgClientRemoveFriendFromGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRemoveFriendFromGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamiduser = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRemoveFriendFromGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRemoveFriendFromGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRemoveFriendFromGroup::GetClassData() const { return &_class_data_; }

void CMsgClientRemoveFriendFromGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRemoveFriendFromGroup *>(to)->MergeFrom(
      static_cast<const CMsgClientRemoveFriendFromGroup &>(from));
}


void CMsgClientRemoveFriendFromGroup::MergeFrom(const CMsgClientRemoveFriendFromGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRemoveFriendFromGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamiduser_ = from.steamiduser_;
    }
    if (cached_has_bits & 0x00000002u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const CMsgClientRemoveFriendFromGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRemoveFriendFromGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroup::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriendFromGroup::InternalSwap(CMsgClientRemoveFriendFromGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, groupid_)
      + sizeof(CMsgClientRemoveFriendFromGroup::groupid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRemoveFriendFromGroup, steamiduser_)>(
          reinterpret_cast<char*>(&steamiduser_),
          reinterpret_cast<char*>(&other->steamiduser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRemoveFriendFromGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[32]);
}

// ===================================================================

class CMsgClientRemoveFriendFromGroupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRemoveFriendFromGroupResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRemoveFriendFromGroupResponse)
}
CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse(const CMsgClientRemoveFriendFromGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRemoveFriendFromGroupResponse)
}

inline void CMsgClientRemoveFriendFromGroupResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgClientRemoveFriendFromGroupResponse::~CMsgClientRemoveFriendFromGroupResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRemoveFriendFromGroupResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRemoveFriendFromGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRemoveFriendFromGroupResponse::ArenaDtor(void* object) {
  CMsgClientRemoveFriendFromGroupResponse* _this = reinterpret_cast< CMsgClientRemoveFriendFromGroupResponse* >(object);
  (void)_this;
}
void CMsgClientRemoveFriendFromGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRemoveFriendFromGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRemoveFriendFromGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRemoveFriendFromGroupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRemoveFriendFromGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRemoveFriendFromGroupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRemoveFriendFromGroupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRemoveFriendFromGroupResponse)
  return target;
}

size_t CMsgClientRemoveFriendFromGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRemoveFriendFromGroupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRemoveFriendFromGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRemoveFriendFromGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRemoveFriendFromGroupResponse::GetClassData() const { return &_class_data_; }

void CMsgClientRemoveFriendFromGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRemoveFriendFromGroupResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientRemoveFriendFromGroupResponse &>(from));
}


void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRemoveFriendFromGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRemoveFriendFromGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroupResponse::IsInitialized() const {
  return true;
}

void CMsgClientRemoveFriendFromGroupResponse::InternalSwap(CMsgClientRemoveFriendFromGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRemoveFriendFromGroupResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[33]);
}

// ===================================================================

class CMsgClientGetEmoticonList::_Internal {
 public:
};

CMsgClientGetEmoticonList::CMsgClientGetEmoticonList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetEmoticonList)
}
CMsgClientGetEmoticonList::CMsgClientGetEmoticonList(const CMsgClientGetEmoticonList& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetEmoticonList)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetEmoticonList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetEmoticonList::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetEmoticonList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[34]);
}

// ===================================================================

class CMsgClientEmoticonList_Emoticon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientEmoticonList_Emoticon>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_last_used(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientEmoticonList.Emoticon)
}
CMsgClientEmoticonList_Emoticon::CMsgClientEmoticonList_Emoticon(const CMsgClientEmoticonList_Emoticon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientEmoticonList.Emoticon)
}

inline void CMsgClientEmoticonList_Emoticon::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(appid_));
}

CMsgClientEmoticonList_Emoticon::~CMsgClientEmoticonList_Emoticon() {
  // @@protoc_insertion_point(destructor:CMsgClientEmoticonList.Emoticon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientEmoticonList_Emoticon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientEmoticonList_Emoticon::ArenaDtor(void* object) {
  CMsgClientEmoticonList_Emoticon* _this = reinterpret_cast< CMsgClientEmoticonList_Emoticon* >(object);
  (void)_this;
}
void CMsgClientEmoticonList_Emoticon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientEmoticonList_Emoticon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientEmoticonList_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientEmoticonList.Emoticon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&count_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientEmoticonList_Emoticon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientEmoticonList.Emoticon.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_last_used(&has_bits);
          time_last_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 use_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_count(&has_bits);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_received(&has_bits);
          time_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientEmoticonList_Emoticon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientEmoticonList.Emoticon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientEmoticonList.Emoticon.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 time_last_used = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_last_used(), target);
  }

  // optional uint32 use_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_use_count(), target);
  }

  // optional uint32 time_received = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_received(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientEmoticonList.Emoticon)
  return target;
}

size_t CMsgClientEmoticonList_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientEmoticonList.Emoticon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional uint32 time_last_used = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_used());
    }

    // optional uint32 use_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_use_count());
    }

    // optional uint32 time_received = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_received());
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientEmoticonList_Emoticon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientEmoticonList_Emoticon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientEmoticonList_Emoticon::GetClassData() const { return &_class_data_; }

void CMsgClientEmoticonList_Emoticon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientEmoticonList_Emoticon *>(to)->MergeFrom(
      static_cast<const CMsgClientEmoticonList_Emoticon &>(from));
}


void CMsgClientEmoticonList_Emoticon::MergeFrom(const CMsgClientEmoticonList_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientEmoticonList.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_last_used_ = from.time_last_used_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_count_ = from.use_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_received_ = from.time_received_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientEmoticonList_Emoticon::CopyFrom(const CMsgClientEmoticonList_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientEmoticonList.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Emoticon::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList_Emoticon::InternalSwap(CMsgClientEmoticonList_Emoticon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, appid_)
      + sizeof(CMsgClientEmoticonList_Emoticon::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientEmoticonList_Emoticon, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientEmoticonList_Emoticon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[35]);
}

// ===================================================================

class CMsgClientEmoticonList_Sticker::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientEmoticonList_Sticker>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_received(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_last_used(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientEmoticonList_Sticker::CMsgClientEmoticonList_Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientEmoticonList.Sticker)
}
CMsgClientEmoticonList_Sticker::CMsgClientEmoticonList_Sticker(const CMsgClientEmoticonList_Sticker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_count_) -
    reinterpret_cast<char*>(&count_)) + sizeof(use_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientEmoticonList.Sticker)
}

inline void CMsgClientEmoticonList_Sticker::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_count_) -
    reinterpret_cast<char*>(&count_)) + sizeof(use_count_));
}

CMsgClientEmoticonList_Sticker::~CMsgClientEmoticonList_Sticker() {
  // @@protoc_insertion_point(destructor:CMsgClientEmoticonList.Sticker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientEmoticonList_Sticker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientEmoticonList_Sticker::ArenaDtor(void* object) {
  CMsgClientEmoticonList_Sticker* _this = reinterpret_cast< CMsgClientEmoticonList_Sticker* >(object);
  (void)_this;
}
void CMsgClientEmoticonList_Sticker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientEmoticonList_Sticker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientEmoticonList_Sticker::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientEmoticonList.Sticker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_count_) -
        reinterpret_cast<char*>(&count_)) + sizeof(use_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientEmoticonList_Sticker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientEmoticonList.Sticker.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_received(&has_bits);
          time_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_last_used(&has_bits);
          time_last_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 use_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_count(&has_bits);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientEmoticonList_Sticker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientEmoticonList.Sticker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientEmoticonList.Sticker.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 time_received = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_received(), target);
  }

  // optional uint32 appid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_appid(), target);
  }

  // optional uint32 time_last_used = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_last_used(), target);
  }

  // optional uint32 use_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_use_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientEmoticonList.Sticker)
  return target;
}

size_t CMsgClientEmoticonList_Sticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientEmoticonList.Sticker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional uint32 time_received = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_received());
    }

    // optional uint32 appid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 time_last_used = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_used());
    }

    // optional uint32 use_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_use_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientEmoticonList_Sticker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientEmoticonList_Sticker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientEmoticonList_Sticker::GetClassData() const { return &_class_data_; }

void CMsgClientEmoticonList_Sticker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientEmoticonList_Sticker *>(to)->MergeFrom(
      static_cast<const CMsgClientEmoticonList_Sticker &>(from));
}


void CMsgClientEmoticonList_Sticker::MergeFrom(const CMsgClientEmoticonList_Sticker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientEmoticonList.Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_received_ = from.time_received_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_last_used_ = from.time_last_used_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_count_ = from.use_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientEmoticonList_Sticker::CopyFrom(const CMsgClientEmoticonList_Sticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientEmoticonList.Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Sticker::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList_Sticker::InternalSwap(CMsgClientEmoticonList_Sticker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, use_count_)
      + sizeof(CMsgClientEmoticonList_Sticker::use_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientEmoticonList_Sticker, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientEmoticonList_Sticker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[36]);
}

// ===================================================================

class CMsgClientEmoticonList_Effect::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientEmoticonList_Effect>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_received(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_infinite_use(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientEmoticonList_Effect::CMsgClientEmoticonList_Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientEmoticonList.Effect)
}
CMsgClientEmoticonList_Effect::CMsgClientEmoticonList_Effect(const CMsgClientEmoticonList_Effect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientEmoticonList.Effect)
}

inline void CMsgClientEmoticonList_Effect::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(appid_));
}

CMsgClientEmoticonList_Effect::~CMsgClientEmoticonList_Effect() {
  // @@protoc_insertion_point(destructor:CMsgClientEmoticonList.Effect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientEmoticonList_Effect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientEmoticonList_Effect::ArenaDtor(void* object) {
  CMsgClientEmoticonList_Effect* _this = reinterpret_cast< CMsgClientEmoticonList_Effect* >(object);
  (void)_this;
}
void CMsgClientEmoticonList_Effect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientEmoticonList_Effect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientEmoticonList_Effect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientEmoticonList.Effect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&count_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientEmoticonList_Effect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientEmoticonList.Effect.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_received(&has_bits);
          time_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool infinite_use = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_infinite_use(&has_bits);
          infinite_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientEmoticonList_Effect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientEmoticonList.Effect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientEmoticonList.Effect.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 time_received = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_received(), target);
  }

  // optional bool infinite_use = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_infinite_use(), target);
  }

  // optional uint32 appid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientEmoticonList.Effect)
  return target;
}

size_t CMsgClientEmoticonList_Effect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientEmoticonList.Effect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional uint32 time_received = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_received());
    }

    // optional bool infinite_use = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientEmoticonList_Effect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientEmoticonList_Effect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientEmoticonList_Effect::GetClassData() const { return &_class_data_; }

void CMsgClientEmoticonList_Effect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientEmoticonList_Effect *>(to)->MergeFrom(
      static_cast<const CMsgClientEmoticonList_Effect &>(from));
}


void CMsgClientEmoticonList_Effect::MergeFrom(const CMsgClientEmoticonList_Effect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientEmoticonList.Effect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_received_ = from.time_received_;
    }
    if (cached_has_bits & 0x00000008u) {
      infinite_use_ = from.infinite_use_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientEmoticonList_Effect::CopyFrom(const CMsgClientEmoticonList_Effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientEmoticonList.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList_Effect::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList_Effect::InternalSwap(CMsgClientEmoticonList_Effect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientEmoticonList_Effect, appid_)
      + sizeof(CMsgClientEmoticonList_Effect::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientEmoticonList_Effect, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientEmoticonList_Effect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[37]);
}

// ===================================================================

class CMsgClientEmoticonList::_Internal {
 public:
};

CMsgClientEmoticonList::CMsgClientEmoticonList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  emoticons_(arena),
  stickers_(arena),
  effects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientEmoticonList)
}
CMsgClientEmoticonList::CMsgClientEmoticonList(const CMsgClientEmoticonList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emoticons_(from.emoticons_),
      stickers_(from.stickers_),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientEmoticonList)
}

inline void CMsgClientEmoticonList::SharedCtor() {
}

CMsgClientEmoticonList::~CMsgClientEmoticonList() {
  // @@protoc_insertion_point(destructor:CMsgClientEmoticonList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientEmoticonList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientEmoticonList::ArenaDtor(void* object) {
  CMsgClientEmoticonList* _this = reinterpret_cast< CMsgClientEmoticonList* >(object);
  (void)_this;
}
void CMsgClientEmoticonList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientEmoticonList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientEmoticonList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientEmoticonList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emoticons_.Clear();
  stickers_.Clear();
  effects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientEmoticonList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emoticons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stickers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientEmoticonList.Effect effects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientEmoticonList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientEmoticonList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emoticons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_emoticons(i), target, stream);
  }

  // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stickers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stickers(i), target, stream);
  }

  // repeated .CMsgClientEmoticonList.Effect effects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_effects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientEmoticonList)
  return target;
}

size_t CMsgClientEmoticonList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientEmoticonList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
  total_size += 1UL * this->_internal_emoticons_size();
  for (const auto& msg : this->emoticons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
  total_size += 1UL * this->_internal_stickers_size();
  for (const auto& msg : this->stickers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientEmoticonList.Effect effects = 3;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientEmoticonList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientEmoticonList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientEmoticonList::GetClassData() const { return &_class_data_; }

void CMsgClientEmoticonList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientEmoticonList *>(to)->MergeFrom(
      static_cast<const CMsgClientEmoticonList &>(from));
}


void CMsgClientEmoticonList::MergeFrom(const CMsgClientEmoticonList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientEmoticonList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  emoticons_.MergeFrom(from.emoticons_);
  stickers_.MergeFrom(from.stickers_);
  effects_.MergeFrom(from.effects_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientEmoticonList::CopyFrom(const CMsgClientEmoticonList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientEmoticonList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmoticonList::IsInitialized() const {
  return true;
}

void CMsgClientEmoticonList::InternalSwap(CMsgClientEmoticonList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  emoticons_.InternalSwap(&other->emoticons_);
  stickers_.InternalSwap(&other->stickers_);
  effects_.InternalSwap(&other->effects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientEmoticonList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5ffriends_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5ffriends_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientFriendMsg* Arena::CreateMaybeMessage< ::CMsgClientFriendMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendMsgIncoming* Arena::CreateMaybeMessage< ::CMsgClientFriendMsgIncoming >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendMsgIncoming >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAddFriend* Arena::CreateMaybeMessage< ::CMsgClientAddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAddFriendResponse* Arena::CreateMaybeMessage< ::CMsgClientAddFriendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAddFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRemoveFriend* Arena::CreateMaybeMessage< ::CMsgClientRemoveFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRemoveFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientHideFriend* Arena::CreateMaybeMessage< ::CMsgClientHideFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientHideFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendsList_Friend* Arena::CreateMaybeMessage< ::CMsgClientFriendsList_Friend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendsList_Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendsList* Arena::CreateMaybeMessage< ::CMsgClientFriendsList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendsList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendsGroupsList_FriendGroup* Arena::CreateMaybeMessage< ::CMsgClientFriendsGroupsList_FriendGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendsGroupsList_FriendGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendsGroupsList_FriendGroupsMembership* Arena::CreateMaybeMessage< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendsGroupsList* Arena::CreateMaybeMessage< ::CMsgClientFriendsGroupsList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendsGroupsList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPlayerNicknameList_PlayerNickname* Arena::CreateMaybeMessage< ::CMsgClientPlayerNicknameList_PlayerNickname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPlayerNicknameList_PlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPlayerNicknameList* Arena::CreateMaybeMessage< ::CMsgClientPlayerNicknameList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPlayerNicknameList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSetPlayerNickname* Arena::CreateMaybeMessage< ::CMsgClientSetPlayerNickname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSetPlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSetPlayerNicknameResponse* Arena::CreateMaybeMessage< ::CMsgClientSetPlayerNicknameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSetPlayerNicknameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestFriendData* Arena::CreateMaybeMessage< ::CMsgClientRequestFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChangeStatus* Arena::CreateMaybeMessage< ::CMsgClientChangeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChangeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPersonaChangeResponse* Arena::CreateMaybeMessage< ::CMsgPersonaChangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPersonaChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPersonaState_Friend_ClanData* Arena::CreateMaybeMessage< ::CMsgClientPersonaState_Friend_ClanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPersonaState_Friend_ClanData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPersonaState_Friend_KV* Arena::CreateMaybeMessage< ::CMsgClientPersonaState_Friend_KV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPersonaState_Friend_KV >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPersonaState_Friend* Arena::CreateMaybeMessage< ::CMsgClientPersonaState_Friend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPersonaState_Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPersonaState* Arena::CreateMaybeMessage< ::CMsgClientPersonaState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPersonaState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendProfileInfo* Arena::CreateMaybeMessage< ::CMsgClientFriendProfileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendProfileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendProfileInfoResponse* Arena::CreateMaybeMessage< ::CMsgClientFriendProfileInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendProfileInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCreateFriendsGroup* Arena::CreateMaybeMessage< ::CMsgClientCreateFriendsGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCreateFriendsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCreateFriendsGroupResponse* Arena::CreateMaybeMessage< ::CMsgClientCreateFriendsGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCreateFriendsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDeleteFriendsGroup* Arena::CreateMaybeMessage< ::CMsgClientDeleteFriendsGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDeleteFriendsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDeleteFriendsGroupResponse* Arena::CreateMaybeMessage< ::CMsgClientDeleteFriendsGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDeleteFriendsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientManageFriendsGroup* Arena::CreateMaybeMessage< ::CMsgClientManageFriendsGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientManageFriendsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientManageFriendsGroupResponse* Arena::CreateMaybeMessage< ::CMsgClientManageFriendsGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientManageFriendsGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAddFriendToGroup* Arena::CreateMaybeMessage< ::CMsgClientAddFriendToGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAddFriendToGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAddFriendToGroupResponse* Arena::CreateMaybeMessage< ::CMsgClientAddFriendToGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAddFriendToGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRemoveFriendFromGroup* Arena::CreateMaybeMessage< ::CMsgClientRemoveFriendFromGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRemoveFriendFromGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRemoveFriendFromGroupResponse* Arena::CreateMaybeMessage< ::CMsgClientRemoveFriendFromGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRemoveFriendFromGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetEmoticonList* Arena::CreateMaybeMessage< ::CMsgClientGetEmoticonList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetEmoticonList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientEmoticonList_Emoticon* Arena::CreateMaybeMessage< ::CMsgClientEmoticonList_Emoticon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientEmoticonList_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientEmoticonList_Sticker* Arena::CreateMaybeMessage< ::CMsgClientEmoticonList_Sticker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientEmoticonList_Sticker >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientEmoticonList_Effect* Arena::CreateMaybeMessage< ::CMsgClientEmoticonList_Effect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientEmoticonList_Effect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientEmoticonList* Arena::CreateMaybeMessage< ::CMsgClientEmoticonList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientEmoticonList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
