// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientsettings.proto

#include "steammessages_clientsettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgHotkey::CMsgHotkey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_code_(0u)
  , alt_key_(false)
  , shift_key_(false)
  , ctrl_key_(false)
  , meta_key_(false){}
struct CMsgHotkeyDefaultTypeInternal {
  constexpr CMsgHotkeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHotkeyDefaultTypeInternal() {}
  union {
    CMsgHotkey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHotkeyDefaultTypeInternal _CMsgHotkey_default_instance_;
constexpr CMsgClientSettings::CMsgClientSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferred_monitor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , screenshots_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , web_browser_home_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , voice_mic_device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , overlay_tabs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_page_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , startup_movie_local_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , g_background_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , g_background_max_keep_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , overlay_key_(nullptr)
  , screenshot_key_(nullptr)
  , voice_push_to_talk_key_(nullptr)
  , no_save_personal_info_(false)
  , oobe_test_mode_enabled_(false)
  , in_client_beta_(false)
  , is_steam_sideloaded_(false)
  , steam_cef_gpu_blocklist_disabled_(false)
  , bigpicture_windowed_(false)
  , is_external_display_(false)
  , steam_os_underscan_enabled_(false)
  , steam_os_underscan_level_(0)
  , min_scale_factor_(0)
  , max_scale_factor_(0)
  , auto_scale_factor_(0)
  , enable_test_updaters_(false)
  , small_mode_(false)
  , skip_steamvr_install_dialog_(false)
  , always_show_user_chooser_(false)
  , show_family_sharing_notifications_(false)
  , overlay_fps_counter_high_contrast_(false)
  , enable_overlay_(false)
  , disable_desktop_game_theater_(false)
  , overlay_fps_counter_corner_(0)
  , default_ping_rate_(0)
  , enable_screenshot_notification_(false)
  , enable_screenshot_sound_(false)
  , save_uncompressed_screenshots_(false)
  , overlay_toolbar_list_view_(false)
  , server_ping_rate_(0)
  , steam_networking_share_ip_(0)
  , voice_mic_input_gain_(0)
  , voice_speaker_output_gain_(0)
  , voice_push_to_talk_setting_(0)
  , always_use_gamepadui_overlay_(false)
  , overlay_scale_interface_(false)
  , smooth_scroll_webviews_(false)
  , enable_gpu_accelerated_webviews_(false)
  , enable_hardware_video_decoding_(false)
  , run_at_startup_(false)
  , enable_dpi_scaling_(false)
  , enable_marketing_messages_(false)
  , jumplist_flags_(0u)
  , start_in_big_picture_mode_(false)
  , enable_ui_sounds_(false)
  , disable_all_toasts_(false)
  , disable_toasts_in_game_(false)
  , play_sound_on_toast_(false)
  , library_whats_new_show_only_product_updates_(false)
  , show_store_content_on_home_(false)
  , library_low_bandwidth_mode_(false)
  , library_display_size_(0)
  , library_low_perf_mode_(false)
  , library_disable_community_content_(false)
  , library_display_icon_in_game_list_(false)
  , ready_to_play_includes_streaming_(false)
  , show_steam_deck_info_(false)
  , enable_shader_precache_(false)
  , enable_shader_background_processing_(false)
  , needs_steam_service_repair_(false)
  , shader_precached_size_(uint64_t{0u})
  , download_peer_content_(0)
  , restrict_auto_updates_start_(0)
  , restrict_auto_updates_end_(0)
  , download_rate_bits_per_s_(false)
  , restrict_auto_updates_(false)
  , download_while_app_running_(false)
  , download_throttle_while_streaming_(false)
  , download_region_(0)
  , download_throttle_rate_(0)
  , cloud_enabled_(false)
  , show_screenshot_manager_(false)
  , music_pause_on_app_start_(false)
  , music_pause_on_voice_chat_(false)
  , music_volume_(0)
  , music_download_high_quality_(false)
  , music_playlist_notification_(false)
  , broadcast_record_all_video_(false)
  , broadcast_record_all_audio_(false)
  , broadcast_permissions_(0)

  , broadcast_output_width_(0)
  , broadcast_output_height_(0)
  , broadcast_bitrate_(0)
  , broadcast_encoding_option_(0)

  , broadcast_chat_corner_(0)
  , broadcast_record_microphone_(false)
  , broadcast_show_upload_stats_(false)
  , broadcast_show_live_reminder_(false)
  , steam_input_configurator_error_msg_enable_(false)
  , controller_guide_button_focus_steam_(false)
  , controller_ps4_support_(false)
  , controller_xbox_support_(false)
  , controller_xbox_driver_(false)
  , controller_power_off_timeout_(0)
  , controller_switch_support_(false)
  , controller_generic_support_(false)
  , turn_off_controller_on_exit_(false)
  , controller_combine_nintendo_joycons_(false)
  , startup_movie_shuffle_(false)
  , startup_movie_used_for_resume_(false)
  , game_notes_enable_spellcheck_(false)
  , g_background_enabled_(false)
  , startup_movie_id_(uint64_t{0u})
  , screenshot_items_per_row_(0)
  , show_timestamps_in_console_(false){}
struct CMsgClientSettingsDefaultTypeInternal {
  constexpr CMsgClientSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSettingsDefaultTypeInternal() {}
  union {
    CMsgClientSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSettingsDefaultTypeInternal _CMsgClientSettings_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientsettings_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientsettings_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, key_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, alt_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, shift_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, ctrl_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, meta_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgHotkey, display_name_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, no_save_personal_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, oobe_test_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, in_client_beta_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, is_steam_sideloaded_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, preferred_monitor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_cef_gpu_blocklist_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, bigpicture_windowed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, display_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, is_external_display_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_os_underscan_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_os_underscan_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, min_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, max_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, auto_scale_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_test_updaters_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, small_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, skip_steamvr_install_dialog_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, always_show_user_chooser_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_family_sharing_notifications_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_fps_counter_corner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_fps_counter_high_contrast_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, screenshot_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_overlay_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, disable_desktop_game_theater_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_screenshot_notification_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_screenshot_sound_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, save_uncompressed_screenshots_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, screenshots_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, default_ping_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, server_ping_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_networking_share_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, web_browser_home_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_mic_device_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_mic_input_gain_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_speaker_output_gain_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_push_to_talk_setting_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, voice_push_to_talk_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_toolbar_list_view_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, always_use_gamepadui_overlay_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_tabs_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, overlay_scale_interface_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, smooth_scroll_webviews_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_gpu_accelerated_webviews_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_hardware_video_decoding_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, run_at_startup_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_dpi_scaling_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_marketing_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, start_in_big_picture_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, jumplist_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_ui_sounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, disable_all_toasts_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, disable_toasts_in_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, play_sound_on_toast_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_display_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_whats_new_show_only_product_updates_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_store_content_on_home_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, start_page_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_low_bandwidth_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_low_perf_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_disable_community_content_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, library_display_icon_in_game_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, ready_to_play_includes_streaming_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_steam_deck_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_shader_precache_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, enable_shader_background_processing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, shader_precached_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, needs_steam_service_repair_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_peer_content_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_rate_bits_per_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, restrict_auto_updates_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, restrict_auto_updates_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, restrict_auto_updates_end_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_while_app_running_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_throttle_while_streaming_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, download_throttle_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, cloud_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_screenshot_manager_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_volume_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_pause_on_app_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_pause_on_voice_chat_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_download_high_quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, music_playlist_notification_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_permissions_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_output_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_output_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_bitrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_encoding_option_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_record_all_video_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_record_all_audio_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_record_microphone_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_show_upload_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_show_live_reminder_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, broadcast_chat_corner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, steam_input_configurator_error_msg_enable_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_guide_button_focus_steam_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_ps4_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_xbox_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_xbox_driver_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_switch_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_generic_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_power_off_timeout_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, turn_off_controller_on_exit_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, controller_combine_nintendo_joycons_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_local_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_shuffle_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, startup_movie_used_for_resume_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, game_notes_enable_spellcheck_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, screenshot_items_per_row_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, g_background_max_keep_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSettings, show_timestamps_in_console_),
  13,
  14,
  15,
  16,
  0,
  17,
  18,
  1,
  19,
  21,
  20,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  33,
  30,
  10,
  11,
  31,
  32,
  35,
  36,
  37,
  2,
  34,
  39,
  40,
  3,
  4,
  41,
  42,
  43,
  12,
  38,
  44,
  5,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  53,
  52,
  54,
  55,
  56,
  57,
  61,
  58,
  59,
  6,
  60,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  70,
  69,
  71,
  74,
  75,
  72,
  73,
  78,
  76,
  77,
  79,
  80,
  81,
  84,
  82,
  83,
  85,
  86,
  89,
  90,
  91,
  92,
  93,
  87,
  88,
  95,
  96,
  97,
  94,
  98,
  99,
  100,
  101,
  102,
  104,
  105,
  103,
  106,
  107,
  112,
  7,
  108,
  109,
  110,
  113,
  111,
  8,
  9,
  114,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::CMsgHotkey)},
  { 18, 139, -1, sizeof(::CMsgClientSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHotkey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSettings_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"steammessages_clientsettings.proto\032 go"
  "ogle/protobuf/descriptor.proto\032\013enums.pr"
  "oto\"|\n\nCMsgHotkey\022\020\n\010key_code\030\001 \001(\r\022\017\n\007a"
  "lt_key\030\002 \001(\010\022\021\n\tshift_key\030\003 \001(\010\022\020\n\010ctrl_"
  "key\030\004 \001(\010\022\020\n\010meta_key\030\005 \001(\010\022\024\n\014display_n"
  "ame\030\006 \001(\t\"\364:\n\022CMsgClientSettings\022N\n\025no_s"
  "ave_personal_info\030\001 \001(\010B/\200\246\035\001\212\246\035\'Softwar"
  "e\\Valve\\Steam\\NoSavePersonalInfo\022P\n\026oobe"
  "_test_mode_enabled\030\002 \001(\010B0\200\246\035\001\212\246\035(Softwa"
  "re\\Valve\\Steam\\OOBETestModeEnabled\022 \n\016in"
  "_client_beta\030\003 \001(\010B\010\200\246\035\005\220\246\035\001\022%\n\023is_steam"
  "_sideloaded\030\004 \001(\010B\010\200\246\035\005\220\246\035\001\0225\n\021preferred"
  "_monitor\030\005 \001(\tB\032\200\246\035\001\212\246\035\022BigPicture/Monit"
  "or\022p\n steam_cef_gpu_blocklist_disabled\030\006"
  " \001(\010BF\200\246\035\004\212\246\035>HKEY_CURRENT_USER\\Software"
  "\\Valve\\Steam\\CEFGPUBlocklistDisabled\022<\n\023"
  "bigpicture_windowed\030\007 \001(\010B\037\200\246\035\001\212\246\035\023BigPi"
  "cture/Windowed\220\246\035\001\0225\n\014display_name\030\010 \001(\t"
  "B\037\200\246\035\001\212\246\035\027UI/Display/Current/Name\022I\n\023is_"
  "external_display\030\t \001(\010B,\200\246\035\001\212\246\035$UI/Displ"
  "ay/Current/IsExternalDisplay\022E\n\030steam_os"
  "_underscan_level\030\n \001(\002B#\200\246\035\001\212\246\035\033SteamOSS"
  "creenUnderscanLevel\022I\n\032steam_os_undersca"
  "n_enabled\030\013 \001(\010B%\200\246\035\001\212\246\035\035SteamOSScreenUn"
  "derscanEnabled\022C\n\020min_scale_factor\030\014 \001(\002"
  "B)\200\246\035\001\212\246\035!UI/Display/Current/MinScaleFac"
  "tor\022C\n\020max_scale_factor\030\r \001(\002B)\200\246\035\001\212\246\035!U"
  "I/Display/Current/MaxScaleFactor\022E\n\021auto"
  "_scale_factor\030\016 \001(\002B*\200\246\035\001\212\246\035\"UI/Display/"
  "Current/AutoScaleFactor\0228\n\024enable_test_u"
  "pdaters\030\017 \001(\010B\032\200\246\035\001\212\246\035\022EnableTestUpdater"
  "s\022:\n\nsmall_mode\030\020 \001(\010B&\200\246\035\003\212\246\035\036Software\\"
  "Valve\\Steam\\SmallMode\022I\n\033skip_steamvr_in"
  "stall_dialog\030\023 \001(\010B$\200\246\035\003\212\246\035\034system\\Steam"
  "VRHMDVGUIWarning\022O\n\030always_show_user_cho"
  "oser\030\024 \001(\010B-\200\246\035\001\212\246\035%WebStorage\\Auth\\Alwa"
  "ysShowUserChooser\0220\n!show_family_sharing"
  "_notifications\030\270\027 \001(\010B\004\200\246\035\005\022N\n\032overlay_f"
  "ps_counter_corner\030\240\037 \001(\005B)\200\246\035\003\212\246\035!system"
  "\\InGameOverlayShowFPSCorner\022W\n!overlay_f"
  "ps_counter_high_contrast\030\241\037 \001(\010B+\200\246\035\003\212\246\035"
  "#system\\InGameOverlayShowFPSContrast\022[\n\013"
  "overlay_key\030\242\037 \001(\0132\013.CMsgHotkeyB8\200\246\035\003\212\246\035"
  "\037system\\InGameOverlayShortcutKey\272\246\035\rShif"
  "t\tKEY_TAB\022]\n\016screenshot_key\030\243\037 \001(\0132\013.CMs"
  "gHotkeyB7\200\246\035\003\212\246\035$system\\InGameOverlayScr"
  "eenshotHotKey\272\246\035\007KEY_F12\0229\n\016enable_overl"
  "ay\030\244\037 \001(\010B \200\246\035\003\212\246\035\030system\\EnableGameOver"
  "lay\022G\n\034disable_desktop_game_theater\030\245\037 \001"
  "(\010B \200\246\035\003\212\246\035\030system\\DisableLaunchInVR\022[\n\036"
  "enable_screenshot_notification\030\246\037 \001(\010B2\200"
  "\246\035\003\212\246\035*system\\InGameOverlayScreenshotNot"
  "ification\022Q\n\027enable_screenshot_sound\030\247\037 "
  "\001(\010B/\200\246\035\003\212\246\035\'system\\InGameOverlayScreens"
  "hotPlaySound\022^\n\035save_uncompressed_screen"
  "shots\030\250\037 \001(\010B6\200\246\035\003\212\246\035.system\\InGameOverl"
  "ayScreenshotSaveUncompressed\022\037\n\020screensh"
  "ots_path\030\251\037 \001(\tB\004\200\246\035\005\022l\n\021default_ping_ra"
  "te\030\252\037 \001(\005BP\200\246\035\005\300\246\035\001\312\246\035DComputed default "
  "(automatic) server ping rate based on ne"
  "twork speed\022\037\n\020server_ping_rate\030\253\037 \001(\005B\004"
  "\200\246\035\005\022(\n\031steam_networking_share_ip\030\254\037 \001(\005"
  "B\004\200\246\035\005\022\037\n\020web_browser_home\030\255\037 \001(\tB\004\200\246\035\005\022"
  "$\n\025voice_mic_device_name\030\256\037 \001(\tB\004\200\246\035\005\022#\n"
  "\024voice_mic_input_gain\030\257\037 \001(\002B\004\200\246\035\005\022(\n\031vo"
  "ice_speaker_output_gain\030\260\037 \001(\002B\004\200\246\035\005\022)\n\032"
  "voice_push_to_talk_setting\030\261\037 \001(\005B\004\200\246\035\005\022"
  "2\n\026voice_push_to_talk_key\030\262\037 \001(\0132\013.CMsgH"
  "otkeyB\004\200\246\035\005\022B\n\031overlay_toolbar_list_view"
  "\030\263\037 \001(\010B\036\200\246\035\003\212\246\035\026OverlayToolBarListView\022"
  "T\n\034always_use_gamepadui_overlay\030\264\037 \001(\010B-"
  "\200\246\035\003\212\246\035%system\\EnableSCTenFootOverlayChe"
  "ckNew\022*\n\014overlay_tabs\030\265\037 \001(\tB\023\200\246\035\002\212\246\035\013Ov"
  "erlayTabs\022j\n\027overlay_scale_interface\030\266\037 "
  "\001(\010BH\200\246\035\004\212\246\035<HKEY_CURRENT_USER\\Software\\"
  "Valve\\Steam\\OverlayScaleInterface\230\246\035\001\022h\n"
  "\026smooth_scroll_webviews\030\210\' \001(\010BG\200\246\035\004\212\246\035;"
  "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\S"
  "moothScrollWebViews\230\246\035\001\022.\n\037enable_gpu_ac"
  "celerated_webviews\030\211\' \001(\010B\004\200\246\035\005\022-\n\036enabl"
  "e_hardware_video_decoding\030\213\' \001(\010B\004\200\246\035\005\022\035"
  "\n\016run_at_startup\030\214\' \001(\010B\004\200\246\035\005\022!\n\022enable_"
  "dpi_scaling\030\215\' \001(\010B\004\200\246\035\005\022I\n\031enable_marke"
  "ting_messages\030\216\' \001(\010B%\200\246\035\003\212\246\035\031news\\Notif"
  "yAvailableGames\230\246\035\001\022(\n\031start_in_big_pict"
  "ure_mode\030\217\' \001(\010B\004\200\246\035\005\022>\n\016jumplist_flags\030"
  "\220\' \001(\rB%\200\246\035\003\212\246\035\027system\\JumplistSettings\250"
  "\246\035\360\336\004\022<\n\020enable_ui_sounds\030\221\' \001(\010B!\200\246\035\003\212\246"
  "\035\025system\\EnableUISounds\230\246\035\001\0225\n\022disable_a"
  "ll_toasts\030\360. \001(\010B\030\200\246\035\002\212\246\035\020DisableAllToas"
  "ts\022<\n\026disable_toasts_in_game\030\361. \001(\010B\033\200\246\035"
  "\002\212\246\035\023DisableToastsInGame\022:\n\023play_sound_o"
  "n_toast\030\362. \001(\010B\034\200\246\035\002\212\246\035\020PlaySoundOnToast"
  "\230\246\035\001\0229\n\024library_display_size\030\3306 \001(\005B\032\200\246\035"
  "\003\212\246\035\022LibraryDisplaySize\022c\n+library_whats"
  "_new_show_only_product_updates\030\3316 \001(\010B-\200"
  "\246\035\002\212\246\035%LibraryWhatsNewShowOnlyProductUpd"
  "ates\022G\n\032show_store_content_on_home\030\3326 \001("
  "\010B\"\200\246\035\002\212\246\035\026ShowStoreContentOnHome\230\246\035\001\022\031\n"
  "\nstart_page\030\3336 \001(\tB\004\200\246\035\005\022D\n\032library_low_"
  "bandwidth_mode\030\3346 \001(\010B\037\200\246\035\003\212\246\035\027LibraryLo"
  "wBandwidthMode\022:\n\025library_low_perf_mode\030"
  "\3356 \001(\010B\032\200\246\035\003\212\246\035\022LibraryLowPerfMode\022R\n!li"
  "brary_disable_community_content\030\3366 \001(\010B&"
  "\200\246\035\003\212\246\035\036LibraryDisableCommunityContent\022T"
  "\n!library_display_icon_in_game_list\030\3376 \001"
  "(\010B(\200\246\035\003\212\246\035\034LibraryDisplayIconInGameList"
  "\230\246\035\001\022O\n ready_to_play_includes_streaming"
  "\030\3406 \001(\010B$\200\246\035\005\212\246\035\034ReadyToPlayIncludesStre"
  "aming\022A\n\024show_steam_deck_info\030\3416 \001(\010B\"\200\246"
  "\035\003\212\246\035\032ShowSteamDeckInfoInLibrary\022%\n\026enab"
  "le_shader_precache\030\300> \001(\010B\004\200\246\035\005\0222\n#enabl"
  "e_shader_background_processing\030\301> \001(\010B\004\200"
  "\246\035\005\022(\n\025shader_precached_size\030\302> \001(\004B\010\200\246\035"
  "\005\300\246\035\001\022-\n\032needs_steam_service_repair\030\303> \001"
  "(\010B\010\200\246\035\005\300\246\035\001\022$\n\025download_peer_content\030\304>"
  " \001(\005B\004\200\246\035\005\022\'\n\030download_rate_bits_per_s\030\305"
  "> \001(\010B\004\200\246\035\005\022$\n\025restrict_auto_updates\030\306> "
  "\001(\010B\004\200\246\035\005\022*\n\033restrict_auto_updates_start"
  "\030\307> \001(\005B\004\200\246\035\005\022(\n\031restrict_auto_updates_e"
  "nd\030\310> \001(\005B\004\200\246\035\005\022\036\n\017download_region\030\311> \001("
  "\005B\004\200\246\035\005\022)\n\032download_while_app_running\030\312>"
  " \001(\010B\004\200\246\035\005\0220\n!download_throttle_while_st"
  "reaming\030\313> \001(\010B\004\200\246\035\005\022%\n\026download_throttl"
  "e_rate\030\314> \001(\005B\004\200\246\035\005\022\034\n\rcloud_enabled\030\220N "
  "\001(\010B\004\200\246\035\005\022T\n\027show_screenshot_manager\030\221N "
  "\001(\010B2\200\246\035\002\212\246\035*Software\\Valve\\Steam\\ShowSc"
  "reenshotManager\022\033\n\014music_volume\030\370U \001(\005B\004"
  "\200\246\035\005\022I\n\030music_pause_on_app_start\030\371U \001(\010B"
  "&\200\246\035\001\212\246\035\036Music\\PauseOnAppStartedProcess\022"
  "B\n\031music_pause_on_voice_chat\030\372U \001(\010B\036\200\246\035"
  "\001\212\246\035\026Music\\PauseOnVoiceChat\022W\n\033music_dow"
  "nload_high_quality\030\373U \001(\010B1\200\246\035\001\212\246\035)Music"
  "\\DownloadHighQualityAudioSoundtracks\022R\n\033"
  "music_playlist_notification\030\374U \001(\010B,\200\246\035\001"
  "\212\246\035$Music\\PlaylistNowPlayingNotification"
  "\022x\n\025broadcast_permissions\030\340] \001(\0162\025.EBroa"
  "dcastPermission:\036k_EBroadcastPermissionD"
  "isabledB!\200\246\035\003\212\246\035\025Broadcast\\Permissions\240\246"
  "\035\001\022>\n\026broadcast_output_width\030\341] \001(\005B\035\200\246\035"
  "\003\212\246\035\025Broadcast\\OutputWidth\022@\n\027broadcast_"
  "output_height\030\342] \001(\005B\036\200\246\035\003\212\246\035\026Broadcast\\"
  "OutputHeight\0225\n\021broadcast_bitrate\030\343] \001(\005"
  "B\031\200\246\035\003\212\246\035\021Broadcast\\MaxKbps\022\177\n\031broadcast"
  "_encoding_option\030\344] \001(\0162\031.EBroadcastEnco"
  "derSetting:\036k_EBroadcastEncoderBestQuali"
  "tyB \200\246\035\003\212\246\035\030Broadcast\\EncoderSetting\022E\n\032"
  "broadcast_record_all_video\030\345] \001(\010B \200\246\035\003\212"
  "\246\035\030Broadcast\\IncludeDesktop\022H\n\032broadcast"
  "_record_all_audio\030\346] \001(\010B#\200\246\035\003\212\246\035\033Broadc"
  "ast\\RecordSystemAudio\022A\n\033broadcast_recor"
  "d_microphone\030\347] \001(\010B\033\200\246\035\003\212\246\035\023Broadcast\\R"
  "ecordMic\022E\n\033broadcast_show_upload_stats\030"
  "\350] \001(\010B\037\200\246\035\003\212\246\035\027Broadcast\\ShowDebugInfo\022"
  "I\n\034broadcast_show_live_reminder\030\351] \001(\010B\""
  "\200\246\035\003\212\246\035\026Broadcast\\ShowReminder\230\246\035\001\022>\n\025br"
  "oadcast_chat_corner\030\352] \001(\005B\036\200\246\035\003\212\246\035\022Broa"
  "dcast\\ShowChat\240\246\035\001\022c\n)steam_input_config"
  "urator_error_msg_enable\030\261m \001(\010B/\200\246\035\001\212\246\035\'"
  "SteamInput/Configurator/ErrorMsgEnabled\022"
  "Q\n#controller_guide_button_focus_steam\030\262"
  "m \001(\010B#\200\246\035\003\212\246\035\033Controller_CheckGuideButt"
  "on\022C\n\026controller_ps4_support\030\263m \001(\010B\"\200\246\035"
  "\003\212\246\035\032SteamController_PS4Support\022E\n\027contr"
  "oller_xbox_support\030\264m \001(\010B#\200\246\035\003\212\246\035\033Steam"
  "Controller_XBoxSupport\022C\n\026controller_xbo"
  "x_driver\030\265m \001(\010B\"\200\246\035\003\212\246\035\032SteamController"
  "_XBoxDriver\022I\n\031controller_switch_support"
  "\030\266m \001(\010B%\200\246\035\003\212\246\035\035SteamController_SwitchS"
  "upport\022R\n\032controller_generic_support\030\267m "
  "\001(\010B-\200\246\035\003\212\246\035%SteamController_GenericGame"
  "padSupport\022W\n\034controller_power_off_timeo"
  "ut\030\270m \001(\005B0\200\246\035\003\212\246\035$CSettingsPanelGameCon"
  "troller.Timeout\240\246\035\017\022R\n\033turn_off_controll"
  "er_on_exit\030\271m \001(\010B,\200\246\035\003\212\246\035$CSettingsPane"
  "lGameController.TurnOff\0222\n#controller_co"
  "mbine_nintendo_joycons\030\272m \001(\010B\004\200\246\035\005\022I\n\020s"
  "tartup_movie_id\030\200} \001(\004B.\200\246\035\001\212\246\035\"Customiz"
  "ation/StartupMovie/MovieID\220\246\035\001\022S\n\030startu"
  "p_movie_local_path\030\201} \001(\tB0\200\246\035\001\212\246\035$Custo"
  "mization/StartupMovie/LocalPath\220\246\035\001\022N\n\025s"
  "tartup_movie_shuffle\030\202} \001(\010B.\200\246\035\001\212\246\035\"Cus"
  "tomization/StartupMovie/Shuffle\220\246\035\001\022X\n\035s"
  "tartup_movie_used_for_resume\030\203} \001(\010B0\200\246\035"
  "\003\212\246\035(Customization/StartupMovie/UsedForR"
  "esume\022M\n\034game_notes_enable_spellcheck\030\351\204"
  "\001 \001(\010B%\200\246\035\002\212\246\035\031GameNotesEnableSpellcheck"
  "\230\246\035\001\022I\n\030screenshot_items_per_row\030\320\214\001 \001(\005"
  "B%\200\246\035\002\212\246\035\031ScreenshotViewItemsPerRow\240\246\035\001\022"
  "$\n\024g_background_enabled\030\230\216\001 \001(\010B\004\200\246\035\005\022!\n"
  "\021g_background_path\030\231\216\001 \001(\tB\004\200\246\035\005\022%\n\025g_ba"
  "ckground_max_keep\030\232\216\001 \001(\tB\004\200\246\035\005\022O\n\032show_"
  "timestamps_in_console\030\240\234\001 \001(\010B)\200\246\035\003\212\246\035!D"
  "eveloper\\ShowTimestampsInConsole*\225\002\n\023ECl"
  "ientSettingStore\022!\n\035k_EClientSettingStor"
  "e_Invalid\020\000\022-\n)k_EClientSettingStore_Con"
  "figStore_Install\020\001\0221\n-k_EClientSettingSt"
  "ore_ConfigStore_UserRoaming\020\002\022/\n+k_EClie"
  "ntSettingStore_ConfigStore_UserLocal\020\003\022\""
  "\n\036k_EClientSettingStore_Registry\020\004\022$\n k_"
  "EClientSettingStore_CustomFunc\020\005*\265\001\n\031EOv"
  "erlayToggleBarLocation\022&\n\"k_EOverlayTogg"
  "leBarLocation_Bottom\020\000\022$\n k_EOverlayTogg"
  "leBarLocation_Left\020\001\022%\n!k_EOverlayToggle"
  "BarLocation_Right\020\002\022#\n\037k_EOverlayToggleB"
  "arLocation_Top\020\003:k\n\rsetting_store\022\035.goog"
  "le.protobuf.FieldOptions\030\340\324\003 \001(\0162\024.EClie"
  "ntSettingStore:\035k_EClientSettingStore_In"
  "valid:5\n\014setting_name\022\035.google.protobuf."
  "FieldOptions\030\341\324\003 \001(\t::\n\021setting_pre_logi"
  "n\022\035.google.protobuf.FieldOptions\030\342\324\003 \001(\010"
  ":=\n\024setting_default_bool\022\035.google.protob"
  "uf.FieldOptions\030\343\324\003 \001(\010:<\n\023setting_defau"
  "lt_int\022\035.google.protobuf.FieldOptions\030\344\324"
  "\003 \001(\005:=\n\024setting_default_uint\022\035.google.p"
  "rotobuf.FieldOptions\030\345\324\003 \001(\r:>\n\025setting_"
  "default_float\022\035.google.protobuf.FieldOpt"
  "ions\030\346\324\003 \001(\002:\?\n\026setting_default_string\022\035"
  ".google.protobuf.FieldOptions\030\347\324\003 \001(\t:9\n"
  "\020setting_readonly\022\035.google.protobuf.Fiel"
  "dOptions\030\350\324\003 \001(\010:<\n\023setting_description\022"
  "\035.google.protobuf.FieldOptions\030\351\324\003 \001(\tB\005"
  "H\001\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientsettings_2eproto_deps[2] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientsettings_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientsettings_2eproto = {
  false, false, 8885, descriptor_table_protodef_steammessages_5fclientsettings_2eproto, "steammessages_clientsettings.proto", 
  &descriptor_table_steammessages_5fclientsettings_2eproto_once, descriptor_table_steammessages_5fclientsettings_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_steammessages_5fclientsettings_2eproto::offsets,
  file_level_metadata_steammessages_5fclientsettings_2eproto, file_level_enum_descriptors_steammessages_5fclientsettings_2eproto, file_level_service_descriptors_steammessages_5fclientsettings_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientsettings_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientsettings_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientsettings_2eproto(&descriptor_table_steammessages_5fclientsettings_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientSettingStore_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[0];
}
bool EClientSettingStore_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOverlayToggleBarLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientsettings_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientsettings_2eproto[1];
}
bool EOverlayToggleBarLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgHotkey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHotkey>()._has_bits_);
  static void set_has_key_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alt_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ctrl_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_meta_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHotkey::CMsgHotkey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgHotkey)
}
CMsgHotkey::CMsgHotkey(const CMsgHotkey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&meta_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(meta_key_));
  // @@protoc_insertion_point(copy_constructor:CMsgHotkey)
}

inline void CMsgHotkey::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&meta_key_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(meta_key_));
}

CMsgHotkey::~CMsgHotkey() {
  // @@protoc_insertion_point(destructor:CMsgHotkey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgHotkey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgHotkey::ArenaDtor(void* object) {
  CMsgHotkey* _this = reinterpret_cast< CMsgHotkey* >(object);
  (void)_this;
}
void CMsgHotkey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHotkey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHotkey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHotkey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    display_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&key_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&meta_key_) -
        reinterpret_cast<char*>(&key_code_)) + sizeof(meta_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHotkey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 key_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key_code(&has_bits);
          key_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool alt_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_alt_key(&has_bits);
          alt_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shift_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shift_key(&has_bits);
          shift_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ctrl_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ctrl_key(&has_bits);
          ctrl_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool meta_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_meta_key(&has_bits);
          meta_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHotkey.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHotkey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHotkey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_code(), target);
  }

  // optional bool alt_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_alt_key(), target);
  }

  // optional bool shift_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shift_key(), target);
  }

  // optional bool ctrl_key = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ctrl_key(), target);
  }

  // optional bool meta_key = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_meta_key(), target);
  }

  // optional string display_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHotkey.display_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHotkey)
  return target;
}

size_t CMsgHotkey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHotkey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string display_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional uint32 key_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_key_code());
    }

    // optional bool alt_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool shift_key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ctrl_key = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool meta_key = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHotkey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgHotkey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHotkey::GetClassData() const { return &_class_data_; }

void CMsgHotkey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgHotkey *>(to)->MergeFrom(
      static_cast<const CMsgHotkey &>(from));
}


void CMsgHotkey::MergeFrom(const CMsgHotkey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHotkey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      key_code_ = from.key_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      alt_key_ = from.alt_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      shift_key_ = from.shift_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      ctrl_key_ = from.ctrl_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      meta_key_ = from.meta_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHotkey::CopyFrom(const CMsgHotkey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHotkey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHotkey::IsInitialized() const {
  return true;
}

void CMsgHotkey::InternalSwap(CMsgHotkey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHotkey, meta_key_)
      + sizeof(CMsgHotkey::meta_key_)
      - PROTOBUF_FIELD_OFFSET(CMsgHotkey, key_code_)>(
          reinterpret_cast<char*>(&key_code_),
          reinterpret_cast<char*>(&other->key_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHotkey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientsettings_2eproto_getter, &descriptor_table_steammessages_5fclientsettings_2eproto_once,
      file_level_metadata_steammessages_5fclientsettings_2eproto[0]);
}

// ===================================================================

class CMsgClientSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSettings>()._has_bits_);
  static void set_has_no_save_personal_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_oobe_test_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_in_client_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_steam_sideloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_preferred_monitor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_cef_gpu_blocklist_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_bigpicture_windowed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_external_display(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_steam_os_underscan_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_steam_os_underscan_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_min_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_max_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_auto_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_enable_test_updaters(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_small_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_skip_steamvr_install_dialog(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_always_show_user_chooser(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_show_family_sharing_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_overlay_fps_counter_corner(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_overlay_fps_counter_high_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::CMsgHotkey& overlay_key(const CMsgClientSettings* msg);
  static void set_has_overlay_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgHotkey& screenshot_key(const CMsgClientSettings* msg);
  static void set_has_screenshot_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enable_overlay(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_disable_desktop_game_theater(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_enable_screenshot_notification(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_enable_screenshot_sound(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_save_uncompressed_screenshots(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_screenshots_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_ping_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_server_ping_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_steam_networking_share_ip(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_web_browser_home(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_voice_mic_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_voice_mic_input_gain(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_voice_speaker_output_gain(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_voice_push_to_talk_setting(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::CMsgHotkey& voice_push_to_talk_key(const CMsgClientSettings* msg);
  static void set_has_voice_push_to_talk_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_overlay_toolbar_list_view(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_always_use_gamepadui_overlay(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_overlay_tabs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_overlay_scale_interface(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_smooth_scroll_webviews(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_enable_gpu_accelerated_webviews(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_enable_hardware_video_decoding(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_run_at_startup(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_enable_dpi_scaling(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_enable_marketing_messages(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_start_in_big_picture_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_jumplist_flags(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_enable_ui_sounds(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_disable_all_toasts(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_disable_toasts_in_game(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_play_sound_on_toast(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_library_display_size(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_library_whats_new_show_only_product_updates(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_show_store_content_on_home(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_start_page(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_library_low_bandwidth_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_library_low_perf_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_library_disable_community_content(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_library_display_icon_in_game_list(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_ready_to_play_includes_streaming(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_show_steam_deck_info(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_enable_shader_precache(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_enable_shader_background_processing(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_shader_precached_size(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_needs_steam_service_repair(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_download_peer_content(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_download_rate_bits_per_s(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_restrict_auto_updates(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_restrict_auto_updates_start(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_restrict_auto_updates_end(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_download_region(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_download_while_app_running(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_download_throttle_while_streaming(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_download_throttle_rate(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_cloud_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_show_screenshot_manager(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_music_volume(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_music_pause_on_app_start(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_music_pause_on_voice_chat(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_music_download_high_quality(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_music_playlist_notification(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_broadcast_permissions(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_broadcast_output_width(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_broadcast_output_height(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_broadcast_bitrate(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_broadcast_encoding_option(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_broadcast_record_all_video(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_broadcast_record_all_audio(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_broadcast_record_microphone(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_broadcast_show_upload_stats(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_broadcast_show_live_reminder(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_broadcast_chat_corner(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_steam_input_configurator_error_msg_enable(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_controller_guide_button_focus_steam(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_controller_ps4_support(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_controller_xbox_support(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_controller_xbox_driver(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_controller_switch_support(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_controller_generic_support(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_controller_power_off_timeout(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_turn_off_controller_on_exit(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_controller_combine_nintendo_joycons(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_startup_movie_id(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static void set_has_startup_movie_local_path(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_startup_movie_shuffle(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_startup_movie_used_for_resume(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static void set_has_game_notes_enable_spellcheck(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static void set_has_screenshot_items_per_row(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_g_background_enabled(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_g_background_path(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_g_background_max_keep(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_show_timestamps_in_console(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
};

const ::CMsgHotkey&
CMsgClientSettings::_Internal::overlay_key(const CMsgClientSettings* msg) {
  return *msg->overlay_key_;
}
const ::CMsgHotkey&
CMsgClientSettings::_Internal::screenshot_key(const CMsgClientSettings* msg) {
  return *msg->screenshot_key_;
}
const ::CMsgHotkey&
CMsgClientSettings::_Internal::voice_push_to_talk_key(const CMsgClientSettings* msg) {
  return *msg->voice_push_to_talk_key_;
}
CMsgClientSettings::CMsgClientSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSettings)
}
CMsgClientSettings::CMsgClientSettings(const CMsgClientSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preferred_monitor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    preferred_monitor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_monitor()) {
    preferred_monitor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preferred_monitor(), 
      GetArenaForAllocation());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  screenshots_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    screenshots_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_screenshots_path()) {
    screenshots_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_screenshots_path(), 
      GetArenaForAllocation());
  }
  web_browser_home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    web_browser_home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_web_browser_home()) {
    web_browser_home_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_web_browser_home(), 
      GetArenaForAllocation());
  }
  voice_mic_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    voice_mic_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_voice_mic_device_name()) {
    voice_mic_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voice_mic_device_name(), 
      GetArenaForAllocation());
  }
  overlay_tabs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    overlay_tabs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_overlay_tabs()) {
    overlay_tabs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_overlay_tabs(), 
      GetArenaForAllocation());
  }
  start_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_start_page()) {
    start_page_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_page(), 
      GetArenaForAllocation());
  }
  startup_movie_local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    startup_movie_local_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_startup_movie_local_path()) {
    startup_movie_local_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_startup_movie_local_path(), 
      GetArenaForAllocation());
  }
  g_background_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    g_background_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_g_background_path()) {
    g_background_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_g_background_path(), 
      GetArenaForAllocation());
  }
  g_background_max_keep_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    g_background_max_keep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_g_background_max_keep()) {
    g_background_max_keep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_g_background_max_keep(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_overlay_key()) {
    overlay_key_ = new ::CMsgHotkey(*from.overlay_key_);
  } else {
    overlay_key_ = nullptr;
  }
  if (from._internal_has_screenshot_key()) {
    screenshot_key_ = new ::CMsgHotkey(*from.screenshot_key_);
  } else {
    screenshot_key_ = nullptr;
  }
  if (from._internal_has_voice_push_to_talk_key()) {
    voice_push_to_talk_key_ = new ::CMsgHotkey(*from.voice_push_to_talk_key_);
  } else {
    voice_push_to_talk_key_ = nullptr;
  }
  ::memcpy(&no_save_personal_info_, &from.no_save_personal_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_timestamps_in_console_) -
    reinterpret_cast<char*>(&no_save_personal_info_)) + sizeof(show_timestamps_in_console_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSettings)
}

inline void CMsgClientSettings::SharedCtor() {
preferred_monitor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  preferred_monitor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
screenshots_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  screenshots_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
web_browser_home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  web_browser_home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
voice_mic_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  voice_mic_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
overlay_tabs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  overlay_tabs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
startup_movie_local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  startup_movie_local_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
g_background_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  g_background_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
g_background_max_keep_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  g_background_max_keep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&overlay_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_timestamps_in_console_) -
    reinterpret_cast<char*>(&overlay_key_)) + sizeof(show_timestamps_in_console_));
}

CMsgClientSettings::~CMsgClientSettings() {
  // @@protoc_insertion_point(destructor:CMsgClientSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  preferred_monitor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenshots_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  web_browser_home_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voice_mic_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overlay_tabs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  startup_movie_local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_background_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  g_background_max_keep_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete overlay_key_;
  if (this != internal_default_instance()) delete screenshot_key_;
  if (this != internal_default_instance()) delete voice_push_to_talk_key_;
}

void CMsgClientSettings::ArenaDtor(void* object) {
  CMsgClientSettings* _this = reinterpret_cast< CMsgClientSettings* >(object);
  (void)_this;
}
void CMsgClientSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      preferred_monitor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      screenshots_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      web_browser_home_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      voice_mic_device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      overlay_tabs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      start_page_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      startup_movie_local_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      g_background_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      g_background_max_keep_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(overlay_key_ != nullptr);
      overlay_key_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(screenshot_key_ != nullptr);
      screenshot_key_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(voice_push_to_talk_key_ != nullptr);
      voice_push_to_talk_key_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&no_save_personal_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_client_beta_) -
        reinterpret_cast<char*>(&no_save_personal_info_)) + sizeof(in_client_beta_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_steam_sideloaded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_scale_factor_) -
        reinterpret_cast<char*>(&is_steam_sideloaded_)) + sizeof(max_scale_factor_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&auto_scale_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_overlay_) -
        reinterpret_cast<char*>(&auto_scale_factor_)) + sizeof(enable_overlay_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&disable_desktop_game_theater_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_ping_rate_) -
        reinterpret_cast<char*>(&disable_desktop_game_theater_)) + sizeof(server_ping_rate_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&steam_networking_share_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_gpu_accelerated_webviews_) -
        reinterpret_cast<char*>(&steam_networking_share_ip_)) + sizeof(enable_gpu_accelerated_webviews_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enable_hardware_video_decoding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_all_toasts_) -
        reinterpret_cast<char*>(&enable_hardware_video_decoding_)) + sizeof(disable_all_toasts_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&disable_toasts_in_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&library_disable_community_content_) -
        reinterpret_cast<char*>(&disable_toasts_in_game_)) + sizeof(library_disable_community_content_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&library_display_icon_in_game_list_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_peer_content_) -
        reinterpret_cast<char*>(&library_display_icon_in_game_list_)) + sizeof(download_peer_content_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&restrict_auto_updates_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_throttle_rate_) -
        reinterpret_cast<char*>(&restrict_auto_updates_start_)) + sizeof(download_throttle_rate_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&cloud_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_record_all_video_) -
        reinterpret_cast<char*>(&cloud_enabled_)) + sizeof(broadcast_record_all_video_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&broadcast_record_all_audio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_record_microphone_) -
        reinterpret_cast<char*>(&broadcast_record_all_audio_)) + sizeof(broadcast_record_microphone_));
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&broadcast_show_upload_stats_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_power_off_timeout_) -
        reinterpret_cast<char*>(&broadcast_show_upload_stats_)) + sizeof(controller_power_off_timeout_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&controller_switch_support_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&g_background_enabled_) -
        reinterpret_cast<char*>(&controller_switch_support_)) + sizeof(g_background_enabled_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&startup_movie_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_timestamps_in_console_) -
        reinterpret_cast<char*>(&startup_movie_id_)) + sizeof(show_timestamps_in_console_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_no_save_personal_info(&_has_bits_);
          no_save_personal_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_oobe_test_mode_enabled(&_has_bits_);
          oobe_test_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_in_client_beta(&_has_bits_);
          in_client_beta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_steam_sideloaded(&_has_bits_);
          is_steam_sideloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_preferred_monitor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.preferred_monitor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_steam_cef_gpu_blocklist_disabled(&_has_bits_);
          steam_cef_gpu_blocklist_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bigpicture_windowed(&_has_bits_);
          bigpicture_windowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_external_display(&_has_bits_);
          is_external_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_steam_os_underscan_level(&_has_bits_);
          steam_os_underscan_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_steam_os_underscan_enabled(&_has_bits_);
          steam_os_underscan_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_min_scale_factor(&_has_bits_);
          min_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_max_scale_factor(&_has_bits_);
          max_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_auto_scale_factor(&_has_bits_);
          auto_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_test_updaters = 15 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "EnableTestUpdaters"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_enable_test_updaters(&_has_bits_);
          enable_test_updaters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_small_mode(&_has_bits_);
          small_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_skip_steamvr_install_dialog(&_has_bits_);
          skip_steamvr_install_dialog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_always_show_user_chooser(&_has_bits_);
          always_show_user_chooser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 3000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_show_family_sharing_notifications(&_has_bits_);
          show_family_sharing_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
      case 4000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_overlay_fps_counter_corner(&_has_bits_);
          overlay_fps_counter_corner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
      case 4001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_overlay_fps_counter_high_contrast(&_has_bits_);
          overlay_fps_counter_high_contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
      case 4002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
      case 4003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_screenshot_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay"];
      case 4004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_enable_overlay(&_has_bits_);
          enable_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_desktop_game_theater = 4005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\DisableLaunchInVR"];
      case 4005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_disable_desktop_game_theater(&_has_bits_);
          disable_desktop_game_theater_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification"];
      case 4006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_enable_screenshot_notification(&_has_bits_);
          enable_screenshot_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound"];
      case 4007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_enable_screenshot_sound(&_has_bits_);
          enable_screenshot_sound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
      case 4008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_save_uncompressed_screenshots(&_has_bits_);
          save_uncompressed_screenshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_screenshots_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.screenshots_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
      case 4010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_default_ping_rate(&_has_bits_);
          default_ping_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_server_ping_rate(&_has_bits_);
          server_ping_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_steam_networking_share_ip(&_has_bits_);
          steam_networking_share_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4013:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_web_browser_home();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.web_browser_home");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_voice_mic_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.voice_mic_device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_voice_mic_input_gain(&_has_bits_);
          voice_mic_input_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4016:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_voice_speaker_output_gain(&_has_bits_);
          voice_speaker_output_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4017:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_voice_push_to_talk_setting(&_has_bits_);
          voice_push_to_talk_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 4018:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice_push_to_talk_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
      case 4019:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_overlay_toolbar_list_view(&_has_bits_);
          overlay_toolbar_list_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
      case 4020:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_always_use_gamepadui_overlay(&_has_bits_);
          always_use_gamepadui_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
      case 4021:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_overlay_tabs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.overlay_tabs");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
      case 4022:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_overlay_scale_interface(&_has_bits_);
          overlay_scale_interface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\SmoothScrollWebViews", (.setting_default_bool) = true];
      case 5000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_smooth_scroll_webviews(&_has_bits_);
          smooth_scroll_webviews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 5001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enable_gpu_accelerated_webviews(&_has_bits_);
          enable_gpu_accelerated_webviews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 5003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_enable_hardware_video_decoding(&_has_bits_);
          enable_hardware_video_decoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 5004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_run_at_startup(&_has_bits_);
          run_at_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 5005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_enable_dpi_scaling(&_has_bits_);
          enable_dpi_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
      case 5006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_enable_marketing_messages(&_has_bits_);
          enable_marketing_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 5007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_start_in_big_picture_mode(&_has_bits_);
          start_in_big_picture_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
      case 5008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_jumplist_flags(&_has_bits_);
          jumplist_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
      case 5009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_enable_ui_sounds(&_has_bits_);
          enable_ui_sounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
      case 6000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_disable_all_toasts(&_has_bits_);
          disable_all_toasts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
      case 6001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_disable_toasts_in_game(&_has_bits_);
          disable_toasts_in_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
      case 6002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_play_sound_on_toast(&_has_bits_);
          play_sound_on_toast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
      case 7000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_library_display_size(&_has_bits_);
          library_display_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
      case 7001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_library_whats_new_show_only_product_updates(&_has_bits_);
          library_whats_new_show_only_product_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
      case 7002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_show_store_content_on_home(&_has_bits_);
          show_store_content_on_home_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 7003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_start_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.start_page");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
      case 7004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_library_low_bandwidth_mode(&_has_bits_);
          library_low_bandwidth_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
      case 7005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_library_low_perf_mode(&_has_bits_);
          library_low_perf_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
      case 7006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_library_disable_community_content(&_has_bits_);
          library_disable_community_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
      case 7007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_library_display_icon_in_game_list(&_has_bits_);
          library_display_icon_in_game_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
      case 7008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_ready_to_play_includes_streaming(&_has_bits_);
          ready_to_play_includes_streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
      case 7009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_show_steam_deck_info(&_has_bits_);
          show_steam_deck_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_enable_shader_precache(&_has_bits_);
          enable_shader_precache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable_shader_background_processing(&_has_bits_);
          enable_shader_background_processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];
      case 8002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shader_precached_size(&_has_bits_);
          shader_precached_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];
      case 8003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_needs_steam_service_repair(&_has_bits_);
          needs_steam_service_repair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_download_peer_content(&_has_bits_);
          download_peer_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_download_rate_bits_per_s(&_has_bits_);
          download_rate_bits_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_restrict_auto_updates(&_has_bits_);
          restrict_auto_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_restrict_auto_updates_start(&_has_bits_);
          restrict_auto_updates_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_restrict_auto_updates_end(&_has_bits_);
          restrict_auto_updates_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_download_region(&_has_bits_);
          download_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_download_while_app_running(&_has_bits_);
          download_while_app_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_download_throttle_while_streaming(&_has_bits_);
          download_throttle_while_streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 8012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_download_throttle_rate(&_has_bits_);
          download_throttle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 10000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_cloud_enabled(&_has_bits_);
          cloud_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
      case 10001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_show_screenshot_manager(&_has_bits_);
          show_screenshot_manager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 11000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_music_volume(&_has_bits_);
          music_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
      case 11001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_music_pause_on_app_start(&_has_bits_);
          music_pause_on_app_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
      case 11002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_music_pause_on_voice_chat(&_has_bits_);
          music_pause_on_voice_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
      case 11003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_music_download_high_quality(&_has_bits_);
          music_download_high_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
      case 11004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_music_playlist_notification(&_has_bits_);
          music_playlist_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
      case 12000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastPermission_IsValid(val))) {
            _internal_set_broadcast_permissions(static_cast<::EBroadcastPermission>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12000, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
      case 12001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_broadcast_output_width(&_has_bits_);
          broadcast_output_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight"];
      case 12002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_broadcast_output_height(&_has_bits_);
          broadcast_output_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps"];
      case 12003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_broadcast_bitrate(&_has_bits_);
          broadcast_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
      case 12004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastEncoderSetting_IsValid(val))) {
            _internal_set_broadcast_encoding_option(static_cast<::EBroadcastEncoderSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12004, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
      case 12005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_broadcast_record_all_video(&_has_bits_);
          broadcast_record_all_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
      case 12006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_broadcast_record_all_audio(&_has_bits_);
          broadcast_record_all_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
      case 12007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_broadcast_record_microphone(&_has_bits_);
          broadcast_record_microphone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
      case 12008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_broadcast_show_upload_stats(&_has_bits_);
          broadcast_show_upload_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
      case 12009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_broadcast_show_live_reminder(&_has_bits_);
          broadcast_show_live_reminder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
      case 12010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_broadcast_chat_corner(&_has_bits_);
          broadcast_chat_corner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
      case 14001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_steam_input_configurator_error_msg_enable(&_has_bits_);
          steam_input_configurator_error_msg_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];
      case 14002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_controller_guide_button_focus_steam(&_has_bits_);
          controller_guide_button_focus_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_ps4_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PS4Support"];
      case 14003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_controller_ps4_support(&_has_bits_);
          controller_ps4_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
      case 14004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_controller_xbox_support(&_has_bits_);
          controller_xbox_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
      case 14005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_controller_xbox_driver(&_has_bits_);
          controller_xbox_driver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
      case 14006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_controller_switch_support(&_has_bits_);
          controller_switch_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
      case 14007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_controller_generic_support(&_has_bits_);
          controller_generic_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
      case 14008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_controller_power_off_timeout(&_has_bits_);
          controller_power_off_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
      case 14009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_turn_off_controller_on_exit(&_has_bits_);
          turn_off_controller_on_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 14010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_controller_combine_nintendo_joycons(&_has_bits_);
          controller_combine_nintendo_joycons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
      case 16000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_startup_movie_id(&_has_bits_);
          startup_movie_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
      case 16001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_startup_movie_local_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.startup_movie_local_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
      case 16002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_startup_movie_shuffle(&_has_bits_);
          startup_movie_shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
      case 16003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_startup_movie_used_for_resume(&_has_bits_);
          startup_movie_used_for_resume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
      case 17001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_game_notes_enable_spellcheck(&_has_bits_);
          game_notes_enable_spellcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
      case 18000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_screenshot_items_per_row(&_has_bits_);
          screenshot_items_per_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 18200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_g_background_enabled(&_has_bits_);
          g_background_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 18201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_g_background_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.g_background_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];
      case 18202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_g_background_max_keep();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientSettings.g_background_max_keep");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
      case 20000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_show_timestamps_in_console(&_has_bits_);
          show_timestamps_in_console_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_no_save_personal_info(), target);
  }

  // optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_oobe_test_mode_enabled(), target);
  }

  // optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_in_client_beta(), target);
  }

  // optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_steam_sideloaded(), target);
  }

  // optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_monitor().data(), static_cast<int>(this->_internal_preferred_monitor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.preferred_monitor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_preferred_monitor(), target);
  }

  // optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_steam_cef_gpu_blocklist_disabled(), target);
  }

  // optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_bigpicture_windowed(), target);
  }

  // optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.display_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_display_name(), target);
  }

  // optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_external_display(), target);
  }

  // optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_steam_os_underscan_level(), target);
  }

  // optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_steam_os_underscan_enabled(), target);
  }

  // optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_min_scale_factor(), target);
  }

  // optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_max_scale_factor(), target);
  }

  // optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_auto_scale_factor(), target);
  }

  // optional bool enable_test_updaters = 15 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "EnableTestUpdaters"];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_enable_test_updaters(), target);
  }

  // optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_small_mode(), target);
  }

  // optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_skip_steamvr_install_dialog(), target);
  }

  // optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_always_show_user_chooser(), target);
  }

  // optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3000, this->_internal_show_family_sharing_notifications(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4000, this->_internal_overlay_fps_counter_corner(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4001, this->_internal_overlay_fps_counter_high_contrast(), target);
  }

  // optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4002, _Internal::overlay_key(this), target, stream);
  }

  // optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4003, _Internal::screenshot_key(this), target, stream);
  }

  // optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay"];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4004, this->_internal_enable_overlay(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool disable_desktop_game_theater = 4005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\DisableLaunchInVR"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4005, this->_internal_disable_desktop_game_theater(), target);
  }

  // optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4006, this->_internal_enable_screenshot_notification(), target);
  }

  // optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4007, this->_internal_enable_screenshot_sound(), target);
  }

  // optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4008, this->_internal_save_uncompressed_screenshots(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_screenshots_path().data(), static_cast<int>(this->_internal_screenshots_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.screenshots_path");
    target = stream->WriteStringMaybeAliased(
        4009, this->_internal_screenshots_path(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4010, this->_internal_default_ping_rate(), target);
  }

  // optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4011, this->_internal_server_ping_rate(), target);
  }

  // optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4012, this->_internal_steam_networking_share_ip(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_web_browser_home().data(), static_cast<int>(this->_internal_web_browser_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.web_browser_home");
    target = stream->WriteStringMaybeAliased(
        4013, this->_internal_web_browser_home(), target);
  }

  // optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_voice_mic_device_name().data(), static_cast<int>(this->_internal_voice_mic_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.voice_mic_device_name");
    target = stream->WriteStringMaybeAliased(
        4014, this->_internal_voice_mic_device_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4015, this->_internal_voice_mic_input_gain(), target);
  }

  // optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4016, this->_internal_voice_speaker_output_gain(), target);
  }

  // optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4017, this->_internal_voice_push_to_talk_setting(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4018, _Internal::voice_push_to_talk_key(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4019, this->_internal_overlay_toolbar_list_view(), target);
  }

  // optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4020, this->_internal_always_use_gamepadui_overlay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_overlay_tabs().data(), static_cast<int>(this->_internal_overlay_tabs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.overlay_tabs");
    target = stream->WriteStringMaybeAliased(
        4021, this->_internal_overlay_tabs(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4022, this->_internal_overlay_scale_interface(), target);
  }

  // optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\SmoothScrollWebViews", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5000, this->_internal_smooth_scroll_webviews(), target);
  }

  // optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5001, this->_internal_enable_gpu_accelerated_webviews(), target);
  }

  // optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5003, this->_internal_enable_hardware_video_decoding(), target);
  }

  // optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5004, this->_internal_run_at_startup(), target);
  }

  // optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5005, this->_internal_enable_dpi_scaling(), target);
  }

  // optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5006, this->_internal_enable_marketing_messages(), target);
  }

  // optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5007, this->_internal_start_in_big_picture_mode(), target);
  }

  // optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5008, this->_internal_jumplist_flags(), target);
  }

  // optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5009, this->_internal_enable_ui_sounds(), target);
  }

  // optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6000, this->_internal_disable_all_toasts(), target);
  }

  // optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6001, this->_internal_disable_toasts_in_game(), target);
  }

  // optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6002, this->_internal_play_sound_on_toast(), target);
  }

  // optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7000, this->_internal_library_display_size(), target);
  }

  // optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7001, this->_internal_library_whats_new_show_only_product_updates(), target);
  }

  // optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7002, this->_internal_show_store_content_on_home(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_page().data(), static_cast<int>(this->_internal_start_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.start_page");
    target = stream->WriteStringMaybeAliased(
        7003, this->_internal_start_page(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7004, this->_internal_library_low_bandwidth_mode(), target);
  }

  // optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7005, this->_internal_library_low_perf_mode(), target);
  }

  // optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7006, this->_internal_library_disable_community_content(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7007, this->_internal_library_display_icon_in_game_list(), target);
  }

  // optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7008, this->_internal_ready_to_play_includes_streaming(), target);
  }

  // optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7009, this->_internal_show_steam_deck_info(), target);
  }

  // optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8000, this->_internal_enable_shader_precache(), target);
  }

  // optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8001, this->_internal_enable_shader_background_processing(), target);
  }

  // optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8002, this->_internal_shader_precached_size(), target);
  }

  // optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8003, this->_internal_needs_steam_service_repair(), target);
  }

  // optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8004, this->_internal_download_peer_content(), target);
  }

  // optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8005, this->_internal_download_rate_bits_per_s(), target);
  }

  // optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8006, this->_internal_restrict_auto_updates(), target);
  }

  // optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8007, this->_internal_restrict_auto_updates_start(), target);
  }

  // optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8008, this->_internal_restrict_auto_updates_end(), target);
  }

  // optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8009, this->_internal_download_region(), target);
  }

  // optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8010, this->_internal_download_while_app_running(), target);
  }

  // optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8011, this->_internal_download_throttle_while_streaming(), target);
  }

  // optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8012, this->_internal_download_throttle_rate(), target);
  }

  // optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10000, this->_internal_cloud_enabled(), target);
  }

  // optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10001, this->_internal_show_screenshot_manager(), target);
  }

  // optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11000, this->_internal_music_volume(), target);
  }

  // optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11001, this->_internal_music_pause_on_app_start(), target);
  }

  // optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11002, this->_internal_music_pause_on_voice_chat(), target);
  }

  // optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11003, this->_internal_music_download_high_quality(), target);
  }

  // optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11004, this->_internal_music_playlist_notification(), target);
  }

  // optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12000, this->_internal_broadcast_permissions(), target);
  }

  // optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12001, this->_internal_broadcast_output_width(), target);
  }

  // optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight"];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12002, this->_internal_broadcast_output_height(), target);
  }

  // optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps"];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12003, this->_internal_broadcast_bitrate(), target);
  }

  // optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12004, this->_internal_broadcast_encoding_option(), target);
  }

  // optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12005, this->_internal_broadcast_record_all_video(), target);
  }

  // optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12006, this->_internal_broadcast_record_all_audio(), target);
  }

  // optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12007, this->_internal_broadcast_record_microphone(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12008, this->_internal_broadcast_show_upload_stats(), target);
  }

  // optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12009, this->_internal_broadcast_show_live_reminder(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12010, this->_internal_broadcast_chat_corner(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14001, this->_internal_steam_input_configurator_error_msg_enable(), target);
  }

  // optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14002, this->_internal_controller_guide_button_focus_steam(), target);
  }

  // optional bool controller_ps4_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PS4Support"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14003, this->_internal_controller_ps4_support(), target);
  }

  // optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14004, this->_internal_controller_xbox_support(), target);
  }

  // optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14005, this->_internal_controller_xbox_driver(), target);
  }

  // optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14006, this->_internal_controller_switch_support(), target);
  }

  // optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14007, this->_internal_controller_generic_support(), target);
  }

  // optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14008, this->_internal_controller_power_off_timeout(), target);
  }

  // optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14009, this->_internal_turn_off_controller_on_exit(), target);
  }

  // optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14010, this->_internal_controller_combine_nintendo_joycons(), target);
  }

  // optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16000, this->_internal_startup_movie_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_startup_movie_local_path().data(), static_cast<int>(this->_internal_startup_movie_local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.startup_movie_local_path");
    target = stream->WriteStringMaybeAliased(
        16001, this->_internal_startup_movie_local_path(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16002, this->_internal_startup_movie_shuffle(), target);
  }

  // optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16003, this->_internal_startup_movie_used_for_resume(), target);
  }

  // optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17001, this->_internal_game_notes_enable_spellcheck(), target);
  }

  // optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18000, this->_internal_screenshot_items_per_row(), target);
  }

  // optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18200, this->_internal_g_background_enabled(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_g_background_path().data(), static_cast<int>(this->_internal_g_background_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.g_background_path");
    target = stream->WriteStringMaybeAliased(
        18201, this->_internal_g_background_path(), target);
  }

  // optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_g_background_max_keep().data(), static_cast<int>(this->_internal_g_background_max_keep().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientSettings.g_background_max_keep");
    target = stream->WriteStringMaybeAliased(
        18202, this->_internal_g_background_max_keep(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20000, this->_internal_show_timestamps_in_console(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSettings)
  return target;
}

size_t CMsgClientSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_monitor());
    }

    // optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_screenshots_path());
    }

    // optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_web_browser_home());
    }

    // optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_voice_mic_device_name());
    }

    // optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_overlay_tabs());
    }

    // optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_page());
    }

    // optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_startup_movie_local_path());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_g_background_path());
    }

    // optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_g_background_max_keep());
    }

    // optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShortcutKey", (.setting_default_string) = "Shift\tKEY_TAB"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlay_key_);
    }

    // optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screenshot_key_);
    }

    // optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_push_to_talk_key_);
    }

    // optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\NoSavePersonalInfo"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software\\Valve\\Steam\\OOBETestModeEnabled"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabled"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 4;
    }

    // optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional bool enable_test_updaters = 15 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "EnableTestUpdaters"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software\\Valve\\Steam\\SmallMode"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\SteamVRHMDVGUIWarning"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage\\Auth\\AlwaysShowUserChooser"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSContrast"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableGameOverlay"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool disable_desktop_game_theater = 4005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\DisableLaunchInVR"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayShowFPSCorner"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_overlay_fps_counter_corner());
    }

    // optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_default_ping_rate());
    }

    // optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotNotification"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotPlaySound"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\InGameOverlayScreenshotSaveUncompressed"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_server_ping_rate());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_steam_networking_share_ip());
    }

    // optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_voice_push_to_talk_setting());
    }

    // optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableSCTenFootOverlayCheckNew"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER\\Software\\Valve\\Steam\\SmoothScrollWebViews", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news\\NotifyAvailableGames", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 1;
    }

    // optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\JumplistSettings", (.setting_default_uint) = 77680];
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_jumplist_flags());
    }

    // optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 1;
    }

    // optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system\\EnableUISounds", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 1;
    }

    // optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 1;
    }

    // optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_library_display_size());
    }

    // optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_shader_precached_size());
    }

    // optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_download_peer_content());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_restrict_auto_updates_start());
    }

    // optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_restrict_auto_updates_end());
    }

    // optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_download_region());
    }

    // optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_download_throttle_rate());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software\\Valve\\Steam\\ShowScreenshotManager"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

    // optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnAppStartedProcess"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PauseOnVoiceChat"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 1;
    }

    // optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_music_volume());
    }

    // optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\DownloadHighQualityAudioSoundtracks"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 1;
    }

    // optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music\\PlaylistNowPlayingNotification"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\IncludeDesktop"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordSystemAudio"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\Permissions", (.setting_default_int) = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_broadcast_permissions());
    }

    // optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputWidth"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_output_width());
    }

    // optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\OutputHeight"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_output_height());
    }

    // optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\MaxKbps"];
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_bitrate());
    }

    // optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\EncoderSetting"];
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_broadcast_encoding_option());
    }

    // optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowChat", (.setting_default_int) = 1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_broadcast_chat_corner());
    }

    // optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\RecordMic"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowDebugInfo"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast\\ShowReminder", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool controller_ps4_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PS4Support"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_controller_power_off_timeout());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_startup_movie_id());
    }

    // optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_screenshot_items_per_row());
    }

    // optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer\\ShowTimestampsInConsole"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSettings::GetClassData() const { return &_class_data_; }

void CMsgClientSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSettings *>(to)->MergeFrom(
      static_cast<const CMsgClientSettings &>(from));
}


void CMsgClientSettings::MergeFrom(const CMsgClientSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_preferred_monitor(from._internal_preferred_monitor());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_screenshots_path(from._internal_screenshots_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_web_browser_home(from._internal_web_browser_home());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_voice_mic_device_name(from._internal_voice_mic_device_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_overlay_tabs(from._internal_overlay_tabs());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_start_page(from._internal_start_page());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_startup_movie_local_path(from._internal_startup_movie_local_path());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_g_background_path(from._internal_g_background_path());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_g_background_max_keep(from._internal_g_background_max_keep());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_overlay_key()->::CMsgHotkey::MergeFrom(from._internal_overlay_key());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_screenshot_key()->::CMsgHotkey::MergeFrom(from._internal_screenshot_key());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_voice_push_to_talk_key()->::CMsgHotkey::MergeFrom(from._internal_voice_push_to_talk_key());
    }
    if (cached_has_bits & 0x00002000u) {
      no_save_personal_info_ = from.no_save_personal_info_;
    }
    if (cached_has_bits & 0x00004000u) {
      oobe_test_mode_enabled_ = from.oobe_test_mode_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      in_client_beta_ = from.in_client_beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_steam_sideloaded_ = from.is_steam_sideloaded_;
    }
    if (cached_has_bits & 0x00020000u) {
      steam_cef_gpu_blocklist_disabled_ = from.steam_cef_gpu_blocklist_disabled_;
    }
    if (cached_has_bits & 0x00040000u) {
      bigpicture_windowed_ = from.bigpicture_windowed_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_external_display_ = from.is_external_display_;
    }
    if (cached_has_bits & 0x00100000u) {
      steam_os_underscan_enabled_ = from.steam_os_underscan_enabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      steam_os_underscan_level_ = from.steam_os_underscan_level_;
    }
    if (cached_has_bits & 0x00400000u) {
      min_scale_factor_ = from.min_scale_factor_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_scale_factor_ = from.max_scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      auto_scale_factor_ = from.auto_scale_factor_;
    }
    if (cached_has_bits & 0x02000000u) {
      enable_test_updaters_ = from.enable_test_updaters_;
    }
    if (cached_has_bits & 0x04000000u) {
      small_mode_ = from.small_mode_;
    }
    if (cached_has_bits & 0x08000000u) {
      skip_steamvr_install_dialog_ = from.skip_steamvr_install_dialog_;
    }
    if (cached_has_bits & 0x10000000u) {
      always_show_user_chooser_ = from.always_show_user_chooser_;
    }
    if (cached_has_bits & 0x20000000u) {
      show_family_sharing_notifications_ = from.show_family_sharing_notifications_;
    }
    if (cached_has_bits & 0x40000000u) {
      overlay_fps_counter_high_contrast_ = from.overlay_fps_counter_high_contrast_;
    }
    if (cached_has_bits & 0x80000000u) {
      enable_overlay_ = from.enable_overlay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      disable_desktop_game_theater_ = from.disable_desktop_game_theater_;
    }
    if (cached_has_bits & 0x00000002u) {
      overlay_fps_counter_corner_ = from.overlay_fps_counter_corner_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_ping_rate_ = from.default_ping_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_screenshot_notification_ = from.enable_screenshot_notification_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_screenshot_sound_ = from.enable_screenshot_sound_;
    }
    if (cached_has_bits & 0x00000020u) {
      save_uncompressed_screenshots_ = from.save_uncompressed_screenshots_;
    }
    if (cached_has_bits & 0x00000040u) {
      overlay_toolbar_list_view_ = from.overlay_toolbar_list_view_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_ping_rate_ = from.server_ping_rate_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      steam_networking_share_ip_ = from.steam_networking_share_ip_;
    }
    if (cached_has_bits & 0x00000200u) {
      voice_mic_input_gain_ = from.voice_mic_input_gain_;
    }
    if (cached_has_bits & 0x00000400u) {
      voice_speaker_output_gain_ = from.voice_speaker_output_gain_;
    }
    if (cached_has_bits & 0x00000800u) {
      voice_push_to_talk_setting_ = from.voice_push_to_talk_setting_;
    }
    if (cached_has_bits & 0x00001000u) {
      always_use_gamepadui_overlay_ = from.always_use_gamepadui_overlay_;
    }
    if (cached_has_bits & 0x00002000u) {
      overlay_scale_interface_ = from.overlay_scale_interface_;
    }
    if (cached_has_bits & 0x00004000u) {
      smooth_scroll_webviews_ = from.smooth_scroll_webviews_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_gpu_accelerated_webviews_ = from.enable_gpu_accelerated_webviews_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hardware_video_decoding_ = from.enable_hardware_video_decoding_;
    }
    if (cached_has_bits & 0x00020000u) {
      run_at_startup_ = from.run_at_startup_;
    }
    if (cached_has_bits & 0x00040000u) {
      enable_dpi_scaling_ = from.enable_dpi_scaling_;
    }
    if (cached_has_bits & 0x00080000u) {
      enable_marketing_messages_ = from.enable_marketing_messages_;
    }
    if (cached_has_bits & 0x00100000u) {
      jumplist_flags_ = from.jumplist_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      start_in_big_picture_mode_ = from.start_in_big_picture_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_ui_sounds_ = from.enable_ui_sounds_;
    }
    if (cached_has_bits & 0x00800000u) {
      disable_all_toasts_ = from.disable_all_toasts_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      disable_toasts_in_game_ = from.disable_toasts_in_game_;
    }
    if (cached_has_bits & 0x02000000u) {
      play_sound_on_toast_ = from.play_sound_on_toast_;
    }
    if (cached_has_bits & 0x04000000u) {
      library_whats_new_show_only_product_updates_ = from.library_whats_new_show_only_product_updates_;
    }
    if (cached_has_bits & 0x08000000u) {
      show_store_content_on_home_ = from.show_store_content_on_home_;
    }
    if (cached_has_bits & 0x10000000u) {
      library_low_bandwidth_mode_ = from.library_low_bandwidth_mode_;
    }
    if (cached_has_bits & 0x20000000u) {
      library_display_size_ = from.library_display_size_;
    }
    if (cached_has_bits & 0x40000000u) {
      library_low_perf_mode_ = from.library_low_perf_mode_;
    }
    if (cached_has_bits & 0x80000000u) {
      library_disable_community_content_ = from.library_disable_community_content_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      library_display_icon_in_game_list_ = from.library_display_icon_in_game_list_;
    }
    if (cached_has_bits & 0x00000002u) {
      ready_to_play_includes_streaming_ = from.ready_to_play_includes_streaming_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_steam_deck_info_ = from.show_steam_deck_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_shader_precache_ = from.enable_shader_precache_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_shader_background_processing_ = from.enable_shader_background_processing_;
    }
    if (cached_has_bits & 0x00000020u) {
      needs_steam_service_repair_ = from.needs_steam_service_repair_;
    }
    if (cached_has_bits & 0x00000040u) {
      shader_precached_size_ = from.shader_precached_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      download_peer_content_ = from.download_peer_content_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      restrict_auto_updates_start_ = from.restrict_auto_updates_start_;
    }
    if (cached_has_bits & 0x00000200u) {
      restrict_auto_updates_end_ = from.restrict_auto_updates_end_;
    }
    if (cached_has_bits & 0x00000400u) {
      download_rate_bits_per_s_ = from.download_rate_bits_per_s_;
    }
    if (cached_has_bits & 0x00000800u) {
      restrict_auto_updates_ = from.restrict_auto_updates_;
    }
    if (cached_has_bits & 0x00001000u) {
      download_while_app_running_ = from.download_while_app_running_;
    }
    if (cached_has_bits & 0x00002000u) {
      download_throttle_while_streaming_ = from.download_throttle_while_streaming_;
    }
    if (cached_has_bits & 0x00004000u) {
      download_region_ = from.download_region_;
    }
    if (cached_has_bits & 0x00008000u) {
      download_throttle_rate_ = from.download_throttle_rate_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      cloud_enabled_ = from.cloud_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      show_screenshot_manager_ = from.show_screenshot_manager_;
    }
    if (cached_has_bits & 0x00040000u) {
      music_pause_on_app_start_ = from.music_pause_on_app_start_;
    }
    if (cached_has_bits & 0x00080000u) {
      music_pause_on_voice_chat_ = from.music_pause_on_voice_chat_;
    }
    if (cached_has_bits & 0x00100000u) {
      music_volume_ = from.music_volume_;
    }
    if (cached_has_bits & 0x00200000u) {
      music_download_high_quality_ = from.music_download_high_quality_;
    }
    if (cached_has_bits & 0x00400000u) {
      music_playlist_notification_ = from.music_playlist_notification_;
    }
    if (cached_has_bits & 0x00800000u) {
      broadcast_record_all_video_ = from.broadcast_record_all_video_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      broadcast_record_all_audio_ = from.broadcast_record_all_audio_;
    }
    if (cached_has_bits & 0x02000000u) {
      broadcast_permissions_ = from.broadcast_permissions_;
    }
    if (cached_has_bits & 0x04000000u) {
      broadcast_output_width_ = from.broadcast_output_width_;
    }
    if (cached_has_bits & 0x08000000u) {
      broadcast_output_height_ = from.broadcast_output_height_;
    }
    if (cached_has_bits & 0x10000000u) {
      broadcast_bitrate_ = from.broadcast_bitrate_;
    }
    if (cached_has_bits & 0x20000000u) {
      broadcast_encoding_option_ = from.broadcast_encoding_option_;
    }
    if (cached_has_bits & 0x40000000u) {
      broadcast_chat_corner_ = from.broadcast_chat_corner_;
    }
    if (cached_has_bits & 0x80000000u) {
      broadcast_record_microphone_ = from.broadcast_record_microphone_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_show_upload_stats_ = from.broadcast_show_upload_stats_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_show_live_reminder_ = from.broadcast_show_live_reminder_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_input_configurator_error_msg_enable_ = from.steam_input_configurator_error_msg_enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      controller_guide_button_focus_steam_ = from.controller_guide_button_focus_steam_;
    }
    if (cached_has_bits & 0x00000010u) {
      controller_ps4_support_ = from.controller_ps4_support_;
    }
    if (cached_has_bits & 0x00000020u) {
      controller_xbox_support_ = from.controller_xbox_support_;
    }
    if (cached_has_bits & 0x00000040u) {
      controller_xbox_driver_ = from.controller_xbox_driver_;
    }
    if (cached_has_bits & 0x00000080u) {
      controller_power_off_timeout_ = from.controller_power_off_timeout_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      controller_switch_support_ = from.controller_switch_support_;
    }
    if (cached_has_bits & 0x00000200u) {
      controller_generic_support_ = from.controller_generic_support_;
    }
    if (cached_has_bits & 0x00000400u) {
      turn_off_controller_on_exit_ = from.turn_off_controller_on_exit_;
    }
    if (cached_has_bits & 0x00000800u) {
      controller_combine_nintendo_joycons_ = from.controller_combine_nintendo_joycons_;
    }
    if (cached_has_bits & 0x00001000u) {
      startup_movie_shuffle_ = from.startup_movie_shuffle_;
    }
    if (cached_has_bits & 0x00002000u) {
      startup_movie_used_for_resume_ = from.startup_movie_used_for_resume_;
    }
    if (cached_has_bits & 0x00004000u) {
      game_notes_enable_spellcheck_ = from.game_notes_enable_spellcheck_;
    }
    if (cached_has_bits & 0x00008000u) {
      g_background_enabled_ = from.g_background_enabled_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      startup_movie_id_ = from.startup_movie_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      screenshot_items_per_row_ = from.screenshot_items_per_row_;
    }
    if (cached_has_bits & 0x00040000u) {
      show_timestamps_in_console_ = from.show_timestamps_in_console_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSettings::CopyFrom(const CMsgClientSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSettings::IsInitialized() const {
  return true;
}

void CMsgClientSettings::InternalSwap(CMsgClientSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &preferred_monitor_, lhs_arena,
      &other->preferred_monitor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &screenshots_path_, lhs_arena,
      &other->screenshots_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &web_browser_home_, lhs_arena,
      &other->web_browser_home_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &voice_mic_device_name_, lhs_arena,
      &other->voice_mic_device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &overlay_tabs_, lhs_arena,
      &other->overlay_tabs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_page_, lhs_arena,
      &other->start_page_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &startup_movie_local_path_, lhs_arena,
      &other->startup_movie_local_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &g_background_path_, lhs_arena,
      &other->g_background_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &g_background_max_keep_, lhs_arena,
      &other->g_background_max_keep_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSettings, show_timestamps_in_console_)
      + sizeof(CMsgClientSettings::show_timestamps_in_console_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSettings, overlay_key_)>(
          reinterpret_cast<char*>(&overlay_key_),
          reinterpret_cast<char*>(&other->overlay_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientsettings_2eproto_getter, &descriptor_table_steammessages_5fclientsettings_2eproto_once,
      file_level_metadata_steammessages_5fclientsettings_2eproto[1]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::EClientSettingStore, ::EClientSettingStore_IsValid>, 14, false >
  setting_store(kSettingStoreFieldNumber, static_cast< ::EClientSettingStore >(0));
const std::string setting_name_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_name(kSettingNameFieldNumber, setting_name_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_pre_login(kSettingPreLoginFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_default_bool(kSettingDefaultBoolFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  setting_default_int(kSettingDefaultIntFieldNumber, 0);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  setting_default_uint(kSettingDefaultUintFieldNumber, 0u);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  setting_default_float(kSettingDefaultFloatFieldNumber, 0);
const std::string setting_default_string_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_default_string(kSettingDefaultStringFieldNumber, setting_default_string_default);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  setting_readonly(kSettingReadonlyFieldNumber, false);
const std::string setting_description_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  setting_description(kSettingDescriptionFieldNumber, setting_description_default);

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgHotkey* Arena::CreateMaybeMessage< ::CMsgHotkey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHotkey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSettings* Arena::CreateMaybeMessage< ::CMsgClientSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
