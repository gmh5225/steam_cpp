// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamclient.proto

#include "steammessages_player.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal {
  constexpr CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetMutualFriendsForIncomingInvites_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_;
constexpr CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mutual_friend_account_ids_()
  , steamid_(uint64_t{0u}){}
struct CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal {
  constexpr CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal() {}
  union {
    CPlayer_IncomingInviteMutualFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal _CPlayer_IncomingInviteMutualFriendList_default_instance_;
constexpr CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : incoming_invite_mutual_friends_lists_(){}
struct CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetMutualFriendsForIncomingInvites_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_;
constexpr CPlayer_GetOwnedGames_Request::CPlayer_GetOwnedGames_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_filter_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , include_appinfo_(false)
  , include_played_free_games_(false)
  , include_free_sub_(false)
  , include_extended_appinfo_(false)
  , skip_unvetted_apps_(true){}
struct CPlayer_GetOwnedGames_RequestDefaultTypeInternal {
  constexpr CPlayer_GetOwnedGames_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetOwnedGames_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetOwnedGames_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetOwnedGames_RequestDefaultTypeInternal _CPlayer_GetOwnedGames_Request_default_instance_;
constexpr CPlayer_GetOwnedGames_Response_Game::CPlayer_GetOwnedGames_Response_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_descriptorids_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , img_icon_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , capsule_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_as_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0)
  , playtime_2weeks_(0)
  , playtime_forever_(0)
  , playtime_windows_forever_(0)
  , playtime_mac_forever_(0)
  , playtime_linux_forever_(0)
  , rtime_last_played_(0u)
  , has_community_visible_stats_(false)
  , has_workshop_(false)
  , has_market_(false)
  , has_dlc_(false)
  , has_leaderboards_(false)
  , playtime_disconnected_(0){}
struct CPlayer_GetOwnedGames_Response_GameDefaultTypeInternal {
  constexpr CPlayer_GetOwnedGames_Response_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetOwnedGames_Response_GameDefaultTypeInternal() {}
  union {
    CPlayer_GetOwnedGames_Response_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetOwnedGames_Response_GameDefaultTypeInternal _CPlayer_GetOwnedGames_Response_Game_default_instance_;
constexpr CPlayer_GetOwnedGames_Response::CPlayer_GetOwnedGames_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_()
  , game_count_(0u){}
struct CPlayer_GetOwnedGames_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetOwnedGames_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetOwnedGames_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetOwnedGames_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetOwnedGames_ResponseDefaultTypeInternal _CPlayer_GetOwnedGames_Response_default_instance_;
constexpr CPlayer_GetPlayNext_Request::CPlayer_GetPlayNext_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ignore_appids_()
  , max_age_seconds_(0u){}
struct CPlayer_GetPlayNext_RequestDefaultTypeInternal {
  constexpr CPlayer_GetPlayNext_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPlayNext_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPlayNext_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPlayNext_RequestDefaultTypeInternal _CPlayer_GetPlayNext_Request_default_instance_;
constexpr CPlayer_GetPlayNext_Response::CPlayer_GetPlayNext_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , last_update_time_(0u){}
struct CPlayer_GetPlayNext_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetPlayNext_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPlayNext_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPlayNext_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPlayNext_ResponseDefaultTypeInternal _CPlayer_GetPlayNext_Response_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Request_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , minutes_played_(0u)
  , minutes_played_forever_(0u){}
struct CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , minutes_played_(0u)
  , minutes_played_forever_(0u)
  , in_wishlist_(false)
  , owned_(false){}
struct CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : in_game_()
  , played_recently_()
  , played_ever_()
  , owns_()
  , in_wishlist_()
  , your_info_(nullptr){}
struct CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_default_instance_;
constexpr CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal {
  constexpr CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Request_default_instance_;
constexpr CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0)
  , series_(0)
  , border_color_(0u){}
struct CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal {
  constexpr CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Response_Badge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
constexpr CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : badges_()
  , player_level_(0u){}
struct CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_default_instance_;
constexpr CPlayer_GetProfileBackground_Request::CPlayer_GetProfileBackground_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CPlayer_GetProfileBackground_RequestDefaultTypeInternal {
  constexpr CPlayer_GetProfileBackground_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileBackground_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileBackground_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileBackground_RequestDefaultTypeInternal _CPlayer_GetProfileBackground_Request_default_instance_;
constexpr ProfileItem_ProfileColor::ProfileItem_ProfileColor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : style_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProfileItem_ProfileColorDefaultTypeInternal {
  constexpr ProfileItem_ProfileColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileItem_ProfileColorDefaultTypeInternal() {}
  union {
    ProfileItem_ProfileColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileItem_ProfileColorDefaultTypeInternal _ProfileItem_ProfileColor_default_instance_;
constexpr ProfileItem::ProfileItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_colors_()
  , image_small_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_large_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , movie_webm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , movie_mp4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , movie_webm_small_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , movie_mp4_small_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , communityitemid_(uint64_t{0u})
  , appid_(0u)
  , item_type_(0u)
  , item_class_(0u)
  , equipped_flags_(0u){}
struct ProfileItemDefaultTypeInternal {
  constexpr ProfileItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileItemDefaultTypeInternal() {}
  union {
    ProfileItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileItemDefaultTypeInternal _ProfileItem_default_instance_;
constexpr CPlayer_GetProfileBackground_Response::CPlayer_GetProfileBackground_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_background_(nullptr){}
struct CPlayer_GetProfileBackground_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetProfileBackground_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileBackground_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileBackground_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileBackground_ResponseDefaultTypeInternal _CPlayer_GetProfileBackground_Response_default_instance_;
constexpr CPlayer_SetProfileBackground_Request::CPlayer_SetProfileBackground_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communityitemid_(uint64_t{0u}){}
struct CPlayer_SetProfileBackground_RequestDefaultTypeInternal {
  constexpr CPlayer_SetProfileBackground_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetProfileBackground_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetProfileBackground_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetProfileBackground_RequestDefaultTypeInternal _CPlayer_SetProfileBackground_Request_default_instance_;
constexpr CPlayer_SetProfileBackground_Response::CPlayer_SetProfileBackground_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetProfileBackground_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetProfileBackground_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetProfileBackground_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetProfileBackground_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetProfileBackground_ResponseDefaultTypeInternal _CPlayer_SetProfileBackground_Response_default_instance_;
constexpr CPlayer_GetMiniProfileBackground_Request::CPlayer_GetMiniProfileBackground_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CPlayer_GetMiniProfileBackground_RequestDefaultTypeInternal {
  constexpr CPlayer_GetMiniProfileBackground_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetMiniProfileBackground_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetMiniProfileBackground_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetMiniProfileBackground_RequestDefaultTypeInternal _CPlayer_GetMiniProfileBackground_Request_default_instance_;
constexpr CPlayer_GetMiniProfileBackground_Response::CPlayer_GetMiniProfileBackground_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_background_(nullptr){}
struct CPlayer_GetMiniProfileBackground_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetMiniProfileBackground_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetMiniProfileBackground_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetMiniProfileBackground_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetMiniProfileBackground_ResponseDefaultTypeInternal _CPlayer_GetMiniProfileBackground_Response_default_instance_;
constexpr CPlayer_SetMiniProfileBackground_Request::CPlayer_SetMiniProfileBackground_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communityitemid_(uint64_t{0u}){}
struct CPlayer_SetMiniProfileBackground_RequestDefaultTypeInternal {
  constexpr CPlayer_SetMiniProfileBackground_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetMiniProfileBackground_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetMiniProfileBackground_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetMiniProfileBackground_RequestDefaultTypeInternal _CPlayer_SetMiniProfileBackground_Request_default_instance_;
constexpr CPlayer_SetMiniProfileBackground_Response::CPlayer_SetMiniProfileBackground_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetMiniProfileBackground_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetMiniProfileBackground_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetMiniProfileBackground_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetMiniProfileBackground_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetMiniProfileBackground_ResponseDefaultTypeInternal _CPlayer_SetMiniProfileBackground_Response_default_instance_;
constexpr CPlayer_GetAvatarFrame_Request::CPlayer_GetAvatarFrame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CPlayer_GetAvatarFrame_RequestDefaultTypeInternal {
  constexpr CPlayer_GetAvatarFrame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetAvatarFrame_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetAvatarFrame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetAvatarFrame_RequestDefaultTypeInternal _CPlayer_GetAvatarFrame_Request_default_instance_;
constexpr CPlayer_GetAvatarFrame_Response::CPlayer_GetAvatarFrame_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_frame_(nullptr){}
struct CPlayer_GetAvatarFrame_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetAvatarFrame_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetAvatarFrame_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetAvatarFrame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetAvatarFrame_ResponseDefaultTypeInternal _CPlayer_GetAvatarFrame_Response_default_instance_;
constexpr CPlayer_SetAvatarFrame_Request::CPlayer_SetAvatarFrame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communityitemid_(uint64_t{0u}){}
struct CPlayer_SetAvatarFrame_RequestDefaultTypeInternal {
  constexpr CPlayer_SetAvatarFrame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetAvatarFrame_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetAvatarFrame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetAvatarFrame_RequestDefaultTypeInternal _CPlayer_SetAvatarFrame_Request_default_instance_;
constexpr CPlayer_SetAvatarFrame_Response::CPlayer_SetAvatarFrame_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetAvatarFrame_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetAvatarFrame_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetAvatarFrame_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetAvatarFrame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetAvatarFrame_ResponseDefaultTypeInternal _CPlayer_SetAvatarFrame_Response_default_instance_;
constexpr CPlayer_GetAnimatedAvatar_Request::CPlayer_GetAnimatedAvatar_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CPlayer_GetAnimatedAvatar_RequestDefaultTypeInternal {
  constexpr CPlayer_GetAnimatedAvatar_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetAnimatedAvatar_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetAnimatedAvatar_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetAnimatedAvatar_RequestDefaultTypeInternal _CPlayer_GetAnimatedAvatar_Request_default_instance_;
constexpr CPlayer_GetAnimatedAvatar_Response::CPlayer_GetAnimatedAvatar_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : avatar_(nullptr){}
struct CPlayer_GetAnimatedAvatar_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetAnimatedAvatar_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetAnimatedAvatar_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetAnimatedAvatar_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetAnimatedAvatar_ResponseDefaultTypeInternal _CPlayer_GetAnimatedAvatar_Response_default_instance_;
constexpr CPlayer_SetAnimatedAvatar_Request::CPlayer_SetAnimatedAvatar_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communityitemid_(uint64_t{0u}){}
struct CPlayer_SetAnimatedAvatar_RequestDefaultTypeInternal {
  constexpr CPlayer_SetAnimatedAvatar_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetAnimatedAvatar_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetAnimatedAvatar_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetAnimatedAvatar_RequestDefaultTypeInternal _CPlayer_SetAnimatedAvatar_Request_default_instance_;
constexpr CPlayer_SetAnimatedAvatar_Response::CPlayer_SetAnimatedAvatar_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetAnimatedAvatar_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetAnimatedAvatar_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetAnimatedAvatar_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetAnimatedAvatar_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetAnimatedAvatar_ResponseDefaultTypeInternal _CPlayer_SetAnimatedAvatar_Response_default_instance_;
constexpr CPlayer_GetSteamDeckKeyboardSkin_Request::CPlayer_GetSteamDeckKeyboardSkin_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CPlayer_GetSteamDeckKeyboardSkin_RequestDefaultTypeInternal {
  constexpr CPlayer_GetSteamDeckKeyboardSkin_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetSteamDeckKeyboardSkin_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetSteamDeckKeyboardSkin_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetSteamDeckKeyboardSkin_RequestDefaultTypeInternal _CPlayer_GetSteamDeckKeyboardSkin_Request_default_instance_;
constexpr CPlayer_GetSteamDeckKeyboardSkin_Response::CPlayer_GetSteamDeckKeyboardSkin_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_deck_keyboard_skin_(nullptr){}
struct CPlayer_GetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetSteamDeckKeyboardSkin_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal _CPlayer_GetSteamDeckKeyboardSkin_Response_default_instance_;
constexpr CPlayer_SetSteamDeckKeyboardSkin_Request::CPlayer_SetSteamDeckKeyboardSkin_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communityitemid_(uint64_t{0u}){}
struct CPlayer_SetSteamDeckKeyboardSkin_RequestDefaultTypeInternal {
  constexpr CPlayer_SetSteamDeckKeyboardSkin_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetSteamDeckKeyboardSkin_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetSteamDeckKeyboardSkin_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetSteamDeckKeyboardSkin_RequestDefaultTypeInternal _CPlayer_SetSteamDeckKeyboardSkin_Request_default_instance_;
constexpr CPlayer_SetSteamDeckKeyboardSkin_Response::CPlayer_SetSteamDeckKeyboardSkin_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetSteamDeckKeyboardSkin_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetSteamDeckKeyboardSkin_ResponseDefaultTypeInternal _CPlayer_SetSteamDeckKeyboardSkin_Response_default_instance_;
constexpr CPlayer_GetProfileItemsOwned_Request::CPlayer_GetProfileItemsOwned_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CPlayer_GetProfileItemsOwned_RequestDefaultTypeInternal {
  constexpr CPlayer_GetProfileItemsOwned_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileItemsOwned_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileItemsOwned_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileItemsOwned_RequestDefaultTypeInternal _CPlayer_GetProfileItemsOwned_Request_default_instance_;
constexpr CPlayer_GetProfileItemsOwned_Response::CPlayer_GetProfileItemsOwned_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_backgrounds_()
  , mini_profile_backgrounds_()
  , avatar_frames_()
  , animated_avatars_()
  , profile_modifiers_()
  , steam_deck_keyboard_skins_()
  , steam_deck_startup_movies_(){}
struct CPlayer_GetProfileItemsOwned_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetProfileItemsOwned_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileItemsOwned_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileItemsOwned_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileItemsOwned_ResponseDefaultTypeInternal _CPlayer_GetProfileItemsOwned_Response_default_instance_;
constexpr CPlayer_GetProfileItemsEquipped_Request::CPlayer_GetProfileItemsEquipped_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CPlayer_GetProfileItemsEquipped_RequestDefaultTypeInternal {
  constexpr CPlayer_GetProfileItemsEquipped_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileItemsEquipped_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileItemsEquipped_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileItemsEquipped_RequestDefaultTypeInternal _CPlayer_GetProfileItemsEquipped_Request_default_instance_;
constexpr CPlayer_GetProfileItemsEquipped_Response::CPlayer_GetProfileItemsEquipped_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_background_(nullptr)
  , mini_profile_background_(nullptr)
  , avatar_frame_(nullptr)
  , animated_avatar_(nullptr)
  , profile_modifier_(nullptr)
  , steam_deck_keyboard_skin_(nullptr){}
struct CPlayer_GetProfileItemsEquipped_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetProfileItemsEquipped_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileItemsEquipped_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileItemsEquipped_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileItemsEquipped_ResponseDefaultTypeInternal _CPlayer_GetProfileItemsEquipped_Response_default_instance_;
constexpr CPlayer_SetEquippedProfileItemFlags_Request::CPlayer_SetEquippedProfileItemFlags_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communityitemid_(uint64_t{0u})
  , flags_(0u){}
struct CPlayer_SetEquippedProfileItemFlags_RequestDefaultTypeInternal {
  constexpr CPlayer_SetEquippedProfileItemFlags_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetEquippedProfileItemFlags_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetEquippedProfileItemFlags_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetEquippedProfileItemFlags_RequestDefaultTypeInternal _CPlayer_SetEquippedProfileItemFlags_Request_default_instance_;
constexpr CPlayer_SetEquippedProfileItemFlags_Response::CPlayer_SetEquippedProfileItemFlags_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetEquippedProfileItemFlags_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetEquippedProfileItemFlags_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetEquippedProfileItemFlags_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetEquippedProfileItemFlags_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetEquippedProfileItemFlags_ResponseDefaultTypeInternal _CPlayer_SetEquippedProfileItemFlags_Response_default_instance_;
constexpr CPlayer_GetEmoticonList_Request::CPlayer_GetEmoticonList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetEmoticonList_RequestDefaultTypeInternal {
  constexpr CPlayer_GetEmoticonList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetEmoticonList_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetEmoticonList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetEmoticonList_RequestDefaultTypeInternal _CPlayer_GetEmoticonList_Request_default_instance_;
constexpr CPlayer_GetEmoticonList_Response_Emoticon::CPlayer_GetEmoticonList_Response_Emoticon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0)
  , time_last_used_(0u)
  , use_count_(0u)
  , time_received_(0u)
  , appid_(0u){}
struct CPlayer_GetEmoticonList_Response_EmoticonDefaultTypeInternal {
  constexpr CPlayer_GetEmoticonList_Response_EmoticonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetEmoticonList_Response_EmoticonDefaultTypeInternal() {}
  union {
    CPlayer_GetEmoticonList_Response_Emoticon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetEmoticonList_Response_EmoticonDefaultTypeInternal _CPlayer_GetEmoticonList_Response_Emoticon_default_instance_;
constexpr CPlayer_GetEmoticonList_Response::CPlayer_GetEmoticonList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : emoticons_(){}
struct CPlayer_GetEmoticonList_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetEmoticonList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetEmoticonList_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetEmoticonList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetEmoticonList_ResponseDefaultTypeInternal _CPlayer_GetEmoticonList_Response_default_instance_;
constexpr CPlayer_GetTopAchievementsForGames_Request::CPlayer_GetTopAchievementsForGames_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , max_achievements_(0u){}
struct CPlayer_GetTopAchievementsForGames_RequestDefaultTypeInternal {
  constexpr CPlayer_GetTopAchievementsForGames_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTopAchievementsForGames_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetTopAchievementsForGames_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTopAchievementsForGames_RequestDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Request_default_instance_;
constexpr CPlayer_GetTopAchievementsForGames_Response_Achievement::CPlayer_GetTopAchievementsForGames_Response_Achievement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_gray_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_percent_unlocked_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statid_(0u)
  , bit_(0u)
  , hidden_(false){}
struct CPlayer_GetTopAchievementsForGames_Response_AchievementDefaultTypeInternal {
  constexpr CPlayer_GetTopAchievementsForGames_Response_AchievementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTopAchievementsForGames_Response_AchievementDefaultTypeInternal() {}
  union {
    CPlayer_GetTopAchievementsForGames_Response_Achievement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTopAchievementsForGames_Response_AchievementDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Response_Achievement_default_instance_;
constexpr CPlayer_GetTopAchievementsForGames_Response_Game::CPlayer_GetTopAchievementsForGames_Response_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievements_()
  , appid_(0u)
  , total_achievements_(0u){}
struct CPlayer_GetTopAchievementsForGames_Response_GameDefaultTypeInternal {
  constexpr CPlayer_GetTopAchievementsForGames_Response_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTopAchievementsForGames_Response_GameDefaultTypeInternal() {}
  union {
    CPlayer_GetTopAchievementsForGames_Response_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTopAchievementsForGames_Response_GameDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Response_Game_default_instance_;
constexpr CPlayer_GetTopAchievementsForGames_Response::CPlayer_GetTopAchievementsForGames_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_(){}
struct CPlayer_GetTopAchievementsForGames_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetTopAchievementsForGames_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTopAchievementsForGames_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetTopAchievementsForGames_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTopAchievementsForGames_ResponseDefaultTypeInternal _CPlayer_GetTopAchievementsForGames_Response_default_instance_;
constexpr CPlayer_GetAchievementsProgress_Request::CPlayer_GetAchievementsProgress_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CPlayer_GetAchievementsProgress_RequestDefaultTypeInternal {
  constexpr CPlayer_GetAchievementsProgress_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetAchievementsProgress_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetAchievementsProgress_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetAchievementsProgress_RequestDefaultTypeInternal _CPlayer_GetAchievementsProgress_Request_default_instance_;
constexpr CPlayer_GetAchievementsProgress_Response_AchievementProgress::CPlayer_GetAchievementsProgress_Response_AchievementProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , unlocked_(0u)
  , total_(0u)
  , percentage_(0)
  , all_unlocked_(false)
  , cache_time_(0u){}
struct CPlayer_GetAchievementsProgress_Response_AchievementProgressDefaultTypeInternal {
  constexpr CPlayer_GetAchievementsProgress_Response_AchievementProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetAchievementsProgress_Response_AchievementProgressDefaultTypeInternal() {}
  union {
    CPlayer_GetAchievementsProgress_Response_AchievementProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetAchievementsProgress_Response_AchievementProgressDefaultTypeInternal _CPlayer_GetAchievementsProgress_Response_AchievementProgress_default_instance_;
constexpr CPlayer_GetAchievementsProgress_Response::CPlayer_GetAchievementsProgress_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievement_progress_(){}
struct CPlayer_GetAchievementsProgress_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetAchievementsProgress_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetAchievementsProgress_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetAchievementsProgress_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetAchievementsProgress_ResponseDefaultTypeInternal _CPlayer_GetAchievementsProgress_Response_default_instance_;
constexpr CPlayer_GetGameAchievements_Request::CPlayer_GetGameAchievements_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CPlayer_GetGameAchievements_RequestDefaultTypeInternal {
  constexpr CPlayer_GetGameAchievements_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameAchievements_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetGameAchievements_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameAchievements_RequestDefaultTypeInternal _CPlayer_GetGameAchievements_Request_default_instance_;
constexpr CPlayer_GetGameAchievements_Response_Achievement::CPlayer_GetGameAchievements_Response_Achievement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : internal_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localized_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localized_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_gray_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_percent_unlocked_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hidden_(false){}
struct CPlayer_GetGameAchievements_Response_AchievementDefaultTypeInternal {
  constexpr CPlayer_GetGameAchievements_Response_AchievementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameAchievements_Response_AchievementDefaultTypeInternal() {}
  union {
    CPlayer_GetGameAchievements_Response_Achievement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameAchievements_Response_AchievementDefaultTypeInternal _CPlayer_GetGameAchievements_Response_Achievement_default_instance_;
constexpr CPlayer_GetGameAchievements_Response::CPlayer_GetGameAchievements_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievements_(){}
struct CPlayer_GetGameAchievements_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetGameAchievements_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameAchievements_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetGameAchievements_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameAchievements_ResponseDefaultTypeInternal _CPlayer_GetGameAchievements_Response_default_instance_;
constexpr CPlayer_GetFavoriteBadge_Request::CPlayer_GetFavoriteBadge_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CPlayer_GetFavoriteBadge_RequestDefaultTypeInternal {
  constexpr CPlayer_GetFavoriteBadge_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFavoriteBadge_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetFavoriteBadge_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFavoriteBadge_RequestDefaultTypeInternal _CPlayer_GetFavoriteBadge_Request_default_instance_;
constexpr CPlayer_GetFavoriteBadge_Response::CPlayer_GetFavoriteBadge_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_favorite_badge_(false)
  , badgeid_(0u)
  , communityitemid_(uint64_t{0u})
  , item_type_(0u)
  , border_color_(0u)
  , appid_(0u)
  , level_(0u){}
struct CPlayer_GetFavoriteBadge_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetFavoriteBadge_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFavoriteBadge_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetFavoriteBadge_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFavoriteBadge_ResponseDefaultTypeInternal _CPlayer_GetFavoriteBadge_Response_default_instance_;
constexpr CPlayer_SetFavoriteBadge_Request::CPlayer_SetFavoriteBadge_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communityitemid_(uint64_t{0u})
  , badgeid_(0u){}
struct CPlayer_SetFavoriteBadge_RequestDefaultTypeInternal {
  constexpr CPlayer_SetFavoriteBadge_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetFavoriteBadge_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetFavoriteBadge_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetFavoriteBadge_RequestDefaultTypeInternal _CPlayer_SetFavoriteBadge_Request_default_instance_;
constexpr CPlayer_SetFavoriteBadge_Response::CPlayer_SetFavoriteBadge_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetFavoriteBadge_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetFavoriteBadge_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetFavoriteBadge_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetFavoriteBadge_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetFavoriteBadge_ResponseDefaultTypeInternal _CPlayer_SetFavoriteBadge_Response_default_instance_;
constexpr CPlayer_GetProfileCustomization_Request::CPlayer_GetProfileCustomization_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , include_inactive_customizations_(false)
  , include_purchased_customizations_(false){}
struct CPlayer_GetProfileCustomization_RequestDefaultTypeInternal {
  constexpr CPlayer_GetProfileCustomization_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileCustomization_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileCustomization_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileCustomization_RequestDefaultTypeInternal _CPlayer_GetProfileCustomization_Request_default_instance_;
constexpr ProfileCustomizationSlot::ProfileCustomizationSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slot_(0u)
  , appid_(0u)
  , publishedfileid_(uint64_t{0u})
  , item_assetid_(uint64_t{0u})
  , item_contextid_(uint64_t{0u})
  , accountid_(0u)
  , badgeid_(0u)
  , item_classid_(uint64_t{0u})
  , border_color_(0u)
  , ban_check_result_(0)

  , item_instanceid_(uint64_t{0u})
  , replay_year_(0u){}
struct ProfileCustomizationSlotDefaultTypeInternal {
  constexpr ProfileCustomizationSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileCustomizationSlotDefaultTypeInternal() {}
  union {
    ProfileCustomizationSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileCustomizationSlotDefaultTypeInternal _ProfileCustomizationSlot_default_instance_;
constexpr ProfileCustomization::ProfileCustomization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slots_()
  , customization_type_(0)

  , large_(false)
  , active_(false)
  , purchaseid_(uint64_t{0u})
  , customization_style_(0)

  , level_(0u){}
struct ProfileCustomizationDefaultTypeInternal {
  constexpr ProfileCustomizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileCustomizationDefaultTypeInternal() {}
  union {
    ProfileCustomization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileCustomizationDefaultTypeInternal _ProfileCustomization_default_instance_;
constexpr ProfileTheme::ProfileTheme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : theme_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProfileThemeDefaultTypeInternal {
  constexpr ProfileThemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfileThemeDefaultTypeInternal() {}
  union {
    ProfileTheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfileThemeDefaultTypeInternal _ProfileTheme_default_instance_;
constexpr ProfilePreferences::ProfilePreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hide_profile_awards_(false){}
struct ProfilePreferencesDefaultTypeInternal {
  constexpr ProfilePreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProfilePreferencesDefaultTypeInternal() {}
  union {
    ProfilePreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProfilePreferencesDefaultTypeInternal _ProfilePreferences_default_instance_;
constexpr CPlayer_GetProfileCustomization_Response_PurchasedCustomization::CPlayer_GetProfileCustomization_Response_PurchasedCustomization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchaseid_(uint64_t{0u})
  , customization_type_(0)

  , level_(0u){}
struct CPlayer_GetProfileCustomization_Response_PurchasedCustomizationDefaultTypeInternal {
  constexpr CPlayer_GetProfileCustomization_Response_PurchasedCustomizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileCustomization_Response_PurchasedCustomizationDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileCustomization_Response_PurchasedCustomization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileCustomization_Response_PurchasedCustomizationDefaultTypeInternal _CPlayer_GetProfileCustomization_Response_PurchasedCustomization_default_instance_;
constexpr CPlayer_GetProfileCustomization_Response::CPlayer_GetProfileCustomization_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customizations_()
  , purchased_customizations_()
  , profile_theme_(nullptr)
  , profile_preferences_(nullptr)
  , slots_available_(0u){}
struct CPlayer_GetProfileCustomization_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetProfileCustomization_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileCustomization_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileCustomization_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileCustomization_ResponseDefaultTypeInternal _CPlayer_GetProfileCustomization_Response_default_instance_;
constexpr CPlayer_GetPurchasedProfileCustomizations_Request::CPlayer_GetPurchasedProfileCustomizations_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CPlayer_GetPurchasedProfileCustomizations_RequestDefaultTypeInternal {
  constexpr CPlayer_GetPurchasedProfileCustomizations_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPurchasedProfileCustomizations_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPurchasedProfileCustomizations_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPurchasedProfileCustomizations_RequestDefaultTypeInternal _CPlayer_GetPurchasedProfileCustomizations_Request_default_instance_;
constexpr CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchaseid_(uint64_t{0u})
  , customization_type_(0)
{}
struct CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal {
  constexpr CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal() {}
  union {
    CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal _CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization_default_instance_;
constexpr CPlayer_GetPurchasedProfileCustomizations_Response::CPlayer_GetPurchasedProfileCustomizations_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchased_customizations_(){}
struct CPlayer_GetPurchasedProfileCustomizations_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetPurchasedProfileCustomizations_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPurchasedProfileCustomizations_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPurchasedProfileCustomizations_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPurchasedProfileCustomizations_ResponseDefaultTypeInternal _CPlayer_GetPurchasedProfileCustomizations_Response_default_instance_;
constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_RequestDefaultTypeInternal {
  constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPurchasedAndUpgradedProfileCustomizations_RequestDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request_default_instance_;
constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customization_type_(0)

  , count_(0u){}
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal {
  constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal() {}
  union {
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomizationDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization_default_instance_;
constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customization_type_(0)

  , level_(0u){}
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomizationDefaultTypeInternal {
  constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomizationDefaultTypeInternal() {}
  union {
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomizationDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization_default_instance_;
constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchased_customizations_()
  , upgraded_customizations_(){}
struct CPlayer_GetPurchasedAndUpgradedProfileCustomizations_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetPurchasedAndUpgradedProfileCustomizations_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPurchasedAndUpgradedProfileCustomizations_ResponseDefaultTypeInternal _CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_default_instance_;
constexpr CPlayer_GetProfileThemesAvailable_Request::CPlayer_GetProfileThemesAvailable_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetProfileThemesAvailable_RequestDefaultTypeInternal {
  constexpr CPlayer_GetProfileThemesAvailable_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileThemesAvailable_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileThemesAvailable_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileThemesAvailable_RequestDefaultTypeInternal _CPlayer_GetProfileThemesAvailable_Request_default_instance_;
constexpr CPlayer_GetProfileThemesAvailable_Response::CPlayer_GetProfileThemesAvailable_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_themes_(){}
struct CPlayer_GetProfileThemesAvailable_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetProfileThemesAvailable_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetProfileThemesAvailable_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetProfileThemesAvailable_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetProfileThemesAvailable_ResponseDefaultTypeInternal _CPlayer_GetProfileThemesAvailable_Response_default_instance_;
constexpr CPlayer_SetProfileTheme_Request::CPlayer_SetProfileTheme_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : theme_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CPlayer_SetProfileTheme_RequestDefaultTypeInternal {
  constexpr CPlayer_SetProfileTheme_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetProfileTheme_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetProfileTheme_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetProfileTheme_RequestDefaultTypeInternal _CPlayer_SetProfileTheme_Request_default_instance_;
constexpr CPlayer_SetProfileTheme_Response::CPlayer_SetProfileTheme_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetProfileTheme_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetProfileTheme_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetProfileTheme_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetProfileTheme_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetProfileTheme_ResponseDefaultTypeInternal _CPlayer_SetProfileTheme_Response_default_instance_;
constexpr CPlayer_SetProfilePreferences_Request::CPlayer_SetProfilePreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_preferences_(nullptr){}
struct CPlayer_SetProfilePreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_SetProfilePreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetProfilePreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetProfilePreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetProfilePreferences_RequestDefaultTypeInternal _CPlayer_SetProfilePreferences_Request_default_instance_;
constexpr CPlayer_SetProfilePreferences_Response::CPlayer_SetProfilePreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetProfilePreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetProfilePreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetProfilePreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetProfilePreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetProfilePreferences_ResponseDefaultTypeInternal _CPlayer_SetProfilePreferences_Response_default_instance_;
constexpr CPlayer_PostStatusToFriends_Request::CPlayer_PostStatusToFriends_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CPlayer_PostStatusToFriends_RequestDefaultTypeInternal {
  constexpr CPlayer_PostStatusToFriends_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_PostStatusToFriends_RequestDefaultTypeInternal() {}
  union {
    CPlayer_PostStatusToFriends_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_PostStatusToFriends_RequestDefaultTypeInternal _CPlayer_PostStatusToFriends_Request_default_instance_;
constexpr CPlayer_PostStatusToFriends_Response::CPlayer_PostStatusToFriends_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_PostStatusToFriends_ResponseDefaultTypeInternal {
  constexpr CPlayer_PostStatusToFriends_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_PostStatusToFriends_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_PostStatusToFriends_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_PostStatusToFriends_ResponseDefaultTypeInternal _CPlayer_PostStatusToFriends_Response_default_instance_;
constexpr CPlayer_GetPostedStatus_Request::CPlayer_GetPostedStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , postid_(uint64_t{0u}){}
struct CPlayer_GetPostedStatus_RequestDefaultTypeInternal {
  constexpr CPlayer_GetPostedStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPostedStatus_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPostedStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPostedStatus_RequestDefaultTypeInternal _CPlayer_GetPostedStatus_Request_default_instance_;
constexpr CPlayer_GetPostedStatus_Response::CPlayer_GetPostedStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , postid_(uint64_t{0u})
  , accountid_(0u)
  , deleted_(false)
  , appid_(0u){}
struct CPlayer_GetPostedStatus_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetPostedStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPostedStatus_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPostedStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPostedStatus_ResponseDefaultTypeInternal _CPlayer_GetPostedStatus_Response_default_instance_;
constexpr CPlayer_DeletePostedStatus_Request::CPlayer_DeletePostedStatus_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : postid_(uint64_t{0u}){}
struct CPlayer_DeletePostedStatus_RequestDefaultTypeInternal {
  constexpr CPlayer_DeletePostedStatus_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_DeletePostedStatus_RequestDefaultTypeInternal() {}
  union {
    CPlayer_DeletePostedStatus_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_DeletePostedStatus_RequestDefaultTypeInternal _CPlayer_DeletePostedStatus_Request_default_instance_;
constexpr CPlayer_DeletePostedStatus_Response::CPlayer_DeletePostedStatus_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_DeletePostedStatus_ResponseDefaultTypeInternal {
  constexpr CPlayer_DeletePostedStatus_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_DeletePostedStatus_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_DeletePostedStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_DeletePostedStatus_ResponseDefaultTypeInternal _CPlayer_DeletePostedStatus_Response_default_instance_;
constexpr CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_last_played_(0u){}
struct CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal {
  constexpr CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Request_default_instance_;
constexpr CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0)
  , last_playtime_(0u)
  , playtime_2weeks_(0)
  , playtime_forever_(0)
  , first_playtime_(0u)
  , playtime_windows_forever_(0)
  , playtime_mac_forever_(0)
  , playtime_linux_forever_(0)
  , first_windows_playtime_(0u)
  , first_mac_playtime_(0u)
  , first_linux_playtime_(0u)
  , last_windows_playtime_(0u)
  , last_mac_playtime_(0u)
  , last_linux_playtime_(0u)
  , playtime_disconnected_(0u){}
struct CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal {
  constexpr CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Response_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
constexpr CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_(){}
struct CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_default_instance_;
constexpr CPlayer_GetTimeSSAAccepted_Request::CPlayer_GetTimeSSAAccepted_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetTimeSSAAccepted_RequestDefaultTypeInternal {
  constexpr CPlayer_GetTimeSSAAccepted_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTimeSSAAccepted_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetTimeSSAAccepted_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTimeSSAAccepted_RequestDefaultTypeInternal _CPlayer_GetTimeSSAAccepted_Request_default_instance_;
constexpr CPlayer_GetTimeSSAAccepted_Response::CPlayer_GetTimeSSAAccepted_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_ssa_accepted_(0u)
  , time_ssa_updated_(0u)
  , time_chinassa_accepted_(0u){}
struct CPlayer_GetTimeSSAAccepted_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetTimeSSAAccepted_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTimeSSAAccepted_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetTimeSSAAccepted_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTimeSSAAccepted_ResponseDefaultTypeInternal _CPlayer_GetTimeSSAAccepted_Response_default_instance_;
constexpr CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_signed_utc_(0u)
  , agreement_type_(-1)
{}
struct CPlayer_AcceptSSA_RequestDefaultTypeInternal {
  constexpr CPlayer_AcceptSSA_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AcceptSSA_RequestDefaultTypeInternal() {}
  union {
    CPlayer_AcceptSSA_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AcceptSSA_RequestDefaultTypeInternal _CPlayer_AcceptSSA_Request_default_instance_;
constexpr CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_AcceptSSA_ResponseDefaultTypeInternal {
  constexpr CPlayer_AcceptSSA_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AcceptSSA_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_AcceptSSA_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AcceptSSA_ResponseDefaultTypeInternal _CPlayer_AcceptSSA_Response_default_instance_;
constexpr CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetNicknameList_RequestDefaultTypeInternal {
  constexpr CPlayer_GetNicknameList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNicknameList_RequestDefaultTypeInternal _CPlayer_GetNicknameList_Request_default_instance_;
constexpr CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u){}
struct CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal {
  constexpr CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Response_PlayerNickname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal _CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
constexpr CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nicknames_(){}
struct CPlayer_GetNicknameList_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetNicknameList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNicknameList_ResponseDefaultTypeInternal _CPlayer_GetNicknameList_Response_default_instance_;
constexpr CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPerFriendPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Request_default_instance_;
constexpr PerFriendPreferences::PerFriendPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , notifications_showingame_(0)

  , notifications_showonline_(0)

  , notifications_showmessages_(0)

  , sounds_showingame_(0)

  , sounds_showonline_(0)

  , sounds_showmessages_(0)

  , notifications_sendmobile_(0)
{}
struct PerFriendPreferencesDefaultTypeInternal {
  constexpr PerFriendPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerFriendPreferencesDefaultTypeInternal() {}
  union {
    PerFriendPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerFriendPreferencesDefaultTypeInternal _PerFriendPreferences_default_instance_;
constexpr CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(){}
struct CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPerFriendPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Response_default_instance_;
constexpr CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr){}
struct CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetPerFriendPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Request_default_instance_;
constexpr CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetPerFriendPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Response_default_instance_;
constexpr CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CPlayer_AddFriend_RequestDefaultTypeInternal {
  constexpr CPlayer_AddFriend_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AddFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_AddFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AddFriend_RequestDefaultTypeInternal _CPlayer_AddFriend_Request_default_instance_;
constexpr CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_sent_(false)
  , friend_relationship_(0u)
  , result_(0){}
struct CPlayer_AddFriend_ResponseDefaultTypeInternal {
  constexpr CPlayer_AddFriend_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AddFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_AddFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AddFriend_ResponseDefaultTypeInternal _CPlayer_AddFriend_Response_default_instance_;
constexpr CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CPlayer_RemoveFriend_RequestDefaultTypeInternal {
  constexpr CPlayer_RemoveFriend_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_RemoveFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_RemoveFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_RemoveFriend_RequestDefaultTypeInternal _CPlayer_RemoveFriend_Request_default_instance_;
constexpr CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friend_relationship_(0u){}
struct CPlayer_RemoveFriend_ResponseDefaultTypeInternal {
  constexpr CPlayer_RemoveFriend_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_RemoveFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_RemoveFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_RemoveFriend_ResponseDefaultTypeInternal _CPlayer_RemoveFriend_Response_default_instance_;
constexpr CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , unignore_(false){}
struct CPlayer_IgnoreFriend_RequestDefaultTypeInternal {
  constexpr CPlayer_IgnoreFriend_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_IgnoreFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_IgnoreFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_IgnoreFriend_RequestDefaultTypeInternal _CPlayer_IgnoreFriend_Request_default_instance_;
constexpr CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friend_relationship_(0u){}
struct CPlayer_IgnoreFriend_ResponseDefaultTypeInternal {
  constexpr CPlayer_IgnoreFriend_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_IgnoreFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_IgnoreFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_IgnoreFriend_ResponseDefaultTypeInternal _CPlayer_IgnoreFriend_Response_default_instance_;
constexpr CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetCommunityPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_GetCommunityPreferences_Request_default_instance_;
constexpr CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_updated_(0u)
  , parenthesize_nicknames_(false)
  , text_filter_setting_(0)

  , text_filter_words_revision_(0u)
  , text_filter_ignore_friends_(true){}
struct CPlayer_CommunityPreferencesDefaultTypeInternal {
  constexpr CPlayer_CommunityPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_CommunityPreferencesDefaultTypeInternal() {}
  union {
    CPlayer_CommunityPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_CommunityPreferencesDefaultTypeInternal _CPlayer_CommunityPreferences_default_instance_;
constexpr CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr)
  , content_descriptor_preferences_(nullptr){}
struct CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetCommunityPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_GetCommunityPreferences_Response_default_instance_;
constexpr CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr){}
struct CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetCommunityPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_SetCommunityPreferences_Request_default_instance_;
constexpr CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetCommunityPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_SetCommunityPreferences_Response_default_instance_;
constexpr CPlayer_GetTextFilterWords_Request::CPlayer_GetTextFilterWords_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetTextFilterWords_RequestDefaultTypeInternal {
  constexpr CPlayer_GetTextFilterWords_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTextFilterWords_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetTextFilterWords_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTextFilterWords_RequestDefaultTypeInternal _CPlayer_GetTextFilterWords_Request_default_instance_;
constexpr CPlayer_TextFilterWords::CPlayer_TextFilterWords(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_filter_custom_banned_words_()
  , text_filter_custom_clean_words_()
  , text_filter_words_revision_(0u){}
struct CPlayer_TextFilterWordsDefaultTypeInternal {
  constexpr CPlayer_TextFilterWordsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_TextFilterWordsDefaultTypeInternal() {}
  union {
    CPlayer_TextFilterWords _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_TextFilterWordsDefaultTypeInternal _CPlayer_TextFilterWords_default_instance_;
constexpr CPlayer_GetTextFilterWords_Response::CPlayer_GetTextFilterWords_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : words_(nullptr){}
struct CPlayer_GetTextFilterWords_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetTextFilterWords_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetTextFilterWords_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetTextFilterWords_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetTextFilterWords_ResponseDefaultTypeInternal _CPlayer_GetTextFilterWords_Response_default_instance_;
constexpr CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(0){}
struct CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal {
  constexpr CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetNewSteamAnnouncementState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Request_default_instance_;
constexpr CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcement_headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , announcement_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0)

  , time_posted_(0u)
  , announcement_gid_(uint64_t{0u}){}
struct CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetNewSteamAnnouncementState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Response_default_instance_;
constexpr CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcement_gid_(uint64_t{0u})
  , time_posted_(0u){}
struct CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal {
  constexpr CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal() {}
  union {
    CPlayer_UpdateSteamAnnouncementLastRead_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_;
constexpr CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal {
  constexpr CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_UpdateSteamAnnouncementLastRead_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_;
constexpr CPlayer_GetPrivacySettings_Request::CPlayer_GetPrivacySettings_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetPrivacySettings_RequestDefaultTypeInternal {
  constexpr CPlayer_GetPrivacySettings_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPrivacySettings_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPrivacySettings_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPrivacySettings_RequestDefaultTypeInternal _CPlayer_GetPrivacySettings_Request_default_instance_;
constexpr CPrivacySettings::CPrivacySettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : privacy_state_(0)
  , privacy_state_inventory_(0)
  , privacy_state_gifts_(0)
  , privacy_state_ownedgames_(0)
  , privacy_state_playtime_(0)
  , privacy_state_friendslist_(0){}
struct CPrivacySettingsDefaultTypeInternal {
  constexpr CPrivacySettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPrivacySettingsDefaultTypeInternal() {}
  union {
    CPrivacySettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPrivacySettingsDefaultTypeInternal _CPrivacySettings_default_instance_;
constexpr CPlayer_GetPrivacySettings_Response::CPlayer_GetPrivacySettings_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : privacy_settings_(nullptr){}
struct CPlayer_GetPrivacySettings_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetPrivacySettings_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPrivacySettings_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPrivacySettings_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPrivacySettings_ResponseDefaultTypeInternal _CPlayer_GetPrivacySettings_Response_default_instance_;
constexpr CPlayer_GetDurationControl_Request::CPlayer_GetDurationControl_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CPlayer_GetDurationControl_RequestDefaultTypeInternal {
  constexpr CPlayer_GetDurationControl_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetDurationControl_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetDurationControl_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetDurationControl_RequestDefaultTypeInternal _CPlayer_GetDurationControl_Request_default_instance_;
constexpr CPlayer_GetDurationControl_Response::CPlayer_GetDurationControl_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_(0)
  , seconds_today_(0)
  , is_enabled_(false)
  , is_steamchina_account_(false)
  , is_age_verified_(false)
  , age_verification_pending_(false)
  , seconds_allowed_today_(0u)
  , block_minors_(false){}
struct CPlayer_GetDurationControl_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetDurationControl_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetDurationControl_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetDurationControl_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetDurationControl_ResponseDefaultTypeInternal _CPlayer_GetDurationControl_Response_default_instance_;
constexpr CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , session_time_start_(0u)
  , seconds_(0u)
  , offline_(false){}
struct CPlayer_RecordDisconnectedPlaytime_Request_PlayHistoryDefaultTypeInternal {
  constexpr CPlayer_RecordDisconnectedPlaytime_Request_PlayHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_RecordDisconnectedPlaytime_Request_PlayHistoryDefaultTypeInternal() {}
  union {
    CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_RecordDisconnectedPlaytime_Request_PlayHistoryDefaultTypeInternal _CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory_default_instance_;
constexpr CPlayer_RecordDisconnectedPlaytime_Request::CPlayer_RecordDisconnectedPlaytime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : play_sessions_(){}
struct CPlayer_RecordDisconnectedPlaytime_RequestDefaultTypeInternal {
  constexpr CPlayer_RecordDisconnectedPlaytime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_RecordDisconnectedPlaytime_RequestDefaultTypeInternal() {}
  union {
    CPlayer_RecordDisconnectedPlaytime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_RecordDisconnectedPlaytime_RequestDefaultTypeInternal _CPlayer_RecordDisconnectedPlaytime_Request_default_instance_;
constexpr CPlayer_RecordDisconnectedPlaytime_Response::CPlayer_RecordDisconnectedPlaytime_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_RecordDisconnectedPlaytime_ResponseDefaultTypeInternal {
  constexpr CPlayer_RecordDisconnectedPlaytime_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_RecordDisconnectedPlaytime_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_RecordDisconnectedPlaytime_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_RecordDisconnectedPlaytime_ResponseDefaultTypeInternal _CPlayer_RecordDisconnectedPlaytime_Response_default_instance_;
constexpr CPlayer_LastPlayedTimes_Notification::CPlayer_LastPlayedTimes_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_(){}
struct CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal {
  constexpr CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_LastPlayedTimes_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal _CPlayer_LastPlayedTimes_Notification_default_instance_;
constexpr CPlayer_FriendNicknameChanged_Notification::CPlayer_FriendNicknameChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , is_echo_to_self_(false){}
struct CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal {
  constexpr CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_FriendNicknameChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal _CPlayer_FriendNicknameChanged_Notification_default_instance_;
constexpr CPlayer_FriendEquippedProfileItemsChanged_Notification::CPlayer_FriendEquippedProfileItemsChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_(0u){}
struct CPlayer_FriendEquippedProfileItemsChanged_NotificationDefaultTypeInternal {
  constexpr CPlayer_FriendEquippedProfileItemsChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_FriendEquippedProfileItemsChanged_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_FriendEquippedProfileItemsChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_FriendEquippedProfileItemsChanged_NotificationDefaultTypeInternal _CPlayer_FriendEquippedProfileItemsChanged_Notification_default_instance_;
constexpr CPlayer_NewSteamAnnouncementState_Notification::CPlayer_NewSteamAnnouncementState_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcement_headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , announcement_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0)

  , time_posted_(0u)
  , announcement_gid_(uint64_t{0u}){}
struct CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal {
  constexpr CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_NewSteamAnnouncementState_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_NewSteamAnnouncementState_NotificationDefaultTypeInternal _CPlayer_NewSteamAnnouncementState_Notification_default_instance_;
constexpr CPlayer_CommunityPreferencesChanged_Notification::CPlayer_CommunityPreferencesChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr)
  , content_descriptor_preferences_(nullptr){}
struct CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal {
  constexpr CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_CommunityPreferencesChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_CommunityPreferencesChanged_NotificationDefaultTypeInternal _CPlayer_CommunityPreferencesChanged_Notification_default_instance_;
constexpr CPlayer_TextFilterWordsChanged_Notification::CPlayer_TextFilterWordsChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : words_(nullptr){}
struct CPlayer_TextFilterWordsChanged_NotificationDefaultTypeInternal {
  constexpr CPlayer_TextFilterWordsChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_TextFilterWordsChanged_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_TextFilterWordsChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_TextFilterWordsChanged_NotificationDefaultTypeInternal _CPlayer_TextFilterWordsChanged_Notification_default_instance_;
constexpr CPlayer_PerFriendPreferencesChanged_Notification::CPlayer_PerFriendPreferencesChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr)
  , accountid_(0u){}
struct CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal {
  constexpr CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_PerFriendPreferencesChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_PerFriendPreferencesChanged_NotificationDefaultTypeInternal _CPlayer_PerFriendPreferencesChanged_Notification_default_instance_;
constexpr CPlayer_PrivacySettingsChanged_Notification::CPlayer_PrivacySettingsChanged_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : privacy_settings_(nullptr){}
struct CPlayer_PrivacySettingsChanged_NotificationDefaultTypeInternal {
  constexpr CPlayer_PrivacySettingsChanged_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_PrivacySettingsChanged_NotificationDefaultTypeInternal() {}
  union {
    CPlayer_PrivacySettingsChanged_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_PrivacySettingsChanged_NotificationDefaultTypeInternal _CPlayer_PrivacySettingsChanged_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[135];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5fplayer_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, mutual_friend_account_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Response, incoming_invite_mutual_friends_lists_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, include_appinfo_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, include_played_free_games_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, appids_filter_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, include_free_sub_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, skip_unvetted_apps_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Request, include_extended_appinfo_),
  1,
  2,
  3,
  ~0u,
  4,
  6,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, name_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, playtime_2weeks_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, playtime_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, img_icon_url_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, has_community_visible_stats_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, playtime_windows_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, playtime_mac_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, playtime_linux_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, rtime_last_played_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, capsule_filename_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, sort_as_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, has_workshop_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, has_market_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, has_dlc_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, has_leaderboards_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, content_descriptorids_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response_Game, playtime_disconnected_),
  4,
  0,
  5,
  6,
  1,
  11,
  7,
  8,
  9,
  10,
  2,
  3,
  12,
  13,
  14,
  15,
  ~0u,
  16,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response, game_count_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetOwnedGames_Response, games_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Request, max_age_seconds_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Request, ignore_appids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Response, last_update_time_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPlayNext_Response, appids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, minutes_played_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, minutes_played_forever_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, minutes_played_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, minutes_played_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, in_wishlist_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, owned_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, your_info_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, in_game_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, played_recently_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, played_ever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, owns_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, in_wishlist_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, level_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, series_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, border_color_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, player_level_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, badges_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileBackground_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileBackground_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileBackground_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileBackground_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ProfileItem_ProfileColor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem_ProfileColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProfileItem_ProfileColor, style_name_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem_ProfileColor, color_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfileItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProfileItem, communityitemid_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, image_small_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, image_large_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, name_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, item_title_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, item_description_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, appid_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, item_type_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, item_class_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, movie_webm_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, movie_mp4_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, movie_webm_small_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, movie_mp4_small_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, equipped_flags_),
  PROTOBUF_FIELD_OFFSET(::ProfileItem, profile_colors_),
  9,
  0,
  1,
  2,
  3,
  4,
  10,
  11,
  12,
  5,
  6,
  7,
  8,
  13,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileBackground_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileBackground_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileBackground_Response, profile_background_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileBackground_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileBackground_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileBackground_Request, communityitemid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileBackground_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMiniProfileBackground_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMiniProfileBackground_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMiniProfileBackground_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMiniProfileBackground_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMiniProfileBackground_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMiniProfileBackground_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMiniProfileBackground_Response, profile_background_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetMiniProfileBackground_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetMiniProfileBackground_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetMiniProfileBackground_Request, communityitemid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetMiniProfileBackground_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAvatarFrame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAvatarFrame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAvatarFrame_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAvatarFrame_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAvatarFrame_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAvatarFrame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAvatarFrame_Response, avatar_frame_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAvatarFrame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAvatarFrame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAvatarFrame_Request, communityitemid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAvatarFrame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAnimatedAvatar_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAnimatedAvatar_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAnimatedAvatar_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAnimatedAvatar_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAnimatedAvatar_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAnimatedAvatar_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAnimatedAvatar_Response, avatar_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAnimatedAvatar_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAnimatedAvatar_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAnimatedAvatar_Request, communityitemid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetAnimatedAvatar_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetSteamDeckKeyboardSkin_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetSteamDeckKeyboardSkin_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetSteamDeckKeyboardSkin_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetSteamDeckKeyboardSkin_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetSteamDeckKeyboardSkin_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetSteamDeckKeyboardSkin_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetSteamDeckKeyboardSkin_Response, steam_deck_keyboard_skin_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetSteamDeckKeyboardSkin_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetSteamDeckKeyboardSkin_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetSteamDeckKeyboardSkin_Request, communityitemid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetSteamDeckKeyboardSkin_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Request, filters_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, profile_backgrounds_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, mini_profile_backgrounds_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, avatar_frames_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, animated_avatars_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, profile_modifiers_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, steam_deck_keyboard_skins_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsOwned_Response, steam_deck_startup_movies_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, profile_background_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, mini_profile_background_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, animated_avatar_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, profile_modifier_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileItemsEquipped_Response, steam_deck_keyboard_skin_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetEquippedProfileItemFlags_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetEquippedProfileItemFlags_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetEquippedProfileItemFlags_Request, communityitemid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetEquippedProfileItemFlags_Request, flags_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetEquippedProfileItemFlags_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, name_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, count_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, time_last_used_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, use_count_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, time_received_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response_Emoticon, appid_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetEmoticonList_Response, emoticons_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Request, max_achievements_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Request, appids_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, statid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, bit_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, name_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, desc_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, icon_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, icon_gray_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, hidden_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Achievement, player_percent_unlocked_),
  5,
  6,
  0,
  1,
  2,
  3,
  7,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Game, total_achievements_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response_Game, achievements_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTopAchievementsForGames_Response, games_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Request, appids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, unlocked_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, total_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, percentage_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, all_unlocked_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response_AchievementProgress, cache_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetAchievementsProgress_Response, achievement_progress_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Request, language_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, internal_name_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, localized_name_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, localized_desc_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, icon_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, icon_gray_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, hidden_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response_Achievement, player_percent_unlocked_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameAchievements_Response, achievements_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, has_favorite_badge_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, badgeid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, communityitemid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, item_type_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, border_color_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFavoriteBadge_Response, level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetFavoriteBadge_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetFavoriteBadge_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetFavoriteBadge_Request, communityitemid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetFavoriteBadge_Request, badgeid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetFavoriteBadge_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Request, include_inactive_customizations_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Request, include_purchased_customizations_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, slot_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, appid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, item_assetid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, item_contextid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, notes_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, title_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, accountid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, badgeid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, border_color_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, item_classid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, item_instanceid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, ban_check_result_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomizationSlot, replay_year_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  8,
  10,
  9,
  12,
  11,
  13,
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, customization_type_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, large_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, slots_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, active_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, customization_style_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, purchaseid_),
  PROTOBUF_FIELD_OFFSET(::ProfileCustomization, level_),
  0,
  1,
  ~0u,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::ProfileTheme, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfileTheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProfileTheme, theme_id_),
  PROTOBUF_FIELD_OFFSET(::ProfileTheme, title_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProfilePreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProfilePreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProfilePreferences, hide_profile_awards_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response_PurchasedCustomization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response_PurchasedCustomization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response_PurchasedCustomization, purchaseid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response_PurchasedCustomization, customization_type_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response_PurchasedCustomization, level_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response, customizations_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response, slots_available_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response, profile_theme_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response, purchased_customizations_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileCustomization_Response, profile_preferences_),
  ~0u,
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization, purchaseid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization, customization_type_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedProfileCustomizations_Response, purchased_customizations_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization, customization_type_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization, customization_type_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization, level_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response, purchased_customizations_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response, upgraded_customizations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileThemesAvailable_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileThemesAvailable_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetProfileThemesAvailable_Response, profile_themes_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileTheme_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileTheme_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileTheme_Request, theme_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfileTheme_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfilePreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfilePreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfilePreferences_Request, profile_preferences_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetProfilePreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_PostStatusToFriends_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_PostStatusToFriends_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_PostStatusToFriends_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_PostStatusToFriends_Request, status_text_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_PostStatusToFriends_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Request, postid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Response, accountid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Response, postid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Response, status_text_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Response, deleted_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPostedStatus_Response, appid_),
  2,
  1,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_DeletePostedStatus_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_DeletePostedStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_DeletePostedStatus_Request, postid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_DeletePostedStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, min_last_played_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, last_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_2weeks_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, first_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_windows_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_mac_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_linux_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, first_windows_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, first_mac_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, first_linux_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, last_windows_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, last_mac_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, last_linux_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_disconnected_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response, games_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTimeSSAAccepted_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTimeSSAAccepted_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTimeSSAAccepted_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTimeSSAAccepted_Response, time_ssa_accepted_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTimeSSAAccepted_Response, time_ssa_updated_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTimeSSAAccepted_Response, time_chinassa_accepted_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Request, agreement_type_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Request, time_signed_utc_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, accountid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, nickname_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response, nicknames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, accountid_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, nickname_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_showingame_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_showonline_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_showmessages_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, sounds_showingame_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, sounds_showonline_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, sounds_showmessages_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_sendmobile_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Response, preferences_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, preferences_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, invite_sent_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, friend_relationship_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, result_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, friend_relationship_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, unignore_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, friend_relationship_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, parenthesize_nicknames_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, text_filter_setting_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, text_filter_ignore_friends_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, text_filter_words_revision_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, timestamp_updated_),
  1,
  2,
  4,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, preferences_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, content_descriptor_preferences_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, preferences_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTextFilterWords_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWords, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWords, text_filter_custom_banned_words_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWords, text_filter_custom_clean_words_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWords, text_filter_words_revision_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTextFilterWords_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTextFilterWords_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetTextFilterWords_Response, words_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, language_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, state_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, announcement_headline_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, announcement_url_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, time_posted_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, announcement_gid_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, announcement_gid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, time_posted_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPrivacySettings_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, privacy_state_),
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, privacy_state_inventory_),
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, privacy_state_gifts_),
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, privacy_state_ownedgames_),
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, privacy_state_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPrivacySettings, privacy_state_friendslist_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPrivacySettings_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPrivacySettings_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPrivacySettings_Response, privacy_settings_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, seconds_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, seconds_today_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, is_steamchina_account_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, is_age_verified_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, seconds_allowed_today_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, age_verification_pending_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetDurationControl_Response, block_minors_),
  2,
  0,
  1,
  3,
  4,
  6,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, session_time_start_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, seconds_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, offline_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Request, play_sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RecordDisconnectedPlaytime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_LastPlayedTimes_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_LastPlayedTimes_Notification, games_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendNicknameChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendNicknameChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendNicknameChanged_Notification, accountid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendNicknameChanged_Notification, nickname_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendNicknameChanged_Notification, is_echo_to_self_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendEquippedProfileItemsChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendEquippedProfileItemsChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_FriendEquippedProfileItemsChanged_Notification, accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_NewSteamAnnouncementState_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_NewSteamAnnouncementState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_NewSteamAnnouncementState_Notification, state_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_NewSteamAnnouncementState_Notification, announcement_headline_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_NewSteamAnnouncementState_Notification, announcement_url_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_NewSteamAnnouncementState_Notification, time_posted_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_NewSteamAnnouncementState_Notification, announcement_gid_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferencesChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferencesChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferencesChanged_Notification, preferences_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferencesChanged_Notification, content_descriptor_preferences_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWordsChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWordsChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_TextFilterWordsChanged_Notification, words_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_PerFriendPreferencesChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_PerFriendPreferencesChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_PerFriendPreferencesChanged_Notification, accountid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_PerFriendPreferencesChanged_Notification, preferences_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_PrivacySettingsChanged_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_PrivacySettingsChanged_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPlayer_PrivacySettingsChanged_Notification, privacy_settings_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CPlayer_GetMutualFriendsForIncomingInvites_Request)},
  { 6, 14, -1, sizeof(::CPlayer_IncomingInviteMutualFriendList)},
  { 16, -1, -1, sizeof(::CPlayer_GetMutualFriendsForIncomingInvites_Response)},
  { 23, 37, -1, sizeof(::CPlayer_GetOwnedGames_Request)},
  { 45, 69, -1, sizeof(::CPlayer_GetOwnedGames_Response_Game)},
  { 87, 95, -1, sizeof(::CPlayer_GetOwnedGames_Response)},
  { 97, 105, -1, sizeof(::CPlayer_GetPlayNext_Request)},
  { 107, 115, -1, sizeof(::CPlayer_GetPlayNext_Response)},
  { 117, 124, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Request)},
  { 125, 134, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo)},
  { 137, 148, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo)},
  { 153, 165, -1, sizeof(::CPlayer_GetFriendsGameplayInfo_Response)},
  { 171, 178, -1, sizeof(::CPlayer_GetGameBadgeLevels_Request)},
  { 179, 188, -1, sizeof(::CPlayer_GetGameBadgeLevels_Response_Badge)},
  { 191, 199, -1, sizeof(::CPlayer_GetGameBadgeLevels_Response)},
  { 201, 209, -1, sizeof(::CPlayer_GetProfileBackground_Request)},
  { 211, 219, -1, sizeof(::ProfileItem_ProfileColor)},
  { 221, 242, -1, sizeof(::ProfileItem)},
  { 257, 264, -1, sizeof(::CPlayer_GetProfileBackground_Response)},
  { 265, 272, -1, sizeof(::CPlayer_SetProfileBackground_Request)},
  { 273, -1, -1, sizeof(::CPlayer_SetProfileBackground_Response)},
  { 279, 287, -1, sizeof(::CPlayer_GetMiniProfileBackground_Request)},
  { 289, 296, -1, sizeof(::CPlayer_GetMiniProfileBackground_Response)},
  { 297, 304, -1, sizeof(::CPlayer_SetMiniProfileBackground_Request)},
  { 305, -1, -1, sizeof(::CPlayer_SetMiniProfileBackground_Response)},
  { 311, 319, -1, sizeof(::CPlayer_GetAvatarFrame_Request)},
  { 321, 328, -1, sizeof(::CPlayer_GetAvatarFrame_Response)},
  { 329, 336, -1, sizeof(::CPlayer_SetAvatarFrame_Request)},
  { 337, -1, -1, sizeof(::CPlayer_SetAvatarFrame_Response)},
  { 343, 351, -1, sizeof(::CPlayer_GetAnimatedAvatar_Request)},
  { 353, 360, -1, sizeof(::CPlayer_GetAnimatedAvatar_Response)},
  { 361, 368, -1, sizeof(::CPlayer_SetAnimatedAvatar_Request)},
  { 369, -1, -1, sizeof(::CPlayer_SetAnimatedAvatar_Response)},
  { 375, 383, -1, sizeof(::CPlayer_GetSteamDeckKeyboardSkin_Request)},
  { 385, 392, -1, sizeof(::CPlayer_GetSteamDeckKeyboardSkin_Response)},
  { 393, 400, -1, sizeof(::CPlayer_SetSteamDeckKeyboardSkin_Request)},
  { 401, -1, -1, sizeof(::CPlayer_SetSteamDeckKeyboardSkin_Response)},
  { 407, 415, -1, sizeof(::CPlayer_GetProfileItemsOwned_Request)},
  { 417, -1, -1, sizeof(::CPlayer_GetProfileItemsOwned_Response)},
  { 430, 438, -1, sizeof(::CPlayer_GetProfileItemsEquipped_Request)},
  { 440, 452, -1, sizeof(::CPlayer_GetProfileItemsEquipped_Response)},
  { 458, 466, -1, sizeof(::CPlayer_SetEquippedProfileItemFlags_Request)},
  { 468, -1, -1, sizeof(::CPlayer_SetEquippedProfileItemFlags_Response)},
  { 474, -1, -1, sizeof(::CPlayer_GetEmoticonList_Request)},
  { 480, 492, -1, sizeof(::CPlayer_GetEmoticonList_Response_Emoticon)},
  { 498, -1, -1, sizeof(::CPlayer_GetEmoticonList_Response)},
  { 505, 515, -1, sizeof(::CPlayer_GetTopAchievementsForGames_Request)},
  { 519, 533, -1, sizeof(::CPlayer_GetTopAchievementsForGames_Response_Achievement)},
  { 541, 550, -1, sizeof(::CPlayer_GetTopAchievementsForGames_Response_Game)},
  { 553, -1, -1, sizeof(::CPlayer_GetTopAchievementsForGames_Response)},
  { 560, 569, -1, sizeof(::CPlayer_GetAchievementsProgress_Request)},
  { 572, 584, -1, sizeof(::CPlayer_GetAchievementsProgress_Response_AchievementProgress)},
  { 590, -1, -1, sizeof(::CPlayer_GetAchievementsProgress_Response)},
  { 597, 605, -1, sizeof(::CPlayer_GetGameAchievements_Request)},
  { 607, 620, -1, sizeof(::CPlayer_GetGameAchievements_Response_Achievement)},
  { 627, -1, -1, sizeof(::CPlayer_GetGameAchievements_Response)},
  { 634, 641, -1, sizeof(::CPlayer_GetFavoriteBadge_Request)},
  { 642, 655, -1, sizeof(::CPlayer_GetFavoriteBadge_Response)},
  { 662, 670, -1, sizeof(::CPlayer_SetFavoriteBadge_Request)},
  { 672, -1, -1, sizeof(::CPlayer_SetFavoriteBadge_Response)},
  { 678, 687, -1, sizeof(::CPlayer_GetProfileCustomization_Request)},
  { 690, 710, -1, sizeof(::ProfileCustomizationSlot)},
  { 724, 737, -1, sizeof(::ProfileCustomization)},
  { 744, 752, -1, sizeof(::ProfileTheme)},
  { 754, 761, -1, sizeof(::ProfilePreferences)},
  { 762, 771, -1, sizeof(::CPlayer_GetProfileCustomization_Response_PurchasedCustomization)},
  { 774, 785, -1, sizeof(::CPlayer_GetProfileCustomization_Response)},
  { 790, 797, -1, sizeof(::CPlayer_GetPurchasedProfileCustomizations_Request)},
  { 798, 806, -1, sizeof(::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization)},
  { 808, -1, -1, sizeof(::CPlayer_GetPurchasedProfileCustomizations_Response)},
  { 815, 822, -1, sizeof(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)},
  { 823, 831, -1, sizeof(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization)},
  { 833, 841, -1, sizeof(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization)},
  { 843, -1, -1, sizeof(::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)},
  { 851, -1, -1, sizeof(::CPlayer_GetProfileThemesAvailable_Request)},
  { 857, -1, -1, sizeof(::CPlayer_GetProfileThemesAvailable_Response)},
  { 864, 871, -1, sizeof(::CPlayer_SetProfileTheme_Request)},
  { 872, -1, -1, sizeof(::CPlayer_SetProfileTheme_Response)},
  { 878, 885, -1, sizeof(::CPlayer_SetProfilePreferences_Request)},
  { 886, -1, -1, sizeof(::CPlayer_SetProfilePreferences_Response)},
  { 892, 900, -1, sizeof(::CPlayer_PostStatusToFriends_Request)},
  { 902, -1, -1, sizeof(::CPlayer_PostStatusToFriends_Response)},
  { 908, 916, -1, sizeof(::CPlayer_GetPostedStatus_Request)},
  { 918, 929, -1, sizeof(::CPlayer_GetPostedStatus_Response)},
  { 934, 941, -1, sizeof(::CPlayer_DeletePostedStatus_Request)},
  { 942, -1, -1, sizeof(::CPlayer_DeletePostedStatus_Response)},
  { 948, 955, -1, sizeof(::CPlayer_GetLastPlayedTimes_Request)},
  { 956, 977, -1, sizeof(::CPlayer_GetLastPlayedTimes_Response_Game)},
  { 992, -1, -1, sizeof(::CPlayer_GetLastPlayedTimes_Response)},
  { 999, -1, -1, sizeof(::CPlayer_GetTimeSSAAccepted_Request)},
  { 1005, 1014, -1, sizeof(::CPlayer_GetTimeSSAAccepted_Response)},
  { 1017, 1025, -1, sizeof(::CPlayer_AcceptSSA_Request)},
  { 1027, -1, -1, sizeof(::CPlayer_AcceptSSA_Response)},
  { 1033, -1, -1, sizeof(::CPlayer_GetNicknameList_Request)},
  { 1039, 1047, -1, sizeof(::CPlayer_GetNicknameList_Response_PlayerNickname)},
  { 1049, -1, -1, sizeof(::CPlayer_GetNicknameList_Response)},
  { 1056, -1, -1, sizeof(::CPlayer_GetPerFriendPreferences_Request)},
  { 1062, 1077, -1, sizeof(::PerFriendPreferences)},
  { 1086, -1, -1, sizeof(::CPlayer_GetPerFriendPreferences_Response)},
  { 1093, 1100, -1, sizeof(::CPlayer_SetPerFriendPreferences_Request)},
  { 1101, -1, -1, sizeof(::CPlayer_SetPerFriendPreferences_Response)},
  { 1107, 1114, -1, sizeof(::CPlayer_AddFriend_Request)},
  { 1115, 1124, -1, sizeof(::CPlayer_AddFriend_Response)},
  { 1127, 1134, -1, sizeof(::CPlayer_RemoveFriend_Request)},
  { 1135, 1142, -1, sizeof(::CPlayer_RemoveFriend_Response)},
  { 1143, 1151, -1, sizeof(::CPlayer_IgnoreFriend_Request)},
  { 1153, 1160, -1, sizeof(::CPlayer_IgnoreFriend_Response)},
  { 1161, -1, -1, sizeof(::CPlayer_GetCommunityPreferences_Request)},
  { 1167, 1178, -1, sizeof(::CPlayer_CommunityPreferences)},
  { 1183, 1191, -1, sizeof(::CPlayer_GetCommunityPreferences_Response)},
  { 1193, 1200, -1, sizeof(::CPlayer_SetCommunityPreferences_Request)},
  { 1201, -1, -1, sizeof(::CPlayer_SetCommunityPreferences_Response)},
  { 1207, -1, -1, sizeof(::CPlayer_GetTextFilterWords_Request)},
  { 1213, 1222, -1, sizeof(::CPlayer_TextFilterWords)},
  { 1225, 1232, -1, sizeof(::CPlayer_GetTextFilterWords_Response)},
  { 1233, 1240, -1, sizeof(::CPlayer_GetNewSteamAnnouncementState_Request)},
  { 1241, 1252, -1, sizeof(::CPlayer_GetNewSteamAnnouncementState_Response)},
  { 1257, 1265, -1, sizeof(::CPlayer_UpdateSteamAnnouncementLastRead_Request)},
  { 1267, -1, -1, sizeof(::CPlayer_UpdateSteamAnnouncementLastRead_Response)},
  { 1273, -1, -1, sizeof(::CPlayer_GetPrivacySettings_Request)},
  { 1279, 1291, -1, sizeof(::CPrivacySettings)},
  { 1297, 1304, -1, sizeof(::CPlayer_GetPrivacySettings_Response)},
  { 1305, 1312, -1, sizeof(::CPlayer_GetDurationControl_Request)},
  { 1313, 1327, -1, sizeof(::CPlayer_GetDurationControl_Response)},
  { 1335, 1345, -1, sizeof(::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory)},
  { 1349, -1, -1, sizeof(::CPlayer_RecordDisconnectedPlaytime_Request)},
  { 1356, -1, -1, sizeof(::CPlayer_RecordDisconnectedPlaytime_Response)},
  { 1362, -1, -1, sizeof(::CPlayer_LastPlayedTimes_Notification)},
  { 1369, 1378, -1, sizeof(::CPlayer_FriendNicknameChanged_Notification)},
  { 1381, 1388, -1, sizeof(::CPlayer_FriendEquippedProfileItemsChanged_Notification)},
  { 1389, 1400, -1, sizeof(::CPlayer_NewSteamAnnouncementState_Notification)},
  { 1405, 1413, -1, sizeof(::CPlayer_CommunityPreferencesChanged_Notification)},
  { 1415, 1422, -1, sizeof(::CPlayer_TextFilterWordsChanged_Notification)},
  { 1423, 1431, -1, sizeof(::CPlayer_PerFriendPreferencesChanged_Notification)},
  { 1433, 1440, -1, sizeof(::CPlayer_PrivacySettingsChanged_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_IncomingInviteMutualFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetOwnedGames_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetOwnedGames_Response_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetOwnedGames_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPlayNext_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPlayNext_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameBadgeLevels_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameBadgeLevels_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileBackground_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileItem_ProfileColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileBackground_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetProfileBackground_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetProfileBackground_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetMiniProfileBackground_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetMiniProfileBackground_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetMiniProfileBackground_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetMiniProfileBackground_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetAvatarFrame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetAvatarFrame_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetAvatarFrame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetAvatarFrame_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetAnimatedAvatar_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetAnimatedAvatar_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetAnimatedAvatar_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetAnimatedAvatar_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetSteamDeckKeyboardSkin_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetSteamDeckKeyboardSkin_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetSteamDeckKeyboardSkin_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetSteamDeckKeyboardSkin_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileItemsOwned_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileItemsOwned_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileItemsEquipped_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileItemsEquipped_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetEquippedProfileItemFlags_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetEquippedProfileItemFlags_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetEmoticonList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetEmoticonList_Response_Emoticon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetEmoticonList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTopAchievementsForGames_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTopAchievementsForGames_Response_Achievement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTopAchievementsForGames_Response_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTopAchievementsForGames_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetAchievementsProgress_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetAchievementsProgress_Response_AchievementProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetAchievementsProgress_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameAchievements_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameAchievements_Response_Achievement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameAchievements_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFavoriteBadge_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFavoriteBadge_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetFavoriteBadge_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetFavoriteBadge_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileCustomization_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileCustomizationSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileCustomization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfileTheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProfilePreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileCustomization_Response_PurchasedCustomization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileCustomization_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPurchasedProfileCustomizations_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPurchasedProfileCustomizations_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileThemesAvailable_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetProfileThemesAvailable_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetProfileTheme_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetProfileTheme_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetProfilePreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetProfilePreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_PostStatusToFriends_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_PostStatusToFriends_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPostedStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPostedStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_DeletePostedStatus_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_DeletePostedStatus_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetLastPlayedTimes_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetLastPlayedTimes_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTimeSSAAccepted_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTimeSSAAccepted_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AcceptSSA_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AcceptSSA_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNicknameList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNicknameList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPerFriendPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PerFriendPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPerFriendPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetPerFriendPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetPerFriendPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AddFriend_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AddFriend_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_RemoveFriend_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_RemoveFriend_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_IgnoreFriend_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_IgnoreFriend_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetCommunityPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_CommunityPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetCommunityPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetCommunityPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetCommunityPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTextFilterWords_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_TextFilterWords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetTextFilterWords_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNewSteamAnnouncementState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNewSteamAnnouncementState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPrivacySettings_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPrivacySettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPrivacySettings_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetDurationControl_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetDurationControl_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_RecordDisconnectedPlaytime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_RecordDisconnectedPlaytime_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_LastPlayedTimes_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_FriendNicknameChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_FriendEquippedProfileItemsChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_NewSteamAnnouncementState_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_CommunityPreferencesChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_TextFilterWordsChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_PerFriendPreferencesChanged_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_PrivacySettingsChanged_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fplayer_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&steammessages_player.steamclient.proto"
  "\032\030steammessages_base.proto\032,steammessage"
  "s_unified_base.steamclient.proto\032\013enums."
  "proto\"4\n2CPlayer_GetMutualFriendsForInco"
  "mingInvites_Request\"\\\n&CPlayer_IncomingI"
  "nviteMutualFriendList\022\017\n\007steamid\030\001 \001(\006\022!"
  "\n\031mutual_friend_account_ids\030\002 \003(\r\"\214\001\n3CP"
  "layer_GetMutualFriendsForIncomingInvites"
  "_Response\022U\n$incoming_invite_mutual_frie"
  "nds_lists\030\001 \003(\0132\'.CPlayer_IncomingInvite"
  "MutualFriendList\"\224\006\n\035CPlayer_GetOwnedGam"
  "es_Request\0222\n\007steamid\030\001 \001(\004B!\202\265\030\035The pla"
  "yer we\'re asking about\022\\\n\017include_appinf"
  "o\030\002 \001(\010BC\202\265\030\?true if we want additional "
  "details (name, icon) about each game\022\214\001\n"
  "\031include_played_free_games\030\003 \001(\010Bi\202\265\030eFr"
  "ee games are excluded by default.  If th"
  "is is set, free games the user has playe"
  "d will be returned.\022M\n\rappids_filter\030\004 \003"
  "(\rB6\202\265\0302if set, restricts result set to "
  "the passed in apps\022\\\n\020include_free_sub\030\005"
  " \001(\010BB\202\265\030>Some games are in the free sub"
  ", which are excluded by default.\022F\n\022skip"
  "_unvetted_apps\030\006 \001(\010:\004trueB$\202\265\030 if set, "
  "skip unvetted store apps\022:\n\010language\030\007 \001"
  "(\tB(\202\265\030$Will return appinfo in this lang"
  "uage\022\240\001\n\030include_extended_appinfo\030\010 \001(\010B"
  "~\202\265\030ztrue if we want even more details ("
  "capsule, sortas, and capabilities) about"
  " each game.  include_appinfo must also b"
  "e true.\"\266\004\n\036CPlayer_GetOwnedGames_Respon"
  "se\022\022\n\ngame_count\030\001 \001(\r\0223\n\005games\030\002 \003(\0132$."
  "CPlayer_GetOwnedGames_Response.Game\032\312\003\n\004"
  "Game\022\r\n\005appid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\027\n\017pla"
  "ytime_2weeks\030\003 \001(\005\022\030\n\020playtime_forever\030\004"
  " \001(\005\022\024\n\014img_icon_url\030\005 \001(\t\022#\n\033has_commun"
  "ity_visible_stats\030\007 \001(\010\022 \n\030playtime_wind"
  "ows_forever\030\010 \001(\005\022\034\n\024playtime_mac_foreve"
  "r\030\t \001(\005\022\036\n\026playtime_linux_forever\030\n \001(\005\022"
  "\031\n\021rtime_last_played\030\013 \001(\r\022\030\n\020capsule_fi"
  "lename\030\014 \001(\t\022\017\n\007sort_as\030\r \001(\t\022\024\n\014has_wor"
  "kshop\030\016 \001(\010\022\022\n\nhas_market\030\017 \001(\010\022\017\n\007has_d"
  "lc\030\020 \001(\010\022\030\n\020has_leaderboards\030\021 \001(\010\022\035\n\025co"
  "ntent_descriptorids\030\022 \003(\r\022\035\n\025playtime_di"
  "sconnected\030\023 \001(\005\"M\n\033CPlayer_GetPlayNext_"
  "Request\022\027\n\017max_age_seconds\030\001 \001(\r\022\025\n\rigno"
  "re_appids\030\002 \003(\r\"H\n\034CPlayer_GetPlayNext_R"
  "esponse\022\030\n\020last_update_time\030\001 \001(\r\022\016\n\006app"
  "ids\030\002 \003(\r\"7\n&CPlayer_GetFriendsGameplayI"
  "nfo_Request\022\r\n\005appid\030\001 \001(\r\"\356\005\n\'CPlayer_G"
  "etFriendsGameplayInfo_Response\022K\n\tyour_i"
  "nfo\030\001 \001(\01328.CPlayer_GetFriendsGameplayIn"
  "fo_Response.OwnGameplayInfo\022M\n\007in_game\030\002"
  " \003(\0132<.CPlayer_GetFriendsGameplayInfo_Re"
  "sponse.FriendsGameplayInfo\022U\n\017played_rec"
  "ently\030\003 \003(\0132<.CPlayer_GetFriendsGameplay"
  "Info_Response.FriendsGameplayInfo\022Q\n\013pla"
  "yed_ever\030\004 \003(\0132<.CPlayer_GetFriendsGamep"
  "layInfo_Response.FriendsGameplayInfo\022J\n\004"
  "owns\030\005 \003(\0132<.CPlayer_GetFriendsGameplayI"
  "nfo_Response.FriendsGameplayInfo\022Q\n\013in_w"
  "ishlist\030\006 \003(\0132<.CPlayer_GetFriendsGamepl"
  "ayInfo_Response.FriendsGameplayInfo\032^\n\023F"
  "riendsGameplayInfo\022\017\n\007steamid\030\001 \001(\006\022\026\n\016m"
  "inutes_played\030\002 \001(\r\022\036\n\026minutes_played_fo"
  "rever\030\003 \001(\r\032~\n\017OwnGameplayInfo\022\017\n\007steami"
  "d\030\001 \001(\006\022\026\n\016minutes_played\030\002 \001(\r\022\036\n\026minut"
  "es_played_forever\030\003 \001(\r\022\023\n\013in_wishlist\030\004"
  " \001(\010\022\r\n\005owned\030\005 \001(\010\"3\n\"CPlayer_GetGameBa"
  "dgeLevels_Request\022\r\n\005appid\030\001 \001(\r\"\265\001\n#CPl"
  "ayer_GetGameBadgeLevels_Response\022\024\n\014play"
  "er_level\030\001 \001(\r\022:\n\006badges\030\002 \003(\0132*.CPlayer"
  "_GetGameBadgeLevels_Response.Badge\032<\n\005Ba"
  "dge\022\r\n\005level\030\001 \001(\005\022\016\n\006series\030\002 \001(\005\022\024\n\014bo"
  "rder_color\030\003 \001(\r\"l\n$CPlayer_GetProfileBa"
  "ckground_Request\0222\n\007steamid\030\001 \001(\006B!\202\265\030\035T"
  "he player we\'re asking about\022\020\n\010language"
  "\030\002 \001(\t\"\253\006\n\013ProfileItem\022\027\n\017communityitemi"
  "d\030\001 \001(\004\022B\n\013image_small\030\002 \001(\tB-\202\265\030)small "
  "image used in backpack or selection\022)\n\013i"
  "mage_large\030\003 \001(\tB\024\202\265\030\020the image itself\022\036"
  "\n\004name\030\004 \001(\tB\020\202\265\030\014english name\022\'\n\nitem_t"
  "itle\030\005 \001(\tB\023\202\265\030\017localized title\0223\n\020item_"
  "description\030\006 \001(\tB\031\202\265\030\025localized descrip"
  "tion\022\r\n\005appid\030\007 \001(\r\022\021\n\titem_type\030\010 \001(\r\022\022"
  "\n\nitem_class\030\t \001(\r\022+\n\nmovie_webm\030\n \001(\tB\027"
  "\202\265\030\023URL to webm, if any\022)\n\tmovie_mp4\030\013 \001"
  "(\tB\026\202\265\030\022URL to mp4, if any\0227\n\020movie_webm"
  "_small\030\r \001(\tB\035\202\265\030\031URL to small webm, if "
  "any\0225\n\017movie_mp4_small\030\016 \001(\tB\034\202\265\030\030URL to"
  " small mp4, if any\022V\n\016equipped_flags\030\014 \001"
  "(\rB>\202\265\030:Special flags set when equipped "
  "(EProfileItemEquippedFlag)\022N\n\016profile_co"
  "lors\030\017 \003(\0132\031.ProfileItem.ProfileColorB\033\202"
  "\265\030\027Game profile css colors\032p\n\014ProfileCol"
  "or\0229\n\nstyle_name\030\001 \001(\tB%\202\265\030!EProfileColo"
  "rStyle string version\022%\n\005color\030\002 \001(\tB\026\202\265"
  "\030\022hex color to apply\"Q\n%CPlayer_GetProfi"
  "leBackground_Response\022(\n\022profile_backgro"
  "und\030\001 \001(\0132\014.ProfileItem\"\?\n$CPlayer_SetPr"
  "ofileBackground_Request\022\027\n\017communityitem"
  "id\030\001 \001(\004\"\'\n%CPlayer_SetProfileBackground"
  "_Response\"p\n(CPlayer_GetMiniProfileBackg"
  "round_Request\0222\n\007steamid\030\001 \001(\006B!\202\265\030\035The "
  "player we\'re asking about\022\020\n\010language\030\002 "
  "\001(\t\"U\n)CPlayer_GetMiniProfileBackground_"
  "Response\022(\n\022profile_background\030\001 \001(\0132\014.P"
  "rofileItem\"C\n(CPlayer_SetMiniProfileBack"
  "ground_Request\022\027\n\017communityitemid\030\001 \001(\004\""
  "+\n)CPlayer_SetMiniProfileBackground_Resp"
  "onse\"f\n\036CPlayer_GetAvatarFrame_Request\0222"
  "\n\007steamid\030\001 \001(\006B!\202\265\030\035The player we\'re as"
  "king about\022\020\n\010language\030\002 \001(\t\"E\n\037CPlayer_"
  "GetAvatarFrame_Response\022\"\n\014avatar_frame\030"
  "\001 \001(\0132\014.ProfileItem\"9\n\036CPlayer_SetAvatar"
  "Frame_Request\022\027\n\017communityitemid\030\001 \001(\004\"!"
  "\n\037CPlayer_SetAvatarFrame_Response\"i\n!CPl"
  "ayer_GetAnimatedAvatar_Request\0222\n\007steami"
  "d\030\001 \001(\006B!\202\265\030\035The player we\'re asking abo"
  "ut\022\020\n\010language\030\002 \001(\t\"B\n\"CPlayer_GetAnima"
  "tedAvatar_Response\022\034\n\006avatar\030\001 \001(\0132\014.Pro"
  "fileItem\"<\n!CPlayer_SetAnimatedAvatar_Re"
  "quest\022\027\n\017communityitemid\030\001 \001(\004\"$\n\"CPlaye"
  "r_SetAnimatedAvatar_Response\"p\n(CPlayer_"
  "GetSteamDeckKeyboardSkin_Request\0222\n\007stea"
  "mid\030\001 \001(\006B!\202\265\030\035The player we\'re asking a"
  "bout\022\020\n\010language\030\002 \001(\t\"[\n)CPlayer_GetSte"
  "amDeckKeyboardSkin_Response\022.\n\030steam_dec"
  "k_keyboard_skin\030\001 \001(\0132\014.ProfileItem\"C\n(C"
  "Player_SetSteamDeckKeyboardSkin_Request\022"
  "\027\n\017communityitemid\030\001 \001(\004\"+\n)CPlayer_SetS"
  "teamDeckKeyboardSkin_Response\"_\n$CPlayer"
  "_GetProfileItemsOwned_Request\022\020\n\010languag"
  "e\030\001 \001(\t\022%\n\007filters\030\002 \003(\0162\024.ECommunityIte"
  "mClass\"\332\002\n%CPlayer_GetProfileItemsOwned_"
  "Response\022)\n\023profile_backgrounds\030\001 \003(\0132\014."
  "ProfileItem\022.\n\030mini_profile_backgrounds\030"
  "\002 \003(\0132\014.ProfileItem\022#\n\ravatar_frames\030\003 \003"
  "(\0132\014.ProfileItem\022&\n\020animated_avatars\030\004 \003"
  "(\0132\014.ProfileItem\022\'\n\021profile_modifiers\030\005 "
  "\003(\0132\014.ProfileItem\022/\n\031steam_deck_keyboard"
  "_skins\030\006 \003(\0132\014.ProfileItem\022/\n\031steam_deck"
  "_startup_movies\030\007 \003(\0132\014.ProfileItem\"L\n\'C"
  "Player_GetProfileItemsEquipped_Request\022\017"
  "\n\007steamid\030\001 \001(\006\022\020\n\010language\030\002 \001(\t\"\246\002\n(CP"
  "layer_GetProfileItemsEquipped_Response\022("
  "\n\022profile_background\030\001 \001(\0132\014.ProfileItem"
  "\022-\n\027mini_profile_background\030\002 \001(\0132\014.Prof"
  "ileItem\022\"\n\014avatar_frame\030\003 \001(\0132\014.ProfileI"
  "tem\022%\n\017animated_avatar\030\004 \001(\0132\014.ProfileIt"
  "em\022&\n\020profile_modifier\030\005 \001(\0132\014.ProfileIt"
  "em\022.\n\030steam_deck_keyboard_skin\030\006 \001(\0132\014.P"
  "rofileItem\"z\n+CPlayer_SetEquippedProfile"
  "ItemFlags_Request\022\027\n\017communityitemid\030\001 \001"
  "(\004\0222\n\005flags\030\002 \001(\rB#\202\265\030\037Set of EProfileIt"
  "emEquippedFlag\".\n,CPlayer_SetEquippedPro"
  "fileItemFlags_Response\"!\n\037CPlayer_GetEmo"
  "ticonList_Request\"\333\001\n CPlayer_GetEmotico"
  "nList_Response\022=\n\temoticons\030\001 \003(\0132*.CPla"
  "yer_GetEmoticonList_Response.Emoticon\032x\n"
  "\010Emoticon\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 \001(\005\022\026"
  "\n\016time_last_used\030\003 \001(\r\022\021\n\tuse_count\030\004 \001("
  "\r\022\025\n\rtime_received\030\005 \001(\r\022\r\n\005appid\030\006 \001(\r\""
  "\242\001\n*CPlayer_GetTopAchievementsForGames_R"
  "equest\022\017\n\007steamid\030\001 \001(\004\022\020\n\010language\030\002 \001("
  "\t\022A\n\020max_achievements\030\003 \001(\rB\'\202\265\030#The max"
  " achievements to load. Max 8\022\016\n\006appids\030\004"
  " \003(\r\"\323\003\n+CPlayer_GetTopAchievementsForGa"
  "mes_Response\022@\n\005games\030\001 \003(\01321.CPlayer_Ge"
  "tTopAchievementsForGames_Response.Game\032\335"
  "\001\n\013Achievement\022\016\n\006statid\030\001 \001(\r\022\013\n\003bit\030\002 "
  "\001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\022\014\n\004icon\030"
  "\005 \001(\t\022\021\n\ticon_gray\030\006 \001(\t\022\016\n\006hidden\030\007 \001(\010"
  "\022d\n\027player_percent_unlocked\030\010 \001(\tBC\202\265\030\?F"
  "ormatted to one decimal place, min value"
  " is 0.1, max value 100\032\201\001\n\004Game\022\r\n\005appid"
  "\030\001 \001(\r\022\032\n\022total_achievements\030\002 \001(\r\022N\n\014ac"
  "hievements\030\003 \003(\01328.CPlayer_GetTopAchieve"
  "mentsForGames_Response.Achievement\"\\\n\'CP"
  "layer_GetAchievementsProgress_Request\022\017\n"
  "\007steamid\030\001 \001(\004\022\020\n\010language\030\002 \001(\t\022\016\n\006appi"
  "ds\030\003 \003(\r\"\215\002\n(CPlayer_GetAchievementsProg"
  "ress_Response\022[\n\024achievement_progress\030\001 "
  "\003(\0132=.CPlayer_GetAchievementsProgress_Re"
  "sponse.AchievementProgress\032\203\001\n\023Achieveme"
  "ntProgress\022\r\n\005appid\030\001 \001(\r\022\020\n\010unlocked\030\002 "
  "\001(\r\022\r\n\005total\030\003 \001(\r\022\022\n\npercentage\030\004 \001(\002\022\024"
  "\n\014all_unlocked\030\005 \001(\010\022\022\n\ncache_time\030\006 \001(\r"
  "\"j\n#CPlayer_GetGameAchievements_Request\022"
  "\r\n\005appid\030\001 \001(\r\0224\n\010language\030\002 \001(\tB\"\202\265\030\036Lo"
  "wercase, language shortnames\"\305\003\n$CPlayer"
  "_GetGameAchievements_Response\022G\n\014achieve"
  "ments\030\001 \003(\01321.CPlayer_GetGameAchievement"
  "s_Response.Achievement\032\323\002\n\013Achievement\022}"
  "\n\rinternal_name\030\001 \001(\tBf\202\265\030bWill come upp"
  "ercase, internal facing name set by the "
  "partner; needed to associate with user u"
  "nlock\022\026\n\016localized_name\030\002 \001(\t\022\026\n\016localiz"
  "ed_desc\030\003 \001(\t\022\014\n\004icon\030\004 \001(\t\022\021\n\ticon_gray"
  "\030\005 \001(\t\022\016\n\006hidden\030\006 \001(\010\022d\n\027player_percent"
  "_unlocked\030\007 \001(\tBC\202\265\030\?Formatted to one de"
  "cimal place, min value is 0.1, max value"
  " 100\"3\n CPlayer_GetFavoriteBadge_Request"
  "\022\017\n\007steamid\030\001 \001(\004\"\260\001\n!CPlayer_GetFavorit"
  "eBadge_Response\022\032\n\022has_favorite_badge\030\001 "
  "\001(\010\022\017\n\007badgeid\030\002 \001(\r\022\027\n\017communityitemid\030"
  "\003 \001(\004\022\021\n\titem_type\030\004 \001(\r\022\024\n\014border_color"
  "\030\005 \001(\r\022\r\n\005appid\030\006 \001(\r\022\r\n\005level\030\007 \001(\r\"L\n "
  "CPlayer_SetFavoriteBadge_Request\022\027\n\017comm"
  "unityitemid\030\001 \001(\004\022\017\n\007badgeid\030\002 \001(\r\"#\n!CP"
  "layer_SetFavoriteBadge_Response\"\215\001\n\'CPla"
  "yer_GetProfileCustomization_Request\022\017\n\007s"
  "teamid\030\001 \001(\006\022\'\n\037include_inactive_customi"
  "zations\030\002 \001(\010\022(\n include_purchased_custo"
  "mizations\030\003 \001(\010\"\362\002\n\030ProfileCustomization"
  "Slot\022\014\n\004slot\030\001 \001(\r\022\r\n\005appid\030\002 \001(\r\022\027\n\017pub"
  "lishedfileid\030\003 \001(\004\022\024\n\014item_assetid\030\004 \001(\004"
  "\022\026\n\016item_contextid\030\005 \001(\004\022\r\n\005notes\030\006 \001(\t\022"
  "\r\n\005title\030\007 \001(\t\022\021\n\taccountid\030\010 \001(\r\022\017\n\007bad"
  "geid\030\t \001(\r\022\024\n\014border_color\030\n \001(\r\022\024\n\014item"
  "_classid\030\013 \001(\004\022\027\n\017item_instanceid\030\014 \001(\004\022"
  "V\n\020ban_check_result\030\r \001(\0162\027.EBanContentC"
  "heckResult:#k_EBanContentCheckResult_Not"
  "Scanned\022\023\n\013replay_year\030\016 \001(\r\"\275\002\n\024Profile"
  "Customization\022Z\n\022customization_type\030\001 \001("
  "\0162\032.EProfileCustomizationType:\"k_EProfil"
  "eCustomizationTypeInvalid\022\r\n\005large\030\002 \001(\010"
  "\022(\n\005slots\030\003 \003(\0132\031.ProfileCustomizationSl"
  "ot\022\016\n\006active\030\004 \001(\010\022]\n\023customization_styl"
  "e\030\005 \001(\0162\033.EProfileCustomizationStyle:#k_"
  "EProfileCustomizationStyleDefault\022\022\n\npur"
  "chaseid\030\006 \001(\004\022\r\n\005level\030\007 \001(\r\"/\n\014ProfileT"
  "heme\022\020\n\010theme_id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\"1\n"
  "\022ProfilePreferences\022\033\n\023hide_profile_awar"
  "ds\030\001 \001(\010\"\310\003\n(CPlayer_GetProfileCustomiza"
  "tion_Response\022-\n\016customizations\030\001 \003(\0132\025."
  "ProfileCustomization\022\027\n\017slots_available\030"
  "\002 \001(\r\022$\n\rprofile_theme\030\003 \001(\0132\r.ProfileTh"
  "eme\022b\n\030purchased_customizations\030\004 \003(\0132@."
  "CPlayer_GetProfileCustomization_Response"
  ".PurchasedCustomization\0220\n\023profile_prefe"
  "rences\030\005 \001(\0132\023.ProfilePreferences\032\227\001\n\026Pu"
  "rchasedCustomization\022\022\n\npurchaseid\030\001 \001(\004"
  "\022Z\n\022customization_type\030\002 \001(\0162\032.EProfileC"
  "ustomizationType:\"k_EProfileCustomizatio"
  "nTypeInvalid\022\r\n\005level\030\003 \001(\r\"D\n1CPlayer_G"
  "etPurchasedProfileCustomizations_Request"
  "\022\017\n\007steamid\030\001 \001(\006\"\255\002\n2CPlayer_GetPurchas"
  "edProfileCustomizations_Response\022l\n\030purc"
  "hased_customizations\030\001 \003(\0132J.CPlayer_Get"
  "PurchasedProfileCustomizations_Response."
  "PurchasedCustomization\032\210\001\n\026PurchasedCust"
  "omization\022\022\n\npurchaseid\030\001 \001(\004\022Z\n\022customi"
  "zation_type\030\002 \001(\0162\032.EProfileCustomizatio"
  "nType:\"k_EProfileCustomizationTypeInvali"
  "d\"O\n<CPlayer_GetPurchasedAndUpgradedProf"
  "ileCustomizations_Request\022\017\n\007steamid\030\001 \001"
  "(\006\"\272\004\n=CPlayer_GetPurchasedAndUpgradedPr"
  "ofileCustomizations_Response\022w\n\030purchase"
  "d_customizations\030\001 \003(\0132U.CPlayer_GetPurc"
  "hasedAndUpgradedProfileCustomizations_Re"
  "sponse.PurchasedCustomization\022u\n\027upgrade"
  "d_customizations\030\002 \003(\0132T.CPlayer_GetPurc"
  "hasedAndUpgradedProfileCustomizations_Re"
  "sponse.UpgradedCustomization\032\203\001\n\026Purchas"
  "edCustomization\022Z\n\022customization_type\030\001 "
  "\001(\0162\032.EProfileCustomizationType:\"k_EProf"
  "ileCustomizationTypeInvalid\022\r\n\005count\030\002 \001"
  "(\r\032\202\001\n\025UpgradedCustomization\022Z\n\022customiz"
  "ation_type\030\001 \001(\0162\032.EProfileCustomization"
  "Type:\"k_EProfileCustomizationTypeInvalid"
  "\022\r\n\005level\030\002 \001(\r\"+\n)CPlayer_GetProfileThe"
  "mesAvailable_Request\"S\n*CPlayer_GetProfi"
  "leThemesAvailable_Response\022%\n\016profile_th"
  "emes\030\001 \003(\0132\r.ProfileTheme\"3\n\037CPlayer_Set"
  "ProfileTheme_Request\022\020\n\010theme_id\030\001 \001(\t\"\""
  "\n CPlayer_SetProfileTheme_Response\"Y\n%CP"
  "layer_SetProfilePreferences_Request\0220\n\023p"
  "rofile_preferences\030\001 \001(\0132\023.ProfilePrefer"
  "ences\"(\n&CPlayer_SetProfilePreferences_R"
  "esponse\"I\n#CPlayer_PostStatusToFriends_R"
  "equest\022\r\n\005appid\030\001 \001(\r\022\023\n\013status_text\030\002 \001"
  "(\t\"&\n$CPlayer_PostStatusToFriends_Respon"
  "se\"e\n\037CPlayer_GetPostedStatus_Request\0222\n"
  "\007steamid\030\001 \001(\004B!\202\265\030\035The player we\'re ask"
  "ing about\022\016\n\006postid\030\002 \001(\004\"z\n CPlayer_Get"
  "PostedStatus_Response\022\021\n\taccountid\030\001 \001(\r"
  "\022\016\n\006postid\030\002 \001(\004\022\023\n\013status_text\030\003 \001(\t\022\017\n"
  "\007deleted\030\004 \001(\010\022\r\n\005appid\030\005 \001(\r\"4\n\"CPlayer"
  "_DeletePostedStatus_Request\022\016\n\006postid\030\001 "
  "\001(\004\"%\n#CPlayer_DeletePostedStatus_Respon"
  "se\"\202\001\n\"CPlayer_GetLastPlayedTimes_Reques"
  "t\022\\\n\017min_last_played\030\001 \001(\rBC\202\265\030\?The most"
  " recent last-played time the client alre"
  "ady knows about\"\211\004\n#CPlayer_GetLastPlaye"
  "dTimes_Response\0228\n\005games\030\001 \003(\0132).CPlayer"
  "_GetLastPlayedTimes_Response.Game\032\247\003\n\004Ga"
  "me\022\r\n\005appid\030\001 \001(\005\022\025\n\rlast_playtime\030\002 \001(\r"
  "\022\027\n\017playtime_2weeks\030\003 \001(\005\022\030\n\020playtime_fo"
  "rever\030\004 \001(\005\022\026\n\016first_playtime\030\005 \001(\r\022 \n\030p"
  "laytime_windows_forever\030\006 \001(\005\022\034\n\024playtim"
  "e_mac_forever\030\007 \001(\005\022\036\n\026playtime_linux_fo"
  "rever\030\010 \001(\005\022\036\n\026first_windows_playtime\030\t "
  "\001(\r\022\032\n\022first_mac_playtime\030\n \001(\r\022\034\n\024first"
  "_linux_playtime\030\013 \001(\r\022\035\n\025last_windows_pl"
  "aytime\030\014 \001(\r\022\031\n\021last_mac_playtime\030\r \001(\r\022"
  "\033\n\023last_linux_playtime\030\016 \001(\r\022\035\n\025playtime"
  "_disconnected\030\017 \001(\r\"$\n\"CPlayer_GetTimeSS"
  "AAccepted_Request\"z\n#CPlayer_GetTimeSSAA"
  "ccepted_Response\022\031\n\021time_ssa_accepted\030\001 "
  "\001(\r\022\030\n\020time_ssa_updated\030\002 \001(\r\022\036\n\026time_ch"
  "inassa_accepted\030\003 \001(\r\"w\n\031CPlayer_AcceptS"
  "SA_Request\022A\n\016agreement_type\030\001 \001(\0162\017.EAg"
  "reementType:\030k_EAgreementType_Invalid\022\027\n"
  "\017time_signed_utc\030\002 \001(\r\"\034\n\032CPlayer_Accept"
  "SSA_Response\"!\n\037CPlayer_GetNicknameList_"
  "Request\"\236\001\n CPlayer_GetNicknameList_Resp"
  "onse\022C\n\tnicknames\030\001 \003(\01320.CPlayer_GetNic"
  "knameList_Response.PlayerNickname\0325\n\016Pla"
  "yerNickname\022\021\n\taccountid\030\001 \001(\007\022\020\n\010nickna"
  "me\030\002 \001(\t\")\n\'CPlayer_GetPerFriendPreferen"
  "ces_Request\"\321\005\n\024PerFriendPreferences\022\021\n\t"
  "accountid\030\001 \001(\007\022\020\n\010nickname\030\002 \001(\t\022_\n\030not"
  "ifications_showingame\030\003 \001(\0162\025.ENotificat"
  "ionSetting:&k_ENotificationSettingNotify"
  "UseDefault\022_\n\030notifications_showonline\030\004"
  " \001(\0162\025.ENotificationSetting:&k_ENotifica"
  "tionSettingNotifyUseDefault\022a\n\032notificat"
  "ions_showmessages\030\005 \001(\0162\025.ENotificationS"
  "etting:&k_ENotificationSettingNotifyUseD"
  "efault\022X\n\021sounds_showingame\030\006 \001(\0162\025.ENot"
  "ificationSetting:&k_ENotificationSetting"
  "NotifyUseDefault\022X\n\021sounds_showonline\030\007 "
  "\001(\0162\025.ENotificationSetting:&k_ENotificat"
  "ionSettingNotifyUseDefault\022Z\n\023sounds_sho"
  "wmessages\030\010 \001(\0162\025.ENotificationSetting:&"
  "k_ENotificationSettingNotifyUseDefault\022_"
  "\n\030notifications_sendmobile\030\t \001(\0162\025.ENoti"
  "ficationSetting:&k_ENotificationSettingN"
  "otifyUseDefault\"V\n(CPlayer_GetPerFriendP"
  "references_Response\022*\n\013preferences\030\001 \003(\013"
  "2\025.PerFriendPreferences\"U\n\'CPlayer_SetPe"
  "rFriendPreferences_Request\022*\n\013preference"
  "s\030\001 \001(\0132\025.PerFriendPreferences\"*\n(CPlaye"
  "r_SetPerFriendPreferences_Response\"c\n\031CP"
  "layer_AddFriend_Request\022F\n\007steamid\030\001 \001(\006"
  "B5\202\265\0301Steam ID of user to whom to send a"
  " friend invite.\"\206\002\n\032CPlayer_AddFriend_Re"
  "sponse\022O\n\013invite_sent\030\001 \001(\010B:\202\265\0306True if"
  " the operation was successful, false oth"
  "erwise.\022\206\001\n\023friend_relationship\030\002 \001(\rBi\202"
  "\265\030ethe resulting relationship.  Dependin"
  "g on state, may move directly to friends"
  " rather than invite sent\022\016\n\006result\030\003 \001(\005"
  "\"R\n\034CPlayer_RemoveFriend_Request\0222\n\007stea"
  "mid\030\001 \001(\006B!\202\265\030\035Steam ID of friend to rem"
  "ove.\"\\\n\035CPlayer_RemoveFriend_Response\022;\n"
  "\023friend_relationship\030\001 \001(\rB\036\202\265\030\032the resu"
  "lting relationship\"\177\n\034CPlayer_IgnoreFrie"
  "nd_Request\022\017\n\007steamid\030\001 \001(\006\022N\n\010unignore\030"
  "\002 \001(\010B<\202\265\0308If set, remove from ignore/bl"
  "ock list instead of adding \"\\\n\035CPlayer_I"
  "gnoreFriend_Response\022;\n\023friend_relations"
  "hip\030\001 \001(\rB\036\202\265\030\032the resulting relationshi"
  "p\")\n\'CPlayer_GetCommunityPreferences_Req"
  "uest\"\206\002\n\034CPlayer_CommunityPreferences\022%\n"
  "\026parenthesize_nicknames\030\004 \001(\010:\005false\022V\n\023"
  "text_filter_setting\030\005 \001(\0162\023.ETextFilterS"
  "etting:$k_ETextFilterSettingSteamLabOpte"
  "dOut\022(\n\032text_filter_ignore_friends\030\006 \001(\010"
  ":\004true\022\"\n\032text_filter_words_revision\030\007 \001"
  "(\r\022\031\n\021timestamp_updated\030\003 \001(\r\"\251\001\n(CPlaye"
  "r_GetCommunityPreferences_Response\0222\n\013pr"
  "eferences\030\001 \001(\0132\035.CPlayer_CommunityPrefe"
  "rences\022I\n\036content_descriptor_preferences"
  "\030\002 \001(\0132!.UserContentDescriptorPreference"
  "s\"]\n\'CPlayer_SetCommunityPreferences_Req"
  "uest\0222\n\013preferences\030\001 \001(\0132\035.CPlayer_Comm"
  "unityPreferences\"*\n(CPlayer_SetCommunity"
  "Preferences_Response\"$\n\"CPlayer_GetTextF"
  "ilterWords_Request\"\216\001\n\027CPlayer_TextFilte"
  "rWords\022\'\n\037text_filter_custom_banned_word"
  "s\030\001 \003(\t\022&\n\036text_filter_custom_clean_word"
  "s\030\002 \003(\t\022\"\n\032text_filter_words_revision\030\003 "
  "\001(\r\"N\n#CPlayer_GetTextFilterWords_Respon"
  "se\022\'\n\005words\030\001 \001(\0132\030.CPlayer_TextFilterWo"
  "rds\"@\n,CPlayer_GetNewSteamAnnouncementSt"
  "ate_Request\022\020\n\010language\030\001 \001(\005\"\351\001\n-CPlaye"
  "r_GetNewSteamAnnouncementState_Response\022"
  "P\n\005state\030\001 \001(\0162\033.ENewSteamAnnouncementSt"
  "ate:$k_ENewSteamAnnouncementState_Invali"
  "d\022\035\n\025announcement_headline\030\002 \001(\t\022\030\n\020anno"
  "uncement_url\030\003 \001(\t\022\023\n\013time_posted\030\004 \001(\r\022"
  "\030\n\020announcement_gid\030\005 \001(\004\"`\n/CPlayer_Upd"
  "ateSteamAnnouncementLastRead_Request\022\030\n\020"
  "announcement_gid\030\001 \001(\004\022\023\n\013time_posted\030\002 "
  "\001(\r\"2\n0CPlayer_UpdateSteamAnnouncementLa"
  "stRead_Response\"$\n\"CPlayer_GetPrivacySet"
  "tings_Request\"\314\001\n\020CPrivacySettings\022\025\n\rpr"
  "ivacy_state\030\001 \001(\005\022\037\n\027privacy_state_inven"
  "tory\030\002 \001(\005\022\033\n\023privacy_state_gifts\030\003 \001(\005\022"
  " \n\030privacy_state_ownedgames\030\004 \001(\005\022\036\n\026pri"
  "vacy_state_playtime\030\005 \001(\005\022!\n\031privacy_sta"
  "te_friendslist\030\006 \001(\005\"R\n#CPlayer_GetPriva"
  "cySettings_Response\022+\n\020privacy_settings\030"
  "\001 \001(\0132\021.CPrivacySettings\"3\n\"CPlayer_GetD"
  "urationControl_Request\022\r\n\005appid\030\001 \001(\r\"\360\001"
  "\n#CPlayer_GetDurationControl_Response\022\022\n"
  "\nis_enabled\030\001 \001(\010\022\017\n\007seconds\030\002 \001(\005\022\025\n\rse"
  "conds_today\030\003 \001(\005\022\035\n\025is_steamchina_accou"
  "nt\030\004 \001(\010\022\027\n\017is_age_verified\030\005 \001(\010\022\035\n\025sec"
  "onds_allowed_today\030\006 \001(\r\022 \n\030age_verifica"
  "tion_pending\030\007 \001(\010\022\024\n\014block_minors\030\010 \001(\010"
  "\"\330\001\n*CPlayer_RecordDisconnectedPlaytime_"
  "Request\022N\n\rplay_sessions\030\003 \003(\01327.CPlayer"
  "_RecordDisconnectedPlaytime_Request.Play"
  "History\032Z\n\013PlayHistory\022\r\n\005appid\030\001 \001(\r\022\032\n"
  "\022session_time_start\030\002 \001(\r\022\017\n\007seconds\030\003 \001"
  "(\r\022\017\n\007offline\030\004 \001(\010\"-\n+CPlayer_RecordDis"
  "connectedPlaytime_Response\"`\n$CPlayer_La"
  "stPlayedTimes_Notification\0228\n\005games\030\001 \003("
  "\0132).CPlayer_GetLastPlayedTimes_Response."
  "Game\"j\n*CPlayer_FriendNicknameChanged_No"
  "tification\022\021\n\taccountid\030\001 \001(\007\022\020\n\010nicknam"
  "e\030\002 \001(\t\022\027\n\017is_echo_to_self\030\003 \001(\010\"K\n6CPla"
  "yer_FriendEquippedProfileItemsChanged_No"
  "tification\022\021\n\taccountid\030\001 \001(\007\"\352\001\n.CPlaye"
  "r_NewSteamAnnouncementState_Notification"
  "\022P\n\005state\030\001 \001(\0162\033.ENewSteamAnnouncementS"
  "tate:$k_ENewSteamAnnouncementState_Inval"
  "id\022\035\n\025announcement_headline\030\002 \001(\t\022\030\n\020ann"
  "ouncement_url\030\003 \001(\t\022\023\n\013time_posted\030\004 \001(\r"
  "\022\030\n\020announcement_gid\030\005 \001(\004\"\261\001\n0CPlayer_C"
  "ommunityPreferencesChanged_Notification\022"
  "2\n\013preferences\030\001 \001(\0132\035.CPlayer_Community"
  "Preferences\022I\n\036content_descriptor_prefer"
  "ences\030\002 \001(\0132!.UserContentDescriptorPrefe"
  "rences\"V\n+CPlayer_TextFilterWordsChanged"
  "_Notification\022\'\n\005words\030\001 \001(\0132\030.CPlayer_T"
  "extFilterWords\"q\n0CPlayer_PerFriendPrefe"
  "rencesChanged_Notification\022\021\n\taccountid\030"
  "\001 \001(\007\022*\n\013preferences\030\002 \001(\0132\025.PerFriendPr"
  "eferences\"Z\n+CPlayer_PrivacySettingsChan"
  "ged_Notification\022+\n\020privacy_settings\030\001 \001"
  "(\0132\021.CPrivacySettings*\231\002\n\032EProfileCustom"
  "izationStyle\022\'\n#k_EProfileCustomizationS"
  "tyleDefault\020\000\022(\n$k_EProfileCustomization"
  "StyleSelected\020\001\022&\n\"k_EProfileCustomizati"
  "onStyleRarest\020\002\022*\n&k_EProfileCustomizati"
  "onStyleMostRecent\020\003\022&\n\"k_EProfileCustomi"
  "zationStyleRandom\020\004\022,\n(k_EProfileCustomi"
  "zationStyleHighestRated\020\005*v\n\016EAgreementT"
  "ype\022%\n\030k_EAgreementType_Invalid\020\377\377\377\377\377\377\377\377"
  "\377\001\022\036\n\032k_EAgreementType_GlobalSSA\020\000\022\035\n\031k_"
  "EAgreementType_ChinaSSA\020\001*\205\001\n\024ENotificat"
  "ionSetting\022*\n&k_ENotificationSettingNoti"
  "fyUseDefault\020\000\022 \n\034k_ENotificationSetting"
  "Always\020\001\022\037\n\033k_ENotificationSettingNever\020"
  "\002*\260\001\n\022ETextFilterSetting\022(\n$k_ETextFilte"
  "rSettingSteamLabOptedOut\020\000\022\037\n\033k_ETextFil"
  "terSettingEnabled\020\001\022-\n)k_ETextFilterSett"
  "ingEnabledAllowProfanity\020\002\022 \n\034k_ETextFil"
  "terSettingDisabled\020\0032\267@\n\006Player\022\357\001\n\"GetM"
  "utualFriendsForIncomingInvites\0223.CPlayer"
  "_GetMutualFriendsForIncomingInvites_Requ"
  "est\0324.CPlayer_GetMutualFriendsForIncomin"
  "gInvites_Response\"^\202\265\030ZGet me the mutual"
  " friends for each of my pending incoming"
  " invites (individuals and clans).\022\200\001\n\rGe"
  "tOwnedGames\022\036.CPlayer_GetOwnedGames_Requ"
  "est\032\037.CPlayer_GetOwnedGames_Response\".\202\265"
  "\030*Return a list of games owned by the pl"
  "ayer\022\177\n\013GetPlayNext\022\034.CPlayer_GetPlayNex"
  "t_Request\032\035.CPlayer_GetPlayNext_Response"
  "\"3\202\265\030/Return suggested games for player "
  "to play next.\022\270\001\n\026GetFriendsGameplayInfo"
  "\022\'.CPlayer_GetFriendsGameplayInfo_Reques"
  "t\032(.CPlayer_GetFriendsGameplayInfo_Respo"
  "nse\"K\202\265\030GGet a list of friends who are p"
  "laying, have played, own, or want a game"
  "\022\266\001\n\022GetGameBadgeLevels\022#.CPlayer_GetGam"
  "eBadgeLevels_Request\032$.CPlayer_GetGameBa"
  "dgeLevels_Response\"U\202\265\030QReturns the Stea"
  "m Level of a user, the Badge level for t"
  "he game, and if it\'s foil\022\246\001\n\024GetProfile"
  "Background\022%.CPlayer_GetProfileBackgroun"
  "d_Request\032&.CPlayer_GetProfileBackground"
  "_Response\"\?\202\265\030;Gets which profile backgr"
  "ound is active for a specific user\022\215\001\n\024S"
  "etProfileBackground\022%.CPlayer_SetProfile"
  "Background_Request\032&.CPlayer_SetProfileB"
  "ackground_Response\"&\202\265\030\"Sets the user\'s "
  "profile background\022\267\001\n\030GetMiniProfileBac"
  "kground\022).CPlayer_GetMiniProfileBackgrou"
  "nd_Request\032*.CPlayer_GetMiniProfileBackg"
  "round_Response\"D\202\265\030@Gets which mini prof"
  "ile background is active for a specific "
  "user\022\236\001\n\030SetMiniProfileBackground\022).CPla"
  "yer_SetMiniProfileBackground_Request\032*.C"
  "Player_SetMiniProfileBackground_Response"
  "\"+\202\265\030\'Sets the user\'s mini profile backg"
  "round\022\216\001\n\016GetAvatarFrame\022\037.CPlayer_GetAv"
  "atarFrame_Request\032 .CPlayer_GetAvatarFra"
  "me_Response\"9\202\265\0305Gets which avatar frame"
  " is active for a specific user\022\207\001\n\016SetAv"
  "atarFrame\022\037.CPlayer_SetAvatarFrame_Reque"
  "st\032 .CPlayer_SetAvatarFrame_Response\"2\202\265"
  "\030.Sets the user\'s avatar frame for their"
  " profile\022\232\001\n\021GetAnimatedAvatar\022\".CPlayer"
  "_GetAnimatedAvatar_Request\032#.CPlayer_Get"
  "AnimatedAvatar_Response\"<\202\265\0308Gets which "
  "animated avatar is active for a specific"
  " user\022\223\001\n\021SetAnimatedAvatar\022\".CPlayer_Se"
  "tAnimatedAvatar_Request\032#.CPlayer_SetAni"
  "matedAvatar_Response\"5\202\265\0301Sets the user\'"
  "s animated avatar for their profile\022\270\001\n\030"
  "GetSteamDeckKeyboardSkin\022).CPlayer_GetSt"
  "eamDeckKeyboardSkin_Request\032*.CPlayer_Ge"
  "tSteamDeckKeyboardSkin_Response\"E\202\265\030AGet"
  "s which Steam Deck keyboard skin is acti"
  "ve for a specific user\022\247\001\n\030SetSteamDeckK"
  "eyboardSkin\022).CPlayer_SetSteamDeckKeyboa"
  "rdSkin_Request\032*.CPlayer_SetSteamDeckKey"
  "boardSkin_Response\"4\202\265\0300Sets the user\'s "
  "current Steam Deck keyboard skin\022\240\001\n\024Get"
  "ProfileItemsOwned\022%.CPlayer_GetProfileIt"
  "emsOwned_Request\032&.CPlayer_GetProfileIte"
  "msOwned_Response\"9\202\265\0305Returns the items "
  "the user can equip on their profile\022\254\001\n\027"
  "GetProfileItemsEquipped\022(.CPlayer_GetPro"
  "fileItemsEquipped_Request\032).CPlayer_GetP"
  "rofileItemsEquipped_Response\"<\202\265\0308Return"
  "s the items the user has equipped on the"
  "ir profile\022\247\001\n\033SetEquippedProfileItemFla"
  "gs\022,.CPlayer_SetEquippedProfileItemFlags"
  "_Request\032-.CPlayer_SetEquippedProfileIte"
  "mFlags_Response\"+\202\265\030\'Sets special flags "
  "on the equipped item\022\221\001\n\017GetEmoticonList"
  "\022 .CPlayer_GetEmoticonList_Request\032!.CPl"
  "ayer_GetEmoticonList_Response\"9\202\265\0305Gets "
  "a list of the emoticons a user has with "
  "metadata\022\313\001\n\032GetTopAchievementsForGames\022"
  "+.CPlayer_GetTopAchievementsForGames_Req"
  "uest\032,.CPlayer_GetTopAchievementsForGame"
  "s_Response\"R\202\265\030NGets the best achievemen"
  "ts the user has gotten for the specified"
  " list of apps.\022\271\001\n\027GetAchievementsProgre"
  "ss\022(.CPlayer_GetAchievementsProgress_Req"
  "uest\032).CPlayer_GetAchievementsProgress_R"
  "esponse\"I\202\265\030EGets the achievement comple"
  "tion stats for the specified list of app"
  "s.\022\240\001\n\023GetGameAchievements\022$.CPlayer_Get"
  "GameAchievements_Request\032%.CPlayer_GetGa"
  "meAchievements_Response\"<\202\265\0308Get a games"
  " available achievements for display purp"
  "oses.\022\220\001\n\020GetFavoriteBadge\022!.CPlayer_Get"
  "FavoriteBadge_Request\032\".CPlayer_GetFavor"
  "iteBadge_Response\"5\202\265\0301Gets the badge th"
  "e user has set as their favorite\022\204\001\n\020Set"
  "FavoriteBadge\022!.CPlayer_SetFavoriteBadge"
  "_Request\032\".CPlayer_SetFavoriteBadge_Resp"
  "onse\")\202\265\030%Sets the badge  as the users f"
  "avorite\022\245\001\n\027GetProfileCustomization\022(.CP"
  "layer_GetProfileCustomization_Request\032)."
  "CPlayer_GetProfileCustomization_Response"
  "\"5\202\265\0301Returns the customizations (if any"
  ") for a profile\022\276\001\n!GetPurchasedProfileC"
  "ustomizations\0222.CPlayer_GetPurchasedProf"
  "ileCustomizations_Request\0323.CPlayer_GetP"
  "urchasedProfileCustomizations_Response\"0"
  "\202\265\030,Returns the purchased profile custom"
  "izations\022\354\001\n,GetPurchasedAndUpgradedProf"
  "ileCustomizations\022=.CPlayer_GetPurchased"
  "AndUpgradedProfileCustomizations_Request"
  "\032>.CPlayer_GetPurchasedAndUpgradedProfil"
  "eCustomizations_Response\"=\202\265\0309Returns th"
  "e purchased and upgraded profile customi"
  "zations\022\235\001\n\031GetProfileThemesAvailable\022*."
  "CPlayer_GetProfileThemesAvailable_Reques"
  "t\032+.CPlayer_GetProfileThemesAvailable_Re"
  "sponse\"\'\202\265\030#Gets themes available for th"
  "e user.\022{\n\017SetProfileTheme\022 .CPlayer_Set"
  "ProfileTheme_Request\032!.CPlayer_SetProfil"
  "eTheme_Response\"#\202\265\030\037Selects a theme for"
  " the profile\022\206\001\n\025SetProfilePreferences\022&"
  ".CPlayer_SetProfilePreferences_Request\032\'"
  ".CPlayer_SetProfilePreferences_Response\""
  "\034\202\265\030\030Sets profile preferences\022\221\001\n\023PostSt"
  "atusToFriends\022$.CPlayer_PostStatusToFrie"
  "nds_Request\032%.CPlayer_PostStatusToFriend"
  "s_Response\"-\202\265\030)Posts custom status text"
  " into the blotter\022\206\001\n\017GetPostedStatus\022 ."
  "CPlayer_GetPostedStatus_Request\032!.CPlaye"
  "r_GetPostedStatus_Response\".\202\265\030*Gets a p"
  "osted status text for a user by id\022\222\001\n\022D"
  "eletePostedStatus\022#.CPlayer_DeletePosted"
  "Status_Request\032$.CPlayer_DeletePostedSta"
  "tus_Response\"1\202\265\030-Deletes a posted statu"
  "s text for a user by id\022\225\001\n\030ClientGetLas"
  "tPlayedTimes\022#.CPlayer_GetLastPlayedTime"
  "s_Request\032$.CPlayer_GetLastPlayedTimes_R"
  "esponse\".\202\265\030*Gets the last-played times "
  "for the account\022\221\001\n\022GetTimeSSAAccepted\022#"
  ".CPlayer_GetTimeSSAAccepted_Request\032$.CP"
  "layer_GetTimeSSAAccepted_Response\"0\202\265\030,G"
  "ets the time when the user accepted the "
  "SSA\022c\n\tAcceptSSA\022\032.CPlayer_AcceptSSA_Req"
  "uest\032\033.CPlayer_AcceptSSA_Response\"\035\202\265\030\031U"
  "ser is accepting the SSA\022\224\001\n\017GetNickname"
  "List\022 .CPlayer_GetNicknameList_Request\032!"
  ".CPlayer_GetNicknameList_Response\"<\202\265\0308G"
  "ets the list of nicknames this user has "
  "for other users\022\275\001\n\027GetPerFriendPreferen"
  "ces\022(.CPlayer_GetPerFriendPreferences_Re"
  "quest\032).CPlayer_GetPerFriendPreferences_"
  "Response\"M\202\265\030IGets the list of per-frien"
  "d preferences this user has set for othe"
  "r users\022\267\001\n\027SetPerFriendPreferences\022(.CP"
  "layer_SetPerFriendPreferences_Request\032)."
  "CPlayer_SetPerFriendPreferences_Response"
  "\"G\202\265\030CSets the logged in user\'s per-frie"
  "nd preferences for the given user\022s\n\tAdd"
  "Friend\022\032.CPlayer_AddFriend_Request\032\033.CPl"
  "ayer_AddFriend_Response\"-\202\265\030)Invites ano"
  "ther Steam user to be a friend\022\202\001\n\014Remov"
  "eFriend\022\035.CPlayer_RemoveFriend_Request\032\036"
  ".CPlayer_RemoveFriend_Response\"3\202\265\030/Remo"
  "ves a friend or ignores a friend suggest"
  "ion\022\246\001\n\014IgnoreFriend\022\035.CPlayer_IgnoreFri"
  "end_Request\032\036.CPlayer_IgnoreFriend_Respo"
  "nse\"W\202\265\030SBlocks or unblocks communicatio"
  "n with the user.  Despite name, can be a"
  " non-friend.\022\236\001\n\027GetCommunityPreferences"
  "\022(.CPlayer_GetCommunityPreferences_Reque"
  "st\032).CPlayer_GetCommunityPreferences_Res"
  "ponse\".\202\265\030*Returns the player\'s communit"
  "y preferences\022\233\001\n\027SetCommunityPreference"
  "s\022(.CPlayer_SetCommunityPreferences_Requ"
  "est\032).CPlayer_SetCommunityPreferences_Re"
  "sponse\"+\202\265\030\'Sets the player\'s community "
  "preferences\022\233\001\n\022GetTextFilterWords\022#.CPl"
  "ayer_GetTextFilterWords_Request\032$.CPlaye"
  "r_GetTextFilterWords_Response\":\202\265\0306Get t"
  "he custom text filtering dictionary for "
  "this user\022\336\001\n\034GetNewSteamAnnouncementSta"
  "te\022-.CPlayer_GetNewSteamAnnouncementStat"
  "e_Request\032..CPlayer_GetNewSteamAnnouncem"
  "entState_Response\"_\202\265\030[Calculates and re"
  "turns what to display for UI that render"
  "s new steam announcement available\022\274\001\n\037U"
  "pdateSteamAnnouncementLastRead\0220.CPlayer"
  "_UpdateSteamAnnouncementLastRead_Request"
  "\0321.CPlayer_UpdateSteamAnnouncementLastRe"
  "ad_Response\"4\202\265\0300Marks latest announceme"
  "nt timestamp read by user\022\202\001\n\022GetPrivacy"
  "Settings\022#.CPlayer_GetPrivacySettings_Re"
  "quest\032$.CPlayer_GetPrivacySettings_Respo"
  "nse\"!\202\265\030\035Get current privacy settings.\022\214"
  "\001\n\022GetDurationControl\022#.CPlayer_GetDurat"
  "ionControl_Request\032$.CPlayer_GetDuration"
  "Control_Response\"+\202\265\030\'Get gameplay durat"
  "ion control settings.\022\357\001\n\032RecordDisconne"
  "ctedPlaytime\022+.CPlayer_RecordDisconnecte"
  "dPlaytime_Request\032,.CPlayer_RecordDiscon"
  "nectedPlaytime_Response\"v\202\265\030rSubmit play"
  "time records that happened while the cli"
  "ent was disconnected from steam (whether"
  " marked offline or not)\032-\202\265\030)A service f"
  "or accessing Steam player data2\246\013\n\014Playe"
  "rClient\022\214\001\n\025NotifyLastPlayedTimes\022%.CPla"
  "yer_LastPlayedTimes_Notification\032\013.NoRes"
  "ponse\"\?\202\265\030;Notification from server to c"
  "lient of more recent play time\022\244\001\n\033Notif"
  "yFriendNicknameChanged\022+.CPlayer_FriendN"
  "icknameChanged_Notification\032\013.NoResponse"
  "\"K\202\265\030GNotification from server to client"
  " that a friend\'s nickname has changed\022\313\001"
  "\n\'NotifyFriendEquippedProfileItemsChange"
  "d\0227.CPlayer_FriendEquippedProfileItemsCh"
  "anged_Notification\032\013.NoResponse\"Z\202\265\030VNot"
  "ification from server to client that a f"
  "riend\'s equipped profile items have chan"
  "ged\022\244\001\n\037NotifyNewSteamAnnouncementState\022"
  "/.CPlayer_NewSteamAnnouncementState_Noti"
  "fication\032\013.NoResponse\"C\202\265\030\?Notifies clie"
  "nt of changes to steam announcement stat"
  "e for user\022\271\001\n!NotifyCommunityPreference"
  "sChanged\0221.CPlayer_CommunityPreferencesC"
  "hanged_Notification\032\013.NoResponse\"T\202\265\030PNo"
  "tification from server to client that th"
  "eir community preferences have changed\022\262"
  "\001\n\034NotifyTextFilterWordsChanged\022,.CPlaye"
  "r_TextFilterWordsChanged_Notification\032\013."
  "NoResponse\"W\202\265\030SNotification from server"
  " to client that their text filtering dic"
  "tionary has changed\022\252\001\n!NotifyPerFriendP"
  "referencesChanged\0221.CPlayer_PerFriendPre"
  "ferencesChanged_Notification\032\013.NoRespons"
  "e\"E\202\265\030ANotification from server that per"
  "-friend preferences have changed\022\234\001\n#Not"
  "ifyPrivacyPrivacySettingsChanged\022,.CPlay"
  "er_PrivacySettingsChanged_Notification\032\013"
  ".NoResponse\":\202\265\0306Notification from serve"
  "r that privacy settings changed\032.\202\265\030&Ste"
  "am player data client notifications\300\265\030\002B"
  "\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_enums_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fplayer_2esteamclient_2eproto = {
  false, false, 28204, descriptor_table_protodef_steammessages_5fplayer_2esteamclient_2eproto, "steammessages_player.steamclient.proto", 
  &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once, descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_deps, 3, 135,
  schemas, file_default_instances, TableStruct_steammessages_5fplayer_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fplayer_2esteamclient_2eproto(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProfileCustomizationStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto[0];
}
bool EProfileCustomizationStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAgreementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto[1];
}
bool EAgreementType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENotificationSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto[2];
}
bool ENotificationSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETextFilterSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fplayer_2esteamclient_2eproto[3];
}
bool ETextFilterSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Request::_Internal {
 public:
};

CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Request)
}
CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetMutualFriendsForIncomingInvites_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetMutualFriendsForIncomingInvites_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[0]);
}

// ===================================================================

class CPlayer_IncomingInviteMutualFriendList::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IncomingInviteMutualFriendList>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mutual_friend_account_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_IncomingInviteMutualFriendList)
}
CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(const CPlayer_IncomingInviteMutualFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mutual_friend_account_ids_(from.mutual_friend_account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_IncomingInviteMutualFriendList)
}

inline void CPlayer_IncomingInviteMutualFriendList::SharedCtor() {
steamid_ = uint64_t{0u};
}

CPlayer_IncomingInviteMutualFriendList::~CPlayer_IncomingInviteMutualFriendList() {
  // @@protoc_insertion_point(destructor:CPlayer_IncomingInviteMutualFriendList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_IncomingInviteMutualFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_IncomingInviteMutualFriendList::ArenaDtor(void* object) {
  CPlayer_IncomingInviteMutualFriendList* _this = reinterpret_cast< CPlayer_IncomingInviteMutualFriendList* >(object);
  (void)_this;
}
void CPlayer_IncomingInviteMutualFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_IncomingInviteMutualFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_IncomingInviteMutualFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IncomingInviteMutualFriendList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutual_friend_account_ids_.Clear();
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IncomingInviteMutualFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 mutual_friend_account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mutual_friend_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mutual_friend_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_IncomingInviteMutualFriendList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IncomingInviteMutualFriendList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // repeated uint32 mutual_friend_account_ids = 2;
  for (int i = 0, n = this->_internal_mutual_friend_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mutual_friend_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IncomingInviteMutualFriendList)
  return target;
}

size_t CPlayer_IncomingInviteMutualFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IncomingInviteMutualFriendList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mutual_friend_account_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mutual_friend_account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mutual_friend_account_ids_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_IncomingInviteMutualFriendList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_IncomingInviteMutualFriendList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_IncomingInviteMutualFriendList::GetClassData() const { return &_class_data_; }

void CPlayer_IncomingInviteMutualFriendList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_IncomingInviteMutualFriendList *>(to)->MergeFrom(
      static_cast<const CPlayer_IncomingInviteMutualFriendList &>(from));
}


void CPlayer_IncomingInviteMutualFriendList::MergeFrom(const CPlayer_IncomingInviteMutualFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IncomingInviteMutualFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mutual_friend_account_ids_.MergeFrom(from.mutual_friend_account_ids_);
  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_IncomingInviteMutualFriendList::CopyFrom(const CPlayer_IncomingInviteMutualFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IncomingInviteMutualFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IncomingInviteMutualFriendList::IsInitialized() const {
  return true;
}

void CPlayer_IncomingInviteMutualFriendList::InternalSwap(CPlayer_IncomingInviteMutualFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mutual_friend_account_ids_.InternalSwap(&other->mutual_friend_account_ids_);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IncomingInviteMutualFriendList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[1]);
}

// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Response::_Internal {
 public:
};

CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  incoming_invite_mutual_friends_lists_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
}
CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      incoming_invite_mutual_friends_lists_(from.incoming_invite_mutual_friends_lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
}

inline void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedCtor() {
}

CPlayer_GetMutualFriendsForIncomingInvites_Response::~CPlayer_GetMutualFriendsForIncomingInvites_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::ArenaDtor(void* object) {
  CPlayer_GetMutualFriendsForIncomingInvites_Response* _this = reinterpret_cast< CPlayer_GetMutualFriendsForIncomingInvites_Response* >(object);
  (void)_this;
}
void CPlayer_GetMutualFriendsForIncomingInvites_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetMutualFriendsForIncomingInvites_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incoming_invite_mutual_friends_lists_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetMutualFriendsForIncomingInvites_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incoming_invite_mutual_friends_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetMutualFriendsForIncomingInvites_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_incoming_invite_mutual_friends_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_incoming_invite_mutual_friends_lists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  return target;
}

size_t CPlayer_GetMutualFriendsForIncomingInvites_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  total_size += 1UL * this->_internal_incoming_invite_mutual_friends_lists_size();
  for (const auto& msg : this->incoming_invite_mutual_friends_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetMutualFriendsForIncomingInvites_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetMutualFriendsForIncomingInvites_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetMutualFriendsForIncomingInvites_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetMutualFriendsForIncomingInvites_Response &>(from));
}


void CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  incoming_invite_mutual_friends_lists_.MergeFrom(from.incoming_invite_mutual_friends_lists_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMutualFriendsForIncomingInvites_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  incoming_invite_mutual_friends_lists_.InternalSwap(&other->incoming_invite_mutual_friends_lists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[2]);
}

// ===================================================================

class CPlayer_GetOwnedGames_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetOwnedGames_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_appinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_include_played_free_games(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_include_free_sub(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_skip_unvetted_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_extended_appinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CPlayer_GetOwnedGames_Request::CPlayer_GetOwnedGames_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  appids_filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetOwnedGames_Request)
}
CPlayer_GetOwnedGames_Request::CPlayer_GetOwnedGames_Request(const CPlayer_GetOwnedGames_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_filter_(from.appids_filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_unvetted_apps_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(skip_unvetted_apps_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetOwnedGames_Request)
}

inline void CPlayer_GetOwnedGames_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_extended_appinfo_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_extended_appinfo_));
skip_unvetted_apps_ = true;
}

CPlayer_GetOwnedGames_Request::~CPlayer_GetOwnedGames_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetOwnedGames_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetOwnedGames_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetOwnedGames_Request::ArenaDtor(void* object) {
  CPlayer_GetOwnedGames_Request* _this = reinterpret_cast< CPlayer_GetOwnedGames_Request* >(object);
  (void)_this;
}
void CPlayer_GetOwnedGames_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetOwnedGames_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetOwnedGames_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetOwnedGames_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_filter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_extended_appinfo_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_extended_appinfo_));
    skip_unvetted_apps_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetOwnedGames_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_appinfo = 2 [(.description) = "true if we want additional details (name, icon) about each game"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_include_appinfo(&has_bits);
          include_appinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_played_free_games = 3 [(.description) = "Free games are excluded by default.  If this is set, free games the user has played will be returned."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_include_played_free_games(&has_bits);
          include_played_free_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 appids_filter = 4 [(.description) = "if set, restricts result set to the passed in apps"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids_filter(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids_filter(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_free_sub = 5 [(.description) = "Some games are in the free sub, which are excluded by default."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_include_free_sub(&has_bits);
          include_free_sub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool skip_unvetted_apps = 6 [default = true, (.description) = "if set, skip unvetted store apps"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_skip_unvetted_apps(&has_bits);
          skip_unvetted_apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 7 [(.description) = "Will return appinfo in this language"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetOwnedGames_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_extended_appinfo = 8 [(.description) = "true if we want even more details (capsule, sortas, and capabilities) about each game.  include_appinfo must also be true."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_include_extended_appinfo(&has_bits);
          include_extended_appinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetOwnedGames_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetOwnedGames_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool include_appinfo = 2 [(.description) = "true if we want additional details (name, icon) about each game"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_appinfo(), target);
  }

  // optional bool include_played_free_games = 3 [(.description) = "Free games are excluded by default.  If this is set, free games the user has played will be returned."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_played_free_games(), target);
  }

  // repeated uint32 appids_filter = 4 [(.description) = "if set, restricts result set to the passed in apps"];
  for (int i = 0, n = this->_internal_appids_filter_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_appids_filter(i), target);
  }

  // optional bool include_free_sub = 5 [(.description) = "Some games are in the free sub, which are excluded by default."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_include_free_sub(), target);
  }

  // optional bool skip_unvetted_apps = 6 [default = true, (.description) = "if set, skip unvetted store apps"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_skip_unvetted_apps(), target);
  }

  // optional string language = 7 [(.description) = "Will return appinfo in this language"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetOwnedGames_Request.language");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language(), target);
  }

  // optional bool include_extended_appinfo = 8 [(.description) = "true if we want even more details (capsule, sortas, and capabilities) about each game.  include_appinfo must also be true."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_include_extended_appinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetOwnedGames_Request)
  return target;
}

size_t CPlayer_GetOwnedGames_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetOwnedGames_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids_filter = 4 [(.description) = "if set, restricts result set to the passed in apps"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_filter_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_filter_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language = 7 [(.description) = "Will return appinfo in this language"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional bool include_appinfo = 2 [(.description) = "true if we want additional details (name, icon) about each game"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool include_played_free_games = 3 [(.description) = "Free games are excluded by default.  If this is set, free games the user has played will be returned."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool include_free_sub = 5 [(.description) = "Some games are in the free sub, which are excluded by default."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool include_extended_appinfo = 8 [(.description) = "true if we want even more details (capsule, sortas, and capabilities) about each game.  include_appinfo must also be true."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool skip_unvetted_apps = 6 [default = true, (.description) = "if set, skip unvetted store apps"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetOwnedGames_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetOwnedGames_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetOwnedGames_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetOwnedGames_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetOwnedGames_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetOwnedGames_Request &>(from));
}


void CPlayer_GetOwnedGames_Request::MergeFrom(const CPlayer_GetOwnedGames_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetOwnedGames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  appids_filter_.MergeFrom(from.appids_filter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_appinfo_ = from.include_appinfo_;
    }
    if (cached_has_bits & 0x00000008u) {
      include_played_free_games_ = from.include_played_free_games_;
    }
    if (cached_has_bits & 0x00000010u) {
      include_free_sub_ = from.include_free_sub_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_extended_appinfo_ = from.include_extended_appinfo_;
    }
    if (cached_has_bits & 0x00000040u) {
      skip_unvetted_apps_ = from.skip_unvetted_apps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetOwnedGames_Request::CopyFrom(const CPlayer_GetOwnedGames_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetOwnedGames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetOwnedGames_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetOwnedGames_Request::InternalSwap(CPlayer_GetOwnedGames_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_filter_.InternalSwap(&other->appids_filter_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetOwnedGames_Request, include_extended_appinfo_)
      + sizeof(CPlayer_GetOwnedGames_Request::include_extended_appinfo_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetOwnedGames_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
  swap(skip_unvetted_apps_, other->skip_unvetted_apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetOwnedGames_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[3]);
}

// ===================================================================

class CPlayer_GetOwnedGames_Response_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetOwnedGames_Response_Game>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playtime_2weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playtime_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_img_icon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_community_visible_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_playtime_windows_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_playtime_mac_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_playtime_linux_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rtime_last_played(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_capsule_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sort_as(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_workshop(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_has_dlc(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_has_leaderboards(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_playtime_disconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CPlayer_GetOwnedGames_Response_Game::CPlayer_GetOwnedGames_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  content_descriptorids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetOwnedGames_Response.Game)
}
CPlayer_GetOwnedGames_Response_Game::CPlayer_GetOwnedGames_Response_Game(const CPlayer_GetOwnedGames_Response_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      content_descriptorids_(from.content_descriptorids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  img_icon_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    img_icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_img_icon_url()) {
    img_icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_img_icon_url(), 
      GetArenaForAllocation());
  }
  capsule_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_capsule_filename()) {
    capsule_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_capsule_filename(), 
      GetArenaForAllocation());
  }
  sort_as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sort_as()) {
    sort_as_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sort_as(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playtime_disconnected_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(playtime_disconnected_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetOwnedGames_Response.Game)
}

inline void CPlayer_GetOwnedGames_Response_Game::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
img_icon_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  img_icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
capsule_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  capsule_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sort_as_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sort_as_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playtime_disconnected_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(playtime_disconnected_));
}

CPlayer_GetOwnedGames_Response_Game::~CPlayer_GetOwnedGames_Response_Game() {
  // @@protoc_insertion_point(destructor:CPlayer_GetOwnedGames_Response.Game)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetOwnedGames_Response_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  img_icon_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  capsule_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_as_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetOwnedGames_Response_Game::ArenaDtor(void* object) {
  CPlayer_GetOwnedGames_Response_Game* _this = reinterpret_cast< CPlayer_GetOwnedGames_Response_Game* >(object);
  (void)_this;
}
void CPlayer_GetOwnedGames_Response_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetOwnedGames_Response_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetOwnedGames_Response_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetOwnedGames_Response.Game)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_descriptorids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      img_icon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      capsule_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      sort_as_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playtime_windows_forever_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(playtime_windows_forever_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&playtime_mac_forever_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_leaderboards_) -
        reinterpret_cast<char*>(&playtime_mac_forever_)) + sizeof(has_leaderboards_));
  }
  playtime_disconnected_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetOwnedGames_Response_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetOwnedGames_Response.Game.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_2weeks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_playtime_2weeks(&has_bits);
          playtime_2weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_forever = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playtime_forever(&has_bits);
          playtime_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string img_icon_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_img_icon_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetOwnedGames_Response.Game.img_icon_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_community_visible_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_has_community_visible_stats(&has_bits);
          has_community_visible_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_windows_forever = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_playtime_windows_forever(&has_bits);
          playtime_windows_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_mac_forever = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_playtime_mac_forever(&has_bits);
          playtime_mac_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_linux_forever = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_playtime_linux_forever(&has_bits);
          playtime_linux_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime_last_played = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_rtime_last_played(&has_bits);
          rtime_last_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string capsule_filename = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_capsule_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetOwnedGames_Response.Game.capsule_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sort_as = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_sort_as();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetOwnedGames_Response.Game.sort_as");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_workshop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_has_workshop(&has_bits);
          has_workshop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_market = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_has_market(&has_bits);
          has_market_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_dlc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_has_dlc(&has_bits);
          has_dlc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_leaderboards = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_has_leaderboards(&has_bits);
          has_leaderboards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 content_descriptorids = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_content_descriptorids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_content_descriptorids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_disconnected = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_playtime_disconnected(&has_bits);
          playtime_disconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetOwnedGames_Response_Game::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetOwnedGames_Response.Game)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetOwnedGames_Response.Game.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playtime_2weeks(), target);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_playtime_forever(), target);
  }

  // optional string img_icon_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_img_icon_url().data(), static_cast<int>(this->_internal_img_icon_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetOwnedGames_Response.Game.img_icon_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_img_icon_url(), target);
  }

  // optional bool has_community_visible_stats = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_community_visible_stats(), target);
  }

  // optional int32 playtime_windows_forever = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_playtime_windows_forever(), target);
  }

  // optional int32 playtime_mac_forever = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_playtime_mac_forever(), target);
  }

  // optional int32 playtime_linux_forever = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_playtime_linux_forever(), target);
  }

  // optional uint32 rtime_last_played = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_rtime_last_played(), target);
  }

  // optional string capsule_filename = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_capsule_filename().data(), static_cast<int>(this->_internal_capsule_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetOwnedGames_Response.Game.capsule_filename");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_capsule_filename(), target);
  }

  // optional string sort_as = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sort_as().data(), static_cast<int>(this->_internal_sort_as().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetOwnedGames_Response.Game.sort_as");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sort_as(), target);
  }

  // optional bool has_workshop = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_has_workshop(), target);
  }

  // optional bool has_market = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_has_market(), target);
  }

  // optional bool has_dlc = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_has_dlc(), target);
  }

  // optional bool has_leaderboards = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_has_leaderboards(), target);
  }

  // repeated uint32 content_descriptorids = 18;
  for (int i = 0, n = this->_internal_content_descriptorids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_content_descriptorids(i), target);
  }

  // optional int32 playtime_disconnected = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_playtime_disconnected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetOwnedGames_Response.Game)
  return target;
}

size_t CPlayer_GetOwnedGames_Response_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetOwnedGames_Response.Game)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 content_descriptorids = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->content_descriptorids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_content_descriptorids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string img_icon_url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_img_icon_url());
    }

    // optional string capsule_filename = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_capsule_filename());
    }

    // optional string sort_as = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sort_as());
    }

    // optional int32 appid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

    // optional int32 playtime_2weeks = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_2weeks());
    }

    // optional int32 playtime_forever = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_forever());
    }

    // optional int32 playtime_windows_forever = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_windows_forever());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 playtime_mac_forever = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_mac_forever());
    }

    // optional int32 playtime_linux_forever = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_linux_forever());
    }

    // optional uint32 rtime_last_played = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime_last_played());
    }

    // optional bool has_community_visible_stats = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool has_workshop = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool has_market = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool has_dlc = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool has_leaderboards = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional int32 playtime_disconnected = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playtime_disconnected());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetOwnedGames_Response_Game::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetOwnedGames_Response_Game::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetOwnedGames_Response_Game::GetClassData() const { return &_class_data_; }

void CPlayer_GetOwnedGames_Response_Game::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetOwnedGames_Response_Game *>(to)->MergeFrom(
      static_cast<const CPlayer_GetOwnedGames_Response_Game &>(from));
}


void CPlayer_GetOwnedGames_Response_Game::MergeFrom(const CPlayer_GetOwnedGames_Response_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetOwnedGames_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  content_descriptorids_.MergeFrom(from.content_descriptorids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_img_icon_url(from._internal_img_icon_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_capsule_filename(from._internal_capsule_filename());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_sort_as(from._internal_sort_as());
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      playtime_2weeks_ = from.playtime_2weeks_;
    }
    if (cached_has_bits & 0x00000040u) {
      playtime_forever_ = from.playtime_forever_;
    }
    if (cached_has_bits & 0x00000080u) {
      playtime_windows_forever_ = from.playtime_windows_forever_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      playtime_mac_forever_ = from.playtime_mac_forever_;
    }
    if (cached_has_bits & 0x00000200u) {
      playtime_linux_forever_ = from.playtime_linux_forever_;
    }
    if (cached_has_bits & 0x00000400u) {
      rtime_last_played_ = from.rtime_last_played_;
    }
    if (cached_has_bits & 0x00000800u) {
      has_community_visible_stats_ = from.has_community_visible_stats_;
    }
    if (cached_has_bits & 0x00001000u) {
      has_workshop_ = from.has_workshop_;
    }
    if (cached_has_bits & 0x00002000u) {
      has_market_ = from.has_market_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_dlc_ = from.has_dlc_;
    }
    if (cached_has_bits & 0x00008000u) {
      has_leaderboards_ = from.has_leaderboards_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_playtime_disconnected(from._internal_playtime_disconnected());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetOwnedGames_Response_Game::CopyFrom(const CPlayer_GetOwnedGames_Response_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetOwnedGames_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetOwnedGames_Response_Game::IsInitialized() const {
  return true;
}

void CPlayer_GetOwnedGames_Response_Game::InternalSwap(CPlayer_GetOwnedGames_Response_Game* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_descriptorids_.InternalSwap(&other->content_descriptorids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &img_icon_url_, lhs_arena,
      &other->img_icon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &capsule_filename_, lhs_arena,
      &other->capsule_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sort_as_, lhs_arena,
      &other->sort_as_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetOwnedGames_Response_Game, playtime_disconnected_)
      + sizeof(CPlayer_GetOwnedGames_Response_Game::playtime_disconnected_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetOwnedGames_Response_Game, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetOwnedGames_Response_Game::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[4]);
}

// ===================================================================

class CPlayer_GetOwnedGames_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetOwnedGames_Response>()._has_bits_);
  static void set_has_game_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetOwnedGames_Response::CPlayer_GetOwnedGames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  games_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetOwnedGames_Response)
}
CPlayer_GetOwnedGames_Response::CPlayer_GetOwnedGames_Response(const CPlayer_GetOwnedGames_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_count_ = from.game_count_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetOwnedGames_Response)
}

inline void CPlayer_GetOwnedGames_Response::SharedCtor() {
game_count_ = 0u;
}

CPlayer_GetOwnedGames_Response::~CPlayer_GetOwnedGames_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetOwnedGames_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetOwnedGames_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetOwnedGames_Response::ArenaDtor(void* object) {
  CPlayer_GetOwnedGames_Response* _this = reinterpret_cast< CPlayer_GetOwnedGames_Response* >(object);
  (void)_this;
}
void CPlayer_GetOwnedGames_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetOwnedGames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetOwnedGames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetOwnedGames_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  game_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetOwnedGames_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_count(&has_bits);
          game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetOwnedGames_Response.Game games = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetOwnedGames_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetOwnedGames_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_count(), target);
  }

  // repeated .CPlayer_GetOwnedGames_Response.Game games = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetOwnedGames_Response)
  return target;
}

size_t CPlayer_GetOwnedGames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetOwnedGames_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetOwnedGames_Response.Game games = 2;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 game_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetOwnedGames_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetOwnedGames_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetOwnedGames_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetOwnedGames_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetOwnedGames_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetOwnedGames_Response &>(from));
}


void CPlayer_GetOwnedGames_Response::MergeFrom(const CPlayer_GetOwnedGames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetOwnedGames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
  if (from._internal_has_game_count()) {
    _internal_set_game_count(from._internal_game_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetOwnedGames_Response::CopyFrom(const CPlayer_GetOwnedGames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetOwnedGames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetOwnedGames_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetOwnedGames_Response::InternalSwap(CPlayer_GetOwnedGames_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  games_.InternalSwap(&other->games_);
  swap(game_count_, other->game_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetOwnedGames_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[5]);
}

// ===================================================================

class CPlayer_GetPlayNext_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPlayNext_Request>()._has_bits_);
  static void set_has_max_age_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetPlayNext_Request::CPlayer_GetPlayNext_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ignore_appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPlayNext_Request)
}
CPlayer_GetPlayNext_Request::CPlayer_GetPlayNext_Request(const CPlayer_GetPlayNext_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ignore_appids_(from.ignore_appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_age_seconds_ = from.max_age_seconds_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPlayNext_Request)
}

inline void CPlayer_GetPlayNext_Request::SharedCtor() {
max_age_seconds_ = 0u;
}

CPlayer_GetPlayNext_Request::~CPlayer_GetPlayNext_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPlayNext_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPlayNext_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPlayNext_Request::ArenaDtor(void* object) {
  CPlayer_GetPlayNext_Request* _this = reinterpret_cast< CPlayer_GetPlayNext_Request* >(object);
  (void)_this;
}
void CPlayer_GetPlayNext_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPlayNext_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPlayNext_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPlayNext_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignore_appids_.Clear();
  max_age_seconds_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPlayNext_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_age_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_age_seconds(&has_bits);
          max_age_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ignore_appids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ignore_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ignore_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPlayNext_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPlayNext_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_age_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_age_seconds(), target);
  }

  // repeated uint32 ignore_appids = 2;
  for (int i = 0, n = this->_internal_ignore_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ignore_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPlayNext_Request)
  return target;
}

size_t CPlayer_GetPlayNext_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPlayNext_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ignore_appids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ignore_appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ignore_appids_size());
    total_size += data_size;
  }

  // optional uint32 max_age_seconds = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_age_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPlayNext_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPlayNext_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPlayNext_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetPlayNext_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPlayNext_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPlayNext_Request &>(from));
}


void CPlayer_GetPlayNext_Request::MergeFrom(const CPlayer_GetPlayNext_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPlayNext_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ignore_appids_.MergeFrom(from.ignore_appids_);
  if (from._internal_has_max_age_seconds()) {
    _internal_set_max_age_seconds(from._internal_max_age_seconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPlayNext_Request::CopyFrom(const CPlayer_GetPlayNext_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPlayNext_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPlayNext_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetPlayNext_Request::InternalSwap(CPlayer_GetPlayNext_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ignore_appids_.InternalSwap(&other->ignore_appids_);
  swap(max_age_seconds_, other->max_age_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPlayNext_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[6]);
}

// ===================================================================

class CPlayer_GetPlayNext_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPlayNext_Response>()._has_bits_);
  static void set_has_last_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetPlayNext_Response::CPlayer_GetPlayNext_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPlayNext_Response)
}
CPlayer_GetPlayNext_Response::CPlayer_GetPlayNext_Response(const CPlayer_GetPlayNext_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_update_time_ = from.last_update_time_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPlayNext_Response)
}

inline void CPlayer_GetPlayNext_Response::SharedCtor() {
last_update_time_ = 0u;
}

CPlayer_GetPlayNext_Response::~CPlayer_GetPlayNext_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPlayNext_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPlayNext_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPlayNext_Response::ArenaDtor(void* object) {
  CPlayer_GetPlayNext_Response* _this = reinterpret_cast< CPlayer_GetPlayNext_Response* >(object);
  (void)_this;
}
void CPlayer_GetPlayNext_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPlayNext_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPlayNext_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPlayNext_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  last_update_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPlayNext_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 last_update_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_update_time(&has_bits);
          last_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 appids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPlayNext_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPlayNext_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_update_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_update_time(), target);
  }

  // repeated uint32 appids = 2;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPlayNext_Response)
  return target;
}

size_t CPlayer_GetPlayNext_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPlayNext_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  // optional uint32 last_update_time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_update_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPlayNext_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPlayNext_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPlayNext_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetPlayNext_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPlayNext_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPlayNext_Response &>(from));
}


void CPlayer_GetPlayNext_Response::MergeFrom(const CPlayer_GetPlayNext_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPlayNext_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  if (from._internal_has_last_update_time()) {
    _internal_set_last_update_time(from._internal_last_update_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPlayNext_Response::CopyFrom(const CPlayer_GetPlayNext_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPlayNext_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPlayNext_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPlayNext_Response::InternalSwap(CPlayer_GetPlayNext_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  swap(last_update_time_, other->last_update_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPlayNext_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[7]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Request)
}
CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(const CPlayer_GetFriendsGameplayInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Request)
}

inline void CPlayer_GetFriendsGameplayInfo_Request::SharedCtor() {
appid_ = 0u;
}

CPlayer_GetFriendsGameplayInfo_Request::~CPlayer_GetFriendsGameplayInfo_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetFriendsGameplayInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Request::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Request* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Request* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Request)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetFriendsGameplayInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetFriendsGameplayInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetFriendsGameplayInfo_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetFriendsGameplayInfo_Request &>(from));
}


void CPlayer_GetFriendsGameplayInfo_Request::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Request::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Request::InternalSwap(CPlayer_GetFriendsGameplayInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[8]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes_played_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
}
CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_played_forever_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(minutes_played_forever_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
}

inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minutes_played_forever_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(minutes_played_forever_));
}

CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::~CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minutes_played_forever_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(minutes_played_forever_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minutes_played(&has_bits);
          minutes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played_forever = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minutes_played_forever(&has_bits);
          minutes_played_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 minutes_played = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_played(), target);
  }

  // optional uint32 minutes_played_forever = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minutes_played_forever(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 minutes_played = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played());
    }

    // optional uint32 minutes_played_forever = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played_forever());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::GetClassData() const { return &_class_data_; }

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo *>(to)->MergeFrom(
      static_cast<const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo &>(from));
}


void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_played_ = from.minutes_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      minutes_played_forever_ = from.minutes_played_forever_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, minutes_played_forever_)
      + sizeof(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::minutes_played_forever_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[9]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes_played_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_wishlist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
}
CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(owned_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
}

inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(owned_));
}

CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::~CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owned_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(owned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minutes_played(&has_bits);
          minutes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minutes_played_forever = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_minutes_played_forever(&has_bits);
          minutes_played_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_wishlist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_in_wishlist(&has_bits);
          in_wishlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool owned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_owned(&has_bits);
          owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 minutes_played = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_played(), target);
  }

  // optional uint32 minutes_played_forever = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minutes_played_forever(), target);
  }

  // optional bool in_wishlist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_in_wishlist(), target);
  }

  // optional bool owned = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_owned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 minutes_played = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played());
    }

    // optional uint32 minutes_played_forever = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minutes_played_forever());
    }

    // optional bool in_wishlist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool owned = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::GetClassData() const { return &_class_data_; }

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo *>(to)->MergeFrom(
      static_cast<const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo &>(from));
}


void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_played_ = from.minutes_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      minutes_played_forever_ = from.minutes_played_forever_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_wishlist_ = from.in_wishlist_;
    }
    if (cached_has_bits & 0x00000010u) {
      owned_ = from.owned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, owned_)
      + sizeof(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::owned_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[10]);
}

// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response>()._has_bits_);
  static const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& your_info(const CPlayer_GetFriendsGameplayInfo_Response* msg);
  static void set_has_your_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo&
CPlayer_GetFriendsGameplayInfo_Response::_Internal::your_info(const CPlayer_GetFriendsGameplayInfo_Response* msg) {
  return *msg->your_info_;
}
CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  in_game_(arena),
  played_recently_(arena),
  played_ever_(arena),
  owns_(arena),
  in_wishlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response)
}
CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(const CPlayer_GetFriendsGameplayInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      in_game_(from.in_game_),
      played_recently_(from.played_recently_),
      played_ever_(from.played_ever_),
      owns_(from.owns_),
      in_wishlist_(from.in_wishlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_your_info()) {
    your_info_ = new ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(*from.your_info_);
  } else {
    your_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response)
}

inline void CPlayer_GetFriendsGameplayInfo_Response::SharedCtor() {
your_info_ = nullptr;
}

CPlayer_GetFriendsGameplayInfo_Response::~CPlayer_GetFriendsGameplayInfo_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetFriendsGameplayInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete your_info_;
}

void CPlayer_GetFriendsGameplayInfo_Response::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Response* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Response* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_game_.Clear();
  played_recently_.Clear();
  played_ever_.Clear();
  owns_.Clear();
  in_wishlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(your_info_ != nullptr);
    your_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_your_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_game(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_recently(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_ever(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_wishlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFriendsGameplayInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::your_info(this), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_in_game_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_in_game(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_played_recently_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_played_recently(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_played_ever_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_played_ever(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_owns(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_in_wishlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_in_wishlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
  total_size += 1UL * this->_internal_in_game_size();
  for (const auto& msg : this->in_game_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
  total_size += 1UL * this->_internal_played_recently_size();
  for (const auto& msg : this->played_recently_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
  total_size += 1UL * this->_internal_played_ever_size();
  for (const auto& msg : this->played_ever_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
  total_size += 1UL * this->_internal_owns_size();
  for (const auto& msg : this->owns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
  total_size += 1UL * this->_internal_in_wishlist_size();
  for (const auto& msg : this->in_wishlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *your_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFriendsGameplayInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetFriendsGameplayInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFriendsGameplayInfo_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetFriendsGameplayInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetFriendsGameplayInfo_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetFriendsGameplayInfo_Response &>(from));
}


void CPlayer_GetFriendsGameplayInfo_Response::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  in_game_.MergeFrom(from.in_game_);
  played_recently_.MergeFrom(from.played_recently_);
  played_ever_.MergeFrom(from.played_ever_);
  owns_.MergeFrom(from.owns_);
  in_wishlist_.MergeFrom(from.in_wishlist_);
  if (from._internal_has_your_info()) {
    _internal_mutable_your_info()->::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeFrom(from._internal_your_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFriendsGameplayInfo_Response::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  in_game_.InternalSwap(&other->in_game_);
  played_recently_.InternalSwap(&other->played_recently_);
  played_ever_.InternalSwap(&other->played_ever_);
  owns_.InternalSwap(&other->owns_);
  in_wishlist_.InternalSwap(&other->in_wishlist_);
  swap(your_info_, other->your_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[11]);
}

// ===================================================================

class CPlayer_GetGameBadgeLevels_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Request)
}
CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Request)
}

inline void CPlayer_GetGameBadgeLevels_Request::SharedCtor() {
appid_ = 0u;
}

CPlayer_GetGameBadgeLevels_Request::~CPlayer_GetGameBadgeLevels_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetGameBadgeLevels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Request::ArenaDtor(void* object) {
  CPlayer_GetGameBadgeLevels_Request* _this = reinterpret_cast< CPlayer_GetGameBadgeLevels_Request* >(object);
  (void)_this;
}
void CPlayer_GetGameBadgeLevels_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameBadgeLevels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameBadgeLevels_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Request)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameBadgeLevels_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetGameBadgeLevels_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameBadgeLevels_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetGameBadgeLevels_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetGameBadgeLevels_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetGameBadgeLevels_Request &>(from));
}


void CPlayer_GetGameBadgeLevels_Request::MergeFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Request::InternalSwap(CPlayer_GetGameBadgeLevels_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[12]);
}

// ===================================================================

class CPlayer_GetGameBadgeLevels_Response_Badge::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Response_Badge>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_series(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Response.Badge)
}
CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Response.Badge)
}

inline void CPlayer_GetGameBadgeLevels_Response_Badge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
}

CPlayer_GetGameBadgeLevels_Response_Badge::~CPlayer_GetGameBadgeLevels_Response_Badge() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Response.Badge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetGameBadgeLevels_Response_Badge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::ArenaDtor(void* object) {
  CPlayer_GetGameBadgeLevels_Response_Badge* _this = reinterpret_cast< CPlayer_GetGameBadgeLevels_Response_Badge* >(object);
  (void)_this;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameBadgeLevels_Response_Badge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&border_color_) -
        reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Response_Badge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 series = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_series(&has_bits);
          series_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 border_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_border_color(&has_bits);
          border_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameBadgeLevels_Response_Badge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // optional int32 series = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_series(), target);
  }

  // optional uint32 border_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_border_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Response.Badge)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response_Badge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional int32 series = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_series());
    }

    // optional uint32 border_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_border_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameBadgeLevels_Response_Badge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetGameBadgeLevels_Response_Badge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameBadgeLevels_Response_Badge::GetClassData() const { return &_class_data_; }

void CPlayer_GetGameBadgeLevels_Response_Badge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetGameBadgeLevels_Response_Badge *>(to)->MergeFrom(
      static_cast<const CPlayer_GetGameBadgeLevels_Response_Badge &>(from));
}


void CPlayer_GetGameBadgeLevels_Response_Badge::MergeFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_ = from.series_;
    }
    if (cached_has_bits & 0x00000004u) {
      border_color_ = from.border_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response_Badge::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, border_color_)
      + sizeof(CPlayer_GetGameBadgeLevels_Response_Badge::border_color_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Response_Badge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[13]);
}

// ===================================================================

class CPlayer_GetGameBadgeLevels_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Response>()._has_bits_);
  static void set_has_player_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  badges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Response)
}
CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      badges_(from.badges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_level_ = from.player_level_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Response)
}

inline void CPlayer_GetGameBadgeLevels_Response::SharedCtor() {
player_level_ = 0u;
}

CPlayer_GetGameBadgeLevels_Response::~CPlayer_GetGameBadgeLevels_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetGameBadgeLevels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Response::ArenaDtor(void* object) {
  CPlayer_GetGameBadgeLevels_Response* _this = reinterpret_cast< CPlayer_GetGameBadgeLevels_Response* >(object);
  (void)_this;
}
void CPlayer_GetGameBadgeLevels_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameBadgeLevels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  badges_.Clear();
  player_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_level(&has_bits);
          player_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_badges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameBadgeLevels_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_level(), target);
  }

  // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_badges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_badges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Response)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  total_size += 1UL * this->_internal_badges_size();
  for (const auto& msg : this->badges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 player_level = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_player_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameBadgeLevels_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetGameBadgeLevels_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameBadgeLevels_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetGameBadgeLevels_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetGameBadgeLevels_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetGameBadgeLevels_Response &>(from));
}


void CPlayer_GetGameBadgeLevels_Response::MergeFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  badges_.MergeFrom(from.badges_);
  if (from._internal_has_player_level()) {
    _internal_set_player_level(from._internal_player_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response::InternalSwap(CPlayer_GetGameBadgeLevels_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  badges_.InternalSwap(&other->badges_);
  swap(player_level_, other->player_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[14]);
}

// ===================================================================

class CPlayer_GetProfileBackground_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileBackground_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetProfileBackground_Request::CPlayer_GetProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileBackground_Request)
}
CPlayer_GetProfileBackground_Request::CPlayer_GetProfileBackground_Request(const CPlayer_GetProfileBackground_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileBackground_Request)
}

inline void CPlayer_GetProfileBackground_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CPlayer_GetProfileBackground_Request::~CPlayer_GetProfileBackground_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileBackground_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileBackground_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetProfileBackground_Request::ArenaDtor(void* object) {
  CPlayer_GetProfileBackground_Request* _this = reinterpret_cast< CPlayer_GetProfileBackground_Request* >(object);
  (void)_this;
}
void CPlayer_GetProfileBackground_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileBackground_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileBackground_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileBackground_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetProfileBackground_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileBackground_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetProfileBackground_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileBackground_Request)
  return target;
}

size_t CPlayer_GetProfileBackground_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileBackground_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileBackground_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileBackground_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileBackground_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileBackground_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileBackground_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileBackground_Request &>(from));
}


void CPlayer_GetProfileBackground_Request::MergeFrom(const CPlayer_GetProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileBackground_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileBackground_Request::CopyFrom(const CPlayer_GetProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileBackground_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileBackground_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileBackground_Request::InternalSwap(CPlayer_GetProfileBackground_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileBackground_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[15]);
}

// ===================================================================

class ProfileItem_ProfileColor::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileItem_ProfileColor>()._has_bits_);
  static void set_has_style_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfileItem_ProfileColor::ProfileItem_ProfileColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProfileItem.ProfileColor)
}
ProfileItem_ProfileColor::ProfileItem_ProfileColor(const ProfileItem_ProfileColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  style_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    style_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_style_name()) {
    style_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_style_name(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_color()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ProfileItem.ProfileColor)
}

inline void ProfileItem_ProfileColor::SharedCtor() {
style_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  style_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfileItem_ProfileColor::~ProfileItem_ProfileColor() {
  // @@protoc_insertion_point(destructor:ProfileItem.ProfileColor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileItem_ProfileColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  style_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileItem_ProfileColor::ArenaDtor(void* object) {
  ProfileItem_ProfileColor* _this = reinterpret_cast< ProfileItem_ProfileColor* >(object);
  (void)_this;
}
void ProfileItem_ProfileColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileItem_ProfileColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileItem_ProfileColor::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileItem.ProfileColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      style_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      color_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileItem_ProfileColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string style_name = 1 [(.description) = "EProfileColorStyle string version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_style_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.ProfileColor.style_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string color = 2 [(.description) = "hex color to apply"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.ProfileColor.color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileItem_ProfileColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileItem.ProfileColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string style_name = 1 [(.description) = "EProfileColorStyle string version"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_style_name().data(), static_cast<int>(this->_internal_style_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.ProfileColor.style_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_style_name(), target);
  }

  // optional string color = 2 [(.description) = "hex color to apply"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.ProfileColor.color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileItem.ProfileColor)
  return target;
}

size_t ProfileItem_ProfileColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileItem.ProfileColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string style_name = 1 [(.description) = "EProfileColorStyle string version"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_style_name());
    }

    // optional string color = 2 [(.description) = "hex color to apply"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileItem_ProfileColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileItem_ProfileColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileItem_ProfileColor::GetClassData() const { return &_class_data_; }

void ProfileItem_ProfileColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileItem_ProfileColor *>(to)->MergeFrom(
      static_cast<const ProfileItem_ProfileColor &>(from));
}


void ProfileItem_ProfileColor::MergeFrom(const ProfileItem_ProfileColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileItem.ProfileColor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_style_name(from._internal_style_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_color(from._internal_color());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileItem_ProfileColor::CopyFrom(const ProfileItem_ProfileColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileItem.ProfileColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileItem_ProfileColor::IsInitialized() const {
  return true;
}

void ProfileItem_ProfileColor::InternalSwap(ProfileItem_ProfileColor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &style_name_, lhs_arena,
      &other->style_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, lhs_arena,
      &other->color_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileItem_ProfileColor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[16]);
}

// ===================================================================

class ProfileItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileItem>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_image_small(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_large(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_title(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_item_class(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_movie_webm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_movie_mp4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_movie_webm_small(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_movie_mp4_small(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_equipped_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

ProfileItem::ProfileItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  profile_colors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProfileItem)
}
ProfileItem::ProfileItem(const ProfileItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      profile_colors_(from.profile_colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_small()) {
    image_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_small(), 
      GetArenaForAllocation());
  }
  image_large_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_large()) {
    image_large_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_large(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  item_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_title()) {
    item_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_title(), 
      GetArenaForAllocation());
  }
  item_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_description()) {
    item_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_description(), 
      GetArenaForAllocation());
  }
  movie_webm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    movie_webm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_movie_webm()) {
    movie_webm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movie_webm(), 
      GetArenaForAllocation());
  }
  movie_mp4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    movie_mp4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_movie_mp4()) {
    movie_mp4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movie_mp4(), 
      GetArenaForAllocation());
  }
  movie_webm_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    movie_webm_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_movie_webm_small()) {
    movie_webm_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movie_webm_small(), 
      GetArenaForAllocation());
  }
  movie_mp4_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    movie_mp4_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_movie_mp4_small()) {
    movie_mp4_small_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movie_mp4_small(), 
      GetArenaForAllocation());
  }
  ::memcpy(&communityitemid_, &from.communityitemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equipped_flags_) -
    reinterpret_cast<char*>(&communityitemid_)) + sizeof(equipped_flags_));
  // @@protoc_insertion_point(copy_constructor:ProfileItem)
}

inline void ProfileItem::SharedCtor() {
image_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_large_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
movie_webm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  movie_webm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
movie_mp4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  movie_mp4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
movie_webm_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  movie_webm_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
movie_mp4_small_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  movie_mp4_small_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&communityitemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&equipped_flags_) -
    reinterpret_cast<char*>(&communityitemid_)) + sizeof(equipped_flags_));
}

ProfileItem::~ProfileItem() {
  // @@protoc_insertion_point(destructor:ProfileItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_small_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_large_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  movie_webm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  movie_mp4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  movie_webm_small_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  movie_mp4_small_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileItem::ArenaDtor(void* object) {
  ProfileItem* _this = reinterpret_cast< ProfileItem* >(object);
  (void)_this;
}
void ProfileItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_colors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      image_small_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_large_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      item_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      item_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      movie_webm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      movie_mp4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      movie_webm_small_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    movie_mp4_small_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00003e00u) {
    ::memset(&communityitemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&equipped_flags_) -
        reinterpret_cast<char*>(&communityitemid_)) + sizeof(equipped_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_small = 2 [(.description) = "small image used in backpack or selection"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_small();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.image_small");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_large = 3 [(.description) = "the image itself"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_image_large();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.image_large");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 4 [(.description) = "english name"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_title = 5 [(.description) = "localized title"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_item_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.item_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_description = 6 [(.description) = "localized description"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_item_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.item_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_item_type(&has_bits);
          item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_class = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_item_class(&has_bits);
          item_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string movie_webm = 10 [(.description) = "URL to webm, if any"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_movie_webm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.movie_webm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string movie_mp4 = 11 [(.description) = "URL to mp4, if any"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_movie_mp4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.movie_mp4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 equipped_flags = 12 [(.description) = "Special flags set when equipped (EProfileItemEquippedFlag)"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_equipped_flags(&has_bits);
          equipped_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string movie_webm_small = 13 [(.description) = "URL to small webm, if any"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_movie_webm_small();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.movie_webm_small");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string movie_mp4_small = 14 [(.description) = "URL to small mp4, if any"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_movie_mp4_small();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileItem.movie_mp4_small");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileItem.ProfileColor profile_colors = 15 [(.description) = "Game profile css colors"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profile_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  // optional string image_small = 2 [(.description) = "small image used in backpack or selection"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_small().data(), static_cast<int>(this->_internal_image_small().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.image_small");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_small(), target);
  }

  // optional string image_large = 3 [(.description) = "the image itself"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_large().data(), static_cast<int>(this->_internal_image_large().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.image_large");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image_large(), target);
  }

  // optional string name = 4 [(.description) = "english name"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional string item_title = 5 [(.description) = "localized title"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_title().data(), static_cast<int>(this->_internal_item_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.item_title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_item_title(), target);
  }

  // optional string item_description = 6 [(.description) = "localized description"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_description().data(), static_cast<int>(this->_internal_item_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.item_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_item_description(), target);
  }

  // optional uint32 appid = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_appid(), target);
  }

  // optional uint32 item_type = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_item_type(), target);
  }

  // optional uint32 item_class = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_item_class(), target);
  }

  // optional string movie_webm = 10 [(.description) = "URL to webm, if any"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movie_webm().data(), static_cast<int>(this->_internal_movie_webm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.movie_webm");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_movie_webm(), target);
  }

  // optional string movie_mp4 = 11 [(.description) = "URL to mp4, if any"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movie_mp4().data(), static_cast<int>(this->_internal_movie_mp4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.movie_mp4");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_movie_mp4(), target);
  }

  // optional uint32 equipped_flags = 12 [(.description) = "Special flags set when equipped (EProfileItemEquippedFlag)"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_equipped_flags(), target);
  }

  // optional string movie_webm_small = 13 [(.description) = "URL to small webm, if any"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movie_webm_small().data(), static_cast<int>(this->_internal_movie_webm_small().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.movie_webm_small");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_movie_webm_small(), target);
  }

  // optional string movie_mp4_small = 14 [(.description) = "URL to small mp4, if any"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movie_mp4_small().data(), static_cast<int>(this->_internal_movie_mp4_small().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileItem.movie_mp4_small");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_movie_mp4_small(), target);
  }

  // repeated .ProfileItem.ProfileColor profile_colors = 15 [(.description) = "Game profile css colors"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profile_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_profile_colors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileItem)
  return target;
}

size_t ProfileItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfileItem.ProfileColor profile_colors = 15 [(.description) = "Game profile css colors"];
  total_size += 1UL * this->_internal_profile_colors_size();
  for (const auto& msg : this->profile_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string image_small = 2 [(.description) = "small image used in backpack or selection"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_small());
    }

    // optional string image_large = 3 [(.description) = "the image itself"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_large());
    }

    // optional string name = 4 [(.description) = "english name"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string item_title = 5 [(.description) = "localized title"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_title());
    }

    // optional string item_description = 6 [(.description) = "localized description"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_description());
    }

    // optional string movie_webm = 10 [(.description) = "URL to webm, if any"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie_webm());
    }

    // optional string movie_mp4 = 11 [(.description) = "URL to mp4, if any"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie_mp4());
    }

    // optional string movie_webm_small = 13 [(.description) = "URL to small webm, if any"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie_webm_small());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional string movie_mp4_small = 14 [(.description) = "URL to small mp4, if any"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie_mp4_small());
    }

    // optional uint64 communityitemid = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
    }

    // optional uint32 appid = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 item_type = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_type());
    }

    // optional uint32 item_class = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_class());
    }

    // optional uint32 equipped_flags = 12 [(.description) = "Special flags set when equipped (EProfileItemEquippedFlag)"];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_equipped_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileItem::GetClassData() const { return &_class_data_; }

void ProfileItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileItem *>(to)->MergeFrom(
      static_cast<const ProfileItem &>(from));
}


void ProfileItem::MergeFrom(const ProfileItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  profile_colors_.MergeFrom(from.profile_colors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_small(from._internal_image_small());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image_large(from._internal_image_large());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_item_title(from._internal_item_title());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_item_description(from._internal_item_description());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_movie_webm(from._internal_movie_webm());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_movie_mp4(from._internal_movie_mp4());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_movie_webm_small(from._internal_movie_webm_small());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_movie_mp4_small(from._internal_movie_mp4_small());
    }
    if (cached_has_bits & 0x00000200u) {
      communityitemid_ = from.communityitemid_;
    }
    if (cached_has_bits & 0x00000400u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000800u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      item_class_ = from.item_class_;
    }
    if (cached_has_bits & 0x00002000u) {
      equipped_flags_ = from.equipped_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileItem::CopyFrom(const ProfileItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileItem::IsInitialized() const {
  return true;
}

void ProfileItem::InternalSwap(ProfileItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  profile_colors_.InternalSwap(&other->profile_colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_small_, lhs_arena,
      &other->image_small_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_large_, lhs_arena,
      &other->image_large_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_title_, lhs_arena,
      &other->item_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_description_, lhs_arena,
      &other->item_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &movie_webm_, lhs_arena,
      &other->movie_webm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &movie_mp4_, lhs_arena,
      &other->movie_mp4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &movie_webm_small_, lhs_arena,
      &other->movie_webm_small_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &movie_mp4_small_, lhs_arena,
      &other->movie_mp4_small_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileItem, equipped_flags_)
      + sizeof(ProfileItem::equipped_flags_)
      - PROTOBUF_FIELD_OFFSET(ProfileItem, communityitemid_)>(
          reinterpret_cast<char*>(&communityitemid_),
          reinterpret_cast<char*>(&other->communityitemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[17]);
}

// ===================================================================

class CPlayer_GetProfileBackground_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileBackground_Response>()._has_bits_);
  static const ::ProfileItem& profile_background(const CPlayer_GetProfileBackground_Response* msg);
  static void set_has_profile_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProfileItem&
CPlayer_GetProfileBackground_Response::_Internal::profile_background(const CPlayer_GetProfileBackground_Response* msg) {
  return *msg->profile_background_;
}
CPlayer_GetProfileBackground_Response::CPlayer_GetProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileBackground_Response)
}
CPlayer_GetProfileBackground_Response::CPlayer_GetProfileBackground_Response(const CPlayer_GetProfileBackground_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profile_background()) {
    profile_background_ = new ::ProfileItem(*from.profile_background_);
  } else {
    profile_background_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileBackground_Response)
}

inline void CPlayer_GetProfileBackground_Response::SharedCtor() {
profile_background_ = nullptr;
}

CPlayer_GetProfileBackground_Response::~CPlayer_GetProfileBackground_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileBackground_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileBackground_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete profile_background_;
}

void CPlayer_GetProfileBackground_Response::ArenaDtor(void* object) {
  CPlayer_GetProfileBackground_Response* _this = reinterpret_cast< CPlayer_GetProfileBackground_Response* >(object);
  (void)_this;
}
void CPlayer_GetProfileBackground_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileBackground_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileBackground_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileBackground_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(profile_background_ != nullptr);
    profile_background_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileBackground_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProfileItem profile_background = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileBackground_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileBackground_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfileItem profile_background = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::profile_background(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileBackground_Response)
  return target;
}

size_t CPlayer_GetProfileBackground_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileBackground_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProfileItem profile_background = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profile_background_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileBackground_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileBackground_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileBackground_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileBackground_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileBackground_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileBackground_Response &>(from));
}


void CPlayer_GetProfileBackground_Response::MergeFrom(const CPlayer_GetProfileBackground_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileBackground_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_profile_background()) {
    _internal_mutable_profile_background()->::ProfileItem::MergeFrom(from._internal_profile_background());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileBackground_Response::CopyFrom(const CPlayer_GetProfileBackground_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileBackground_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileBackground_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileBackground_Response::InternalSwap(CPlayer_GetProfileBackground_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(profile_background_, other->profile_background_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileBackground_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[18]);
}

// ===================================================================

class CPlayer_SetProfileBackground_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetProfileBackground_Request>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_SetProfileBackground_Request::CPlayer_SetProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetProfileBackground_Request)
}
CPlayer_SetProfileBackground_Request::CPlayer_SetProfileBackground_Request(const CPlayer_SetProfileBackground_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  communityitemid_ = from.communityitemid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetProfileBackground_Request)
}

inline void CPlayer_SetProfileBackground_Request::SharedCtor() {
communityitemid_ = uint64_t{0u};
}

CPlayer_SetProfileBackground_Request::~CPlayer_SetProfileBackground_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetProfileBackground_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetProfileBackground_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_SetProfileBackground_Request::ArenaDtor(void* object) {
  CPlayer_SetProfileBackground_Request* _this = reinterpret_cast< CPlayer_SetProfileBackground_Request* >(object);
  (void)_this;
}
void CPlayer_SetProfileBackground_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetProfileBackground_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetProfileBackground_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communityitemid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetProfileBackground_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetProfileBackground_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetProfileBackground_Request)
  return target;
}

size_t CPlayer_SetProfileBackground_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetProfileBackground_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 communityitemid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetProfileBackground_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetProfileBackground_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetProfileBackground_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetProfileBackground_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetProfileBackground_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetProfileBackground_Request &>(from));
}


void CPlayer_SetProfileBackground_Request::MergeFrom(const CPlayer_SetProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetProfileBackground_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_communityitemid()) {
    _internal_set_communityitemid(from._internal_communityitemid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetProfileBackground_Request::CopyFrom(const CPlayer_SetProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetProfileBackground_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetProfileBackground_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetProfileBackground_Request::InternalSwap(CPlayer_SetProfileBackground_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(communityitemid_, other->communityitemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetProfileBackground_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[19]);
}

// ===================================================================

class CPlayer_SetProfileBackground_Response::_Internal {
 public:
};

CPlayer_SetProfileBackground_Response::CPlayer_SetProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetProfileBackground_Response)
}
CPlayer_SetProfileBackground_Response::CPlayer_SetProfileBackground_Response(const CPlayer_SetProfileBackground_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetProfileBackground_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetProfileBackground_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetProfileBackground_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetProfileBackground_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[20]);
}

// ===================================================================

class CPlayer_GetMiniProfileBackground_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetMiniProfileBackground_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetMiniProfileBackground_Request::CPlayer_GetMiniProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMiniProfileBackground_Request)
}
CPlayer_GetMiniProfileBackground_Request::CPlayer_GetMiniProfileBackground_Request(const CPlayer_GetMiniProfileBackground_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMiniProfileBackground_Request)
}

inline void CPlayer_GetMiniProfileBackground_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CPlayer_GetMiniProfileBackground_Request::~CPlayer_GetMiniProfileBackground_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetMiniProfileBackground_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetMiniProfileBackground_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetMiniProfileBackground_Request::ArenaDtor(void* object) {
  CPlayer_GetMiniProfileBackground_Request* _this = reinterpret_cast< CPlayer_GetMiniProfileBackground_Request* >(object);
  (void)_this;
}
void CPlayer_GetMiniProfileBackground_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetMiniProfileBackground_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetMiniProfileBackground_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetMiniProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetMiniProfileBackground_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetMiniProfileBackground_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetMiniProfileBackground_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetMiniProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetMiniProfileBackground_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetMiniProfileBackground_Request)
  return target;
}

size_t CPlayer_GetMiniProfileBackground_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetMiniProfileBackground_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetMiniProfileBackground_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetMiniProfileBackground_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetMiniProfileBackground_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetMiniProfileBackground_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetMiniProfileBackground_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetMiniProfileBackground_Request &>(from));
}


void CPlayer_GetMiniProfileBackground_Request::MergeFrom(const CPlayer_GetMiniProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetMiniProfileBackground_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetMiniProfileBackground_Request::CopyFrom(const CPlayer_GetMiniProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetMiniProfileBackground_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMiniProfileBackground_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetMiniProfileBackground_Request::InternalSwap(CPlayer_GetMiniProfileBackground_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMiniProfileBackground_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[21]);
}

// ===================================================================

class CPlayer_GetMiniProfileBackground_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetMiniProfileBackground_Response>()._has_bits_);
  static const ::ProfileItem& profile_background(const CPlayer_GetMiniProfileBackground_Response* msg);
  static void set_has_profile_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProfileItem&
CPlayer_GetMiniProfileBackground_Response::_Internal::profile_background(const CPlayer_GetMiniProfileBackground_Response* msg) {
  return *msg->profile_background_;
}
CPlayer_GetMiniProfileBackground_Response::CPlayer_GetMiniProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMiniProfileBackground_Response)
}
CPlayer_GetMiniProfileBackground_Response::CPlayer_GetMiniProfileBackground_Response(const CPlayer_GetMiniProfileBackground_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profile_background()) {
    profile_background_ = new ::ProfileItem(*from.profile_background_);
  } else {
    profile_background_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMiniProfileBackground_Response)
}

inline void CPlayer_GetMiniProfileBackground_Response::SharedCtor() {
profile_background_ = nullptr;
}

CPlayer_GetMiniProfileBackground_Response::~CPlayer_GetMiniProfileBackground_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetMiniProfileBackground_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetMiniProfileBackground_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete profile_background_;
}

void CPlayer_GetMiniProfileBackground_Response::ArenaDtor(void* object) {
  CPlayer_GetMiniProfileBackground_Response* _this = reinterpret_cast< CPlayer_GetMiniProfileBackground_Response* >(object);
  (void)_this;
}
void CPlayer_GetMiniProfileBackground_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetMiniProfileBackground_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetMiniProfileBackground_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetMiniProfileBackground_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(profile_background_ != nullptr);
    profile_background_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetMiniProfileBackground_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProfileItem profile_background = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetMiniProfileBackground_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetMiniProfileBackground_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfileItem profile_background = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::profile_background(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetMiniProfileBackground_Response)
  return target;
}

size_t CPlayer_GetMiniProfileBackground_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetMiniProfileBackground_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProfileItem profile_background = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profile_background_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetMiniProfileBackground_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetMiniProfileBackground_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetMiniProfileBackground_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetMiniProfileBackground_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetMiniProfileBackground_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetMiniProfileBackground_Response &>(from));
}


void CPlayer_GetMiniProfileBackground_Response::MergeFrom(const CPlayer_GetMiniProfileBackground_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetMiniProfileBackground_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_profile_background()) {
    _internal_mutable_profile_background()->::ProfileItem::MergeFrom(from._internal_profile_background());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetMiniProfileBackground_Response::CopyFrom(const CPlayer_GetMiniProfileBackground_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetMiniProfileBackground_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMiniProfileBackground_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetMiniProfileBackground_Response::InternalSwap(CPlayer_GetMiniProfileBackground_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(profile_background_, other->profile_background_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMiniProfileBackground_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[22]);
}

// ===================================================================

class CPlayer_SetMiniProfileBackground_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetMiniProfileBackground_Request>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_SetMiniProfileBackground_Request::CPlayer_SetMiniProfileBackground_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetMiniProfileBackground_Request)
}
CPlayer_SetMiniProfileBackground_Request::CPlayer_SetMiniProfileBackground_Request(const CPlayer_SetMiniProfileBackground_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  communityitemid_ = from.communityitemid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetMiniProfileBackground_Request)
}

inline void CPlayer_SetMiniProfileBackground_Request::SharedCtor() {
communityitemid_ = uint64_t{0u};
}

CPlayer_SetMiniProfileBackground_Request::~CPlayer_SetMiniProfileBackground_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetMiniProfileBackground_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetMiniProfileBackground_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_SetMiniProfileBackground_Request::ArenaDtor(void* object) {
  CPlayer_SetMiniProfileBackground_Request* _this = reinterpret_cast< CPlayer_SetMiniProfileBackground_Request* >(object);
  (void)_this;
}
void CPlayer_SetMiniProfileBackground_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetMiniProfileBackground_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetMiniProfileBackground_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetMiniProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communityitemid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetMiniProfileBackground_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetMiniProfileBackground_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetMiniProfileBackground_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetMiniProfileBackground_Request)
  return target;
}

size_t CPlayer_SetMiniProfileBackground_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetMiniProfileBackground_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 communityitemid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetMiniProfileBackground_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetMiniProfileBackground_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetMiniProfileBackground_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetMiniProfileBackground_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetMiniProfileBackground_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetMiniProfileBackground_Request &>(from));
}


void CPlayer_SetMiniProfileBackground_Request::MergeFrom(const CPlayer_SetMiniProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetMiniProfileBackground_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_communityitemid()) {
    _internal_set_communityitemid(from._internal_communityitemid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetMiniProfileBackground_Request::CopyFrom(const CPlayer_SetMiniProfileBackground_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetMiniProfileBackground_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetMiniProfileBackground_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetMiniProfileBackground_Request::InternalSwap(CPlayer_SetMiniProfileBackground_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(communityitemid_, other->communityitemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetMiniProfileBackground_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[23]);
}

// ===================================================================

class CPlayer_SetMiniProfileBackground_Response::_Internal {
 public:
};

CPlayer_SetMiniProfileBackground_Response::CPlayer_SetMiniProfileBackground_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetMiniProfileBackground_Response)
}
CPlayer_SetMiniProfileBackground_Response::CPlayer_SetMiniProfileBackground_Response(const CPlayer_SetMiniProfileBackground_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetMiniProfileBackground_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetMiniProfileBackground_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetMiniProfileBackground_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetMiniProfileBackground_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[24]);
}

// ===================================================================

class CPlayer_GetAvatarFrame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetAvatarFrame_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetAvatarFrame_Request::CPlayer_GetAvatarFrame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetAvatarFrame_Request)
}
CPlayer_GetAvatarFrame_Request::CPlayer_GetAvatarFrame_Request(const CPlayer_GetAvatarFrame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetAvatarFrame_Request)
}

inline void CPlayer_GetAvatarFrame_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CPlayer_GetAvatarFrame_Request::~CPlayer_GetAvatarFrame_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetAvatarFrame_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetAvatarFrame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetAvatarFrame_Request::ArenaDtor(void* object) {
  CPlayer_GetAvatarFrame_Request* _this = reinterpret_cast< CPlayer_GetAvatarFrame_Request* >(object);
  (void)_this;
}
void CPlayer_GetAvatarFrame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetAvatarFrame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetAvatarFrame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetAvatarFrame_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetAvatarFrame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetAvatarFrame_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetAvatarFrame_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetAvatarFrame_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetAvatarFrame_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetAvatarFrame_Request)
  return target;
}

size_t CPlayer_GetAvatarFrame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetAvatarFrame_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetAvatarFrame_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetAvatarFrame_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetAvatarFrame_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetAvatarFrame_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetAvatarFrame_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetAvatarFrame_Request &>(from));
}


void CPlayer_GetAvatarFrame_Request::MergeFrom(const CPlayer_GetAvatarFrame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetAvatarFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetAvatarFrame_Request::CopyFrom(const CPlayer_GetAvatarFrame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetAvatarFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetAvatarFrame_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetAvatarFrame_Request::InternalSwap(CPlayer_GetAvatarFrame_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetAvatarFrame_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[25]);
}

// ===================================================================

class CPlayer_GetAvatarFrame_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetAvatarFrame_Response>()._has_bits_);
  static const ::ProfileItem& avatar_frame(const CPlayer_GetAvatarFrame_Response* msg);
  static void set_has_avatar_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProfileItem&
CPlayer_GetAvatarFrame_Response::_Internal::avatar_frame(const CPlayer_GetAvatarFrame_Response* msg) {
  return *msg->avatar_frame_;
}
CPlayer_GetAvatarFrame_Response::CPlayer_GetAvatarFrame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetAvatarFrame_Response)
}
CPlayer_GetAvatarFrame_Response::CPlayer_GetAvatarFrame_Response(const CPlayer_GetAvatarFrame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_avatar_frame()) {
    avatar_frame_ = new ::ProfileItem(*from.avatar_frame_);
  } else {
    avatar_frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetAvatarFrame_Response)
}

inline void CPlayer_GetAvatarFrame_Response::SharedCtor() {
avatar_frame_ = nullptr;
}

CPlayer_GetAvatarFrame_Response::~CPlayer_GetAvatarFrame_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetAvatarFrame_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetAvatarFrame_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete avatar_frame_;
}

void CPlayer_GetAvatarFrame_Response::ArenaDtor(void* object) {
  CPlayer_GetAvatarFrame_Response* _this = reinterpret_cast< CPlayer_GetAvatarFrame_Response* >(object);
  (void)_this;
}
void CPlayer_GetAvatarFrame_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetAvatarFrame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetAvatarFrame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetAvatarFrame_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(avatar_frame_ != nullptr);
    avatar_frame_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetAvatarFrame_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProfileItem avatar_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetAvatarFrame_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetAvatarFrame_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfileItem avatar_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::avatar_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetAvatarFrame_Response)
  return target;
}

size_t CPlayer_GetAvatarFrame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetAvatarFrame_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProfileItem avatar_frame = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avatar_frame_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetAvatarFrame_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetAvatarFrame_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetAvatarFrame_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetAvatarFrame_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetAvatarFrame_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetAvatarFrame_Response &>(from));
}


void CPlayer_GetAvatarFrame_Response::MergeFrom(const CPlayer_GetAvatarFrame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetAvatarFrame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_avatar_frame()) {
    _internal_mutable_avatar_frame()->::ProfileItem::MergeFrom(from._internal_avatar_frame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetAvatarFrame_Response::CopyFrom(const CPlayer_GetAvatarFrame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetAvatarFrame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetAvatarFrame_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetAvatarFrame_Response::InternalSwap(CPlayer_GetAvatarFrame_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(avatar_frame_, other->avatar_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetAvatarFrame_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[26]);
}

// ===================================================================

class CPlayer_SetAvatarFrame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetAvatarFrame_Request>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_SetAvatarFrame_Request::CPlayer_SetAvatarFrame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetAvatarFrame_Request)
}
CPlayer_SetAvatarFrame_Request::CPlayer_SetAvatarFrame_Request(const CPlayer_SetAvatarFrame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  communityitemid_ = from.communityitemid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetAvatarFrame_Request)
}

inline void CPlayer_SetAvatarFrame_Request::SharedCtor() {
communityitemid_ = uint64_t{0u};
}

CPlayer_SetAvatarFrame_Request::~CPlayer_SetAvatarFrame_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetAvatarFrame_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetAvatarFrame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_SetAvatarFrame_Request::ArenaDtor(void* object) {
  CPlayer_SetAvatarFrame_Request* _this = reinterpret_cast< CPlayer_SetAvatarFrame_Request* >(object);
  (void)_this;
}
void CPlayer_SetAvatarFrame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetAvatarFrame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetAvatarFrame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetAvatarFrame_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communityitemid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetAvatarFrame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetAvatarFrame_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetAvatarFrame_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetAvatarFrame_Request)
  return target;
}

size_t CPlayer_SetAvatarFrame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetAvatarFrame_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 communityitemid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetAvatarFrame_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetAvatarFrame_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetAvatarFrame_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetAvatarFrame_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetAvatarFrame_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetAvatarFrame_Request &>(from));
}


void CPlayer_SetAvatarFrame_Request::MergeFrom(const CPlayer_SetAvatarFrame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetAvatarFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_communityitemid()) {
    _internal_set_communityitemid(from._internal_communityitemid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetAvatarFrame_Request::CopyFrom(const CPlayer_SetAvatarFrame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetAvatarFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetAvatarFrame_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetAvatarFrame_Request::InternalSwap(CPlayer_SetAvatarFrame_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(communityitemid_, other->communityitemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetAvatarFrame_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[27]);
}

// ===================================================================

class CPlayer_SetAvatarFrame_Response::_Internal {
 public:
};

CPlayer_SetAvatarFrame_Response::CPlayer_SetAvatarFrame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetAvatarFrame_Response)
}
CPlayer_SetAvatarFrame_Response::CPlayer_SetAvatarFrame_Response(const CPlayer_SetAvatarFrame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetAvatarFrame_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetAvatarFrame_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetAvatarFrame_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetAvatarFrame_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[28]);
}

// ===================================================================

class CPlayer_GetAnimatedAvatar_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetAnimatedAvatar_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetAnimatedAvatar_Request::CPlayer_GetAnimatedAvatar_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetAnimatedAvatar_Request)
}
CPlayer_GetAnimatedAvatar_Request::CPlayer_GetAnimatedAvatar_Request(const CPlayer_GetAnimatedAvatar_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetAnimatedAvatar_Request)
}

inline void CPlayer_GetAnimatedAvatar_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CPlayer_GetAnimatedAvatar_Request::~CPlayer_GetAnimatedAvatar_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetAnimatedAvatar_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetAnimatedAvatar_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetAnimatedAvatar_Request::ArenaDtor(void* object) {
  CPlayer_GetAnimatedAvatar_Request* _this = reinterpret_cast< CPlayer_GetAnimatedAvatar_Request* >(object);
  (void)_this;
}
void CPlayer_GetAnimatedAvatar_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetAnimatedAvatar_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetAnimatedAvatar_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetAnimatedAvatar_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetAnimatedAvatar_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetAnimatedAvatar_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetAnimatedAvatar_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetAnimatedAvatar_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetAnimatedAvatar_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetAnimatedAvatar_Request)
  return target;
}

size_t CPlayer_GetAnimatedAvatar_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetAnimatedAvatar_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetAnimatedAvatar_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetAnimatedAvatar_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetAnimatedAvatar_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetAnimatedAvatar_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetAnimatedAvatar_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetAnimatedAvatar_Request &>(from));
}


void CPlayer_GetAnimatedAvatar_Request::MergeFrom(const CPlayer_GetAnimatedAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetAnimatedAvatar_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetAnimatedAvatar_Request::CopyFrom(const CPlayer_GetAnimatedAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetAnimatedAvatar_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetAnimatedAvatar_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetAnimatedAvatar_Request::InternalSwap(CPlayer_GetAnimatedAvatar_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetAnimatedAvatar_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[29]);
}

// ===================================================================

class CPlayer_GetAnimatedAvatar_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetAnimatedAvatar_Response>()._has_bits_);
  static const ::ProfileItem& avatar(const CPlayer_GetAnimatedAvatar_Response* msg);
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProfileItem&
CPlayer_GetAnimatedAvatar_Response::_Internal::avatar(const CPlayer_GetAnimatedAvatar_Response* msg) {
  return *msg->avatar_;
}
CPlayer_GetAnimatedAvatar_Response::CPlayer_GetAnimatedAvatar_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetAnimatedAvatar_Response)
}
CPlayer_GetAnimatedAvatar_Response::CPlayer_GetAnimatedAvatar_Response(const CPlayer_GetAnimatedAvatar_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_avatar()) {
    avatar_ = new ::ProfileItem(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetAnimatedAvatar_Response)
}

inline void CPlayer_GetAnimatedAvatar_Response::SharedCtor() {
avatar_ = nullptr;
}

CPlayer_GetAnimatedAvatar_Response::~CPlayer_GetAnimatedAvatar_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetAnimatedAvatar_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetAnimatedAvatar_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete avatar_;
}

void CPlayer_GetAnimatedAvatar_Response::ArenaDtor(void* object) {
  CPlayer_GetAnimatedAvatar_Response* _this = reinterpret_cast< CPlayer_GetAnimatedAvatar_Response* >(object);
  (void)_this;
}
void CPlayer_GetAnimatedAvatar_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetAnimatedAvatar_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetAnimatedAvatar_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetAnimatedAvatar_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(avatar_ != nullptr);
    avatar_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetAnimatedAvatar_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProfileItem avatar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetAnimatedAvatar_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetAnimatedAvatar_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfileItem avatar = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::avatar(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetAnimatedAvatar_Response)
  return target;
}

size_t CPlayer_GetAnimatedAvatar_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetAnimatedAvatar_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProfileItem avatar = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avatar_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetAnimatedAvatar_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetAnimatedAvatar_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetAnimatedAvatar_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetAnimatedAvatar_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetAnimatedAvatar_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetAnimatedAvatar_Response &>(from));
}


void CPlayer_GetAnimatedAvatar_Response::MergeFrom(const CPlayer_GetAnimatedAvatar_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetAnimatedAvatar_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_avatar()) {
    _internal_mutable_avatar()->::ProfileItem::MergeFrom(from._internal_avatar());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetAnimatedAvatar_Response::CopyFrom(const CPlayer_GetAnimatedAvatar_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetAnimatedAvatar_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetAnimatedAvatar_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetAnimatedAvatar_Response::InternalSwap(CPlayer_GetAnimatedAvatar_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(avatar_, other->avatar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetAnimatedAvatar_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[30]);
}

// ===================================================================

class CPlayer_SetAnimatedAvatar_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetAnimatedAvatar_Request>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_SetAnimatedAvatar_Request::CPlayer_SetAnimatedAvatar_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetAnimatedAvatar_Request)
}
CPlayer_SetAnimatedAvatar_Request::CPlayer_SetAnimatedAvatar_Request(const CPlayer_SetAnimatedAvatar_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  communityitemid_ = from.communityitemid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetAnimatedAvatar_Request)
}

inline void CPlayer_SetAnimatedAvatar_Request::SharedCtor() {
communityitemid_ = uint64_t{0u};
}

CPlayer_SetAnimatedAvatar_Request::~CPlayer_SetAnimatedAvatar_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetAnimatedAvatar_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetAnimatedAvatar_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_SetAnimatedAvatar_Request::ArenaDtor(void* object) {
  CPlayer_SetAnimatedAvatar_Request* _this = reinterpret_cast< CPlayer_SetAnimatedAvatar_Request* >(object);
  (void)_this;
}
void CPlayer_SetAnimatedAvatar_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetAnimatedAvatar_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetAnimatedAvatar_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetAnimatedAvatar_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communityitemid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetAnimatedAvatar_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetAnimatedAvatar_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetAnimatedAvatar_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetAnimatedAvatar_Request)
  return target;
}

size_t CPlayer_SetAnimatedAvatar_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetAnimatedAvatar_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 communityitemid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetAnimatedAvatar_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetAnimatedAvatar_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetAnimatedAvatar_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetAnimatedAvatar_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetAnimatedAvatar_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetAnimatedAvatar_Request &>(from));
}


void CPlayer_SetAnimatedAvatar_Request::MergeFrom(const CPlayer_SetAnimatedAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetAnimatedAvatar_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_communityitemid()) {
    _internal_set_communityitemid(from._internal_communityitemid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetAnimatedAvatar_Request::CopyFrom(const CPlayer_SetAnimatedAvatar_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetAnimatedAvatar_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetAnimatedAvatar_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetAnimatedAvatar_Request::InternalSwap(CPlayer_SetAnimatedAvatar_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(communityitemid_, other->communityitemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetAnimatedAvatar_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[31]);
}

// ===================================================================

class CPlayer_SetAnimatedAvatar_Response::_Internal {
 public:
};

CPlayer_SetAnimatedAvatar_Response::CPlayer_SetAnimatedAvatar_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetAnimatedAvatar_Response)
}
CPlayer_SetAnimatedAvatar_Response::CPlayer_SetAnimatedAvatar_Response(const CPlayer_SetAnimatedAvatar_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetAnimatedAvatar_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetAnimatedAvatar_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetAnimatedAvatar_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetAnimatedAvatar_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[32]);
}

// ===================================================================

class CPlayer_GetSteamDeckKeyboardSkin_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetSteamDeckKeyboardSkin_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetSteamDeckKeyboardSkin_Request::CPlayer_GetSteamDeckKeyboardSkin_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetSteamDeckKeyboardSkin_Request)
}
CPlayer_GetSteamDeckKeyboardSkin_Request::CPlayer_GetSteamDeckKeyboardSkin_Request(const CPlayer_GetSteamDeckKeyboardSkin_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetSteamDeckKeyboardSkin_Request)
}

inline void CPlayer_GetSteamDeckKeyboardSkin_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CPlayer_GetSteamDeckKeyboardSkin_Request::~CPlayer_GetSteamDeckKeyboardSkin_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetSteamDeckKeyboardSkin_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetSteamDeckKeyboardSkin_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetSteamDeckKeyboardSkin_Request::ArenaDtor(void* object) {
  CPlayer_GetSteamDeckKeyboardSkin_Request* _this = reinterpret_cast< CPlayer_GetSteamDeckKeyboardSkin_Request* >(object);
  (void)_this;
}
void CPlayer_GetSteamDeckKeyboardSkin_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetSteamDeckKeyboardSkin_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetSteamDeckKeyboardSkin_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetSteamDeckKeyboardSkin_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetSteamDeckKeyboardSkin_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetSteamDeckKeyboardSkin_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetSteamDeckKeyboardSkin_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetSteamDeckKeyboardSkin_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetSteamDeckKeyboardSkin_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetSteamDeckKeyboardSkin_Request)
  return target;
}

size_t CPlayer_GetSteamDeckKeyboardSkin_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetSteamDeckKeyboardSkin_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional fixed64 steamid = 1 [(.description) = "The player we\'re asking about"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetSteamDeckKeyboardSkin_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetSteamDeckKeyboardSkin_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetSteamDeckKeyboardSkin_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetSteamDeckKeyboardSkin_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetSteamDeckKeyboardSkin_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetSteamDeckKeyboardSkin_Request &>(from));
}


void CPlayer_GetSteamDeckKeyboardSkin_Request::MergeFrom(const CPlayer_GetSteamDeckKeyboardSkin_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetSteamDeckKeyboardSkin_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetSteamDeckKeyboardSkin_Request::CopyFrom(const CPlayer_GetSteamDeckKeyboardSkin_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetSteamDeckKeyboardSkin_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetSteamDeckKeyboardSkin_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetSteamDeckKeyboardSkin_Request::InternalSwap(CPlayer_GetSteamDeckKeyboardSkin_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetSteamDeckKeyboardSkin_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[33]);
}

// ===================================================================

class CPlayer_GetSteamDeckKeyboardSkin_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetSteamDeckKeyboardSkin_Response>()._has_bits_);
  static const ::ProfileItem& steam_deck_keyboard_skin(const CPlayer_GetSteamDeckKeyboardSkin_Response* msg);
  static void set_has_steam_deck_keyboard_skin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProfileItem&
CPlayer_GetSteamDeckKeyboardSkin_Response::_Internal::steam_deck_keyboard_skin(const CPlayer_GetSteamDeckKeyboardSkin_Response* msg) {
  return *msg->steam_deck_keyboard_skin_;
}
CPlayer_GetSteamDeckKeyboardSkin_Response::CPlayer_GetSteamDeckKeyboardSkin_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetSteamDeckKeyboardSkin_Response)
}
CPlayer_GetSteamDeckKeyboardSkin_Response::CPlayer_GetSteamDeckKeyboardSkin_Response(const CPlayer_GetSteamDeckKeyboardSkin_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_steam_deck_keyboard_skin()) {
    steam_deck_keyboard_skin_ = new ::ProfileItem(*from.steam_deck_keyboard_skin_);
  } else {
    steam_deck_keyboard_skin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetSteamDeckKeyboardSkin_Response)
}

inline void CPlayer_GetSteamDeckKeyboardSkin_Response::SharedCtor() {
steam_deck_keyboard_skin_ = nullptr;
}

CPlayer_GetSteamDeckKeyboardSkin_Response::~CPlayer_GetSteamDeckKeyboardSkin_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetSteamDeckKeyboardSkin_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetSteamDeckKeyboardSkin_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete steam_deck_keyboard_skin_;
}

void CPlayer_GetSteamDeckKeyboardSkin_Response::ArenaDtor(void* object) {
  CPlayer_GetSteamDeckKeyboardSkin_Response* _this = reinterpret_cast< CPlayer_GetSteamDeckKeyboardSkin_Response* >(object);
  (void)_this;
}
void CPlayer_GetSteamDeckKeyboardSkin_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetSteamDeckKeyboardSkin_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetSteamDeckKeyboardSkin_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetSteamDeckKeyboardSkin_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(steam_deck_keyboard_skin_ != nullptr);
    steam_deck_keyboard_skin_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetSteamDeckKeyboardSkin_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProfileItem steam_deck_keyboard_skin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_steam_deck_keyboard_skin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetSteamDeckKeyboardSkin_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetSteamDeckKeyboardSkin_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfileItem steam_deck_keyboard_skin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::steam_deck_keyboard_skin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetSteamDeckKeyboardSkin_Response)
  return target;
}

size_t CPlayer_GetSteamDeckKeyboardSkin_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetSteamDeckKeyboardSkin_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProfileItem steam_deck_keyboard_skin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steam_deck_keyboard_skin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetSteamDeckKeyboardSkin_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetSteamDeckKeyboardSkin_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetSteamDeckKeyboardSkin_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetSteamDeckKeyboardSkin_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetSteamDeckKeyboardSkin_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetSteamDeckKeyboardSkin_Response &>(from));
}


void CPlayer_GetSteamDeckKeyboardSkin_Response::MergeFrom(const CPlayer_GetSteamDeckKeyboardSkin_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetSteamDeckKeyboardSkin_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_deck_keyboard_skin()) {
    _internal_mutable_steam_deck_keyboard_skin()->::ProfileItem::MergeFrom(from._internal_steam_deck_keyboard_skin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetSteamDeckKeyboardSkin_Response::CopyFrom(const CPlayer_GetSteamDeckKeyboardSkin_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetSteamDeckKeyboardSkin_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetSteamDeckKeyboardSkin_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetSteamDeckKeyboardSkin_Response::InternalSwap(CPlayer_GetSteamDeckKeyboardSkin_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_deck_keyboard_skin_, other->steam_deck_keyboard_skin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetSteamDeckKeyboardSkin_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[34]);
}

// ===================================================================

class CPlayer_SetSteamDeckKeyboardSkin_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetSteamDeckKeyboardSkin_Request>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_SetSteamDeckKeyboardSkin_Request::CPlayer_SetSteamDeckKeyboardSkin_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetSteamDeckKeyboardSkin_Request)
}
CPlayer_SetSteamDeckKeyboardSkin_Request::CPlayer_SetSteamDeckKeyboardSkin_Request(const CPlayer_SetSteamDeckKeyboardSkin_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  communityitemid_ = from.communityitemid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetSteamDeckKeyboardSkin_Request)
}

inline void CPlayer_SetSteamDeckKeyboardSkin_Request::SharedCtor() {
communityitemid_ = uint64_t{0u};
}

CPlayer_SetSteamDeckKeyboardSkin_Request::~CPlayer_SetSteamDeckKeyboardSkin_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetSteamDeckKeyboardSkin_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetSteamDeckKeyboardSkin_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_SetSteamDeckKeyboardSkin_Request::ArenaDtor(void* object) {
  CPlayer_SetSteamDeckKeyboardSkin_Request* _this = reinterpret_cast< CPlayer_SetSteamDeckKeyboardSkin_Request* >(object);
  (void)_this;
}
void CPlayer_SetSteamDeckKeyboardSkin_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetSteamDeckKeyboardSkin_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetSteamDeckKeyboardSkin_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetSteamDeckKeyboardSkin_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communityitemid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetSteamDeckKeyboardSkin_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetSteamDeckKeyboardSkin_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetSteamDeckKeyboardSkin_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetSteamDeckKeyboardSkin_Request)
  return target;
}

size_t CPlayer_SetSteamDeckKeyboardSkin_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetSteamDeckKeyboardSkin_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 communityitemid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetSteamDeckKeyboardSkin_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetSteamDeckKeyboardSkin_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetSteamDeckKeyboardSkin_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetSteamDeckKeyboardSkin_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetSteamDeckKeyboardSkin_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetSteamDeckKeyboardSkin_Request &>(from));
}


void CPlayer_SetSteamDeckKeyboardSkin_Request::MergeFrom(const CPlayer_SetSteamDeckKeyboardSkin_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetSteamDeckKeyboardSkin_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_communityitemid()) {
    _internal_set_communityitemid(from._internal_communityitemid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetSteamDeckKeyboardSkin_Request::CopyFrom(const CPlayer_SetSteamDeckKeyboardSkin_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetSteamDeckKeyboardSkin_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetSteamDeckKeyboardSkin_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetSteamDeckKeyboardSkin_Request::InternalSwap(CPlayer_SetSteamDeckKeyboardSkin_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(communityitemid_, other->communityitemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetSteamDeckKeyboardSkin_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[35]);
}

// ===================================================================

class CPlayer_SetSteamDeckKeyboardSkin_Response::_Internal {
 public:
};

CPlayer_SetSteamDeckKeyboardSkin_Response::CPlayer_SetSteamDeckKeyboardSkin_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetSteamDeckKeyboardSkin_Response)
}
CPlayer_SetSteamDeckKeyboardSkin_Response::CPlayer_SetSteamDeckKeyboardSkin_Response(const CPlayer_SetSteamDeckKeyboardSkin_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetSteamDeckKeyboardSkin_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetSteamDeckKeyboardSkin_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetSteamDeckKeyboardSkin_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetSteamDeckKeyboardSkin_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[36]);
}

// ===================================================================

class CPlayer_GetProfileItemsOwned_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileItemsOwned_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetProfileItemsOwned_Request::CPlayer_GetProfileItemsOwned_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileItemsOwned_Request)
}
CPlayer_GetProfileItemsOwned_Request::CPlayer_GetProfileItemsOwned_Request(const CPlayer_GetProfileItemsOwned_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileItemsOwned_Request)
}

inline void CPlayer_GetProfileItemsOwned_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPlayer_GetProfileItemsOwned_Request::~CPlayer_GetProfileItemsOwned_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileItemsOwned_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileItemsOwned_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetProfileItemsOwned_Request::ArenaDtor(void* object) {
  CPlayer_GetProfileItemsOwned_Request* _this = reinterpret_cast< CPlayer_GetProfileItemsOwned_Request* >(object);
  (void)_this;
}
void CPlayer_GetProfileItemsOwned_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileItemsOwned_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileItemsOwned_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileItemsOwned_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileItemsOwned_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetProfileItemsOwned_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ECommunityItemClass filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ECommunityItemClass_IsValid(val))) {
              _internal_add_filters(static_cast<::ECommunityItemClass>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_filters(), ptr, ctx, ::ECommunityItemClass_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileItemsOwned_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileItemsOwned_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetProfileItemsOwned_Request.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // repeated .ECommunityItemClass filters = 2;
  for (int i = 0, n = this->_internal_filters_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_filters(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileItemsOwned_Request)
  return target;
}

size_t CPlayer_GetProfileItemsOwned_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileItemsOwned_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ECommunityItemClass filters = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_filters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_filters(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileItemsOwned_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileItemsOwned_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileItemsOwned_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileItemsOwned_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileItemsOwned_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileItemsOwned_Request &>(from));
}


void CPlayer_GetProfileItemsOwned_Request::MergeFrom(const CPlayer_GetProfileItemsOwned_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileItemsOwned_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileItemsOwned_Request::CopyFrom(const CPlayer_GetProfileItemsOwned_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileItemsOwned_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileItemsOwned_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileItemsOwned_Request::InternalSwap(CPlayer_GetProfileItemsOwned_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filters_.InternalSwap(&other->filters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileItemsOwned_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[37]);
}

// ===================================================================

class CPlayer_GetProfileItemsOwned_Response::_Internal {
 public:
};

CPlayer_GetProfileItemsOwned_Response::CPlayer_GetProfileItemsOwned_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  profile_backgrounds_(arena),
  mini_profile_backgrounds_(arena),
  avatar_frames_(arena),
  animated_avatars_(arena),
  profile_modifiers_(arena),
  steam_deck_keyboard_skins_(arena),
  steam_deck_startup_movies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileItemsOwned_Response)
}
CPlayer_GetProfileItemsOwned_Response::CPlayer_GetProfileItemsOwned_Response(const CPlayer_GetProfileItemsOwned_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      profile_backgrounds_(from.profile_backgrounds_),
      mini_profile_backgrounds_(from.mini_profile_backgrounds_),
      avatar_frames_(from.avatar_frames_),
      animated_avatars_(from.animated_avatars_),
      profile_modifiers_(from.profile_modifiers_),
      steam_deck_keyboard_skins_(from.steam_deck_keyboard_skins_),
      steam_deck_startup_movies_(from.steam_deck_startup_movies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileItemsOwned_Response)
}

inline void CPlayer_GetProfileItemsOwned_Response::SharedCtor() {
}

CPlayer_GetProfileItemsOwned_Response::~CPlayer_GetProfileItemsOwned_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileItemsOwned_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileItemsOwned_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetProfileItemsOwned_Response::ArenaDtor(void* object) {
  CPlayer_GetProfileItemsOwned_Response* _this = reinterpret_cast< CPlayer_GetProfileItemsOwned_Response* >(object);
  (void)_this;
}
void CPlayer_GetProfileItemsOwned_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileItemsOwned_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileItemsOwned_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileItemsOwned_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_backgrounds_.Clear();
  mini_profile_backgrounds_.Clear();
  avatar_frames_.Clear();
  animated_avatars_.Clear();
  profile_modifiers_.Clear();
  steam_deck_keyboard_skins_.Clear();
  steam_deck_startup_movies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileItemsOwned_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProfileItem profile_backgrounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profile_backgrounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileItem mini_profile_backgrounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mini_profile_backgrounds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileItem avatar_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_avatar_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileItem animated_avatars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_animated_avatars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileItem profile_modifiers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profile_modifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileItem steam_deck_keyboard_skins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steam_deck_keyboard_skins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileItem steam_deck_startup_movies = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steam_deck_startup_movies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileItemsOwned_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileItemsOwned_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProfileItem profile_backgrounds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profile_backgrounds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_profile_backgrounds(i), target, stream);
  }

  // repeated .ProfileItem mini_profile_backgrounds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mini_profile_backgrounds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mini_profile_backgrounds(i), target, stream);
  }

  // repeated .ProfileItem avatar_frames = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_avatar_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_avatar_frames(i), target, stream);
  }

  // repeated .ProfileItem animated_avatars = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_animated_avatars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_animated_avatars(i), target, stream);
  }

  // repeated .ProfileItem profile_modifiers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profile_modifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_profile_modifiers(i), target, stream);
  }

  // repeated .ProfileItem steam_deck_keyboard_skins = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steam_deck_keyboard_skins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_steam_deck_keyboard_skins(i), target, stream);
  }

  // repeated .ProfileItem steam_deck_startup_movies = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steam_deck_startup_movies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_steam_deck_startup_movies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileItemsOwned_Response)
  return target;
}

size_t CPlayer_GetProfileItemsOwned_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileItemsOwned_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfileItem profile_backgrounds = 1;
  total_size += 1UL * this->_internal_profile_backgrounds_size();
  for (const auto& msg : this->profile_backgrounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfileItem mini_profile_backgrounds = 2;
  total_size += 1UL * this->_internal_mini_profile_backgrounds_size();
  for (const auto& msg : this->mini_profile_backgrounds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfileItem avatar_frames = 3;
  total_size += 1UL * this->_internal_avatar_frames_size();
  for (const auto& msg : this->avatar_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfileItem animated_avatars = 4;
  total_size += 1UL * this->_internal_animated_avatars_size();
  for (const auto& msg : this->animated_avatars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfileItem profile_modifiers = 5;
  total_size += 1UL * this->_internal_profile_modifiers_size();
  for (const auto& msg : this->profile_modifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfileItem steam_deck_keyboard_skins = 6;
  total_size += 1UL * this->_internal_steam_deck_keyboard_skins_size();
  for (const auto& msg : this->steam_deck_keyboard_skins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProfileItem steam_deck_startup_movies = 7;
  total_size += 1UL * this->_internal_steam_deck_startup_movies_size();
  for (const auto& msg : this->steam_deck_startup_movies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileItemsOwned_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileItemsOwned_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileItemsOwned_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileItemsOwned_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileItemsOwned_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileItemsOwned_Response &>(from));
}


void CPlayer_GetProfileItemsOwned_Response::MergeFrom(const CPlayer_GetProfileItemsOwned_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileItemsOwned_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  profile_backgrounds_.MergeFrom(from.profile_backgrounds_);
  mini_profile_backgrounds_.MergeFrom(from.mini_profile_backgrounds_);
  avatar_frames_.MergeFrom(from.avatar_frames_);
  animated_avatars_.MergeFrom(from.animated_avatars_);
  profile_modifiers_.MergeFrom(from.profile_modifiers_);
  steam_deck_keyboard_skins_.MergeFrom(from.steam_deck_keyboard_skins_);
  steam_deck_startup_movies_.MergeFrom(from.steam_deck_startup_movies_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileItemsOwned_Response::CopyFrom(const CPlayer_GetProfileItemsOwned_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileItemsOwned_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileItemsOwned_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileItemsOwned_Response::InternalSwap(CPlayer_GetProfileItemsOwned_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  profile_backgrounds_.InternalSwap(&other->profile_backgrounds_);
  mini_profile_backgrounds_.InternalSwap(&other->mini_profile_backgrounds_);
  avatar_frames_.InternalSwap(&other->avatar_frames_);
  animated_avatars_.InternalSwap(&other->animated_avatars_);
  profile_modifiers_.InternalSwap(&other->profile_modifiers_);
  steam_deck_keyboard_skins_.InternalSwap(&other->steam_deck_keyboard_skins_);
  steam_deck_startup_movies_.InternalSwap(&other->steam_deck_startup_movies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileItemsOwned_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[38]);
}

// ===================================================================

class CPlayer_GetProfileItemsEquipped_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileItemsEquipped_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetProfileItemsEquipped_Request::CPlayer_GetProfileItemsEquipped_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileItemsEquipped_Request)
}
CPlayer_GetProfileItemsEquipped_Request::CPlayer_GetProfileItemsEquipped_Request(const CPlayer_GetProfileItemsEquipped_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileItemsEquipped_Request)
}

inline void CPlayer_GetProfileItemsEquipped_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CPlayer_GetProfileItemsEquipped_Request::~CPlayer_GetProfileItemsEquipped_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileItemsEquipped_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileItemsEquipped_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetProfileItemsEquipped_Request::ArenaDtor(void* object) {
  CPlayer_GetProfileItemsEquipped_Request* _this = reinterpret_cast< CPlayer_GetProfileItemsEquipped_Request* >(object);
  (void)_this;
}
void CPlayer_GetProfileItemsEquipped_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileItemsEquipped_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileItemsEquipped_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileItemsEquipped_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileItemsEquipped_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetProfileItemsEquipped_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileItemsEquipped_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileItemsEquipped_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetProfileItemsEquipped_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileItemsEquipped_Request)
  return target;
}

size_t CPlayer_GetProfileItemsEquipped_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileItemsEquipped_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileItemsEquipped_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileItemsEquipped_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileItemsEquipped_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileItemsEquipped_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileItemsEquipped_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileItemsEquipped_Request &>(from));
}


void CPlayer_GetProfileItemsEquipped_Request::MergeFrom(const CPlayer_GetProfileItemsEquipped_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileItemsEquipped_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileItemsEquipped_Request::CopyFrom(const CPlayer_GetProfileItemsEquipped_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileItemsEquipped_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileItemsEquipped_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileItemsEquipped_Request::InternalSwap(CPlayer_GetProfileItemsEquipped_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileItemsEquipped_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[39]);
}

// ===================================================================

class CPlayer_GetProfileItemsEquipped_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileItemsEquipped_Response>()._has_bits_);
  static const ::ProfileItem& profile_background(const CPlayer_GetProfileItemsEquipped_Response* msg);
  static void set_has_profile_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfileItem& mini_profile_background(const CPlayer_GetProfileItemsEquipped_Response* msg);
  static void set_has_mini_profile_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProfileItem& avatar_frame(const CPlayer_GetProfileItemsEquipped_Response* msg);
  static void set_has_avatar_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProfileItem& animated_avatar(const CPlayer_GetProfileItemsEquipped_Response* msg);
  static void set_has_animated_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ProfileItem& profile_modifier(const CPlayer_GetProfileItemsEquipped_Response* msg);
  static void set_has_profile_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ProfileItem& steam_deck_keyboard_skin(const CPlayer_GetProfileItemsEquipped_Response* msg);
  static void set_has_steam_deck_keyboard_skin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ProfileItem&
CPlayer_GetProfileItemsEquipped_Response::_Internal::profile_background(const CPlayer_GetProfileItemsEquipped_Response* msg) {
  return *msg->profile_background_;
}
const ::ProfileItem&
CPlayer_GetProfileItemsEquipped_Response::_Internal::mini_profile_background(const CPlayer_GetProfileItemsEquipped_Response* msg) {
  return *msg->mini_profile_background_;
}
const ::ProfileItem&
CPlayer_GetProfileItemsEquipped_Response::_Internal::avatar_frame(const CPlayer_GetProfileItemsEquipped_Response* msg) {
  return *msg->avatar_frame_;
}
const ::ProfileItem&
CPlayer_GetProfileItemsEquipped_Response::_Internal::animated_avatar(const CPlayer_GetProfileItemsEquipped_Response* msg) {
  return *msg->animated_avatar_;
}
const ::ProfileItem&
CPlayer_GetProfileItemsEquipped_Response::_Internal::profile_modifier(const CPlayer_GetProfileItemsEquipped_Response* msg) {
  return *msg->profile_modifier_;
}
const ::ProfileItem&
CPlayer_GetProfileItemsEquipped_Response::_Internal::steam_deck_keyboard_skin(const CPlayer_GetProfileItemsEquipped_Response* msg) {
  return *msg->steam_deck_keyboard_skin_;
}
CPlayer_GetProfileItemsEquipped_Response::CPlayer_GetProfileItemsEquipped_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileItemsEquipped_Response)
}
CPlayer_GetProfileItemsEquipped_Response::CPlayer_GetProfileItemsEquipped_Response(const CPlayer_GetProfileItemsEquipped_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profile_background()) {
    profile_background_ = new ::ProfileItem(*from.profile_background_);
  } else {
    profile_background_ = nullptr;
  }
  if (from._internal_has_mini_profile_background()) {
    mini_profile_background_ = new ::ProfileItem(*from.mini_profile_background_);
  } else {
    mini_profile_background_ = nullptr;
  }
  if (from._internal_has_avatar_frame()) {
    avatar_frame_ = new ::ProfileItem(*from.avatar_frame_);
  } else {
    avatar_frame_ = nullptr;
  }
  if (from._internal_has_animated_avatar()) {
    animated_avatar_ = new ::ProfileItem(*from.animated_avatar_);
  } else {
    animated_avatar_ = nullptr;
  }
  if (from._internal_has_profile_modifier()) {
    profile_modifier_ = new ::ProfileItem(*from.profile_modifier_);
  } else {
    profile_modifier_ = nullptr;
  }
  if (from._internal_has_steam_deck_keyboard_skin()) {
    steam_deck_keyboard_skin_ = new ::ProfileItem(*from.steam_deck_keyboard_skin_);
  } else {
    steam_deck_keyboard_skin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileItemsEquipped_Response)
}

inline void CPlayer_GetProfileItemsEquipped_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&profile_background_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steam_deck_keyboard_skin_) -
    reinterpret_cast<char*>(&profile_background_)) + sizeof(steam_deck_keyboard_skin_));
}

CPlayer_GetProfileItemsEquipped_Response::~CPlayer_GetProfileItemsEquipped_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileItemsEquipped_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileItemsEquipped_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete profile_background_;
  if (this != internal_default_instance()) delete mini_profile_background_;
  if (this != internal_default_instance()) delete avatar_frame_;
  if (this != internal_default_instance()) delete animated_avatar_;
  if (this != internal_default_instance()) delete profile_modifier_;
  if (this != internal_default_instance()) delete steam_deck_keyboard_skin_;
}

void CPlayer_GetProfileItemsEquipped_Response::ArenaDtor(void* object) {
  CPlayer_GetProfileItemsEquipped_Response* _this = reinterpret_cast< CPlayer_GetProfileItemsEquipped_Response* >(object);
  (void)_this;
}
void CPlayer_GetProfileItemsEquipped_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileItemsEquipped_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileItemsEquipped_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileItemsEquipped_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(profile_background_ != nullptr);
      profile_background_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mini_profile_background_ != nullptr);
      mini_profile_background_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(avatar_frame_ != nullptr);
      avatar_frame_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(animated_avatar_ != nullptr);
      animated_avatar_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(profile_modifier_ != nullptr);
      profile_modifier_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(steam_deck_keyboard_skin_ != nullptr);
      steam_deck_keyboard_skin_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileItemsEquipped_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProfileItem profile_background = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProfileItem mini_profile_background = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mini_profile_background(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProfileItem avatar_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProfileItem animated_avatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_animated_avatar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProfileItem profile_modifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_modifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProfileItem steam_deck_keyboard_skin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_steam_deck_keyboard_skin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileItemsEquipped_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileItemsEquipped_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfileItem profile_background = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::profile_background(this), target, stream);
  }

  // optional .ProfileItem mini_profile_background = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mini_profile_background(this), target, stream);
  }

  // optional .ProfileItem avatar_frame = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::avatar_frame(this), target, stream);
  }

  // optional .ProfileItem animated_avatar = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::animated_avatar(this), target, stream);
  }

  // optional .ProfileItem profile_modifier = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::profile_modifier(this), target, stream);
  }

  // optional .ProfileItem steam_deck_keyboard_skin = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::steam_deck_keyboard_skin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileItemsEquipped_Response)
  return target;
}

size_t CPlayer_GetProfileItemsEquipped_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileItemsEquipped_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ProfileItem profile_background = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_background_);
    }

    // optional .ProfileItem mini_profile_background = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mini_profile_background_);
    }

    // optional .ProfileItem avatar_frame = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatar_frame_);
    }

    // optional .ProfileItem animated_avatar = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animated_avatar_);
    }

    // optional .ProfileItem profile_modifier = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_modifier_);
    }

    // optional .ProfileItem steam_deck_keyboard_skin = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steam_deck_keyboard_skin_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileItemsEquipped_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileItemsEquipped_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileItemsEquipped_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileItemsEquipped_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileItemsEquipped_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileItemsEquipped_Response &>(from));
}


void CPlayer_GetProfileItemsEquipped_Response::MergeFrom(const CPlayer_GetProfileItemsEquipped_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileItemsEquipped_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_profile_background()->::ProfileItem::MergeFrom(from._internal_profile_background());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mini_profile_background()->::ProfileItem::MergeFrom(from._internal_mini_profile_background());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_avatar_frame()->::ProfileItem::MergeFrom(from._internal_avatar_frame());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_animated_avatar()->::ProfileItem::MergeFrom(from._internal_animated_avatar());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_profile_modifier()->::ProfileItem::MergeFrom(from._internal_profile_modifier());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_steam_deck_keyboard_skin()->::ProfileItem::MergeFrom(from._internal_steam_deck_keyboard_skin());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileItemsEquipped_Response::CopyFrom(const CPlayer_GetProfileItemsEquipped_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileItemsEquipped_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileItemsEquipped_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileItemsEquipped_Response::InternalSwap(CPlayer_GetProfileItemsEquipped_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileItemsEquipped_Response, steam_deck_keyboard_skin_)
      + sizeof(CPlayer_GetProfileItemsEquipped_Response::steam_deck_keyboard_skin_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileItemsEquipped_Response, profile_background_)>(
          reinterpret_cast<char*>(&profile_background_),
          reinterpret_cast<char*>(&other->profile_background_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileItemsEquipped_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[40]);
}

// ===================================================================

class CPlayer_SetEquippedProfileItemFlags_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetEquippedProfileItemFlags_Request>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_SetEquippedProfileItemFlags_Request::CPlayer_SetEquippedProfileItemFlags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetEquippedProfileItemFlags_Request)
}
CPlayer_SetEquippedProfileItemFlags_Request::CPlayer_SetEquippedProfileItemFlags_Request(const CPlayer_SetEquippedProfileItemFlags_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&communityitemid_, &from.communityitemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&communityitemid_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetEquippedProfileItemFlags_Request)
}

inline void CPlayer_SetEquippedProfileItemFlags_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&communityitemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&communityitemid_)) + sizeof(flags_));
}

CPlayer_SetEquippedProfileItemFlags_Request::~CPlayer_SetEquippedProfileItemFlags_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetEquippedProfileItemFlags_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetEquippedProfileItemFlags_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_SetEquippedProfileItemFlags_Request::ArenaDtor(void* object) {
  CPlayer_SetEquippedProfileItemFlags_Request* _this = reinterpret_cast< CPlayer_SetEquippedProfileItemFlags_Request* >(object);
  (void)_this;
}
void CPlayer_SetEquippedProfileItemFlags_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetEquippedProfileItemFlags_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetEquippedProfileItemFlags_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetEquippedProfileItemFlags_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&communityitemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&communityitemid_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetEquippedProfileItemFlags_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 2 [(.description) = "Set of EProfileItemEquippedFlag"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetEquippedProfileItemFlags_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetEquippedProfileItemFlags_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  // optional uint32 flags = 2 [(.description) = "Set of EProfileItemEquippedFlag"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetEquippedProfileItemFlags_Request)
  return target;
}

size_t CPlayer_SetEquippedProfileItemFlags_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetEquippedProfileItemFlags_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 communityitemid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
    }

    // optional uint32 flags = 2 [(.description) = "Set of EProfileItemEquippedFlag"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetEquippedProfileItemFlags_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetEquippedProfileItemFlags_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetEquippedProfileItemFlags_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetEquippedProfileItemFlags_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetEquippedProfileItemFlags_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetEquippedProfileItemFlags_Request &>(from));
}


void CPlayer_SetEquippedProfileItemFlags_Request::MergeFrom(const CPlayer_SetEquippedProfileItemFlags_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetEquippedProfileItemFlags_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      communityitemid_ = from.communityitemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetEquippedProfileItemFlags_Request::CopyFrom(const CPlayer_SetEquippedProfileItemFlags_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetEquippedProfileItemFlags_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetEquippedProfileItemFlags_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetEquippedProfileItemFlags_Request::InternalSwap(CPlayer_SetEquippedProfileItemFlags_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_SetEquippedProfileItemFlags_Request, flags_)
      + sizeof(CPlayer_SetEquippedProfileItemFlags_Request::flags_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_SetEquippedProfileItemFlags_Request, communityitemid_)>(
          reinterpret_cast<char*>(&communityitemid_),
          reinterpret_cast<char*>(&other->communityitemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetEquippedProfileItemFlags_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[41]);
}

// ===================================================================

class CPlayer_SetEquippedProfileItemFlags_Response::_Internal {
 public:
};

CPlayer_SetEquippedProfileItemFlags_Response::CPlayer_SetEquippedProfileItemFlags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetEquippedProfileItemFlags_Response)
}
CPlayer_SetEquippedProfileItemFlags_Response::CPlayer_SetEquippedProfileItemFlags_Response(const CPlayer_SetEquippedProfileItemFlags_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetEquippedProfileItemFlags_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetEquippedProfileItemFlags_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetEquippedProfileItemFlags_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetEquippedProfileItemFlags_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[42]);
}

// ===================================================================

class CPlayer_GetEmoticonList_Request::_Internal {
 public:
};

CPlayer_GetEmoticonList_Request::CPlayer_GetEmoticonList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetEmoticonList_Request)
}
CPlayer_GetEmoticonList_Request::CPlayer_GetEmoticonList_Request(const CPlayer_GetEmoticonList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetEmoticonList_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetEmoticonList_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetEmoticonList_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetEmoticonList_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[43]);
}

// ===================================================================

class CPlayer_GetEmoticonList_Response_Emoticon::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetEmoticonList_Response_Emoticon>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_last_used(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CPlayer_GetEmoticonList_Response_Emoticon::CPlayer_GetEmoticonList_Response_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetEmoticonList_Response.Emoticon)
}
CPlayer_GetEmoticonList_Response_Emoticon::CPlayer_GetEmoticonList_Response_Emoticon(const CPlayer_GetEmoticonList_Response_Emoticon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetEmoticonList_Response.Emoticon)
}

inline void CPlayer_GetEmoticonList_Response_Emoticon::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(appid_));
}

CPlayer_GetEmoticonList_Response_Emoticon::~CPlayer_GetEmoticonList_Response_Emoticon() {
  // @@protoc_insertion_point(destructor:CPlayer_GetEmoticonList_Response.Emoticon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetEmoticonList_Response_Emoticon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetEmoticonList_Response_Emoticon::ArenaDtor(void* object) {
  CPlayer_GetEmoticonList_Response_Emoticon* _this = reinterpret_cast< CPlayer_GetEmoticonList_Response_Emoticon* >(object);
  (void)_this;
}
void CPlayer_GetEmoticonList_Response_Emoticon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetEmoticonList_Response_Emoticon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetEmoticonList_Response_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetEmoticonList_Response.Emoticon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&count_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetEmoticonList_Response_Emoticon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetEmoticonList_Response.Emoticon.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_last_used(&has_bits);
          time_last_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 use_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_use_count(&has_bits);
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_received = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_received(&has_bits);
          time_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetEmoticonList_Response_Emoticon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetEmoticonList_Response.Emoticon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetEmoticonList_Response.Emoticon.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 time_last_used = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_last_used(), target);
  }

  // optional uint32 use_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_use_count(), target);
  }

  // optional uint32 time_received = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_received(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetEmoticonList_Response.Emoticon)
  return target;
}

size_t CPlayer_GetEmoticonList_Response_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetEmoticonList_Response.Emoticon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional uint32 time_last_used = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_used());
    }

    // optional uint32 use_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_use_count());
    }

    // optional uint32 time_received = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_received());
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetEmoticonList_Response_Emoticon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetEmoticonList_Response_Emoticon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetEmoticonList_Response_Emoticon::GetClassData() const { return &_class_data_; }

void CPlayer_GetEmoticonList_Response_Emoticon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetEmoticonList_Response_Emoticon *>(to)->MergeFrom(
      static_cast<const CPlayer_GetEmoticonList_Response_Emoticon &>(from));
}


void CPlayer_GetEmoticonList_Response_Emoticon::MergeFrom(const CPlayer_GetEmoticonList_Response_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetEmoticonList_Response.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_last_used_ = from.time_last_used_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_count_ = from.use_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_received_ = from.time_received_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetEmoticonList_Response_Emoticon::CopyFrom(const CPlayer_GetEmoticonList_Response_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetEmoticonList_Response.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetEmoticonList_Response_Emoticon::IsInitialized() const {
  return true;
}

void CPlayer_GetEmoticonList_Response_Emoticon::InternalSwap(CPlayer_GetEmoticonList_Response_Emoticon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetEmoticonList_Response_Emoticon, appid_)
      + sizeof(CPlayer_GetEmoticonList_Response_Emoticon::appid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetEmoticonList_Response_Emoticon, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetEmoticonList_Response_Emoticon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[44]);
}

// ===================================================================

class CPlayer_GetEmoticonList_Response::_Internal {
 public:
};

CPlayer_GetEmoticonList_Response::CPlayer_GetEmoticonList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  emoticons_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetEmoticonList_Response)
}
CPlayer_GetEmoticonList_Response::CPlayer_GetEmoticonList_Response(const CPlayer_GetEmoticonList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emoticons_(from.emoticons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetEmoticonList_Response)
}

inline void CPlayer_GetEmoticonList_Response::SharedCtor() {
}

CPlayer_GetEmoticonList_Response::~CPlayer_GetEmoticonList_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetEmoticonList_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetEmoticonList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetEmoticonList_Response::ArenaDtor(void* object) {
  CPlayer_GetEmoticonList_Response* _this = reinterpret_cast< CPlayer_GetEmoticonList_Response* >(object);
  (void)_this;
}
void CPlayer_GetEmoticonList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetEmoticonList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetEmoticonList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetEmoticonList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emoticons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetEmoticonList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetEmoticonList_Response.Emoticon emoticons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emoticons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetEmoticonList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetEmoticonList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetEmoticonList_Response.Emoticon emoticons = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emoticons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_emoticons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetEmoticonList_Response)
  return target;
}

size_t CPlayer_GetEmoticonList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetEmoticonList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetEmoticonList_Response.Emoticon emoticons = 1;
  total_size += 1UL * this->_internal_emoticons_size();
  for (const auto& msg : this->emoticons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetEmoticonList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetEmoticonList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetEmoticonList_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetEmoticonList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetEmoticonList_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetEmoticonList_Response &>(from));
}


void CPlayer_GetEmoticonList_Response::MergeFrom(const CPlayer_GetEmoticonList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetEmoticonList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  emoticons_.MergeFrom(from.emoticons_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetEmoticonList_Response::CopyFrom(const CPlayer_GetEmoticonList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetEmoticonList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetEmoticonList_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetEmoticonList_Response::InternalSwap(CPlayer_GetEmoticonList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  emoticons_.InternalSwap(&other->emoticons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetEmoticonList_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[45]);
}

// ===================================================================

class CPlayer_GetTopAchievementsForGames_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetTopAchievementsForGames_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_achievements(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetTopAchievementsForGames_Request::CPlayer_GetTopAchievementsForGames_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTopAchievementsForGames_Request)
}
CPlayer_GetTopAchievementsForGames_Request::CPlayer_GetTopAchievementsForGames_Request(const CPlayer_GetTopAchievementsForGames_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_achievements_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(max_achievements_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTopAchievementsForGames_Request)
}

inline void CPlayer_GetTopAchievementsForGames_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_achievements_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(max_achievements_));
}

CPlayer_GetTopAchievementsForGames_Request::~CPlayer_GetTopAchievementsForGames_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetTopAchievementsForGames_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetTopAchievementsForGames_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetTopAchievementsForGames_Request::ArenaDtor(void* object) {
  CPlayer_GetTopAchievementsForGames_Request* _this = reinterpret_cast< CPlayer_GetTopAchievementsForGames_Request* >(object);
  (void)_this;
}
void CPlayer_GetTopAchievementsForGames_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetTopAchievementsForGames_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetTopAchievementsForGames_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetTopAchievementsForGames_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_achievements_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(max_achievements_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetTopAchievementsForGames_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetTopAchievementsForGames_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_achievements = 3 [(.description) = "The max achievements to load. Max 8"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_achievements(&has_bits);
          max_achievements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 appids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetTopAchievementsForGames_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetTopAchievementsForGames_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetTopAchievementsForGames_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // optional uint32 max_achievements = 3 [(.description) = "The max achievements to load. Max 8"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_achievements(), target);
  }

  // repeated uint32 appids = 4;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetTopAchievementsForGames_Request)
  return target;
}

size_t CPlayer_GetTopAchievementsForGames_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetTopAchievementsForGames_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 max_achievements = 3 [(.description) = "The max achievements to load. Max 8"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_achievements());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTopAchievementsForGames_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetTopAchievementsForGames_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTopAchievementsForGames_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetTopAchievementsForGames_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetTopAchievementsForGames_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetTopAchievementsForGames_Request &>(from));
}


void CPlayer_GetTopAchievementsForGames_Request::MergeFrom(const CPlayer_GetTopAchievementsForGames_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetTopAchievementsForGames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_achievements_ = from.max_achievements_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetTopAchievementsForGames_Request::CopyFrom(const CPlayer_GetTopAchievementsForGames_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetTopAchievementsForGames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetTopAchievementsForGames_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetTopAchievementsForGames_Request::InternalSwap(CPlayer_GetTopAchievementsForGames_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetTopAchievementsForGames_Request, max_achievements_)
      + sizeof(CPlayer_GetTopAchievementsForGames_Request::max_achievements_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetTopAchievementsForGames_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTopAchievementsForGames_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[46]);
}

// ===================================================================

class CPlayer_GetTopAchievementsForGames_Response_Achievement::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetTopAchievementsForGames_Response_Achievement>()._has_bits_);
  static void set_has_statid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon_gray(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_player_percent_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetTopAchievementsForGames_Response_Achievement::CPlayer_GetTopAchievementsForGames_Response_Achievement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTopAchievementsForGames_Response.Achievement)
}
CPlayer_GetTopAchievementsForGames_Response_Achievement::CPlayer_GetTopAchievementsForGames_Response_Achievement(const CPlayer_GetTopAchievementsForGames_Response_Achievement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  icon_gray_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_gray()) {
    icon_gray_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_gray(), 
      GetArenaForAllocation());
  }
  player_percent_unlocked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_percent_unlocked()) {
    player_percent_unlocked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_percent_unlocked(), 
      GetArenaForAllocation());
  }
  ::memcpy(&statid_, &from.statid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&statid_)) + sizeof(hidden_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTopAchievementsForGames_Response.Achievement)
}

inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_gray_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
player_percent_unlocked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hidden_) -
    reinterpret_cast<char*>(&statid_)) + sizeof(hidden_));
}

CPlayer_GetTopAchievementsForGames_Response_Achievement::~CPlayer_GetTopAchievementsForGames_Response_Achievement() {
  // @@protoc_insertion_point(destructor:CPlayer_GetTopAchievementsForGames_Response.Achievement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetTopAchievementsForGames_Response_Achievement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_gray_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_percent_unlocked_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetTopAchievementsForGames_Response_Achievement::ArenaDtor(void* object) {
  CPlayer_GetTopAchievementsForGames_Response_Achievement* _this = reinterpret_cast< CPlayer_GetTopAchievementsForGames_Response_Achievement* >(object);
  (void)_this;
}
void CPlayer_GetTopAchievementsForGames_Response_Achievement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetTopAchievementsForGames_Response_Achievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetTopAchievementsForGames_Response_Achievement::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetTopAchievementsForGames_Response.Achievement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_gray_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      player_percent_unlocked_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&statid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hidden_) -
        reinterpret_cast<char*>(&statid_)) + sizeof(hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetTopAchievementsForGames_Response_Achievement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 statid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_statid(&has_bits);
          statid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bit(&has_bits);
          bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetTopAchievementsForGames_Response.Achievement.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetTopAchievementsForGames_Response.Achievement.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetTopAchievementsForGames_Response.Achievement.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_gray = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_icon_gray();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hidden = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_percent_unlocked = 8 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_player_percent_unlocked();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetTopAchievementsForGames_Response_Achievement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetTopAchievementsForGames_Response.Achievement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 statid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_statid(), target);
  }

  // optional uint32 bit = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bit(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetTopAchievementsForGames_Response.Achievement.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string desc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetTopAchievementsForGames_Response.Achievement.desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // optional string icon = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetTopAchievementsForGames_Response.Achievement.icon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_icon(), target);
  }

  // optional string icon_gray = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_gray().data(), static_cast<int>(this->_internal_icon_gray().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetTopAchievementsForGames_Response.Achievement.icon_gray");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_icon_gray(), target);
  }

  // optional bool hidden = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_hidden(), target);
  }

  // optional string player_percent_unlocked = 8 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_percent_unlocked().data(), static_cast<int>(this->_internal_player_percent_unlocked().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetTopAchievementsForGames_Response.Achievement.player_percent_unlocked");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_player_percent_unlocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetTopAchievementsForGames_Response.Achievement)
  return target;
}

size_t CPlayer_GetTopAchievementsForGames_Response_Achievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetTopAchievementsForGames_Response.Achievement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string desc = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional string icon = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string icon_gray = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_gray());
    }

    // optional string player_percent_unlocked = 8 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_percent_unlocked());
    }

    // optional uint32 statid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_statid());
    }

    // optional uint32 bit = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bit());
    }

    // optional bool hidden = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTopAchievementsForGames_Response_Achievement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetTopAchievementsForGames_Response_Achievement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTopAchievementsForGames_Response_Achievement::GetClassData() const { return &_class_data_; }

void CPlayer_GetTopAchievementsForGames_Response_Achievement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetTopAchievementsForGames_Response_Achievement *>(to)->MergeFrom(
      static_cast<const CPlayer_GetTopAchievementsForGames_Response_Achievement &>(from));
}


void CPlayer_GetTopAchievementsForGames_Response_Achievement::MergeFrom(const CPlayer_GetTopAchievementsForGames_Response_Achievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetTopAchievementsForGames_Response.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_icon_gray(from._internal_icon_gray());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_player_percent_unlocked(from._internal_player_percent_unlocked());
    }
    if (cached_has_bits & 0x00000020u) {
      statid_ = from.statid_;
    }
    if (cached_has_bits & 0x00000040u) {
      bit_ = from.bit_;
    }
    if (cached_has_bits & 0x00000080u) {
      hidden_ = from.hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetTopAchievementsForGames_Response_Achievement::CopyFrom(const CPlayer_GetTopAchievementsForGames_Response_Achievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetTopAchievementsForGames_Response.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetTopAchievementsForGames_Response_Achievement::IsInitialized() const {
  return true;
}

void CPlayer_GetTopAchievementsForGames_Response_Achievement::InternalSwap(CPlayer_GetTopAchievementsForGames_Response_Achievement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_gray_, lhs_arena,
      &other->icon_gray_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &player_percent_unlocked_, lhs_arena,
      &other->player_percent_unlocked_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetTopAchievementsForGames_Response_Achievement, hidden_)
      + sizeof(CPlayer_GetTopAchievementsForGames_Response_Achievement::hidden_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetTopAchievementsForGames_Response_Achievement, statid_)>(
          reinterpret_cast<char*>(&statid_),
          reinterpret_cast<char*>(&other->statid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTopAchievementsForGames_Response_Achievement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[47]);
}

// ===================================================================

class CPlayer_GetTopAchievementsForGames_Response_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetTopAchievementsForGames_Response_Game>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_achievements(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_GetTopAchievementsForGames_Response_Game::CPlayer_GetTopAchievementsForGames_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  achievements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTopAchievementsForGames_Response.Game)
}
CPlayer_GetTopAchievementsForGames_Response_Game::CPlayer_GetTopAchievementsForGames_Response_Game(const CPlayer_GetTopAchievementsForGames_Response_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      achievements_(from.achievements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_achievements_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(total_achievements_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTopAchievementsForGames_Response.Game)
}

inline void CPlayer_GetTopAchievementsForGames_Response_Game::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_achievements_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(total_achievements_));
}

CPlayer_GetTopAchievementsForGames_Response_Game::~CPlayer_GetTopAchievementsForGames_Response_Game() {
  // @@protoc_insertion_point(destructor:CPlayer_GetTopAchievementsForGames_Response.Game)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetTopAchievementsForGames_Response_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetTopAchievementsForGames_Response_Game::ArenaDtor(void* object) {
  CPlayer_GetTopAchievementsForGames_Response_Game* _this = reinterpret_cast< CPlayer_GetTopAchievementsForGames_Response_Game* >(object);
  (void)_this;
}
void CPlayer_GetTopAchievementsForGames_Response_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetTopAchievementsForGames_Response_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetTopAchievementsForGames_Response_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetTopAchievementsForGames_Response.Game)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_achievements_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(total_achievements_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetTopAchievementsForGames_Response_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_achievements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_achievements(&has_bits);
          total_achievements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetTopAchievementsForGames_Response.Achievement achievements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetTopAchievementsForGames_Response_Game::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetTopAchievementsForGames_Response.Game)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 total_achievements = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_achievements(), target);
  }

  // repeated .CPlayer_GetTopAchievementsForGames_Response.Achievement achievements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_achievements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetTopAchievementsForGames_Response.Game)
  return target;
}

size_t CPlayer_GetTopAchievementsForGames_Response_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetTopAchievementsForGames_Response.Game)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetTopAchievementsForGames_Response.Achievement achievements = 3;
  total_size += 1UL * this->_internal_achievements_size();
  for (const auto& msg : this->achievements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 total_achievements = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_achievements());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTopAchievementsForGames_Response_Game::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetTopAchievementsForGames_Response_Game::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTopAchievementsForGames_Response_Game::GetClassData() const { return &_class_data_; }

void CPlayer_GetTopAchievementsForGames_Response_Game::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetTopAchievementsForGames_Response_Game *>(to)->MergeFrom(
      static_cast<const CPlayer_GetTopAchievementsForGames_Response_Game &>(from));
}


void CPlayer_GetTopAchievementsForGames_Response_Game::MergeFrom(const CPlayer_GetTopAchievementsForGames_Response_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetTopAchievementsForGames_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  achievements_.MergeFrom(from.achievements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_achievements_ = from.total_achievements_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetTopAchievementsForGames_Response_Game::CopyFrom(const CPlayer_GetTopAchievementsForGames_Response_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetTopAchievementsForGames_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetTopAchievementsForGames_Response_Game::IsInitialized() const {
  return true;
}

void CPlayer_GetTopAchievementsForGames_Response_Game::InternalSwap(CPlayer_GetTopAchievementsForGames_Response_Game* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  achievements_.InternalSwap(&other->achievements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetTopAchievementsForGames_Response_Game, total_achievements_)
      + sizeof(CPlayer_GetTopAchievementsForGames_Response_Game::total_achievements_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetTopAchievementsForGames_Response_Game, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTopAchievementsForGames_Response_Game::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[48]);
}

// ===================================================================

class CPlayer_GetTopAchievementsForGames_Response::_Internal {
 public:
};

CPlayer_GetTopAchievementsForGames_Response::CPlayer_GetTopAchievementsForGames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  games_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTopAchievementsForGames_Response)
}
CPlayer_GetTopAchievementsForGames_Response::CPlayer_GetTopAchievementsForGames_Response(const CPlayer_GetTopAchievementsForGames_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTopAchievementsForGames_Response)
}

inline void CPlayer_GetTopAchievementsForGames_Response::SharedCtor() {
}

CPlayer_GetTopAchievementsForGames_Response::~CPlayer_GetTopAchievementsForGames_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetTopAchievementsForGames_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetTopAchievementsForGames_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetTopAchievementsForGames_Response::ArenaDtor(void* object) {
  CPlayer_GetTopAchievementsForGames_Response* _this = reinterpret_cast< CPlayer_GetTopAchievementsForGames_Response* >(object);
  (void)_this;
}
void CPlayer_GetTopAchievementsForGames_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetTopAchievementsForGames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetTopAchievementsForGames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetTopAchievementsForGames_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetTopAchievementsForGames_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetTopAchievementsForGames_Response.Game games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetTopAchievementsForGames_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetTopAchievementsForGames_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetTopAchievementsForGames_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetTopAchievementsForGames_Response)
  return target;
}

size_t CPlayer_GetTopAchievementsForGames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetTopAchievementsForGames_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetTopAchievementsForGames_Response.Game games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTopAchievementsForGames_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetTopAchievementsForGames_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTopAchievementsForGames_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetTopAchievementsForGames_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetTopAchievementsForGames_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetTopAchievementsForGames_Response &>(from));
}


void CPlayer_GetTopAchievementsForGames_Response::MergeFrom(const CPlayer_GetTopAchievementsForGames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetTopAchievementsForGames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetTopAchievementsForGames_Response::CopyFrom(const CPlayer_GetTopAchievementsForGames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetTopAchievementsForGames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetTopAchievementsForGames_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetTopAchievementsForGames_Response::InternalSwap(CPlayer_GetTopAchievementsForGames_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTopAchievementsForGames_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[49]);
}

// ===================================================================

class CPlayer_GetAchievementsProgress_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetAchievementsProgress_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetAchievementsProgress_Request::CPlayer_GetAchievementsProgress_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetAchievementsProgress_Request)
}
CPlayer_GetAchievementsProgress_Request::CPlayer_GetAchievementsProgress_Request(const CPlayer_GetAchievementsProgress_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetAchievementsProgress_Request)
}

inline void CPlayer_GetAchievementsProgress_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CPlayer_GetAchievementsProgress_Request::~CPlayer_GetAchievementsProgress_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetAchievementsProgress_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetAchievementsProgress_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetAchievementsProgress_Request::ArenaDtor(void* object) {
  CPlayer_GetAchievementsProgress_Request* _this = reinterpret_cast< CPlayer_GetAchievementsProgress_Request* >(object);
  (void)_this;
}
void CPlayer_GetAchievementsProgress_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetAchievementsProgress_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetAchievementsProgress_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetAchievementsProgress_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetAchievementsProgress_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetAchievementsProgress_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 appids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetAchievementsProgress_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetAchievementsProgress_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetAchievementsProgress_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  // repeated uint32 appids = 3;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetAchievementsProgress_Request)
  return target;
}

size_t CPlayer_GetAchievementsProgress_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetAchievementsProgress_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetAchievementsProgress_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetAchievementsProgress_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetAchievementsProgress_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetAchievementsProgress_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetAchievementsProgress_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetAchievementsProgress_Request &>(from));
}


void CPlayer_GetAchievementsProgress_Request::MergeFrom(const CPlayer_GetAchievementsProgress_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetAchievementsProgress_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetAchievementsProgress_Request::CopyFrom(const CPlayer_GetAchievementsProgress_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetAchievementsProgress_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetAchievementsProgress_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetAchievementsProgress_Request::InternalSwap(CPlayer_GetAchievementsProgress_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  appids_.InternalSwap(&other->appids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetAchievementsProgress_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[50]);
}

// ===================================================================

class CPlayer_GetAchievementsProgress_Response_AchievementProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetAchievementsProgress_Response_AchievementProgress>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_all_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cache_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CPlayer_GetAchievementsProgress_Response_AchievementProgress::CPlayer_GetAchievementsProgress_Response_AchievementProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
}
CPlayer_GetAchievementsProgress_Response_AchievementProgress::CPlayer_GetAchievementsProgress_Response_AchievementProgress(const CPlayer_GetAchievementsProgress_Response_AchievementProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_time_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(cache_time_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
}

inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cache_time_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(cache_time_));
}

CPlayer_GetAchievementsProgress_Response_AchievementProgress::~CPlayer_GetAchievementsProgress_Response_AchievementProgress() {
  // @@protoc_insertion_point(destructor:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetAchievementsProgress_Response_AchievementProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetAchievementsProgress_Response_AchievementProgress::ArenaDtor(void* object) {
  CPlayer_GetAchievementsProgress_Response_AchievementProgress* _this = reinterpret_cast< CPlayer_GetAchievementsProgress_Response_AchievementProgress* >(object);
  (void)_this;
}
void CPlayer_GetAchievementsProgress_Response_AchievementProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetAchievementsProgress_Response_AchievementProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetAchievementsProgress_Response_AchievementProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_time_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(cache_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetAchievementsProgress_Response_AchievementProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unlocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unlocked(&has_bits);
          unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_percentage(&has_bits);
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool all_unlocked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_all_unlocked(&has_bits);
          all_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cache_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cache_time(&has_bits);
          cache_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetAchievementsProgress_Response_AchievementProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 unlocked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unlocked(), target);
  }

  // optional uint32 total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total(), target);
  }

  // optional float percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_percentage(), target);
  }

  // optional bool all_unlocked = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_all_unlocked(), target);
  }

  // optional uint32 cache_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cache_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
  return target;
}

size_t CPlayer_GetAchievementsProgress_Response_AchievementProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 unlocked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_unlocked());
    }

    // optional uint32 total = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
    }

    // optional float percentage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool all_unlocked = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 cache_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cache_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetAchievementsProgress_Response_AchievementProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetAchievementsProgress_Response_AchievementProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetAchievementsProgress_Response_AchievementProgress::GetClassData() const { return &_class_data_; }

void CPlayer_GetAchievementsProgress_Response_AchievementProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetAchievementsProgress_Response_AchievementProgress *>(to)->MergeFrom(
      static_cast<const CPlayer_GetAchievementsProgress_Response_AchievementProgress &>(from));
}


void CPlayer_GetAchievementsProgress_Response_AchievementProgress::MergeFrom(const CPlayer_GetAchievementsProgress_Response_AchievementProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      unlocked_ = from.unlocked_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000008u) {
      percentage_ = from.percentage_;
    }
    if (cached_has_bits & 0x00000010u) {
      all_unlocked_ = from.all_unlocked_;
    }
    if (cached_has_bits & 0x00000020u) {
      cache_time_ = from.cache_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetAchievementsProgress_Response_AchievementProgress::CopyFrom(const CPlayer_GetAchievementsProgress_Response_AchievementProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetAchievementsProgress_Response.AchievementProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetAchievementsProgress_Response_AchievementProgress::IsInitialized() const {
  return true;
}

void CPlayer_GetAchievementsProgress_Response_AchievementProgress::InternalSwap(CPlayer_GetAchievementsProgress_Response_AchievementProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetAchievementsProgress_Response_AchievementProgress, cache_time_)
      + sizeof(CPlayer_GetAchievementsProgress_Response_AchievementProgress::cache_time_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetAchievementsProgress_Response_AchievementProgress, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetAchievementsProgress_Response_AchievementProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[51]);
}

// ===================================================================

class CPlayer_GetAchievementsProgress_Response::_Internal {
 public:
};

CPlayer_GetAchievementsProgress_Response::CPlayer_GetAchievementsProgress_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  achievement_progress_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetAchievementsProgress_Response)
}
CPlayer_GetAchievementsProgress_Response::CPlayer_GetAchievementsProgress_Response(const CPlayer_GetAchievementsProgress_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      achievement_progress_(from.achievement_progress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetAchievementsProgress_Response)
}

inline void CPlayer_GetAchievementsProgress_Response::SharedCtor() {
}

CPlayer_GetAchievementsProgress_Response::~CPlayer_GetAchievementsProgress_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetAchievementsProgress_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetAchievementsProgress_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetAchievementsProgress_Response::ArenaDtor(void* object) {
  CPlayer_GetAchievementsProgress_Response* _this = reinterpret_cast< CPlayer_GetAchievementsProgress_Response* >(object);
  (void)_this;
}
void CPlayer_GetAchievementsProgress_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetAchievementsProgress_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetAchievementsProgress_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetAchievementsProgress_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievement_progress_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetAchievementsProgress_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetAchievementsProgress_Response.AchievementProgress achievement_progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievement_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetAchievementsProgress_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetAchievementsProgress_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetAchievementsProgress_Response.AchievementProgress achievement_progress = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievement_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_achievement_progress(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetAchievementsProgress_Response)
  return target;
}

size_t CPlayer_GetAchievementsProgress_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetAchievementsProgress_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetAchievementsProgress_Response.AchievementProgress achievement_progress = 1;
  total_size += 1UL * this->_internal_achievement_progress_size();
  for (const auto& msg : this->achievement_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetAchievementsProgress_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetAchievementsProgress_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetAchievementsProgress_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetAchievementsProgress_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetAchievementsProgress_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetAchievementsProgress_Response &>(from));
}


void CPlayer_GetAchievementsProgress_Response::MergeFrom(const CPlayer_GetAchievementsProgress_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetAchievementsProgress_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  achievement_progress_.MergeFrom(from.achievement_progress_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetAchievementsProgress_Response::CopyFrom(const CPlayer_GetAchievementsProgress_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetAchievementsProgress_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetAchievementsProgress_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetAchievementsProgress_Response::InternalSwap(CPlayer_GetAchievementsProgress_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  achievement_progress_.InternalSwap(&other->achievement_progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetAchievementsProgress_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[52]);
}

// ===================================================================

class CPlayer_GetGameAchievements_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameAchievements_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetGameAchievements_Request::CPlayer_GetGameAchievements_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameAchievements_Request)
}
CPlayer_GetGameAchievements_Request::CPlayer_GetGameAchievements_Request(const CPlayer_GetGameAchievements_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameAchievements_Request)
}

inline void CPlayer_GetGameAchievements_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_ = 0u;
}

CPlayer_GetGameAchievements_Request::~CPlayer_GetGameAchievements_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameAchievements_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetGameAchievements_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetGameAchievements_Request::ArenaDtor(void* object) {
  CPlayer_GetGameAchievements_Request* _this = reinterpret_cast< CPlayer_GetGameAchievements_Request* >(object);
  (void)_this;
}
void CPlayer_GetGameAchievements_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameAchievements_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameAchievements_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameAchievements_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameAchievements_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 2 [(.description) = "Lowercase, language shortnames"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetGameAchievements_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameAchievements_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameAchievements_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string language = 2 [(.description) = "Lowercase, language shortnames"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetGameAchievements_Request.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameAchievements_Request)
  return target;
}

size_t CPlayer_GetGameAchievements_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameAchievements_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language = 2 [(.description) = "Lowercase, language shortnames"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameAchievements_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetGameAchievements_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameAchievements_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetGameAchievements_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetGameAchievements_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetGameAchievements_Request &>(from));
}


void CPlayer_GetGameAchievements_Request::MergeFrom(const CPlayer_GetGameAchievements_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameAchievements_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameAchievements_Request::CopyFrom(const CPlayer_GetGameAchievements_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameAchievements_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameAchievements_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetGameAchievements_Request::InternalSwap(CPlayer_GetGameAchievements_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameAchievements_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[53]);
}

// ===================================================================

class CPlayer_GetGameAchievements_Response_Achievement::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameAchievements_Response_Achievement>()._has_bits_);
  static void set_has_internal_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localized_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localized_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_icon_gray(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_percent_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CPlayer_GetGameAchievements_Response_Achievement::CPlayer_GetGameAchievements_Response_Achievement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameAchievements_Response.Achievement)
}
CPlayer_GetGameAchievements_Response_Achievement::CPlayer_GetGameAchievements_Response_Achievement(const CPlayer_GetGameAchievements_Response_Achievement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_internal_name()) {
    internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_internal_name(), 
      GetArenaForAllocation());
  }
  localized_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localized_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localized_name()) {
    localized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localized_name(), 
      GetArenaForAllocation());
  }
  localized_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localized_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localized_desc()) {
    localized_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localized_desc(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  icon_gray_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_gray()) {
    icon_gray_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_gray(), 
      GetArenaForAllocation());
  }
  player_percent_unlocked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_percent_unlocked()) {
    player_percent_unlocked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_percent_unlocked(), 
      GetArenaForAllocation());
  }
  hidden_ = from.hidden_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameAchievements_Response.Achievement)
}

inline void CPlayer_GetGameAchievements_Response_Achievement::SharedCtor() {
internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
localized_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localized_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
localized_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localized_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_gray_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_gray_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
player_percent_unlocked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  player_percent_unlocked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hidden_ = false;
}

CPlayer_GetGameAchievements_Response_Achievement::~CPlayer_GetGameAchievements_Response_Achievement() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameAchievements_Response.Achievement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetGameAchievements_Response_Achievement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  internal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localized_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localized_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_gray_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_percent_unlocked_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetGameAchievements_Response_Achievement::ArenaDtor(void* object) {
  CPlayer_GetGameAchievements_Response_Achievement* _this = reinterpret_cast< CPlayer_GetGameAchievements_Response_Achievement* >(object);
  (void)_this;
}
void CPlayer_GetGameAchievements_Response_Achievement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameAchievements_Response_Achievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameAchievements_Response_Achievement::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameAchievements_Response.Achievement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      internal_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      localized_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      localized_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      icon_gray_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      player_percent_unlocked_.ClearNonDefaultToEmpty();
    }
  }
  hidden_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameAchievements_Response_Achievement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string internal_name = 1 [(.description) = "Will come uppercase, internal facing name set by the partner; needed to associate with user unlock"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_internal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetGameAchievements_Response.Achievement.internal_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string localized_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localized_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetGameAchievements_Response.Achievement.localized_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string localized_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_localized_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetGameAchievements_Response.Achievement.localized_desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetGameAchievements_Response.Achievement.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_gray = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_icon_gray();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetGameAchievements_Response.Achievement.icon_gray");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hidden = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_hidden(&has_bits);
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_percent_unlocked = 7 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_player_percent_unlocked();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameAchievements_Response_Achievement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameAchievements_Response.Achievement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string internal_name = 1 [(.description) = "Will come uppercase, internal facing name set by the partner; needed to associate with user unlock"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_internal_name().data(), static_cast<int>(this->_internal_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetGameAchievements_Response.Achievement.internal_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_internal_name(), target);
  }

  // optional string localized_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localized_name().data(), static_cast<int>(this->_internal_localized_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetGameAchievements_Response.Achievement.localized_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localized_name(), target);
  }

  // optional string localized_desc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localized_desc().data(), static_cast<int>(this->_internal_localized_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetGameAchievements_Response.Achievement.localized_desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_localized_desc(), target);
  }

  // optional string icon = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetGameAchievements_Response.Achievement.icon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icon(), target);
  }

  // optional string icon_gray = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_gray().data(), static_cast<int>(this->_internal_icon_gray().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetGameAchievements_Response.Achievement.icon_gray");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_icon_gray(), target);
  }

  // optional bool hidden = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hidden(), target);
  }

  // optional string player_percent_unlocked = 7 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_percent_unlocked().data(), static_cast<int>(this->_internal_player_percent_unlocked().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetGameAchievements_Response.Achievement.player_percent_unlocked");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_player_percent_unlocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameAchievements_Response.Achievement)
  return target;
}

size_t CPlayer_GetGameAchievements_Response_Achievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameAchievements_Response.Achievement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string internal_name = 1 [(.description) = "Will come uppercase, internal facing name set by the partner; needed to associate with user unlock"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_internal_name());
    }

    // optional string localized_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localized_name());
    }

    // optional string localized_desc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localized_desc());
    }

    // optional string icon = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string icon_gray = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_gray());
    }

    // optional string player_percent_unlocked = 7 [(.description) = "Formatted to one decimal place, min value is 0.1, max value 100"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_percent_unlocked());
    }

    // optional bool hidden = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameAchievements_Response_Achievement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetGameAchievements_Response_Achievement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameAchievements_Response_Achievement::GetClassData() const { return &_class_data_; }

void CPlayer_GetGameAchievements_Response_Achievement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetGameAchievements_Response_Achievement *>(to)->MergeFrom(
      static_cast<const CPlayer_GetGameAchievements_Response_Achievement &>(from));
}


void CPlayer_GetGameAchievements_Response_Achievement::MergeFrom(const CPlayer_GetGameAchievements_Response_Achievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameAchievements_Response.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_internal_name(from._internal_internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_localized_name(from._internal_localized_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_localized_desc(from._internal_localized_desc());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_icon_gray(from._internal_icon_gray());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_player_percent_unlocked(from._internal_player_percent_unlocked());
    }
    if (cached_has_bits & 0x00000040u) {
      hidden_ = from.hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameAchievements_Response_Achievement::CopyFrom(const CPlayer_GetGameAchievements_Response_Achievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameAchievements_Response.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameAchievements_Response_Achievement::IsInitialized() const {
  return true;
}

void CPlayer_GetGameAchievements_Response_Achievement::InternalSwap(CPlayer_GetGameAchievements_Response_Achievement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &internal_name_, lhs_arena,
      &other->internal_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localized_name_, lhs_arena,
      &other->localized_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localized_desc_, lhs_arena,
      &other->localized_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_gray_, lhs_arena,
      &other->icon_gray_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &player_percent_unlocked_, lhs_arena,
      &other->player_percent_unlocked_, rhs_arena
  );
  swap(hidden_, other->hidden_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameAchievements_Response_Achievement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[54]);
}

// ===================================================================

class CPlayer_GetGameAchievements_Response::_Internal {
 public:
};

CPlayer_GetGameAchievements_Response::CPlayer_GetGameAchievements_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  achievements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameAchievements_Response)
}
CPlayer_GetGameAchievements_Response::CPlayer_GetGameAchievements_Response(const CPlayer_GetGameAchievements_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      achievements_(from.achievements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameAchievements_Response)
}

inline void CPlayer_GetGameAchievements_Response::SharedCtor() {
}

CPlayer_GetGameAchievements_Response::~CPlayer_GetGameAchievements_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameAchievements_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetGameAchievements_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetGameAchievements_Response::ArenaDtor(void* object) {
  CPlayer_GetGameAchievements_Response* _this = reinterpret_cast< CPlayer_GetGameAchievements_Response* >(object);
  (void)_this;
}
void CPlayer_GetGameAchievements_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameAchievements_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameAchievements_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameAchievements_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameAchievements_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetGameAchievements_Response.Achievement achievements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetGameAchievements_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameAchievements_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetGameAchievements_Response.Achievement achievements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_achievements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameAchievements_Response)
  return target;
}

size_t CPlayer_GetGameAchievements_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameAchievements_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetGameAchievements_Response.Achievement achievements = 1;
  total_size += 1UL * this->_internal_achievements_size();
  for (const auto& msg : this->achievements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetGameAchievements_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetGameAchievements_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetGameAchievements_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetGameAchievements_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetGameAchievements_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetGameAchievements_Response &>(from));
}


void CPlayer_GetGameAchievements_Response::MergeFrom(const CPlayer_GetGameAchievements_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameAchievements_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  achievements_.MergeFrom(from.achievements_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetGameAchievements_Response::CopyFrom(const CPlayer_GetGameAchievements_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameAchievements_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameAchievements_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetGameAchievements_Response::InternalSwap(CPlayer_GetGameAchievements_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  achievements_.InternalSwap(&other->achievements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameAchievements_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[55]);
}

// ===================================================================

class CPlayer_GetFavoriteBadge_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFavoriteBadge_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetFavoriteBadge_Request::CPlayer_GetFavoriteBadge_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFavoriteBadge_Request)
}
CPlayer_GetFavoriteBadge_Request::CPlayer_GetFavoriteBadge_Request(const CPlayer_GetFavoriteBadge_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFavoriteBadge_Request)
}

inline void CPlayer_GetFavoriteBadge_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CPlayer_GetFavoriteBadge_Request::~CPlayer_GetFavoriteBadge_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFavoriteBadge_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetFavoriteBadge_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFavoriteBadge_Request::ArenaDtor(void* object) {
  CPlayer_GetFavoriteBadge_Request* _this = reinterpret_cast< CPlayer_GetFavoriteBadge_Request* >(object);
  (void)_this;
}
void CPlayer_GetFavoriteBadge_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFavoriteBadge_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFavoriteBadge_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFavoriteBadge_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFavoriteBadge_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFavoriteBadge_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFavoriteBadge_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFavoriteBadge_Request)
  return target;
}

size_t CPlayer_GetFavoriteBadge_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFavoriteBadge_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFavoriteBadge_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetFavoriteBadge_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFavoriteBadge_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetFavoriteBadge_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetFavoriteBadge_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetFavoriteBadge_Request &>(from));
}


void CPlayer_GetFavoriteBadge_Request::MergeFrom(const CPlayer_GetFavoriteBadge_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFavoriteBadge_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFavoriteBadge_Request::CopyFrom(const CPlayer_GetFavoriteBadge_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFavoriteBadge_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFavoriteBadge_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetFavoriteBadge_Request::InternalSwap(CPlayer_GetFavoriteBadge_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFavoriteBadge_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[56]);
}

// ===================================================================

class CPlayer_GetFavoriteBadge_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFavoriteBadge_Response>()._has_bits_);
  static void set_has_has_favorite_badge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_badgeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CPlayer_GetFavoriteBadge_Response::CPlayer_GetFavoriteBadge_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFavoriteBadge_Response)
}
CPlayer_GetFavoriteBadge_Response::CPlayer_GetFavoriteBadge_Response(const CPlayer_GetFavoriteBadge_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&has_favorite_badge_, &from.has_favorite_badge_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&has_favorite_badge_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFavoriteBadge_Response)
}

inline void CPlayer_GetFavoriteBadge_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&has_favorite_badge_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&has_favorite_badge_)) + sizeof(level_));
}

CPlayer_GetFavoriteBadge_Response::~CPlayer_GetFavoriteBadge_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFavoriteBadge_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetFavoriteBadge_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetFavoriteBadge_Response::ArenaDtor(void* object) {
  CPlayer_GetFavoriteBadge_Response* _this = reinterpret_cast< CPlayer_GetFavoriteBadge_Response* >(object);
  (void)_this;
}
void CPlayer_GetFavoriteBadge_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFavoriteBadge_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFavoriteBadge_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFavoriteBadge_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&has_favorite_badge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&has_favorite_badge_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFavoriteBadge_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool has_favorite_badge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_has_favorite_badge(&has_bits);
          has_favorite_badge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 badgeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_badgeid(&has_bits);
          badgeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 communityitemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_item_type(&has_bits);
          item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 border_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_border_color(&has_bits);
          border_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetFavoriteBadge_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFavoriteBadge_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_favorite_badge = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_favorite_badge(), target);
  }

  // optional uint32 badgeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_badgeid(), target);
  }

  // optional uint64 communityitemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_communityitemid(), target);
  }

  // optional uint32 item_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_item_type(), target);
  }

  // optional uint32 border_color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_border_color(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_appid(), target);
  }

  // optional uint32 level = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFavoriteBadge_Response)
  return target;
}

size_t CPlayer_GetFavoriteBadge_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFavoriteBadge_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool has_favorite_badge = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 badgeid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_badgeid());
    }

    // optional uint64 communityitemid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
    }

    // optional uint32 item_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_type());
    }

    // optional uint32 border_color = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_border_color());
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 level = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetFavoriteBadge_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetFavoriteBadge_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetFavoriteBadge_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetFavoriteBadge_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetFavoriteBadge_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetFavoriteBadge_Response &>(from));
}


void CPlayer_GetFavoriteBadge_Response::MergeFrom(const CPlayer_GetFavoriteBadge_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFavoriteBadge_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      has_favorite_badge_ = from.has_favorite_badge_;
    }
    if (cached_has_bits & 0x00000002u) {
      badgeid_ = from.badgeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      communityitemid_ = from.communityitemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      border_color_ = from.border_color_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetFavoriteBadge_Response::CopyFrom(const CPlayer_GetFavoriteBadge_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFavoriteBadge_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFavoriteBadge_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetFavoriteBadge_Response::InternalSwap(CPlayer_GetFavoriteBadge_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetFavoriteBadge_Response, level_)
      + sizeof(CPlayer_GetFavoriteBadge_Response::level_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetFavoriteBadge_Response, has_favorite_badge_)>(
          reinterpret_cast<char*>(&has_favorite_badge_),
          reinterpret_cast<char*>(&other->has_favorite_badge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFavoriteBadge_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[57]);
}

// ===================================================================

class CPlayer_SetFavoriteBadge_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetFavoriteBadge_Request>()._has_bits_);
  static void set_has_communityitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_badgeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_SetFavoriteBadge_Request::CPlayer_SetFavoriteBadge_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetFavoriteBadge_Request)
}
CPlayer_SetFavoriteBadge_Request::CPlayer_SetFavoriteBadge_Request(const CPlayer_SetFavoriteBadge_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&communityitemid_, &from.communityitemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&badgeid_) -
    reinterpret_cast<char*>(&communityitemid_)) + sizeof(badgeid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetFavoriteBadge_Request)
}

inline void CPlayer_SetFavoriteBadge_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&communityitemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&badgeid_) -
    reinterpret_cast<char*>(&communityitemid_)) + sizeof(badgeid_));
}

CPlayer_SetFavoriteBadge_Request::~CPlayer_SetFavoriteBadge_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetFavoriteBadge_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetFavoriteBadge_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_SetFavoriteBadge_Request::ArenaDtor(void* object) {
  CPlayer_SetFavoriteBadge_Request* _this = reinterpret_cast< CPlayer_SetFavoriteBadge_Request* >(object);
  (void)_this;
}
void CPlayer_SetFavoriteBadge_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetFavoriteBadge_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetFavoriteBadge_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetFavoriteBadge_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&communityitemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&badgeid_) -
        reinterpret_cast<char*>(&communityitemid_)) + sizeof(badgeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetFavoriteBadge_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 communityitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_communityitemid(&has_bits);
          communityitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 badgeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_badgeid(&has_bits);
          badgeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetFavoriteBadge_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetFavoriteBadge_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 communityitemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_communityitemid(), target);
  }

  // optional uint32 badgeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_badgeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetFavoriteBadge_Request)
  return target;
}

size_t CPlayer_SetFavoriteBadge_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetFavoriteBadge_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 communityitemid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_communityitemid());
    }

    // optional uint32 badgeid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_badgeid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetFavoriteBadge_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetFavoriteBadge_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetFavoriteBadge_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetFavoriteBadge_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetFavoriteBadge_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetFavoriteBadge_Request &>(from));
}


void CPlayer_SetFavoriteBadge_Request::MergeFrom(const CPlayer_SetFavoriteBadge_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetFavoriteBadge_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      communityitemid_ = from.communityitemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      badgeid_ = from.badgeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetFavoriteBadge_Request::CopyFrom(const CPlayer_SetFavoriteBadge_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetFavoriteBadge_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetFavoriteBadge_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetFavoriteBadge_Request::InternalSwap(CPlayer_SetFavoriteBadge_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_SetFavoriteBadge_Request, badgeid_)
      + sizeof(CPlayer_SetFavoriteBadge_Request::badgeid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_SetFavoriteBadge_Request, communityitemid_)>(
          reinterpret_cast<char*>(&communityitemid_),
          reinterpret_cast<char*>(&other->communityitemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetFavoriteBadge_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[58]);
}

// ===================================================================

class CPlayer_SetFavoriteBadge_Response::_Internal {
 public:
};

CPlayer_SetFavoriteBadge_Response::CPlayer_SetFavoriteBadge_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetFavoriteBadge_Response)
}
CPlayer_SetFavoriteBadge_Response::CPlayer_SetFavoriteBadge_Response(const CPlayer_SetFavoriteBadge_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetFavoriteBadge_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetFavoriteBadge_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetFavoriteBadge_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetFavoriteBadge_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[59]);
}

// ===================================================================

class CPlayer_GetProfileCustomization_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileCustomization_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include_inactive_customizations(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_purchased_customizations(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetProfileCustomization_Request::CPlayer_GetProfileCustomization_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileCustomization_Request)
}
CPlayer_GetProfileCustomization_Request::CPlayer_GetProfileCustomization_Request(const CPlayer_GetProfileCustomization_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_purchased_customizations_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_purchased_customizations_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileCustomization_Request)
}

inline void CPlayer_GetProfileCustomization_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_purchased_customizations_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_purchased_customizations_));
}

CPlayer_GetProfileCustomization_Request::~CPlayer_GetProfileCustomization_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileCustomization_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileCustomization_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetProfileCustomization_Request::ArenaDtor(void* object) {
  CPlayer_GetProfileCustomization_Request* _this = reinterpret_cast< CPlayer_GetProfileCustomization_Request* >(object);
  (void)_this;
}
void CPlayer_GetProfileCustomization_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileCustomization_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileCustomization_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileCustomization_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_purchased_customizations_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(include_purchased_customizations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileCustomization_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_inactive_customizations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_include_inactive_customizations(&has_bits);
          include_inactive_customizations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_purchased_customizations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_include_purchased_customizations(&has_bits);
          include_purchased_customizations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileCustomization_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileCustomization_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool include_inactive_customizations = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_inactive_customizations(), target);
  }

  // optional bool include_purchased_customizations = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_purchased_customizations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileCustomization_Request)
  return target;
}

size_t CPlayer_GetProfileCustomization_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileCustomization_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool include_inactive_customizations = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool include_purchased_customizations = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileCustomization_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileCustomization_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileCustomization_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileCustomization_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileCustomization_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileCustomization_Request &>(from));
}


void CPlayer_GetProfileCustomization_Request::MergeFrom(const CPlayer_GetProfileCustomization_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileCustomization_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_inactive_customizations_ = from.include_inactive_customizations_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_purchased_customizations_ = from.include_purchased_customizations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileCustomization_Request::CopyFrom(const CPlayer_GetProfileCustomization_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileCustomization_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileCustomization_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileCustomization_Request::InternalSwap(CPlayer_GetProfileCustomization_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileCustomization_Request, include_purchased_customizations_)
      + sizeof(CPlayer_GetProfileCustomization_Request::include_purchased_customizations_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileCustomization_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileCustomization_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[60]);
}

// ===================================================================

class ProfileCustomizationSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileCustomizationSlot>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_assetid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_item_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_notes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_badgeid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_item_classid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_item_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ban_check_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_replay_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

ProfileCustomizationSlot::ProfileCustomizationSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProfileCustomizationSlot)
}
ProfileCustomizationSlot::ProfileCustomizationSlot(const ProfileCustomizationSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notes()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&replay_year_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(replay_year_));
  // @@protoc_insertion_point(copy_constructor:ProfileCustomizationSlot)
}

inline void ProfileCustomizationSlot::SharedCtor() {
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_year_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(replay_year_));
}

ProfileCustomizationSlot::~ProfileCustomizationSlot() {
  // @@protoc_insertion_point(destructor:ProfileCustomizationSlot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileCustomizationSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileCustomizationSlot::ArenaDtor(void* object) {
  ProfileCustomizationSlot* _this = reinterpret_cast< ProfileCustomizationSlot* >(object);
  (void)_this;
}
void ProfileCustomizationSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileCustomizationSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileCustomizationSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileCustomizationSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      notes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(accountid_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&badgeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replay_year_) -
        reinterpret_cast<char*>(&badgeid_)) + sizeof(replay_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileCustomizationSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 publishedfileid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_assetid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_item_assetid(&has_bits);
          item_assetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_contextid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_item_contextid(&has_bits);
          item_contextid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string notes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileCustomizationSlot.notes");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileCustomizationSlot.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 badgeid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_badgeid(&has_bits);
          badgeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 border_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_border_color(&has_bits);
          border_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_classid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_item_classid(&has_bits);
          item_classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_instanceid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_item_instanceid(&has_bits);
          item_instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EBanContentCheckResult ban_check_result = 13 [default = k_EBanContentCheckResult_NotScanned];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBanContentCheckResult_IsValid(val))) {
            _internal_set_ban_check_result(static_cast<::EBanContentCheckResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 replay_year = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_replay_year(&has_bits);
          replay_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileCustomizationSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileCustomizationSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint64 publishedfileid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_publishedfileid(), target);
  }

  // optional uint64 item_assetid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_item_assetid(), target);
  }

  // optional uint64 item_contextid = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_item_contextid(), target);
  }

  // optional string notes = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileCustomizationSlot.notes");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_notes(), target);
  }

  // optional string title = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileCustomizationSlot.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // optional uint32 accountid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_accountid(), target);
  }

  // optional uint32 badgeid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_badgeid(), target);
  }

  // optional uint32 border_color = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_border_color(), target);
  }

  // optional uint64 item_classid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_item_classid(), target);
  }

  // optional uint64 item_instanceid = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_item_instanceid(), target);
  }

  // optional .EBanContentCheckResult ban_check_result = 13 [default = k_EBanContentCheckResult_NotScanned];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_ban_check_result(), target);
  }

  // optional uint32 replay_year = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_replay_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileCustomizationSlot)
  return target;
}

size_t ProfileCustomizationSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileCustomizationSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string notes = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notes());
    }

    // optional string title = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint32 slot = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint64 publishedfileid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint64 item_assetid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_assetid());
    }

    // optional uint64 item_contextid = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_contextid());
    }

    // optional uint32 accountid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 badgeid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_badgeid());
    }

    // optional uint64 item_classid = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_classid());
    }

    // optional uint32 border_color = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_border_color());
    }

    // optional .EBanContentCheckResult ban_check_result = 13 [default = k_EBanContentCheckResult_NotScanned];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ban_check_result());
    }

    // optional uint64 item_instanceid = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_instanceid());
    }

    // optional uint32 replay_year = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_replay_year());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileCustomizationSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileCustomizationSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileCustomizationSlot::GetClassData() const { return &_class_data_; }

void ProfileCustomizationSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileCustomizationSlot *>(to)->MergeFrom(
      static_cast<const ProfileCustomizationSlot &>(from));
}


void ProfileCustomizationSlot::MergeFrom(const ProfileCustomizationSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileCustomizationSlot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notes(from._internal_notes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_assetid_ = from.item_assetid_;
    }
    if (cached_has_bits & 0x00000040u) {
      item_contextid_ = from.item_contextid_;
    }
    if (cached_has_bits & 0x00000080u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      badgeid_ = from.badgeid_;
    }
    if (cached_has_bits & 0x00000200u) {
      item_classid_ = from.item_classid_;
    }
    if (cached_has_bits & 0x00000400u) {
      border_color_ = from.border_color_;
    }
    if (cached_has_bits & 0x00000800u) {
      ban_check_result_ = from.ban_check_result_;
    }
    if (cached_has_bits & 0x00001000u) {
      item_instanceid_ = from.item_instanceid_;
    }
    if (cached_has_bits & 0x00002000u) {
      replay_year_ = from.replay_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileCustomizationSlot::CopyFrom(const ProfileCustomizationSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileCustomizationSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileCustomizationSlot::IsInitialized() const {
  return true;
}

void ProfileCustomizationSlot::InternalSwap(ProfileCustomizationSlot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notes_, lhs_arena,
      &other->notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileCustomizationSlot, replay_year_)
      + sizeof(ProfileCustomizationSlot::replay_year_)
      - PROTOBUF_FIELD_OFFSET(ProfileCustomizationSlot, slot_)>(
          reinterpret_cast<char*>(&slot_),
          reinterpret_cast<char*>(&other->slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileCustomizationSlot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[61]);
}

// ===================================================================

class ProfileCustomization::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileCustomization>()._has_bits_);
  static void set_has_customization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_large(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_customization_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_purchaseid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProfileCustomization::ProfileCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProfileCustomization)
}
ProfileCustomization::ProfileCustomization(const ProfileCustomization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&customization_type_, &from.customization_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&customization_type_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:ProfileCustomization)
}

inline void ProfileCustomization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&customization_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&customization_type_)) + sizeof(level_));
}

ProfileCustomization::~ProfileCustomization() {
  // @@protoc_insertion_point(destructor:ProfileCustomization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileCustomization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProfileCustomization::ArenaDtor(void* object) {
  ProfileCustomization* _this = reinterpret_cast< ProfileCustomization* >(object);
  (void)_this;
}
void ProfileCustomization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileCustomization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileCustomization::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileCustomization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&customization_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&customization_type_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileCustomization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProfileCustomizationType_IsValid(val))) {
            _internal_set_customization_type(static_cast<::EProfileCustomizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool large = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_large(&has_bits);
          large_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProfileCustomizationSlot slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EProfileCustomizationStyle customization_style = 5 [default = k_EProfileCustomizationStyleDefault];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProfileCustomizationStyle_IsValid(val))) {
            _internal_set_customization_style(static_cast<::EProfileCustomizationStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 purchaseid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_purchaseid(&has_bits);
          purchaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileCustomization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileCustomization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_customization_type(), target);
  }

  // optional bool large = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_large(), target);
  }

  // repeated .ProfileCustomizationSlot slots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_slots(i), target, stream);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  // optional .EProfileCustomizationStyle customization_style = 5 [default = k_EProfileCustomizationStyleDefault];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_customization_style(), target);
  }

  // optional uint64 purchaseid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_purchaseid(), target);
  }

  // optional uint32 level = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileCustomization)
  return target;
}

size_t ProfileCustomization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileCustomization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfileCustomizationSlot slots = 3;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_customization_type());
    }

    // optional bool large = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool active = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 purchaseid = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_purchaseid());
    }

    // optional .EProfileCustomizationStyle customization_style = 5 [default = k_EProfileCustomizationStyleDefault];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_customization_style());
    }

    // optional uint32 level = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileCustomization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileCustomization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileCustomization::GetClassData() const { return &_class_data_; }

void ProfileCustomization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileCustomization *>(to)->MergeFrom(
      static_cast<const ProfileCustomization &>(from));
}


void ProfileCustomization::MergeFrom(const ProfileCustomization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileCustomization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      customization_type_ = from.customization_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      large_ = from.large_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000008u) {
      purchaseid_ = from.purchaseid_;
    }
    if (cached_has_bits & 0x00000010u) {
      customization_style_ = from.customization_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileCustomization::CopyFrom(const ProfileCustomization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileCustomization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileCustomization::IsInitialized() const {
  return true;
}

void ProfileCustomization::InternalSwap(ProfileCustomization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slots_.InternalSwap(&other->slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileCustomization, level_)
      + sizeof(ProfileCustomization::level_)
      - PROTOBUF_FIELD_OFFSET(ProfileCustomization, customization_type_)>(
          reinterpret_cast<char*>(&customization_type_),
          reinterpret_cast<char*>(&other->customization_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileCustomization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[62]);
}

// ===================================================================

class ProfileTheme::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileTheme>()._has_bits_);
  static void set_has_theme_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfileTheme::ProfileTheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProfileTheme)
}
ProfileTheme::ProfileTheme(const ProfileTheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_theme_id()) {
    theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_theme_id(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ProfileTheme)
}

inline void ProfileTheme::SharedCtor() {
theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfileTheme::~ProfileTheme() {
  // @@protoc_insertion_point(destructor:ProfileTheme)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfileTheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  theme_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileTheme::ArenaDtor(void* object) {
  ProfileTheme* _this = reinterpret_cast< ProfileTheme* >(object);
  (void)_this;
}
void ProfileTheme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileTheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfileTheme::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfileTheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      theme_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileTheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string theme_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_theme_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileTheme.theme_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProfileTheme.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileTheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfileTheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string theme_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_theme_id().data(), static_cast<int>(this->_internal_theme_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileTheme.theme_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_theme_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProfileTheme.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfileTheme)
  return target;
}

size_t ProfileTheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfileTheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string theme_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_theme_id());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileTheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfileTheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileTheme::GetClassData() const { return &_class_data_; }

void ProfileTheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfileTheme *>(to)->MergeFrom(
      static_cast<const ProfileTheme &>(from));
}


void ProfileTheme::MergeFrom(const ProfileTheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfileTheme)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_theme_id(from._internal_theme_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileTheme::CopyFrom(const ProfileTheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfileTheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileTheme::IsInitialized() const {
  return true;
}

void ProfileTheme::InternalSwap(ProfileTheme* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &theme_id_, lhs_arena,
      &other->theme_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileTheme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[63]);
}

// ===================================================================

class ProfilePreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePreferences>()._has_bits_);
  static void set_has_hide_profile_awards(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfilePreferences::ProfilePreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProfilePreferences)
}
ProfilePreferences::ProfilePreferences(const ProfilePreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hide_profile_awards_ = from.hide_profile_awards_;
  // @@protoc_insertion_point(copy_constructor:ProfilePreferences)
}

inline void ProfilePreferences::SharedCtor() {
hide_profile_awards_ = false;
}

ProfilePreferences::~ProfilePreferences() {
  // @@protoc_insertion_point(destructor:ProfilePreferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProfilePreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProfilePreferences::ArenaDtor(void* object) {
  ProfilePreferences* _this = reinterpret_cast< ProfilePreferences* >(object);
  (void)_this;
}
void ProfilePreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilePreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProfilePreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:ProfilePreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hide_profile_awards_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilePreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool hide_profile_awards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hide_profile_awards(&has_bits);
          hide_profile_awards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfilePreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProfilePreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hide_profile_awards = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hide_profile_awards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProfilePreferences)
  return target;
}

size_t ProfilePreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProfilePreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool hide_profile_awards = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilePreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProfilePreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilePreferences::GetClassData() const { return &_class_data_; }

void ProfilePreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProfilePreferences *>(to)->MergeFrom(
      static_cast<const ProfilePreferences &>(from));
}


void ProfilePreferences::MergeFrom(const ProfilePreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProfilePreferences)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hide_profile_awards()) {
    _internal_set_hide_profile_awards(from._internal_hide_profile_awards());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilePreferences::CopyFrom(const ProfilePreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProfilePreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePreferences::IsInitialized() const {
  return true;
}

void ProfilePreferences::InternalSwap(ProfilePreferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hide_profile_awards_, other->hide_profile_awards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilePreferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[64]);
}

// ===================================================================

class CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileCustomization_Response_PurchasedCustomization>()._has_bits_);
  static void set_has_purchaseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_customization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetProfileCustomization_Response_PurchasedCustomization::CPlayer_GetProfileCustomization_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
}
CPlayer_GetProfileCustomization_Response_PurchasedCustomization::CPlayer_GetProfileCustomization_Response_PurchasedCustomization(const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&purchaseid_, &from.purchaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&purchaseid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
}

inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&purchaseid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&purchaseid_)) + sizeof(level_));
}

CPlayer_GetProfileCustomization_Response_PurchasedCustomization::~CPlayer_GetProfileCustomization_Response_PurchasedCustomization() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::ArenaDtor(void* object) {
  CPlayer_GetProfileCustomization_Response_PurchasedCustomization* _this = reinterpret_cast< CPlayer_GetProfileCustomization_Response_PurchasedCustomization* >(object);
  (void)_this;
}
void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&purchaseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&purchaseid_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 purchaseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_purchaseid(&has_bits);
          purchaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProfileCustomizationType_IsValid(val))) {
            _internal_set_customization_type(static_cast<::EProfileCustomizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 purchaseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_purchaseid(), target);
  }

  // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_customization_type(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
  return target;
}

size_t CPlayer_GetProfileCustomization_Response_PurchasedCustomization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 purchaseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_purchaseid());
    }

    // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_customization_type());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileCustomization_Response_PurchasedCustomization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileCustomization_Response_PurchasedCustomization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileCustomization_Response_PurchasedCustomization::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileCustomization_Response_PurchasedCustomization *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileCustomization_Response_PurchasedCustomization &>(from));
}


void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::MergeFrom(const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      purchaseid_ = from.purchaseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      customization_type_ = from.customization_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::CopyFrom(const CPlayer_GetProfileCustomization_Response_PurchasedCustomization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileCustomization_Response.PurchasedCustomization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileCustomization_Response_PurchasedCustomization::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileCustomization_Response_PurchasedCustomization::InternalSwap(CPlayer_GetProfileCustomization_Response_PurchasedCustomization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileCustomization_Response_PurchasedCustomization, level_)
      + sizeof(CPlayer_GetProfileCustomization_Response_PurchasedCustomization::level_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileCustomization_Response_PurchasedCustomization, purchaseid_)>(
          reinterpret_cast<char*>(&purchaseid_),
          reinterpret_cast<char*>(&other->purchaseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileCustomization_Response_PurchasedCustomization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[65]);
}

// ===================================================================

class CPlayer_GetProfileCustomization_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetProfileCustomization_Response>()._has_bits_);
  static void set_has_slots_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProfileTheme& profile_theme(const CPlayer_GetProfileCustomization_Response* msg);
  static void set_has_profile_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProfilePreferences& profile_preferences(const CPlayer_GetProfileCustomization_Response* msg);
  static void set_has_profile_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ProfileTheme&
CPlayer_GetProfileCustomization_Response::_Internal::profile_theme(const CPlayer_GetProfileCustomization_Response* msg) {
  return *msg->profile_theme_;
}
const ::ProfilePreferences&
CPlayer_GetProfileCustomization_Response::_Internal::profile_preferences(const CPlayer_GetProfileCustomization_Response* msg) {
  return *msg->profile_preferences_;
}
CPlayer_GetProfileCustomization_Response::CPlayer_GetProfileCustomization_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  customizations_(arena),
  purchased_customizations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileCustomization_Response)
}
CPlayer_GetProfileCustomization_Response::CPlayer_GetProfileCustomization_Response(const CPlayer_GetProfileCustomization_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      customizations_(from.customizations_),
      purchased_customizations_(from.purchased_customizations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profile_theme()) {
    profile_theme_ = new ::ProfileTheme(*from.profile_theme_);
  } else {
    profile_theme_ = nullptr;
  }
  if (from._internal_has_profile_preferences()) {
    profile_preferences_ = new ::ProfilePreferences(*from.profile_preferences_);
  } else {
    profile_preferences_ = nullptr;
  }
  slots_available_ = from.slots_available_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileCustomization_Response)
}

inline void CPlayer_GetProfileCustomization_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&profile_theme_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slots_available_) -
    reinterpret_cast<char*>(&profile_theme_)) + sizeof(slots_available_));
}

CPlayer_GetProfileCustomization_Response::~CPlayer_GetProfileCustomization_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileCustomization_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileCustomization_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete profile_theme_;
  if (this != internal_default_instance()) delete profile_preferences_;
}

void CPlayer_GetProfileCustomization_Response::ArenaDtor(void* object) {
  CPlayer_GetProfileCustomization_Response* _this = reinterpret_cast< CPlayer_GetProfileCustomization_Response* >(object);
  (void)_this;
}
void CPlayer_GetProfileCustomization_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileCustomization_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileCustomization_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileCustomization_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customizations_.Clear();
  purchased_customizations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(profile_theme_ != nullptr);
      profile_theme_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(profile_preferences_ != nullptr);
      profile_preferences_->Clear();
    }
  }
  slots_available_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileCustomization_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProfileCustomization customizations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_customizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slots_available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slots_available(&has_bits);
          slots_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ProfileTheme profile_theme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetProfileCustomization_Response.PurchasedCustomization purchased_customizations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_purchased_customizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ProfilePreferences profile_preferences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileCustomization_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileCustomization_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProfileCustomization customizations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_customizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_customizations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 slots_available = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slots_available(), target);
  }

  // optional .ProfileTheme profile_theme = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::profile_theme(this), target, stream);
  }

  // repeated .CPlayer_GetProfileCustomization_Response.PurchasedCustomization purchased_customizations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_purchased_customizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_purchased_customizations(i), target, stream);
  }

  // optional .ProfilePreferences profile_preferences = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::profile_preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileCustomization_Response)
  return target;
}

size_t CPlayer_GetProfileCustomization_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileCustomization_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfileCustomization customizations = 1;
  total_size += 1UL * this->_internal_customizations_size();
  for (const auto& msg : this->customizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetProfileCustomization_Response.PurchasedCustomization purchased_customizations = 4;
  total_size += 1UL * this->_internal_purchased_customizations_size();
  for (const auto& msg : this->purchased_customizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ProfileTheme profile_theme = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_theme_);
    }

    // optional .ProfilePreferences profile_preferences = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *profile_preferences_);
    }

    // optional uint32 slots_available = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slots_available());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileCustomization_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileCustomization_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileCustomization_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileCustomization_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileCustomization_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileCustomization_Response &>(from));
}


void CPlayer_GetProfileCustomization_Response::MergeFrom(const CPlayer_GetProfileCustomization_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileCustomization_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  customizations_.MergeFrom(from.customizations_);
  purchased_customizations_.MergeFrom(from.purchased_customizations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_profile_theme()->::ProfileTheme::MergeFrom(from._internal_profile_theme());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_profile_preferences()->::ProfilePreferences::MergeFrom(from._internal_profile_preferences());
    }
    if (cached_has_bits & 0x00000004u) {
      slots_available_ = from.slots_available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileCustomization_Response::CopyFrom(const CPlayer_GetProfileCustomization_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileCustomization_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileCustomization_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileCustomization_Response::InternalSwap(CPlayer_GetProfileCustomization_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  customizations_.InternalSwap(&other->customizations_);
  purchased_customizations_.InternalSwap(&other->purchased_customizations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileCustomization_Response, slots_available_)
      + sizeof(CPlayer_GetProfileCustomization_Response::slots_available_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetProfileCustomization_Response, profile_theme_)>(
          reinterpret_cast<char*>(&profile_theme_),
          reinterpret_cast<char*>(&other->profile_theme_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileCustomization_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[66]);
}

// ===================================================================

class CPlayer_GetPurchasedProfileCustomizations_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPurchasedProfileCustomizations_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetPurchasedProfileCustomizations_Request::CPlayer_GetPurchasedProfileCustomizations_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPurchasedProfileCustomizations_Request)
}
CPlayer_GetPurchasedProfileCustomizations_Request::CPlayer_GetPurchasedProfileCustomizations_Request(const CPlayer_GetPurchasedProfileCustomizations_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPurchasedProfileCustomizations_Request)
}

inline void CPlayer_GetPurchasedProfileCustomizations_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CPlayer_GetPurchasedProfileCustomizations_Request::~CPlayer_GetPurchasedProfileCustomizations_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPurchasedProfileCustomizations_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPurchasedProfileCustomizations_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPurchasedProfileCustomizations_Request::ArenaDtor(void* object) {
  CPlayer_GetPurchasedProfileCustomizations_Request* _this = reinterpret_cast< CPlayer_GetPurchasedProfileCustomizations_Request* >(object);
  (void)_this;
}
void CPlayer_GetPurchasedProfileCustomizations_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPurchasedProfileCustomizations_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPurchasedProfileCustomizations_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPurchasedProfileCustomizations_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPurchasedProfileCustomizations_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPurchasedProfileCustomizations_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPurchasedProfileCustomizations_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPurchasedProfileCustomizations_Request)
  return target;
}

size_t CPlayer_GetPurchasedProfileCustomizations_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPurchasedProfileCustomizations_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPurchasedProfileCustomizations_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPurchasedProfileCustomizations_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPurchasedProfileCustomizations_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetPurchasedProfileCustomizations_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPurchasedProfileCustomizations_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPurchasedProfileCustomizations_Request &>(from));
}


void CPlayer_GetPurchasedProfileCustomizations_Request::MergeFrom(const CPlayer_GetPurchasedProfileCustomizations_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPurchasedProfileCustomizations_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPurchasedProfileCustomizations_Request::CopyFrom(const CPlayer_GetPurchasedProfileCustomizations_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPurchasedProfileCustomizations_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPurchasedProfileCustomizations_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetPurchasedProfileCustomizations_Request::InternalSwap(CPlayer_GetPurchasedProfileCustomizations_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPurchasedProfileCustomizations_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[67]);
}

// ===================================================================

class CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization>()._has_bits_);
  static void set_has_purchaseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_customization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
}
CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization(const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&purchaseid_, &from.purchaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&customization_type_) -
    reinterpret_cast<char*>(&purchaseid_)) + sizeof(customization_type_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
}

inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&purchaseid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&customization_type_) -
    reinterpret_cast<char*>(&purchaseid_)) + sizeof(customization_type_));
}

CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::~CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::ArenaDtor(void* object) {
  CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* _this = reinterpret_cast< CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* >(object);
  (void)_this;
}
void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&purchaseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&customization_type_) -
        reinterpret_cast<char*>(&purchaseid_)) + sizeof(customization_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 purchaseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_purchaseid(&has_bits);
          purchaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProfileCustomizationType_IsValid(val))) {
            _internal_set_customization_type(static_cast<::EProfileCustomizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 purchaseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_purchaseid(), target);
  }

  // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_customization_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
  return target;
}

size_t CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 purchaseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_purchaseid());
    }

    // optional .EProfileCustomizationType customization_type = 2 [default = k_EProfileCustomizationTypeInvalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_customization_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::GetClassData() const { return &_class_data_; }

void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization &>(from));
}


void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::MergeFrom(const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      purchaseid_ = from.purchaseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      customization_type_ = from.customization_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::CopyFrom(const CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::IsInitialized() const {
  return true;
}

void CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::InternalSwap(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization, customization_type_)
      + sizeof(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::customization_type_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization, purchaseid_)>(
          reinterpret_cast<char*>(&purchaseid_),
          reinterpret_cast<char*>(&other->purchaseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[68]);
}

// ===================================================================

class CPlayer_GetPurchasedProfileCustomizations_Response::_Internal {
 public:
};

CPlayer_GetPurchasedProfileCustomizations_Response::CPlayer_GetPurchasedProfileCustomizations_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  purchased_customizations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPurchasedProfileCustomizations_Response)
}
CPlayer_GetPurchasedProfileCustomizations_Response::CPlayer_GetPurchasedProfileCustomizations_Response(const CPlayer_GetPurchasedProfileCustomizations_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      purchased_customizations_(from.purchased_customizations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPurchasedProfileCustomizations_Response)
}

inline void CPlayer_GetPurchasedProfileCustomizations_Response::SharedCtor() {
}

CPlayer_GetPurchasedProfileCustomizations_Response::~CPlayer_GetPurchasedProfileCustomizations_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPurchasedProfileCustomizations_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPurchasedProfileCustomizations_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPurchasedProfileCustomizations_Response::ArenaDtor(void* object) {
  CPlayer_GetPurchasedProfileCustomizations_Response* _this = reinterpret_cast< CPlayer_GetPurchasedProfileCustomizations_Response* >(object);
  (void)_this;
}
void CPlayer_GetPurchasedProfileCustomizations_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPurchasedProfileCustomizations_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPurchasedProfileCustomizations_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPurchasedProfileCustomizations_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purchased_customizations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPurchasedProfileCustomizations_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_purchased_customizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPurchasedProfileCustomizations_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPurchasedProfileCustomizations_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_purchased_customizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_purchased_customizations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPurchasedProfileCustomizations_Response)
  return target;
}

size_t CPlayer_GetPurchasedProfileCustomizations_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPurchasedProfileCustomizations_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetPurchasedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
  total_size += 1UL * this->_internal_purchased_customizations_size();
  for (const auto& msg : this->purchased_customizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPurchasedProfileCustomizations_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPurchasedProfileCustomizations_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPurchasedProfileCustomizations_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetPurchasedProfileCustomizations_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPurchasedProfileCustomizations_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPurchasedProfileCustomizations_Response &>(from));
}


void CPlayer_GetPurchasedProfileCustomizations_Response::MergeFrom(const CPlayer_GetPurchasedProfileCustomizations_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPurchasedProfileCustomizations_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  purchased_customizations_.MergeFrom(from.purchased_customizations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPurchasedProfileCustomizations_Response::CopyFrom(const CPlayer_GetPurchasedProfileCustomizations_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPurchasedProfileCustomizations_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPurchasedProfileCustomizations_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPurchasedProfileCustomizations_Response::InternalSwap(CPlayer_GetPurchasedProfileCustomizations_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  purchased_customizations_.InternalSwap(&other->purchased_customizations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPurchasedProfileCustomizations_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[69]);
}

// ===================================================================

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
}
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::ArenaDtor(void* object) {
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* _this = reinterpret_cast< CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* >(object);
  (void)_this;
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
  return target;
}

size_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request &>(from));
}


void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[70]);
}

// ===================================================================

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization>()._has_bits_);
  static void set_has_customization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
}
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&customization_type_, &from.customization_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&customization_type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&customization_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&customization_type_)) + sizeof(count_));
}

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::ArenaDtor(void* object) {
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* _this = reinterpret_cast< CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* >(object);
  (void)_this;
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&customization_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&customization_type_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProfileCustomizationType_IsValid(val))) {
            _internal_set_customization_type(static_cast<::EProfileCustomizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_customization_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
  return target;
}

size_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_customization_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::GetClassData() const { return &_class_data_; }

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization &>(from));
}


void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      customization_type_ = from.customization_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::IsInitialized() const {
  return true;
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization, count_)
      + sizeof(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::count_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization, customization_type_)>(
          reinterpret_cast<char*>(&customization_type_),
          reinterpret_cast<char*>(&other->customization_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[71]);
}

// ===================================================================

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization>()._has_bits_);
  static void set_has_customization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
}
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&customization_type_, &from.customization_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&customization_type_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&customization_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&customization_type_)) + sizeof(level_));
}

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::ArenaDtor(void* object) {
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* _this = reinterpret_cast< CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* >(object);
  (void)_this;
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&customization_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&customization_type_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProfileCustomizationType_IsValid(val))) {
            _internal_set_customization_type(static_cast<::EProfileCustomizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_customization_type(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
  return target;
}

size_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .EProfileCustomizationType customization_type = 1 [default = k_EProfileCustomizationTypeInvalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_customization_type());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::GetClassData() const { return &_class_data_; }

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization &>(from));
}


void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      customization_type_ = from.customization_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::IsInitialized() const {
  return true;
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization, level_)
      + sizeof(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::level_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization, customization_type_)>(
          reinterpret_cast<char*>(&customization_type_),
          reinterpret_cast<char*>(&other->customization_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[72]);
}

// ===================================================================

class CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_Internal {
 public:
};

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  purchased_customizations_(arena),
  upgraded_customizations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
}
CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      purchased_customizations_(from.purchased_customizations_),
      upgraded_customizations_(from.upgraded_customizations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::SharedCtor() {
}

CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::~CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::ArenaDtor(void* object) {
  CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* _this = reinterpret_cast< CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* >(object);
  (void)_this;
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purchased_customizations_.Clear();
  upgraded_customizations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_purchased_customizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization upgraded_customizations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upgraded_customizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_purchased_customizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_purchased_customizations(i), target, stream);
  }

  // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization upgraded_customizations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_upgraded_customizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_upgraded_customizations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
  return target;
}

size_t CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.PurchasedCustomization purchased_customizations = 1;
  total_size += 1UL * this->_internal_purchased_customizations_size();
  for (const auto& msg : this->purchased_customizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response.UpgradedCustomization upgraded_customizations = 2;
  total_size += 1UL * this->_internal_upgraded_customizations_size();
  for (const auto& msg : this->upgraded_customizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response &>(from));
}


void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::MergeFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  purchased_customizations_.MergeFrom(from.purchased_customizations_);
  upgraded_customizations_.MergeFrom(from.upgraded_customizations_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::CopyFrom(const CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::InternalSwap(CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  purchased_customizations_.InternalSwap(&other->purchased_customizations_);
  upgraded_customizations_.InternalSwap(&other->upgraded_customizations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[73]);
}

// ===================================================================

class CPlayer_GetProfileThemesAvailable_Request::_Internal {
 public:
};

CPlayer_GetProfileThemesAvailable_Request::CPlayer_GetProfileThemesAvailable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileThemesAvailable_Request)
}
CPlayer_GetProfileThemesAvailable_Request::CPlayer_GetProfileThemesAvailable_Request(const CPlayer_GetProfileThemesAvailable_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileThemesAvailable_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileThemesAvailable_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileThemesAvailable_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileThemesAvailable_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[74]);
}

// ===================================================================

class CPlayer_GetProfileThemesAvailable_Response::_Internal {
 public:
};

CPlayer_GetProfileThemesAvailable_Response::CPlayer_GetProfileThemesAvailable_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  profile_themes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetProfileThemesAvailable_Response)
}
CPlayer_GetProfileThemesAvailable_Response::CPlayer_GetProfileThemesAvailable_Response(const CPlayer_GetProfileThemesAvailable_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      profile_themes_(from.profile_themes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetProfileThemesAvailable_Response)
}

inline void CPlayer_GetProfileThemesAvailable_Response::SharedCtor() {
}

CPlayer_GetProfileThemesAvailable_Response::~CPlayer_GetProfileThemesAvailable_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetProfileThemesAvailable_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetProfileThemesAvailable_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetProfileThemesAvailable_Response::ArenaDtor(void* object) {
  CPlayer_GetProfileThemesAvailable_Response* _this = reinterpret_cast< CPlayer_GetProfileThemesAvailable_Response* >(object);
  (void)_this;
}
void CPlayer_GetProfileThemesAvailable_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetProfileThemesAvailable_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetProfileThemesAvailable_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetProfileThemesAvailable_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_themes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetProfileThemesAvailable_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProfileTheme profile_themes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profile_themes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetProfileThemesAvailable_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetProfileThemesAvailable_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProfileTheme profile_themes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profile_themes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_profile_themes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetProfileThemesAvailable_Response)
  return target;
}

size_t CPlayer_GetProfileThemesAvailable_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetProfileThemesAvailable_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProfileTheme profile_themes = 1;
  total_size += 1UL * this->_internal_profile_themes_size();
  for (const auto& msg : this->profile_themes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetProfileThemesAvailable_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetProfileThemesAvailable_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetProfileThemesAvailable_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetProfileThemesAvailable_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetProfileThemesAvailable_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetProfileThemesAvailable_Response &>(from));
}


void CPlayer_GetProfileThemesAvailable_Response::MergeFrom(const CPlayer_GetProfileThemesAvailable_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetProfileThemesAvailable_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  profile_themes_.MergeFrom(from.profile_themes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetProfileThemesAvailable_Response::CopyFrom(const CPlayer_GetProfileThemesAvailable_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetProfileThemesAvailable_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetProfileThemesAvailable_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetProfileThemesAvailable_Response::InternalSwap(CPlayer_GetProfileThemesAvailable_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  profile_themes_.InternalSwap(&other->profile_themes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetProfileThemesAvailable_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[75]);
}

// ===================================================================

class CPlayer_SetProfileTheme_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetProfileTheme_Request>()._has_bits_);
  static void set_has_theme_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_SetProfileTheme_Request::CPlayer_SetProfileTheme_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetProfileTheme_Request)
}
CPlayer_SetProfileTheme_Request::CPlayer_SetProfileTheme_Request(const CPlayer_SetProfileTheme_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_theme_id()) {
    theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_theme_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetProfileTheme_Request)
}

inline void CPlayer_SetProfileTheme_Request::SharedCtor() {
theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  theme_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPlayer_SetProfileTheme_Request::~CPlayer_SetProfileTheme_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetProfileTheme_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetProfileTheme_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  theme_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_SetProfileTheme_Request::ArenaDtor(void* object) {
  CPlayer_SetProfileTheme_Request* _this = reinterpret_cast< CPlayer_SetProfileTheme_Request* >(object);
  (void)_this;
}
void CPlayer_SetProfileTheme_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetProfileTheme_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetProfileTheme_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetProfileTheme_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    theme_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetProfileTheme_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string theme_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_theme_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_SetProfileTheme_Request.theme_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetProfileTheme_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetProfileTheme_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string theme_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_theme_id().data(), static_cast<int>(this->_internal_theme_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_SetProfileTheme_Request.theme_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_theme_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetProfileTheme_Request)
  return target;
}

size_t CPlayer_SetProfileTheme_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetProfileTheme_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string theme_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_theme_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetProfileTheme_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetProfileTheme_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetProfileTheme_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetProfileTheme_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetProfileTheme_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetProfileTheme_Request &>(from));
}


void CPlayer_SetProfileTheme_Request::MergeFrom(const CPlayer_SetProfileTheme_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetProfileTheme_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_theme_id()) {
    _internal_set_theme_id(from._internal_theme_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetProfileTheme_Request::CopyFrom(const CPlayer_SetProfileTheme_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetProfileTheme_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetProfileTheme_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetProfileTheme_Request::InternalSwap(CPlayer_SetProfileTheme_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &theme_id_, lhs_arena,
      &other->theme_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetProfileTheme_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[76]);
}

// ===================================================================

class CPlayer_SetProfileTheme_Response::_Internal {
 public:
};

CPlayer_SetProfileTheme_Response::CPlayer_SetProfileTheme_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetProfileTheme_Response)
}
CPlayer_SetProfileTheme_Response::CPlayer_SetProfileTheme_Response(const CPlayer_SetProfileTheme_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetProfileTheme_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetProfileTheme_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetProfileTheme_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetProfileTheme_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[77]);
}

// ===================================================================

class CPlayer_SetProfilePreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetProfilePreferences_Request>()._has_bits_);
  static const ::ProfilePreferences& profile_preferences(const CPlayer_SetProfilePreferences_Request* msg);
  static void set_has_profile_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ProfilePreferences&
CPlayer_SetProfilePreferences_Request::_Internal::profile_preferences(const CPlayer_SetProfilePreferences_Request* msg) {
  return *msg->profile_preferences_;
}
CPlayer_SetProfilePreferences_Request::CPlayer_SetProfilePreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetProfilePreferences_Request)
}
CPlayer_SetProfilePreferences_Request::CPlayer_SetProfilePreferences_Request(const CPlayer_SetProfilePreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profile_preferences()) {
    profile_preferences_ = new ::ProfilePreferences(*from.profile_preferences_);
  } else {
    profile_preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetProfilePreferences_Request)
}

inline void CPlayer_SetProfilePreferences_Request::SharedCtor() {
profile_preferences_ = nullptr;
}

CPlayer_SetProfilePreferences_Request::~CPlayer_SetProfilePreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetProfilePreferences_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetProfilePreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete profile_preferences_;
}

void CPlayer_SetProfilePreferences_Request::ArenaDtor(void* object) {
  CPlayer_SetProfilePreferences_Request* _this = reinterpret_cast< CPlayer_SetProfilePreferences_Request* >(object);
  (void)_this;
}
void CPlayer_SetProfilePreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetProfilePreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetProfilePreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetProfilePreferences_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(profile_preferences_ != nullptr);
    profile_preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetProfilePreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ProfilePreferences profile_preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetProfilePreferences_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetProfilePreferences_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProfilePreferences profile_preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::profile_preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetProfilePreferences_Request)
  return target;
}

size_t CPlayer_SetProfilePreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetProfilePreferences_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProfilePreferences profile_preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profile_preferences_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetProfilePreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetProfilePreferences_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetProfilePreferences_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetProfilePreferences_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetProfilePreferences_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetProfilePreferences_Request &>(from));
}


void CPlayer_SetProfilePreferences_Request::MergeFrom(const CPlayer_SetProfilePreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetProfilePreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_profile_preferences()) {
    _internal_mutable_profile_preferences()->::ProfilePreferences::MergeFrom(from._internal_profile_preferences());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetProfilePreferences_Request::CopyFrom(const CPlayer_SetProfilePreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetProfilePreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetProfilePreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetProfilePreferences_Request::InternalSwap(CPlayer_SetProfilePreferences_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(profile_preferences_, other->profile_preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetProfilePreferences_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[78]);
}

// ===================================================================

class CPlayer_SetProfilePreferences_Response::_Internal {
 public:
};

CPlayer_SetProfilePreferences_Response::CPlayer_SetProfilePreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetProfilePreferences_Response)
}
CPlayer_SetProfilePreferences_Response::CPlayer_SetProfilePreferences_Response(const CPlayer_SetProfilePreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetProfilePreferences_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetProfilePreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetProfilePreferences_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetProfilePreferences_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[79]);
}

// ===================================================================

class CPlayer_PostStatusToFriends_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_PostStatusToFriends_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_PostStatusToFriends_Request::CPlayer_PostStatusToFriends_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_PostStatusToFriends_Request)
}
CPlayer_PostStatusToFriends_Request::CPlayer_PostStatusToFriends_Request(const CPlayer_PostStatusToFriends_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status_text()) {
    status_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_text(), 
      GetArenaForAllocation());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_PostStatusToFriends_Request)
}

inline void CPlayer_PostStatusToFriends_Request::SharedCtor() {
status_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_ = 0u;
}

CPlayer_PostStatusToFriends_Request::~CPlayer_PostStatusToFriends_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_PostStatusToFriends_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_PostStatusToFriends_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_PostStatusToFriends_Request::ArenaDtor(void* object) {
  CPlayer_PostStatusToFriends_Request* _this = reinterpret_cast< CPlayer_PostStatusToFriends_Request* >(object);
  (void)_this;
}
void CPlayer_PostStatusToFriends_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_PostStatusToFriends_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_PostStatusToFriends_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_PostStatusToFriends_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_text_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_PostStatusToFriends_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string status_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_PostStatusToFriends_Request.status_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_PostStatusToFriends_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_PostStatusToFriends_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string status_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_text().data(), static_cast<int>(this->_internal_status_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_PostStatusToFriends_Request.status_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_PostStatusToFriends_Request)
  return target;
}

size_t CPlayer_PostStatusToFriends_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_PostStatusToFriends_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string status_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status_text());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_PostStatusToFriends_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_PostStatusToFriends_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_PostStatusToFriends_Request::GetClassData() const { return &_class_data_; }

void CPlayer_PostStatusToFriends_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_PostStatusToFriends_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_PostStatusToFriends_Request &>(from));
}


void CPlayer_PostStatusToFriends_Request::MergeFrom(const CPlayer_PostStatusToFriends_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_PostStatusToFriends_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status_text(from._internal_status_text());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_PostStatusToFriends_Request::CopyFrom(const CPlayer_PostStatusToFriends_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_PostStatusToFriends_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_PostStatusToFriends_Request::IsInitialized() const {
  return true;
}

void CPlayer_PostStatusToFriends_Request::InternalSwap(CPlayer_PostStatusToFriends_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_text_, lhs_arena,
      &other->status_text_, rhs_arena
  );
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_PostStatusToFriends_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[80]);
}

// ===================================================================

class CPlayer_PostStatusToFriends_Response::_Internal {
 public:
};

CPlayer_PostStatusToFriends_Response::CPlayer_PostStatusToFriends_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_PostStatusToFriends_Response)
}
CPlayer_PostStatusToFriends_Response::CPlayer_PostStatusToFriends_Response(const CPlayer_PostStatusToFriends_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_PostStatusToFriends_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_PostStatusToFriends_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_PostStatusToFriends_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_PostStatusToFriends_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[81]);
}

// ===================================================================

class CPlayer_GetPostedStatus_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPostedStatus_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_postid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_GetPostedStatus_Request::CPlayer_GetPostedStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPostedStatus_Request)
}
CPlayer_GetPostedStatus_Request::CPlayer_GetPostedStatus_Request(const CPlayer_GetPostedStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&postid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(postid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPostedStatus_Request)
}

inline void CPlayer_GetPostedStatus_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&postid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(postid_));
}

CPlayer_GetPostedStatus_Request::~CPlayer_GetPostedStatus_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPostedStatus_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPostedStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPostedStatus_Request::ArenaDtor(void* object) {
  CPlayer_GetPostedStatus_Request* _this = reinterpret_cast< CPlayer_GetPostedStatus_Request* >(object);
  (void)_this;
}
void CPlayer_GetPostedStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPostedStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPostedStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPostedStatus_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&postid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(postid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPostedStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 postid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_postid(&has_bits);
          postid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPostedStatus_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPostedStatus_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint64 postid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_postid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPostedStatus_Request)
  return target;
}

size_t CPlayer_GetPostedStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPostedStatus_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 1 [(.description) = "The player we\'re asking about"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint64 postid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_postid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPostedStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPostedStatus_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPostedStatus_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetPostedStatus_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPostedStatus_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPostedStatus_Request &>(from));
}


void CPlayer_GetPostedStatus_Request::MergeFrom(const CPlayer_GetPostedStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPostedStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      postid_ = from.postid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPostedStatus_Request::CopyFrom(const CPlayer_GetPostedStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPostedStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPostedStatus_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetPostedStatus_Request::InternalSwap(CPlayer_GetPostedStatus_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetPostedStatus_Request, postid_)
      + sizeof(CPlayer_GetPostedStatus_Request::postid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetPostedStatus_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPostedStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[82]);
}

// ===================================================================

class CPlayer_GetPostedStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPostedStatus_Response>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_postid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetPostedStatus_Response::CPlayer_GetPostedStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPostedStatus_Response)
}
CPlayer_GetPostedStatus_Response::CPlayer_GetPostedStatus_Response(const CPlayer_GetPostedStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status_text()) {
    status_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&postid_, &from.postid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&postid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPostedStatus_Response)
}

inline void CPlayer_GetPostedStatus_Response::SharedCtor() {
status_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&postid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&postid_)) + sizeof(appid_));
}

CPlayer_GetPostedStatus_Response::~CPlayer_GetPostedStatus_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPostedStatus_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPostedStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetPostedStatus_Response::ArenaDtor(void* object) {
  CPlayer_GetPostedStatus_Response* _this = reinterpret_cast< CPlayer_GetPostedStatus_Response* >(object);
  (void)_this;
}
void CPlayer_GetPostedStatus_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPostedStatus_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPostedStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPostedStatus_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&postid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&postid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPostedStatus_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 postid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_postid(&has_bits);
          postid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string status_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetPostedStatus_Response.status_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool deleted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deleted(&has_bits);
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPostedStatus_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPostedStatus_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 postid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_postid(), target);
  }

  // optional string status_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_text().data(), static_cast<int>(this->_internal_status_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetPostedStatus_Response.status_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status_text(), target);
  }

  // optional bool deleted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_deleted(), target);
  }

  // optional uint32 appid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPostedStatus_Response)
  return target;
}

size_t CPlayer_GetPostedStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPostedStatus_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string status_text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status_text());
    }

    // optional uint64 postid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_postid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional bool deleted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPostedStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPostedStatus_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPostedStatus_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetPostedStatus_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPostedStatus_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPostedStatus_Response &>(from));
}


void CPlayer_GetPostedStatus_Response::MergeFrom(const CPlayer_GetPostedStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPostedStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status_text(from._internal_status_text());
    }
    if (cached_has_bits & 0x00000002u) {
      postid_ = from.postid_;
    }
    if (cached_has_bits & 0x00000004u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      deleted_ = from.deleted_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPostedStatus_Response::CopyFrom(const CPlayer_GetPostedStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPostedStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPostedStatus_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPostedStatus_Response::InternalSwap(CPlayer_GetPostedStatus_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_text_, lhs_arena,
      &other->status_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetPostedStatus_Response, appid_)
      + sizeof(CPlayer_GetPostedStatus_Response::appid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetPostedStatus_Response, postid_)>(
          reinterpret_cast<char*>(&postid_),
          reinterpret_cast<char*>(&other->postid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPostedStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[83]);
}

// ===================================================================

class CPlayer_DeletePostedStatus_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_DeletePostedStatus_Request>()._has_bits_);
  static void set_has_postid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_DeletePostedStatus_Request::CPlayer_DeletePostedStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_DeletePostedStatus_Request)
}
CPlayer_DeletePostedStatus_Request::CPlayer_DeletePostedStatus_Request(const CPlayer_DeletePostedStatus_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  postid_ = from.postid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_DeletePostedStatus_Request)
}

inline void CPlayer_DeletePostedStatus_Request::SharedCtor() {
postid_ = uint64_t{0u};
}

CPlayer_DeletePostedStatus_Request::~CPlayer_DeletePostedStatus_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_DeletePostedStatus_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_DeletePostedStatus_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_DeletePostedStatus_Request::ArenaDtor(void* object) {
  CPlayer_DeletePostedStatus_Request* _this = reinterpret_cast< CPlayer_DeletePostedStatus_Request* >(object);
  (void)_this;
}
void CPlayer_DeletePostedStatus_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_DeletePostedStatus_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_DeletePostedStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_DeletePostedStatus_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  postid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_DeletePostedStatus_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 postid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_postid(&has_bits);
          postid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_DeletePostedStatus_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_DeletePostedStatus_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 postid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_postid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_DeletePostedStatus_Request)
  return target;
}

size_t CPlayer_DeletePostedStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_DeletePostedStatus_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 postid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_postid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_DeletePostedStatus_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_DeletePostedStatus_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_DeletePostedStatus_Request::GetClassData() const { return &_class_data_; }

void CPlayer_DeletePostedStatus_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_DeletePostedStatus_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_DeletePostedStatus_Request &>(from));
}


void CPlayer_DeletePostedStatus_Request::MergeFrom(const CPlayer_DeletePostedStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_DeletePostedStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_postid()) {
    _internal_set_postid(from._internal_postid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_DeletePostedStatus_Request::CopyFrom(const CPlayer_DeletePostedStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_DeletePostedStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_DeletePostedStatus_Request::IsInitialized() const {
  return true;
}

void CPlayer_DeletePostedStatus_Request::InternalSwap(CPlayer_DeletePostedStatus_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(postid_, other->postid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_DeletePostedStatus_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[84]);
}

// ===================================================================

class CPlayer_DeletePostedStatus_Response::_Internal {
 public:
};

CPlayer_DeletePostedStatus_Response::CPlayer_DeletePostedStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_DeletePostedStatus_Response)
}
CPlayer_DeletePostedStatus_Response::CPlayer_DeletePostedStatus_Response(const CPlayer_DeletePostedStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_DeletePostedStatus_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_DeletePostedStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_DeletePostedStatus_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_DeletePostedStatus_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[85]);
}

// ===================================================================

class CPlayer_GetLastPlayedTimes_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetLastPlayedTimes_Request>()._has_bits_);
  static void set_has_min_last_played(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Request)
}
CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  min_last_played_ = from.min_last_played_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Request)
}

inline void CPlayer_GetLastPlayedTimes_Request::SharedCtor() {
min_last_played_ = 0u;
}

CPlayer_GetLastPlayedTimes_Request::~CPlayer_GetLastPlayedTimes_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetLastPlayedTimes_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Request::ArenaDtor(void* object) {
  CPlayer_GetLastPlayedTimes_Request* _this = reinterpret_cast< CPlayer_GetLastPlayedTimes_Request* >(object);
  (void)_this;
}
void CPlayer_GetLastPlayedTimes_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetLastPlayedTimes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_last_played_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_last_played(&has_bits);
          min_last_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetLastPlayedTimes_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_last_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Request)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_last_played());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetLastPlayedTimes_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetLastPlayedTimes_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetLastPlayedTimes_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetLastPlayedTimes_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetLastPlayedTimes_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetLastPlayedTimes_Request &>(from));
}


void CPlayer_GetLastPlayedTimes_Request::MergeFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_last_played()) {
    _internal_set_min_last_played(from._internal_min_last_played());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Request::InternalSwap(CPlayer_GetLastPlayedTimes_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_last_played_, other->min_last_played_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[86]);
}

// ===================================================================

class CPlayer_GetLastPlayedTimes_Response_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetLastPlayedTimes_Response_Game>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playtime_2weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playtime_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_playtime_windows_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playtime_mac_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_playtime_linux_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_first_windows_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_first_mac_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_first_linux_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_last_windows_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_last_mac_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_last_linux_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_playtime_disconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Response.Game)
}
CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playtime_disconnected_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(playtime_disconnected_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Response.Game)
}

inline void CPlayer_GetLastPlayedTimes_Response_Game::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playtime_disconnected_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(playtime_disconnected_));
}

CPlayer_GetLastPlayedTimes_Response_Game::~CPlayer_GetLastPlayedTimes_Response_Game() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Response.Game)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetLastPlayedTimes_Response_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Response_Game::ArenaDtor(void* object) {
  CPlayer_GetLastPlayedTimes_Response_Game* _this = reinterpret_cast< CPlayer_GetLastPlayedTimes_Response_Game* >(object);
  (void)_this;
}
void CPlayer_GetLastPlayedTimes_Response_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetLastPlayedTimes_Response_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Response_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Response.Game)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playtime_linux_forever_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(playtime_linux_forever_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&first_windows_playtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playtime_disconnected_) -
        reinterpret_cast<char*>(&first_windows_playtime_)) + sizeof(playtime_disconnected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Response_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_playtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_playtime(&has_bits);
          last_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_2weeks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_playtime_2weeks(&has_bits);
          playtime_2weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_forever = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playtime_forever(&has_bits);
          playtime_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_playtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_first_playtime(&has_bits);
          first_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_windows_forever = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_playtime_windows_forever(&has_bits);
          playtime_windows_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_mac_forever = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_playtime_mac_forever(&has_bits);
          playtime_mac_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playtime_linux_forever = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_playtime_linux_forever(&has_bits);
          playtime_linux_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_windows_playtime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_first_windows_playtime(&has_bits);
          first_windows_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_mac_playtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_first_mac_playtime(&has_bits);
          first_mac_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_linux_playtime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_first_linux_playtime(&has_bits);
          first_linux_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_windows_playtime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_last_windows_playtime(&has_bits);
          last_windows_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_mac_playtime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_last_mac_playtime(&has_bits);
          last_mac_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_linux_playtime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_last_linux_playtime(&has_bits);
          last_linux_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 playtime_disconnected = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_playtime_disconnected(&has_bits);
          playtime_disconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetLastPlayedTimes_Response_Game::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Response.Game)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 last_playtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_playtime(), target);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playtime_2weeks(), target);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_playtime_forever(), target);
  }

  // optional uint32 first_playtime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_first_playtime(), target);
  }

  // optional int32 playtime_windows_forever = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_playtime_windows_forever(), target);
  }

  // optional int32 playtime_mac_forever = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_playtime_mac_forever(), target);
  }

  // optional int32 playtime_linux_forever = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_playtime_linux_forever(), target);
  }

  // optional uint32 first_windows_playtime = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_first_windows_playtime(), target);
  }

  // optional uint32 first_mac_playtime = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_first_mac_playtime(), target);
  }

  // optional uint32 first_linux_playtime = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_first_linux_playtime(), target);
  }

  // optional uint32 last_windows_playtime = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_windows_playtime(), target);
  }

  // optional uint32 last_mac_playtime = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_last_mac_playtime(), target);
  }

  // optional uint32 last_linux_playtime = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_last_linux_playtime(), target);
  }

  // optional uint32 playtime_disconnected = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_playtime_disconnected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Response.Game)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Response.Game)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 last_playtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_playtime());
    }

    // optional int32 playtime_2weeks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_2weeks());
    }

    // optional int32 playtime_forever = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_forever());
    }

    // optional uint32 first_playtime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_playtime());
    }

    // optional int32 playtime_windows_forever = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_windows_forever());
    }

    // optional int32 playtime_mac_forever = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_mac_forever());
    }

    // optional int32 playtime_linux_forever = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_playtime_linux_forever());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 first_windows_playtime = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_windows_playtime());
    }

    // optional uint32 first_mac_playtime = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_mac_playtime());
    }

    // optional uint32 first_linux_playtime = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_linux_playtime());
    }

    // optional uint32 last_windows_playtime = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_windows_playtime());
    }

    // optional uint32 last_mac_playtime = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_mac_playtime());
    }

    // optional uint32 last_linux_playtime = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_linux_playtime());
    }

    // optional uint32 playtime_disconnected = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playtime_disconnected());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetLastPlayedTimes_Response_Game::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetLastPlayedTimes_Response_Game::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetLastPlayedTimes_Response_Game::GetClassData() const { return &_class_data_; }

void CPlayer_GetLastPlayedTimes_Response_Game::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetLastPlayedTimes_Response_Game *>(to)->MergeFrom(
      static_cast<const CPlayer_GetLastPlayedTimes_Response_Game &>(from));
}


void CPlayer_GetLastPlayedTimes_Response_Game::MergeFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_playtime_ = from.last_playtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      playtime_2weeks_ = from.playtime_2weeks_;
    }
    if (cached_has_bits & 0x00000008u) {
      playtime_forever_ = from.playtime_forever_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_playtime_ = from.first_playtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      playtime_windows_forever_ = from.playtime_windows_forever_;
    }
    if (cached_has_bits & 0x00000040u) {
      playtime_mac_forever_ = from.playtime_mac_forever_;
    }
    if (cached_has_bits & 0x00000080u) {
      playtime_linux_forever_ = from.playtime_linux_forever_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      first_windows_playtime_ = from.first_windows_playtime_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_mac_playtime_ = from.first_mac_playtime_;
    }
    if (cached_has_bits & 0x00000400u) {
      first_linux_playtime_ = from.first_linux_playtime_;
    }
    if (cached_has_bits & 0x00000800u) {
      last_windows_playtime_ = from.last_windows_playtime_;
    }
    if (cached_has_bits & 0x00001000u) {
      last_mac_playtime_ = from.last_mac_playtime_;
    }
    if (cached_has_bits & 0x00002000u) {
      last_linux_playtime_ = from.last_linux_playtime_;
    }
    if (cached_has_bits & 0x00004000u) {
      playtime_disconnected_ = from.playtime_disconnected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response_Game::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response_Game::InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, playtime_disconnected_)
      + sizeof(CPlayer_GetLastPlayedTimes_Response_Game::playtime_disconnected_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Response_Game::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[87]);
}

// ===================================================================

class CPlayer_GetLastPlayedTimes_Response::_Internal {
 public:
};

CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  games_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Response)
}
CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Response)
}

inline void CPlayer_GetLastPlayedTimes_Response::SharedCtor() {
}

CPlayer_GetLastPlayedTimes_Response::~CPlayer_GetLastPlayedTimes_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetLastPlayedTimes_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Response::ArenaDtor(void* object) {
  CPlayer_GetLastPlayedTimes_Response* _this = reinterpret_cast< CPlayer_GetLastPlayedTimes_Response* >(object);
  (void)_this;
}
void CPlayer_GetLastPlayedTimes_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetLastPlayedTimes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetLastPlayedTimes_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Response)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetLastPlayedTimes_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetLastPlayedTimes_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetLastPlayedTimes_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetLastPlayedTimes_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetLastPlayedTimes_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetLastPlayedTimes_Response &>(from));
}


void CPlayer_GetLastPlayedTimes_Response::MergeFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response::InternalSwap(CPlayer_GetLastPlayedTimes_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[88]);
}

// ===================================================================

class CPlayer_GetTimeSSAAccepted_Request::_Internal {
 public:
};

CPlayer_GetTimeSSAAccepted_Request::CPlayer_GetTimeSSAAccepted_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTimeSSAAccepted_Request)
}
CPlayer_GetTimeSSAAccepted_Request::CPlayer_GetTimeSSAAccepted_Request(const CPlayer_GetTimeSSAAccepted_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTimeSSAAccepted_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTimeSSAAccepted_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTimeSSAAccepted_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTimeSSAAccepted_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[89]);
}

// ===================================================================

class CPlayer_GetTimeSSAAccepted_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetTimeSSAAccepted_Response>()._has_bits_);
  static void set_has_time_ssa_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_ssa_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_chinassa_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetTimeSSAAccepted_Response::CPlayer_GetTimeSSAAccepted_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTimeSSAAccepted_Response)
}
CPlayer_GetTimeSSAAccepted_Response::CPlayer_GetTimeSSAAccepted_Response(const CPlayer_GetTimeSSAAccepted_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_ssa_accepted_, &from.time_ssa_accepted_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_chinassa_accepted_) -
    reinterpret_cast<char*>(&time_ssa_accepted_)) + sizeof(time_chinassa_accepted_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTimeSSAAccepted_Response)
}

inline void CPlayer_GetTimeSSAAccepted_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_ssa_accepted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_chinassa_accepted_) -
    reinterpret_cast<char*>(&time_ssa_accepted_)) + sizeof(time_chinassa_accepted_));
}

CPlayer_GetTimeSSAAccepted_Response::~CPlayer_GetTimeSSAAccepted_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetTimeSSAAccepted_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetTimeSSAAccepted_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetTimeSSAAccepted_Response::ArenaDtor(void* object) {
  CPlayer_GetTimeSSAAccepted_Response* _this = reinterpret_cast< CPlayer_GetTimeSSAAccepted_Response* >(object);
  (void)_this;
}
void CPlayer_GetTimeSSAAccepted_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetTimeSSAAccepted_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetTimeSSAAccepted_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetTimeSSAAccepted_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&time_ssa_accepted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_chinassa_accepted_) -
        reinterpret_cast<char*>(&time_ssa_accepted_)) + sizeof(time_chinassa_accepted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetTimeSSAAccepted_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 time_ssa_accepted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_ssa_accepted(&has_bits);
          time_ssa_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_ssa_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_ssa_updated(&has_bits);
          time_ssa_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_chinassa_accepted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_chinassa_accepted(&has_bits);
          time_chinassa_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetTimeSSAAccepted_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetTimeSSAAccepted_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time_ssa_accepted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_ssa_accepted(), target);
  }

  // optional uint32 time_ssa_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_ssa_updated(), target);
  }

  // optional uint32 time_chinassa_accepted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_chinassa_accepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetTimeSSAAccepted_Response)
  return target;
}

size_t CPlayer_GetTimeSSAAccepted_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetTimeSSAAccepted_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 time_ssa_accepted = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_ssa_accepted());
    }

    // optional uint32 time_ssa_updated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_ssa_updated());
    }

    // optional uint32 time_chinassa_accepted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_chinassa_accepted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTimeSSAAccepted_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetTimeSSAAccepted_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTimeSSAAccepted_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetTimeSSAAccepted_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetTimeSSAAccepted_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetTimeSSAAccepted_Response &>(from));
}


void CPlayer_GetTimeSSAAccepted_Response::MergeFrom(const CPlayer_GetTimeSSAAccepted_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetTimeSSAAccepted_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_ssa_accepted_ = from.time_ssa_accepted_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ssa_updated_ = from.time_ssa_updated_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_chinassa_accepted_ = from.time_chinassa_accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetTimeSSAAccepted_Response::CopyFrom(const CPlayer_GetTimeSSAAccepted_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetTimeSSAAccepted_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetTimeSSAAccepted_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetTimeSSAAccepted_Response::InternalSwap(CPlayer_GetTimeSSAAccepted_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetTimeSSAAccepted_Response, time_chinassa_accepted_)
      + sizeof(CPlayer_GetTimeSSAAccepted_Response::time_chinassa_accepted_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetTimeSSAAccepted_Response, time_ssa_accepted_)>(
          reinterpret_cast<char*>(&time_ssa_accepted_),
          reinterpret_cast<char*>(&other->time_ssa_accepted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTimeSSAAccepted_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[90]);
}

// ===================================================================

class CPlayer_AcceptSSA_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_AcceptSSA_Request>()._has_bits_);
  static void set_has_agreement_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_signed_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_AcceptSSA_Request)
}
CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_signed_utc_, &from.time_signed_utc_,
    static_cast<size_t>(reinterpret_cast<char*>(&agreement_type_) -
    reinterpret_cast<char*>(&time_signed_utc_)) + sizeof(agreement_type_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_AcceptSSA_Request)
}

inline void CPlayer_AcceptSSA_Request::SharedCtor() {
time_signed_utc_ = 0u;
agreement_type_ = -1;
}

CPlayer_AcceptSSA_Request::~CPlayer_AcceptSSA_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_AcceptSSA_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_AcceptSSA_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_AcceptSSA_Request::ArenaDtor(void* object) {
  CPlayer_AcceptSSA_Request* _this = reinterpret_cast< CPlayer_AcceptSSA_Request* >(object);
  (void)_this;
}
void CPlayer_AcceptSSA_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_AcceptSSA_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_AcceptSSA_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AcceptSSA_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    time_signed_utc_ = 0u;
    agreement_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AcceptSSA_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EAgreementType agreement_type = 1 [default = k_EAgreementType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EAgreementType_IsValid(val))) {
            _internal_set_agreement_type(static_cast<::EAgreementType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_signed_utc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_signed_utc(&has_bits);
          time_signed_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_AcceptSSA_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AcceptSSA_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EAgreementType agreement_type = 1 [default = k_EAgreementType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_agreement_type(), target);
  }

  // optional uint32 time_signed_utc = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_signed_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AcceptSSA_Request)
  return target;
}

size_t CPlayer_AcceptSSA_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AcceptSSA_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 time_signed_utc = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_signed_utc());
    }

    // optional .EAgreementType agreement_type = 1 [default = k_EAgreementType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_agreement_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AcceptSSA_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_AcceptSSA_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AcceptSSA_Request::GetClassData() const { return &_class_data_; }

void CPlayer_AcceptSSA_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_AcceptSSA_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_AcceptSSA_Request &>(from));
}


void CPlayer_AcceptSSA_Request::MergeFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AcceptSSA_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_signed_utc_ = from.time_signed_utc_;
    }
    if (cached_has_bits & 0x00000002u) {
      agreement_type_ = from.agreement_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_AcceptSSA_Request::CopyFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AcceptSSA_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AcceptSSA_Request::IsInitialized() const {
  return true;
}

void CPlayer_AcceptSSA_Request::InternalSwap(CPlayer_AcceptSSA_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_signed_utc_, other->time_signed_utc_);
  swap(agreement_type_, other->agreement_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AcceptSSA_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[91]);
}

// ===================================================================

class CPlayer_AcceptSSA_Response::_Internal {
 public:
};

CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_AcceptSSA_Response)
}
CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_AcceptSSA_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AcceptSSA_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AcceptSSA_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AcceptSSA_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[92]);
}

// ===================================================================

class CPlayer_GetNicknameList_Request::_Internal {
 public:
};

CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Request)
}
CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(const CPlayer_GetNicknameList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNicknameList_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNicknameList_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[93]);
}

// ===================================================================

class CPlayer_GetNicknameList_Response_PlayerNickname::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNicknameList_Response_PlayerNickname>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Response.PlayerNickname)
}
CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(const CPlayer_GetNicknameList_Response_PlayerNickname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Response.PlayerNickname)
}

inline void CPlayer_GetNicknameList_Response_PlayerNickname::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
accountid_ = 0u;
}

CPlayer_GetNicknameList_Response_PlayerNickname::~CPlayer_GetNicknameList_Response_PlayerNickname() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNicknameList_Response.PlayerNickname)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetNicknameList_Response_PlayerNickname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetNicknameList_Response_PlayerNickname::ArenaDtor(void* object) {
  CPlayer_GetNicknameList_Response_PlayerNickname* _this = reinterpret_cast< CPlayer_GetNicknameList_Response_PlayerNickname* >(object);
  (void)_this;
}
void CPlayer_GetNicknameList_Response_PlayerNickname::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNicknameList_Response_PlayerNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNicknameList_Response_PlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNicknameList_Response_PlayerNickname::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNicknameList_Response_PlayerNickname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNicknameList_Response.PlayerNickname)
  return target;
}

size_t CPlayer_GetNicknameList_Response_PlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNicknameList_Response_PlayerNickname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetNicknameList_Response_PlayerNickname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNicknameList_Response_PlayerNickname::GetClassData() const { return &_class_data_; }

void CPlayer_GetNicknameList_Response_PlayerNickname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetNicknameList_Response_PlayerNickname *>(to)->MergeFrom(
      static_cast<const CPlayer_GetNicknameList_Response_PlayerNickname &>(from));
}


void CPlayer_GetNicknameList_Response_PlayerNickname::MergeFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNicknameList_Response_PlayerNickname::CopyFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response_PlayerNickname::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response_PlayerNickname::InternalSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Response_PlayerNickname::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[94]);
}

// ===================================================================

class CPlayer_GetNicknameList_Response::_Internal {
 public:
};

CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nicknames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Response)
}
CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(const CPlayer_GetNicknameList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nicknames_(from.nicknames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Response)
}

inline void CPlayer_GetNicknameList_Response::SharedCtor() {
}

CPlayer_GetNicknameList_Response::~CPlayer_GetNicknameList_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNicknameList_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetNicknameList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetNicknameList_Response::ArenaDtor(void* object) {
  CPlayer_GetNicknameList_Response* _this = reinterpret_cast< CPlayer_GetNicknameList_Response* >(object);
  (void)_this;
}
void CPlayer_GetNicknameList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNicknameList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNicknameList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNicknameList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nicknames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNicknameList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nicknames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNicknameList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNicknameList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nicknames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nicknames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNicknameList_Response)
  return target;
}

size_t CPlayer_GetNicknameList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNicknameList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  total_size += 1UL * this->_internal_nicknames_size();
  for (const auto& msg : this->nicknames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNicknameList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetNicknameList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNicknameList_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetNicknameList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetNicknameList_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetNicknameList_Response &>(from));
}


void CPlayer_GetNicknameList_Response::MergeFrom(const CPlayer_GetNicknameList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNicknameList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nicknames_.MergeFrom(from.nicknames_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNicknameList_Response::CopyFrom(const CPlayer_GetNicknameList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNicknameList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response::InternalSwap(CPlayer_GetNicknameList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nicknames_.InternalSwap(&other->nicknames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[95]);
}

// ===================================================================

class CPlayer_GetPerFriendPreferences_Request::_Internal {
 public:
};

CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPerFriendPreferences_Request)
}
CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(const CPlayer_GetPerFriendPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPerFriendPreferences_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPerFriendPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPerFriendPreferences_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPerFriendPreferences_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[96]);
}

// ===================================================================

class PerFriendPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<PerFriendPreferences>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notifications_showingame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notifications_showonline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notifications_showmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sounds_showingame(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sounds_showonline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sounds_showmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_notifications_sendmobile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

PerFriendPreferences::PerFriendPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PerFriendPreferences)
}
PerFriendPreferences::PerFriendPreferences(const PerFriendPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notifications_sendmobile_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(notifications_sendmobile_));
  // @@protoc_insertion_point(copy_constructor:PerFriendPreferences)
}

inline void PerFriendPreferences::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notifications_sendmobile_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(notifications_sendmobile_));
}

PerFriendPreferences::~PerFriendPreferences() {
  // @@protoc_insertion_point(destructor:PerFriendPreferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PerFriendPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerFriendPreferences::ArenaDtor(void* object) {
  PerFriendPreferences* _this = reinterpret_cast< PerFriendPreferences* >(object);
  (void)_this;
}
void PerFriendPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerFriendPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerFriendPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:PerFriendPreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sounds_showmessages_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(sounds_showmessages_));
  }
  notifications_sendmobile_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerFriendPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PerFriendPreferences.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showingame(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showonline(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showmessages(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showingame(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showonline(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showmessages(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_sendmobile(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerFriendPreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PerFriendPreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PerFriendPreferences.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_notifications_showingame(), target);
  }

  // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notifications_showonline(), target);
  }

  // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_notifications_showmessages(), target);
  }

  // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sounds_showingame(), target);
  }

  // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sounds_showonline(), target);
  }

  // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_sounds_showmessages(), target);
  }

  // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_notifications_sendmobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PerFriendPreferences)
  return target;
}

size_t PerFriendPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PerFriendPreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_showingame());
    }

    // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_showonline());
    }

    // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_showmessages());
    }

    // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sounds_showingame());
    }

    // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sounds_showonline());
    }

    // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sounds_showmessages());
    }

  }
  // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_sendmobile());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerFriendPreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerFriendPreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerFriendPreferences::GetClassData() const { return &_class_data_; }

void PerFriendPreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerFriendPreferences *>(to)->MergeFrom(
      static_cast<const PerFriendPreferences &>(from));
}


void PerFriendPreferences::MergeFrom(const PerFriendPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PerFriendPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifications_showingame_ = from.notifications_showingame_;
    }
    if (cached_has_bits & 0x00000008u) {
      notifications_showonline_ = from.notifications_showonline_;
    }
    if (cached_has_bits & 0x00000010u) {
      notifications_showmessages_ = from.notifications_showmessages_;
    }
    if (cached_has_bits & 0x00000020u) {
      sounds_showingame_ = from.sounds_showingame_;
    }
    if (cached_has_bits & 0x00000040u) {
      sounds_showonline_ = from.sounds_showonline_;
    }
    if (cached_has_bits & 0x00000080u) {
      sounds_showmessages_ = from.sounds_showmessages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_notifications_sendmobile(from._internal_notifications_sendmobile());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerFriendPreferences::CopyFrom(const PerFriendPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PerFriendPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerFriendPreferences::IsInitialized() const {
  return true;
}

void PerFriendPreferences::InternalSwap(PerFriendPreferences* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerFriendPreferences, notifications_sendmobile_)
      + sizeof(PerFriendPreferences::notifications_sendmobile_)
      - PROTOBUF_FIELD_OFFSET(PerFriendPreferences, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerFriendPreferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[97]);
}

// ===================================================================

class CPlayer_GetPerFriendPreferences_Response::_Internal {
 public:
};

CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  preferences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPerFriendPreferences_Response)
}
CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(const CPlayer_GetPerFriendPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      preferences_(from.preferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPerFriendPreferences_Response)
}

inline void CPlayer_GetPerFriendPreferences_Response::SharedCtor() {
}

CPlayer_GetPerFriendPreferences_Response::~CPlayer_GetPerFriendPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPerFriendPreferences_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPerFriendPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetPerFriendPreferences_Response::ArenaDtor(void* object) {
  CPlayer_GetPerFriendPreferences_Response* _this = reinterpret_cast< CPlayer_GetPerFriendPreferences_Response* >(object);
  (void)_this;
}
void CPlayer_GetPerFriendPreferences_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPerFriendPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPerFriendPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPerFriendPreferences_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferences_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPerFriendPreferences_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PerFriendPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPerFriendPreferences_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPerFriendPreferences_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PerFriendPreferences preferences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_preferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_preferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPerFriendPreferences_Response)
  return target;
}

size_t CPlayer_GetPerFriendPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPerFriendPreferences_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PerFriendPreferences preferences = 1;
  total_size += 1UL * this->_internal_preferences_size();
  for (const auto& msg : this->preferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPerFriendPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPerFriendPreferences_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPerFriendPreferences_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetPerFriendPreferences_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPerFriendPreferences_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPerFriendPreferences_Response &>(from));
}


void CPlayer_GetPerFriendPreferences_Response::MergeFrom(const CPlayer_GetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  preferences_.MergeFrom(from.preferences_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPerFriendPreferences_Response::CopyFrom(const CPlayer_GetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPerFriendPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPerFriendPreferences_Response::InternalSwap(CPlayer_GetPerFriendPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  preferences_.InternalSwap(&other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPerFriendPreferences_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[98]);
}

// ===================================================================

class CPlayer_SetPerFriendPreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetPerFriendPreferences_Request>()._has_bits_);
  static const ::PerFriendPreferences& preferences(const CPlayer_SetPerFriendPreferences_Request* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PerFriendPreferences&
CPlayer_SetPerFriendPreferences_Request::_Internal::preferences(const CPlayer_SetPerFriendPreferences_Request* msg) {
  return *msg->preferences_;
}
CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetPerFriendPreferences_Request)
}
CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(const CPlayer_SetPerFriendPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::PerFriendPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetPerFriendPreferences_Request)
}

inline void CPlayer_SetPerFriendPreferences_Request::SharedCtor() {
preferences_ = nullptr;
}

CPlayer_SetPerFriendPreferences_Request::~CPlayer_SetPerFriendPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetPerFriendPreferences_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetPerFriendPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_SetPerFriendPreferences_Request::ArenaDtor(void* object) {
  CPlayer_SetPerFriendPreferences_Request* _this = reinterpret_cast< CPlayer_SetPerFriendPreferences_Request* >(object);
  (void)_this;
}
void CPlayer_SetPerFriendPreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetPerFriendPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetPerFriendPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetPerFriendPreferences_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetPerFriendPreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PerFriendPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetPerFriendPreferences_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetPerFriendPreferences_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PerFriendPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetPerFriendPreferences_Request)
  return target;
}

size_t CPlayer_SetPerFriendPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetPerFriendPreferences_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PerFriendPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetPerFriendPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetPerFriendPreferences_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetPerFriendPreferences_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetPerFriendPreferences_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetPerFriendPreferences_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetPerFriendPreferences_Request &>(from));
}


void CPlayer_SetPerFriendPreferences_Request::MergeFrom(const CPlayer_SetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _internal_mutable_preferences()->::PerFriendPreferences::MergeFrom(from._internal_preferences());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetPerFriendPreferences_Request::CopyFrom(const CPlayer_SetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetPerFriendPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetPerFriendPreferences_Request::InternalSwap(CPlayer_SetPerFriendPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetPerFriendPreferences_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[99]);
}

// ===================================================================

class CPlayer_SetPerFriendPreferences_Response::_Internal {
 public:
};

CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetPerFriendPreferences_Response)
}
CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(const CPlayer_SetPerFriendPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetPerFriendPreferences_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetPerFriendPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetPerFriendPreferences_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetPerFriendPreferences_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[100]);
}

// ===================================================================

class CPlayer_AddFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_AddFriend_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_AddFriend_Request)
}
CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(const CPlayer_AddFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_AddFriend_Request)
}

inline void CPlayer_AddFriend_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CPlayer_AddFriend_Request::~CPlayer_AddFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_AddFriend_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_AddFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_AddFriend_Request::ArenaDtor(void* object) {
  CPlayer_AddFriend_Request* _this = reinterpret_cast< CPlayer_AddFriend_Request* >(object);
  (void)_this;
}
void CPlayer_AddFriend_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_AddFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_AddFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AddFriend_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AddFriend_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_AddFriend_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AddFriend_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AddFriend_Request)
  return target;
}

size_t CPlayer_AddFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AddFriend_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AddFriend_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_AddFriend_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AddFriend_Request::GetClassData() const { return &_class_data_; }

void CPlayer_AddFriend_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_AddFriend_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_AddFriend_Request &>(from));
}


void CPlayer_AddFriend_Request::MergeFrom(const CPlayer_AddFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AddFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_AddFriend_Request::CopyFrom(const CPlayer_AddFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AddFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Request::InternalSwap(CPlayer_AddFriend_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AddFriend_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[101]);
}

// ===================================================================

class CPlayer_AddFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_AddFriend_Response>()._has_bits_);
  static void set_has_invite_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_AddFriend_Response)
}
CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(const CPlayer_AddFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&invite_sent_, &from.invite_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&invite_sent_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_AddFriend_Response)
}

inline void CPlayer_AddFriend_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invite_sent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&invite_sent_)) + sizeof(result_));
}

CPlayer_AddFriend_Response::~CPlayer_AddFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_AddFriend_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_AddFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_AddFriend_Response::ArenaDtor(void* object) {
  CPlayer_AddFriend_Response* _this = reinterpret_cast< CPlayer_AddFriend_Response* >(object);
  (void)_this;
}
void CPlayer_AddFriend_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_AddFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_AddFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AddFriend_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&invite_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&invite_sent_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AddFriend_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_invite_sent(&has_bits);
          invite_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_friend_relationship(&has_bits);
          friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_AddFriend_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AddFriend_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_invite_sent(), target);
  }

  // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_friend_relationship(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AddFriend_Response)
  return target;
}

size_t CPlayer_AddFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AddFriend_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_relationship());
    }

    // optional int32 result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_AddFriend_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_AddFriend_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_AddFriend_Response::GetClassData() const { return &_class_data_; }

void CPlayer_AddFriend_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_AddFriend_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_AddFriend_Response &>(from));
}


void CPlayer_AddFriend_Response::MergeFrom(const CPlayer_AddFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AddFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      invite_sent_ = from.invite_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      friend_relationship_ = from.friend_relationship_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_AddFriend_Response::CopyFrom(const CPlayer_AddFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AddFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Response::InternalSwap(CPlayer_AddFriend_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_AddFriend_Response, result_)
      + sizeof(CPlayer_AddFriend_Response::result_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_AddFriend_Response, invite_sent_)>(
          reinterpret_cast<char*>(&invite_sent_),
          reinterpret_cast<char*>(&other->invite_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AddFriend_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[102]);
}

// ===================================================================

class CPlayer_RemoveFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_RemoveFriend_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_RemoveFriend_Request)
}
CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(const CPlayer_RemoveFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_RemoveFriend_Request)
}

inline void CPlayer_RemoveFriend_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CPlayer_RemoveFriend_Request::~CPlayer_RemoveFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_RemoveFriend_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_RemoveFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_RemoveFriend_Request::ArenaDtor(void* object) {
  CPlayer_RemoveFriend_Request* _this = reinterpret_cast< CPlayer_RemoveFriend_Request* >(object);
  (void)_this;
}
void CPlayer_RemoveFriend_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_RemoveFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_RemoveFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RemoveFriend_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RemoveFriend_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_RemoveFriend_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RemoveFriend_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RemoveFriend_Request)
  return target;
}

size_t CPlayer_RemoveFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RemoveFriend_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_RemoveFriend_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_RemoveFriend_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_RemoveFriend_Request::GetClassData() const { return &_class_data_; }

void CPlayer_RemoveFriend_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_RemoveFriend_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_RemoveFriend_Request &>(from));
}


void CPlayer_RemoveFriend_Request::MergeFrom(const CPlayer_RemoveFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RemoveFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_RemoveFriend_Request::CopyFrom(const CPlayer_RemoveFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RemoveFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Request::InternalSwap(CPlayer_RemoveFriend_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RemoveFriend_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[103]);
}

// ===================================================================

class CPlayer_RemoveFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_RemoveFriend_Response>()._has_bits_);
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_RemoveFriend_Response)
}
CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(const CPlayer_RemoveFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friend_relationship_ = from.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_RemoveFriend_Response)
}

inline void CPlayer_RemoveFriend_Response::SharedCtor() {
friend_relationship_ = 0u;
}

CPlayer_RemoveFriend_Response::~CPlayer_RemoveFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_RemoveFriend_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_RemoveFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_RemoveFriend_Response::ArenaDtor(void* object) {
  CPlayer_RemoveFriend_Response* _this = reinterpret_cast< CPlayer_RemoveFriend_Response* >(object);
  (void)_this;
}
void CPlayer_RemoveFriend_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_RemoveFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_RemoveFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RemoveFriend_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_relationship_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RemoveFriend_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friend_relationship(&has_bits);
          friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_RemoveFriend_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RemoveFriend_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RemoveFriend_Response)
  return target;
}

size_t CPlayer_RemoveFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RemoveFriend_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_relationship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_RemoveFriend_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_RemoveFriend_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_RemoveFriend_Response::GetClassData() const { return &_class_data_; }

void CPlayer_RemoveFriend_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_RemoveFriend_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_RemoveFriend_Response &>(from));
}


void CPlayer_RemoveFriend_Response::MergeFrom(const CPlayer_RemoveFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RemoveFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_relationship()) {
    _internal_set_friend_relationship(from._internal_friend_relationship());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_RemoveFriend_Response::CopyFrom(const CPlayer_RemoveFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RemoveFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Response::InternalSwap(CPlayer_RemoveFriend_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friend_relationship_, other->friend_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RemoveFriend_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[104]);
}

// ===================================================================

class CPlayer_IgnoreFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IgnoreFriend_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unignore(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_IgnoreFriend_Request)
}
CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(const CPlayer_IgnoreFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unignore_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_IgnoreFriend_Request)
}

inline void CPlayer_IgnoreFriend_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unignore_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
}

CPlayer_IgnoreFriend_Request::~CPlayer_IgnoreFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_IgnoreFriend_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_IgnoreFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_IgnoreFriend_Request::ArenaDtor(void* object) {
  CPlayer_IgnoreFriend_Request* _this = reinterpret_cast< CPlayer_IgnoreFriend_Request* >(object);
  (void)_this;
}
void CPlayer_IgnoreFriend_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_IgnoreFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_IgnoreFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IgnoreFriend_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unignore_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IgnoreFriend_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unignore(&has_bits);
          unignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_IgnoreFriend_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IgnoreFriend_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unignore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IgnoreFriend_Request)
  return target;
}

size_t CPlayer_IgnoreFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IgnoreFriend_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_IgnoreFriend_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_IgnoreFriend_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_IgnoreFriend_Request::GetClassData() const { return &_class_data_; }

void CPlayer_IgnoreFriend_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_IgnoreFriend_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_IgnoreFriend_Request &>(from));
}


void CPlayer_IgnoreFriend_Request::MergeFrom(const CPlayer_IgnoreFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IgnoreFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      unignore_ = from.unignore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_IgnoreFriend_Request::CopyFrom(const CPlayer_IgnoreFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IgnoreFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Request::InternalSwap(CPlayer_IgnoreFriend_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_IgnoreFriend_Request, unignore_)
      + sizeof(CPlayer_IgnoreFriend_Request::unignore_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_IgnoreFriend_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IgnoreFriend_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[105]);
}

// ===================================================================

class CPlayer_IgnoreFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IgnoreFriend_Response>()._has_bits_);
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_IgnoreFriend_Response)
}
CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(const CPlayer_IgnoreFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friend_relationship_ = from.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_IgnoreFriend_Response)
}

inline void CPlayer_IgnoreFriend_Response::SharedCtor() {
friend_relationship_ = 0u;
}

CPlayer_IgnoreFriend_Response::~CPlayer_IgnoreFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_IgnoreFriend_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_IgnoreFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_IgnoreFriend_Response::ArenaDtor(void* object) {
  CPlayer_IgnoreFriend_Response* _this = reinterpret_cast< CPlayer_IgnoreFriend_Response* >(object);
  (void)_this;
}
void CPlayer_IgnoreFriend_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_IgnoreFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_IgnoreFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IgnoreFriend_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_relationship_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IgnoreFriend_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_friend_relationship(&has_bits);
          friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_IgnoreFriend_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IgnoreFriend_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IgnoreFriend_Response)
  return target;
}

size_t CPlayer_IgnoreFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IgnoreFriend_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_friend_relationship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_IgnoreFriend_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_IgnoreFriend_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_IgnoreFriend_Response::GetClassData() const { return &_class_data_; }

void CPlayer_IgnoreFriend_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_IgnoreFriend_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_IgnoreFriend_Response &>(from));
}


void CPlayer_IgnoreFriend_Response::MergeFrom(const CPlayer_IgnoreFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IgnoreFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_relationship()) {
    _internal_set_friend_relationship(from._internal_friend_relationship());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_IgnoreFriend_Response::CopyFrom(const CPlayer_IgnoreFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IgnoreFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Response::InternalSwap(CPlayer_IgnoreFriend_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friend_relationship_, other->friend_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IgnoreFriend_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[106]);
}

// ===================================================================

class CPlayer_GetCommunityPreferences_Request::_Internal {
 public:
};

CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetCommunityPreferences_Request)
}
CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(const CPlayer_GetCommunityPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetCommunityPreferences_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetCommunityPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetCommunityPreferences_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetCommunityPreferences_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[107]);
}

// ===================================================================

class CPlayer_CommunityPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_CommunityPreferences>()._has_bits_);
  static void set_has_parenthesize_nicknames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_filter_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text_filter_ignore_friends(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_text_filter_words_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_CommunityPreferences)
}
CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(const CPlayer_CommunityPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_updated_, &from.timestamp_updated_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_filter_ignore_friends_) -
    reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(text_filter_ignore_friends_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_CommunityPreferences)
}

inline void CPlayer_CommunityPreferences::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_updated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&text_filter_words_revision_) -
    reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(text_filter_words_revision_));
text_filter_ignore_friends_ = true;
}

CPlayer_CommunityPreferences::~CPlayer_CommunityPreferences() {
  // @@protoc_insertion_point(destructor:CPlayer_CommunityPreferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_CommunityPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_CommunityPreferences::ArenaDtor(void* object) {
  CPlayer_CommunityPreferences* _this = reinterpret_cast< CPlayer_CommunityPreferences* >(object);
  (void)_this;
}
void CPlayer_CommunityPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_CommunityPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_CommunityPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_CommunityPreferences)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&timestamp_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_filter_words_revision_) -
        reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(text_filter_words_revision_));
    text_filter_ignore_friends_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_CommunityPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp_updated(&has_bits);
          timestamp_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool parenthesize_nicknames = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_parenthesize_nicknames(&has_bits);
          parenthesize_nicknames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ETextFilterSetting text_filter_setting = 5 [default = k_ETextFilterSettingSteamLabOptedOut];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETextFilterSetting_IsValid(val))) {
            _internal_set_text_filter_setting(static_cast<::ETextFilterSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool text_filter_ignore_friends = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_text_filter_ignore_friends(&has_bits);
          text_filter_ignore_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 text_filter_words_revision = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_text_filter_words_revision(&has_bits);
          text_filter_words_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_CommunityPreferences::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_CommunityPreferences)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp_updated = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp_updated(), target);
  }

  // optional bool parenthesize_nicknames = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_parenthesize_nicknames(), target);
  }

  // optional .ETextFilterSetting text_filter_setting = 5 [default = k_ETextFilterSettingSteamLabOptedOut];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_text_filter_setting(), target);
  }

  // optional bool text_filter_ignore_friends = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_text_filter_ignore_friends(), target);
  }

  // optional uint32 text_filter_words_revision = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_text_filter_words_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_CommunityPreferences)
  return target;
}

size_t CPlayer_CommunityPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_CommunityPreferences)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 timestamp_updated = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_updated());
    }

    // optional bool parenthesize_nicknames = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .ETextFilterSetting text_filter_setting = 5 [default = k_ETextFilterSettingSteamLabOptedOut];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_filter_setting());
    }

    // optional uint32 text_filter_words_revision = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_text_filter_words_revision());
    }

    // optional bool text_filter_ignore_friends = 6 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_CommunityPreferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_CommunityPreferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_CommunityPreferences::GetClassData() const { return &_class_data_; }

void CPlayer_CommunityPreferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_CommunityPreferences *>(to)->MergeFrom(
      static_cast<const CPlayer_CommunityPreferences &>(from));
}


void CPlayer_CommunityPreferences::MergeFrom(const CPlayer_CommunityPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_CommunityPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_updated_ = from.timestamp_updated_;
    }
    if (cached_has_bits & 0x00000002u) {
      parenthesize_nicknames_ = from.parenthesize_nicknames_;
    }
    if (cached_has_bits & 0x00000004u) {
      text_filter_setting_ = from.text_filter_setting_;
    }
    if (cached_has_bits & 0x00000008u) {
      text_filter_words_revision_ = from.text_filter_words_revision_;
    }
    if (cached_has_bits & 0x00000010u) {
      text_filter_ignore_friends_ = from.text_filter_ignore_friends_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_CommunityPreferences::CopyFrom(const CPlayer_CommunityPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_CommunityPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_CommunityPreferences::IsInitialized() const {
  return true;
}

void CPlayer_CommunityPreferences::InternalSwap(CPlayer_CommunityPreferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferences, text_filter_words_revision_)
      + sizeof(CPlayer_CommunityPreferences::text_filter_words_revision_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferences, timestamp_updated_)>(
          reinterpret_cast<char*>(&timestamp_updated_),
          reinterpret_cast<char*>(&other->timestamp_updated_));
  swap(text_filter_ignore_friends_, other->text_filter_ignore_friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_CommunityPreferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[108]);
}

// ===================================================================

class CPlayer_GetCommunityPreferences_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetCommunityPreferences_Response>()._has_bits_);
  static const ::CPlayer_CommunityPreferences& preferences(const CPlayer_GetCommunityPreferences_Response* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::UserContentDescriptorPreferences& content_descriptor_preferences(const CPlayer_GetCommunityPreferences_Response* msg);
  static void set_has_content_descriptor_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CPlayer_CommunityPreferences&
CPlayer_GetCommunityPreferences_Response::_Internal::preferences(const CPlayer_GetCommunityPreferences_Response* msg) {
  return *msg->preferences_;
}
const ::UserContentDescriptorPreferences&
CPlayer_GetCommunityPreferences_Response::_Internal::content_descriptor_preferences(const CPlayer_GetCommunityPreferences_Response* msg) {
  return *msg->content_descriptor_preferences_;
}
void CPlayer_GetCommunityPreferences_Response::clear_content_descriptor_preferences() {
  if (content_descriptor_preferences_ != nullptr) content_descriptor_preferences_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetCommunityPreferences_Response)
}
CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(const CPlayer_GetCommunityPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  if (from._internal_has_content_descriptor_preferences()) {
    content_descriptor_preferences_ = new ::UserContentDescriptorPreferences(*from.content_descriptor_preferences_);
  } else {
    content_descriptor_preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetCommunityPreferences_Response)
}

inline void CPlayer_GetCommunityPreferences_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preferences_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_descriptor_preferences_) -
    reinterpret_cast<char*>(&preferences_)) + sizeof(content_descriptor_preferences_));
}

CPlayer_GetCommunityPreferences_Response::~CPlayer_GetCommunityPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetCommunityPreferences_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetCommunityPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
  if (this != internal_default_instance()) delete content_descriptor_preferences_;
}

void CPlayer_GetCommunityPreferences_Response::ArenaDtor(void* object) {
  CPlayer_GetCommunityPreferences_Response* _this = reinterpret_cast< CPlayer_GetCommunityPreferences_Response* >(object);
  (void)_this;
}
void CPlayer_GetCommunityPreferences_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetCommunityPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetCommunityPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetCommunityPreferences_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preferences_ != nullptr);
      preferences_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(content_descriptor_preferences_ != nullptr);
      content_descriptor_preferences_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetCommunityPreferences_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_CommunityPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_content_descriptor_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetCommunityPreferences_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetCommunityPreferences_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::content_descriptor_preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetCommunityPreferences_Response)
  return target;
}

size_t CPlayer_GetCommunityPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetCommunityPreferences_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CPlayer_CommunityPreferences preferences = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferences_);
    }

    // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_descriptor_preferences_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetCommunityPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetCommunityPreferences_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetCommunityPreferences_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetCommunityPreferences_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetCommunityPreferences_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetCommunityPreferences_Response &>(from));
}


void CPlayer_GetCommunityPreferences_Response::MergeFrom(const CPlayer_GetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_preferences()->::CPlayer_CommunityPreferences::MergeFrom(from._internal_preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_content_descriptor_preferences()->::UserContentDescriptorPreferences::MergeFrom(from._internal_content_descriptor_preferences());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetCommunityPreferences_Response::CopyFrom(const CPlayer_GetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetCommunityPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetCommunityPreferences_Response::InternalSwap(CPlayer_GetCommunityPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetCommunityPreferences_Response, content_descriptor_preferences_)
      + sizeof(CPlayer_GetCommunityPreferences_Response::content_descriptor_preferences_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetCommunityPreferences_Response, preferences_)>(
          reinterpret_cast<char*>(&preferences_),
          reinterpret_cast<char*>(&other->preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetCommunityPreferences_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[109]);
}

// ===================================================================

class CPlayer_SetCommunityPreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetCommunityPreferences_Request>()._has_bits_);
  static const ::CPlayer_CommunityPreferences& preferences(const CPlayer_SetCommunityPreferences_Request* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_CommunityPreferences&
CPlayer_SetCommunityPreferences_Request::_Internal::preferences(const CPlayer_SetCommunityPreferences_Request* msg) {
  return *msg->preferences_;
}
CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetCommunityPreferences_Request)
}
CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(const CPlayer_SetCommunityPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetCommunityPreferences_Request)
}

inline void CPlayer_SetCommunityPreferences_Request::SharedCtor() {
preferences_ = nullptr;
}

CPlayer_SetCommunityPreferences_Request::~CPlayer_SetCommunityPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetCommunityPreferences_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_SetCommunityPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_SetCommunityPreferences_Request::ArenaDtor(void* object) {
  CPlayer_SetCommunityPreferences_Request* _this = reinterpret_cast< CPlayer_SetCommunityPreferences_Request* >(object);
  (void)_this;
}
void CPlayer_SetCommunityPreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetCommunityPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetCommunityPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetCommunityPreferences_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetCommunityPreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_CommunityPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_SetCommunityPreferences_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetCommunityPreferences_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetCommunityPreferences_Request)
  return target;
}

size_t CPlayer_SetCommunityPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetCommunityPreferences_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetCommunityPreferences_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_SetCommunityPreferences_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetCommunityPreferences_Request::GetClassData() const { return &_class_data_; }

void CPlayer_SetCommunityPreferences_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_SetCommunityPreferences_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_SetCommunityPreferences_Request &>(from));
}


void CPlayer_SetCommunityPreferences_Request::MergeFrom(const CPlayer_SetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _internal_mutable_preferences()->::CPlayer_CommunityPreferences::MergeFrom(from._internal_preferences());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_SetCommunityPreferences_Request::CopyFrom(const CPlayer_SetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetCommunityPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetCommunityPreferences_Request::InternalSwap(CPlayer_SetCommunityPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetCommunityPreferences_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[110]);
}

// ===================================================================

class CPlayer_SetCommunityPreferences_Response::_Internal {
 public:
};

CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetCommunityPreferences_Response)
}
CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(const CPlayer_SetCommunityPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetCommunityPreferences_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_SetCommunityPreferences_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_SetCommunityPreferences_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetCommunityPreferences_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[111]);
}

// ===================================================================

class CPlayer_GetTextFilterWords_Request::_Internal {
 public:
};

CPlayer_GetTextFilterWords_Request::CPlayer_GetTextFilterWords_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTextFilterWords_Request)
}
CPlayer_GetTextFilterWords_Request::CPlayer_GetTextFilterWords_Request(const CPlayer_GetTextFilterWords_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTextFilterWords_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTextFilterWords_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTextFilterWords_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTextFilterWords_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[112]);
}

// ===================================================================

class CPlayer_TextFilterWords::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_TextFilterWords>()._has_bits_);
  static void set_has_text_filter_words_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_TextFilterWords::CPlayer_TextFilterWords(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  text_filter_custom_banned_words_(arena),
  text_filter_custom_clean_words_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_TextFilterWords)
}
CPlayer_TextFilterWords::CPlayer_TextFilterWords(const CPlayer_TextFilterWords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      text_filter_custom_banned_words_(from.text_filter_custom_banned_words_),
      text_filter_custom_clean_words_(from.text_filter_custom_clean_words_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_filter_words_revision_ = from.text_filter_words_revision_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_TextFilterWords)
}

inline void CPlayer_TextFilterWords::SharedCtor() {
text_filter_words_revision_ = 0u;
}

CPlayer_TextFilterWords::~CPlayer_TextFilterWords() {
  // @@protoc_insertion_point(destructor:CPlayer_TextFilterWords)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_TextFilterWords::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_TextFilterWords::ArenaDtor(void* object) {
  CPlayer_TextFilterWords* _this = reinterpret_cast< CPlayer_TextFilterWords* >(object);
  (void)_this;
}
void CPlayer_TextFilterWords::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_TextFilterWords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_TextFilterWords::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_TextFilterWords)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_filter_custom_banned_words_.Clear();
  text_filter_custom_clean_words_.Clear();
  text_filter_words_revision_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_TextFilterWords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string text_filter_custom_banned_words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_text_filter_custom_banned_words();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_TextFilterWords.text_filter_custom_banned_words");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string text_filter_custom_clean_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_text_filter_custom_clean_words();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_TextFilterWords.text_filter_custom_clean_words");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 text_filter_words_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_text_filter_words_revision(&has_bits);
          text_filter_words_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_TextFilterWords::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_TextFilterWords)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string text_filter_custom_banned_words = 1;
  for (int i = 0, n = this->_internal_text_filter_custom_banned_words_size(); i < n; i++) {
    const auto& s = this->_internal_text_filter_custom_banned_words(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_TextFilterWords.text_filter_custom_banned_words");
    target = stream->WriteString(1, s, target);
  }

  // repeated string text_filter_custom_clean_words = 2;
  for (int i = 0, n = this->_internal_text_filter_custom_clean_words_size(); i < n; i++) {
    const auto& s = this->_internal_text_filter_custom_clean_words(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_TextFilterWords.text_filter_custom_clean_words");
    target = stream->WriteString(2, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 text_filter_words_revision = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_text_filter_words_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_TextFilterWords)
  return target;
}

size_t CPlayer_TextFilterWords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_TextFilterWords)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string text_filter_custom_banned_words = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(text_filter_custom_banned_words_.size());
  for (int i = 0, n = text_filter_custom_banned_words_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      text_filter_custom_banned_words_.Get(i));
  }

  // repeated string text_filter_custom_clean_words = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(text_filter_custom_clean_words_.size());
  for (int i = 0, n = text_filter_custom_clean_words_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      text_filter_custom_clean_words_.Get(i));
  }

  // optional uint32 text_filter_words_revision = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_text_filter_words_revision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_TextFilterWords::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_TextFilterWords::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_TextFilterWords::GetClassData() const { return &_class_data_; }

void CPlayer_TextFilterWords::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_TextFilterWords *>(to)->MergeFrom(
      static_cast<const CPlayer_TextFilterWords &>(from));
}


void CPlayer_TextFilterWords::MergeFrom(const CPlayer_TextFilterWords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_TextFilterWords)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  text_filter_custom_banned_words_.MergeFrom(from.text_filter_custom_banned_words_);
  text_filter_custom_clean_words_.MergeFrom(from.text_filter_custom_clean_words_);
  if (from._internal_has_text_filter_words_revision()) {
    _internal_set_text_filter_words_revision(from._internal_text_filter_words_revision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_TextFilterWords::CopyFrom(const CPlayer_TextFilterWords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_TextFilterWords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_TextFilterWords::IsInitialized() const {
  return true;
}

void CPlayer_TextFilterWords::InternalSwap(CPlayer_TextFilterWords* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_filter_custom_banned_words_.InternalSwap(&other->text_filter_custom_banned_words_);
  text_filter_custom_clean_words_.InternalSwap(&other->text_filter_custom_clean_words_);
  swap(text_filter_words_revision_, other->text_filter_words_revision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_TextFilterWords::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[113]);
}

// ===================================================================

class CPlayer_GetTextFilterWords_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetTextFilterWords_Response>()._has_bits_);
  static const ::CPlayer_TextFilterWords& words(const CPlayer_GetTextFilterWords_Response* msg);
  static void set_has_words(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_TextFilterWords&
CPlayer_GetTextFilterWords_Response::_Internal::words(const CPlayer_GetTextFilterWords_Response* msg) {
  return *msg->words_;
}
CPlayer_GetTextFilterWords_Response::CPlayer_GetTextFilterWords_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetTextFilterWords_Response)
}
CPlayer_GetTextFilterWords_Response::CPlayer_GetTextFilterWords_Response(const CPlayer_GetTextFilterWords_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_words()) {
    words_ = new ::CPlayer_TextFilterWords(*from.words_);
  } else {
    words_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetTextFilterWords_Response)
}

inline void CPlayer_GetTextFilterWords_Response::SharedCtor() {
words_ = nullptr;
}

CPlayer_GetTextFilterWords_Response::~CPlayer_GetTextFilterWords_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetTextFilterWords_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetTextFilterWords_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete words_;
}

void CPlayer_GetTextFilterWords_Response::ArenaDtor(void* object) {
  CPlayer_GetTextFilterWords_Response* _this = reinterpret_cast< CPlayer_GetTextFilterWords_Response* >(object);
  (void)_this;
}
void CPlayer_GetTextFilterWords_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetTextFilterWords_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetTextFilterWords_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetTextFilterWords_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(words_ != nullptr);
    words_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetTextFilterWords_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_TextFilterWords words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_words(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetTextFilterWords_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetTextFilterWords_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_TextFilterWords words = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::words(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetTextFilterWords_Response)
  return target;
}

size_t CPlayer_GetTextFilterWords_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetTextFilterWords_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPlayer_TextFilterWords words = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *words_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetTextFilterWords_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetTextFilterWords_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetTextFilterWords_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetTextFilterWords_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetTextFilterWords_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetTextFilterWords_Response &>(from));
}


void CPlayer_GetTextFilterWords_Response::MergeFrom(const CPlayer_GetTextFilterWords_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetTextFilterWords_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_words()) {
    _internal_mutable_words()->::CPlayer_TextFilterWords::MergeFrom(from._internal_words());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetTextFilterWords_Response::CopyFrom(const CPlayer_GetTextFilterWords_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetTextFilterWords_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetTextFilterWords_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetTextFilterWords_Response::InternalSwap(CPlayer_GetTextFilterWords_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(words_, other->words_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetTextFilterWords_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[114]);
}

// ===================================================================

class CPlayer_GetNewSteamAnnouncementState_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNewSteamAnnouncementState_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNewSteamAnnouncementState_Request)
}
CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(const CPlayer_GetNewSteamAnnouncementState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNewSteamAnnouncementState_Request)
}

inline void CPlayer_GetNewSteamAnnouncementState_Request::SharedCtor() {
language_ = 0;
}

CPlayer_GetNewSteamAnnouncementState_Request::~CPlayer_GetNewSteamAnnouncementState_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNewSteamAnnouncementState_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetNewSteamAnnouncementState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetNewSteamAnnouncementState_Request::ArenaDtor(void* object) {
  CPlayer_GetNewSteamAnnouncementState_Request* _this = reinterpret_cast< CPlayer_GetNewSteamAnnouncementState_Request* >(object);
  (void)_this;
}
void CPlayer_GetNewSteamAnnouncementState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNewSteamAnnouncementState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNewSteamAnnouncementState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNewSteamAnnouncementState_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNewSteamAnnouncementState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNewSteamAnnouncementState_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNewSteamAnnouncementState_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 language = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNewSteamAnnouncementState_Request)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNewSteamAnnouncementState_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNewSteamAnnouncementState_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetNewSteamAnnouncementState_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNewSteamAnnouncementState_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetNewSteamAnnouncementState_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetNewSteamAnnouncementState_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetNewSteamAnnouncementState_Request &>(from));
}


void CPlayer_GetNewSteamAnnouncementState_Request::MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNewSteamAnnouncementState_Request::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Request::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNewSteamAnnouncementState_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[115]);
}

// ===================================================================

class CPlayer_GetNewSteamAnnouncementState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNewSteamAnnouncementState_Response>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_announcement_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNewSteamAnnouncementState_Response)
}
CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(const CPlayer_GetNewSteamAnnouncementState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announcement_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_announcement_headline()) {
    announcement_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement_headline(), 
      GetArenaForAllocation());
  }
  announcement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_announcement_url()) {
    announcement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNewSteamAnnouncementState_Response)
}

inline void CPlayer_GetNewSteamAnnouncementState_Response::SharedCtor() {
announcement_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
announcement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
}

CPlayer_GetNewSteamAnnouncementState_Response::~CPlayer_GetNewSteamAnnouncementState_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNewSteamAnnouncementState_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetNewSteamAnnouncementState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  announcement_headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  announcement_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetNewSteamAnnouncementState_Response::ArenaDtor(void* object) {
  CPlayer_GetNewSteamAnnouncementState_Response* _this = reinterpret_cast< CPlayer_GetNewSteamAnnouncementState_Response* >(object);
  (void)_this;
}
void CPlayer_GetNewSteamAnnouncementState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNewSteamAnnouncementState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNewSteamAnnouncementState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNewSteamAnnouncementState_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&announcement_gid_) -
        reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNewSteamAnnouncementState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENewSteamAnnouncementState_IsValid(val))) {
            _internal_set_state(static_cast<::ENewSteamAnnouncementState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string announcement_headline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_announcement_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string announcement_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_announcement_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_posted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_posted(&has_bits);
          time_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 announcement_gid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_announcement_gid(&has_bits);
          announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetNewSteamAnnouncementState_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNewSteamAnnouncementState_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_headline().data(), static_cast<int>(this->_internal_announcement_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_announcement_headline(), target);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_url().data(), static_cast<int>(this->_internal_announcement_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_announcement_url(), target);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_posted(), target);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_announcement_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNewSteamAnnouncementState_Response)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNewSteamAnnouncementState_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string announcement_headline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_headline());
    }

    // optional string announcement_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_url());
    }

    // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 time_posted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_posted());
    }

    // optional uint64 announcement_gid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_announcement_gid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetNewSteamAnnouncementState_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetNewSteamAnnouncementState_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetNewSteamAnnouncementState_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetNewSteamAnnouncementState_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetNewSteamAnnouncementState_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetNewSteamAnnouncementState_Response &>(from));
}


void CPlayer_GetNewSteamAnnouncementState_Response::MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_announcement_headline(from._internal_announcement_headline());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_announcement_url(from._internal_announcement_url());
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_posted_ = from.time_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      announcement_gid_ = from.announcement_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetNewSteamAnnouncementState_Response::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Response::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_headline_, lhs_arena,
      &other->announcement_headline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_url_, lhs_arena,
      &other->announcement_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetNewSteamAnnouncementState_Response, announcement_gid_)
      + sizeof(CPlayer_GetNewSteamAnnouncementState_Response::announcement_gid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetNewSteamAnnouncementState_Response, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNewSteamAnnouncementState_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[116]);
}

// ===================================================================

class CPlayer_UpdateSteamAnnouncementLastRead_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_UpdateSteamAnnouncementLastRead_Request>()._has_bits_);
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
}
CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&announcement_gid_, &from.announcement_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_posted_) -
    reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
}

inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&announcement_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_posted_) -
    reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
}

CPlayer_UpdateSteamAnnouncementLastRead_Request::~CPlayer_UpdateSteamAnnouncementLastRead_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::ArenaDtor(void* object) {
  CPlayer_UpdateSteamAnnouncementLastRead_Request* _this = reinterpret_cast< CPlayer_UpdateSteamAnnouncementLastRead_Request* >(object);
  (void)_this;
}
void CPlayer_UpdateSteamAnnouncementLastRead_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_UpdateSteamAnnouncementLastRead_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&announcement_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_posted_) -
        reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_UpdateSteamAnnouncementLastRead_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 announcement_gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_announcement_gid(&has_bits);
          announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_posted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_posted(&has_bits);
          time_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_UpdateSteamAnnouncementLastRead_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 announcement_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_announcement_gid(), target);
  }

  // optional uint32 time_posted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_posted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  return target;
}

size_t CPlayer_UpdateSteamAnnouncementLastRead_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 announcement_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_announcement_gid());
    }

    // optional uint32 time_posted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_posted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_UpdateSteamAnnouncementLastRead_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_UpdateSteamAnnouncementLastRead_Request::GetClassData() const { return &_class_data_; }

void CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_UpdateSteamAnnouncementLastRead_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_UpdateSteamAnnouncementLastRead_Request &>(from));
}


void CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_gid_ = from.announcement_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_posted_ = from.time_posted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_UpdateSteamAnnouncementLastRead_Request::IsInitialized() const {
  return true;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_UpdateSteamAnnouncementLastRead_Request, time_posted_)
      + sizeof(CPlayer_UpdateSteamAnnouncementLastRead_Request::time_posted_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_UpdateSteamAnnouncementLastRead_Request, announcement_gid_)>(
          reinterpret_cast<char*>(&announcement_gid_),
          reinterpret_cast<char*>(&other->announcement_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[117]);
}

// ===================================================================

class CPlayer_UpdateSteamAnnouncementLastRead_Response::_Internal {
 public:
};

CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Response)
}
CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_UpdateSteamAnnouncementLastRead_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_UpdateSteamAnnouncementLastRead_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[118]);
}

// ===================================================================

class CPlayer_GetPrivacySettings_Request::_Internal {
 public:
};

CPlayer_GetPrivacySettings_Request::CPlayer_GetPrivacySettings_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPrivacySettings_Request)
}
CPlayer_GetPrivacySettings_Request::CPlayer_GetPrivacySettings_Request(const CPlayer_GetPrivacySettings_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPrivacySettings_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPrivacySettings_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPrivacySettings_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPrivacySettings_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[119]);
}

// ===================================================================

class CPrivacySettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CPrivacySettings>()._has_bits_);
  static void set_has_privacy_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privacy_state_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_privacy_state_gifts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_privacy_state_ownedgames(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_privacy_state_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_privacy_state_friendslist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CPrivacySettings::CPrivacySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPrivacySettings)
}
CPrivacySettings::CPrivacySettings(const CPrivacySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&privacy_state_, &from.privacy_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&privacy_state_friendslist_) -
    reinterpret_cast<char*>(&privacy_state_)) + sizeof(privacy_state_friendslist_));
  // @@protoc_insertion_point(copy_constructor:CPrivacySettings)
}

inline void CPrivacySettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&privacy_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&privacy_state_friendslist_) -
    reinterpret_cast<char*>(&privacy_state_)) + sizeof(privacy_state_friendslist_));
}

CPrivacySettings::~CPrivacySettings() {
  // @@protoc_insertion_point(destructor:CPrivacySettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPrivacySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPrivacySettings::ArenaDtor(void* object) {
  CPrivacySettings* _this = reinterpret_cast< CPrivacySettings* >(object);
  (void)_this;
}
void CPrivacySettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPrivacySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPrivacySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CPrivacySettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&privacy_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&privacy_state_friendslist_) -
        reinterpret_cast<char*>(&privacy_state_)) + sizeof(privacy_state_friendslist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPrivacySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 privacy_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_privacy_state(&has_bits);
          privacy_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 privacy_state_inventory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_privacy_state_inventory(&has_bits);
          privacy_state_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 privacy_state_gifts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_privacy_state_gifts(&has_bits);
          privacy_state_gifts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 privacy_state_ownedgames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_privacy_state_ownedgames(&has_bits);
          privacy_state_ownedgames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 privacy_state_playtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_privacy_state_playtime(&has_bits);
          privacy_state_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 privacy_state_friendslist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_privacy_state_friendslist(&has_bits);
          privacy_state_friendslist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPrivacySettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPrivacySettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 privacy_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_privacy_state(), target);
  }

  // optional int32 privacy_state_inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_privacy_state_inventory(), target);
  }

  // optional int32 privacy_state_gifts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_privacy_state_gifts(), target);
  }

  // optional int32 privacy_state_ownedgames = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_privacy_state_ownedgames(), target);
  }

  // optional int32 privacy_state_playtime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_privacy_state_playtime(), target);
  }

  // optional int32 privacy_state_friendslist = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_privacy_state_friendslist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPrivacySettings)
  return target;
}

size_t CPrivacySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPrivacySettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 privacy_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_privacy_state());
    }

    // optional int32 privacy_state_inventory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_privacy_state_inventory());
    }

    // optional int32 privacy_state_gifts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_privacy_state_gifts());
    }

    // optional int32 privacy_state_ownedgames = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_privacy_state_ownedgames());
    }

    // optional int32 privacy_state_playtime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_privacy_state_playtime());
    }

    // optional int32 privacy_state_friendslist = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_privacy_state_friendslist());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPrivacySettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPrivacySettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPrivacySettings::GetClassData() const { return &_class_data_; }

void CPrivacySettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPrivacySettings *>(to)->MergeFrom(
      static_cast<const CPrivacySettings &>(from));
}


void CPrivacySettings::MergeFrom(const CPrivacySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPrivacySettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      privacy_state_ = from.privacy_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      privacy_state_inventory_ = from.privacy_state_inventory_;
    }
    if (cached_has_bits & 0x00000004u) {
      privacy_state_gifts_ = from.privacy_state_gifts_;
    }
    if (cached_has_bits & 0x00000008u) {
      privacy_state_ownedgames_ = from.privacy_state_ownedgames_;
    }
    if (cached_has_bits & 0x00000010u) {
      privacy_state_playtime_ = from.privacy_state_playtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      privacy_state_friendslist_ = from.privacy_state_friendslist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPrivacySettings::CopyFrom(const CPrivacySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPrivacySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPrivacySettings::IsInitialized() const {
  return true;
}

void CPrivacySettings::InternalSwap(CPrivacySettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPrivacySettings, privacy_state_friendslist_)
      + sizeof(CPrivacySettings::privacy_state_friendslist_)
      - PROTOBUF_FIELD_OFFSET(CPrivacySettings, privacy_state_)>(
          reinterpret_cast<char*>(&privacy_state_),
          reinterpret_cast<char*>(&other->privacy_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPrivacySettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[120]);
}

// ===================================================================

class CPlayer_GetPrivacySettings_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetPrivacySettings_Response>()._has_bits_);
  static const ::CPrivacySettings& privacy_settings(const CPlayer_GetPrivacySettings_Response* msg);
  static void set_has_privacy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPrivacySettings&
CPlayer_GetPrivacySettings_Response::_Internal::privacy_settings(const CPlayer_GetPrivacySettings_Response* msg) {
  return *msg->privacy_settings_;
}
CPlayer_GetPrivacySettings_Response::CPlayer_GetPrivacySettings_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPrivacySettings_Response)
}
CPlayer_GetPrivacySettings_Response::CPlayer_GetPrivacySettings_Response(const CPlayer_GetPrivacySettings_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_privacy_settings()) {
    privacy_settings_ = new ::CPrivacySettings(*from.privacy_settings_);
  } else {
    privacy_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPrivacySettings_Response)
}

inline void CPlayer_GetPrivacySettings_Response::SharedCtor() {
privacy_settings_ = nullptr;
}

CPlayer_GetPrivacySettings_Response::~CPlayer_GetPrivacySettings_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPrivacySettings_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetPrivacySettings_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete privacy_settings_;
}

void CPlayer_GetPrivacySettings_Response::ArenaDtor(void* object) {
  CPlayer_GetPrivacySettings_Response* _this = reinterpret_cast< CPlayer_GetPrivacySettings_Response* >(object);
  (void)_this;
}
void CPlayer_GetPrivacySettings_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPrivacySettings_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPrivacySettings_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPrivacySettings_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(privacy_settings_ != nullptr);
    privacy_settings_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPrivacySettings_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPrivacySettings privacy_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_privacy_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetPrivacySettings_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPrivacySettings_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPrivacySettings privacy_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::privacy_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPrivacySettings_Response)
  return target;
}

size_t CPlayer_GetPrivacySettings_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPrivacySettings_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPrivacySettings privacy_settings = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *privacy_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetPrivacySettings_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetPrivacySettings_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetPrivacySettings_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetPrivacySettings_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetPrivacySettings_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetPrivacySettings_Response &>(from));
}


void CPlayer_GetPrivacySettings_Response::MergeFrom(const CPlayer_GetPrivacySettings_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPrivacySettings_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_privacy_settings()) {
    _internal_mutable_privacy_settings()->::CPrivacySettings::MergeFrom(from._internal_privacy_settings());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetPrivacySettings_Response::CopyFrom(const CPlayer_GetPrivacySettings_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPrivacySettings_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPrivacySettings_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPrivacySettings_Response::InternalSwap(CPlayer_GetPrivacySettings_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(privacy_settings_, other->privacy_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPrivacySettings_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[121]);
}

// ===================================================================

class CPlayer_GetDurationControl_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetDurationControl_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetDurationControl_Request::CPlayer_GetDurationControl_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetDurationControl_Request)
}
CPlayer_GetDurationControl_Request::CPlayer_GetDurationControl_Request(const CPlayer_GetDurationControl_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetDurationControl_Request)
}

inline void CPlayer_GetDurationControl_Request::SharedCtor() {
appid_ = 0u;
}

CPlayer_GetDurationControl_Request::~CPlayer_GetDurationControl_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetDurationControl_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetDurationControl_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetDurationControl_Request::ArenaDtor(void* object) {
  CPlayer_GetDurationControl_Request* _this = reinterpret_cast< CPlayer_GetDurationControl_Request* >(object);
  (void)_this;
}
void CPlayer_GetDurationControl_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetDurationControl_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetDurationControl_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetDurationControl_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetDurationControl_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetDurationControl_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetDurationControl_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetDurationControl_Request)
  return target;
}

size_t CPlayer_GetDurationControl_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetDurationControl_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetDurationControl_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetDurationControl_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetDurationControl_Request::GetClassData() const { return &_class_data_; }

void CPlayer_GetDurationControl_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetDurationControl_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_GetDurationControl_Request &>(from));
}


void CPlayer_GetDurationControl_Request::MergeFrom(const CPlayer_GetDurationControl_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetDurationControl_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetDurationControl_Request::CopyFrom(const CPlayer_GetDurationControl_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetDurationControl_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetDurationControl_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetDurationControl_Request::InternalSwap(CPlayer_GetDurationControl_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetDurationControl_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[122]);
}

// ===================================================================

class CPlayer_GetDurationControl_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetDurationControl_Response>()._has_bits_);
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_today(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_steamchina_account(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_age_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seconds_allowed_today(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_age_verification_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_block_minors(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CPlayer_GetDurationControl_Response::CPlayer_GetDurationControl_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetDurationControl_Response)
}
CPlayer_GetDurationControl_Response::CPlayer_GetDurationControl_Response(const CPlayer_GetDurationControl_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_minors_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(block_minors_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetDurationControl_Response)
}

inline void CPlayer_GetDurationControl_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_minors_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(block_minors_));
}

CPlayer_GetDurationControl_Response::~CPlayer_GetDurationControl_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetDurationControl_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_GetDurationControl_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_GetDurationControl_Response::ArenaDtor(void* object) {
  CPlayer_GetDurationControl_Response* _this = reinterpret_cast< CPlayer_GetDurationControl_Response* >(object);
  (void)_this;
}
void CPlayer_GetDurationControl_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetDurationControl_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetDurationControl_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetDurationControl_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_minors_) -
        reinterpret_cast<char*>(&seconds_)) + sizeof(block_minors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetDurationControl_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 seconds_today = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seconds_today(&has_bits);
          seconds_today_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steamchina_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_steamchina_account(&has_bits);
          is_steamchina_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_age_verified = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_age_verified(&has_bits);
          is_age_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_allowed_today = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_seconds_allowed_today(&has_bits);
          seconds_allowed_today_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool age_verification_pending = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_age_verification_pending(&has_bits);
          age_verification_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool block_minors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_block_minors(&has_bits);
          block_minors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_GetDurationControl_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetDurationControl_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enabled(), target);
  }

  // optional int32 seconds = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seconds(), target);
  }

  // optional int32 seconds_today = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_seconds_today(), target);
  }

  // optional bool is_steamchina_account = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_steamchina_account(), target);
  }

  // optional bool is_age_verified = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_age_verified(), target);
  }

  // optional uint32 seconds_allowed_today = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_seconds_allowed_today(), target);
  }

  // optional bool age_verification_pending = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_age_verification_pending(), target);
  }

  // optional bool block_minors = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_block_minors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetDurationControl_Response)
  return target;
}

size_t CPlayer_GetDurationControl_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetDurationControl_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 seconds = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seconds());
    }

    // optional int32 seconds_today = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seconds_today());
    }

    // optional bool is_enabled = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_steamchina_account = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_age_verified = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool age_verification_pending = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 seconds_allowed_today = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_allowed_today());
    }

    // optional bool block_minors = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_GetDurationControl_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_GetDurationControl_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_GetDurationControl_Response::GetClassData() const { return &_class_data_; }

void CPlayer_GetDurationControl_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_GetDurationControl_Response *>(to)->MergeFrom(
      static_cast<const CPlayer_GetDurationControl_Response &>(from));
}


void CPlayer_GetDurationControl_Response::MergeFrom(const CPlayer_GetDurationControl_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetDurationControl_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_today_ = from.seconds_today_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_enabled_ = from.is_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_steamchina_account_ = from.is_steamchina_account_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_age_verified_ = from.is_age_verified_;
    }
    if (cached_has_bits & 0x00000020u) {
      age_verification_pending_ = from.age_verification_pending_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_allowed_today_ = from.seconds_allowed_today_;
    }
    if (cached_has_bits & 0x00000080u) {
      block_minors_ = from.block_minors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_GetDurationControl_Response::CopyFrom(const CPlayer_GetDurationControl_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetDurationControl_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetDurationControl_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetDurationControl_Response::InternalSwap(CPlayer_GetDurationControl_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetDurationControl_Response, block_minors_)
      + sizeof(CPlayer_GetDurationControl_Response::block_minors_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetDurationControl_Response, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetDurationControl_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[123]);
}

// ===================================================================

class CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
}
CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory(const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&offline_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(offline_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
}

inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offline_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(offline_));
}

CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::~CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory() {
  // @@protoc_insertion_point(destructor:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::ArenaDtor(void* object) {
  CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* _this = reinterpret_cast< CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* >(object);
  (void)_this;
}
void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offline_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(offline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 session_time_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_session_time_start(&has_bits);
          session_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool offline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_offline(&has_bits);
          offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 session_time_start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_time_start(), target);
  }

  // optional uint32 seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds(), target);
  }

  // optional bool offline = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
  return target;
}

size_t CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 session_time_start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_time_start());
    }

    // optional uint32 seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds());
    }

    // optional bool offline = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::GetClassData() const { return &_class_data_; }

void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory *>(to)->MergeFrom(
      static_cast<const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory &>(from));
}


void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::MergeFrom(const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      session_time_start_ = from.session_time_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      offline_ = from.offline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::CopyFrom(const CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::IsInitialized() const {
  return true;
}

void CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::InternalSwap(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, offline_)
      + sizeof(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::offline_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[124]);
}

// ===================================================================

class CPlayer_RecordDisconnectedPlaytime_Request::_Internal {
 public:
};

CPlayer_RecordDisconnectedPlaytime_Request::CPlayer_RecordDisconnectedPlaytime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  play_sessions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_RecordDisconnectedPlaytime_Request)
}
CPlayer_RecordDisconnectedPlaytime_Request::CPlayer_RecordDisconnectedPlaytime_Request(const CPlayer_RecordDisconnectedPlaytime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      play_sessions_(from.play_sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_RecordDisconnectedPlaytime_Request)
}

inline void CPlayer_RecordDisconnectedPlaytime_Request::SharedCtor() {
}

CPlayer_RecordDisconnectedPlaytime_Request::~CPlayer_RecordDisconnectedPlaytime_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_RecordDisconnectedPlaytime_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_RecordDisconnectedPlaytime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_RecordDisconnectedPlaytime_Request::ArenaDtor(void* object) {
  CPlayer_RecordDisconnectedPlaytime_Request* _this = reinterpret_cast< CPlayer_RecordDisconnectedPlaytime_Request* >(object);
  (void)_this;
}
void CPlayer_RecordDisconnectedPlaytime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_RecordDisconnectedPlaytime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_RecordDisconnectedPlaytime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RecordDisconnectedPlaytime_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_sessions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RecordDisconnectedPlaytime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory play_sessions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_play_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_RecordDisconnectedPlaytime_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RecordDisconnectedPlaytime_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory play_sessions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_play_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_play_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RecordDisconnectedPlaytime_Request)
  return target;
}

size_t CPlayer_RecordDisconnectedPlaytime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RecordDisconnectedPlaytime_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_RecordDisconnectedPlaytime_Request.PlayHistory play_sessions = 3;
  total_size += 1UL * this->_internal_play_sessions_size();
  for (const auto& msg : this->play_sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_RecordDisconnectedPlaytime_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_RecordDisconnectedPlaytime_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_RecordDisconnectedPlaytime_Request::GetClassData() const { return &_class_data_; }

void CPlayer_RecordDisconnectedPlaytime_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_RecordDisconnectedPlaytime_Request *>(to)->MergeFrom(
      static_cast<const CPlayer_RecordDisconnectedPlaytime_Request &>(from));
}


void CPlayer_RecordDisconnectedPlaytime_Request::MergeFrom(const CPlayer_RecordDisconnectedPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RecordDisconnectedPlaytime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  play_sessions_.MergeFrom(from.play_sessions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_RecordDisconnectedPlaytime_Request::CopyFrom(const CPlayer_RecordDisconnectedPlaytime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RecordDisconnectedPlaytime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RecordDisconnectedPlaytime_Request::IsInitialized() const {
  return true;
}

void CPlayer_RecordDisconnectedPlaytime_Request::InternalSwap(CPlayer_RecordDisconnectedPlaytime_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  play_sessions_.InternalSwap(&other->play_sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RecordDisconnectedPlaytime_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[125]);
}

// ===================================================================

class CPlayer_RecordDisconnectedPlaytime_Response::_Internal {
 public:
};

CPlayer_RecordDisconnectedPlaytime_Response::CPlayer_RecordDisconnectedPlaytime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPlayer_RecordDisconnectedPlaytime_Response)
}
CPlayer_RecordDisconnectedPlaytime_Response::CPlayer_RecordDisconnectedPlaytime_Response(const CPlayer_RecordDisconnectedPlaytime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_RecordDisconnectedPlaytime_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_RecordDisconnectedPlaytime_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_RecordDisconnectedPlaytime_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RecordDisconnectedPlaytime_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[126]);
}

// ===================================================================

class CPlayer_LastPlayedTimes_Notification::_Internal {
 public:
};

CPlayer_LastPlayedTimes_Notification::CPlayer_LastPlayedTimes_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  games_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_LastPlayedTimes_Notification)
}
CPlayer_LastPlayedTimes_Notification::CPlayer_LastPlayedTimes_Notification(const CPlayer_LastPlayedTimes_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_LastPlayedTimes_Notification)
}

inline void CPlayer_LastPlayedTimes_Notification::SharedCtor() {
}

CPlayer_LastPlayedTimes_Notification::~CPlayer_LastPlayedTimes_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_LastPlayedTimes_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_LastPlayedTimes_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_LastPlayedTimes_Notification::ArenaDtor(void* object) {
  CPlayer_LastPlayedTimes_Notification* _this = reinterpret_cast< CPlayer_LastPlayedTimes_Notification* >(object);
  (void)_this;
}
void CPlayer_LastPlayedTimes_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_LastPlayedTimes_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_LastPlayedTimes_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_LastPlayedTimes_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_LastPlayedTimes_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_LastPlayedTimes_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_LastPlayedTimes_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_LastPlayedTimes_Notification)
  return target;
}

size_t CPlayer_LastPlayedTimes_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_LastPlayedTimes_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_LastPlayedTimes_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_LastPlayedTimes_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_LastPlayedTimes_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_LastPlayedTimes_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_LastPlayedTimes_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_LastPlayedTimes_Notification &>(from));
}


void CPlayer_LastPlayedTimes_Notification::MergeFrom(const CPlayer_LastPlayedTimes_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_LastPlayedTimes_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_LastPlayedTimes_Notification::CopyFrom(const CPlayer_LastPlayedTimes_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_LastPlayedTimes_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_LastPlayedTimes_Notification::IsInitialized() const {
  return true;
}

void CPlayer_LastPlayedTimes_Notification::InternalSwap(CPlayer_LastPlayedTimes_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_LastPlayedTimes_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[127]);
}

// ===================================================================

class CPlayer_FriendNicknameChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_FriendNicknameChanged_Notification>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_echo_to_self(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_FriendNicknameChanged_Notification::CPlayer_FriendNicknameChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_FriendNicknameChanged_Notification)
}
CPlayer_FriendNicknameChanged_Notification::CPlayer_FriendNicknameChanged_Notification(const CPlayer_FriendNicknameChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_echo_to_self_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(is_echo_to_self_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_FriendNicknameChanged_Notification)
}

inline void CPlayer_FriendNicknameChanged_Notification::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_echo_to_self_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(is_echo_to_self_));
}

CPlayer_FriendNicknameChanged_Notification::~CPlayer_FriendNicknameChanged_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_FriendNicknameChanged_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_FriendNicknameChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_FriendNicknameChanged_Notification::ArenaDtor(void* object) {
  CPlayer_FriendNicknameChanged_Notification* _this = reinterpret_cast< CPlayer_FriendNicknameChanged_Notification* >(object);
  (void)_this;
}
void CPlayer_FriendNicknameChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_FriendNicknameChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_FriendNicknameChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_FriendNicknameChanged_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_echo_to_self_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(is_echo_to_self_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_FriendNicknameChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_FriendNicknameChanged_Notification.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_echo_to_self = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_echo_to_self(&has_bits);
          is_echo_to_self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_FriendNicknameChanged_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_FriendNicknameChanged_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_FriendNicknameChanged_Notification.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // optional bool is_echo_to_self = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_echo_to_self(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_FriendNicknameChanged_Notification)
  return target;
}

size_t CPlayer_FriendNicknameChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_FriendNicknameChanged_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool is_echo_to_self = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_FriendNicknameChanged_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_FriendNicknameChanged_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_FriendNicknameChanged_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_FriendNicknameChanged_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_FriendNicknameChanged_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_FriendNicknameChanged_Notification &>(from));
}


void CPlayer_FriendNicknameChanged_Notification::MergeFrom(const CPlayer_FriendNicknameChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_FriendNicknameChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_echo_to_self_ = from.is_echo_to_self_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_FriendNicknameChanged_Notification::CopyFrom(const CPlayer_FriendNicknameChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_FriendNicknameChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_FriendNicknameChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_FriendNicknameChanged_Notification::InternalSwap(CPlayer_FriendNicknameChanged_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_FriendNicknameChanged_Notification, is_echo_to_self_)
      + sizeof(CPlayer_FriendNicknameChanged_Notification::is_echo_to_self_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_FriendNicknameChanged_Notification, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_FriendNicknameChanged_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[128]);
}

// ===================================================================

class CPlayer_FriendEquippedProfileItemsChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_FriendEquippedProfileItemsChanged_Notification>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_FriendEquippedProfileItemsChanged_Notification::CPlayer_FriendEquippedProfileItemsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_FriendEquippedProfileItemsChanged_Notification)
}
CPlayer_FriendEquippedProfileItemsChanged_Notification::CPlayer_FriendEquippedProfileItemsChanged_Notification(const CPlayer_FriendEquippedProfileItemsChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_FriendEquippedProfileItemsChanged_Notification)
}

inline void CPlayer_FriendEquippedProfileItemsChanged_Notification::SharedCtor() {
accountid_ = 0u;
}

CPlayer_FriendEquippedProfileItemsChanged_Notification::~CPlayer_FriendEquippedProfileItemsChanged_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_FriendEquippedProfileItemsChanged_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_FriendEquippedProfileItemsChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPlayer_FriendEquippedProfileItemsChanged_Notification::ArenaDtor(void* object) {
  CPlayer_FriendEquippedProfileItemsChanged_Notification* _this = reinterpret_cast< CPlayer_FriendEquippedProfileItemsChanged_Notification* >(object);
  (void)_this;
}
void CPlayer_FriendEquippedProfileItemsChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_FriendEquippedProfileItemsChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_FriendEquippedProfileItemsChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_FriendEquippedProfileItemsChanged_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_FriendEquippedProfileItemsChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_FriendEquippedProfileItemsChanged_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_FriendEquippedProfileItemsChanged_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_FriendEquippedProfileItemsChanged_Notification)
  return target;
}

size_t CPlayer_FriendEquippedProfileItemsChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_FriendEquippedProfileItemsChanged_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed32 accountid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_FriendEquippedProfileItemsChanged_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_FriendEquippedProfileItemsChanged_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_FriendEquippedProfileItemsChanged_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_FriendEquippedProfileItemsChanged_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_FriendEquippedProfileItemsChanged_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_FriendEquippedProfileItemsChanged_Notification &>(from));
}


void CPlayer_FriendEquippedProfileItemsChanged_Notification::MergeFrom(const CPlayer_FriendEquippedProfileItemsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_FriendEquippedProfileItemsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _internal_set_accountid(from._internal_accountid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_FriendEquippedProfileItemsChanged_Notification::CopyFrom(const CPlayer_FriendEquippedProfileItemsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_FriendEquippedProfileItemsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_FriendEquippedProfileItemsChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_FriendEquippedProfileItemsChanged_Notification::InternalSwap(CPlayer_FriendEquippedProfileItemsChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_FriendEquippedProfileItemsChanged_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[129]);
}

// ===================================================================

class CPlayer_NewSteamAnnouncementState_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_NewSteamAnnouncementState_Notification>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_announcement_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_NewSteamAnnouncementState_Notification::CPlayer_NewSteamAnnouncementState_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_NewSteamAnnouncementState_Notification)
}
CPlayer_NewSteamAnnouncementState_Notification::CPlayer_NewSteamAnnouncementState_Notification(const CPlayer_NewSteamAnnouncementState_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announcement_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_announcement_headline()) {
    announcement_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement_headline(), 
      GetArenaForAllocation());
  }
  announcement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_announcement_url()) {
    announcement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_NewSteamAnnouncementState_Notification)
}

inline void CPlayer_NewSteamAnnouncementState_Notification::SharedCtor() {
announcement_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  announcement_headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
announcement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  announcement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
}

CPlayer_NewSteamAnnouncementState_Notification::~CPlayer_NewSteamAnnouncementState_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_NewSteamAnnouncementState_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_NewSteamAnnouncementState_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  announcement_headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  announcement_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_NewSteamAnnouncementState_Notification::ArenaDtor(void* object) {
  CPlayer_NewSteamAnnouncementState_Notification* _this = reinterpret_cast< CPlayer_NewSteamAnnouncementState_Notification* >(object);
  (void)_this;
}
void CPlayer_NewSteamAnnouncementState_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_NewSteamAnnouncementState_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_NewSteamAnnouncementState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_NewSteamAnnouncementState_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&announcement_gid_) -
        reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_NewSteamAnnouncementState_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENewSteamAnnouncementState_IsValid(val))) {
            _internal_set_state(static_cast<::ENewSteamAnnouncementState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string announcement_headline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_announcement_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_NewSteamAnnouncementState_Notification.announcement_headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string announcement_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_announcement_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_NewSteamAnnouncementState_Notification.announcement_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_posted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_posted(&has_bits);
          time_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 announcement_gid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_announcement_gid(&has_bits);
          announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_NewSteamAnnouncementState_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_NewSteamAnnouncementState_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_headline().data(), static_cast<int>(this->_internal_announcement_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_NewSteamAnnouncementState_Notification.announcement_headline");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_announcement_headline(), target);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_url().data(), static_cast<int>(this->_internal_announcement_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_NewSteamAnnouncementState_Notification.announcement_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_announcement_url(), target);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_posted(), target);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_announcement_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_NewSteamAnnouncementState_Notification)
  return target;
}

size_t CPlayer_NewSteamAnnouncementState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_NewSteamAnnouncementState_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string announcement_headline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_headline());
    }

    // optional string announcement_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_url());
    }

    // optional .ENewSteamAnnouncementState state = 1 [default = k_ENewSteamAnnouncementState_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 time_posted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_posted());
    }

    // optional uint64 announcement_gid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_announcement_gid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_NewSteamAnnouncementState_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_NewSteamAnnouncementState_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_NewSteamAnnouncementState_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_NewSteamAnnouncementState_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_NewSteamAnnouncementState_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_NewSteamAnnouncementState_Notification &>(from));
}


void CPlayer_NewSteamAnnouncementState_Notification::MergeFrom(const CPlayer_NewSteamAnnouncementState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_NewSteamAnnouncementState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_announcement_headline(from._internal_announcement_headline());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_announcement_url(from._internal_announcement_url());
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_posted_ = from.time_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      announcement_gid_ = from.announcement_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_NewSteamAnnouncementState_Notification::CopyFrom(const CPlayer_NewSteamAnnouncementState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_NewSteamAnnouncementState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_NewSteamAnnouncementState_Notification::IsInitialized() const {
  return true;
}

void CPlayer_NewSteamAnnouncementState_Notification::InternalSwap(CPlayer_NewSteamAnnouncementState_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_headline_, lhs_arena,
      &other->announcement_headline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_url_, lhs_arena,
      &other->announcement_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_NewSteamAnnouncementState_Notification, announcement_gid_)
      + sizeof(CPlayer_NewSteamAnnouncementState_Notification::announcement_gid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_NewSteamAnnouncementState_Notification, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_NewSteamAnnouncementState_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[130]);
}

// ===================================================================

class CPlayer_CommunityPreferencesChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_CommunityPreferencesChanged_Notification>()._has_bits_);
  static const ::CPlayer_CommunityPreferences& preferences(const CPlayer_CommunityPreferencesChanged_Notification* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::UserContentDescriptorPreferences& content_descriptor_preferences(const CPlayer_CommunityPreferencesChanged_Notification* msg);
  static void set_has_content_descriptor_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CPlayer_CommunityPreferences&
CPlayer_CommunityPreferencesChanged_Notification::_Internal::preferences(const CPlayer_CommunityPreferencesChanged_Notification* msg) {
  return *msg->preferences_;
}
const ::UserContentDescriptorPreferences&
CPlayer_CommunityPreferencesChanged_Notification::_Internal::content_descriptor_preferences(const CPlayer_CommunityPreferencesChanged_Notification* msg) {
  return *msg->content_descriptor_preferences_;
}
void CPlayer_CommunityPreferencesChanged_Notification::clear_content_descriptor_preferences() {
  if (content_descriptor_preferences_ != nullptr) content_descriptor_preferences_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CPlayer_CommunityPreferencesChanged_Notification::CPlayer_CommunityPreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_CommunityPreferencesChanged_Notification)
}
CPlayer_CommunityPreferencesChanged_Notification::CPlayer_CommunityPreferencesChanged_Notification(const CPlayer_CommunityPreferencesChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  if (from._internal_has_content_descriptor_preferences()) {
    content_descriptor_preferences_ = new ::UserContentDescriptorPreferences(*from.content_descriptor_preferences_);
  } else {
    content_descriptor_preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_CommunityPreferencesChanged_Notification)
}

inline void CPlayer_CommunityPreferencesChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preferences_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_descriptor_preferences_) -
    reinterpret_cast<char*>(&preferences_)) + sizeof(content_descriptor_preferences_));
}

CPlayer_CommunityPreferencesChanged_Notification::~CPlayer_CommunityPreferencesChanged_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_CommunityPreferencesChanged_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_CommunityPreferencesChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
  if (this != internal_default_instance()) delete content_descriptor_preferences_;
}

void CPlayer_CommunityPreferencesChanged_Notification::ArenaDtor(void* object) {
  CPlayer_CommunityPreferencesChanged_Notification* _this = reinterpret_cast< CPlayer_CommunityPreferencesChanged_Notification* >(object);
  (void)_this;
}
void CPlayer_CommunityPreferencesChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_CommunityPreferencesChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_CommunityPreferencesChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_CommunityPreferencesChanged_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preferences_ != nullptr);
      preferences_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(content_descriptor_preferences_ != nullptr);
      content_descriptor_preferences_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_CommunityPreferencesChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_CommunityPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_content_descriptor_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_CommunityPreferencesChanged_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_CommunityPreferencesChanged_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::content_descriptor_preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_CommunityPreferencesChanged_Notification)
  return target;
}

size_t CPlayer_CommunityPreferencesChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_CommunityPreferencesChanged_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CPlayer_CommunityPreferences preferences = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferences_);
    }

    // optional .UserContentDescriptorPreferences content_descriptor_preferences = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_descriptor_preferences_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_CommunityPreferencesChanged_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_CommunityPreferencesChanged_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_CommunityPreferencesChanged_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_CommunityPreferencesChanged_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_CommunityPreferencesChanged_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_CommunityPreferencesChanged_Notification &>(from));
}


void CPlayer_CommunityPreferencesChanged_Notification::MergeFrom(const CPlayer_CommunityPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_CommunityPreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_preferences()->::CPlayer_CommunityPreferences::MergeFrom(from._internal_preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_content_descriptor_preferences()->::UserContentDescriptorPreferences::MergeFrom(from._internal_content_descriptor_preferences());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_CommunityPreferencesChanged_Notification::CopyFrom(const CPlayer_CommunityPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_CommunityPreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_CommunityPreferencesChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_CommunityPreferencesChanged_Notification::InternalSwap(CPlayer_CommunityPreferencesChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferencesChanged_Notification, content_descriptor_preferences_)
      + sizeof(CPlayer_CommunityPreferencesChanged_Notification::content_descriptor_preferences_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferencesChanged_Notification, preferences_)>(
          reinterpret_cast<char*>(&preferences_),
          reinterpret_cast<char*>(&other->preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_CommunityPreferencesChanged_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[131]);
}

// ===================================================================

class CPlayer_TextFilterWordsChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_TextFilterWordsChanged_Notification>()._has_bits_);
  static const ::CPlayer_TextFilterWords& words(const CPlayer_TextFilterWordsChanged_Notification* msg);
  static void set_has_words(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_TextFilterWords&
CPlayer_TextFilterWordsChanged_Notification::_Internal::words(const CPlayer_TextFilterWordsChanged_Notification* msg) {
  return *msg->words_;
}
CPlayer_TextFilterWordsChanged_Notification::CPlayer_TextFilterWordsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_TextFilterWordsChanged_Notification)
}
CPlayer_TextFilterWordsChanged_Notification::CPlayer_TextFilterWordsChanged_Notification(const CPlayer_TextFilterWordsChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_words()) {
    words_ = new ::CPlayer_TextFilterWords(*from.words_);
  } else {
    words_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_TextFilterWordsChanged_Notification)
}

inline void CPlayer_TextFilterWordsChanged_Notification::SharedCtor() {
words_ = nullptr;
}

CPlayer_TextFilterWordsChanged_Notification::~CPlayer_TextFilterWordsChanged_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_TextFilterWordsChanged_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_TextFilterWordsChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete words_;
}

void CPlayer_TextFilterWordsChanged_Notification::ArenaDtor(void* object) {
  CPlayer_TextFilterWordsChanged_Notification* _this = reinterpret_cast< CPlayer_TextFilterWordsChanged_Notification* >(object);
  (void)_this;
}
void CPlayer_TextFilterWordsChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_TextFilterWordsChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_TextFilterWordsChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_TextFilterWordsChanged_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(words_ != nullptr);
    words_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_TextFilterWordsChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPlayer_TextFilterWords words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_words(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_TextFilterWordsChanged_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_TextFilterWordsChanged_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_TextFilterWords words = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::words(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_TextFilterWordsChanged_Notification)
  return target;
}

size_t CPlayer_TextFilterWordsChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_TextFilterWordsChanged_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPlayer_TextFilterWords words = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *words_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_TextFilterWordsChanged_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_TextFilterWordsChanged_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_TextFilterWordsChanged_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_TextFilterWordsChanged_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_TextFilterWordsChanged_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_TextFilterWordsChanged_Notification &>(from));
}


void CPlayer_TextFilterWordsChanged_Notification::MergeFrom(const CPlayer_TextFilterWordsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_TextFilterWordsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_words()) {
    _internal_mutable_words()->::CPlayer_TextFilterWords::MergeFrom(from._internal_words());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_TextFilterWordsChanged_Notification::CopyFrom(const CPlayer_TextFilterWordsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_TextFilterWordsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_TextFilterWordsChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_TextFilterWordsChanged_Notification::InternalSwap(CPlayer_TextFilterWordsChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(words_, other->words_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_TextFilterWordsChanged_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[132]);
}

// ===================================================================

class CPlayer_PerFriendPreferencesChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_PerFriendPreferencesChanged_Notification>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PerFriendPreferences& preferences(const CPlayer_PerFriendPreferencesChanged_Notification* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PerFriendPreferences&
CPlayer_PerFriendPreferencesChanged_Notification::_Internal::preferences(const CPlayer_PerFriendPreferencesChanged_Notification* msg) {
  return *msg->preferences_;
}
CPlayer_PerFriendPreferencesChanged_Notification::CPlayer_PerFriendPreferencesChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_PerFriendPreferencesChanged_Notification)
}
CPlayer_PerFriendPreferencesChanged_Notification::CPlayer_PerFriendPreferencesChanged_Notification(const CPlayer_PerFriendPreferencesChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::PerFriendPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_PerFriendPreferencesChanged_Notification)
}

inline void CPlayer_PerFriendPreferencesChanged_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&preferences_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&preferences_)) + sizeof(accountid_));
}

CPlayer_PerFriendPreferencesChanged_Notification::~CPlayer_PerFriendPreferencesChanged_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_PerFriendPreferencesChanged_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_PerFriendPreferencesChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_PerFriendPreferencesChanged_Notification::ArenaDtor(void* object) {
  CPlayer_PerFriendPreferencesChanged_Notification* _this = reinterpret_cast< CPlayer_PerFriendPreferencesChanged_Notification* >(object);
  (void)_this;
}
void CPlayer_PerFriendPreferencesChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_PerFriendPreferencesChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_PerFriendPreferencesChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_PerFriendPreferencesChanged_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_PerFriendPreferencesChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .PerFriendPreferences preferences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_PerFriendPreferencesChanged_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_PerFriendPreferencesChanged_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional .PerFriendPreferences preferences = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_PerFriendPreferencesChanged_Notification)
  return target;
}

size_t CPlayer_PerFriendPreferencesChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_PerFriendPreferencesChanged_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .PerFriendPreferences preferences = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferences_);
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_PerFriendPreferencesChanged_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_PerFriendPreferencesChanged_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_PerFriendPreferencesChanged_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_PerFriendPreferencesChanged_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_PerFriendPreferencesChanged_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_PerFriendPreferencesChanged_Notification &>(from));
}


void CPlayer_PerFriendPreferencesChanged_Notification::MergeFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_PerFriendPreferencesChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_preferences()->::PerFriendPreferences::MergeFrom(from._internal_preferences());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_PerFriendPreferencesChanged_Notification::CopyFrom(const CPlayer_PerFriendPreferencesChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_PerFriendPreferencesChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_PerFriendPreferencesChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_PerFriendPreferencesChanged_Notification::InternalSwap(CPlayer_PerFriendPreferencesChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_PerFriendPreferencesChanged_Notification, accountid_)
      + sizeof(CPlayer_PerFriendPreferencesChanged_Notification::accountid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_PerFriendPreferencesChanged_Notification, preferences_)>(
          reinterpret_cast<char*>(&preferences_),
          reinterpret_cast<char*>(&other->preferences_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_PerFriendPreferencesChanged_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[133]);
}

// ===================================================================

class CPlayer_PrivacySettingsChanged_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_PrivacySettingsChanged_Notification>()._has_bits_);
  static const ::CPrivacySettings& privacy_settings(const CPlayer_PrivacySettingsChanged_Notification* msg);
  static void set_has_privacy_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPrivacySettings&
CPlayer_PrivacySettingsChanged_Notification::_Internal::privacy_settings(const CPlayer_PrivacySettingsChanged_Notification* msg) {
  return *msg->privacy_settings_;
}
CPlayer_PrivacySettingsChanged_Notification::CPlayer_PrivacySettingsChanged_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPlayer_PrivacySettingsChanged_Notification)
}
CPlayer_PrivacySettingsChanged_Notification::CPlayer_PrivacySettingsChanged_Notification(const CPlayer_PrivacySettingsChanged_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_privacy_settings()) {
    privacy_settings_ = new ::CPrivacySettings(*from.privacy_settings_);
  } else {
    privacy_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_PrivacySettingsChanged_Notification)
}

inline void CPlayer_PrivacySettingsChanged_Notification::SharedCtor() {
privacy_settings_ = nullptr;
}

CPlayer_PrivacySettingsChanged_Notification::~CPlayer_PrivacySettingsChanged_Notification() {
  // @@protoc_insertion_point(destructor:CPlayer_PrivacySettingsChanged_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPlayer_PrivacySettingsChanged_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete privacy_settings_;
}

void CPlayer_PrivacySettingsChanged_Notification::ArenaDtor(void* object) {
  CPlayer_PrivacySettingsChanged_Notification* _this = reinterpret_cast< CPlayer_PrivacySettingsChanged_Notification* >(object);
  (void)_this;
}
void CPlayer_PrivacySettingsChanged_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_PrivacySettingsChanged_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_PrivacySettingsChanged_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_PrivacySettingsChanged_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(privacy_settings_ != nullptr);
    privacy_settings_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_PrivacySettingsChanged_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CPrivacySettings privacy_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_privacy_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPlayer_PrivacySettingsChanged_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_PrivacySettingsChanged_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPrivacySettings privacy_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::privacy_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_PrivacySettingsChanged_Notification)
  return target;
}

size_t CPlayer_PrivacySettingsChanged_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_PrivacySettingsChanged_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPrivacySettings privacy_settings = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *privacy_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPlayer_PrivacySettingsChanged_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPlayer_PrivacySettingsChanged_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPlayer_PrivacySettingsChanged_Notification::GetClassData() const { return &_class_data_; }

void CPlayer_PrivacySettingsChanged_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPlayer_PrivacySettingsChanged_Notification *>(to)->MergeFrom(
      static_cast<const CPlayer_PrivacySettingsChanged_Notification &>(from));
}


void CPlayer_PrivacySettingsChanged_Notification::MergeFrom(const CPlayer_PrivacySettingsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_PrivacySettingsChanged_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_privacy_settings()) {
    _internal_mutable_privacy_settings()->::CPrivacySettings::MergeFrom(from._internal_privacy_settings());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPlayer_PrivacySettingsChanged_Notification::CopyFrom(const CPlayer_PrivacySettingsChanged_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_PrivacySettingsChanged_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_PrivacySettingsChanged_Notification::IsInitialized() const {
  return true;
}

void CPlayer_PrivacySettingsChanged_Notification::InternalSwap(CPlayer_PrivacySettingsChanged_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(privacy_settings_, other->privacy_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_PrivacySettingsChanged_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fplayer_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fplayer_2esteamclient_2eproto[134]);
}

// ===================================================================

Player::~Player() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Player::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Player::GetDescriptor() {
  return descriptor();
}

void Player::GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetMutualFriendsForIncomingInvites_Request*,
                         ::CPlayer_GetMutualFriendsForIncomingInvites_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMutualFriendsForIncomingInvites() not implemented.");
  done->Run();
}

void Player::GetOwnedGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetOwnedGames_Request*,
                         ::CPlayer_GetOwnedGames_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetOwnedGames() not implemented.");
  done->Run();
}

void Player::GetPlayNext(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPlayNext_Request*,
                         ::CPlayer_GetPlayNext_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPlayNext() not implemented.");
  done->Run();
}

void Player::GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetFriendsGameplayInfo_Request*,
                         ::CPlayer_GetFriendsGameplayInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendsGameplayInfo() not implemented.");
  done->Run();
}

void Player::GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetGameBadgeLevels_Request*,
                         ::CPlayer_GetGameBadgeLevels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameBadgeLevels() not implemented.");
  done->Run();
}

void Player::GetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetProfileBackground_Request*,
                         ::CPlayer_GetProfileBackground_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetProfileBackground() not implemented.");
  done->Run();
}

void Player::SetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetProfileBackground_Request*,
                         ::CPlayer_SetProfileBackground_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetProfileBackground() not implemented.");
  done->Run();
}

void Player::GetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetMiniProfileBackground_Request*,
                         ::CPlayer_GetMiniProfileBackground_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMiniProfileBackground() not implemented.");
  done->Run();
}

void Player::SetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetMiniProfileBackground_Request*,
                         ::CPlayer_SetMiniProfileBackground_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetMiniProfileBackground() not implemented.");
  done->Run();
}

void Player::GetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetAvatarFrame_Request*,
                         ::CPlayer_GetAvatarFrame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAvatarFrame() not implemented.");
  done->Run();
}

void Player::SetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetAvatarFrame_Request*,
                         ::CPlayer_SetAvatarFrame_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetAvatarFrame() not implemented.");
  done->Run();
}

void Player::GetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetAnimatedAvatar_Request*,
                         ::CPlayer_GetAnimatedAvatar_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAnimatedAvatar() not implemented.");
  done->Run();
}

void Player::SetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetAnimatedAvatar_Request*,
                         ::CPlayer_SetAnimatedAvatar_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetAnimatedAvatar() not implemented.");
  done->Run();
}

void Player::GetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetSteamDeckKeyboardSkin_Request*,
                         ::CPlayer_GetSteamDeckKeyboardSkin_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSteamDeckKeyboardSkin() not implemented.");
  done->Run();
}

void Player::SetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetSteamDeckKeyboardSkin_Request*,
                         ::CPlayer_SetSteamDeckKeyboardSkin_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetSteamDeckKeyboardSkin() not implemented.");
  done->Run();
}

void Player::GetProfileItemsOwned(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetProfileItemsOwned_Request*,
                         ::CPlayer_GetProfileItemsOwned_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetProfileItemsOwned() not implemented.");
  done->Run();
}

void Player::GetProfileItemsEquipped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetProfileItemsEquipped_Request*,
                         ::CPlayer_GetProfileItemsEquipped_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetProfileItemsEquipped() not implemented.");
  done->Run();
}

void Player::SetEquippedProfileItemFlags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetEquippedProfileItemFlags_Request*,
                         ::CPlayer_SetEquippedProfileItemFlags_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetEquippedProfileItemFlags() not implemented.");
  done->Run();
}

void Player::GetEmoticonList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetEmoticonList_Request*,
                         ::CPlayer_GetEmoticonList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetEmoticonList() not implemented.");
  done->Run();
}

void Player::GetTopAchievementsForGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetTopAchievementsForGames_Request*,
                         ::CPlayer_GetTopAchievementsForGames_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTopAchievementsForGames() not implemented.");
  done->Run();
}

void Player::GetAchievementsProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetAchievementsProgress_Request*,
                         ::CPlayer_GetAchievementsProgress_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAchievementsProgress() not implemented.");
  done->Run();
}

void Player::GetGameAchievements(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetGameAchievements_Request*,
                         ::CPlayer_GetGameAchievements_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameAchievements() not implemented.");
  done->Run();
}

void Player::GetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetFavoriteBadge_Request*,
                         ::CPlayer_GetFavoriteBadge_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFavoriteBadge() not implemented.");
  done->Run();
}

void Player::SetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetFavoriteBadge_Request*,
                         ::CPlayer_SetFavoriteBadge_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetFavoriteBadge() not implemented.");
  done->Run();
}

void Player::GetProfileCustomization(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetProfileCustomization_Request*,
                         ::CPlayer_GetProfileCustomization_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetProfileCustomization() not implemented.");
  done->Run();
}

void Player::GetPurchasedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPurchasedProfileCustomizations_Request*,
                         ::CPlayer_GetPurchasedProfileCustomizations_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPurchasedProfileCustomizations() not implemented.");
  done->Run();
}

void Player::GetPurchasedAndUpgradedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request*,
                         ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPurchasedAndUpgradedProfileCustomizations() not implemented.");
  done->Run();
}

void Player::GetProfileThemesAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetProfileThemesAvailable_Request*,
                         ::CPlayer_GetProfileThemesAvailable_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetProfileThemesAvailable() not implemented.");
  done->Run();
}

void Player::SetProfileTheme(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetProfileTheme_Request*,
                         ::CPlayer_SetProfileTheme_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetProfileTheme() not implemented.");
  done->Run();
}

void Player::SetProfilePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetProfilePreferences_Request*,
                         ::CPlayer_SetProfilePreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetProfilePreferences() not implemented.");
  done->Run();
}

void Player::PostStatusToFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_PostStatusToFriends_Request*,
                         ::CPlayer_PostStatusToFriends_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PostStatusToFriends() not implemented.");
  done->Run();
}

void Player::GetPostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPostedStatus_Request*,
                         ::CPlayer_GetPostedStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPostedStatus() not implemented.");
  done->Run();
}

void Player::DeletePostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_DeletePostedStatus_Request*,
                         ::CPlayer_DeletePostedStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeletePostedStatus() not implemented.");
  done->Run();
}

void Player::ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetLastPlayedTimes_Request*,
                         ::CPlayer_GetLastPlayedTimes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetLastPlayedTimes() not implemented.");
  done->Run();
}

void Player::GetTimeSSAAccepted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetTimeSSAAccepted_Request*,
                         ::CPlayer_GetTimeSSAAccepted_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTimeSSAAccepted() not implemented.");
  done->Run();
}

void Player::AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_AcceptSSA_Request*,
                         ::CPlayer_AcceptSSA_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptSSA() not implemented.");
  done->Run();
}

void Player::GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetNicknameList_Request*,
                         ::CPlayer_GetNicknameList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNicknameList() not implemented.");
  done->Run();
}

void Player::GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPerFriendPreferences_Request*,
                         ::CPlayer_GetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetPerFriendPreferences_Request*,
                         ::CPlayer_SetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_AddFriend_Request*,
                         ::CPlayer_AddFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void Player::RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_RemoveFriend_Request*,
                         ::CPlayer_RemoveFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveFriend() not implemented.");
  done->Run();
}

void Player::IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_IgnoreFriend_Request*,
                         ::CPlayer_IgnoreFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IgnoreFriend() not implemented.");
  done->Run();
}

void Player::GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetCommunityPreferences_Request*,
                         ::CPlayer_GetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetCommunityPreferences_Request*,
                         ::CPlayer_SetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::GetTextFilterWords(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetTextFilterWords_Request*,
                         ::CPlayer_GetTextFilterWords_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTextFilterWords() not implemented.");
  done->Run();
}

void Player::GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetNewSteamAnnouncementState_Request*,
                         ::CPlayer_GetNewSteamAnnouncementState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNewSteamAnnouncementState() not implemented.");
  done->Run();
}

void Player::UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_UpdateSteamAnnouncementLastRead_Request*,
                         ::CPlayer_UpdateSteamAnnouncementLastRead_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateSteamAnnouncementLastRead() not implemented.");
  done->Run();
}

void Player::GetPrivacySettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPrivacySettings_Request*,
                         ::CPlayer_GetPrivacySettings_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPrivacySettings() not implemented.");
  done->Run();
}

void Player::GetDurationControl(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetDurationControl_Request*,
                         ::CPlayer_GetDurationControl_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDurationControl() not implemented.");
  done->Run();
}

void Player::RecordDisconnectedPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_RecordDisconnectedPlaytime_Request*,
                         ::CPlayer_RecordDisconnectedPlaytime_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RecordDisconnectedPlaytime() not implemented.");
  done->Run();
}

void Player::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetMutualFriendsForIncomingInvites(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetMutualFriendsForIncomingInvites_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetMutualFriendsForIncomingInvites_Response*>(
                 response),
             done);
      break;
    case 1:
      GetOwnedGames(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetOwnedGames_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetOwnedGames_Response*>(
                 response),
             done);
      break;
    case 2:
      GetPlayNext(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPlayNext_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPlayNext_Response*>(
                 response),
             done);
      break;
    case 3:
      GetFriendsGameplayInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetFriendsGameplayInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetFriendsGameplayInfo_Response*>(
                 response),
             done);
      break;
    case 4:
      GetGameBadgeLevels(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetGameBadgeLevels_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetGameBadgeLevels_Response*>(
                 response),
             done);
      break;
    case 5:
      GetProfileBackground(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetProfileBackground_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetProfileBackground_Response*>(
                 response),
             done);
      break;
    case 6:
      SetProfileBackground(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetProfileBackground_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetProfileBackground_Response*>(
                 response),
             done);
      break;
    case 7:
      GetMiniProfileBackground(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetMiniProfileBackground_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetMiniProfileBackground_Response*>(
                 response),
             done);
      break;
    case 8:
      SetMiniProfileBackground(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetMiniProfileBackground_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetMiniProfileBackground_Response*>(
                 response),
             done);
      break;
    case 9:
      GetAvatarFrame(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetAvatarFrame_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetAvatarFrame_Response*>(
                 response),
             done);
      break;
    case 10:
      SetAvatarFrame(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetAvatarFrame_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetAvatarFrame_Response*>(
                 response),
             done);
      break;
    case 11:
      GetAnimatedAvatar(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetAnimatedAvatar_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetAnimatedAvatar_Response*>(
                 response),
             done);
      break;
    case 12:
      SetAnimatedAvatar(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetAnimatedAvatar_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetAnimatedAvatar_Response*>(
                 response),
             done);
      break;
    case 13:
      GetSteamDeckKeyboardSkin(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetSteamDeckKeyboardSkin_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetSteamDeckKeyboardSkin_Response*>(
                 response),
             done);
      break;
    case 14:
      SetSteamDeckKeyboardSkin(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetSteamDeckKeyboardSkin_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetSteamDeckKeyboardSkin_Response*>(
                 response),
             done);
      break;
    case 15:
      GetProfileItemsOwned(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetProfileItemsOwned_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetProfileItemsOwned_Response*>(
                 response),
             done);
      break;
    case 16:
      GetProfileItemsEquipped(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetProfileItemsEquipped_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetProfileItemsEquipped_Response*>(
                 response),
             done);
      break;
    case 17:
      SetEquippedProfileItemFlags(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetEquippedProfileItemFlags_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetEquippedProfileItemFlags_Response*>(
                 response),
             done);
      break;
    case 18:
      GetEmoticonList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetEmoticonList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetEmoticonList_Response*>(
                 response),
             done);
      break;
    case 19:
      GetTopAchievementsForGames(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetTopAchievementsForGames_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetTopAchievementsForGames_Response*>(
                 response),
             done);
      break;
    case 20:
      GetAchievementsProgress(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetAchievementsProgress_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetAchievementsProgress_Response*>(
                 response),
             done);
      break;
    case 21:
      GetGameAchievements(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetGameAchievements_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetGameAchievements_Response*>(
                 response),
             done);
      break;
    case 22:
      GetFavoriteBadge(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetFavoriteBadge_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetFavoriteBadge_Response*>(
                 response),
             done);
      break;
    case 23:
      SetFavoriteBadge(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetFavoriteBadge_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetFavoriteBadge_Response*>(
                 response),
             done);
      break;
    case 24:
      GetProfileCustomization(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetProfileCustomization_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetProfileCustomization_Response*>(
                 response),
             done);
      break;
    case 25:
      GetPurchasedProfileCustomizations(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPurchasedProfileCustomizations_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPurchasedProfileCustomizations_Response*>(
                 response),
             done);
      break;
    case 26:
      GetPurchasedAndUpgradedProfileCustomizations(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response*>(
                 response),
             done);
      break;
    case 27:
      GetProfileThemesAvailable(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetProfileThemesAvailable_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetProfileThemesAvailable_Response*>(
                 response),
             done);
      break;
    case 28:
      SetProfileTheme(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetProfileTheme_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetProfileTheme_Response*>(
                 response),
             done);
      break;
    case 29:
      SetProfilePreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetProfilePreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetProfilePreferences_Response*>(
                 response),
             done);
      break;
    case 30:
      PostStatusToFriends(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_PostStatusToFriends_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_PostStatusToFriends_Response*>(
                 response),
             done);
      break;
    case 31:
      GetPostedStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPostedStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPostedStatus_Response*>(
                 response),
             done);
      break;
    case 32:
      DeletePostedStatus(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_DeletePostedStatus_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_DeletePostedStatus_Response*>(
                 response),
             done);
      break;
    case 33:
      ClientGetLastPlayedTimes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetLastPlayedTimes_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetLastPlayedTimes_Response*>(
                 response),
             done);
      break;
    case 34:
      GetTimeSSAAccepted(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetTimeSSAAccepted_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetTimeSSAAccepted_Response*>(
                 response),
             done);
      break;
    case 35:
      AcceptSSA(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_AcceptSSA_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_AcceptSSA_Response*>(
                 response),
             done);
      break;
    case 36:
      GetNicknameList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetNicknameList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetNicknameList_Response*>(
                 response),
             done);
      break;
    case 37:
      GetPerFriendPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPerFriendPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPerFriendPreferences_Response*>(
                 response),
             done);
      break;
    case 38:
      SetPerFriendPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetPerFriendPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetPerFriendPreferences_Response*>(
                 response),
             done);
      break;
    case 39:
      AddFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_AddFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_AddFriend_Response*>(
                 response),
             done);
      break;
    case 40:
      RemoveFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_RemoveFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_RemoveFriend_Response*>(
                 response),
             done);
      break;
    case 41:
      IgnoreFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_IgnoreFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_IgnoreFriend_Response*>(
                 response),
             done);
      break;
    case 42:
      GetCommunityPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetCommunityPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetCommunityPreferences_Response*>(
                 response),
             done);
      break;
    case 43:
      SetCommunityPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetCommunityPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetCommunityPreferences_Response*>(
                 response),
             done);
      break;
    case 44:
      GetTextFilterWords(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetTextFilterWords_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetTextFilterWords_Response*>(
                 response),
             done);
      break;
    case 45:
      GetNewSteamAnnouncementState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetNewSteamAnnouncementState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetNewSteamAnnouncementState_Response*>(
                 response),
             done);
      break;
    case 46:
      UpdateSteamAnnouncementLastRead(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_UpdateSteamAnnouncementLastRead_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_UpdateSteamAnnouncementLastRead_Response*>(
                 response),
             done);
      break;
    case 47:
      GetPrivacySettings(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPrivacySettings_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPrivacySettings_Response*>(
                 response),
             done);
      break;
    case 48:
      GetDurationControl(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetDurationControl_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetDurationControl_Response*>(
                 response),
             done);
      break;
    case 49:
      RecordDisconnectedPlaytime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_RecordDisconnectedPlaytime_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_RecordDisconnectedPlaytime_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Player::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPlayer_GetMutualFriendsForIncomingInvites_Request::default_instance();
    case 1:
      return ::CPlayer_GetOwnedGames_Request::default_instance();
    case 2:
      return ::CPlayer_GetPlayNext_Request::default_instance();
    case 3:
      return ::CPlayer_GetFriendsGameplayInfo_Request::default_instance();
    case 4:
      return ::CPlayer_GetGameBadgeLevels_Request::default_instance();
    case 5:
      return ::CPlayer_GetProfileBackground_Request::default_instance();
    case 6:
      return ::CPlayer_SetProfileBackground_Request::default_instance();
    case 7:
      return ::CPlayer_GetMiniProfileBackground_Request::default_instance();
    case 8:
      return ::CPlayer_SetMiniProfileBackground_Request::default_instance();
    case 9:
      return ::CPlayer_GetAvatarFrame_Request::default_instance();
    case 10:
      return ::CPlayer_SetAvatarFrame_Request::default_instance();
    case 11:
      return ::CPlayer_GetAnimatedAvatar_Request::default_instance();
    case 12:
      return ::CPlayer_SetAnimatedAvatar_Request::default_instance();
    case 13:
      return ::CPlayer_GetSteamDeckKeyboardSkin_Request::default_instance();
    case 14:
      return ::CPlayer_SetSteamDeckKeyboardSkin_Request::default_instance();
    case 15:
      return ::CPlayer_GetProfileItemsOwned_Request::default_instance();
    case 16:
      return ::CPlayer_GetProfileItemsEquipped_Request::default_instance();
    case 17:
      return ::CPlayer_SetEquippedProfileItemFlags_Request::default_instance();
    case 18:
      return ::CPlayer_GetEmoticonList_Request::default_instance();
    case 19:
      return ::CPlayer_GetTopAchievementsForGames_Request::default_instance();
    case 20:
      return ::CPlayer_GetAchievementsProgress_Request::default_instance();
    case 21:
      return ::CPlayer_GetGameAchievements_Request::default_instance();
    case 22:
      return ::CPlayer_GetFavoriteBadge_Request::default_instance();
    case 23:
      return ::CPlayer_SetFavoriteBadge_Request::default_instance();
    case 24:
      return ::CPlayer_GetProfileCustomization_Request::default_instance();
    case 25:
      return ::CPlayer_GetPurchasedProfileCustomizations_Request::default_instance();
    case 26:
      return ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request::default_instance();
    case 27:
      return ::CPlayer_GetProfileThemesAvailable_Request::default_instance();
    case 28:
      return ::CPlayer_SetProfileTheme_Request::default_instance();
    case 29:
      return ::CPlayer_SetProfilePreferences_Request::default_instance();
    case 30:
      return ::CPlayer_PostStatusToFriends_Request::default_instance();
    case 31:
      return ::CPlayer_GetPostedStatus_Request::default_instance();
    case 32:
      return ::CPlayer_DeletePostedStatus_Request::default_instance();
    case 33:
      return ::CPlayer_GetLastPlayedTimes_Request::default_instance();
    case 34:
      return ::CPlayer_GetTimeSSAAccepted_Request::default_instance();
    case 35:
      return ::CPlayer_AcceptSSA_Request::default_instance();
    case 36:
      return ::CPlayer_GetNicknameList_Request::default_instance();
    case 37:
      return ::CPlayer_GetPerFriendPreferences_Request::default_instance();
    case 38:
      return ::CPlayer_SetPerFriendPreferences_Request::default_instance();
    case 39:
      return ::CPlayer_AddFriend_Request::default_instance();
    case 40:
      return ::CPlayer_RemoveFriend_Request::default_instance();
    case 41:
      return ::CPlayer_IgnoreFriend_Request::default_instance();
    case 42:
      return ::CPlayer_GetCommunityPreferences_Request::default_instance();
    case 43:
      return ::CPlayer_SetCommunityPreferences_Request::default_instance();
    case 44:
      return ::CPlayer_GetTextFilterWords_Request::default_instance();
    case 45:
      return ::CPlayer_GetNewSteamAnnouncementState_Request::default_instance();
    case 46:
      return ::CPlayer_UpdateSteamAnnouncementLastRead_Request::default_instance();
    case 47:
      return ::CPlayer_GetPrivacySettings_Request::default_instance();
    case 48:
      return ::CPlayer_GetDurationControl_Request::default_instance();
    case 49:
      return ::CPlayer_RecordDisconnectedPlaytime_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Player::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPlayer_GetMutualFriendsForIncomingInvites_Response::default_instance();
    case 1:
      return ::CPlayer_GetOwnedGames_Response::default_instance();
    case 2:
      return ::CPlayer_GetPlayNext_Response::default_instance();
    case 3:
      return ::CPlayer_GetFriendsGameplayInfo_Response::default_instance();
    case 4:
      return ::CPlayer_GetGameBadgeLevels_Response::default_instance();
    case 5:
      return ::CPlayer_GetProfileBackground_Response::default_instance();
    case 6:
      return ::CPlayer_SetProfileBackground_Response::default_instance();
    case 7:
      return ::CPlayer_GetMiniProfileBackground_Response::default_instance();
    case 8:
      return ::CPlayer_SetMiniProfileBackground_Response::default_instance();
    case 9:
      return ::CPlayer_GetAvatarFrame_Response::default_instance();
    case 10:
      return ::CPlayer_SetAvatarFrame_Response::default_instance();
    case 11:
      return ::CPlayer_GetAnimatedAvatar_Response::default_instance();
    case 12:
      return ::CPlayer_SetAnimatedAvatar_Response::default_instance();
    case 13:
      return ::CPlayer_GetSteamDeckKeyboardSkin_Response::default_instance();
    case 14:
      return ::CPlayer_SetSteamDeckKeyboardSkin_Response::default_instance();
    case 15:
      return ::CPlayer_GetProfileItemsOwned_Response::default_instance();
    case 16:
      return ::CPlayer_GetProfileItemsEquipped_Response::default_instance();
    case 17:
      return ::CPlayer_SetEquippedProfileItemFlags_Response::default_instance();
    case 18:
      return ::CPlayer_GetEmoticonList_Response::default_instance();
    case 19:
      return ::CPlayer_GetTopAchievementsForGames_Response::default_instance();
    case 20:
      return ::CPlayer_GetAchievementsProgress_Response::default_instance();
    case 21:
      return ::CPlayer_GetGameAchievements_Response::default_instance();
    case 22:
      return ::CPlayer_GetFavoriteBadge_Response::default_instance();
    case 23:
      return ::CPlayer_SetFavoriteBadge_Response::default_instance();
    case 24:
      return ::CPlayer_GetProfileCustomization_Response::default_instance();
    case 25:
      return ::CPlayer_GetPurchasedProfileCustomizations_Response::default_instance();
    case 26:
      return ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response::default_instance();
    case 27:
      return ::CPlayer_GetProfileThemesAvailable_Response::default_instance();
    case 28:
      return ::CPlayer_SetProfileTheme_Response::default_instance();
    case 29:
      return ::CPlayer_SetProfilePreferences_Response::default_instance();
    case 30:
      return ::CPlayer_PostStatusToFriends_Response::default_instance();
    case 31:
      return ::CPlayer_GetPostedStatus_Response::default_instance();
    case 32:
      return ::CPlayer_DeletePostedStatus_Response::default_instance();
    case 33:
      return ::CPlayer_GetLastPlayedTimes_Response::default_instance();
    case 34:
      return ::CPlayer_GetTimeSSAAccepted_Response::default_instance();
    case 35:
      return ::CPlayer_AcceptSSA_Response::default_instance();
    case 36:
      return ::CPlayer_GetNicknameList_Response::default_instance();
    case 37:
      return ::CPlayer_GetPerFriendPreferences_Response::default_instance();
    case 38:
      return ::CPlayer_SetPerFriendPreferences_Response::default_instance();
    case 39:
      return ::CPlayer_AddFriend_Response::default_instance();
    case 40:
      return ::CPlayer_RemoveFriend_Response::default_instance();
    case 41:
      return ::CPlayer_IgnoreFriend_Response::default_instance();
    case 42:
      return ::CPlayer_GetCommunityPreferences_Response::default_instance();
    case 43:
      return ::CPlayer_SetCommunityPreferences_Response::default_instance();
    case 44:
      return ::CPlayer_GetTextFilterWords_Response::default_instance();
    case 45:
      return ::CPlayer_GetNewSteamAnnouncementState_Response::default_instance();
    case 46:
      return ::CPlayer_UpdateSteamAnnouncementLastRead_Response::default_instance();
    case 47:
      return ::CPlayer_GetPrivacySettings_Response::default_instance();
    case 48:
      return ::CPlayer_GetDurationControl_Response::default_instance();
    case 49:
      return ::CPlayer_RecordDisconnectedPlaytime_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Player_Stub::Player_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Player_Stub::Player_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Player_Stub::~Player_Stub() {
  if (owns_channel_) delete channel_;
}

void Player_Stub::GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                              ::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Player_Stub::GetOwnedGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetOwnedGames_Request* request,
                              ::CPlayer_GetOwnedGames_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Player_Stub::GetPlayNext(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPlayNext_Request* request,
                              ::CPlayer_GetPlayNext_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Player_Stub::GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetFriendsGameplayInfo_Request* request,
                              ::CPlayer_GetFriendsGameplayInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Player_Stub::GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetGameBadgeLevels_Request* request,
                              ::CPlayer_GetGameBadgeLevels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Player_Stub::GetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetProfileBackground_Request* request,
                              ::CPlayer_GetProfileBackground_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Player_Stub::SetProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetProfileBackground_Request* request,
                              ::CPlayer_SetProfileBackground_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Player_Stub::GetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetMiniProfileBackground_Request* request,
                              ::CPlayer_GetMiniProfileBackground_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Player_Stub::SetMiniProfileBackground(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetMiniProfileBackground_Request* request,
                              ::CPlayer_SetMiniProfileBackground_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Player_Stub::GetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetAvatarFrame_Request* request,
                              ::CPlayer_GetAvatarFrame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Player_Stub::SetAvatarFrame(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetAvatarFrame_Request* request,
                              ::CPlayer_SetAvatarFrame_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Player_Stub::GetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetAnimatedAvatar_Request* request,
                              ::CPlayer_GetAnimatedAvatar_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Player_Stub::SetAnimatedAvatar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetAnimatedAvatar_Request* request,
                              ::CPlayer_SetAnimatedAvatar_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Player_Stub::GetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetSteamDeckKeyboardSkin_Request* request,
                              ::CPlayer_GetSteamDeckKeyboardSkin_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Player_Stub::SetSteamDeckKeyboardSkin(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetSteamDeckKeyboardSkin_Request* request,
                              ::CPlayer_SetSteamDeckKeyboardSkin_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void Player_Stub::GetProfileItemsOwned(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetProfileItemsOwned_Request* request,
                              ::CPlayer_GetProfileItemsOwned_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void Player_Stub::GetProfileItemsEquipped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetProfileItemsEquipped_Request* request,
                              ::CPlayer_GetProfileItemsEquipped_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void Player_Stub::SetEquippedProfileItemFlags(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetEquippedProfileItemFlags_Request* request,
                              ::CPlayer_SetEquippedProfileItemFlags_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void Player_Stub::GetEmoticonList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetEmoticonList_Request* request,
                              ::CPlayer_GetEmoticonList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void Player_Stub::GetTopAchievementsForGames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetTopAchievementsForGames_Request* request,
                              ::CPlayer_GetTopAchievementsForGames_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void Player_Stub::GetAchievementsProgress(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetAchievementsProgress_Request* request,
                              ::CPlayer_GetAchievementsProgress_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void Player_Stub::GetGameAchievements(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetGameAchievements_Request* request,
                              ::CPlayer_GetGameAchievements_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void Player_Stub::GetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetFavoriteBadge_Request* request,
                              ::CPlayer_GetFavoriteBadge_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void Player_Stub::SetFavoriteBadge(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetFavoriteBadge_Request* request,
                              ::CPlayer_SetFavoriteBadge_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void Player_Stub::GetProfileCustomization(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetProfileCustomization_Request* request,
                              ::CPlayer_GetProfileCustomization_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void Player_Stub::GetPurchasedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPurchasedProfileCustomizations_Request* request,
                              ::CPlayer_GetPurchasedProfileCustomizations_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void Player_Stub::GetPurchasedAndUpgradedProfileCustomizations(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* request,
                              ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void Player_Stub::GetProfileThemesAvailable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetProfileThemesAvailable_Request* request,
                              ::CPlayer_GetProfileThemesAvailable_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void Player_Stub::SetProfileTheme(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetProfileTheme_Request* request,
                              ::CPlayer_SetProfileTheme_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void Player_Stub::SetProfilePreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetProfilePreferences_Request* request,
                              ::CPlayer_SetProfilePreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void Player_Stub::PostStatusToFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_PostStatusToFriends_Request* request,
                              ::CPlayer_PostStatusToFriends_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void Player_Stub::GetPostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPostedStatus_Request* request,
                              ::CPlayer_GetPostedStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void Player_Stub::DeletePostedStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_DeletePostedStatus_Request* request,
                              ::CPlayer_DeletePostedStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
void Player_Stub::ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetLastPlayedTimes_Request* request,
                              ::CPlayer_GetLastPlayedTimes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33),
                       controller, request, response, done);
}
void Player_Stub::GetTimeSSAAccepted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetTimeSSAAccepted_Request* request,
                              ::CPlayer_GetTimeSSAAccepted_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(34),
                       controller, request, response, done);
}
void Player_Stub::AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_AcceptSSA_Request* request,
                              ::CPlayer_AcceptSSA_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(35),
                       controller, request, response, done);
}
void Player_Stub::GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetNicknameList_Request* request,
                              ::CPlayer_GetNicknameList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(36),
                       controller, request, response, done);
}
void Player_Stub::GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPerFriendPreferences_Request* request,
                              ::CPlayer_GetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(37),
                       controller, request, response, done);
}
void Player_Stub::SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetPerFriendPreferences_Request* request,
                              ::CPlayer_SetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(38),
                       controller, request, response, done);
}
void Player_Stub::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_AddFriend_Request* request,
                              ::CPlayer_AddFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(39),
                       controller, request, response, done);
}
void Player_Stub::RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_RemoveFriend_Request* request,
                              ::CPlayer_RemoveFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(40),
                       controller, request, response, done);
}
void Player_Stub::IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_IgnoreFriend_Request* request,
                              ::CPlayer_IgnoreFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(41),
                       controller, request, response, done);
}
void Player_Stub::GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetCommunityPreferences_Request* request,
                              ::CPlayer_GetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(42),
                       controller, request, response, done);
}
void Player_Stub::SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetCommunityPreferences_Request* request,
                              ::CPlayer_SetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(43),
                       controller, request, response, done);
}
void Player_Stub::GetTextFilterWords(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetTextFilterWords_Request* request,
                              ::CPlayer_GetTextFilterWords_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(44),
                       controller, request, response, done);
}
void Player_Stub::GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetNewSteamAnnouncementState_Request* request,
                              ::CPlayer_GetNewSteamAnnouncementState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(45),
                       controller, request, response, done);
}
void Player_Stub::UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                              ::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(46),
                       controller, request, response, done);
}
void Player_Stub::GetPrivacySettings(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPrivacySettings_Request* request,
                              ::CPlayer_GetPrivacySettings_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(47),
                       controller, request, response, done);
}
void Player_Stub::GetDurationControl(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetDurationControl_Request* request,
                              ::CPlayer_GetDurationControl_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(48),
                       controller, request, response, done);
}
void Player_Stub::RecordDisconnectedPlaytime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_RecordDisconnectedPlaytime_Request* request,
                              ::CPlayer_RecordDisconnectedPlaytime_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(49),
                       controller, request, response, done);
}
// ===================================================================

PlayerClient::~PlayerClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PlayerClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PlayerClient::GetDescriptor() {
  return descriptor();
}

void PlayerClient::NotifyLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_LastPlayedTimes_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyLastPlayedTimes() not implemented.");
  done->Run();
}

void PlayerClient::NotifyFriendNicknameChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_FriendNicknameChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFriendNicknameChanged() not implemented.");
  done->Run();
}

void PlayerClient::NotifyFriendEquippedProfileItemsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_FriendEquippedProfileItemsChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFriendEquippedProfileItemsChanged() not implemented.");
  done->Run();
}

void PlayerClient::NotifyNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_NewSteamAnnouncementState_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyNewSteamAnnouncementState() not implemented.");
  done->Run();
}

void PlayerClient::NotifyCommunityPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_CommunityPreferencesChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyCommunityPreferencesChanged() not implemented.");
  done->Run();
}

void PlayerClient::NotifyTextFilterWordsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_TextFilterWordsChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyTextFilterWordsChanged() not implemented.");
  done->Run();
}

void PlayerClient::NotifyPerFriendPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_PerFriendPreferencesChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyPerFriendPreferencesChanged() not implemented.");
  done->Run();
}

void PlayerClient::NotifyPrivacyPrivacySettingsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_PrivacySettingsChanged_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyPrivacyPrivacySettingsChanged() not implemented.");
  done->Run();
}

void PlayerClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fplayer_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyLastPlayedTimes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_LastPlayedTimes_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      NotifyFriendNicknameChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_FriendNicknameChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      NotifyFriendEquippedProfileItemsChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_FriendEquippedProfileItemsChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 3:
      NotifyNewSteamAnnouncementState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_NewSteamAnnouncementState_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 4:
      NotifyCommunityPreferencesChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_CommunityPreferencesChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 5:
      NotifyTextFilterWordsChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_TextFilterWordsChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 6:
      NotifyPerFriendPreferencesChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_PerFriendPreferencesChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 7:
      NotifyPrivacyPrivacySettingsChanged(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_PrivacySettingsChanged_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PlayerClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPlayer_LastPlayedTimes_Notification::default_instance();
    case 1:
      return ::CPlayer_FriendNicknameChanged_Notification::default_instance();
    case 2:
      return ::CPlayer_FriendEquippedProfileItemsChanged_Notification::default_instance();
    case 3:
      return ::CPlayer_NewSteamAnnouncementState_Notification::default_instance();
    case 4:
      return ::CPlayer_CommunityPreferencesChanged_Notification::default_instance();
    case 5:
      return ::CPlayer_TextFilterWordsChanged_Notification::default_instance();
    case 6:
      return ::CPlayer_PerFriendPreferencesChanged_Notification::default_instance();
    case 7:
      return ::CPlayer_PrivacySettingsChanged_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PlayerClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::NoResponse::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    case 7:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PlayerClient_Stub::PlayerClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PlayerClient_Stub::PlayerClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
PlayerClient_Stub::~PlayerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void PlayerClient_Stub::NotifyLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_LastPlayedTimes_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyFriendNicknameChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_FriendNicknameChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyFriendEquippedProfileItemsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_FriendEquippedProfileItemsChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_NewSteamAnnouncementState_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyCommunityPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_CommunityPreferencesChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyTextFilterWordsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_TextFilterWordsChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyPerFriendPreferencesChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_PerFriendPreferencesChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void PlayerClient_Stub::NotifyPrivacyPrivacySettingsChanged(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_PrivacySettingsChanged_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPlayer_GetMutualFriendsForIncomingInvites_Request* Arena::CreateMaybeMessage< ::CPlayer_GetMutualFriendsForIncomingInvites_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMutualFriendsForIncomingInvites_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IncomingInviteMutualFriendList* Arena::CreateMaybeMessage< ::CPlayer_IncomingInviteMutualFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IncomingInviteMutualFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetMutualFriendsForIncomingInvites_Response* Arena::CreateMaybeMessage< ::CPlayer_GetMutualFriendsForIncomingInvites_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMutualFriendsForIncomingInvites_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetOwnedGames_Request* Arena::CreateMaybeMessage< ::CPlayer_GetOwnedGames_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetOwnedGames_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetOwnedGames_Response_Game* Arena::CreateMaybeMessage< ::CPlayer_GetOwnedGames_Response_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetOwnedGames_Response_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetOwnedGames_Response* Arena::CreateMaybeMessage< ::CPlayer_GetOwnedGames_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetOwnedGames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPlayNext_Request* Arena::CreateMaybeMessage< ::CPlayer_GetPlayNext_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPlayNext_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPlayNext_Response* Arena::CreateMaybeMessage< ::CPlayer_GetPlayNext_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPlayNext_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Request* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Request* Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Response_Badge* Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Response_Badge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Response_Badge >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Response* Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileBackground_Request* Arena::CreateMaybeMessage< ::CPlayer_GetProfileBackground_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileBackground_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileItem_ProfileColor* Arena::CreateMaybeMessage< ::ProfileItem_ProfileColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileItem_ProfileColor >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileItem* Arena::CreateMaybeMessage< ::ProfileItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileBackground_Response* Arena::CreateMaybeMessage< ::CPlayer_GetProfileBackground_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileBackground_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetProfileBackground_Request* Arena::CreateMaybeMessage< ::CPlayer_SetProfileBackground_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetProfileBackground_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetProfileBackground_Response* Arena::CreateMaybeMessage< ::CPlayer_SetProfileBackground_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetProfileBackground_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetMiniProfileBackground_Request* Arena::CreateMaybeMessage< ::CPlayer_GetMiniProfileBackground_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMiniProfileBackground_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetMiniProfileBackground_Response* Arena::CreateMaybeMessage< ::CPlayer_GetMiniProfileBackground_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMiniProfileBackground_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetMiniProfileBackground_Request* Arena::CreateMaybeMessage< ::CPlayer_SetMiniProfileBackground_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetMiniProfileBackground_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetMiniProfileBackground_Response* Arena::CreateMaybeMessage< ::CPlayer_SetMiniProfileBackground_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetMiniProfileBackground_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetAvatarFrame_Request* Arena::CreateMaybeMessage< ::CPlayer_GetAvatarFrame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetAvatarFrame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetAvatarFrame_Response* Arena::CreateMaybeMessage< ::CPlayer_GetAvatarFrame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetAvatarFrame_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetAvatarFrame_Request* Arena::CreateMaybeMessage< ::CPlayer_SetAvatarFrame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetAvatarFrame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetAvatarFrame_Response* Arena::CreateMaybeMessage< ::CPlayer_SetAvatarFrame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetAvatarFrame_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetAnimatedAvatar_Request* Arena::CreateMaybeMessage< ::CPlayer_GetAnimatedAvatar_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetAnimatedAvatar_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetAnimatedAvatar_Response* Arena::CreateMaybeMessage< ::CPlayer_GetAnimatedAvatar_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetAnimatedAvatar_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetAnimatedAvatar_Request* Arena::CreateMaybeMessage< ::CPlayer_SetAnimatedAvatar_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetAnimatedAvatar_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetAnimatedAvatar_Response* Arena::CreateMaybeMessage< ::CPlayer_SetAnimatedAvatar_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetAnimatedAvatar_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetSteamDeckKeyboardSkin_Request* Arena::CreateMaybeMessage< ::CPlayer_GetSteamDeckKeyboardSkin_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetSteamDeckKeyboardSkin_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetSteamDeckKeyboardSkin_Response* Arena::CreateMaybeMessage< ::CPlayer_GetSteamDeckKeyboardSkin_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetSteamDeckKeyboardSkin_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetSteamDeckKeyboardSkin_Request* Arena::CreateMaybeMessage< ::CPlayer_SetSteamDeckKeyboardSkin_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetSteamDeckKeyboardSkin_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetSteamDeckKeyboardSkin_Response* Arena::CreateMaybeMessage< ::CPlayer_SetSteamDeckKeyboardSkin_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetSteamDeckKeyboardSkin_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileItemsOwned_Request* Arena::CreateMaybeMessage< ::CPlayer_GetProfileItemsOwned_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileItemsOwned_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileItemsOwned_Response* Arena::CreateMaybeMessage< ::CPlayer_GetProfileItemsOwned_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileItemsOwned_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileItemsEquipped_Request* Arena::CreateMaybeMessage< ::CPlayer_GetProfileItemsEquipped_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileItemsEquipped_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileItemsEquipped_Response* Arena::CreateMaybeMessage< ::CPlayer_GetProfileItemsEquipped_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileItemsEquipped_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetEquippedProfileItemFlags_Request* Arena::CreateMaybeMessage< ::CPlayer_SetEquippedProfileItemFlags_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetEquippedProfileItemFlags_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetEquippedProfileItemFlags_Response* Arena::CreateMaybeMessage< ::CPlayer_SetEquippedProfileItemFlags_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetEquippedProfileItemFlags_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetEmoticonList_Request* Arena::CreateMaybeMessage< ::CPlayer_GetEmoticonList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetEmoticonList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetEmoticonList_Response_Emoticon* Arena::CreateMaybeMessage< ::CPlayer_GetEmoticonList_Response_Emoticon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetEmoticonList_Response_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetEmoticonList_Response* Arena::CreateMaybeMessage< ::CPlayer_GetEmoticonList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetEmoticonList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTopAchievementsForGames_Request* Arena::CreateMaybeMessage< ::CPlayer_GetTopAchievementsForGames_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTopAchievementsForGames_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTopAchievementsForGames_Response_Achievement* Arena::CreateMaybeMessage< ::CPlayer_GetTopAchievementsForGames_Response_Achievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTopAchievementsForGames_Response_Achievement >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTopAchievementsForGames_Response_Game* Arena::CreateMaybeMessage< ::CPlayer_GetTopAchievementsForGames_Response_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTopAchievementsForGames_Response_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTopAchievementsForGames_Response* Arena::CreateMaybeMessage< ::CPlayer_GetTopAchievementsForGames_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTopAchievementsForGames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetAchievementsProgress_Request* Arena::CreateMaybeMessage< ::CPlayer_GetAchievementsProgress_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetAchievementsProgress_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetAchievementsProgress_Response_AchievementProgress* Arena::CreateMaybeMessage< ::CPlayer_GetAchievementsProgress_Response_AchievementProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetAchievementsProgress_Response_AchievementProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetAchievementsProgress_Response* Arena::CreateMaybeMessage< ::CPlayer_GetAchievementsProgress_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetAchievementsProgress_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameAchievements_Request* Arena::CreateMaybeMessage< ::CPlayer_GetGameAchievements_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameAchievements_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameAchievements_Response_Achievement* Arena::CreateMaybeMessage< ::CPlayer_GetGameAchievements_Response_Achievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameAchievements_Response_Achievement >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameAchievements_Response* Arena::CreateMaybeMessage< ::CPlayer_GetGameAchievements_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameAchievements_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFavoriteBadge_Request* Arena::CreateMaybeMessage< ::CPlayer_GetFavoriteBadge_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFavoriteBadge_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFavoriteBadge_Response* Arena::CreateMaybeMessage< ::CPlayer_GetFavoriteBadge_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFavoriteBadge_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetFavoriteBadge_Request* Arena::CreateMaybeMessage< ::CPlayer_SetFavoriteBadge_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetFavoriteBadge_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetFavoriteBadge_Response* Arena::CreateMaybeMessage< ::CPlayer_SetFavoriteBadge_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetFavoriteBadge_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileCustomization_Request* Arena::CreateMaybeMessage< ::CPlayer_GetProfileCustomization_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileCustomization_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileCustomizationSlot* Arena::CreateMaybeMessage< ::ProfileCustomizationSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileCustomizationSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileCustomization* Arena::CreateMaybeMessage< ::ProfileCustomization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileCustomization >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfileTheme* Arena::CreateMaybeMessage< ::ProfileTheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfileTheme >(arena);
}
template<> PROTOBUF_NOINLINE ::ProfilePreferences* Arena::CreateMaybeMessage< ::ProfilePreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProfilePreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization* Arena::CreateMaybeMessage< ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileCustomization_Response_PurchasedCustomization >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileCustomization_Response* Arena::CreateMaybeMessage< ::CPlayer_GetProfileCustomization_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileCustomization_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPurchasedProfileCustomizations_Request* Arena::CreateMaybeMessage< ::CPlayer_GetPurchasedProfileCustomizations_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPurchasedProfileCustomizations_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization* Arena::CreateMaybeMessage< ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPurchasedProfileCustomizations_Response_PurchasedCustomization >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPurchasedProfileCustomizations_Response* Arena::CreateMaybeMessage< ::CPlayer_GetPurchasedProfileCustomizations_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPurchasedProfileCustomizations_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request* Arena::CreateMaybeMessage< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization* Arena::CreateMaybeMessage< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_PurchasedCustomization >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization* Arena::CreateMaybeMessage< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response_UpgradedCustomization >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response* Arena::CreateMaybeMessage< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPurchasedAndUpgradedProfileCustomizations_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileThemesAvailable_Request* Arena::CreateMaybeMessage< ::CPlayer_GetProfileThemesAvailable_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileThemesAvailable_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetProfileThemesAvailable_Response* Arena::CreateMaybeMessage< ::CPlayer_GetProfileThemesAvailable_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetProfileThemesAvailable_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetProfileTheme_Request* Arena::CreateMaybeMessage< ::CPlayer_SetProfileTheme_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetProfileTheme_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetProfileTheme_Response* Arena::CreateMaybeMessage< ::CPlayer_SetProfileTheme_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetProfileTheme_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetProfilePreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_SetProfilePreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetProfilePreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetProfilePreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_SetProfilePreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetProfilePreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_PostStatusToFriends_Request* Arena::CreateMaybeMessage< ::CPlayer_PostStatusToFriends_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_PostStatusToFriends_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_PostStatusToFriends_Response* Arena::CreateMaybeMessage< ::CPlayer_PostStatusToFriends_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_PostStatusToFriends_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPostedStatus_Request* Arena::CreateMaybeMessage< ::CPlayer_GetPostedStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPostedStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPostedStatus_Response* Arena::CreateMaybeMessage< ::CPlayer_GetPostedStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPostedStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_DeletePostedStatus_Request* Arena::CreateMaybeMessage< ::CPlayer_DeletePostedStatus_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_DeletePostedStatus_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_DeletePostedStatus_Response* Arena::CreateMaybeMessage< ::CPlayer_DeletePostedStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_DeletePostedStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Request* Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Response_Game* Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Response_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Response_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Response* Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTimeSSAAccepted_Request* Arena::CreateMaybeMessage< ::CPlayer_GetTimeSSAAccepted_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTimeSSAAccepted_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTimeSSAAccepted_Response* Arena::CreateMaybeMessage< ::CPlayer_GetTimeSSAAccepted_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTimeSSAAccepted_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AcceptSSA_Request* Arena::CreateMaybeMessage< ::CPlayer_AcceptSSA_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AcceptSSA_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AcceptSSA_Response* Arena::CreateMaybeMessage< ::CPlayer_AcceptSSA_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AcceptSSA_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Request* Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Response_PlayerNickname* Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Response_PlayerNickname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Response_PlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Response* Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPerFriendPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_GetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::PerFriendPreferences* Arena::CreateMaybeMessage< ::PerFriendPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PerFriendPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPerFriendPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_GetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetPerFriendPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_SetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetPerFriendPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_SetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AddFriend_Request* Arena::CreateMaybeMessage< ::CPlayer_AddFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AddFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AddFriend_Response* Arena::CreateMaybeMessage< ::CPlayer_AddFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AddFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RemoveFriend_Request* Arena::CreateMaybeMessage< ::CPlayer_RemoveFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RemoveFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RemoveFriend_Response* Arena::CreateMaybeMessage< ::CPlayer_RemoveFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RemoveFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IgnoreFriend_Request* Arena::CreateMaybeMessage< ::CPlayer_IgnoreFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IgnoreFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IgnoreFriend_Response* Arena::CreateMaybeMessage< ::CPlayer_IgnoreFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IgnoreFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetCommunityPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_GetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_CommunityPreferences* Arena::CreateMaybeMessage< ::CPlayer_CommunityPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_CommunityPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetCommunityPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_GetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetCommunityPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_SetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetCommunityPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_SetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTextFilterWords_Request* Arena::CreateMaybeMessage< ::CPlayer_GetTextFilterWords_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTextFilterWords_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_TextFilterWords* Arena::CreateMaybeMessage< ::CPlayer_TextFilterWords >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_TextFilterWords >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetTextFilterWords_Response* Arena::CreateMaybeMessage< ::CPlayer_GetTextFilterWords_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetTextFilterWords_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNewSteamAnnouncementState_Request* Arena::CreateMaybeMessage< ::CPlayer_GetNewSteamAnnouncementState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNewSteamAnnouncementState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNewSteamAnnouncementState_Response* Arena::CreateMaybeMessage< ::CPlayer_GetNewSteamAnnouncementState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNewSteamAnnouncementState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_UpdateSteamAnnouncementLastRead_Request* Arena::CreateMaybeMessage< ::CPlayer_UpdateSteamAnnouncementLastRead_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_UpdateSteamAnnouncementLastRead_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_UpdateSteamAnnouncementLastRead_Response* Arena::CreateMaybeMessage< ::CPlayer_UpdateSteamAnnouncementLastRead_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_UpdateSteamAnnouncementLastRead_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPrivacySettings_Request* Arena::CreateMaybeMessage< ::CPlayer_GetPrivacySettings_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPrivacySettings_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPrivacySettings* Arena::CreateMaybeMessage< ::CPrivacySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPrivacySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPrivacySettings_Response* Arena::CreateMaybeMessage< ::CPlayer_GetPrivacySettings_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPrivacySettings_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetDurationControl_Request* Arena::CreateMaybeMessage< ::CPlayer_GetDurationControl_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetDurationControl_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetDurationControl_Response* Arena::CreateMaybeMessage< ::CPlayer_GetDurationControl_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetDurationControl_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory* Arena::CreateMaybeMessage< ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RecordDisconnectedPlaytime_Request_PlayHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RecordDisconnectedPlaytime_Request* Arena::CreateMaybeMessage< ::CPlayer_RecordDisconnectedPlaytime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RecordDisconnectedPlaytime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RecordDisconnectedPlaytime_Response* Arena::CreateMaybeMessage< ::CPlayer_RecordDisconnectedPlaytime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RecordDisconnectedPlaytime_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_LastPlayedTimes_Notification* Arena::CreateMaybeMessage< ::CPlayer_LastPlayedTimes_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_LastPlayedTimes_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_FriendNicknameChanged_Notification* Arena::CreateMaybeMessage< ::CPlayer_FriendNicknameChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_FriendNicknameChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_FriendEquippedProfileItemsChanged_Notification* Arena::CreateMaybeMessage< ::CPlayer_FriendEquippedProfileItemsChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_FriendEquippedProfileItemsChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_NewSteamAnnouncementState_Notification* Arena::CreateMaybeMessage< ::CPlayer_NewSteamAnnouncementState_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_NewSteamAnnouncementState_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_CommunityPreferencesChanged_Notification* Arena::CreateMaybeMessage< ::CPlayer_CommunityPreferencesChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_CommunityPreferencesChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_TextFilterWordsChanged_Notification* Arena::CreateMaybeMessage< ::CPlayer_TextFilterWordsChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_TextFilterWordsChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_PerFriendPreferencesChanged_Notification* Arena::CreateMaybeMessage< ::CPlayer_PerFriendPreferencesChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_PerFriendPreferencesChanged_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_PrivacySettingsChanged_Notification* Arena::CreateMaybeMessage< ::CPlayer_PrivacySettingsChanged_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_PrivacySettingsChanged_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
