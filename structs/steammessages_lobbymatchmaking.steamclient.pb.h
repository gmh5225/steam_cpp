// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_lobbymatchmaking.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5flobbymatchmaking_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5flobbymatchmaking_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5flobbymatchmaking_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5flobbymatchmaking_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5flobbymatchmaking_2esteamclient_2eproto;
class LobbyMatchmakingLegacy_GetLobbyStatus_Request;
struct LobbyMatchmakingLegacy_GetLobbyStatus_RequestDefaultTypeInternal;
extern LobbyMatchmakingLegacy_GetLobbyStatus_RequestDefaultTypeInternal _LobbyMatchmakingLegacy_GetLobbyStatus_Request_default_instance_;
class LobbyMatchmakingLegacy_GetLobbyStatus_Response;
struct LobbyMatchmakingLegacy_GetLobbyStatus_ResponseDefaultTypeInternal;
extern LobbyMatchmakingLegacy_GetLobbyStatus_ResponseDefaultTypeInternal _LobbyMatchmakingLegacy_GetLobbyStatus_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LobbyMatchmakingLegacy_GetLobbyStatus_Request* Arena::CreateMaybeMessage<::LobbyMatchmakingLegacy_GetLobbyStatus_Request>(Arena*);
template<> ::LobbyMatchmakingLegacy_GetLobbyStatus_Response* Arena::CreateMaybeMessage<::LobbyMatchmakingLegacy_GetLobbyStatus_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ELobbyStatus : int {
  k_ELobbyStatusInvalid = 0,
  k_ELobbyStatusExists = 1,
  k_ELobbyStatusDoesNotExist = 2,
  k_ELobbyStatusNotAMember = 3
};
bool ELobbyStatus_IsValid(int value);
constexpr ELobbyStatus ELobbyStatus_MIN = k_ELobbyStatusInvalid;
constexpr ELobbyStatus ELobbyStatus_MAX = k_ELobbyStatusNotAMember;
constexpr int ELobbyStatus_ARRAYSIZE = ELobbyStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELobbyStatus_descriptor();
template<typename T>
inline const std::string& ELobbyStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELobbyStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELobbyStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELobbyStatus_descriptor(), enum_t_value);
}
inline bool ELobbyStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELobbyStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELobbyStatus>(
    ELobbyStatus_descriptor(), name, value);
}
// ===================================================================

class LobbyMatchmakingLegacy_GetLobbyStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LobbyMatchmakingLegacy_GetLobbyStatus_Request) */ {
 public:
  inline LobbyMatchmakingLegacy_GetLobbyStatus_Request() : LobbyMatchmakingLegacy_GetLobbyStatus_Request(nullptr) {}
  ~LobbyMatchmakingLegacy_GetLobbyStatus_Request() override;
  explicit constexpr LobbyMatchmakingLegacy_GetLobbyStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbyMatchmakingLegacy_GetLobbyStatus_Request(const LobbyMatchmakingLegacy_GetLobbyStatus_Request& from);
  LobbyMatchmakingLegacy_GetLobbyStatus_Request(LobbyMatchmakingLegacy_GetLobbyStatus_Request&& from) noexcept
    : LobbyMatchmakingLegacy_GetLobbyStatus_Request() {
    *this = ::std::move(from);
  }

  inline LobbyMatchmakingLegacy_GetLobbyStatus_Request& operator=(const LobbyMatchmakingLegacy_GetLobbyStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbyMatchmakingLegacy_GetLobbyStatus_Request& operator=(LobbyMatchmakingLegacy_GetLobbyStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbyMatchmakingLegacy_GetLobbyStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbyMatchmakingLegacy_GetLobbyStatus_Request* internal_default_instance() {
    return reinterpret_cast<const LobbyMatchmakingLegacy_GetLobbyStatus_Request*>(
               &_LobbyMatchmakingLegacy_GetLobbyStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LobbyMatchmakingLegacy_GetLobbyStatus_Request& a, LobbyMatchmakingLegacy_GetLobbyStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbyMatchmakingLegacy_GetLobbyStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbyMatchmakingLegacy_GetLobbyStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbyMatchmakingLegacy_GetLobbyStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbyMatchmakingLegacy_GetLobbyStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbyMatchmakingLegacy_GetLobbyStatus_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LobbyMatchmakingLegacy_GetLobbyStatus_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbyMatchmakingLegacy_GetLobbyStatus_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LobbyMatchmakingLegacy_GetLobbyStatus_Request";
  }
  protected:
  explicit LobbyMatchmakingLegacy_GetLobbyStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kClaimOwnershipFieldNumber = 3,
    kClaimMembershipFieldNumber = 4,
    kVersionNumFieldNumber = 5,
  };
  // optional fixed64 steamid_lobby = 2;
  bool has_steamid_lobby() const;
  private:
  bool _internal_has_steamid_lobby() const;
  public:
  void clear_steamid_lobby();
  uint64_t steamid_lobby() const;
  void set_steamid_lobby(uint64_t value);
  private:
  uint64_t _internal_steamid_lobby() const;
  void _internal_set_steamid_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional bool claim_ownership = 3;
  bool has_claim_ownership() const;
  private:
  bool _internal_has_claim_ownership() const;
  public:
  void clear_claim_ownership();
  bool claim_ownership() const;
  void set_claim_ownership(bool value);
  private:
  bool _internal_claim_ownership() const;
  void _internal_set_claim_ownership(bool value);
  public:

  // optional bool claim_membership = 4;
  bool has_claim_membership() const;
  private:
  bool _internal_has_claim_membership() const;
  public:
  void clear_claim_membership();
  bool claim_membership() const;
  void set_claim_membership(bool value);
  private:
  bool _internal_claim_membership() const;
  void _internal_set_claim_membership(bool value);
  public:

  // optional uint32 version_num = 5;
  bool has_version_num() const;
  private:
  bool _internal_has_version_num() const;
  public:
  void clear_version_num();
  uint32_t version_num() const;
  void set_version_num(uint32_t value);
  private:
  uint32_t _internal_version_num() const;
  void _internal_set_version_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LobbyMatchmakingLegacy_GetLobbyStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_lobby_;
  uint32_t app_id_;
  bool claim_ownership_;
  bool claim_membership_;
  uint32_t version_num_;
  friend struct ::TableStruct_steammessages_5flobbymatchmaking_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class LobbyMatchmakingLegacy_GetLobbyStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LobbyMatchmakingLegacy_GetLobbyStatus_Response) */ {
 public:
  inline LobbyMatchmakingLegacy_GetLobbyStatus_Response() : LobbyMatchmakingLegacy_GetLobbyStatus_Response(nullptr) {}
  ~LobbyMatchmakingLegacy_GetLobbyStatus_Response() override;
  explicit constexpr LobbyMatchmakingLegacy_GetLobbyStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbyMatchmakingLegacy_GetLobbyStatus_Response(const LobbyMatchmakingLegacy_GetLobbyStatus_Response& from);
  LobbyMatchmakingLegacy_GetLobbyStatus_Response(LobbyMatchmakingLegacy_GetLobbyStatus_Response&& from) noexcept
    : LobbyMatchmakingLegacy_GetLobbyStatus_Response() {
    *this = ::std::move(from);
  }

  inline LobbyMatchmakingLegacy_GetLobbyStatus_Response& operator=(const LobbyMatchmakingLegacy_GetLobbyStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbyMatchmakingLegacy_GetLobbyStatus_Response& operator=(LobbyMatchmakingLegacy_GetLobbyStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbyMatchmakingLegacy_GetLobbyStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbyMatchmakingLegacy_GetLobbyStatus_Response* internal_default_instance() {
    return reinterpret_cast<const LobbyMatchmakingLegacy_GetLobbyStatus_Response*>(
               &_LobbyMatchmakingLegacy_GetLobbyStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LobbyMatchmakingLegacy_GetLobbyStatus_Response& a, LobbyMatchmakingLegacy_GetLobbyStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbyMatchmakingLegacy_GetLobbyStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbyMatchmakingLegacy_GetLobbyStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbyMatchmakingLegacy_GetLobbyStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbyMatchmakingLegacy_GetLobbyStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbyMatchmakingLegacy_GetLobbyStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LobbyMatchmakingLegacy_GetLobbyStatus_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbyMatchmakingLegacy_GetLobbyStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LobbyMatchmakingLegacy_GetLobbyStatus_Response";
  }
  protected:
  explicit LobbyMatchmakingLegacy_GetLobbyStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidLobbyFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kLobbyStatusFieldNumber = 3,
  };
  // optional fixed64 steamid_lobby = 2;
  bool has_steamid_lobby() const;
  private:
  bool _internal_has_steamid_lobby() const;
  public:
  void clear_steamid_lobby();
  uint64_t steamid_lobby() const;
  void set_steamid_lobby(uint64_t value);
  private:
  uint64_t _internal_steamid_lobby() const;
  void _internal_set_steamid_lobby(uint64_t value);
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional .ELobbyStatus lobby_status = 3 [default = k_ELobbyStatusInvalid];
  bool has_lobby_status() const;
  private:
  bool _internal_has_lobby_status() const;
  public:
  void clear_lobby_status();
  ::ELobbyStatus lobby_status() const;
  void set_lobby_status(::ELobbyStatus value);
  private:
  ::ELobbyStatus _internal_lobby_status() const;
  void _internal_set_lobby_status(::ELobbyStatus value);
  public:

  // @@protoc_insertion_point(class_scope:LobbyMatchmakingLegacy_GetLobbyStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_lobby_;
  uint32_t app_id_;
  int lobby_status_;
  friend struct ::TableStruct_steammessages_5flobbymatchmaking_2esteamclient_2eproto;
};
// ===================================================================

class LobbyMatchmakingLegacy_Stub;

class LobbyMatchmakingLegacy : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LobbyMatchmakingLegacy() {};
 public:
  virtual ~LobbyMatchmakingLegacy();

  typedef LobbyMatchmakingLegacy_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetLobbyStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::LobbyMatchmakingLegacy_GetLobbyStatus_Request* request,
                       ::LobbyMatchmakingLegacy_GetLobbyStatus_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LobbyMatchmakingLegacy);
};

class LobbyMatchmakingLegacy_Stub : public LobbyMatchmakingLegacy {
 public:
  LobbyMatchmakingLegacy_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  LobbyMatchmakingLegacy_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~LobbyMatchmakingLegacy_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements LobbyMatchmakingLegacy ------------------------------------------

  void GetLobbyStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::LobbyMatchmakingLegacy_GetLobbyStatus_Request* request,
                       ::LobbyMatchmakingLegacy_GetLobbyStatus_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LobbyMatchmakingLegacy_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LobbyMatchmakingLegacy_GetLobbyStatus_Request

// optional uint32 app_id = 1;
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::has_app_id() const {
  return _internal_has_app_id();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_app_id() const {
  return app_id_;
}
inline uint32_t LobbyMatchmakingLegacy_GetLobbyStatus_Request::app_id() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Request.app_id)
  return _internal_app_id();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Request.app_id)
}

// optional fixed64 steamid_lobby = 2;
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_has_steamid_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::has_steamid_lobby() const {
  return _internal_has_steamid_lobby();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::clear_steamid_lobby() {
  steamid_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_steamid_lobby() const {
  return steamid_lobby_;
}
inline uint64_t LobbyMatchmakingLegacy_GetLobbyStatus_Request::steamid_lobby() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Request.steamid_lobby)
  return _internal_steamid_lobby();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_set_steamid_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_lobby_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::set_steamid_lobby(uint64_t value) {
  _internal_set_steamid_lobby(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Request.steamid_lobby)
}

// optional bool claim_ownership = 3;
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_has_claim_ownership() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::has_claim_ownership() const {
  return _internal_has_claim_ownership();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::clear_claim_ownership() {
  claim_ownership_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_claim_ownership() const {
  return claim_ownership_;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::claim_ownership() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_ownership)
  return _internal_claim_ownership();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_set_claim_ownership(bool value) {
  _has_bits_[0] |= 0x00000004u;
  claim_ownership_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::set_claim_ownership(bool value) {
  _internal_set_claim_ownership(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_ownership)
}

// optional bool claim_membership = 4;
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_has_claim_membership() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::has_claim_membership() const {
  return _internal_has_claim_membership();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::clear_claim_membership() {
  claim_membership_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_claim_membership() const {
  return claim_membership_;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::claim_membership() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_membership)
  return _internal_claim_membership();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_set_claim_membership(bool value) {
  _has_bits_[0] |= 0x00000008u;
  claim_membership_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::set_claim_membership(bool value) {
  _internal_set_claim_membership(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Request.claim_membership)
}

// optional uint32 version_num = 5;
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_has_version_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Request::has_version_num() const {
  return _internal_has_version_num();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::clear_version_num() {
  version_num_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_version_num() const {
  return version_num_;
}
inline uint32_t LobbyMatchmakingLegacy_GetLobbyStatus_Request::version_num() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Request.version_num)
  return _internal_version_num();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::_internal_set_version_num(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  version_num_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Request::set_version_num(uint32_t value) {
  _internal_set_version_num(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Request.version_num)
}

// -------------------------------------------------------------------

// LobbyMatchmakingLegacy_GetLobbyStatus_Response

// optional uint32 app_id = 1;
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Response::has_app_id() const {
  return _internal_has_app_id();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_app_id() const {
  return app_id_;
}
inline uint32_t LobbyMatchmakingLegacy_GetLobbyStatus_Response::app_id() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Response.app_id)
  return _internal_app_id();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Response.app_id)
}

// optional fixed64 steamid_lobby = 2;
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_has_steamid_lobby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Response::has_steamid_lobby() const {
  return _internal_has_steamid_lobby();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::clear_steamid_lobby() {
  steamid_lobby_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_steamid_lobby() const {
  return steamid_lobby_;
}
inline uint64_t LobbyMatchmakingLegacy_GetLobbyStatus_Response::steamid_lobby() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Response.steamid_lobby)
  return _internal_steamid_lobby();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_set_steamid_lobby(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_lobby_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::set_steamid_lobby(uint64_t value) {
  _internal_set_steamid_lobby(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Response.steamid_lobby)
}

// optional .ELobbyStatus lobby_status = 3 [default = k_ELobbyStatusInvalid];
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_has_lobby_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LobbyMatchmakingLegacy_GetLobbyStatus_Response::has_lobby_status() const {
  return _internal_has_lobby_status();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::clear_lobby_status() {
  lobby_status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ELobbyStatus LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_lobby_status() const {
  return static_cast< ::ELobbyStatus >(lobby_status_);
}
inline ::ELobbyStatus LobbyMatchmakingLegacy_GetLobbyStatus_Response::lobby_status() const {
  // @@protoc_insertion_point(field_get:LobbyMatchmakingLegacy_GetLobbyStatus_Response.lobby_status)
  return _internal_lobby_status();
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::_internal_set_lobby_status(::ELobbyStatus value) {
  assert(::ELobbyStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  lobby_status_ = value;
}
inline void LobbyMatchmakingLegacy_GetLobbyStatus_Response::set_lobby_status(::ELobbyStatus value) {
  _internal_set_lobby_status(value);
  // @@protoc_insertion_point(field_set:LobbyMatchmakingLegacy_GetLobbyStatus_Response.lobby_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ELobbyStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ELobbyStatus>() {
  return ::ELobbyStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5flobbymatchmaking_2esteamclient_2eproto
