// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_2.proto

#include "steammessages_clientserver_2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientUpdateUserGameInfo::CMsgClientUpdateUserGameInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_idgs_(uint64_t{0u})
  , gameid_(uint64_t{0u})
  , game_ip_(0u)
  , game_port_(0u){}
struct CMsgClientUpdateUserGameInfoDefaultTypeInternal {
  constexpr CMsgClientUpdateUserGameInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUpdateUserGameInfoDefaultTypeInternal() {}
  union {
    CMsgClientUpdateUserGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUpdateUserGameInfoDefaultTypeInternal _CMsgClientUpdateUserGameInfo_default_instance_;
constexpr CMsgClientRichPresenceUpload::CMsgClientRichPresenceUpload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_broadcast_()
  , rich_presence_kv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientRichPresenceUploadDefaultTypeInternal {
  constexpr CMsgClientRichPresenceUploadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRichPresenceUploadDefaultTypeInternal() {}
  union {
    CMsgClientRichPresenceUpload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRichPresenceUploadDefaultTypeInternal _CMsgClientRichPresenceUpload_default_instance_;
constexpr CMsgClientRichPresenceRequest::CMsgClientRichPresenceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_request_(){}
struct CMsgClientRichPresenceRequestDefaultTypeInternal {
  constexpr CMsgClientRichPresenceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRichPresenceRequestDefaultTypeInternal() {}
  union {
    CMsgClientRichPresenceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRichPresenceRequestDefaultTypeInternal _CMsgClientRichPresenceRequest_default_instance_;
constexpr CMsgClientRichPresenceInfo_RichPresence::CMsgClientRichPresenceInfo_RichPresence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rich_presence_kv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_user_(uint64_t{0u}){}
struct CMsgClientRichPresenceInfo_RichPresenceDefaultTypeInternal {
  constexpr CMsgClientRichPresenceInfo_RichPresenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRichPresenceInfo_RichPresenceDefaultTypeInternal() {}
  union {
    CMsgClientRichPresenceInfo_RichPresence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRichPresenceInfo_RichPresenceDefaultTypeInternal _CMsgClientRichPresenceInfo_RichPresence_default_instance_;
constexpr CMsgClientRichPresenceInfo::CMsgClientRichPresenceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rich_presence_(){}
struct CMsgClientRichPresenceInfoDefaultTypeInternal {
  constexpr CMsgClientRichPresenceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRichPresenceInfoDefaultTypeInternal() {}
  union {
    CMsgClientRichPresenceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRichPresenceInfoDefaultTypeInternal _CMsgClientRichPresenceInfo_default_instance_;
constexpr CMsgClientCheckFileSignature::CMsgClientCheckFileSignature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u){}
struct CMsgClientCheckFileSignatureDefaultTypeInternal {
  constexpr CMsgClientCheckFileSignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCheckFileSignatureDefaultTypeInternal() {}
  union {
    CMsgClientCheckFileSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCheckFileSignatureDefaultTypeInternal _CMsgClientCheckFileSignature_default_instance_;
constexpr CMsgClientCheckFileSignatureResponse::CMsgClientCheckFileSignatureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signatureheader_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , pid_(0u)
  , eresult_(0u)
  , esignatureresult_(0u)
  , filesize_(0u)
  , getlasterror_(0u)
  , evalvesignaturecheckdetail_(0u){}
struct CMsgClientCheckFileSignatureResponseDefaultTypeInternal {
  constexpr CMsgClientCheckFileSignatureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCheckFileSignatureResponseDefaultTypeInternal() {}
  union {
    CMsgClientCheckFileSignatureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCheckFileSignatureResponseDefaultTypeInternal _CMsgClientCheckFileSignatureResponse_default_instance_;
constexpr CMsgClientReadMachineAuth::CMsgClientReadMachineAuth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(0u)
  , cubtoread_(0u){}
struct CMsgClientReadMachineAuthDefaultTypeInternal {
  constexpr CMsgClientReadMachineAuthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientReadMachineAuthDefaultTypeInternal() {}
  union {
    CMsgClientReadMachineAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientReadMachineAuthDefaultTypeInternal _CMsgClientReadMachineAuth_default_instance_;
constexpr CMsgClientReadMachineAuthResponse::CMsgClientReadMachineAuthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_read_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_sentry_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(0u)
  , filesize_(0u)
  , getlasterror_(0u)
  , offset_(0u)
  , cubread_(0u){}
struct CMsgClientReadMachineAuthResponseDefaultTypeInternal {
  constexpr CMsgClientReadMachineAuthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientReadMachineAuthResponseDefaultTypeInternal() {}
  union {
    CMsgClientReadMachineAuthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientReadMachineAuthResponseDefaultTypeInternal _CMsgClientReadMachineAuthResponse_default_instance_;
constexpr CMsgClientUpdateMachineAuth::CMsgClientUpdateMachineAuth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otp_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otp_sharedsecret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(0u)
  , cubtowrite_(0u)
  , otp_type_(0u)
  , otp_timedrift_(0u){}
struct CMsgClientUpdateMachineAuthDefaultTypeInternal {
  constexpr CMsgClientUpdateMachineAuthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUpdateMachineAuthDefaultTypeInternal() {}
  union {
    CMsgClientUpdateMachineAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUpdateMachineAuthDefaultTypeInternal _CMsgClientUpdateMachineAuth_default_instance_;
constexpr CMsgClientUpdateMachineAuthResponse::CMsgClientUpdateMachineAuthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otp_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(0u)
  , filesize_(0u)
  , getlasterror_(0u)
  , offset_(0u)
  , cubwrote_(0u)
  , otp_type_(0)
  , otp_value_(0u){}
struct CMsgClientUpdateMachineAuthResponseDefaultTypeInternal {
  constexpr CMsgClientUpdateMachineAuthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUpdateMachineAuthResponseDefaultTypeInternal() {}
  union {
    CMsgClientUpdateMachineAuthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUpdateMachineAuthResponseDefaultTypeInternal _CMsgClientUpdateMachineAuthResponse_default_instance_;
constexpr CMsgClientRequestMachineAuth::CMsgClientRequestMachineAuth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_sentryfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otp_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otp_sharedsecret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_name_userchosen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_sentryfile_(0u)
  , filesize_(0u)
  , lock_account_action_(0)
  , otp_type_(0u)
  , otp_value_(0u){}
struct CMsgClientRequestMachineAuthDefaultTypeInternal {
  constexpr CMsgClientRequestMachineAuthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestMachineAuthDefaultTypeInternal() {}
  union {
    CMsgClientRequestMachineAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestMachineAuthDefaultTypeInternal _CMsgClientRequestMachineAuth_default_instance_;
constexpr CMsgClientRequestMachineAuthResponse::CMsgClientRequestMachineAuthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u){}
struct CMsgClientRequestMachineAuthResponseDefaultTypeInternal {
  constexpr CMsgClientRequestMachineAuthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestMachineAuthResponseDefaultTypeInternal() {}
  union {
    CMsgClientRequestMachineAuthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestMachineAuthResponseDefaultTypeInternal _CMsgClientRequestMachineAuthResponse_default_instance_;
constexpr CMsgClientRegisterKey::CMsgClientRegisterKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientRegisterKeyDefaultTypeInternal {
  constexpr CMsgClientRegisterKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRegisterKeyDefaultTypeInternal() {}
  union {
    CMsgClientRegisterKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRegisterKeyDefaultTypeInternal _CMsgClientRegisterKey_default_instance_;
constexpr CMsgClientPurchaseResponse::CMsgClientPurchaseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : purchase_receipt_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , purchase_result_details_(0)
  , eresult_(2){}
struct CMsgClientPurchaseResponseDefaultTypeInternal {
  constexpr CMsgClientPurchaseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPurchaseResponseDefaultTypeInternal() {}
  union {
    CMsgClientPurchaseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPurchaseResponseDefaultTypeInternal _CMsgClientPurchaseResponse_default_instance_;
constexpr CMsgClientActivateOEMLicense::CMsgClientActivateOEMLicense(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bios_manufacturer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bios_serialnumber_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , license_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mainboard_manufacturer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mainboard_product_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mainboard_serialnumber_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientActivateOEMLicenseDefaultTypeInternal {
  constexpr CMsgClientActivateOEMLicenseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientActivateOEMLicenseDefaultTypeInternal() {}
  union {
    CMsgClientActivateOEMLicense _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientActivateOEMLicenseDefaultTypeInternal _CMsgClientActivateOEMLicense_default_instance_;
constexpr CMsgClientRegisterOEMMachine::CMsgClientRegisterOEMMachine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oem_register_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientRegisterOEMMachineDefaultTypeInternal {
  constexpr CMsgClientRegisterOEMMachineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRegisterOEMMachineDefaultTypeInternal() {}
  union {
    CMsgClientRegisterOEMMachine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRegisterOEMMachineDefaultTypeInternal _CMsgClientRegisterOEMMachine_default_instance_;
constexpr CMsgClientRegisterOEMMachineResponse::CMsgClientRegisterOEMMachineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u){}
struct CMsgClientRegisterOEMMachineResponseDefaultTypeInternal {
  constexpr CMsgClientRegisterOEMMachineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRegisterOEMMachineResponseDefaultTypeInternal() {}
  union {
    CMsgClientRegisterOEMMachineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRegisterOEMMachineResponseDefaultTypeInternal _CMsgClientRegisterOEMMachineResponse_default_instance_;
constexpr CMsgClientPurchaseWithMachineID::CMsgClientPurchaseWithMachineID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , package_id_(0u){}
struct CMsgClientPurchaseWithMachineIDDefaultTypeInternal {
  constexpr CMsgClientPurchaseWithMachineIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPurchaseWithMachineIDDefaultTypeInternal() {}
  union {
    CMsgClientPurchaseWithMachineID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPurchaseWithMachineIDDefaultTypeInternal _CMsgClientPurchaseWithMachineID_default_instance_;
constexpr CMsgTrading_InitiateTradeRequest::CMsgTrading_InitiateTradeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , other_steamid_(uint64_t{0u})
  , trade_request_id_(0u){}
struct CMsgTrading_InitiateTradeRequestDefaultTypeInternal {
  constexpr CMsgTrading_InitiateTradeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTrading_InitiateTradeRequestDefaultTypeInternal() {}
  union {
    CMsgTrading_InitiateTradeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTrading_InitiateTradeRequestDefaultTypeInternal _CMsgTrading_InitiateTradeRequest_default_instance_;
constexpr CMsgTrading_InitiateTradeResponse::CMsgTrading_InitiateTradeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0u)
  , trade_request_id_(0u)
  , other_steamid_(uint64_t{0u})
  , steamguard_required_days_(0u)
  , new_device_cooldown_days_(0u)
  , default_password_reset_probation_days_(0u)
  , password_reset_probation_days_(0u)
  , default_email_change_probation_days_(0u)
  , email_change_probation_days_(0u){}
struct CMsgTrading_InitiateTradeResponseDefaultTypeInternal {
  constexpr CMsgTrading_InitiateTradeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTrading_InitiateTradeResponseDefaultTypeInternal() {}
  union {
    CMsgTrading_InitiateTradeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTrading_InitiateTradeResponseDefaultTypeInternal _CMsgTrading_InitiateTradeResponse_default_instance_;
constexpr CMsgTrading_CancelTradeRequest::CMsgTrading_CancelTradeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_steamid_(uint64_t{0u}){}
struct CMsgTrading_CancelTradeRequestDefaultTypeInternal {
  constexpr CMsgTrading_CancelTradeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTrading_CancelTradeRequestDefaultTypeInternal() {}
  union {
    CMsgTrading_CancelTradeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTrading_CancelTradeRequestDefaultTypeInternal _CMsgTrading_CancelTradeRequest_default_instance_;
constexpr CMsgTrading_StartSession::CMsgTrading_StartSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_steamid_(uint64_t{0u}){}
struct CMsgTrading_StartSessionDefaultTypeInternal {
  constexpr CMsgTrading_StartSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgTrading_StartSessionDefaultTypeInternal() {}
  union {
    CMsgTrading_StartSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgTrading_StartSessionDefaultTypeInternal _CMsgTrading_StartSession_default_instance_;
constexpr CMsgClientGetCDNAuthToken::CMsgClientGetCDNAuthToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depot_id_(0u)
  , app_id_(0u){}
struct CMsgClientGetCDNAuthTokenDefaultTypeInternal {
  constexpr CMsgClientGetCDNAuthTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetCDNAuthTokenDefaultTypeInternal() {}
  union {
    CMsgClientGetCDNAuthToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetCDNAuthTokenDefaultTypeInternal _CMsgClientGetCDNAuthToken_default_instance_;
constexpr CMsgClientGetDepotDecryptionKey::CMsgClientGetDepotDecryptionKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depot_id_(0u)
  , app_id_(0u){}
struct CMsgClientGetDepotDecryptionKeyDefaultTypeInternal {
  constexpr CMsgClientGetDepotDecryptionKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetDepotDecryptionKeyDefaultTypeInternal() {}
  union {
    CMsgClientGetDepotDecryptionKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetDepotDecryptionKeyDefaultTypeInternal _CMsgClientGetDepotDecryptionKey_default_instance_;
constexpr CMsgClientGetDepotDecryptionKeyResponse::CMsgClientGetDepotDecryptionKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depot_encryption_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , depot_id_(0u)
  , eresult_(2){}
struct CMsgClientGetDepotDecryptionKeyResponseDefaultTypeInternal {
  constexpr CMsgClientGetDepotDecryptionKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetDepotDecryptionKeyResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetDepotDecryptionKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetDepotDecryptionKeyResponseDefaultTypeInternal _CMsgClientGetDepotDecryptionKeyResponse_default_instance_;
constexpr CMsgClientCheckAppBetaPassword::CMsgClientCheckAppBetaPassword(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : betapassword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , language_(0){}
struct CMsgClientCheckAppBetaPasswordDefaultTypeInternal {
  constexpr CMsgClientCheckAppBetaPasswordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCheckAppBetaPasswordDefaultTypeInternal() {}
  union {
    CMsgClientCheckAppBetaPassword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCheckAppBetaPasswordDefaultTypeInternal _CMsgClientCheckAppBetaPassword_default_instance_;
constexpr CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CMsgClientCheckAppBetaPasswordResponse_BetaPassword(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : betaname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , betapassword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , betadescription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientCheckAppBetaPasswordResponse_BetaPasswordDefaultTypeInternal {
  constexpr CMsgClientCheckAppBetaPasswordResponse_BetaPasswordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCheckAppBetaPasswordResponse_BetaPasswordDefaultTypeInternal() {}
  union {
    CMsgClientCheckAppBetaPasswordResponse_BetaPassword _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCheckAppBetaPasswordResponse_BetaPasswordDefaultTypeInternal _CMsgClientCheckAppBetaPasswordResponse_BetaPassword_default_instance_;
constexpr CMsgClientCheckAppBetaPasswordResponse::CMsgClientCheckAppBetaPasswordResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : betapasswords_()
  , eresult_(2){}
struct CMsgClientCheckAppBetaPasswordResponseDefaultTypeInternal {
  constexpr CMsgClientCheckAppBetaPasswordResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCheckAppBetaPasswordResponseDefaultTypeInternal() {}
  union {
    CMsgClientCheckAppBetaPasswordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCheckAppBetaPasswordResponseDefaultTypeInternal _CMsgClientCheckAppBetaPasswordResponse_default_instance_;
constexpr CMsgClientGetCDNAuthTokenResponse::CMsgClientGetCDNAuthTokenResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expiration_time_(0u)
  , eresult_(2u){}
struct CMsgClientGetCDNAuthTokenResponseDefaultTypeInternal {
  constexpr CMsgClientGetCDNAuthTokenResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetCDNAuthTokenResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetCDNAuthTokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetCDNAuthTokenResponseDefaultTypeInternal _CMsgClientGetCDNAuthTokenResponse_default_instance_;
constexpr CMsgDownloadRateStatistics_StatsInfo::CMsgDownloadRateStatistics_StatsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_type_(0u)
  , source_id_(0u)
  , bytes_(uint64_t{0u})
  , microseconds_(uint64_t{0u})
  , seconds_(0u)
  , used_ipv6_(false)
  , proxied_(false){}
struct CMsgDownloadRateStatistics_StatsInfoDefaultTypeInternal {
  constexpr CMsgDownloadRateStatistics_StatsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDownloadRateStatistics_StatsInfoDefaultTypeInternal() {}
  union {
    CMsgDownloadRateStatistics_StatsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDownloadRateStatistics_StatsInfoDefaultTypeInternal _CMsgDownloadRateStatistics_StatsInfo_default_instance_;
constexpr CMsgDownloadRateStatistics::CMsgDownloadRateStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , cell_id_(0u)
  , throttling_kbps_(0u)
  , steam_realm_(0u){}
struct CMsgDownloadRateStatisticsDefaultTypeInternal {
  constexpr CMsgDownloadRateStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDownloadRateStatisticsDefaultTypeInternal() {}
  union {
    CMsgDownloadRateStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDownloadRateStatisticsDefaultTypeInternal _CMsgDownloadRateStatistics_default_instance_;
constexpr CMsgClientRequestAccountData::CMsgClientRequestAccountData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_or_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0u){}
struct CMsgClientRequestAccountDataDefaultTypeInternal {
  constexpr CMsgClientRequestAccountDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestAccountDataDefaultTypeInternal() {}
  union {
    CMsgClientRequestAccountData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestAccountDataDefaultTypeInternal _CMsgClientRequestAccountData_default_instance_;
constexpr CMsgClientRequestAccountDataResponse::CMsgClientRequestAccountDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_suggestion1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_suggestion2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_suggestion3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0u)
  , eresult_(0u)
  , ct_matches_(0u){}
struct CMsgClientRequestAccountDataResponseDefaultTypeInternal {
  constexpr CMsgClientRequestAccountDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestAccountDataResponseDefaultTypeInternal() {}
  union {
    CMsgClientRequestAccountDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestAccountDataResponseDefaultTypeInternal _CMsgClientRequestAccountDataResponse_default_instance_;
constexpr CMsgClientUGSGetGlobalStats::CMsgClientUGSGetGlobalStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(uint64_t{0u})
  , history_days_requested_(0u)
  , time_last_requested_(0u)
  , first_day_cached_(0u)
  , days_cached_(0u){}
struct CMsgClientUGSGetGlobalStatsDefaultTypeInternal {
  constexpr CMsgClientUGSGetGlobalStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUGSGetGlobalStatsDefaultTypeInternal() {}
  union {
    CMsgClientUGSGetGlobalStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUGSGetGlobalStatsDefaultTypeInternal _CMsgClientUGSGetGlobalStats_default_instance_;
constexpr CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CMsgClientUGSGetGlobalStatsResponse_Day_Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(int64_t{0})
  , stat_id_(0){}
struct CMsgClientUGSGetGlobalStatsResponse_Day_StatDefaultTypeInternal {
  constexpr CMsgClientUGSGetGlobalStatsResponse_Day_StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUGSGetGlobalStatsResponse_Day_StatDefaultTypeInternal() {}
  union {
    CMsgClientUGSGetGlobalStatsResponse_Day_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUGSGetGlobalStatsResponse_Day_StatDefaultTypeInternal _CMsgClientUGSGetGlobalStatsResponse_Day_Stat_default_instance_;
constexpr CMsgClientUGSGetGlobalStatsResponse_Day::CMsgClientUGSGetGlobalStatsResponse_Day(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , day_id_(0u){}
struct CMsgClientUGSGetGlobalStatsResponse_DayDefaultTypeInternal {
  constexpr CMsgClientUGSGetGlobalStatsResponse_DayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUGSGetGlobalStatsResponse_DayDefaultTypeInternal() {}
  union {
    CMsgClientUGSGetGlobalStatsResponse_Day _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUGSGetGlobalStatsResponse_DayDefaultTypeInternal _CMsgClientUGSGetGlobalStatsResponse_Day_default_instance_;
constexpr CMsgClientUGSGetGlobalStatsResponse::CMsgClientUGSGetGlobalStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : days_()
  , timestamp_(0u)
  , day_current_(0)
  , eresult_(2){}
struct CMsgClientUGSGetGlobalStatsResponseDefaultTypeInternal {
  constexpr CMsgClientUGSGetGlobalStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUGSGetGlobalStatsResponseDefaultTypeInternal() {}
  union {
    CMsgClientUGSGetGlobalStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUGSGetGlobalStatsResponseDefaultTypeInternal _CMsgClientUGSGetGlobalStatsResponse_default_instance_;
constexpr CMsgClientRedeemGuestPass::CMsgClientRedeemGuestPass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guest_pass_id_(uint64_t{0u}){}
struct CMsgClientRedeemGuestPassDefaultTypeInternal {
  constexpr CMsgClientRedeemGuestPassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRedeemGuestPassDefaultTypeInternal() {}
  union {
    CMsgClientRedeemGuestPass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRedeemGuestPassDefaultTypeInternal _CMsgClientRedeemGuestPass_default_instance_;
constexpr CMsgClientRedeemGuestPassResponse::CMsgClientRedeemGuestPassResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_id_(0u)
  , must_own_appid_(0u)
  , eresult_(2u){}
struct CMsgClientRedeemGuestPassResponseDefaultTypeInternal {
  constexpr CMsgClientRedeemGuestPassResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRedeemGuestPassResponseDefaultTypeInternal() {}
  union {
    CMsgClientRedeemGuestPassResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRedeemGuestPassResponseDefaultTypeInternal _CMsgClientRedeemGuestPassResponse_default_instance_;
constexpr CMsgClientGetClanActivityCounts::CMsgClientGetClanActivityCounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_clans_(){}
struct CMsgClientGetClanActivityCountsDefaultTypeInternal {
  constexpr CMsgClientGetClanActivityCountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClanActivityCountsDefaultTypeInternal() {}
  union {
    CMsgClientGetClanActivityCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClanActivityCountsDefaultTypeInternal _CMsgClientGetClanActivityCounts_default_instance_;
constexpr CMsgClientGetClanActivityCountsResponse::CMsgClientGetClanActivityCountsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2u){}
struct CMsgClientGetClanActivityCountsResponseDefaultTypeInternal {
  constexpr CMsgClientGetClanActivityCountsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetClanActivityCountsResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetClanActivityCountsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetClanActivityCountsResponseDefaultTypeInternal _CMsgClientGetClanActivityCountsResponse_default_instance_;
constexpr CMsgClientOGSReportString::CMsgClientOGSReportString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formatter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , varargs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(uint64_t{0u})
  , accumulated_(false)
  , severity_(0){}
struct CMsgClientOGSReportStringDefaultTypeInternal {
  constexpr CMsgClientOGSReportStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientOGSReportStringDefaultTypeInternal() {}
  union {
    CMsgClientOGSReportString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientOGSReportStringDefaultTypeInternal _CMsgClientOGSReportString_default_instance_;
constexpr CMsgClientOGSReportBug::CMsgClientOGSReportBug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bugtext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , screenshot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(uint64_t{0u}){}
struct CMsgClientOGSReportBugDefaultTypeInternal {
  constexpr CMsgClientOGSReportBugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientOGSReportBugDefaultTypeInternal() {}
  union {
    CMsgClientOGSReportBug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientOGSReportBugDefaultTypeInternal _CMsgClientOGSReportBug_default_instance_;
constexpr CMsgClientSentLogs::CMsgClientSentLogs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientSentLogsDefaultTypeInternal {
  constexpr CMsgClientSentLogsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSentLogsDefaultTypeInternal() {}
  union {
    CMsgClientSentLogs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSentLogsDefaultTypeInternal _CMsgClientSentLogs_default_instance_;
constexpr CMsgGCClient::CMsgGCClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gcname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , msgtype_(0u)
  , steamid_(uint64_t{0u})
  , ip_(0u){}
struct CMsgGCClientDefaultTypeInternal {
  constexpr CMsgGCClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientDefaultTypeInternal() {}
  union {
    CMsgGCClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientDefaultTypeInternal _CMsgGCClient_default_instance_;
constexpr CMsgClientRequestFreeLicense::CMsgClientRequestFreeLicense(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appids_(){}
struct CMsgClientRequestFreeLicenseDefaultTypeInternal {
  constexpr CMsgClientRequestFreeLicenseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestFreeLicenseDefaultTypeInternal() {}
  union {
    CMsgClientRequestFreeLicense _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestFreeLicenseDefaultTypeInternal _CMsgClientRequestFreeLicense_default_instance_;
constexpr CMsgClientRequestFreeLicenseResponse::CMsgClientRequestFreeLicenseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : granted_packageids_()
  , granted_appids_()
  , eresult_(2u){}
struct CMsgClientRequestFreeLicenseResponseDefaultTypeInternal {
  constexpr CMsgClientRequestFreeLicenseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestFreeLicenseResponseDefaultTypeInternal() {}
  union {
    CMsgClientRequestFreeLicenseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestFreeLicenseResponseDefaultTypeInternal _CMsgClientRequestFreeLicenseResponse_default_instance_;
constexpr CMsgDRMDownloadRequestWithCrashData::CMsgDRMDownloadRequestWithCrashData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guid_drm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guid_split_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guid_merge_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , crash_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , download_flags_(0u)
  , download_types_known_(0u){}
struct CMsgDRMDownloadRequestWithCrashDataDefaultTypeInternal {
  constexpr CMsgDRMDownloadRequestWithCrashDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDRMDownloadRequestWithCrashDataDefaultTypeInternal() {}
  union {
    CMsgDRMDownloadRequestWithCrashData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDRMDownloadRequestWithCrashDataDefaultTypeInternal _CMsgDRMDownloadRequestWithCrashData_default_instance_;
constexpr CMsgDRMDownloadResponse::CMsgDRMDownloadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : merge_guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , download_file_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , blob_download_type_(0u)
  , download_file_dfs_ip_(0u)
  , download_file_dfs_port_(0u)
  , eresult_(2u){}
struct CMsgDRMDownloadResponseDefaultTypeInternal {
  constexpr CMsgDRMDownloadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDRMDownloadResponseDefaultTypeInternal() {}
  union {
    CMsgDRMDownloadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDRMDownloadResponseDefaultTypeInternal _CMsgDRMDownloadResponse_default_instance_;
constexpr CMsgDRMFinalResult::CMsgDRMFinalResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : merge_guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , download_file_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , blob_download_type_(0u)
  , error_detail_(0u)
  , download_file_dfs_ip_(0u)
  , download_file_dfs_port_(0u)
  , eresult_(2u){}
struct CMsgDRMFinalResultDefaultTypeInternal {
  constexpr CMsgDRMFinalResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDRMFinalResultDefaultTypeInternal() {}
  union {
    CMsgDRMFinalResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDRMFinalResultDefaultTypeInternal _CMsgDRMFinalResult_default_instance_;
constexpr CMsgClientDPCheckSpecialSurvey::CMsgClientDPCheckSpecialSurvey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : survey_id_(0u){}
struct CMsgClientDPCheckSpecialSurveyDefaultTypeInternal {
  constexpr CMsgClientDPCheckSpecialSurveyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDPCheckSpecialSurveyDefaultTypeInternal() {}
  union {
    CMsgClientDPCheckSpecialSurvey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDPCheckSpecialSurveyDefaultTypeInternal _CMsgClientDPCheckSpecialSurvey_default_instance_;
constexpr CMsgClientDPCheckSpecialSurveyResponse::CMsgClientDPCheckSpecialSurveyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0u)
  , include_software_(false)
  , eresult_(2u){}
struct CMsgClientDPCheckSpecialSurveyResponseDefaultTypeInternal {
  constexpr CMsgClientDPCheckSpecialSurveyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDPCheckSpecialSurveyResponseDefaultTypeInternal() {}
  union {
    CMsgClientDPCheckSpecialSurveyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDPCheckSpecialSurveyResponseDefaultTypeInternal _CMsgClientDPCheckSpecialSurveyResponse_default_instance_;
constexpr CMsgClientDPSendSpecialSurveyResponse::CMsgClientDPSendSpecialSurveyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , survey_id_(0u){}
struct CMsgClientDPSendSpecialSurveyResponseDefaultTypeInternal {
  constexpr CMsgClientDPSendSpecialSurveyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDPSendSpecialSurveyResponseDefaultTypeInternal() {}
  union {
    CMsgClientDPSendSpecialSurveyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDPSendSpecialSurveyResponseDefaultTypeInternal _CMsgClientDPSendSpecialSurveyResponse_default_instance_;
constexpr CMsgClientDPSendSpecialSurveyResponseReply::CMsgClientDPSendSpecialSurveyResponseReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(2u){}
struct CMsgClientDPSendSpecialSurveyResponseReplyDefaultTypeInternal {
  constexpr CMsgClientDPSendSpecialSurveyResponseReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDPSendSpecialSurveyResponseReplyDefaultTypeInternal() {}
  union {
    CMsgClientDPSendSpecialSurveyResponseReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDPSendSpecialSurveyResponseReplyDefaultTypeInternal _CMsgClientDPSendSpecialSurveyResponseReply_default_instance_;
constexpr CMsgClientRequestForgottenPasswordEmail::CMsgClientRequestForgottenPasswordEmail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_tried_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientRequestForgottenPasswordEmailDefaultTypeInternal {
  constexpr CMsgClientRequestForgottenPasswordEmailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestForgottenPasswordEmailDefaultTypeInternal() {}
  union {
    CMsgClientRequestForgottenPasswordEmail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestForgottenPasswordEmailDefaultTypeInternal _CMsgClientRequestForgottenPasswordEmail_default_instance_;
constexpr CMsgClientRequestForgottenPasswordEmailResponse::CMsgClientRequestForgottenPasswordEmailResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0u)
  , use_secret_question_(false){}
struct CMsgClientRequestForgottenPasswordEmailResponseDefaultTypeInternal {
  constexpr CMsgClientRequestForgottenPasswordEmailResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestForgottenPasswordEmailResponseDefaultTypeInternal() {}
  union {
    CMsgClientRequestForgottenPasswordEmailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestForgottenPasswordEmailResponseDefaultTypeInternal _CMsgClientRequestForgottenPasswordEmailResponse_default_instance_;
constexpr CMsgClientItemAnnouncements_UnseenItem::CMsgClientItemAnnouncements_UnseenItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : context_id_(uint64_t{0u})
  , asset_id_(uint64_t{0u})
  , appid_(0u)
  , rtime32_gained_(0u)
  , amount_(uint64_t{0u})
  , source_appid_(0u){}
struct CMsgClientItemAnnouncements_UnseenItemDefaultTypeInternal {
  constexpr CMsgClientItemAnnouncements_UnseenItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientItemAnnouncements_UnseenItemDefaultTypeInternal() {}
  union {
    CMsgClientItemAnnouncements_UnseenItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientItemAnnouncements_UnseenItemDefaultTypeInternal _CMsgClientItemAnnouncements_UnseenItem_default_instance_;
constexpr CMsgClientItemAnnouncements::CMsgClientItemAnnouncements(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unseen_items_()
  , count_new_items_(0u){}
struct CMsgClientItemAnnouncementsDefaultTypeInternal {
  constexpr CMsgClientItemAnnouncementsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientItemAnnouncementsDefaultTypeInternal() {}
  union {
    CMsgClientItemAnnouncements _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientItemAnnouncementsDefaultTypeInternal _CMsgClientItemAnnouncements_default_instance_;
constexpr CMsgClientRequestItemAnnouncements::CMsgClientRequestItemAnnouncements(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientRequestItemAnnouncementsDefaultTypeInternal {
  constexpr CMsgClientRequestItemAnnouncementsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestItemAnnouncementsDefaultTypeInternal() {}
  union {
    CMsgClientRequestItemAnnouncements _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestItemAnnouncementsDefaultTypeInternal _CMsgClientRequestItemAnnouncements_default_instance_;
constexpr CMsgClientUserNotifications_Notification::CMsgClientUserNotifications_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_notification_type_(0u)
  , count_(0u){}
struct CMsgClientUserNotifications_NotificationDefaultTypeInternal {
  constexpr CMsgClientUserNotifications_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUserNotifications_NotificationDefaultTypeInternal() {}
  union {
    CMsgClientUserNotifications_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUserNotifications_NotificationDefaultTypeInternal _CMsgClientUserNotifications_Notification_default_instance_;
constexpr CMsgClientUserNotifications::CMsgClientUserNotifications(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_(){}
struct CMsgClientUserNotificationsDefaultTypeInternal {
  constexpr CMsgClientUserNotificationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUserNotificationsDefaultTypeInternal() {}
  union {
    CMsgClientUserNotifications _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUserNotificationsDefaultTypeInternal _CMsgClientUserNotifications_default_instance_;
constexpr CMsgClientCommentNotifications::CMsgClientCommentNotifications(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_new_comments_(0u)
  , count_new_comments_owner_(0u)
  , count_new_comments_subscriptions_(0u){}
struct CMsgClientCommentNotificationsDefaultTypeInternal {
  constexpr CMsgClientCommentNotificationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientCommentNotificationsDefaultTypeInternal() {}
  union {
    CMsgClientCommentNotifications _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientCommentNotificationsDefaultTypeInternal _CMsgClientCommentNotifications_default_instance_;
constexpr CMsgClientRequestCommentNotifications::CMsgClientRequestCommentNotifications(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientRequestCommentNotificationsDefaultTypeInternal {
  constexpr CMsgClientRequestCommentNotificationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestCommentNotificationsDefaultTypeInternal() {}
  union {
    CMsgClientRequestCommentNotifications _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestCommentNotificationsDefaultTypeInternal _CMsgClientRequestCommentNotifications_default_instance_;
constexpr CMsgClientOfflineMessageNotification::CMsgClientOfflineMessageNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friends_with_offline_messages_()
  , offline_messages_(0u){}
struct CMsgClientOfflineMessageNotificationDefaultTypeInternal {
  constexpr CMsgClientOfflineMessageNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientOfflineMessageNotificationDefaultTypeInternal() {}
  union {
    CMsgClientOfflineMessageNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientOfflineMessageNotificationDefaultTypeInternal _CMsgClientOfflineMessageNotification_default_instance_;
constexpr CMsgClientRequestOfflineMessageCount::CMsgClientRequestOfflineMessageCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientRequestOfflineMessageCountDefaultTypeInternal {
  constexpr CMsgClientRequestOfflineMessageCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestOfflineMessageCountDefaultTypeInternal() {}
  union {
    CMsgClientRequestOfflineMessageCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestOfflineMessageCountDefaultTypeInternal _CMsgClientRequestOfflineMessageCount_default_instance_;
constexpr CMsgClientChatGetFriendMessageHistory::CMsgClientChatGetFriendMessageHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CMsgClientChatGetFriendMessageHistoryDefaultTypeInternal {
  constexpr CMsgClientChatGetFriendMessageHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChatGetFriendMessageHistoryDefaultTypeInternal() {}
  union {
    CMsgClientChatGetFriendMessageHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChatGetFriendMessageHistoryDefaultTypeInternal _CMsgClientChatGetFriendMessageHistory_default_instance_;
constexpr CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , timestamp_(0u)
  , unread_(false){}
struct CMsgClientChatGetFriendMessageHistoryResponse_FriendMessageDefaultTypeInternal {
  constexpr CMsgClientChatGetFriendMessageHistoryResponse_FriendMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChatGetFriendMessageHistoryResponse_FriendMessageDefaultTypeInternal() {}
  union {
    CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChatGetFriendMessageHistoryResponse_FriendMessageDefaultTypeInternal _CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_default_instance_;
constexpr CMsgClientChatGetFriendMessageHistoryResponse::CMsgClientChatGetFriendMessageHistoryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , steamid_(uint64_t{0u})
  , success_(0u){}
struct CMsgClientChatGetFriendMessageHistoryResponseDefaultTypeInternal {
  constexpr CMsgClientChatGetFriendMessageHistoryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChatGetFriendMessageHistoryResponseDefaultTypeInternal() {}
  union {
    CMsgClientChatGetFriendMessageHistoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChatGetFriendMessageHistoryResponseDefaultTypeInternal _CMsgClientChatGetFriendMessageHistoryResponse_default_instance_;
constexpr CMsgClientChatGetFriendMessageHistoryForOfflineMessages::CMsgClientChatGetFriendMessageHistoryForOfflineMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientChatGetFriendMessageHistoryForOfflineMessagesDefaultTypeInternal {
  constexpr CMsgClientChatGetFriendMessageHistoryForOfflineMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChatGetFriendMessageHistoryForOfflineMessagesDefaultTypeInternal() {}
  union {
    CMsgClientChatGetFriendMessageHistoryForOfflineMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChatGetFriendMessageHistoryForOfflineMessagesDefaultTypeInternal _CMsgClientChatGetFriendMessageHistoryForOfflineMessages_default_instance_;
constexpr CMsgClientFSGetFriendsSteamLevels::CMsgClientFSGetFriendsSteamLevels(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountids_(){}
struct CMsgClientFSGetFriendsSteamLevelsDefaultTypeInternal {
  constexpr CMsgClientFSGetFriendsSteamLevelsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFSGetFriendsSteamLevelsDefaultTypeInternal() {}
  union {
    CMsgClientFSGetFriendsSteamLevels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFSGetFriendsSteamLevelsDefaultTypeInternal _CMsgClientFSGetFriendsSteamLevels_default_instance_;
constexpr CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CMsgClientFSGetFriendsSteamLevelsResponse_Friend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_(0u)
  , level_(0u){}
struct CMsgClientFSGetFriendsSteamLevelsResponse_FriendDefaultTypeInternal {
  constexpr CMsgClientFSGetFriendsSteamLevelsResponse_FriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFSGetFriendsSteamLevelsResponse_FriendDefaultTypeInternal() {}
  union {
    CMsgClientFSGetFriendsSteamLevelsResponse_Friend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFSGetFriendsSteamLevelsResponse_FriendDefaultTypeInternal _CMsgClientFSGetFriendsSteamLevelsResponse_Friend_default_instance_;
constexpr CMsgClientFSGetFriendsSteamLevelsResponse::CMsgClientFSGetFriendsSteamLevelsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friends_(){}
struct CMsgClientFSGetFriendsSteamLevelsResponseDefaultTypeInternal {
  constexpr CMsgClientFSGetFriendsSteamLevelsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFSGetFriendsSteamLevelsResponseDefaultTypeInternal() {}
  union {
    CMsgClientFSGetFriendsSteamLevelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFSGetFriendsSteamLevelsResponseDefaultTypeInternal _CMsgClientFSGetFriendsSteamLevelsResponse_default_instance_;
constexpr CMsgClientEmailAddrInfo::CMsgClientEmailAddrInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_is_validated_(false)
  , email_validation_changed_(false)
  , credential_change_requires_code_(false)
  , password_or_secretqa_change_requires_code_(false){}
struct CMsgClientEmailAddrInfoDefaultTypeInternal {
  constexpr CMsgClientEmailAddrInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientEmailAddrInfoDefaultTypeInternal() {}
  union {
    CMsgClientEmailAddrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientEmailAddrInfoDefaultTypeInternal _CMsgClientEmailAddrInfo_default_instance_;
constexpr CMsgCREItemVoteSummary_PublishedFileId::CMsgCREItemVoteSummary_PublishedFileId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u}){}
struct CMsgCREItemVoteSummary_PublishedFileIdDefaultTypeInternal {
  constexpr CMsgCREItemVoteSummary_PublishedFileIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREItemVoteSummary_PublishedFileIdDefaultTypeInternal() {}
  union {
    CMsgCREItemVoteSummary_PublishedFileId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREItemVoteSummary_PublishedFileIdDefaultTypeInternal _CMsgCREItemVoteSummary_PublishedFileId_default_instance_;
constexpr CMsgCREItemVoteSummary::CMsgCREItemVoteSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_ids_(){}
struct CMsgCREItemVoteSummaryDefaultTypeInternal {
  constexpr CMsgCREItemVoteSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREItemVoteSummaryDefaultTypeInternal() {}
  union {
    CMsgCREItemVoteSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREItemVoteSummaryDefaultTypeInternal _CMsgCREItemVoteSummary_default_instance_;
constexpr CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CMsgCREItemVoteSummaryResponse_ItemVoteSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , votes_for_(0)
  , votes_against_(0)
  , reports_(0)
  , score_(0){}
struct CMsgCREItemVoteSummaryResponse_ItemVoteSummaryDefaultTypeInternal {
  constexpr CMsgCREItemVoteSummaryResponse_ItemVoteSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREItemVoteSummaryResponse_ItemVoteSummaryDefaultTypeInternal() {}
  union {
    CMsgCREItemVoteSummaryResponse_ItemVoteSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREItemVoteSummaryResponse_ItemVoteSummaryDefaultTypeInternal _CMsgCREItemVoteSummaryResponse_ItemVoteSummary_default_instance_;
constexpr CMsgCREItemVoteSummaryResponse::CMsgCREItemVoteSummaryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_vote_summaries_()
  , eresult_(2){}
struct CMsgCREItemVoteSummaryResponseDefaultTypeInternal {
  constexpr CMsgCREItemVoteSummaryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREItemVoteSummaryResponseDefaultTypeInternal() {}
  union {
    CMsgCREItemVoteSummaryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREItemVoteSummaryResponseDefaultTypeInternal _CMsgCREItemVoteSummaryResponse_default_instance_;
constexpr CMsgCREUpdateUserPublishedItemVote::CMsgCREUpdateUserPublishedItemVote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , vote_up_(false){}
struct CMsgCREUpdateUserPublishedItemVoteDefaultTypeInternal {
  constexpr CMsgCREUpdateUserPublishedItemVoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREUpdateUserPublishedItemVoteDefaultTypeInternal() {}
  union {
    CMsgCREUpdateUserPublishedItemVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREUpdateUserPublishedItemVoteDefaultTypeInternal _CMsgCREUpdateUserPublishedItemVote_default_instance_;
constexpr CMsgCREUpdateUserPublishedItemVoteResponse::CMsgCREUpdateUserPublishedItemVoteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CMsgCREUpdateUserPublishedItemVoteResponseDefaultTypeInternal {
  constexpr CMsgCREUpdateUserPublishedItemVoteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREUpdateUserPublishedItemVoteResponseDefaultTypeInternal() {}
  union {
    CMsgCREUpdateUserPublishedItemVoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREUpdateUserPublishedItemVoteResponseDefaultTypeInternal _CMsgCREUpdateUserPublishedItemVoteResponse_default_instance_;
constexpr CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u}){}
struct CMsgCREGetUserPublishedItemVoteDetails_PublishedFileIdDefaultTypeInternal {
  constexpr CMsgCREGetUserPublishedItemVoteDetails_PublishedFileIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREGetUserPublishedItemVoteDetails_PublishedFileIdDefaultTypeInternal() {}
  union {
    CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREGetUserPublishedItemVoteDetails_PublishedFileIdDefaultTypeInternal _CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_default_instance_;
constexpr CMsgCREGetUserPublishedItemVoteDetails::CMsgCREGetUserPublishedItemVoteDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_ids_(){}
struct CMsgCREGetUserPublishedItemVoteDetailsDefaultTypeInternal {
  constexpr CMsgCREGetUserPublishedItemVoteDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREGetUserPublishedItemVoteDetailsDefaultTypeInternal() {}
  union {
    CMsgCREGetUserPublishedItemVoteDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREGetUserPublishedItemVoteDetailsDefaultTypeInternal _CMsgCREGetUserPublishedItemVoteDetails_default_instance_;
constexpr CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , vote_(0){}
struct CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetailDefaultTypeInternal {
  constexpr CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetailDefaultTypeInternal() {}
  union {
    CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetailDefaultTypeInternal _CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_default_instance_;
constexpr CMsgCREGetUserPublishedItemVoteDetailsResponse::CMsgCREGetUserPublishedItemVoteDetailsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_item_vote_details_()
  , eresult_(2){}
struct CMsgCREGetUserPublishedItemVoteDetailsResponseDefaultTypeInternal {
  constexpr CMsgCREGetUserPublishedItemVoteDetailsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCREGetUserPublishedItemVoteDetailsResponseDefaultTypeInternal() {}
  union {
    CMsgCREGetUserPublishedItemVoteDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCREGetUserPublishedItemVoteDetailsResponseDefaultTypeInternal _CMsgCREGetUserPublishedItemVoteDetailsResponse_default_instance_;
constexpr CMsgFSGetFollowerCount::CMsgFSGetFollowerCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u}){}
struct CMsgFSGetFollowerCountDefaultTypeInternal {
  constexpr CMsgFSGetFollowerCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFSGetFollowerCountDefaultTypeInternal() {}
  union {
    CMsgFSGetFollowerCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFSGetFollowerCountDefaultTypeInternal _CMsgFSGetFollowerCount_default_instance_;
constexpr CMsgFSGetFollowerCountResponse::CMsgFSGetFollowerCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_(0)
  , eresult_(2){}
struct CMsgFSGetFollowerCountResponseDefaultTypeInternal {
  constexpr CMsgFSGetFollowerCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFSGetFollowerCountResponseDefaultTypeInternal() {}
  union {
    CMsgFSGetFollowerCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFSGetFollowerCountResponseDefaultTypeInternal _CMsgFSGetFollowerCountResponse_default_instance_;
constexpr CMsgFSGetIsFollowing::CMsgFSGetIsFollowing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u}){}
struct CMsgFSGetIsFollowingDefaultTypeInternal {
  constexpr CMsgFSGetIsFollowingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFSGetIsFollowingDefaultTypeInternal() {}
  union {
    CMsgFSGetIsFollowing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFSGetIsFollowingDefaultTypeInternal _CMsgFSGetIsFollowing_default_instance_;
constexpr CMsgFSGetIsFollowingResponse::CMsgFSGetIsFollowingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_following_(false)
  , eresult_(2){}
struct CMsgFSGetIsFollowingResponseDefaultTypeInternal {
  constexpr CMsgFSGetIsFollowingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFSGetIsFollowingResponseDefaultTypeInternal() {}
  union {
    CMsgFSGetIsFollowingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFSGetIsFollowingResponseDefaultTypeInternal _CMsgFSGetIsFollowingResponse_default_instance_;
constexpr CMsgFSEnumerateFollowingList::CMsgFSEnumerateFollowingList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_index_(0u){}
struct CMsgFSEnumerateFollowingListDefaultTypeInternal {
  constexpr CMsgFSEnumerateFollowingListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFSEnumerateFollowingListDefaultTypeInternal() {}
  union {
    CMsgFSEnumerateFollowingList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFSEnumerateFollowingListDefaultTypeInternal _CMsgFSEnumerateFollowingList_default_instance_;
constexpr CMsgFSEnumerateFollowingListResponse::CMsgFSEnumerateFollowingListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_ids_()
  , total_results_(0)
  , eresult_(2){}
struct CMsgFSEnumerateFollowingListResponseDefaultTypeInternal {
  constexpr CMsgFSEnumerateFollowingListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFSEnumerateFollowingListResponseDefaultTypeInternal() {}
  union {
    CMsgFSEnumerateFollowingListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFSEnumerateFollowingListResponseDefaultTypeInternal _CMsgFSEnumerateFollowingListResponse_default_instance_;
constexpr CMsgDPGetNumberOfCurrentPlayers::CMsgDPGetNumberOfCurrentPlayers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CMsgDPGetNumberOfCurrentPlayersDefaultTypeInternal {
  constexpr CMsgDPGetNumberOfCurrentPlayersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDPGetNumberOfCurrentPlayersDefaultTypeInternal() {}
  union {
    CMsgDPGetNumberOfCurrentPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDPGetNumberOfCurrentPlayersDefaultTypeInternal _CMsgDPGetNumberOfCurrentPlayers_default_instance_;
constexpr CMsgDPGetNumberOfCurrentPlayersResponse::CMsgDPGetNumberOfCurrentPlayersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_count_(0)
  , eresult_(2){}
struct CMsgDPGetNumberOfCurrentPlayersResponseDefaultTypeInternal {
  constexpr CMsgDPGetNumberOfCurrentPlayersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDPGetNumberOfCurrentPlayersResponseDefaultTypeInternal() {}
  union {
    CMsgDPGetNumberOfCurrentPlayersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDPGetNumberOfCurrentPlayersResponseDefaultTypeInternal _CMsgDPGetNumberOfCurrentPlayersResponse_default_instance_;
constexpr CMsgClientFriendUserStatusPublished::CMsgClientFriendUserStatusPublished(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , friend_steamid_(uint64_t{0u})
  , appid_(0u){}
struct CMsgClientFriendUserStatusPublishedDefaultTypeInternal {
  constexpr CMsgClientFriendUserStatusPublishedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFriendUserStatusPublishedDefaultTypeInternal() {}
  union {
    CMsgClientFriendUserStatusPublished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFriendUserStatusPublishedDefaultTypeInternal _CMsgClientFriendUserStatusPublished_default_instance_;
constexpr CMsgClientServiceMethodLegacy::CMsgClientServiceMethodLegacy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : method_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialized_method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_notification_(false){}
struct CMsgClientServiceMethodLegacyDefaultTypeInternal {
  constexpr CMsgClientServiceMethodLegacyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServiceMethodLegacyDefaultTypeInternal() {}
  union {
    CMsgClientServiceMethodLegacy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServiceMethodLegacyDefaultTypeInternal _CMsgClientServiceMethodLegacy_default_instance_;
constexpr CMsgClientServiceMethodLegacyResponse::CMsgClientServiceMethodLegacyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : method_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialized_method_response_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientServiceMethodLegacyResponseDefaultTypeInternal {
  constexpr CMsgClientServiceMethodLegacyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServiceMethodLegacyResponseDefaultTypeInternal() {}
  union {
    CMsgClientServiceMethodLegacyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServiceMethodLegacyResponseDefaultTypeInternal _CMsgClientServiceMethodLegacyResponse_default_instance_;
constexpr CMsgClientUIMode::CMsgClientUIMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uimode_(0u)
  , chat_mode_(0u){}
struct CMsgClientUIModeDefaultTypeInternal {
  constexpr CMsgClientUIModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUIModeDefaultTypeInternal() {}
  union {
    CMsgClientUIMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUIModeDefaultTypeInternal _CMsgClientUIMode_default_instance_;
constexpr CMsgClientVanityURLChangedNotification::CMsgClientVanityURLChangedNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vanity_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientVanityURLChangedNotificationDefaultTypeInternal {
  constexpr CMsgClientVanityURLChangedNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientVanityURLChangedNotificationDefaultTypeInternal() {}
  union {
    CMsgClientVanityURLChangedNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientVanityURLChangedNotificationDefaultTypeInternal _CMsgClientVanityURLChangedNotification_default_instance_;
constexpr CMsgClientAuthorizeLocalDeviceRequest::CMsgClientAuthorizeLocalDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , local_device_token_(uint64_t{0u})
  , owner_account_id_(0u){}
struct CMsgClientAuthorizeLocalDeviceRequestDefaultTypeInternal {
  constexpr CMsgClientAuthorizeLocalDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAuthorizeLocalDeviceRequestDefaultTypeInternal() {}
  union {
    CMsgClientAuthorizeLocalDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAuthorizeLocalDeviceRequestDefaultTypeInternal _CMsgClientAuthorizeLocalDeviceRequest_default_instance_;
constexpr CMsgClientAuthorizeLocalDevice::CMsgClientAuthorizeLocalDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : authed_device_token_(uint64_t{0u})
  , owner_account_id_(0u)
  , eresult_(2){}
struct CMsgClientAuthorizeLocalDeviceDefaultTypeInternal {
  constexpr CMsgClientAuthorizeLocalDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAuthorizeLocalDeviceDefaultTypeInternal() {}
  union {
    CMsgClientAuthorizeLocalDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAuthorizeLocalDeviceDefaultTypeInternal _CMsgClientAuthorizeLocalDevice_default_instance_;
constexpr CMsgClientAuthorizeLocalDeviceNotification::CMsgClientAuthorizeLocalDeviceNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_device_token_(uint64_t{0u})
  , owner_account_id_(0u)
  , eresult_(2){}
struct CMsgClientAuthorizeLocalDeviceNotificationDefaultTypeInternal {
  constexpr CMsgClientAuthorizeLocalDeviceNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAuthorizeLocalDeviceNotificationDefaultTypeInternal() {}
  union {
    CMsgClientAuthorizeLocalDeviceNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAuthorizeLocalDeviceNotificationDefaultTypeInternal _CMsgClientAuthorizeLocalDeviceNotification_default_instance_;
constexpr CMsgClientDeauthorizeDeviceRequest::CMsgClientDeauthorizeDeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deauthorization_device_token_(uint64_t{0u})
  , deauthorization_account_id_(0u){}
struct CMsgClientDeauthorizeDeviceRequestDefaultTypeInternal {
  constexpr CMsgClientDeauthorizeDeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDeauthorizeDeviceRequestDefaultTypeInternal() {}
  union {
    CMsgClientDeauthorizeDeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDeauthorizeDeviceRequestDefaultTypeInternal _CMsgClientDeauthorizeDeviceRequest_default_instance_;
constexpr CMsgClientDeauthorizeDevice::CMsgClientDeauthorizeDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deauthorization_account_id_(0u)
  , eresult_(2){}
struct CMsgClientDeauthorizeDeviceDefaultTypeInternal {
  constexpr CMsgClientDeauthorizeDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientDeauthorizeDeviceDefaultTypeInternal() {}
  union {
    CMsgClientDeauthorizeDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientDeauthorizeDeviceDefaultTypeInternal _CMsgClientDeauthorizeDevice_default_instance_;
constexpr CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CMsgClientUseLocalDeviceAuthorizations_DeviceToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_id_(uint64_t{0u})
  , owner_account_id_(0u){}
struct CMsgClientUseLocalDeviceAuthorizations_DeviceTokenDefaultTypeInternal {
  constexpr CMsgClientUseLocalDeviceAuthorizations_DeviceTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUseLocalDeviceAuthorizations_DeviceTokenDefaultTypeInternal() {}
  union {
    CMsgClientUseLocalDeviceAuthorizations_DeviceToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUseLocalDeviceAuthorizations_DeviceTokenDefaultTypeInternal _CMsgClientUseLocalDeviceAuthorizations_DeviceToken_default_instance_;
constexpr CMsgClientUseLocalDeviceAuthorizations::CMsgClientUseLocalDeviceAuthorizations(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : authorization_account_id_()
  , device_tokens_(){}
struct CMsgClientUseLocalDeviceAuthorizationsDefaultTypeInternal {
  constexpr CMsgClientUseLocalDeviceAuthorizationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientUseLocalDeviceAuthorizationsDefaultTypeInternal() {}
  union {
    CMsgClientUseLocalDeviceAuthorizations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientUseLocalDeviceAuthorizationsDefaultTypeInternal _CMsgClientUseLocalDeviceAuthorizations_default_instance_;
constexpr CMsgClientGetAuthorizedDevices::CMsgClientGetAuthorizedDevices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientGetAuthorizedDevicesDefaultTypeInternal {
  constexpr CMsgClientGetAuthorizedDevicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetAuthorizedDevicesDefaultTypeInternal() {}
  union {
    CMsgClientGetAuthorizedDevices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetAuthorizedDevicesDefaultTypeInternal _CMsgClientGetAuthorizedDevices_default_instance_;
constexpr CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_device_token_(uint64_t{0u})
  , last_access_time_(0u)
  , borrower_id_(0u)
  , is_pending_(false)
  , app_played_(0u){}
struct CMsgClientGetAuthorizedDevicesResponse_AuthorizedDeviceDefaultTypeInternal {
  constexpr CMsgClientGetAuthorizedDevicesResponse_AuthorizedDeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetAuthorizedDevicesResponse_AuthorizedDeviceDefaultTypeInternal() {}
  union {
    CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetAuthorizedDevicesResponse_AuthorizedDeviceDefaultTypeInternal _CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_default_instance_;
constexpr CMsgClientGetAuthorizedDevicesResponse::CMsgClientGetAuthorizedDevicesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : authorized_device_()
  , eresult_(2){}
struct CMsgClientGetAuthorizedDevicesResponseDefaultTypeInternal {
  constexpr CMsgClientGetAuthorizedDevicesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetAuthorizedDevicesResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetAuthorizedDevicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetAuthorizedDevicesResponseDefaultTypeInternal _CMsgClientGetAuthorizedDevicesResponse_default_instance_;
constexpr CMsgClientSharedLibraryLockStatus_LockedLibrary::CMsgClientSharedLibraryLockStatus_LockedLibrary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(0u)
  , locked_by_(0u){}
struct CMsgClientSharedLibraryLockStatus_LockedLibraryDefaultTypeInternal {
  constexpr CMsgClientSharedLibraryLockStatus_LockedLibraryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSharedLibraryLockStatus_LockedLibraryDefaultTypeInternal() {}
  union {
    CMsgClientSharedLibraryLockStatus_LockedLibrary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSharedLibraryLockStatus_LockedLibraryDefaultTypeInternal _CMsgClientSharedLibraryLockStatus_LockedLibrary_default_instance_;
constexpr CMsgClientSharedLibraryLockStatus::CMsgClientSharedLibraryLockStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locked_library_()
  , own_library_locked_by_(0u){}
struct CMsgClientSharedLibraryLockStatusDefaultTypeInternal {
  constexpr CMsgClientSharedLibraryLockStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSharedLibraryLockStatusDefaultTypeInternal() {}
  union {
    CMsgClientSharedLibraryLockStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSharedLibraryLockStatusDefaultTypeInternal _CMsgClientSharedLibraryLockStatus_default_instance_;
constexpr CMsgClientSharedLibraryStopPlaying_StopApp::CMsgClientSharedLibraryStopPlaying_StopApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , owner_id_(0u){}
struct CMsgClientSharedLibraryStopPlaying_StopAppDefaultTypeInternal {
  constexpr CMsgClientSharedLibraryStopPlaying_StopAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSharedLibraryStopPlaying_StopAppDefaultTypeInternal() {}
  union {
    CMsgClientSharedLibraryStopPlaying_StopApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSharedLibraryStopPlaying_StopAppDefaultTypeInternal _CMsgClientSharedLibraryStopPlaying_StopApp_default_instance_;
constexpr CMsgClientSharedLibraryStopPlaying::CMsgClientSharedLibraryStopPlaying(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_apps_()
  , seconds_left_(0){}
struct CMsgClientSharedLibraryStopPlayingDefaultTypeInternal {
  constexpr CMsgClientSharedLibraryStopPlayingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSharedLibraryStopPlayingDefaultTypeInternal() {}
  union {
    CMsgClientSharedLibraryStopPlaying _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSharedLibraryStopPlayingDefaultTypeInternal _CMsgClientSharedLibraryStopPlaying_default_instance_;
constexpr CMsgClientServiceCall::CMsgClientServiceCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sysid_routing_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , callparameter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_handle_(0u)
  , module_crc_(0u)
  , function_id_(0u)
  , cub_output_max_(0u)
  , flags_(0u)
  , ping_only_(false)
  , max_outstanding_calls_(0u)
  , app_id_(0u){}
struct CMsgClientServiceCallDefaultTypeInternal {
  constexpr CMsgClientServiceCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServiceCallDefaultTypeInternal() {}
  union {
    CMsgClientServiceCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServiceCallDefaultTypeInternal _CMsgClientServiceCall_default_instance_;
constexpr CMsgClientServiceModule::CMsgClientServiceModule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_crc_(0u){}
struct CMsgClientServiceModuleDefaultTypeInternal {
  constexpr CMsgClientServiceModuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServiceModuleDefaultTypeInternal() {}
  union {
    CMsgClientServiceModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServiceModuleDefaultTypeInternal _CMsgClientServiceModule_default_instance_;
constexpr CMsgClientServiceCallResponse::CMsgClientServiceCallResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sysid_routing_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_version_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , system_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exception_record_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , portable_os_version_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , portable_system_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_call_sysid_routing_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_handle_(0u)
  , module_crc_(0u)
  , load_address_(uint64_t{0u})
  , ecallresult_(0u)
  , was_converted_(false)
  , internal_result_(0u)
  , current_count_(0u)
  , last_call_handle_(0u)
  , last_call_module_crc_(0u)
  , last_ecallresult_(0u)
  , last_callissue_delta_(0u)
  , last_callcomplete_delta_(0u){}
struct CMsgClientServiceCallResponseDefaultTypeInternal {
  constexpr CMsgClientServiceCallResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServiceCallResponseDefaultTypeInternal() {}
  union {
    CMsgClientServiceCallResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServiceCallResponseDefaultTypeInternal _CMsgClientServiceCallResponse_default_instance_;
constexpr CMsgAMUnlockH264::CMsgAMUnlockH264(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , platform_(0)
  , reason_(0){}
struct CMsgAMUnlockH264DefaultTypeInternal {
  constexpr CMsgAMUnlockH264DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMUnlockH264DefaultTypeInternal() {}
  union {
    CMsgAMUnlockH264 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMUnlockH264DefaultTypeInternal _CMsgAMUnlockH264_default_instance_;
constexpr CMsgAMUnlockH264Response::CMsgAMUnlockH264Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encryption_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(2){}
struct CMsgAMUnlockH264ResponseDefaultTypeInternal {
  constexpr CMsgAMUnlockH264ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMUnlockH264ResponseDefaultTypeInternal() {}
  union {
    CMsgAMUnlockH264Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMUnlockH264ResponseDefaultTypeInternal _CMsgAMUnlockH264Response_default_instance_;
constexpr CMsgClientPlayingSessionState::CMsgClientPlayingSessionState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playing_blocked_(false)
  , playing_app_(0u){}
struct CMsgClientPlayingSessionStateDefaultTypeInternal {
  constexpr CMsgClientPlayingSessionStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPlayingSessionStateDefaultTypeInternal() {}
  union {
    CMsgClientPlayingSessionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPlayingSessionStateDefaultTypeInternal _CMsgClientPlayingSessionState_default_instance_;
constexpr CMsgClientKickPlayingSession::CMsgClientKickPlayingSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : only_stop_game_(false){}
struct CMsgClientKickPlayingSessionDefaultTypeInternal {
  constexpr CMsgClientKickPlayingSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientKickPlayingSessionDefaultTypeInternal() {}
  union {
    CMsgClientKickPlayingSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientKickPlayingSessionDefaultTypeInternal _CMsgClientKickPlayingSession_default_instance_;
constexpr CMsgClientVoiceCallPreAuthorize::CMsgClientVoiceCallPreAuthorize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caller_steamid_(uint64_t{0u})
  , receiver_steamid_(uint64_t{0u})
  , caller_id_(0)
  , hangup_(false){}
struct CMsgClientVoiceCallPreAuthorizeDefaultTypeInternal {
  constexpr CMsgClientVoiceCallPreAuthorizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientVoiceCallPreAuthorizeDefaultTypeInternal() {}
  union {
    CMsgClientVoiceCallPreAuthorize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientVoiceCallPreAuthorizeDefaultTypeInternal _CMsgClientVoiceCallPreAuthorize_default_instance_;
constexpr CMsgClientVoiceCallPreAuthorizeResponse::CMsgClientVoiceCallPreAuthorizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caller_steamid_(uint64_t{0u})
  , receiver_steamid_(uint64_t{0u})
  , caller_id_(0)
  , eresult_(2){}
struct CMsgClientVoiceCallPreAuthorizeResponseDefaultTypeInternal {
  constexpr CMsgClientVoiceCallPreAuthorizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientVoiceCallPreAuthorizeResponseDefaultTypeInternal() {}
  union {
    CMsgClientVoiceCallPreAuthorizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientVoiceCallPreAuthorizeResponseDefaultTypeInternal _CMsgClientVoiceCallPreAuthorizeResponse_default_instance_;
constexpr CMsgBadgeCraftedNotification::CMsgBadgeCraftedNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , badge_level_(0u){}
struct CMsgBadgeCraftedNotificationDefaultTypeInternal {
  constexpr CMsgBadgeCraftedNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBadgeCraftedNotificationDefaultTypeInternal() {}
  union {
    CMsgBadgeCraftedNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBadgeCraftedNotificationDefaultTypeInternal _CMsgBadgeCraftedNotification_default_instance_;
constexpr CMsgClientStartPeerContentServer::CMsgClientStartPeerContentServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , client_remote_id_(uint64_t{0u})
  , app_id_(0u)
  , current_build_id_(0u){}
struct CMsgClientStartPeerContentServerDefaultTypeInternal {
  constexpr CMsgClientStartPeerContentServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStartPeerContentServerDefaultTypeInternal() {}
  union {
    CMsgClientStartPeerContentServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStartPeerContentServerDefaultTypeInternal _CMsgClientStartPeerContentServer_default_instance_;
constexpr CMsgClientStartPeerContentServerResponse::CMsgClientStartPeerContentServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : installed_depots_()
  , result_(0u)
  , server_port_(0u){}
struct CMsgClientStartPeerContentServerResponseDefaultTypeInternal {
  constexpr CMsgClientStartPeerContentServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientStartPeerContentServerResponseDefaultTypeInternal() {}
  union {
    CMsgClientStartPeerContentServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientStartPeerContentServerResponseDefaultTypeInternal _CMsgClientStartPeerContentServerResponse_default_instance_;
constexpr CMsgClientGetPeerContentInfo::CMsgClientGetPeerContentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , client_remote_id_(uint64_t{0u})
  , owned_games_visible_(false){}
struct CMsgClientGetPeerContentInfoDefaultTypeInternal {
  constexpr CMsgClientGetPeerContentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetPeerContentInfoDefaultTypeInternal() {}
  union {
    CMsgClientGetPeerContentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetPeerContentInfoDefaultTypeInternal _CMsgClientGetPeerContentInfo_default_instance_;
constexpr CMsgClientGetPeerContentInfoResponse::CMsgClientGetPeerContentInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_()
  , result_(0u){}
struct CMsgClientGetPeerContentInfoResponseDefaultTypeInternal {
  constexpr CMsgClientGetPeerContentInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientGetPeerContentInfoResponseDefaultTypeInternal() {}
  union {
    CMsgClientGetPeerContentInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientGetPeerContentInfoResponseDefaultTypeInternal _CMsgClientGetPeerContentInfoResponse_default_instance_;
constexpr CMsgClientFeatureGroupInfo::CMsgClientFeatureGroupInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , groupid_(uint64_t{0u}){}
struct CMsgClientFeatureGroupInfoDefaultTypeInternal {
  constexpr CMsgClientFeatureGroupInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientFeatureGroupInfoDefaultTypeInternal() {}
  union {
    CMsgClientFeatureGroupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientFeatureGroupInfoDefaultTypeInternal _CMsgClientFeatureGroupInfo_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5f2_2eproto[126];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5f2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5f2_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientserver_5f2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateUserGameInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateUserGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateUserGameInfo, steamid_idgs_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateUserGameInfo, gameid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateUserGameInfo, game_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateUserGameInfo, game_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateUserGameInfo, token_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceUpload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceUpload, rich_presence_kv_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceUpload, steamid_broadcast_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceRequest, steamid_request_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceInfo_RichPresence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceInfo_RichPresence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceInfo_RichPresence, steamid_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceInfo_RichPresence, rich_presence_kv_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRichPresenceInfo, rich_presence_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignature, app_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, esignatureresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, signatureheader_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, filesize_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, getlasterror_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckFileSignatureResponse, evalvesignaturecheckdetail_),
  3,
  4,
  5,
  0,
  6,
  1,
  2,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuth, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuth, offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuth, cubtoread_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, filesize_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, getlasterror_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, cubread_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, bytes_read_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientReadMachineAuthResponse, filename_sentry_),
  0,
  4,
  5,
  1,
  6,
  7,
  8,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, cubtowrite_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, otp_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, otp_identifier_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, otp_sharedsecret_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuth, otp_timedrift_),
  0,
  4,
  5,
  1,
  6,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, filesize_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, sha_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, getlasterror_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, cubwrote_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, otp_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, otp_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUpdateMachineAuthResponse, otp_identifier_),
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, filename_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, eresult_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, filesize_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, sha_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, lock_account_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, otp_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, otp_identifier_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, otp_sharedsecret_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, otp_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuth, machine_name_userchosen_),
  0,
  6,
  7,
  1,
  8,
  9,
  2,
  3,
  10,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuthResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestMachineAuthResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterKey, key_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseResponse, purchase_result_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseResponse, purchase_receipt_info_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, bios_manufacturer_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, bios_serialnumber_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, license_file_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, mainboard_manufacturer_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, mainboard_product_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientActivateOEMLicense, mainboard_serialnumber_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterOEMMachine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterOEMMachine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterOEMMachine, oem_register_file_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterOEMMachineResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterOEMMachineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRegisterOEMMachineResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseWithMachineID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseWithMachineID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseWithMachineID, package_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPurchaseWithMachineID, machine_info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeRequest, trade_request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeRequest, other_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeRequest, other_name_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, trade_request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, other_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, steamguard_required_days_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, new_device_cooldown_days_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, default_password_reset_probation_days_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, password_reset_probation_days_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, default_email_change_probation_days_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_InitiateTradeResponse, email_change_probation_days_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_CancelTradeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_CancelTradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_CancelTradeRequest, other_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_StartSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_StartSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTrading_StartSession, other_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthToken, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthToken, host_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthToken, app_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKey, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKey, app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKeyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKeyResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKeyResponse, depot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetDepotDecryptionKeyResponse, depot_encryption_key_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPassword, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPassword, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPassword, betapassword_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPassword, language_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse_BetaPassword, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse_BetaPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse_BetaPassword, betaname_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse_BetaPassword, betapassword_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse_BetaPassword, betadescription_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCheckAppBetaPasswordResponse, betapasswords_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthTokenResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthTokenResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthTokenResponse, token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetCDNAuthTokenResponse, expiration_time_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, source_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, source_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, host_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, microseconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, used_ipv6_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics_StatsInfo, proxied_),
  1,
  2,
  5,
  3,
  0,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics, stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics, throttling_kbps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDownloadRateStatistics, steam_realm_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountData, account_or_email_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountData, action_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, action_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, account_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, ct_matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, account_name_suggestion1_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, account_name_suggestion2_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestAccountDataResponse, account_name_suggestion3_),
  4,
  5,
  0,
  6,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStats, gameid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStats, history_days_requested_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStats, time_last_requested_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStats, first_day_cached_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStats, days_cached_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day_Stat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day_Stat, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day_Stat, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day, day_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse_Day, stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse, day_current_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUGSGetGlobalStatsResponse, days_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPass, guest_pass_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPassResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPassResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPassResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPassResponse, package_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRedeemGuestPassResponse, must_own_appid_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClanActivityCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClanActivityCounts, steamid_clans_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClanActivityCountsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClanActivityCountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetClanActivityCountsResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportString, accumulated_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportString, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportString, severity_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportString, formatter_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportString, varargs_),
  3,
  2,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportBug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportBug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportBug, sessionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportBug, bugtext_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOGSReportBug, screenshot_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSentLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, msgtype_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, payload_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, gcname_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClient, ip_),
  2,
  3,
  0,
  4,
  1,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFreeLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFreeLicense, appids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFreeLicenseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFreeLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFreeLicenseResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFreeLicenseResponse, granted_packageids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestFreeLicenseResponse, granted_appids_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, download_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, download_types_known_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, guid_drm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, guid_split_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, guid_merge_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, module_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, module_path_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadRequestWithCrashData, crash_data_),
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, blob_download_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, merge_guid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, download_file_dfs_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, download_file_dfs_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, download_file_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMDownloadResponse, module_path_),
  7,
  3,
  4,
  0,
  5,
  6,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, blob_download_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, error_detail_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, merge_guid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, download_file_dfs_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, download_file_dfs_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgDRMFinalResult, download_file_url_),
  7,
  2,
  3,
  4,
  0,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurvey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurvey, survey_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, state_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, custom_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, include_software_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPCheckSpecialSurveyResponse, token_),
  5,
  3,
  0,
  1,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponse, survey_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponse, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponseReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponseReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponseReply, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDPSendSpecialSurveyResponseReply, token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmail, account_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmail, password_tried_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmailResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmailResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestForgottenPasswordEmailResponse, use_secret_question_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, context_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, asset_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, rtime32_gained_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements_UnseenItem, source_appid_),
  2,
  0,
  1,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements, count_new_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientItemAnnouncements, unseen_items_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestItemAnnouncements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUserNotifications_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUserNotifications_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUserNotifications_Notification, user_notification_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUserNotifications_Notification, count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUserNotifications, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUserNotifications, notifications_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCommentNotifications, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCommentNotifications, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientCommentNotifications, count_new_comments_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCommentNotifications, count_new_comments_owner_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientCommentNotifications, count_new_comments_subscriptions_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestCommentNotifications, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientOfflineMessageNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOfflineMessageNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientOfflineMessageNotification, offline_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientOfflineMessageNotification, friends_with_offline_messages_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestOfflineMessageCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistory, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, unread_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse, success_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryResponse, messages_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChatGetFriendMessageHistoryForOfflineMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevels, accountids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevelsResponse_Friend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevelsResponse_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevelsResponse_Friend, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevelsResponse_Friend, level_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFSGetFriendsSteamLevelsResponse, friends_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmailAddrInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmailAddrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmailAddrInfo, email_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmailAddrInfo, email_is_validated_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmailAddrInfo, email_validation_changed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmailAddrInfo, credential_change_requires_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientEmailAddrInfo, password_or_secretqa_change_requires_code_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummary_PublishedFileId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummary_PublishedFileId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummary_PublishedFileId, published_file_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummary, published_file_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary, votes_for_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary, votes_against_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary, reports_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary, score_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREItemVoteSummaryResponse, item_vote_summaries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgCREUpdateUserPublishedItemVote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREUpdateUserPublishedItemVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREUpdateUserPublishedItemVote, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREUpdateUserPublishedItemVote, vote_up_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgCREUpdateUserPublishedItemVoteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREUpdateUserPublishedItemVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREUpdateUserPublishedItemVoteResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId, published_file_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetails, published_file_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, vote_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgCREGetUserPublishedItemVoteDetailsResponse, user_item_vote_details_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetFollowerCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetFollowerCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetFollowerCount, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetFollowerCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetFollowerCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetFollowerCountResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetFollowerCountResponse, count_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetIsFollowing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetIsFollowing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetIsFollowing, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetIsFollowingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetIsFollowingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetIsFollowingResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSGetIsFollowingResponse, is_following_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingList, start_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingListResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingListResponse, total_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgFSEnumerateFollowingListResponse, steam_ids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDPGetNumberOfCurrentPlayers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPGetNumberOfCurrentPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPGetNumberOfCurrentPlayers, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDPGetNumberOfCurrentPlayersResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPGetNumberOfCurrentPlayersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPGetNumberOfCurrentPlayersResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPGetNumberOfCurrentPlayersResponse, player_count_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendUserStatusPublished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendUserStatusPublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendUserStatusPublished, friend_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendUserStatusPublished, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFriendUserStatusPublished, status_text_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacy, method_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacy, serialized_method_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacy, is_notification_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacyResponse, method_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceMethodLegacyResponse, serialized_method_response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUIMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUIMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUIMode, uimode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUIMode, chat_mode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientVanityURLChangedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVanityURLChangedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientVanityURLChangedNotification, vanity_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceRequest, device_description_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceRequest, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceRequest, local_device_token_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDevice, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDevice, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDevice, authed_device_token_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceNotification, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceNotification, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAuthorizeLocalDeviceNotification, local_device_token_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDeviceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDeviceRequest, deauthorization_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDeviceRequest, deauthorization_device_token_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDevice, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientDeauthorizeDevice, deauthorization_account_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientUseLocalDeviceAuthorizations_DeviceToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUseLocalDeviceAuthorizations_DeviceToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUseLocalDeviceAuthorizations_DeviceToken, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUseLocalDeviceAuthorizations_DeviceToken, token_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUseLocalDeviceAuthorizations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientUseLocalDeviceAuthorizations, authorization_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientUseLocalDeviceAuthorizations, device_tokens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, auth_device_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, device_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, last_access_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, borrower_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, is_pending_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, app_played_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetAuthorizedDevicesResponse, authorized_device_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus_LockedLibrary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus_LockedLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus_LockedLibrary, owner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus_LockedLibrary, locked_by_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus, locked_library_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryLockStatus, own_library_locked_by_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying_StopApp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying_StopApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying_StopApp, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying_StopApp, owner_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying, seconds_left_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSharedLibraryStopPlaying, stop_apps_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, sysid_routing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, call_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, module_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, module_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, function_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, cub_output_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, callparameter_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, ping_only_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, max_outstanding_calls_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCall, app_id_),
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  2,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceModule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceModule, module_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceModule, module_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceModule, module_content_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, sysid_routing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, call_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, module_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, module_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, ecallresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, result_content_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, os_version_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, system_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, load_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, exception_record_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, portable_os_version_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, portable_system_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, was_converted_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, internal_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, current_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, last_call_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, last_call_module_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, last_call_sysid_routing_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, last_ecallresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, last_callissue_delta_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServiceCallResponse, last_callcomplete_delta_),
  0,
  9,
  10,
  1,
  12,
  2,
  3,
  4,
  11,
  5,
  6,
  7,
  13,
  14,
  15,
  16,
  17,
  8,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264, platform_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264, reason_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264Response, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMUnlockH264Response, encryption_key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayingSessionState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayingSessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayingSessionState, playing_blocked_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPlayingSessionState, playing_app_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientKickPlayingSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientKickPlayingSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientKickPlayingSession, only_stop_game_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorize, caller_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorize, receiver_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorize, caller_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorize, hangup_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorizeResponse, caller_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorizeResponse, receiver_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorizeResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientVoiceCallPreAuthorizeResponse, caller_id_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBadgeCraftedNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBadgeCraftedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBadgeCraftedNotification, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgBadgeCraftedNotification, badge_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServer, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServer, client_remote_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServer, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServer, current_build_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServerResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServerResponse, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientStartPeerContentServerResponse, installed_depots_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfo, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfo, client_remote_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfo, owned_games_visible_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfoResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientGetPeerContentInfoResponse, apps_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientFeatureGroupInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFeatureGroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientFeatureGroupInfo, groupid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientFeatureGroupInfo, members_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::CMsgClientUpdateUserGameInfo)},
  { 16, 24, -1, sizeof(::CMsgClientRichPresenceUpload)},
  { 26, -1, -1, sizeof(::CMsgClientRichPresenceRequest)},
  { 33, 41, -1, sizeof(::CMsgClientRichPresenceInfo_RichPresence)},
  { 43, -1, -1, sizeof(::CMsgClientRichPresenceInfo)},
  { 50, 57, -1, sizeof(::CMsgClientCheckFileSignature)},
  { 58, 74, -1, sizeof(::CMsgClientCheckFileSignatureResponse)},
  { 84, 93, -1, sizeof(::CMsgClientReadMachineAuth)},
  { 96, 111, -1, sizeof(::CMsgClientReadMachineAuthResponse)},
  { 120, 134, -1, sizeof(::CMsgClientUpdateMachineAuth)},
  { 142, 158, -1, sizeof(::CMsgClientUpdateMachineAuthResponse)},
  { 168, 185, -1, sizeof(::CMsgClientRequestMachineAuth)},
  { 196, 203, -1, sizeof(::CMsgClientRequestMachineAuthResponse)},
  { 204, 211, -1, sizeof(::CMsgClientRegisterKey)},
  { 212, 221, -1, sizeof(::CMsgClientPurchaseResponse)},
  { 224, 236, -1, sizeof(::CMsgClientActivateOEMLicense)},
  { 242, 249, -1, sizeof(::CMsgClientRegisterOEMMachine)},
  { 250, 257, -1, sizeof(::CMsgClientRegisterOEMMachineResponse)},
  { 258, 266, -1, sizeof(::CMsgClientPurchaseWithMachineID)},
  { 268, 277, -1, sizeof(::CMsgTrading_InitiateTradeRequest)},
  { 280, 295, -1, sizeof(::CMsgTrading_InitiateTradeResponse)},
  { 304, 311, -1, sizeof(::CMsgTrading_CancelTradeRequest)},
  { 312, 319, -1, sizeof(::CMsgTrading_StartSession)},
  { 320, 329, -1, sizeof(::CMsgClientGetCDNAuthToken)},
  { 332, 340, -1, sizeof(::CMsgClientGetDepotDecryptionKey)},
  { 342, 351, -1, sizeof(::CMsgClientGetDepotDecryptionKeyResponse)},
  { 354, 363, -1, sizeof(::CMsgClientCheckAppBetaPassword)},
  { 366, 375, -1, sizeof(::CMsgClientCheckAppBetaPasswordResponse_BetaPassword)},
  { 378, 386, -1, sizeof(::CMsgClientCheckAppBetaPasswordResponse)},
  { 388, 397, -1, sizeof(::CMsgClientGetCDNAuthTokenResponse)},
  { 400, 414, -1, sizeof(::CMsgDownloadRateStatistics_StatsInfo)},
  { 422, 432, -1, sizeof(::CMsgDownloadRateStatistics)},
  { 436, 444, -1, sizeof(::CMsgClientRequestAccountData)},
  { 446, 459, -1, sizeof(::CMsgClientRequestAccountDataResponse)},
  { 466, 477, -1, sizeof(::CMsgClientUGSGetGlobalStats)},
  { 482, 490, -1, sizeof(::CMsgClientUGSGetGlobalStatsResponse_Day_Stat)},
  { 492, 500, -1, sizeof(::CMsgClientUGSGetGlobalStatsResponse_Day)},
  { 502, 512, -1, sizeof(::CMsgClientUGSGetGlobalStatsResponse)},
  { 516, 523, -1, sizeof(::CMsgClientRedeemGuestPass)},
  { 524, 533, -1, sizeof(::CMsgClientRedeemGuestPassResponse)},
  { 536, -1, -1, sizeof(::CMsgClientGetClanActivityCounts)},
  { 543, 550, -1, sizeof(::CMsgClientGetClanActivityCountsResponse)},
  { 551, 562, -1, sizeof(::CMsgClientOGSReportString)},
  { 567, 576, -1, sizeof(::CMsgClientOGSReportBug)},
  { 579, -1, -1, sizeof(::CMsgClientSentLogs)},
  { 585, 597, -1, sizeof(::CMsgGCClient)},
  { 603, -1, -1, sizeof(::CMsgClientRequestFreeLicense)},
  { 610, 619, -1, sizeof(::CMsgClientRequestFreeLicenseResponse)},
  { 622, 636, -1, sizeof(::CMsgDRMDownloadRequestWithCrashData)},
  { 644, 658, -1, sizeof(::CMsgDRMDownloadResponse)},
  { 666, 680, -1, sizeof(::CMsgDRMFinalResult)},
  { 688, 695, -1, sizeof(::CMsgClientDPCheckSpecialSurvey)},
  { 696, 708, -1, sizeof(::CMsgClientDPCheckSpecialSurveyResponse)},
  { 714, 722, -1, sizeof(::CMsgClientDPSendSpecialSurveyResponse)},
  { 724, 732, -1, sizeof(::CMsgClientDPSendSpecialSurveyResponseReply)},
  { 734, 742, -1, sizeof(::CMsgClientRequestForgottenPasswordEmail)},
  { 744, 752, -1, sizeof(::CMsgClientRequestForgottenPasswordEmailResponse)},
  { 754, 766, -1, sizeof(::CMsgClientItemAnnouncements_UnseenItem)},
  { 772, 780, -1, sizeof(::CMsgClientItemAnnouncements)},
  { 782, -1, -1, sizeof(::CMsgClientRequestItemAnnouncements)},
  { 788, 796, -1, sizeof(::CMsgClientUserNotifications_Notification)},
  { 798, -1, -1, sizeof(::CMsgClientUserNotifications)},
  { 805, 814, -1, sizeof(::CMsgClientCommentNotifications)},
  { 817, -1, -1, sizeof(::CMsgClientRequestCommentNotifications)},
  { 823, 831, -1, sizeof(::CMsgClientOfflineMessageNotification)},
  { 833, -1, -1, sizeof(::CMsgClientRequestOfflineMessageCount)},
  { 839, 846, -1, sizeof(::CMsgClientChatGetFriendMessageHistory)},
  { 847, 857, -1, sizeof(::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage)},
  { 861, 870, -1, sizeof(::CMsgClientChatGetFriendMessageHistoryResponse)},
  { 873, -1, -1, sizeof(::CMsgClientChatGetFriendMessageHistoryForOfflineMessages)},
  { 879, -1, -1, sizeof(::CMsgClientFSGetFriendsSteamLevels)},
  { 886, 894, -1, sizeof(::CMsgClientFSGetFriendsSteamLevelsResponse_Friend)},
  { 896, -1, -1, sizeof(::CMsgClientFSGetFriendsSteamLevelsResponse)},
  { 903, 914, -1, sizeof(::CMsgClientEmailAddrInfo)},
  { 919, 926, -1, sizeof(::CMsgCREItemVoteSummary_PublishedFileId)},
  { 927, -1, -1, sizeof(::CMsgCREItemVoteSummary)},
  { 934, 945, -1, sizeof(::CMsgCREItemVoteSummaryResponse_ItemVoteSummary)},
  { 950, 958, -1, sizeof(::CMsgCREItemVoteSummaryResponse)},
  { 960, 968, -1, sizeof(::CMsgCREUpdateUserPublishedItemVote)},
  { 970, 977, -1, sizeof(::CMsgCREUpdateUserPublishedItemVoteResponse)},
  { 978, 985, -1, sizeof(::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId)},
  { 986, -1, -1, sizeof(::CMsgCREGetUserPublishedItemVoteDetails)},
  { 993, 1001, -1, sizeof(::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail)},
  { 1003, 1011, -1, sizeof(::CMsgCREGetUserPublishedItemVoteDetailsResponse)},
  { 1013, 1020, -1, sizeof(::CMsgFSGetFollowerCount)},
  { 1021, 1029, -1, sizeof(::CMsgFSGetFollowerCountResponse)},
  { 1031, 1038, -1, sizeof(::CMsgFSGetIsFollowing)},
  { 1039, 1047, -1, sizeof(::CMsgFSGetIsFollowingResponse)},
  { 1049, 1056, -1, sizeof(::CMsgFSEnumerateFollowingList)},
  { 1057, 1066, -1, sizeof(::CMsgFSEnumerateFollowingListResponse)},
  { 1069, 1076, -1, sizeof(::CMsgDPGetNumberOfCurrentPlayers)},
  { 1077, 1085, -1, sizeof(::CMsgDPGetNumberOfCurrentPlayersResponse)},
  { 1087, 1096, -1, sizeof(::CMsgClientFriendUserStatusPublished)},
  { 1099, 1108, -1, sizeof(::CMsgClientServiceMethodLegacy)},
  { 1111, 1119, -1, sizeof(::CMsgClientServiceMethodLegacyResponse)},
  { 1121, 1129, -1, sizeof(::CMsgClientUIMode)},
  { 1131, 1138, -1, sizeof(::CMsgClientVanityURLChangedNotification)},
  { 1139, 1148, -1, sizeof(::CMsgClientAuthorizeLocalDeviceRequest)},
  { 1151, 1160, -1, sizeof(::CMsgClientAuthorizeLocalDevice)},
  { 1163, 1172, -1, sizeof(::CMsgClientAuthorizeLocalDeviceNotification)},
  { 1175, 1183, -1, sizeof(::CMsgClientDeauthorizeDeviceRequest)},
  { 1185, 1193, -1, sizeof(::CMsgClientDeauthorizeDevice)},
  { 1195, 1203, -1, sizeof(::CMsgClientUseLocalDeviceAuthorizations_DeviceToken)},
  { 1205, -1, -1, sizeof(::CMsgClientUseLocalDeviceAuthorizations)},
  { 1213, -1, -1, sizeof(::CMsgClientGetAuthorizedDevices)},
  { 1219, 1231, -1, sizeof(::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice)},
  { 1237, 1245, -1, sizeof(::CMsgClientGetAuthorizedDevicesResponse)},
  { 1247, 1255, -1, sizeof(::CMsgClientSharedLibraryLockStatus_LockedLibrary)},
  { 1257, 1265, -1, sizeof(::CMsgClientSharedLibraryLockStatus)},
  { 1267, 1275, -1, sizeof(::CMsgClientSharedLibraryStopPlaying_StopApp)},
  { 1277, 1285, -1, sizeof(::CMsgClientSharedLibraryStopPlaying)},
  { 1287, 1304, -1, sizeof(::CMsgClientServiceCall)},
  { 1315, 1324, -1, sizeof(::CMsgClientServiceModule)},
  { 1327, 1354, -1, sizeof(::CMsgClientServiceCallResponse)},
  { 1375, 1384, -1, sizeof(::CMsgAMUnlockH264)},
  { 1387, 1395, -1, sizeof(::CMsgAMUnlockH264Response)},
  { 1397, 1405, -1, sizeof(::CMsgClientPlayingSessionState)},
  { 1407, 1414, -1, sizeof(::CMsgClientKickPlayingSession)},
  { 1415, 1425, -1, sizeof(::CMsgClientVoiceCallPreAuthorize)},
  { 1429, 1439, -1, sizeof(::CMsgClientVoiceCallPreAuthorizeResponse)},
  { 1443, 1451, -1, sizeof(::CMsgBadgeCraftedNotification)},
  { 1453, 1463, -1, sizeof(::CMsgClientStartPeerContentServer)},
  { 1467, 1476, -1, sizeof(::CMsgClientStartPeerContentServerResponse)},
  { 1479, 1488, -1, sizeof(::CMsgClientGetPeerContentInfo)},
  { 1491, 1499, -1, sizeof(::CMsgClientGetPeerContentInfoResponse)},
  { 1501, 1509, -1, sizeof(::CMsgClientFeatureGroupInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUpdateUserGameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRichPresenceUpload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRichPresenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRichPresenceInfo_RichPresence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRichPresenceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCheckFileSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCheckFileSignatureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientReadMachineAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientReadMachineAuthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUpdateMachineAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUpdateMachineAuthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestMachineAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestMachineAuthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRegisterKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPurchaseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientActivateOEMLicense_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRegisterOEMMachine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRegisterOEMMachineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPurchaseWithMachineID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTrading_InitiateTradeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTrading_InitiateTradeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTrading_CancelTradeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgTrading_StartSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetCDNAuthToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetDepotDecryptionKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetDepotDecryptionKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCheckAppBetaPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCheckAppBetaPasswordResponse_BetaPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCheckAppBetaPasswordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetCDNAuthTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDownloadRateStatistics_StatsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDownloadRateStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestAccountData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestAccountDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUGSGetGlobalStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUGSGetGlobalStatsResponse_Day_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUGSGetGlobalStatsResponse_Day_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUGSGetGlobalStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRedeemGuestPass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRedeemGuestPassResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClanActivityCounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetClanActivityCountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientOGSReportString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientOGSReportBug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSentLogs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestFreeLicense_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestFreeLicenseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDRMDownloadRequestWithCrashData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDRMDownloadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDRMFinalResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDPCheckSpecialSurvey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDPCheckSpecialSurveyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDPSendSpecialSurveyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDPSendSpecialSurveyResponseReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestForgottenPasswordEmail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestForgottenPasswordEmailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientItemAnnouncements_UnseenItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientItemAnnouncements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestItemAnnouncements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUserNotifications_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUserNotifications_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientCommentNotifications_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestCommentNotifications_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientOfflineMessageNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestOfflineMessageCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChatGetFriendMessageHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChatGetFriendMessageHistoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChatGetFriendMessageHistoryForOfflineMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFSGetFriendsSteamLevels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFSGetFriendsSteamLevelsResponse_Friend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFSGetFriendsSteamLevelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientEmailAddrInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREItemVoteSummary_PublishedFileId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREItemVoteSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREItemVoteSummaryResponse_ItemVoteSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREItemVoteSummaryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREUpdateUserPublishedItemVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREUpdateUserPublishedItemVoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREGetUserPublishedItemVoteDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCREGetUserPublishedItemVoteDetailsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFSGetFollowerCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFSGetFollowerCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFSGetIsFollowing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFSGetIsFollowingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFSEnumerateFollowingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFSEnumerateFollowingListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDPGetNumberOfCurrentPlayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDPGetNumberOfCurrentPlayersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFriendUserStatusPublished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServiceMethodLegacy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServiceMethodLegacyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUIMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientVanityURLChangedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAuthorizeLocalDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAuthorizeLocalDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAuthorizeLocalDeviceNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDeauthorizeDeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientDeauthorizeDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUseLocalDeviceAuthorizations_DeviceToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientUseLocalDeviceAuthorizations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetAuthorizedDevices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetAuthorizedDevicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSharedLibraryLockStatus_LockedLibrary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSharedLibraryLockStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSharedLibraryStopPlaying_StopApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSharedLibraryStopPlaying_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServiceCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServiceModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServiceCallResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMUnlockH264_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMUnlockH264Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPlayingSessionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientKickPlayingSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientVoiceCallPreAuthorize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientVoiceCallPreAuthorizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBadgeCraftedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStartPeerContentServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientStartPeerContentServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetPeerContentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientGetPeerContentInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientFeatureGroupInfo_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5f2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"steammessages_clientserver_2.proto\032\030st"
  "eammessages_base.proto\"w\n\034CMsgClientUpda"
  "teUserGameInfo\022\024\n\014steamid_idgs\030\001 \001(\006\022\016\n\006"
  "gameid\030\002 \001(\006\022\017\n\007game_ip\030\003 \001(\r\022\021\n\tgame_po"
  "rt\030\004 \001(\r\022\r\n\005token\030\005 \001(\014\"S\n\034CMsgClientRic"
  "hPresenceUpload\022\030\n\020rich_presence_kv\030\001 \001("
  "\014\022\031\n\021steamid_broadcast\030\002 \003(\006\"8\n\035CMsgClie"
  "ntRichPresenceRequest\022\027\n\017steamid_request"
  "\030\001 \003(\006\"\235\001\n\032CMsgClientRichPresenceInfo\022\?\n"
  "\rrich_presence\030\001 \003(\0132(.CMsgClientRichPre"
  "senceInfo.RichPresence\032>\n\014RichPresence\022\024"
  "\n\014steamid_user\030\001 \001(\006\022\030\n\020rich_presence_kv"
  "\030\002 \001(\014\".\n\034CMsgClientCheckFileSignature\022\016"
  "\n\006app_id\030\001 \001(\r\"\367\001\n$CMsgClientCheckFileSi"
  "gnatureResponse\022\016\n\006app_id\030\001 \001(\r\022\013\n\003pid\030\002"
  " \001(\r\022\017\n\007eresult\030\003 \001(\r\022\020\n\010filename\030\004 \001(\t\022"
  "\030\n\020esignatureresult\030\005 \001(\r\022\020\n\010sha_file\030\006 "
  "\001(\014\022\027\n\017signatureheader\030\007 \001(\014\022\020\n\010filesize"
  "\030\010 \001(\r\022\024\n\014getlasterror\030\t \001(\r\022\"\n\032evalvesi"
  "gnaturecheckdetail\030\n \001(\r\"P\n\031CMsgClientRe"
  "adMachineAuth\022\020\n\010filename\030\001 \001(\t\022\016\n\006offse"
  "t\030\002 \001(\r\022\021\n\tcubtoread\030\003 \001(\r\"\316\001\n!CMsgClien"
  "tReadMachineAuthResponse\022\020\n\010filename\030\001 \001"
  "(\t\022\017\n\007eresult\030\002 \001(\r\022\020\n\010filesize\030\003 \001(\r\022\020\n"
  "\010sha_file\030\004 \001(\014\022\024\n\014getlasterror\030\005 \001(\r\022\016\n"
  "\006offset\030\006 \001(\r\022\017\n\007cubread\030\007 \001(\r\022\022\n\nbytes_"
  "read\030\010 \001(\014\022\027\n\017filename_sentry\030\t \001(\t\"\275\001\n\033"
  "CMsgClientUpdateMachineAuth\022\020\n\010filename\030"
  "\001 \001(\t\022\016\n\006offset\030\002 \001(\r\022\022\n\ncubtowrite\030\003 \001("
  "\r\022\r\n\005bytes\030\004 \001(\014\022\020\n\010otp_type\030\005 \001(\r\022\026\n\016ot"
  "p_identifier\030\006 \001(\t\022\030\n\020otp_sharedsecret\030\007"
  " \001(\014\022\025\n\rotp_timedrift\030\010 \001(\r\"\341\001\n#CMsgClie"
  "ntUpdateMachineAuthResponse\022\020\n\010filename\030"
  "\001 \001(\t\022\017\n\007eresult\030\002 \001(\r\022\020\n\010filesize\030\003 \001(\r"
  "\022\020\n\010sha_file\030\004 \001(\014\022\024\n\014getlasterror\030\005 \001(\r"
  "\022\016\n\006offset\030\006 \001(\r\022\020\n\010cubwrote\030\007 \001(\r\022\020\n\010ot"
  "p_type\030\010 \001(\005\022\021\n\totp_value\030\t \001(\r\022\026\n\016otp_i"
  "dentifier\030\n \001(\t\"\241\002\n\034CMsgClientRequestMac"
  "hineAuth\022\020\n\010filename\030\001 \001(\t\022\032\n\022eresult_se"
  "ntryfile\030\002 \001(\r\022\020\n\010filesize\030\003 \001(\r\022\026\n\016sha_"
  "sentryfile\030\004 \001(\014\022\033\n\023lock_account_action\030"
  "\006 \001(\005\022\020\n\010otp_type\030\007 \001(\r\022\026\n\016otp_identifie"
  "r\030\010 \001(\t\022\030\n\020otp_sharedsecret\030\t \001(\014\022\021\n\totp"
  "_value\030\n \001(\r\022\024\n\014machine_name\030\013 \001(\t\022\037\n\027ma"
  "chine_name_userchosen\030\014 \001(\t\"7\n$CMsgClien"
  "tRequestMachineAuthResponse\022\017\n\007eresult\030\001"
  " \001(\r\"$\n\025CMsgClientRegisterKey\022\013\n\003key\030\001 \001"
  "(\t\"p\n\032CMsgClientPurchaseResponse\022\022\n\007eres"
  "ult\030\001 \001(\005:\0012\022\037\n\027purchase_result_details\030"
  "\002 \001(\005\022\035\n\025purchase_receipt_info\030\003 \001(\014\"\305\001\n"
  "\034CMsgClientActivateOEMLicense\022\031\n\021bios_ma"
  "nufacturer\030\001 \001(\t\022\031\n\021bios_serialnumber\030\002 "
  "\001(\t\022\024\n\014license_file\030\003 \001(\014\022\036\n\026mainboard_m"
  "anufacturer\030\004 \001(\t\022\031\n\021mainboard_product\030\005"
  " \001(\t\022\036\n\026mainboard_serialnumber\030\006 \001(\t\"9\n\034"
  "CMsgClientRegisterOEMMachine\022\031\n\021oem_regi"
  "ster_file\030\001 \001(\014\"7\n$CMsgClientRegisterOEM"
  "MachineResponse\022\017\n\007eresult\030\001 \001(\r\"K\n\037CMsg"
  "ClientPurchaseWithMachineID\022\022\n\npackage_i"
  "d\030\001 \001(\r\022\024\n\014machine_info\030\002 \001(\014\"g\n CMsgTra"
  "ding_InitiateTradeRequest\022\030\n\020trade_reque"
  "st_id\030\001 \001(\r\022\025\n\rother_steamid\030\002 \001(\004\022\022\n\not"
  "her_name\030\003 \001(\t\"\322\002\n!CMsgTrading_InitiateT"
  "radeResponse\022\020\n\010response\030\001 \001(\r\022\030\n\020trade_"
  "request_id\030\002 \001(\r\022\025\n\rother_steamid\030\003 \001(\004\022"
  " \n\030steamguard_required_days\030\004 \001(\r\022 \n\030new"
  "_device_cooldown_days\030\005 \001(\r\022-\n%default_p"
  "assword_reset_probation_days\030\006 \001(\r\022%\n\035pa"
  "ssword_reset_probation_days\030\007 \001(\r\022+\n#def"
  "ault_email_change_probation_days\030\010 \001(\r\022#"
  "\n\033email_change_probation_days\030\t \001(\r\"7\n\036C"
  "MsgTrading_CancelTradeRequest\022\025\n\rother_s"
  "teamid\030\001 \001(\004\"1\n\030CMsgTrading_StartSession"
  "\022\025\n\rother_steamid\030\001 \001(\004\"P\n\031CMsgClientGet"
  "CDNAuthToken\022\020\n\010depot_id\030\001 \001(\r\022\021\n\thost_n"
  "ame\030\002 \001(\t\022\016\n\006app_id\030\003 \001(\r\"C\n\037CMsgClientG"
  "etDepotDecryptionKey\022\020\n\010depot_id\030\001 \001(\r\022\016"
  "\n\006app_id\030\002 \001(\r\"m\n\'CMsgClientGetDepotDecr"
  "yptionKeyResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\020\n"
  "\010depot_id\030\002 \001(\r\022\034\n\024depot_encryption_key\030"
  "\003 \001(\014\"X\n\036CMsgClientCheckAppBetaPassword\022"
  "\016\n\006app_id\030\001 \001(\r\022\024\n\014betapassword\030\002 \001(\t\022\020\n"
  "\010language\030\003 \001(\005\"\332\001\n&CMsgClientCheckAppBe"
  "taPasswordResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022K"
  "\n\rbetapasswords\030\004 \003(\01324.CMsgClientCheckA"
  "ppBetaPasswordResponse.BetaPassword\032O\n\014B"
  "etaPassword\022\020\n\010betaname\030\001 \001(\t\022\024\n\014betapas"
  "sword\030\002 \001(\t\022\027\n\017betadescription\030\003 \001(\t\"_\n!"
  "CMsgClientGetCDNAuthTokenResponse\022\022\n\007ere"
  "sult\030\001 \001(\r:\0012\022\r\n\005token\030\002 \001(\t\022\027\n\017expirati"
  "on_time\030\003 \001(\r\"\264\002\n\032CMsgDownloadRateStatis"
  "tics\022\017\n\007cell_id\030\001 \001(\r\0224\n\005stats\030\002 \003(\0132%.C"
  "MsgDownloadRateStatistics.StatsInfo\022\027\n\017t"
  "hrottling_kbps\030\003 \001(\r\022\023\n\013steam_realm\030\004 \001("
  "\r\032\240\001\n\tStatsInfo\022\023\n\013source_type\030\001 \001(\r\022\021\n\t"
  "source_id\030\002 \001(\r\022\017\n\007seconds\030\003 \001(\r\022\r\n\005byte"
  "s\030\004 \001(\004\022\021\n\thost_name\030\005 \001(\t\022\024\n\014microsecon"
  "ds\030\006 \001(\004\022\021\n\tused_ipv6\030\007 \001(\010\022\017\n\007proxied\030\010"
  " \001(\010\"H\n\034CMsgClientRequestAccountData\022\030\n\020"
  "account_or_email\030\001 \001(\t\022\016\n\006action\030\002 \001(\r\"\327"
  "\001\n$CMsgClientRequestAccountDataResponse\022"
  "\016\n\006action\030\001 \001(\r\022\017\n\007eresult\030\002 \001(\r\022\024\n\014acco"
  "unt_name\030\003 \001(\t\022\022\n\nct_matches\030\004 \001(\r\022 \n\030ac"
  "count_name_suggestion1\030\005 \001(\t\022 \n\030account_"
  "name_suggestion2\030\006 \001(\t\022 \n\030account_name_s"
  "uggestion3\030\007 \001(\t\"\231\001\n\033CMsgClientUGSGetGlo"
  "balStats\022\016\n\006gameid\030\001 \001(\004\022\036\n\026history_days"
  "_requested\030\002 \001(\r\022\033\n\023time_last_requested\030"
  "\003 \001(\007\022\030\n\020first_day_cached\030\004 \001(\r\022\023\n\013days_"
  "cached\030\005 \001(\r\"\225\002\n#CMsgClientUGSGetGlobalS"
  "tatsResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\021\n\ttime"
  "stamp\030\002 \001(\007\022\023\n\013day_current\030\003 \001(\005\0226\n\004days"
  "\030\004 \003(\0132(.CMsgClientUGSGetGlobalStatsResp"
  "onse.Day\032z\n\003Day\022\016\n\006day_id\030\001 \001(\r\022<\n\005stats"
  "\030\002 \003(\0132-.CMsgClientUGSGetGlobalStatsResp"
  "onse.Day.Stat\032%\n\004Stat\022\017\n\007stat_id\030\001 \001(\005\022\014"
  "\n\004data\030\002 \001(\003\"2\n\031CMsgClientRedeemGuestPas"
  "s\022\025\n\rguest_pass_id\030\001 \001(\006\"c\n!CMsgClientRe"
  "deemGuestPassResponse\022\022\n\007eresult\030\001 \001(\r:\001"
  "2\022\022\n\npackage_id\030\002 \001(\r\022\026\n\016must_own_appid\030"
  "\003 \001(\r\"8\n\037CMsgClientGetClanActivityCounts"
  "\022\025\n\rsteamid_clans\030\001 \003(\004\"=\n\'CMsgClientGet"
  "ClanActivityCountsResponse\022\022\n\007eresult\030\001 "
  "\001(\r:\0012\"y\n\031CMsgClientOGSReportString\022\023\n\013a"
  "ccumulated\030\001 \001(\010\022\021\n\tsessionid\030\002 \001(\004\022\020\n\010s"
  "everity\030\003 \001(\005\022\021\n\tformatter\030\004 \001(\t\022\017\n\007vara"
  "rgs\030\005 \001(\014\"P\n\026CMsgClientOGSReportBug\022\021\n\ts"
  "essionid\030\001 \001(\004\022\017\n\007bugtext\030\002 \001(\t\022\022\n\nscree"
  "nshot\030\003 \001(\014\"\024\n\022CMsgClientSentLogs\"l\n\014CMs"
  "gGCClient\022\r\n\005appid\030\001 \001(\r\022\017\n\007msgtype\030\002 \001("
  "\r\022\017\n\007payload\030\003 \001(\014\022\017\n\007steamid\030\004 \001(\006\022\016\n\006g"
  "cname\030\005 \001(\t\022\n\n\002ip\030\006 \001(\r\".\n\034CMsgClientReq"
  "uestFreeLicense\022\016\n\006appids\030\002 \003(\r\"n\n$CMsgC"
  "lientRequestFreeLicenseResponse\022\022\n\007eresu"
  "lt\030\001 \001(\r:\0012\022\032\n\022granted_packageids\030\002 \003(\r\022"
  "\026\n\016granted_appids\030\003 \003(\r\"\323\001\n#CMsgDRMDownl"
  "oadRequestWithCrashData\022\026\n\016download_flag"
  "s\030\001 \001(\r\022\034\n\024download_types_known\030\002 \001(\r\022\020\n"
  "\010guid_drm\030\003 \001(\014\022\022\n\nguid_split\030\004 \001(\014\022\022\n\ng"
  "uid_merge\030\005 \001(\014\022\023\n\013module_name\030\006 \001(\t\022\023\n\013"
  "module_path\030\007 \001(\t\022\022\n\ncrash_data\030\010 \001(\014\"\333\001"
  "\n\027CMsgDRMDownloadResponse\022\022\n\007eresult\030\001 \001"
  "(\r:\0012\022\016\n\006app_id\030\002 \001(\r\022\032\n\022blob_download_t"
  "ype\030\003 \001(\r\022\022\n\nmerge_guid\030\004 \001(\014\022\034\n\024downloa"
  "d_file_dfs_ip\030\005 \001(\r\022\036\n\026download_file_dfs"
  "_port\030\006 \001(\r\022\031\n\021download_file_url\030\007 \001(\t\022\023"
  "\n\013module_path\030\010 \001(\t\"\327\001\n\022CMsgDRMFinalResu"
  "lt\022\022\n\007eResult\030\001 \001(\r:\0012\022\016\n\006app_id\030\002 \001(\r\022\032"
  "\n\022blob_download_type\030\003 \001(\r\022\024\n\014error_deta"
  "il\030\004 \001(\r\022\022\n\nmerge_guid\030\005 \001(\014\022\034\n\024download"
  "_file_dfs_ip\030\006 \001(\r\022\036\n\026download_file_dfs_"
  "port\030\007 \001(\r\022\031\n\021download_file_url\030\010 \001(\t\"3\n"
  "\036CMsgClientDPCheckSpecialSurvey\022\021\n\tsurve"
  "y_id\030\001 \001(\r\"\226\001\n&CMsgClientDPCheckSpecialS"
  "urveyResponse\022\022\n\007eResult\030\001 \001(\r:\0012\022\r\n\005sta"
  "te\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\022\n\ncustom_url\030\004 \001"
  "(\t\022\030\n\020include_software\030\005 \001(\010\022\r\n\005token\030\006 "
  "\001(\014\"H\n%CMsgClientDPSendSpecialSurveyResp"
  "onse\022\021\n\tsurvey_id\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"O\n"
  "*CMsgClientDPSendSpecialSurveyResponseRe"
  "ply\022\022\n\007eResult\030\001 \001(\r:\0012\022\r\n\005token\030\002 \001(\014\"W"
  "\n\'CMsgClientRequestForgottenPasswordEmai"
  "l\022\024\n\014account_name\030\001 \001(\t\022\026\n\016password_trie"
  "d\030\002 \001(\t\"_\n/CMsgClientRequestForgottenPas"
  "swordEmailResponse\022\017\n\007eResult\030\001 \001(\r\022\033\n\023u"
  "se_secret_question\030\002 \001(\010\"\366\001\n\033CMsgClientI"
  "temAnnouncements\022\027\n\017count_new_items\030\001 \001("
  "\r\022=\n\014unseen_items\030\002 \003(\0132\'.CMsgClientItem"
  "Announcements.UnseenItem\032\177\n\nUnseenItem\022\r"
  "\n\005appid\030\001 \001(\r\022\022\n\ncontext_id\030\002 \001(\004\022\020\n\010ass"
  "et_id\030\003 \001(\004\022\016\n\006amount\030\004 \001(\004\022\026\n\016rtime32_g"
  "ained\030\005 \001(\007\022\024\n\014source_appid\030\006 \001(\r\"$\n\"CMs"
  "gClientRequestItemAnnouncements\"\236\001\n\033CMsg"
  "ClientUserNotifications\022@\n\rnotifications"
  "\030\001 \003(\0132).CMsgClientUserNotifications.Not"
  "ification\032=\n\014Notification\022\036\n\026user_notifi"
  "cation_type\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"\210\001\n\036CMs"
  "gClientCommentNotifications\022\032\n\022count_new"
  "_comments\030\001 \001(\r\022 \n\030count_new_comments_ow"
  "ner\030\002 \001(\r\022(\n count_new_comments_subscrip"
  "tions\030\003 \001(\r\"\'\n%CMsgClientRequestCommentN"
  "otifications\"g\n$CMsgClientOfflineMessage"
  "Notification\022\030\n\020offline_messages\030\001 \001(\r\022%"
  "\n\035friends_with_offline_messages\030\002 \003(\r\"&\n"
  "$CMsgClientRequestOfflineMessageCount\"8\n"
  "%CMsgClientChatGetFriendMessageHistory\022\017"
  "\n\007steamid\030\001 \001(\006\"\371\001\n-CMsgClientChatGetFri"
  "endMessageHistoryResponse\022\017\n\007steamid\030\001 \001"
  "(\006\022\017\n\007success\030\002 \001(\r\022N\n\010messages\030\003 \003(\0132<."
  "CMsgClientChatGetFriendMessageHistoryRes"
  "ponse.FriendMessage\032V\n\rFriendMessage\022\021\n\t"
  "accountid\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\017\n\007me"
  "ssage\030\003 \001(\t\022\016\n\006unread\030\004 \001(\010\"9\n7CMsgClien"
  "tChatGetFriendMessageHistoryForOfflineMe"
  "ssages\"7\n!CMsgClientFSGetFriendsSteamLev"
  "els\022\022\n\naccountids\030\001 \003(\r\"\233\001\n)CMsgClientFS"
  "GetFriendsSteamLevelsResponse\022B\n\007friends"
  "\030\001 \003(\01321.CMsgClientFSGetFriendsSteamLeve"
  "lsResponse.Friend\032*\n\006Friend\022\021\n\taccountid"
  "\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"\312\001\n\027CMsgClientEmai"
  "lAddrInfo\022\025\n\remail_address\030\001 \001(\t\022\032\n\022emai"
  "l_is_validated\030\002 \001(\010\022 \n\030email_validation"
  "_changed\030\003 \001(\010\022\'\n\037credential_change_requ"
  "ires_code\030\004 \001(\010\0221\n)password_or_secretqa_"
  "change_requires_code\030\005 \001(\010\"\213\001\n\026CMsgCREIt"
  "emVoteSummary\022C\n\022published_file_ids\030\001 \003("
  "\0132\'.CMsgCREItemVoteSummary.PublishedFile"
  "Id\032,\n\017PublishedFileId\022\031\n\021published_file_"
  "id\030\001 \001(\006\"\372\001\n\036CMsgCREItemVoteSummaryRespo"
  "nse\022\022\n\007eresult\030\001 \001(\005:\0012\022L\n\023item_vote_sum"
  "maries\030\002 \003(\0132/.CMsgCREItemVoteSummaryRes"
  "ponse.ItemVoteSummary\032v\n\017ItemVoteSummary"
  "\022\031\n\021published_file_id\030\001 \001(\006\022\021\n\tvotes_for"
  "\030\002 \001(\005\022\025\n\rvotes_against\030\003 \001(\005\022\017\n\007reports"
  "\030\004 \001(\005\022\r\n\005score\030\005 \001(\002\"P\n\"CMsgCREUpdateUs"
  "erPublishedItemVote\022\031\n\021published_file_id"
  "\030\001 \001(\006\022\017\n\007vote_up\030\002 \001(\010\"@\n*CMsgCREUpdate"
  "UserPublishedItemVoteResponse\022\022\n\007eresult"
  "\030\001 \001(\005:\0012\"\253\001\n&CMsgCREGetUserPublishedIte"
  "mVoteDetails\022S\n\022published_file_ids\030\001 \003(\013"
  "27.CMsgCREGetUserPublishedItemVoteDetail"
  "s.PublishedFileId\032,\n\017PublishedFileId\022\031\n\021"
  "published_file_id\030\001 \001(\006\"\352\001\n.CMsgCREGetUs"
  "erPublishedItemVoteDetailsResponse\022\022\n\007er"
  "esult\030\001 \001(\005:\0012\022b\n\026user_item_vote_details"
  "\030\002 \003(\0132B.CMsgCREGetUserPublishedItemVote"
  "DetailsResponse.UserItemVoteDetail\032@\n\022Us"
  "erItemVoteDetail\022\031\n\021published_file_id\030\001 "
  "\001(\006\022\017\n\004vote\030\002 \001(\005:\0010\"*\n\026CMsgFSGetFollowe"
  "rCount\022\020\n\010steam_id\030\001 \001(\006\"F\n\036CMsgFSGetFol"
  "lowerCountResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\020"
  "\n\005count\030\002 \001(\005:\0010\"(\n\024CMsgFSGetIsFollowing"
  "\022\020\n\010steam_id\030\001 \001(\006\"O\n\034CMsgFSGetIsFollowi"
  "ngResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\033\n\014is_fol"
  "lowing\030\002 \001(\010:\005false\"3\n\034CMsgFSEnumerateFo"
  "llowingList\022\023\n\013start_index\030\001 \001(\r\"d\n$CMsg"
  "FSEnumerateFollowingListResponse\022\022\n\007eres"
  "ult\030\001 \001(\005:\0012\022\025\n\rtotal_results\030\002 \001(\005\022\021\n\ts"
  "team_ids\030\003 \003(\006\"0\n\037CMsgDPGetNumberOfCurre"
  "ntPlayers\022\r\n\005appid\030\001 \001(\r\"S\n\'CMsgDPGetNum"
  "berOfCurrentPlayersResponse\022\022\n\007eresult\030\001"
  " \001(\005:\0012\022\024\n\014player_count\030\002 \001(\005\"a\n#CMsgCli"
  "entFriendUserStatusPublished\022\026\n\016friend_s"
  "teamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022\023\n\013status_te"
  "xt\030\003 \001(\t\"h\n\035CMsgClientServiceMethodLegac"
  "y\022\023\n\013method_name\030\001 \001(\t\022\031\n\021serialized_met"
  "hod\030\002 \001(\014\022\027\n\017is_notification\030\003 \001(\010\"`\n%CM"
  "sgClientServiceMethodLegacyResponse\022\023\n\013m"
  "ethod_name\030\001 \001(\t\022\"\n\032serialized_method_re"
  "sponse\030\002 \001(\014\"5\n\020CMsgClientUIMode\022\016\n\006uimo"
  "de\030\001 \001(\r\022\021\n\tchat_mode\030\002 \001(\r\"<\n&CMsgClien"
  "tVanityURLChangedNotification\022\022\n\nvanity_"
  "url\030\001 \001(\t\"y\n%CMsgClientAuthorizeLocalDev"
  "iceRequest\022\032\n\022device_description\030\001 \001(\t\022\030"
  "\n\020owner_account_id\030\002 \001(\r\022\032\n\022local_device"
  "_token\030\003 \001(\004\"k\n\036CMsgClientAuthorizeLocal"
  "Device\022\022\n\007eresult\030\001 \001(\005:\0012\022\030\n\020owner_acco"
  "unt_id\030\002 \001(\r\022\033\n\023authed_device_token\030\003 \001("
  "\004\"v\n*CMsgClientAuthorizeLocalDeviceNotif"
  "ication\022\022\n\007eresult\030\001 \001(\005:\0012\022\030\n\020owner_acc"
  "ount_id\030\002 \001(\r\022\032\n\022local_device_token\030\003 \001("
  "\004\"n\n\"CMsgClientDeauthorizeDeviceRequest\022"
  "\"\n\032deauthorization_account_id\030\001 \001(\r\022$\n\034d"
  "eauthorization_device_token\030\002 \001(\004\"U\n\033CMs"
  "gClientDeauthorizeDevice\022\022\n\007eresult\030\001 \001("
  "\005:\0012\022\"\n\032deauthorization_account_id\030\002 \001(\r"
  "\"\321\001\n&CMsgClientUseLocalDeviceAuthorizati"
  "ons\022 \n\030authorization_account_id\030\001 \003(\r\022J\n"
  "\rdevice_tokens\030\002 \003(\01323.CMsgClientUseLoca"
  "lDeviceAuthorizations.DeviceToken\0329\n\013Dev"
  "iceToken\022\030\n\020owner_account_id\030\001 \001(\r\022\020\n\010to"
  "ken_id\030\002 \001(\004\" \n\036CMsgClientGetAuthorizedD"
  "evices\"\255\002\n&CMsgClientGetAuthorizedDevice"
  "sResponse\022\022\n\007eresult\030\001 \001(\005:\0012\022S\n\021authori"
  "zed_device\030\002 \003(\01328.CMsgClientGetAuthoriz"
  "edDevicesResponse.AuthorizedDevice\032\231\001\n\020A"
  "uthorizedDevice\022\031\n\021auth_device_token\030\001 \001"
  "(\004\022\023\n\013device_name\030\002 \001(\t\022\030\n\020last_access_t"
  "ime\030\003 \001(\r\022\023\n\013borrower_id\030\004 \001(\r\022\022\n\nis_pen"
  "ding\030\005 \001(\010\022\022\n\napp_played\030\006 \001(\r\"\302\001\n!CMsgC"
  "lientSharedLibraryLockStatus\022H\n\016locked_l"
  "ibrary\030\001 \003(\01320.CMsgClientSharedLibraryLo"
  "ckStatus.LockedLibrary\022\035\n\025own_library_lo"
  "cked_by\030\002 \001(\r\0324\n\rLockedLibrary\022\020\n\010owner_"
  "id\030\001 \001(\r\022\021\n\tlocked_by\030\002 \001(\r\"\247\001\n\"CMsgClie"
  "ntSharedLibraryStopPlaying\022\024\n\014seconds_le"
  "ft\030\001 \001(\005\022>\n\tstop_apps\030\002 \003(\0132+.CMsgClient"
  "SharedLibraryStopPlaying.StopApp\032+\n\007Stop"
  "App\022\016\n\006app_id\030\001 \001(\r\022\020\n\010owner_id\030\002 \001(\r\"\201\002"
  "\n\025CMsgClientServiceCall\022\025\n\rsysid_routing"
  "\030\001 \001(\014\022\023\n\013call_handle\030\002 \001(\r\022\022\n\nmodule_cr"
  "c\030\003 \001(\r\022\023\n\013module_hash\030\004 \001(\014\022\023\n\013function"
  "_id\030\005 \001(\r\022\026\n\016cub_output_max\030\006 \001(\r\022\r\n\005fla"
  "gs\030\007 \001(\r\022\025\n\rcallparameter\030\010 \001(\014\022\021\n\tping_"
  "only\030\t \001(\010\022\035\n\025max_outstanding_calls\030\n \001("
  "\r\022\016\n\006app_id\030\013 \001(\r\"Z\n\027CMsgClientServiceMo"
  "dule\022\022\n\nmodule_crc\030\001 \001(\r\022\023\n\013module_hash\030"
  "\002 \001(\014\022\026\n\016module_content\030\003 \001(\014\"\270\004\n\035CMsgCl"
  "ientServiceCallResponse\022\025\n\rsysid_routing"
  "\030\001 \001(\014\022\023\n\013call_handle\030\002 \001(\r\022\022\n\nmodule_cr"
  "c\030\003 \001(\r\022\023\n\013module_hash\030\004 \001(\014\022\023\n\013ecallres"
  "ult\030\005 \001(\r\022\026\n\016result_content\030\006 \001(\014\022\027\n\017os_"
  "version_info\030\007 \001(\014\022\023\n\013system_info\030\010 \001(\014\022"
  "\024\n\014load_address\030\t \001(\006\022\030\n\020exception_recor"
  "d\030\n \001(\014\022 \n\030portable_os_version_info\030\013 \001("
  "\014\022\034\n\024portable_system_info\030\014 \001(\014\022\025\n\rwas_c"
  "onverted\030\r \001(\010\022\027\n\017internal_result\030\016 \001(\r\022"
  "\025\n\rcurrent_count\030\017 \001(\r\022\030\n\020last_call_hand"
  "le\030\020 \001(\r\022\034\n\024last_call_module_crc\030\021 \001(\r\022\037"
  "\n\027last_call_sysid_routing\030\022 \001(\014\022\030\n\020last_"
  "ecallresult\030\023 \001(\r\022\034\n\024last_callissue_delt"
  "a\030\024 \001(\r\022\037\n\027last_callcomplete_delta\030\025 \001(\r"
  "\"C\n\020CMsgAMUnlockH264\022\r\n\005appid\030\001 \001(\r\022\020\n\010p"
  "latform\030\002 \001(\005\022\016\n\006reason\030\003 \001(\005\"F\n\030CMsgAMU"
  "nlockH264Response\022\022\n\007eresult\030\001 \001(\005:\0012\022\026\n"
  "\016encryption_key\030\002 \001(\014\"M\n\035CMsgClientPlayi"
  "ngSessionState\022\027\n\017playing_blocked\030\002 \001(\010\022"
  "\023\n\013playing_app\030\003 \001(\r\"6\n\034CMsgClientKickPl"
  "ayingSession\022\026\n\016only_stop_game\030\001 \001(\010\"v\n\037"
  "CMsgClientVoiceCallPreAuthorize\022\026\n\016calle"
  "r_steamid\030\001 \001(\006\022\030\n\020receiver_steamid\030\002 \001("
  "\006\022\021\n\tcaller_id\030\003 \001(\005\022\016\n\006hangup\030\004 \001(\010\"\202\001\n"
  "\'CMsgClientVoiceCallPreAuthorizeResponse"
  "\022\026\n\016caller_steamid\030\001 \001(\006\022\030\n\020receiver_ste"
  "amid\030\002 \001(\006\022\022\n\007eresult\030\003 \001(\005:\0012\022\021\n\tcaller"
  "_id\030\004 \001(\005\"B\n\034CMsgBadgeCraftedNotificatio"
  "n\022\r\n\005appid\030\001 \001(\r\022\023\n\013badge_level\030\002 \001(\r\"w\n"
  " CMsgClientStartPeerContentServer\022\017\n\007ste"
  "amid\030\001 \001(\006\022\030\n\020client_remote_id\030\002 \001(\006\022\016\n\006"
  "app_id\030\003 \001(\r\022\030\n\020current_build_id\030\004 \001(\r\"i"
  "\n(CMsgClientStartPeerContentServerRespon"
  "se\022\016\n\006result\030\001 \001(\r\022\023\n\013server_port\030\002 \001(\r\022"
  "\030\n\020installed_depots\030\003 \003(\r\"f\n\034CMsgClientG"
  "etPeerContentInfo\022\017\n\007steamid\030\001 \001(\006\022\030\n\020cl"
  "ient_remote_id\030\002 \001(\006\022\033\n\023owned_games_visi"
  "ble\030\003 \001(\010\"D\n$CMsgClientGetPeerContentInf"
  "oResponse\022\016\n\006result\030\001 \001(\r\022\014\n\004apps\030\002 \003(\r\""
  ">\n\032CMsgClientFeatureGroupInfo\022\017\n\007groupid"
  "\030\001 \001(\004\022\017\n\007members\030\002 \003(\rB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5f2_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5f2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5f2_2eproto = {
  false, false, 13550, descriptor_table_protodef_steammessages_5fclientserver_5f2_2eproto, "steammessages_clientserver_2.proto", 
  &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once, descriptor_table_steammessages_5fclientserver_5f2_2eproto_deps, 1, 126,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5f2_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5f2_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5f2_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5f2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientserver_5f2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5f2_2eproto(&descriptor_table_steammessages_5fclientserver_5f2_2eproto);

// ===================================================================

class CMsgClientUpdateUserGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUpdateUserGameInfo>()._has_bits_);
  static void set_has_steamid_idgs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUpdateUserGameInfo::CMsgClientUpdateUserGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUpdateUserGameInfo)
}
CMsgClientUpdateUserGameInfo::CMsgClientUpdateUserGameInfo(const CMsgClientUpdateUserGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_idgs_, &from.steamid_idgs_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_port_) -
    reinterpret_cast<char*>(&steamid_idgs_)) + sizeof(game_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUpdateUserGameInfo)
}

inline void CMsgClientUpdateUserGameInfo::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_idgs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_port_) -
    reinterpret_cast<char*>(&steamid_idgs_)) + sizeof(game_port_));
}

CMsgClientUpdateUserGameInfo::~CMsgClientUpdateUserGameInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientUpdateUserGameInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUpdateUserGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUpdateUserGameInfo::ArenaDtor(void* object) {
  CMsgClientUpdateUserGameInfo* _this = reinterpret_cast< CMsgClientUpdateUserGameInfo* >(object);
  (void)_this;
}
void CMsgClientUpdateUserGameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUpdateUserGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUpdateUserGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUpdateUserGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steamid_idgs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_port_) -
        reinterpret_cast<char*>(&steamid_idgs_)) + sizeof(game_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUpdateUserGameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_idgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_idgs(&has_bits);
          steamid_idgs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 gameid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_ip(&has_bits);
          game_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_port(&has_bits);
          game_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUpdateUserGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUpdateUserGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_idgs = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_idgs(), target);
  }

  // optional fixed64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_gameid(), target);
  }

  // optional uint32 game_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_ip(), target);
  }

  // optional uint32 game_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_port(), target);
  }

  // optional bytes token = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUpdateUserGameInfo)
  return target;
}

size_t CMsgClientUpdateUserGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUpdateUserGameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes token = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional fixed64 steamid_idgs = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_ip = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_ip());
    }

    // optional uint32 game_port = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUpdateUserGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUpdateUserGameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUpdateUserGameInfo::GetClassData() const { return &_class_data_; }

void CMsgClientUpdateUserGameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUpdateUserGameInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientUpdateUserGameInfo &>(from));
}


void CMsgClientUpdateUserGameInfo::MergeFrom(const CMsgClientUpdateUserGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUpdateUserGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_idgs_ = from.steamid_idgs_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_ip_ = from.game_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_port_ = from.game_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUpdateUserGameInfo::CopyFrom(const CMsgClientUpdateUserGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUpdateUserGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateUserGameInfo::IsInitialized() const {
  return true;
}

void CMsgClientUpdateUserGameInfo::InternalSwap(CMsgClientUpdateUserGameInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, game_port_)
      + sizeof(CMsgClientUpdateUserGameInfo::game_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUpdateUserGameInfo, steamid_idgs_)>(
          reinterpret_cast<char*>(&steamid_idgs_),
          reinterpret_cast<char*>(&other->steamid_idgs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUpdateUserGameInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[0]);
}

// ===================================================================

class CMsgClientRichPresenceUpload::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRichPresenceUpload>()._has_bits_);
  static void set_has_rich_presence_kv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRichPresenceUpload::CMsgClientRichPresenceUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamid_broadcast_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRichPresenceUpload)
}
CMsgClientRichPresenceUpload::CMsgClientRichPresenceUpload(const CMsgClientRichPresenceUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamid_broadcast_(from.steamid_broadcast_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rich_presence_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rich_presence_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rich_presence_kv()) {
    rich_presence_kv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rich_presence_kv(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientRichPresenceUpload)
}

inline void CMsgClientRichPresenceUpload::SharedCtor() {
rich_presence_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rich_presence_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientRichPresenceUpload::~CMsgClientRichPresenceUpload() {
  // @@protoc_insertion_point(destructor:CMsgClientRichPresenceUpload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRichPresenceUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rich_presence_kv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRichPresenceUpload::ArenaDtor(void* object) {
  CMsgClientRichPresenceUpload* _this = reinterpret_cast< CMsgClientRichPresenceUpload* >(object);
  (void)_this;
}
void CMsgClientRichPresenceUpload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRichPresenceUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRichPresenceUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRichPresenceUpload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_broadcast_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rich_presence_kv_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRichPresenceUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes rich_presence_kv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rich_presence_kv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steamid_broadcast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_broadcast(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_broadcast(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRichPresenceUpload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRichPresenceUpload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes rich_presence_kv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rich_presence_kv(), target);
  }

  // repeated fixed64 steamid_broadcast = 2;
  for (int i = 0, n = this->_internal_steamid_broadcast_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_broadcast(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRichPresenceUpload)
  return target;
}

size_t CMsgClientRichPresenceUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRichPresenceUpload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_broadcast = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_broadcast_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_broadcast_size());
    total_size += data_size;
  }

  // optional bytes rich_presence_kv = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rich_presence_kv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRichPresenceUpload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRichPresenceUpload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRichPresenceUpload::GetClassData() const { return &_class_data_; }

void CMsgClientRichPresenceUpload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRichPresenceUpload *>(to)->MergeFrom(
      static_cast<const CMsgClientRichPresenceUpload &>(from));
}


void CMsgClientRichPresenceUpload::MergeFrom(const CMsgClientRichPresenceUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRichPresenceUpload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_broadcast_.MergeFrom(from.steamid_broadcast_);
  if (from._internal_has_rich_presence_kv()) {
    _internal_set_rich_presence_kv(from._internal_rich_presence_kv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRichPresenceUpload::CopyFrom(const CMsgClientRichPresenceUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRichPresenceUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceUpload::IsInitialized() const {
  return true;
}

void CMsgClientRichPresenceUpload::InternalSwap(CMsgClientRichPresenceUpload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamid_broadcast_.InternalSwap(&other->steamid_broadcast_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rich_presence_kv_, lhs_arena,
      &other->rich_presence_kv_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRichPresenceUpload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[1]);
}

// ===================================================================

class CMsgClientRichPresenceRequest::_Internal {
 public:
};

CMsgClientRichPresenceRequest::CMsgClientRichPresenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamid_request_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRichPresenceRequest)
}
CMsgClientRichPresenceRequest::CMsgClientRichPresenceRequest(const CMsgClientRichPresenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steamid_request_(from.steamid_request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientRichPresenceRequest)
}

inline void CMsgClientRichPresenceRequest::SharedCtor() {
}

CMsgClientRichPresenceRequest::~CMsgClientRichPresenceRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientRichPresenceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRichPresenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRichPresenceRequest::ArenaDtor(void* object) {
  CMsgClientRichPresenceRequest* _this = reinterpret_cast< CMsgClientRichPresenceRequest* >(object);
  (void)_this;
}
void CMsgClientRichPresenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRichPresenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRichPresenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRichPresenceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_request_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRichPresenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 steamid_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_request(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamid_request(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRichPresenceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRichPresenceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steamid_request = 1;
  for (int i = 0, n = this->_internal_steamid_request_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_request(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRichPresenceRequest)
  return target;
}

size_t CMsgClientRichPresenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRichPresenceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamid_request = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamid_request_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_request_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRichPresenceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRichPresenceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRichPresenceRequest::GetClassData() const { return &_class_data_; }

void CMsgClientRichPresenceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRichPresenceRequest *>(to)->MergeFrom(
      static_cast<const CMsgClientRichPresenceRequest &>(from));
}


void CMsgClientRichPresenceRequest::MergeFrom(const CMsgClientRichPresenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRichPresenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_request_.MergeFrom(from.steamid_request_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRichPresenceRequest::CopyFrom(const CMsgClientRichPresenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRichPresenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceRequest::IsInitialized() const {
  return true;
}

void CMsgClientRichPresenceRequest::InternalSwap(CMsgClientRichPresenceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  steamid_request_.InternalSwap(&other->steamid_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRichPresenceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[2]);
}

// ===================================================================

class CMsgClientRichPresenceInfo_RichPresence::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRichPresenceInfo_RichPresence>()._has_bits_);
  static void set_has_steamid_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rich_presence_kv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRichPresenceInfo_RichPresence::CMsgClientRichPresenceInfo_RichPresence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRichPresenceInfo.RichPresence)
}
CMsgClientRichPresenceInfo_RichPresence::CMsgClientRichPresenceInfo_RichPresence(const CMsgClientRichPresenceInfo_RichPresence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rich_presence_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rich_presence_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rich_presence_kv()) {
    rich_presence_kv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rich_presence_kv(), 
      GetArenaForAllocation());
  }
  steamid_user_ = from.steamid_user_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRichPresenceInfo.RichPresence)
}

inline void CMsgClientRichPresenceInfo_RichPresence::SharedCtor() {
rich_presence_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rich_presence_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_user_ = uint64_t{0u};
}

CMsgClientRichPresenceInfo_RichPresence::~CMsgClientRichPresenceInfo_RichPresence() {
  // @@protoc_insertion_point(destructor:CMsgClientRichPresenceInfo.RichPresence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRichPresenceInfo_RichPresence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rich_presence_kv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRichPresenceInfo_RichPresence::ArenaDtor(void* object) {
  CMsgClientRichPresenceInfo_RichPresence* _this = reinterpret_cast< CMsgClientRichPresenceInfo_RichPresence* >(object);
  (void)_this;
}
void CMsgClientRichPresenceInfo_RichPresence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRichPresenceInfo_RichPresence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRichPresenceInfo_RichPresence::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRichPresenceInfo.RichPresence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rich_presence_kv_.ClearNonDefaultToEmpty();
  }
  steamid_user_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRichPresenceInfo_RichPresence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_user(&has_bits);
          steamid_user_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes rich_presence_kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rich_presence_kv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRichPresenceInfo_RichPresence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRichPresenceInfo.RichPresence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_user(), target);
  }

  // optional bytes rich_presence_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rich_presence_kv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRichPresenceInfo.RichPresence)
  return target;
}

size_t CMsgClientRichPresenceInfo_RichPresence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRichPresenceInfo.RichPresence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes rich_presence_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rich_presence_kv());
    }

    // optional fixed64 steamid_user = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRichPresenceInfo_RichPresence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRichPresenceInfo_RichPresence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRichPresenceInfo_RichPresence::GetClassData() const { return &_class_data_; }

void CMsgClientRichPresenceInfo_RichPresence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRichPresenceInfo_RichPresence *>(to)->MergeFrom(
      static_cast<const CMsgClientRichPresenceInfo_RichPresence &>(from));
}


void CMsgClientRichPresenceInfo_RichPresence::MergeFrom(const CMsgClientRichPresenceInfo_RichPresence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRichPresenceInfo.RichPresence)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rich_presence_kv(from._internal_rich_presence_kv());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_user_ = from.steamid_user_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRichPresenceInfo_RichPresence::CopyFrom(const CMsgClientRichPresenceInfo_RichPresence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRichPresenceInfo.RichPresence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceInfo_RichPresence::IsInitialized() const {
  return true;
}

void CMsgClientRichPresenceInfo_RichPresence::InternalSwap(CMsgClientRichPresenceInfo_RichPresence* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rich_presence_kv_, lhs_arena,
      &other->rich_presence_kv_, rhs_arena
  );
  swap(steamid_user_, other->steamid_user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRichPresenceInfo_RichPresence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[3]);
}

// ===================================================================

class CMsgClientRichPresenceInfo::_Internal {
 public:
};

CMsgClientRichPresenceInfo::CMsgClientRichPresenceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rich_presence_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRichPresenceInfo)
}
CMsgClientRichPresenceInfo::CMsgClientRichPresenceInfo(const CMsgClientRichPresenceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rich_presence_(from.rich_presence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientRichPresenceInfo)
}

inline void CMsgClientRichPresenceInfo::SharedCtor() {
}

CMsgClientRichPresenceInfo::~CMsgClientRichPresenceInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientRichPresenceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRichPresenceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRichPresenceInfo::ArenaDtor(void* object) {
  CMsgClientRichPresenceInfo* _this = reinterpret_cast< CMsgClientRichPresenceInfo* >(object);
  (void)_this;
}
void CMsgClientRichPresenceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRichPresenceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRichPresenceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRichPresenceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rich_presence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRichPresenceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rich_presence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRichPresenceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRichPresenceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rich_presence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rich_presence(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRichPresenceInfo)
  return target;
}

size_t CMsgClientRichPresenceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRichPresenceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
  total_size += 1UL * this->_internal_rich_presence_size();
  for (const auto& msg : this->rich_presence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRichPresenceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRichPresenceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRichPresenceInfo::GetClassData() const { return &_class_data_; }

void CMsgClientRichPresenceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRichPresenceInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientRichPresenceInfo &>(from));
}


void CMsgClientRichPresenceInfo::MergeFrom(const CMsgClientRichPresenceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRichPresenceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rich_presence_.MergeFrom(from.rich_presence_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRichPresenceInfo::CopyFrom(const CMsgClientRichPresenceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRichPresenceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceInfo::IsInitialized() const {
  return true;
}

void CMsgClientRichPresenceInfo::InternalSwap(CMsgClientRichPresenceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rich_presence_.InternalSwap(&other->rich_presence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRichPresenceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[4]);
}

// ===================================================================

class CMsgClientCheckFileSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCheckFileSignature>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientCheckFileSignature::CMsgClientCheckFileSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCheckFileSignature)
}
CMsgClientCheckFileSignature::CMsgClientCheckFileSignature(const CMsgClientCheckFileSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientCheckFileSignature)
}

inline void CMsgClientCheckFileSignature::SharedCtor() {
app_id_ = 0u;
}

CMsgClientCheckFileSignature::~CMsgClientCheckFileSignature() {
  // @@protoc_insertion_point(destructor:CMsgClientCheckFileSignature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCheckFileSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientCheckFileSignature::ArenaDtor(void* object) {
  CMsgClientCheckFileSignature* _this = reinterpret_cast< CMsgClientCheckFileSignature* >(object);
  (void)_this;
}
void CMsgClientCheckFileSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCheckFileSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCheckFileSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCheckFileSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCheckFileSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCheckFileSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCheckFileSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCheckFileSignature)
  return target;
}

size_t CMsgClientCheckFileSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCheckFileSignature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 app_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCheckFileSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCheckFileSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCheckFileSignature::GetClassData() const { return &_class_data_; }

void CMsgClientCheckFileSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCheckFileSignature *>(to)->MergeFrom(
      static_cast<const CMsgClientCheckFileSignature &>(from));
}


void CMsgClientCheckFileSignature::MergeFrom(const CMsgClientCheckFileSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCheckFileSignature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_app_id()) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCheckFileSignature::CopyFrom(const CMsgClientCheckFileSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCheckFileSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckFileSignature::IsInitialized() const {
  return true;
}

void CMsgClientCheckFileSignature::InternalSwap(CMsgClientCheckFileSignature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCheckFileSignature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[5]);
}

// ===================================================================

class CMsgClientCheckFileSignatureResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCheckFileSignatureResponse>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_esignatureresult(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signatureheader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filesize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_getlasterror(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_evalvesignaturecheckdetail(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgClientCheckFileSignatureResponse::CMsgClientCheckFileSignatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCheckFileSignatureResponse)
}
CMsgClientCheckFileSignatureResponse::CMsgClientCheckFileSignatureResponse(const CMsgClientCheckFileSignatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArenaForAllocation());
  }
  signatureheader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signatureheader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signatureheader()) {
    signatureheader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signatureheader(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&evalvesignaturecheckdetail_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(evalvesignaturecheckdetail_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientCheckFileSignatureResponse)
}

inline void CMsgClientCheckFileSignatureResponse::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signatureheader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signatureheader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&evalvesignaturecheckdetail_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(evalvesignaturecheckdetail_));
}

CMsgClientCheckFileSignatureResponse::~CMsgClientCheckFileSignatureResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientCheckFileSignatureResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCheckFileSignatureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signatureheader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientCheckFileSignatureResponse::ArenaDtor(void* object) {
  CMsgClientCheckFileSignatureResponse* _this = reinterpret_cast< CMsgClientCheckFileSignatureResponse* >(object);
  (void)_this;
}
void CMsgClientCheckFileSignatureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCheckFileSignatureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCheckFileSignatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCheckFileSignatureResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      signatureheader_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filesize_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(filesize_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&getlasterror_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&evalvesignaturecheckdetail_) -
        reinterpret_cast<char*>(&getlasterror_)) + sizeof(evalvesignaturecheckdetail_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCheckFileSignatureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eresult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientCheckFileSignatureResponse.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 esignatureresult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_esignatureresult(&has_bits);
          esignatureresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_file = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signatureheader = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_signatureheader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filesize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_filesize(&has_bits);
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 getlasterror = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_getlasterror(&has_bits);
          getlasterror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 evalvesignaturecheckdetail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_evalvesignaturecheckdetail(&has_bits);
          evalvesignaturecheckdetail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCheckFileSignatureResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCheckFileSignatureResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 eresult = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_eresult(), target);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientCheckFileSignatureResponse.filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename(), target);
  }

  // optional uint32 esignatureresult = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_esignatureresult(), target);
  }

  // optional bytes sha_file = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sha_file(), target);
  }

  // optional bytes signatureheader = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_signatureheader(), target);
  }

  // optional uint32 filesize = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_filesize(), target);
  }

  // optional uint32 getlasterror = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_getlasterror(), target);
  }

  // optional uint32 evalvesignaturecheckdetail = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_evalvesignaturecheckdetail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCheckFileSignatureResponse)
  return target;
}

size_t CMsgClientCheckFileSignatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCheckFileSignatureResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes sha_file = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional bytes signatureheader = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signatureheader());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 eresult = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

    // optional uint32 esignatureresult = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_esignatureresult());
    }

    // optional uint32 filesize = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filesize());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 getlasterror = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_getlasterror());
    }

    // optional uint32 evalvesignaturecheckdetail = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_evalvesignaturecheckdetail());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCheckFileSignatureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCheckFileSignatureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCheckFileSignatureResponse::GetClassData() const { return &_class_data_; }

void CMsgClientCheckFileSignatureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCheckFileSignatureResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientCheckFileSignatureResponse &>(from));
}


void CMsgClientCheckFileSignatureResponse::MergeFrom(const CMsgClientCheckFileSignatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCheckFileSignatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_signatureheader(from._internal_signatureheader());
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000020u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000040u) {
      esignatureresult_ = from.esignatureresult_;
    }
    if (cached_has_bits & 0x00000080u) {
      filesize_ = from.filesize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      getlasterror_ = from.getlasterror_;
    }
    if (cached_has_bits & 0x00000200u) {
      evalvesignaturecheckdetail_ = from.evalvesignaturecheckdetail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCheckFileSignatureResponse::CopyFrom(const CMsgClientCheckFileSignatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCheckFileSignatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckFileSignatureResponse::IsInitialized() const {
  return true;
}

void CMsgClientCheckFileSignatureResponse::InternalSwap(CMsgClientCheckFileSignatureResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_file_, lhs_arena,
      &other->sha_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signatureheader_, lhs_arena,
      &other->signatureheader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, evalvesignaturecheckdetail_)
      + sizeof(CMsgClientCheckFileSignatureResponse::evalvesignaturecheckdetail_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientCheckFileSignatureResponse, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCheckFileSignatureResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[6]);
}

// ===================================================================

class CMsgClientReadMachineAuth::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientReadMachineAuth>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cubtoread(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientReadMachineAuth::CMsgClientReadMachineAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientReadMachineAuth)
}
CMsgClientReadMachineAuth::CMsgClientReadMachineAuth(const CMsgClientReadMachineAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&cubtoread_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(cubtoread_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientReadMachineAuth)
}

inline void CMsgClientReadMachineAuth::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cubtoread_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(cubtoread_));
}

CMsgClientReadMachineAuth::~CMsgClientReadMachineAuth() {
  // @@protoc_insertion_point(destructor:CMsgClientReadMachineAuth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientReadMachineAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientReadMachineAuth::ArenaDtor(void* object) {
  CMsgClientReadMachineAuth* _this = reinterpret_cast< CMsgClientReadMachineAuth* >(object);
  (void)_this;
}
void CMsgClientReadMachineAuth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientReadMachineAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientReadMachineAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientReadMachineAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cubtoread_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(cubtoread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientReadMachineAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientReadMachineAuth.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cubtoread = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cubtoread(&has_bits);
          cubtoread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientReadMachineAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientReadMachineAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientReadMachineAuth.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // optional uint32 cubtoread = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cubtoread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientReadMachineAuth)
  return target;
}

size_t CMsgClientReadMachineAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientReadMachineAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional uint32 offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

    // optional uint32 cubtoread = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cubtoread());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientReadMachineAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientReadMachineAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientReadMachineAuth::GetClassData() const { return &_class_data_; }

void CMsgClientReadMachineAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientReadMachineAuth *>(to)->MergeFrom(
      static_cast<const CMsgClientReadMachineAuth &>(from));
}


void CMsgClientReadMachineAuth::MergeFrom(const CMsgClientReadMachineAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientReadMachineAuth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      cubtoread_ = from.cubtoread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientReadMachineAuth::CopyFrom(const CMsgClientReadMachineAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientReadMachineAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReadMachineAuth::IsInitialized() const {
  return true;
}

void CMsgClientReadMachineAuth::InternalSwap(CMsgClientReadMachineAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientReadMachineAuth, cubtoread_)
      + sizeof(CMsgClientReadMachineAuth::cubtoread_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientReadMachineAuth, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientReadMachineAuth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[7]);
}

// ===================================================================

class CMsgClientReadMachineAuthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientReadMachineAuthResponse>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filesize(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_getlasterror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cubread(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filename_sentry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientReadMachineAuthResponse::CMsgClientReadMachineAuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientReadMachineAuthResponse)
}
CMsgClientReadMachineAuthResponse::CMsgClientReadMachineAuthResponse(const CMsgClientReadMachineAuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArenaForAllocation());
  }
  bytes_read_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytes_read_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bytes_read()) {
    bytes_read_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes_read(), 
      GetArenaForAllocation());
  }
  filename_sentry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_sentry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename_sentry()) {
    filename_sentry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename_sentry(), 
      GetArenaForAllocation());
  }
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&cubread_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(cubread_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientReadMachineAuthResponse)
}

inline void CMsgClientReadMachineAuthResponse::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bytes_read_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytes_read_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_sentry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_sentry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eresult_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cubread_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(cubread_));
}

CMsgClientReadMachineAuthResponse::~CMsgClientReadMachineAuthResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientReadMachineAuthResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientReadMachineAuthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_read_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_sentry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientReadMachineAuthResponse::ArenaDtor(void* object) {
  CMsgClientReadMachineAuthResponse* _this = reinterpret_cast< CMsgClientReadMachineAuthResponse* >(object);
  (void)_this;
}
void CMsgClientReadMachineAuthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientReadMachineAuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientReadMachineAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientReadMachineAuthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_read_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      filename_sentry_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&eresult_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&eresult_)) + sizeof(offset_));
  }
  cubread_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientReadMachineAuthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientReadMachineAuthResponse.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filesize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_filesize(&has_bits);
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 getlasterror = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_getlasterror(&has_bits);
          getlasterror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cubread = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cubread(&has_bits);
          cubread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bytes_read = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_bytes_read();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename_sentry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_filename_sentry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientReadMachineAuthResponse.filename_sentry");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientReadMachineAuthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientReadMachineAuthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientReadMachineAuthResponse.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional uint32 filesize = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_filesize(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_file(), target);
  }

  // optional uint32 getlasterror = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_getlasterror(), target);
  }

  // optional uint32 offset = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset(), target);
  }

  // optional uint32 cubread = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cubread(), target);
  }

  // optional bytes bytes_read = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_bytes_read(), target);
  }

  // optional string filename_sentry = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename_sentry().data(), static_cast<int>(this->_internal_filename_sentry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientReadMachineAuthResponse.filename_sentry");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_filename_sentry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientReadMachineAuthResponse)
  return target;
}

size_t CMsgClientReadMachineAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientReadMachineAuthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes sha_file = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional bytes bytes_read = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_read());
    }

    // optional string filename_sentry = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename_sentry());
    }

    // optional uint32 eresult = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

    // optional uint32 filesize = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filesize());
    }

    // optional uint32 getlasterror = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_getlasterror());
    }

    // optional uint32 offset = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

  }
  // optional uint32 cubread = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cubread());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientReadMachineAuthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientReadMachineAuthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientReadMachineAuthResponse::GetClassData() const { return &_class_data_; }

void CMsgClientReadMachineAuthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientReadMachineAuthResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientReadMachineAuthResponse &>(from));
}


void CMsgClientReadMachineAuthResponse::MergeFrom(const CMsgClientReadMachineAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientReadMachineAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bytes_read(from._internal_bytes_read());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_filename_sentry(from._internal_filename_sentry());
    }
    if (cached_has_bits & 0x00000010u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000020u) {
      filesize_ = from.filesize_;
    }
    if (cached_has_bits & 0x00000040u) {
      getlasterror_ = from.getlasterror_;
    }
    if (cached_has_bits & 0x00000080u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_cubread(from._internal_cubread());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientReadMachineAuthResponse::CopyFrom(const CMsgClientReadMachineAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientReadMachineAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReadMachineAuthResponse::IsInitialized() const {
  return true;
}

void CMsgClientReadMachineAuthResponse::InternalSwap(CMsgClientReadMachineAuthResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_file_, lhs_arena,
      &other->sha_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytes_read_, lhs_arena,
      &other->bytes_read_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_sentry_, lhs_arena,
      &other->filename_sentry_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, cubread_)
      + sizeof(CMsgClientReadMachineAuthResponse::cubread_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientReadMachineAuthResponse, eresult_)>(
          reinterpret_cast<char*>(&eresult_),
          reinterpret_cast<char*>(&other->eresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientReadMachineAuthResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[8]);
}

// ===================================================================

class CMsgClientUpdateMachineAuth::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUpdateMachineAuth>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cubtowrite(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_otp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_otp_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_otp_sharedsecret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_otp_timedrift(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgClientUpdateMachineAuth::CMsgClientUpdateMachineAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUpdateMachineAuth)
}
CMsgClientUpdateMachineAuth::CMsgClientUpdateMachineAuth(const CMsgClientUpdateMachineAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bytes()) {
    bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes(), 
      GetArenaForAllocation());
  }
  otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otp_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_otp_identifier()) {
    otp_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp_identifier(), 
      GetArenaForAllocation());
  }
  otp_sharedsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otp_sharedsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_otp_sharedsecret()) {
    otp_sharedsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp_sharedsecret(), 
      GetArenaForAllocation());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&otp_timedrift_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(otp_timedrift_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUpdateMachineAuth)
}

inline void CMsgClientUpdateMachineAuth::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otp_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otp_sharedsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otp_sharedsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&otp_timedrift_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(otp_timedrift_));
}

CMsgClientUpdateMachineAuth::~CMsgClientUpdateMachineAuth() {
  // @@protoc_insertion_point(destructor:CMsgClientUpdateMachineAuth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUpdateMachineAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_sharedsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUpdateMachineAuth::ArenaDtor(void* object) {
  CMsgClientUpdateMachineAuth* _this = reinterpret_cast< CMsgClientUpdateMachineAuth* >(object);
  (void)_this;
}
void CMsgClientUpdateMachineAuth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUpdateMachineAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUpdateMachineAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUpdateMachineAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      otp_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      otp_sharedsecret_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&otp_timedrift_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(otp_timedrift_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUpdateMachineAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUpdateMachineAuth.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cubtowrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cubtowrite(&has_bits);
          cubtowrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 otp_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_otp_type(&has_bits);
          otp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string otp_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_otp_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUpdateMachineAuth.otp_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes otp_sharedsecret = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_otp_sharedsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 otp_timedrift = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_otp_timedrift(&has_bits);
          otp_timedrift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUpdateMachineAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUpdateMachineAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUpdateMachineAuth.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // optional uint32 cubtowrite = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cubtowrite(), target);
  }

  // optional bytes bytes = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bytes(), target);
  }

  // optional uint32 otp_type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_otp_type(), target);
  }

  // optional string otp_identifier = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_otp_identifier().data(), static_cast<int>(this->_internal_otp_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUpdateMachineAuth.otp_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_otp_identifier(), target);
  }

  // optional bytes otp_sharedsecret = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_otp_sharedsecret(), target);
  }

  // optional uint32 otp_timedrift = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_otp_timedrift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUpdateMachineAuth)
  return target;
}

size_t CMsgClientUpdateMachineAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUpdateMachineAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes bytes = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes());
    }

    // optional string otp_identifier = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_otp_identifier());
    }

    // optional bytes otp_sharedsecret = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_otp_sharedsecret());
    }

    // optional uint32 offset = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

    // optional uint32 cubtowrite = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cubtowrite());
    }

    // optional uint32 otp_type = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_otp_type());
    }

    // optional uint32 otp_timedrift = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_otp_timedrift());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUpdateMachineAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUpdateMachineAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUpdateMachineAuth::GetClassData() const { return &_class_data_; }

void CMsgClientUpdateMachineAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUpdateMachineAuth *>(to)->MergeFrom(
      static_cast<const CMsgClientUpdateMachineAuth &>(from));
}


void CMsgClientUpdateMachineAuth::MergeFrom(const CMsgClientUpdateMachineAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUpdateMachineAuth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes(from._internal_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_otp_identifier(from._internal_otp_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_otp_sharedsecret(from._internal_otp_sharedsecret());
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      cubtowrite_ = from.cubtowrite_;
    }
    if (cached_has_bits & 0x00000040u) {
      otp_type_ = from.otp_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      otp_timedrift_ = from.otp_timedrift_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUpdateMachineAuth::CopyFrom(const CMsgClientUpdateMachineAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUpdateMachineAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateMachineAuth::IsInitialized() const {
  return true;
}

void CMsgClientUpdateMachineAuth::InternalSwap(CMsgClientUpdateMachineAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytes_, lhs_arena,
      &other->bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &otp_identifier_, lhs_arena,
      &other->otp_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &otp_sharedsecret_, lhs_arena,
      &other->otp_sharedsecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUpdateMachineAuth, otp_timedrift_)
      + sizeof(CMsgClientUpdateMachineAuth::otp_timedrift_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUpdateMachineAuth, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUpdateMachineAuth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[9]);
}

// ===================================================================

class CMsgClientUpdateMachineAuthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUpdateMachineAuthResponse>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filesize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sha_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_getlasterror(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cubwrote(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_otp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_otp_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_otp_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientUpdateMachineAuthResponse::CMsgClientUpdateMachineAuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUpdateMachineAuthResponse)
}
CMsgClientUpdateMachineAuthResponse::CMsgClientUpdateMachineAuthResponse(const CMsgClientUpdateMachineAuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_file()) {
    sha_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_file(), 
      GetArenaForAllocation());
  }
  otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otp_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_otp_identifier()) {
    otp_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp_identifier(), 
      GetArenaForAllocation());
  }
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&otp_value_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(otp_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUpdateMachineAuthResponse)
}

inline void CMsgClientUpdateMachineAuthResponse::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otp_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eresult_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&otp_value_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(otp_value_));
}

CMsgClientUpdateMachineAuthResponse::~CMsgClientUpdateMachineAuthResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUpdateMachineAuthResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUpdateMachineAuthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientUpdateMachineAuthResponse::ArenaDtor(void* object) {
  CMsgClientUpdateMachineAuthResponse* _this = reinterpret_cast< CMsgClientUpdateMachineAuthResponse* >(object);
  (void)_this;
}
void CMsgClientUpdateMachineAuthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUpdateMachineAuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUpdateMachineAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUpdateMachineAuthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      otp_identifier_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&eresult_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cubwrote_) -
        reinterpret_cast<char*>(&eresult_)) + sizeof(cubwrote_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&otp_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&otp_value_) -
        reinterpret_cast<char*>(&otp_type_)) + sizeof(otp_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUpdateMachineAuthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUpdateMachineAuthResponse.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filesize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_filesize(&has_bits);
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 getlasterror = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_getlasterror(&has_bits);
          getlasterror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cubwrote = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cubwrote(&has_bits);
          cubwrote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 otp_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_otp_type(&has_bits);
          otp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 otp_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_otp_value(&has_bits);
          otp_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string otp_identifier = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_otp_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientUpdateMachineAuthResponse.otp_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUpdateMachineAuthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUpdateMachineAuthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUpdateMachineAuthResponse.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional uint32 filesize = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_filesize(), target);
  }

  // optional bytes sha_file = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_file(), target);
  }

  // optional uint32 getlasterror = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_getlasterror(), target);
  }

  // optional uint32 offset = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset(), target);
  }

  // optional uint32 cubwrote = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cubwrote(), target);
  }

  // optional int32 otp_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_otp_type(), target);
  }

  // optional uint32 otp_value = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_otp_value(), target);
  }

  // optional string otp_identifier = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_otp_identifier().data(), static_cast<int>(this->_internal_otp_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientUpdateMachineAuthResponse.otp_identifier");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_otp_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUpdateMachineAuthResponse)
  return target;
}

size_t CMsgClientUpdateMachineAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUpdateMachineAuthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes sha_file = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_file());
    }

    // optional string otp_identifier = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_otp_identifier());
    }

    // optional uint32 eresult = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

    // optional uint32 filesize = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filesize());
    }

    // optional uint32 getlasterror = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_getlasterror());
    }

    // optional uint32 offset = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
    }

    // optional uint32 cubwrote = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cubwrote());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 otp_type = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_otp_type());
    }

    // optional uint32 otp_value = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_otp_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUpdateMachineAuthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUpdateMachineAuthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUpdateMachineAuthResponse::GetClassData() const { return &_class_data_; }

void CMsgClientUpdateMachineAuthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUpdateMachineAuthResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientUpdateMachineAuthResponse &>(from));
}


void CMsgClientUpdateMachineAuthResponse::MergeFrom(const CMsgClientUpdateMachineAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUpdateMachineAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_file(from._internal_sha_file());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_otp_identifier(from._internal_otp_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000010u) {
      filesize_ = from.filesize_;
    }
    if (cached_has_bits & 0x00000020u) {
      getlasterror_ = from.getlasterror_;
    }
    if (cached_has_bits & 0x00000040u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      cubwrote_ = from.cubwrote_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      otp_type_ = from.otp_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      otp_value_ = from.otp_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUpdateMachineAuthResponse::CopyFrom(const CMsgClientUpdateMachineAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUpdateMachineAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateMachineAuthResponse::IsInitialized() const {
  return true;
}

void CMsgClientUpdateMachineAuthResponse::InternalSwap(CMsgClientUpdateMachineAuthResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_file_, lhs_arena,
      &other->sha_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &otp_identifier_, lhs_arena,
      &other->otp_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, otp_value_)
      + sizeof(CMsgClientUpdateMachineAuthResponse::otp_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUpdateMachineAuthResponse, eresult_)>(
          reinterpret_cast<char*>(&eresult_),
          reinterpret_cast<char*>(&other->eresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUpdateMachineAuthResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[10]);
}

// ===================================================================

class CMsgClientRequestMachineAuth::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestMachineAuth>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult_sentryfile(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_filesize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sha_sentryfile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lock_account_action(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_otp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_otp_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_otp_sharedsecret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_otp_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_machine_name_userchosen(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientRequestMachineAuth::CMsgClientRequestMachineAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestMachineAuth)
}
CMsgClientRequestMachineAuth::CMsgClientRequestMachineAuth(const CMsgClientRequestMachineAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  sha_sentryfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sha_sentryfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_sentryfile()) {
    sha_sentryfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_sentryfile(), 
      GetArenaForAllocation());
  }
  otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otp_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_otp_identifier()) {
    otp_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp_identifier(), 
      GetArenaForAllocation());
  }
  otp_sharedsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otp_sharedsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_otp_sharedsecret()) {
    otp_sharedsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp_sharedsecret(), 
      GetArenaForAllocation());
  }
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArenaForAllocation());
  }
  machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_name_userchosen_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name_userchosen()) {
    machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name_userchosen(), 
      GetArenaForAllocation());
  }
  ::memcpy(&eresult_sentryfile_, &from.eresult_sentryfile_,
    static_cast<size_t>(reinterpret_cast<char*>(&otp_value_) -
    reinterpret_cast<char*>(&eresult_sentryfile_)) + sizeof(otp_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestMachineAuth)
}

inline void CMsgClientRequestMachineAuth::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sha_sentryfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sha_sentryfile_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otp_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otp_sharedsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otp_sharedsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_name_userchosen_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eresult_sentryfile_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&otp_value_) -
    reinterpret_cast<char*>(&eresult_sentryfile_)) + sizeof(otp_value_));
}

CMsgClientRequestMachineAuth::~CMsgClientRequestMachineAuth() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestMachineAuth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestMachineAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_sentryfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_sharedsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_userchosen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestMachineAuth::ArenaDtor(void* object) {
  CMsgClientRequestMachineAuth* _this = reinterpret_cast< CMsgClientRequestMachineAuth* >(object);
  (void)_this;
}
void CMsgClientRequestMachineAuth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestMachineAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestMachineAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestMachineAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sha_sentryfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      otp_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      otp_sharedsecret_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      machine_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      machine_name_userchosen_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&eresult_sentryfile_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filesize_) -
        reinterpret_cast<char*>(&eresult_sentryfile_)) + sizeof(filesize_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&lock_account_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&otp_value_) -
        reinterpret_cast<char*>(&lock_account_action_)) + sizeof(otp_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestMachineAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestMachineAuth.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eresult_sentryfile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eresult_sentryfile(&has_bits);
          eresult_sentryfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filesize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_filesize(&has_bits);
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_sentryfile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sha_sentryfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lock_account_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_lock_account_action(&has_bits);
          lock_account_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 otp_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_otp_type(&has_bits);
          otp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string otp_identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_otp_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestMachineAuth.otp_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes otp_sharedsecret = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_otp_sharedsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 otp_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_otp_value(&has_bits);
          otp_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestMachineAuth.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name_userchosen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_machine_name_userchosen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestMachineAuth.machine_name_userchosen");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestMachineAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestMachineAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestMachineAuth.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional uint32 eresult_sentryfile = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult_sentryfile(), target);
  }

  // optional uint32 filesize = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_filesize(), target);
  }

  // optional bytes sha_sentryfile = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sha_sentryfile(), target);
  }

  // optional int32 lock_account_action = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lock_account_action(), target);
  }

  // optional uint32 otp_type = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_otp_type(), target);
  }

  // optional string otp_identifier = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_otp_identifier().data(), static_cast<int>(this->_internal_otp_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestMachineAuth.otp_identifier");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_otp_identifier(), target);
  }

  // optional bytes otp_sharedsecret = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_otp_sharedsecret(), target);
  }

  // optional uint32 otp_value = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_otp_value(), target);
  }

  // optional string machine_name = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestMachineAuth.machine_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_machine_name(), target);
  }

  // optional string machine_name_userchosen = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name_userchosen().data(), static_cast<int>(this->_internal_machine_name_userchosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestMachineAuth.machine_name_userchosen");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_machine_name_userchosen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestMachineAuth)
  return target;
}

size_t CMsgClientRequestMachineAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestMachineAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional bytes sha_sentryfile = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_sentryfile());
    }

    // optional string otp_identifier = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_otp_identifier());
    }

    // optional bytes otp_sharedsecret = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_otp_sharedsecret());
    }

    // optional string machine_name = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional string machine_name_userchosen = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name_userchosen());
    }

    // optional uint32 eresult_sentryfile = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult_sentryfile());
    }

    // optional uint32 filesize = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filesize());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 lock_account_action = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lock_account_action());
    }

    // optional uint32 otp_type = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_otp_type());
    }

    // optional uint32 otp_value = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_otp_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestMachineAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestMachineAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestMachineAuth::GetClassData() const { return &_class_data_; }

void CMsgClientRequestMachineAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestMachineAuth *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestMachineAuth &>(from));
}


void CMsgClientRequestMachineAuth::MergeFrom(const CMsgClientRequestMachineAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestMachineAuth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sha_sentryfile(from._internal_sha_sentryfile());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_otp_identifier(from._internal_otp_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_otp_sharedsecret(from._internal_otp_sharedsecret());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_machine_name_userchosen(from._internal_machine_name_userchosen());
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_sentryfile_ = from.eresult_sentryfile_;
    }
    if (cached_has_bits & 0x00000080u) {
      filesize_ = from.filesize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      lock_account_action_ = from.lock_account_action_;
    }
    if (cached_has_bits & 0x00000200u) {
      otp_type_ = from.otp_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      otp_value_ = from.otp_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestMachineAuth::CopyFrom(const CMsgClientRequestMachineAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestMachineAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestMachineAuth::IsInitialized() const {
  return true;
}

void CMsgClientRequestMachineAuth::InternalSwap(CMsgClientRequestMachineAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_sentryfile_, lhs_arena,
      &other->sha_sentryfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &otp_identifier_, lhs_arena,
      &other->otp_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &otp_sharedsecret_, lhs_arena,
      &other->otp_sharedsecret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_, lhs_arena,
      &other->machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_name_userchosen_, lhs_arena,
      &other->machine_name_userchosen_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRequestMachineAuth, otp_value_)
      + sizeof(CMsgClientRequestMachineAuth::otp_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRequestMachineAuth, eresult_sentryfile_)>(
          reinterpret_cast<char*>(&eresult_sentryfile_),
          reinterpret_cast<char*>(&other->eresult_sentryfile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestMachineAuth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[11]);
}

// ===================================================================

class CMsgClientRequestMachineAuthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestMachineAuthResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRequestMachineAuthResponse::CMsgClientRequestMachineAuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestMachineAuthResponse)
}
CMsgClientRequestMachineAuthResponse::CMsgClientRequestMachineAuthResponse(const CMsgClientRequestMachineAuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestMachineAuthResponse)
}

inline void CMsgClientRequestMachineAuthResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgClientRequestMachineAuthResponse::~CMsgClientRequestMachineAuthResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestMachineAuthResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestMachineAuthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRequestMachineAuthResponse::ArenaDtor(void* object) {
  CMsgClientRequestMachineAuthResponse* _this = reinterpret_cast< CMsgClientRequestMachineAuthResponse* >(object);
  (void)_this;
}
void CMsgClientRequestMachineAuthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestMachineAuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestMachineAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestMachineAuthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestMachineAuthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestMachineAuthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestMachineAuthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestMachineAuthResponse)
  return target;
}

size_t CMsgClientRequestMachineAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestMachineAuthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestMachineAuthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestMachineAuthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestMachineAuthResponse::GetClassData() const { return &_class_data_; }

void CMsgClientRequestMachineAuthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestMachineAuthResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestMachineAuthResponse &>(from));
}


void CMsgClientRequestMachineAuthResponse::MergeFrom(const CMsgClientRequestMachineAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestMachineAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestMachineAuthResponse::CopyFrom(const CMsgClientRequestMachineAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestMachineAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestMachineAuthResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestMachineAuthResponse::InternalSwap(CMsgClientRequestMachineAuthResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestMachineAuthResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[12]);
}

// ===================================================================

class CMsgClientRegisterKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRegisterKey>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRegisterKey::CMsgClientRegisterKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRegisterKey)
}
CMsgClientRegisterKey::CMsgClientRegisterKey(const CMsgClientRegisterKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientRegisterKey)
}

inline void CMsgClientRegisterKey::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientRegisterKey::~CMsgClientRegisterKey() {
  // @@protoc_insertion_point(destructor:CMsgClientRegisterKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRegisterKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRegisterKey::ArenaDtor(void* object) {
  CMsgClientRegisterKey* _this = reinterpret_cast< CMsgClientRegisterKey* >(object);
  (void)_this;
}
void CMsgClientRegisterKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRegisterKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRegisterKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRegisterKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRegisterKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRegisterKey.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRegisterKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRegisterKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRegisterKey.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRegisterKey)
  return target;
}

size_t CMsgClientRegisterKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRegisterKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRegisterKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRegisterKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRegisterKey::GetClassData() const { return &_class_data_; }

void CMsgClientRegisterKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRegisterKey *>(to)->MergeFrom(
      static_cast<const CMsgClientRegisterKey &>(from));
}


void CMsgClientRegisterKey::MergeFrom(const CMsgClientRegisterKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRegisterKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRegisterKey::CopyFrom(const CMsgClientRegisterKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRegisterKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterKey::IsInitialized() const {
  return true;
}

void CMsgClientRegisterKey::InternalSwap(CMsgClientRegisterKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRegisterKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[13]);
}

// ===================================================================

class CMsgClientPurchaseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPurchaseResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purchase_result_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_purchase_receipt_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPurchaseResponse::CMsgClientPurchaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPurchaseResponse)
}
CMsgClientPurchaseResponse::CMsgClientPurchaseResponse(const CMsgClientPurchaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purchase_receipt_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    purchase_receipt_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_purchase_receipt_info()) {
    purchase_receipt_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purchase_receipt_info(), 
      GetArenaForAllocation());
  }
  ::memcpy(&purchase_result_details_, &from.purchase_result_details_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&purchase_result_details_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPurchaseResponse)
}

inline void CMsgClientPurchaseResponse::SharedCtor() {
purchase_receipt_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  purchase_receipt_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
purchase_result_details_ = 0;
eresult_ = 2;
}

CMsgClientPurchaseResponse::~CMsgClientPurchaseResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientPurchaseResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPurchaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  purchase_receipt_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPurchaseResponse::ArenaDtor(void* object) {
  CMsgClientPurchaseResponse* _this = reinterpret_cast< CMsgClientPurchaseResponse* >(object);
  (void)_this;
}
void CMsgClientPurchaseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPurchaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPurchaseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    purchase_receipt_info_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    purchase_result_details_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPurchaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_result_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_purchase_result_details(&has_bits);
          purchase_result_details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes purchase_receipt_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_purchase_receipt_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPurchaseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPurchaseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 purchase_result_details = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_result_details(), target);
  }

  // optional bytes purchase_receipt_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_purchase_receipt_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPurchaseResponse)
  return target;
}

size_t CMsgClientPurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPurchaseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes purchase_receipt_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_purchase_receipt_info());
    }

    // optional int32 purchase_result_details = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_result_details());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPurchaseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPurchaseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPurchaseResponse::GetClassData() const { return &_class_data_; }

void CMsgClientPurchaseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPurchaseResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientPurchaseResponse &>(from));
}


void CMsgClientPurchaseResponse::MergeFrom(const CMsgClientPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_purchase_receipt_info(from._internal_purchase_receipt_info());
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_result_details_ = from.purchase_result_details_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPurchaseResponse::CopyFrom(const CMsgClientPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPurchaseResponse::IsInitialized() const {
  return true;
}

void CMsgClientPurchaseResponse::InternalSwap(CMsgClientPurchaseResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &purchase_receipt_info_, lhs_arena,
      &other->purchase_receipt_info_, rhs_arena
  );
  swap(purchase_result_details_, other->purchase_result_details_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPurchaseResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[14]);
}

// ===================================================================

class CMsgClientActivateOEMLicense::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientActivateOEMLicense>()._has_bits_);
  static void set_has_bios_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bios_serialnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_license_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mainboard_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mainboard_product(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mainboard_serialnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientActivateOEMLicense::CMsgClientActivateOEMLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientActivateOEMLicense)
}
CMsgClientActivateOEMLicense::CMsgClientActivateOEMLicense(const CMsgClientActivateOEMLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bios_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bios_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bios_manufacturer()) {
    bios_manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bios_manufacturer(), 
      GetArenaForAllocation());
  }
  bios_serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bios_serialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bios_serialnumber()) {
    bios_serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bios_serialnumber(), 
      GetArenaForAllocation());
  }
  license_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    license_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_license_file()) {
    license_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_license_file(), 
      GetArenaForAllocation());
  }
  mainboard_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mainboard_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mainboard_manufacturer()) {
    mainboard_manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mainboard_manufacturer(), 
      GetArenaForAllocation());
  }
  mainboard_product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mainboard_product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mainboard_product()) {
    mainboard_product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mainboard_product(), 
      GetArenaForAllocation());
  }
  mainboard_serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mainboard_serialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mainboard_serialnumber()) {
    mainboard_serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mainboard_serialnumber(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientActivateOEMLicense)
}

inline void CMsgClientActivateOEMLicense::SharedCtor() {
bios_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bios_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bios_serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bios_serialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
license_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  license_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mainboard_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mainboard_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mainboard_product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mainboard_product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mainboard_serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mainboard_serialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientActivateOEMLicense::~CMsgClientActivateOEMLicense() {
  // @@protoc_insertion_point(destructor:CMsgClientActivateOEMLicense)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientActivateOEMLicense::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bios_manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bios_serialnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  license_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mainboard_manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mainboard_product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mainboard_serialnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientActivateOEMLicense::ArenaDtor(void* object) {
  CMsgClientActivateOEMLicense* _this = reinterpret_cast< CMsgClientActivateOEMLicense* >(object);
  (void)_this;
}
void CMsgClientActivateOEMLicense::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientActivateOEMLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientActivateOEMLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientActivateOEMLicense)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      bios_manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bios_serialnumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      license_file_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      mainboard_manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      mainboard_product_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      mainboard_serialnumber_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientActivateOEMLicense::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string bios_manufacturer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bios_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientActivateOEMLicense.bios_manufacturer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bios_serialnumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bios_serialnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientActivateOEMLicense.bios_serialnumber");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes license_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_license_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mainboard_manufacturer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mainboard_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientActivateOEMLicense.mainboard_manufacturer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mainboard_product = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mainboard_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientActivateOEMLicense.mainboard_product");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mainboard_serialnumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_mainboard_serialnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientActivateOEMLicense.mainboard_serialnumber");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientActivateOEMLicense::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientActivateOEMLicense)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bios_manufacturer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bios_manufacturer().data(), static_cast<int>(this->_internal_bios_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientActivateOEMLicense.bios_manufacturer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bios_manufacturer(), target);
  }

  // optional string bios_serialnumber = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bios_serialnumber().data(), static_cast<int>(this->_internal_bios_serialnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientActivateOEMLicense.bios_serialnumber");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bios_serialnumber(), target);
  }

  // optional bytes license_file = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_license_file(), target);
  }

  // optional string mainboard_manufacturer = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mainboard_manufacturer().data(), static_cast<int>(this->_internal_mainboard_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientActivateOEMLicense.mainboard_manufacturer");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mainboard_manufacturer(), target);
  }

  // optional string mainboard_product = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mainboard_product().data(), static_cast<int>(this->_internal_mainboard_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientActivateOEMLicense.mainboard_product");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mainboard_product(), target);
  }

  // optional string mainboard_serialnumber = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mainboard_serialnumber().data(), static_cast<int>(this->_internal_mainboard_serialnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientActivateOEMLicense.mainboard_serialnumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mainboard_serialnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientActivateOEMLicense)
  return target;
}

size_t CMsgClientActivateOEMLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientActivateOEMLicense)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string bios_manufacturer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bios_manufacturer());
    }

    // optional string bios_serialnumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bios_serialnumber());
    }

    // optional bytes license_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_license_file());
    }

    // optional string mainboard_manufacturer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mainboard_manufacturer());
    }

    // optional string mainboard_product = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mainboard_product());
    }

    // optional string mainboard_serialnumber = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mainboard_serialnumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientActivateOEMLicense::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientActivateOEMLicense::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientActivateOEMLicense::GetClassData() const { return &_class_data_; }

void CMsgClientActivateOEMLicense::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientActivateOEMLicense *>(to)->MergeFrom(
      static_cast<const CMsgClientActivateOEMLicense &>(from));
}


void CMsgClientActivateOEMLicense::MergeFrom(const CMsgClientActivateOEMLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientActivateOEMLicense)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bios_manufacturer(from._internal_bios_manufacturer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bios_serialnumber(from._internal_bios_serialnumber());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_license_file(from._internal_license_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_mainboard_manufacturer(from._internal_mainboard_manufacturer());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_mainboard_product(from._internal_mainboard_product());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_mainboard_serialnumber(from._internal_mainboard_serialnumber());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientActivateOEMLicense::CopyFrom(const CMsgClientActivateOEMLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientActivateOEMLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientActivateOEMLicense::IsInitialized() const {
  return true;
}

void CMsgClientActivateOEMLicense::InternalSwap(CMsgClientActivateOEMLicense* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bios_manufacturer_, lhs_arena,
      &other->bios_manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bios_serialnumber_, lhs_arena,
      &other->bios_serialnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &license_file_, lhs_arena,
      &other->license_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mainboard_manufacturer_, lhs_arena,
      &other->mainboard_manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mainboard_product_, lhs_arena,
      &other->mainboard_product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mainboard_serialnumber_, lhs_arena,
      &other->mainboard_serialnumber_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientActivateOEMLicense::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[15]);
}

// ===================================================================

class CMsgClientRegisterOEMMachine::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRegisterOEMMachine>()._has_bits_);
  static void set_has_oem_register_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRegisterOEMMachine::CMsgClientRegisterOEMMachine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRegisterOEMMachine)
}
CMsgClientRegisterOEMMachine::CMsgClientRegisterOEMMachine(const CMsgClientRegisterOEMMachine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oem_register_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    oem_register_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oem_register_file()) {
    oem_register_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oem_register_file(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientRegisterOEMMachine)
}

inline void CMsgClientRegisterOEMMachine::SharedCtor() {
oem_register_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  oem_register_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientRegisterOEMMachine::~CMsgClientRegisterOEMMachine() {
  // @@protoc_insertion_point(destructor:CMsgClientRegisterOEMMachine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRegisterOEMMachine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  oem_register_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRegisterOEMMachine::ArenaDtor(void* object) {
  CMsgClientRegisterOEMMachine* _this = reinterpret_cast< CMsgClientRegisterOEMMachine* >(object);
  (void)_this;
}
void CMsgClientRegisterOEMMachine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRegisterOEMMachine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRegisterOEMMachine::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRegisterOEMMachine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    oem_register_file_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRegisterOEMMachine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes oem_register_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_oem_register_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRegisterOEMMachine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRegisterOEMMachine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes oem_register_file = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_oem_register_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRegisterOEMMachine)
  return target;
}

size_t CMsgClientRegisterOEMMachine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRegisterOEMMachine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes oem_register_file = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_oem_register_file());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRegisterOEMMachine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRegisterOEMMachine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRegisterOEMMachine::GetClassData() const { return &_class_data_; }

void CMsgClientRegisterOEMMachine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRegisterOEMMachine *>(to)->MergeFrom(
      static_cast<const CMsgClientRegisterOEMMachine &>(from));
}


void CMsgClientRegisterOEMMachine::MergeFrom(const CMsgClientRegisterOEMMachine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRegisterOEMMachine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oem_register_file()) {
    _internal_set_oem_register_file(from._internal_oem_register_file());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRegisterOEMMachine::CopyFrom(const CMsgClientRegisterOEMMachine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRegisterOEMMachine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterOEMMachine::IsInitialized() const {
  return true;
}

void CMsgClientRegisterOEMMachine::InternalSwap(CMsgClientRegisterOEMMachine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oem_register_file_, lhs_arena,
      &other->oem_register_file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRegisterOEMMachine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[16]);
}

// ===================================================================

class CMsgClientRegisterOEMMachineResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRegisterOEMMachineResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRegisterOEMMachineResponse::CMsgClientRegisterOEMMachineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRegisterOEMMachineResponse)
}
CMsgClientRegisterOEMMachineResponse::CMsgClientRegisterOEMMachineResponse(const CMsgClientRegisterOEMMachineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRegisterOEMMachineResponse)
}

inline void CMsgClientRegisterOEMMachineResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgClientRegisterOEMMachineResponse::~CMsgClientRegisterOEMMachineResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRegisterOEMMachineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRegisterOEMMachineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRegisterOEMMachineResponse::ArenaDtor(void* object) {
  CMsgClientRegisterOEMMachineResponse* _this = reinterpret_cast< CMsgClientRegisterOEMMachineResponse* >(object);
  (void)_this;
}
void CMsgClientRegisterOEMMachineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRegisterOEMMachineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRegisterOEMMachineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRegisterOEMMachineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRegisterOEMMachineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRegisterOEMMachineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRegisterOEMMachineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRegisterOEMMachineResponse)
  return target;
}

size_t CMsgClientRegisterOEMMachineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRegisterOEMMachineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRegisterOEMMachineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRegisterOEMMachineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRegisterOEMMachineResponse::GetClassData() const { return &_class_data_; }

void CMsgClientRegisterOEMMachineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRegisterOEMMachineResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientRegisterOEMMachineResponse &>(from));
}


void CMsgClientRegisterOEMMachineResponse::MergeFrom(const CMsgClientRegisterOEMMachineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRegisterOEMMachineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRegisterOEMMachineResponse::CopyFrom(const CMsgClientRegisterOEMMachineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRegisterOEMMachineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterOEMMachineResponse::IsInitialized() const {
  return true;
}

void CMsgClientRegisterOEMMachineResponse::InternalSwap(CMsgClientRegisterOEMMachineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRegisterOEMMachineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[17]);
}

// ===================================================================

class CMsgClientPurchaseWithMachineID::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPurchaseWithMachineID>()._has_bits_);
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_machine_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPurchaseWithMachineID::CMsgClientPurchaseWithMachineID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPurchaseWithMachineID)
}
CMsgClientPurchaseWithMachineID::CMsgClientPurchaseWithMachineID(const CMsgClientPurchaseWithMachineID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    machine_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_info()) {
    machine_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_info(), 
      GetArenaForAllocation());
  }
  package_id_ = from.package_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientPurchaseWithMachineID)
}

inline void CMsgClientPurchaseWithMachineID::SharedCtor() {
machine_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  machine_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
package_id_ = 0u;
}

CMsgClientPurchaseWithMachineID::~CMsgClientPurchaseWithMachineID() {
  // @@protoc_insertion_point(destructor:CMsgClientPurchaseWithMachineID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPurchaseWithMachineID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  machine_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientPurchaseWithMachineID::ArenaDtor(void* object) {
  CMsgClientPurchaseWithMachineID* _this = reinterpret_cast< CMsgClientPurchaseWithMachineID* >(object);
  (void)_this;
}
void CMsgClientPurchaseWithMachineID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPurchaseWithMachineID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPurchaseWithMachineID::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPurchaseWithMachineID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_info_.ClearNonDefaultToEmpty();
  }
  package_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPurchaseWithMachineID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_package_id(&has_bits);
          package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes machine_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_machine_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPurchaseWithMachineID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPurchaseWithMachineID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_package_id(), target);
  }

  // optional bytes machine_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_machine_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPurchaseWithMachineID)
  return target;
}

size_t CMsgClientPurchaseWithMachineID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPurchaseWithMachineID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes machine_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_machine_info());
    }

    // optional uint32 package_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_package_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPurchaseWithMachineID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPurchaseWithMachineID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPurchaseWithMachineID::GetClassData() const { return &_class_data_; }

void CMsgClientPurchaseWithMachineID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPurchaseWithMachineID *>(to)->MergeFrom(
      static_cast<const CMsgClientPurchaseWithMachineID &>(from));
}


void CMsgClientPurchaseWithMachineID::MergeFrom(const CMsgClientPurchaseWithMachineID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPurchaseWithMachineID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_info(from._internal_machine_info());
    }
    if (cached_has_bits & 0x00000002u) {
      package_id_ = from.package_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPurchaseWithMachineID::CopyFrom(const CMsgClientPurchaseWithMachineID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPurchaseWithMachineID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPurchaseWithMachineID::IsInitialized() const {
  return true;
}

void CMsgClientPurchaseWithMachineID::InternalSwap(CMsgClientPurchaseWithMachineID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &machine_info_, lhs_arena,
      &other->machine_info_, rhs_arena
  );
  swap(package_id_, other->package_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPurchaseWithMachineID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[18]);
}

// ===================================================================

class CMsgTrading_InitiateTradeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTrading_InitiateTradeRequest>()._has_bits_);
  static void set_has_trade_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_other_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_other_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTrading_InitiateTradeRequest::CMsgTrading_InitiateTradeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgTrading_InitiateTradeRequest)
}
CMsgTrading_InitiateTradeRequest::CMsgTrading_InitiateTradeRequest(const CMsgTrading_InitiateTradeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  other_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    other_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_other_name()) {
    other_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_other_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&other_steamid_, &from.other_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_request_id_) -
    reinterpret_cast<char*>(&other_steamid_)) + sizeof(trade_request_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgTrading_InitiateTradeRequest)
}

inline void CMsgTrading_InitiateTradeRequest::SharedCtor() {
other_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  other_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&other_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_request_id_) -
    reinterpret_cast<char*>(&other_steamid_)) + sizeof(trade_request_id_));
}

CMsgTrading_InitiateTradeRequest::~CMsgTrading_InitiateTradeRequest() {
  // @@protoc_insertion_point(destructor:CMsgTrading_InitiateTradeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgTrading_InitiateTradeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  other_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgTrading_InitiateTradeRequest::ArenaDtor(void* object) {
  CMsgTrading_InitiateTradeRequest* _this = reinterpret_cast< CMsgTrading_InitiateTradeRequest* >(object);
  (void)_this;
}
void CMsgTrading_InitiateTradeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTrading_InitiateTradeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTrading_InitiateTradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTrading_InitiateTradeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    other_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&other_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trade_request_id_) -
        reinterpret_cast<char*>(&other_steamid_)) + sizeof(trade_request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTrading_InitiateTradeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 trade_request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trade_request_id(&has_bits);
          trade_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 other_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_other_steamid(&has_bits);
          other_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string other_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_other_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgTrading_InitiateTradeRequest.other_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTrading_InitiateTradeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTrading_InitiateTradeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trade_request_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trade_request_id(), target);
  }

  // optional uint64 other_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_other_steamid(), target);
  }

  // optional string other_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_other_name().data(), static_cast<int>(this->_internal_other_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTrading_InitiateTradeRequest.other_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_other_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTrading_InitiateTradeRequest)
  return target;
}

size_t CMsgTrading_InitiateTradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTrading_InitiateTradeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string other_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_other_name());
    }

    // optional uint64 other_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_other_steamid());
    }

    // optional uint32 trade_request_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trade_request_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTrading_InitiateTradeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgTrading_InitiateTradeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTrading_InitiateTradeRequest::GetClassData() const { return &_class_data_; }

void CMsgTrading_InitiateTradeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgTrading_InitiateTradeRequest *>(to)->MergeFrom(
      static_cast<const CMsgTrading_InitiateTradeRequest &>(from));
}


void CMsgTrading_InitiateTradeRequest::MergeFrom(const CMsgTrading_InitiateTradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTrading_InitiateTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_other_name(from._internal_other_name());
    }
    if (cached_has_bits & 0x00000002u) {
      other_steamid_ = from.other_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      trade_request_id_ = from.trade_request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTrading_InitiateTradeRequest::CopyFrom(const CMsgTrading_InitiateTradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTrading_InitiateTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_InitiateTradeRequest::IsInitialized() const {
  return true;
}

void CMsgTrading_InitiateTradeRequest::InternalSwap(CMsgTrading_InitiateTradeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &other_name_, lhs_arena,
      &other->other_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTrading_InitiateTradeRequest, trade_request_id_)
      + sizeof(CMsgTrading_InitiateTradeRequest::trade_request_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgTrading_InitiateTradeRequest, other_steamid_)>(
          reinterpret_cast<char*>(&other_steamid_),
          reinterpret_cast<char*>(&other->other_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTrading_InitiateTradeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[19]);
}

// ===================================================================

class CMsgTrading_InitiateTradeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTrading_InitiateTradeResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trade_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_other_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamguard_required_days(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_device_cooldown_days(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_password_reset_probation_days(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_password_reset_probation_days(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_email_change_probation_days(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_email_change_probation_days(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgTrading_InitiateTradeResponse::CMsgTrading_InitiateTradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgTrading_InitiateTradeResponse)
}
CMsgTrading_InitiateTradeResponse::CMsgTrading_InitiateTradeResponse(const CMsgTrading_InitiateTradeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&response_, &from.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&email_change_probation_days_) -
    reinterpret_cast<char*>(&response_)) + sizeof(email_change_probation_days_));
  // @@protoc_insertion_point(copy_constructor:CMsgTrading_InitiateTradeResponse)
}

inline void CMsgTrading_InitiateTradeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&email_change_probation_days_) -
    reinterpret_cast<char*>(&response_)) + sizeof(email_change_probation_days_));
}

CMsgTrading_InitiateTradeResponse::~CMsgTrading_InitiateTradeResponse() {
  // @@protoc_insertion_point(destructor:CMsgTrading_InitiateTradeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgTrading_InitiateTradeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTrading_InitiateTradeResponse::ArenaDtor(void* object) {
  CMsgTrading_InitiateTradeResponse* _this = reinterpret_cast< CMsgTrading_InitiateTradeResponse* >(object);
  (void)_this;
}
void CMsgTrading_InitiateTradeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTrading_InitiateTradeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTrading_InitiateTradeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTrading_InitiateTradeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_email_change_probation_days_) -
        reinterpret_cast<char*>(&response_)) + sizeof(default_email_change_probation_days_));
  }
  email_change_probation_days_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTrading_InitiateTradeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trade_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trade_request_id(&has_bits);
          trade_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 other_steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_other_steamid(&has_bits);
          other_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steamguard_required_days = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_steamguard_required_days(&has_bits);
          steamguard_required_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_device_cooldown_days = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_new_device_cooldown_days(&has_bits);
          new_device_cooldown_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 default_password_reset_probation_days = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_default_password_reset_probation_days(&has_bits);
          default_password_reset_probation_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 password_reset_probation_days = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_password_reset_probation_days(&has_bits);
          password_reset_probation_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 default_email_change_probation_days = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_default_email_change_probation_days(&has_bits);
          default_email_change_probation_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_change_probation_days = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_email_change_probation_days(&has_bits);
          email_change_probation_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTrading_InitiateTradeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTrading_InitiateTradeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // optional uint32 trade_request_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trade_request_id(), target);
  }

  // optional uint64 other_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_other_steamid(), target);
  }

  // optional uint32 steamguard_required_days = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_steamguard_required_days(), target);
  }

  // optional uint32 new_device_cooldown_days = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_new_device_cooldown_days(), target);
  }

  // optional uint32 default_password_reset_probation_days = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_default_password_reset_probation_days(), target);
  }

  // optional uint32 password_reset_probation_days = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_password_reset_probation_days(), target);
  }

  // optional uint32 default_email_change_probation_days = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_default_email_change_probation_days(), target);
  }

  // optional uint32 email_change_probation_days = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_email_change_probation_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTrading_InitiateTradeResponse)
  return target;
}

size_t CMsgTrading_InitiateTradeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTrading_InitiateTradeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_response());
    }

    // optional uint32 trade_request_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trade_request_id());
    }

    // optional uint64 other_steamid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_other_steamid());
    }

    // optional uint32 steamguard_required_days = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steamguard_required_days());
    }

    // optional uint32 new_device_cooldown_days = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_device_cooldown_days());
    }

    // optional uint32 default_password_reset_probation_days = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_default_password_reset_probation_days());
    }

    // optional uint32 password_reset_probation_days = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_password_reset_probation_days());
    }

    // optional uint32 default_email_change_probation_days = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_default_email_change_probation_days());
    }

  }
  // optional uint32 email_change_probation_days = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_email_change_probation_days());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTrading_InitiateTradeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgTrading_InitiateTradeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTrading_InitiateTradeResponse::GetClassData() const { return &_class_data_; }

void CMsgTrading_InitiateTradeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgTrading_InitiateTradeResponse *>(to)->MergeFrom(
      static_cast<const CMsgTrading_InitiateTradeResponse &>(from));
}


void CMsgTrading_InitiateTradeResponse::MergeFrom(const CMsgTrading_InitiateTradeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTrading_InitiateTradeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      trade_request_id_ = from.trade_request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      other_steamid_ = from.other_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      steamguard_required_days_ = from.steamguard_required_days_;
    }
    if (cached_has_bits & 0x00000010u) {
      new_device_cooldown_days_ = from.new_device_cooldown_days_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_password_reset_probation_days_ = from.default_password_reset_probation_days_;
    }
    if (cached_has_bits & 0x00000040u) {
      password_reset_probation_days_ = from.password_reset_probation_days_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_email_change_probation_days_ = from.default_email_change_probation_days_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_email_change_probation_days(from._internal_email_change_probation_days());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTrading_InitiateTradeResponse::CopyFrom(const CMsgTrading_InitiateTradeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTrading_InitiateTradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_InitiateTradeResponse::IsInitialized() const {
  return true;
}

void CMsgTrading_InitiateTradeResponse::InternalSwap(CMsgTrading_InitiateTradeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, email_change_probation_days_)
      + sizeof(CMsgTrading_InitiateTradeResponse::email_change_probation_days_)
      - PROTOBUF_FIELD_OFFSET(CMsgTrading_InitiateTradeResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTrading_InitiateTradeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[20]);
}

// ===================================================================

class CMsgTrading_CancelTradeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTrading_CancelTradeRequest>()._has_bits_);
  static void set_has_other_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTrading_CancelTradeRequest::CMsgTrading_CancelTradeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgTrading_CancelTradeRequest)
}
CMsgTrading_CancelTradeRequest::CMsgTrading_CancelTradeRequest(const CMsgTrading_CancelTradeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  other_steamid_ = from.other_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgTrading_CancelTradeRequest)
}

inline void CMsgTrading_CancelTradeRequest::SharedCtor() {
other_steamid_ = uint64_t{0u};
}

CMsgTrading_CancelTradeRequest::~CMsgTrading_CancelTradeRequest() {
  // @@protoc_insertion_point(destructor:CMsgTrading_CancelTradeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgTrading_CancelTradeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTrading_CancelTradeRequest::ArenaDtor(void* object) {
  CMsgTrading_CancelTradeRequest* _this = reinterpret_cast< CMsgTrading_CancelTradeRequest* >(object);
  (void)_this;
}
void CMsgTrading_CancelTradeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTrading_CancelTradeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTrading_CancelTradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTrading_CancelTradeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTrading_CancelTradeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 other_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_other_steamid(&has_bits);
          other_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTrading_CancelTradeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTrading_CancelTradeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 other_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_other_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTrading_CancelTradeRequest)
  return target;
}

size_t CMsgTrading_CancelTradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTrading_CancelTradeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 other_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_other_steamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTrading_CancelTradeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgTrading_CancelTradeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTrading_CancelTradeRequest::GetClassData() const { return &_class_data_; }

void CMsgTrading_CancelTradeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgTrading_CancelTradeRequest *>(to)->MergeFrom(
      static_cast<const CMsgTrading_CancelTradeRequest &>(from));
}


void CMsgTrading_CancelTradeRequest::MergeFrom(const CMsgTrading_CancelTradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTrading_CancelTradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_other_steamid()) {
    _internal_set_other_steamid(from._internal_other_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTrading_CancelTradeRequest::CopyFrom(const CMsgTrading_CancelTradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTrading_CancelTradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_CancelTradeRequest::IsInitialized() const {
  return true;
}

void CMsgTrading_CancelTradeRequest::InternalSwap(CMsgTrading_CancelTradeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(other_steamid_, other->other_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTrading_CancelTradeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[21]);
}

// ===================================================================

class CMsgTrading_StartSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTrading_StartSession>()._has_bits_);
  static void set_has_other_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTrading_StartSession::CMsgTrading_StartSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgTrading_StartSession)
}
CMsgTrading_StartSession::CMsgTrading_StartSession(const CMsgTrading_StartSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  other_steamid_ = from.other_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgTrading_StartSession)
}

inline void CMsgTrading_StartSession::SharedCtor() {
other_steamid_ = uint64_t{0u};
}

CMsgTrading_StartSession::~CMsgTrading_StartSession() {
  // @@protoc_insertion_point(destructor:CMsgTrading_StartSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgTrading_StartSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTrading_StartSession::ArenaDtor(void* object) {
  CMsgTrading_StartSession* _this = reinterpret_cast< CMsgTrading_StartSession* >(object);
  (void)_this;
}
void CMsgTrading_StartSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgTrading_StartSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgTrading_StartSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTrading_StartSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTrading_StartSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 other_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_other_steamid(&has_bits);
          other_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTrading_StartSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTrading_StartSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 other_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_other_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTrading_StartSession)
  return target;
}

size_t CMsgTrading_StartSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTrading_StartSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 other_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_other_steamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTrading_StartSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgTrading_StartSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTrading_StartSession::GetClassData() const { return &_class_data_; }

void CMsgTrading_StartSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgTrading_StartSession *>(to)->MergeFrom(
      static_cast<const CMsgTrading_StartSession &>(from));
}


void CMsgTrading_StartSession::MergeFrom(const CMsgTrading_StartSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgTrading_StartSession)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_other_steamid()) {
    _internal_set_other_steamid(from._internal_other_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTrading_StartSession::CopyFrom(const CMsgTrading_StartSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTrading_StartSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_StartSession::IsInitialized() const {
  return true;
}

void CMsgTrading_StartSession::InternalSwap(CMsgTrading_StartSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(other_steamid_, other->other_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTrading_StartSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[22]);
}

// ===================================================================

class CMsgClientGetCDNAuthToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetCDNAuthToken>()._has_bits_);
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientGetCDNAuthToken::CMsgClientGetCDNAuthToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetCDNAuthToken)
}
CMsgClientGetCDNAuthToken::CMsgClientGetCDNAuthToken(const CMsgClientGetCDNAuthToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_name()) {
    host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&depot_id_, &from.depot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&depot_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetCDNAuthToken)
}

inline void CMsgClientGetCDNAuthToken::SharedCtor() {
host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&depot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&depot_id_)) + sizeof(app_id_));
}

CMsgClientGetCDNAuthToken::~CMsgClientGetCDNAuthToken() {
  // @@protoc_insertion_point(destructor:CMsgClientGetCDNAuthToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetCDNAuthToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetCDNAuthToken::ArenaDtor(void* object) {
  CMsgClientGetCDNAuthToken* _this = reinterpret_cast< CMsgClientGetCDNAuthToken* >(object);
  (void)_this;
}
void CMsgClientGetCDNAuthToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetCDNAuthToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetCDNAuthToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetCDNAuthToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&depot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&depot_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetCDNAuthToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string host_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetCDNAuthToken.host_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetCDNAuthToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetCDNAuthToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depot_id(), target);
  }

  // optional string host_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetCDNAuthToken.host_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_name(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetCDNAuthToken)
  return target;
}

size_t CMsgClientGetCDNAuthToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetCDNAuthToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string host_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_name());
    }

    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetCDNAuthToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetCDNAuthToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetCDNAuthToken::GetClassData() const { return &_class_data_; }

void CMsgClientGetCDNAuthToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetCDNAuthToken *>(to)->MergeFrom(
      static_cast<const CMsgClientGetCDNAuthToken &>(from));
}


void CMsgClientGetCDNAuthToken::MergeFrom(const CMsgClientGetCDNAuthToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetCDNAuthToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host_name(from._internal_host_name());
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetCDNAuthToken::CopyFrom(const CMsgClientGetCDNAuthToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetCDNAuthToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetCDNAuthToken::IsInitialized() const {
  return true;
}

void CMsgClientGetCDNAuthToken::InternalSwap(CMsgClientGetCDNAuthToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_name_, lhs_arena,
      &other->host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetCDNAuthToken, app_id_)
      + sizeof(CMsgClientGetCDNAuthToken::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetCDNAuthToken, depot_id_)>(
          reinterpret_cast<char*>(&depot_id_),
          reinterpret_cast<char*>(&other->depot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetCDNAuthToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[23]);
}

// ===================================================================

class CMsgClientGetDepotDecryptionKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetDepotDecryptionKey>()._has_bits_);
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientGetDepotDecryptionKey::CMsgClientGetDepotDecryptionKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetDepotDecryptionKey)
}
CMsgClientGetDepotDecryptionKey::CMsgClientGetDepotDecryptionKey(const CMsgClientGetDepotDecryptionKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&depot_id_, &from.depot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&depot_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetDepotDecryptionKey)
}

inline void CMsgClientGetDepotDecryptionKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&depot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&depot_id_)) + sizeof(app_id_));
}

CMsgClientGetDepotDecryptionKey::~CMsgClientGetDepotDecryptionKey() {
  // @@protoc_insertion_point(destructor:CMsgClientGetDepotDecryptionKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetDepotDecryptionKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetDepotDecryptionKey::ArenaDtor(void* object) {
  CMsgClientGetDepotDecryptionKey* _this = reinterpret_cast< CMsgClientGetDepotDecryptionKey* >(object);
  (void)_this;
}
void CMsgClientGetDepotDecryptionKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetDepotDecryptionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetDepotDecryptionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetDepotDecryptionKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&depot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&depot_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetDepotDecryptionKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 depot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetDepotDecryptionKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetDepotDecryptionKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depot_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetDepotDecryptionKey)
  return target;
}

size_t CMsgClientGetDepotDecryptionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetDepotDecryptionKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 depot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetDepotDecryptionKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetDepotDecryptionKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetDepotDecryptionKey::GetClassData() const { return &_class_data_; }

void CMsgClientGetDepotDecryptionKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetDepotDecryptionKey *>(to)->MergeFrom(
      static_cast<const CMsgClientGetDepotDecryptionKey &>(from));
}


void CMsgClientGetDepotDecryptionKey::MergeFrom(const CMsgClientGetDepotDecryptionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetDepotDecryptionKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetDepotDecryptionKey::CopyFrom(const CMsgClientGetDepotDecryptionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetDepotDecryptionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetDepotDecryptionKey::IsInitialized() const {
  return true;
}

void CMsgClientGetDepotDecryptionKey::InternalSwap(CMsgClientGetDepotDecryptionKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetDepotDecryptionKey, app_id_)
      + sizeof(CMsgClientGetDepotDecryptionKey::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetDepotDecryptionKey, depot_id_)>(
          reinterpret_cast<char*>(&depot_id_),
          reinterpret_cast<char*>(&other->depot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetDepotDecryptionKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[24]);
}

// ===================================================================

class CMsgClientGetDepotDecryptionKeyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetDepotDecryptionKeyResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_depot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depot_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetDepotDecryptionKeyResponse::CMsgClientGetDepotDecryptionKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetDepotDecryptionKeyResponse)
}
CMsgClientGetDepotDecryptionKeyResponse::CMsgClientGetDepotDecryptionKeyResponse(const CMsgClientGetDepotDecryptionKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  depot_encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    depot_encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_depot_encryption_key()) {
    depot_encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_depot_encryption_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&depot_id_, &from.depot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&depot_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetDepotDecryptionKeyResponse)
}

inline void CMsgClientGetDepotDecryptionKeyResponse::SharedCtor() {
depot_encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  depot_encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
depot_id_ = 0u;
eresult_ = 2;
}

CMsgClientGetDepotDecryptionKeyResponse::~CMsgClientGetDepotDecryptionKeyResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetDepotDecryptionKeyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetDepotDecryptionKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  depot_encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetDepotDecryptionKeyResponse::ArenaDtor(void* object) {
  CMsgClientGetDepotDecryptionKeyResponse* _this = reinterpret_cast< CMsgClientGetDepotDecryptionKeyResponse* >(object);
  (void)_this;
}
void CMsgClientGetDepotDecryptionKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetDepotDecryptionKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetDepotDecryptionKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetDepotDecryptionKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    depot_encryption_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    depot_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetDepotDecryptionKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 depot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_depot_id(&has_bits);
          depot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes depot_encryption_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_depot_encryption_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetDepotDecryptionKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetDepotDecryptionKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depot_id(), target);
  }

  // optional bytes depot_encryption_key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_depot_encryption_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetDepotDecryptionKeyResponse)
  return target;
}

size_t CMsgClientGetDepotDecryptionKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetDepotDecryptionKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes depot_encryption_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_depot_encryption_key());
    }

    // optional uint32 depot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depot_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetDepotDecryptionKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetDepotDecryptionKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetDepotDecryptionKeyResponse::GetClassData() const { return &_class_data_; }

void CMsgClientGetDepotDecryptionKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetDepotDecryptionKeyResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientGetDepotDecryptionKeyResponse &>(from));
}


void CMsgClientGetDepotDecryptionKeyResponse::MergeFrom(const CMsgClientGetDepotDecryptionKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetDepotDecryptionKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_depot_encryption_key(from._internal_depot_encryption_key());
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetDepotDecryptionKeyResponse::CopyFrom(const CMsgClientGetDepotDecryptionKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetDepotDecryptionKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetDepotDecryptionKeyResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetDepotDecryptionKeyResponse::InternalSwap(CMsgClientGetDepotDecryptionKeyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &depot_encryption_key_, lhs_arena,
      &other->depot_encryption_key_, rhs_arena
  );
  swap(depot_id_, other->depot_id_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetDepotDecryptionKeyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[25]);
}

// ===================================================================

class CMsgClientCheckAppBetaPassword::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCheckAppBetaPassword>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_betapassword(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientCheckAppBetaPassword::CMsgClientCheckAppBetaPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCheckAppBetaPassword)
}
CMsgClientCheckAppBetaPassword::CMsgClientCheckAppBetaPassword(const CMsgClientCheckAppBetaPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  betapassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    betapassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_betapassword()) {
    betapassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_betapassword(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientCheckAppBetaPassword)
}

inline void CMsgClientCheckAppBetaPassword::SharedCtor() {
betapassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  betapassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(language_));
}

CMsgClientCheckAppBetaPassword::~CMsgClientCheckAppBetaPassword() {
  // @@protoc_insertion_point(destructor:CMsgClientCheckAppBetaPassword)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCheckAppBetaPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  betapassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientCheckAppBetaPassword::ArenaDtor(void* object) {
  CMsgClientCheckAppBetaPassword* _this = reinterpret_cast< CMsgClientCheckAppBetaPassword* >(object);
  (void)_this;
}
void CMsgClientCheckAppBetaPassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCheckAppBetaPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCheckAppBetaPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCheckAppBetaPassword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    betapassword_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCheckAppBetaPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string betapassword = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_betapassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientCheckAppBetaPassword.betapassword");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCheckAppBetaPassword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCheckAppBetaPassword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string betapassword = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_betapassword().data(), static_cast<int>(this->_internal_betapassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientCheckAppBetaPassword.betapassword");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_betapassword(), target);
  }

  // optional int32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCheckAppBetaPassword)
  return target;
}

size_t CMsgClientCheckAppBetaPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCheckAppBetaPassword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string betapassword = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_betapassword());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional int32 language = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCheckAppBetaPassword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCheckAppBetaPassword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCheckAppBetaPassword::GetClassData() const { return &_class_data_; }

void CMsgClientCheckAppBetaPassword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCheckAppBetaPassword *>(to)->MergeFrom(
      static_cast<const CMsgClientCheckAppBetaPassword &>(from));
}


void CMsgClientCheckAppBetaPassword::MergeFrom(const CMsgClientCheckAppBetaPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCheckAppBetaPassword)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_betapassword(from._internal_betapassword());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCheckAppBetaPassword::CopyFrom(const CMsgClientCheckAppBetaPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCheckAppBetaPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckAppBetaPassword::IsInitialized() const {
  return true;
}

void CMsgClientCheckAppBetaPassword::InternalSwap(CMsgClientCheckAppBetaPassword* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &betapassword_, lhs_arena,
      &other->betapassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientCheckAppBetaPassword, language_)
      + sizeof(CMsgClientCheckAppBetaPassword::language_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientCheckAppBetaPassword, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCheckAppBetaPassword::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[26]);
}

// ===================================================================

class CMsgClientCheckAppBetaPasswordResponse_BetaPassword::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCheckAppBetaPasswordResponse_BetaPassword>()._has_bits_);
  static void set_has_betaname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_betapassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_betadescription(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CMsgClientCheckAppBetaPasswordResponse_BetaPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
}
CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CMsgClientCheckAppBetaPasswordResponse_BetaPassword(const CMsgClientCheckAppBetaPasswordResponse_BetaPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  betaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    betaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_betaname()) {
    betaname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_betaname(), 
      GetArenaForAllocation());
  }
  betapassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    betapassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_betapassword()) {
    betapassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_betapassword(), 
      GetArenaForAllocation());
  }
  betadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    betadescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_betadescription()) {
    betadescription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_betadescription(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
}

inline void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SharedCtor() {
betaname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  betaname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
betapassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  betapassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
betadescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  betadescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientCheckAppBetaPasswordResponse_BetaPassword::~CMsgClientCheckAppBetaPasswordResponse_BetaPassword() {
  // @@protoc_insertion_point(destructor:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  betaname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  betapassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  betadescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::ArenaDtor(void* object) {
  CMsgClientCheckAppBetaPasswordResponse_BetaPassword* _this = reinterpret_cast< CMsgClientCheckAppBetaPasswordResponse_BetaPassword* >(object);
  (void)_this;
}
void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      betaname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      betapassword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      betadescription_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCheckAppBetaPasswordResponse_BetaPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string betaname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_betaname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientCheckAppBetaPasswordResponse.BetaPassword.betaname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string betapassword = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_betapassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientCheckAppBetaPasswordResponse.BetaPassword.betapassword");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string betadescription = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_betadescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientCheckAppBetaPasswordResponse.BetaPassword.betadescription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCheckAppBetaPasswordResponse_BetaPassword::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string betaname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_betaname().data(), static_cast<int>(this->_internal_betaname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientCheckAppBetaPasswordResponse.BetaPassword.betaname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_betaname(), target);
  }

  // optional string betapassword = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_betapassword().data(), static_cast<int>(this->_internal_betapassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientCheckAppBetaPasswordResponse.BetaPassword.betapassword");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_betapassword(), target);
  }

  // optional string betadescription = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_betadescription().data(), static_cast<int>(this->_internal_betadescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientCheckAppBetaPasswordResponse.BetaPassword.betadescription");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_betadescription(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
  return target;
}

size_t CMsgClientCheckAppBetaPasswordResponse_BetaPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string betaname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_betaname());
    }

    // optional string betapassword = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_betapassword());
    }

    // optional string betadescription = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_betadescription());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCheckAppBetaPasswordResponse_BetaPassword::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCheckAppBetaPasswordResponse_BetaPassword::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCheckAppBetaPasswordResponse_BetaPassword::GetClassData() const { return &_class_data_; }

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCheckAppBetaPasswordResponse_BetaPassword *>(to)->MergeFrom(
      static_cast<const CMsgClientCheckAppBetaPasswordResponse_BetaPassword &>(from));
}


void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::MergeFrom(const CMsgClientCheckAppBetaPasswordResponse_BetaPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_betaname(from._internal_betaname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_betapassword(from._internal_betapassword());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_betadescription(from._internal_betadescription());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::CopyFrom(const CMsgClientCheckAppBetaPasswordResponse_BetaPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCheckAppBetaPasswordResponse.BetaPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckAppBetaPasswordResponse_BetaPassword::IsInitialized() const {
  return true;
}

void CMsgClientCheckAppBetaPasswordResponse_BetaPassword::InternalSwap(CMsgClientCheckAppBetaPasswordResponse_BetaPassword* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &betaname_, lhs_arena,
      &other->betaname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &betapassword_, lhs_arena,
      &other->betapassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &betadescription_, lhs_arena,
      &other->betadescription_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCheckAppBetaPasswordResponse_BetaPassword::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[27]);
}

// ===================================================================

class CMsgClientCheckAppBetaPasswordResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCheckAppBetaPasswordResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientCheckAppBetaPasswordResponse::CMsgClientCheckAppBetaPasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  betapasswords_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCheckAppBetaPasswordResponse)
}
CMsgClientCheckAppBetaPasswordResponse::CMsgClientCheckAppBetaPasswordResponse(const CMsgClientCheckAppBetaPasswordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      betapasswords_(from.betapasswords_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientCheckAppBetaPasswordResponse)
}

inline void CMsgClientCheckAppBetaPasswordResponse::SharedCtor() {
eresult_ = 2;
}

CMsgClientCheckAppBetaPasswordResponse::~CMsgClientCheckAppBetaPasswordResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientCheckAppBetaPasswordResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCheckAppBetaPasswordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientCheckAppBetaPasswordResponse::ArenaDtor(void* object) {
  CMsgClientCheckAppBetaPasswordResponse* _this = reinterpret_cast< CMsgClientCheckAppBetaPasswordResponse* >(object);
  (void)_this;
}
void CMsgClientCheckAppBetaPasswordResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCheckAppBetaPasswordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCheckAppBetaPasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCheckAppBetaPasswordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  betapasswords_.Clear();
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCheckAppBetaPasswordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientCheckAppBetaPasswordResponse.BetaPassword betapasswords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_betapasswords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCheckAppBetaPasswordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCheckAppBetaPasswordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // repeated .CMsgClientCheckAppBetaPasswordResponse.BetaPassword betapasswords = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_betapasswords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_betapasswords(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCheckAppBetaPasswordResponse)
  return target;
}

size_t CMsgClientCheckAppBetaPasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCheckAppBetaPasswordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientCheckAppBetaPasswordResponse.BetaPassword betapasswords = 4;
  total_size += 1UL * this->_internal_betapasswords_size();
  for (const auto& msg : this->betapasswords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCheckAppBetaPasswordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCheckAppBetaPasswordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCheckAppBetaPasswordResponse::GetClassData() const { return &_class_data_; }

void CMsgClientCheckAppBetaPasswordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCheckAppBetaPasswordResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientCheckAppBetaPasswordResponse &>(from));
}


void CMsgClientCheckAppBetaPasswordResponse::MergeFrom(const CMsgClientCheckAppBetaPasswordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCheckAppBetaPasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  betapasswords_.MergeFrom(from.betapasswords_);
  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCheckAppBetaPasswordResponse::CopyFrom(const CMsgClientCheckAppBetaPasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCheckAppBetaPasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckAppBetaPasswordResponse::IsInitialized() const {
  return true;
}

void CMsgClientCheckAppBetaPasswordResponse::InternalSwap(CMsgClientCheckAppBetaPasswordResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  betapasswords_.InternalSwap(&other->betapasswords_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCheckAppBetaPasswordResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[28]);
}

// ===================================================================

class CMsgClientGetCDNAuthTokenResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetCDNAuthTokenResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientGetCDNAuthTokenResponse::CMsgClientGetCDNAuthTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetCDNAuthTokenResponse)
}
CMsgClientGetCDNAuthTokenResponse::CMsgClientGetCDNAuthTokenResponse(const CMsgClientGetCDNAuthTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&expiration_time_, &from.expiration_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&expiration_time_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetCDNAuthTokenResponse)
}

inline void CMsgClientGetCDNAuthTokenResponse::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
expiration_time_ = 0u;
eresult_ = 2u;
}

CMsgClientGetCDNAuthTokenResponse::~CMsgClientGetCDNAuthTokenResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetCDNAuthTokenResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetCDNAuthTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetCDNAuthTokenResponse::ArenaDtor(void* object) {
  CMsgClientGetCDNAuthTokenResponse* _this = reinterpret_cast< CMsgClientGetCDNAuthTokenResponse* >(object);
  (void)_this;
}
void CMsgClientGetCDNAuthTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetCDNAuthTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetCDNAuthTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetCDNAuthTokenResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    expiration_time_ = 0u;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetCDNAuthTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetCDNAuthTokenResponse.token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetCDNAuthTokenResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetCDNAuthTokenResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetCDNAuthTokenResponse.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // optional uint32 expiration_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetCDNAuthTokenResponse)
  return target;
}

size_t CMsgClientGetCDNAuthTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetCDNAuthTokenResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional uint32 expiration_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_expiration_time());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetCDNAuthTokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetCDNAuthTokenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetCDNAuthTokenResponse::GetClassData() const { return &_class_data_; }

void CMsgClientGetCDNAuthTokenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetCDNAuthTokenResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientGetCDNAuthTokenResponse &>(from));
}


void CMsgClientGetCDNAuthTokenResponse::MergeFrom(const CMsgClientGetCDNAuthTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetCDNAuthTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_time_ = from.expiration_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetCDNAuthTokenResponse::CopyFrom(const CMsgClientGetCDNAuthTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetCDNAuthTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetCDNAuthTokenResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetCDNAuthTokenResponse::InternalSwap(CMsgClientGetCDNAuthTokenResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  swap(expiration_time_, other->expiration_time_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetCDNAuthTokenResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[29]);
}

// ===================================================================

class CMsgDownloadRateStatistics_StatsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDownloadRateStatistics_StatsInfo>()._has_bits_);
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_microseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_used_ipv6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_proxied(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDownloadRateStatistics_StatsInfo::CMsgDownloadRateStatistics_StatsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDownloadRateStatistics.StatsInfo)
}
CMsgDownloadRateStatistics_StatsInfo::CMsgDownloadRateStatistics_StatsInfo(const CMsgDownloadRateStatistics_StatsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_name()) {
    host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&source_type_, &from.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxied_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(proxied_));
  // @@protoc_insertion_point(copy_constructor:CMsgDownloadRateStatistics.StatsInfo)
}

inline void CMsgDownloadRateStatistics_StatsInfo::SharedCtor() {
host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proxied_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(proxied_));
}

CMsgDownloadRateStatistics_StatsInfo::~CMsgDownloadRateStatistics_StatsInfo() {
  // @@protoc_insertion_point(destructor:CMsgDownloadRateStatistics.StatsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDownloadRateStatistics_StatsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDownloadRateStatistics_StatsInfo::ArenaDtor(void* object) {
  CMsgDownloadRateStatistics_StatsInfo* _this = reinterpret_cast< CMsgDownloadRateStatistics_StatsInfo* >(object);
  (void)_this;
}
void CMsgDownloadRateStatistics_StatsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDownloadRateStatistics_StatsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDownloadRateStatistics_StatsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDownloadRateStatistics.StatsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&source_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proxied_) -
        reinterpret_cast<char*>(&source_type_)) + sizeof(proxied_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDownloadRateStatistics_StatsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_type(&has_bits);
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bytes(&has_bits);
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string host_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDownloadRateStatistics.StatsInfo.host_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microseconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_microseconds(&has_bits);
          microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool used_ipv6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_used_ipv6(&has_bits);
          used_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool proxied = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_proxied(&has_bits);
          proxied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDownloadRateStatistics_StatsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDownloadRateStatistics.StatsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_type(), target);
  }

  // optional uint32 source_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_id(), target);
  }

  // optional uint32 seconds = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds(), target);
  }

  // optional uint64 bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bytes(), target);
  }

  // optional string host_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDownloadRateStatistics.StatsInfo.host_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_host_name(), target);
  }

  // optional uint64 microseconds = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_microseconds(), target);
  }

  // optional bool used_ipv6 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_used_ipv6(), target);
  }

  // optional bool proxied = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_proxied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDownloadRateStatistics.StatsInfo)
  return target;
}

size_t CMsgDownloadRateStatistics_StatsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDownloadRateStatistics.StatsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_name());
    }

    // optional uint32 source_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_type());
    }

    // optional uint32 source_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_id());
    }

    // optional uint64 bytes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes());
    }

    // optional uint64 microseconds = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microseconds());
    }

    // optional uint32 seconds = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds());
    }

    // optional bool used_ipv6 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool proxied = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDownloadRateStatistics_StatsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDownloadRateStatistics_StatsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDownloadRateStatistics_StatsInfo::GetClassData() const { return &_class_data_; }

void CMsgDownloadRateStatistics_StatsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDownloadRateStatistics_StatsInfo *>(to)->MergeFrom(
      static_cast<const CMsgDownloadRateStatistics_StatsInfo &>(from));
}


void CMsgDownloadRateStatistics_StatsInfo::MergeFrom(const CMsgDownloadRateStatistics_StatsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDownloadRateStatistics.StatsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host_name(from._internal_host_name());
    }
    if (cached_has_bits & 0x00000002u) {
      source_type_ = from.source_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      bytes_ = from.bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      microseconds_ = from.microseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000040u) {
      used_ipv6_ = from.used_ipv6_;
    }
    if (cached_has_bits & 0x00000080u) {
      proxied_ = from.proxied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDownloadRateStatistics_StatsInfo::CopyFrom(const CMsgDownloadRateStatistics_StatsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDownloadRateStatistics.StatsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDownloadRateStatistics_StatsInfo::IsInitialized() const {
  return true;
}

void CMsgDownloadRateStatistics_StatsInfo::InternalSwap(CMsgDownloadRateStatistics_StatsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_name_, lhs_arena,
      &other->host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, proxied_)
      + sizeof(CMsgDownloadRateStatistics_StatsInfo::proxied_)
      - PROTOBUF_FIELD_OFFSET(CMsgDownloadRateStatistics_StatsInfo, source_type_)>(
          reinterpret_cast<char*>(&source_type_),
          reinterpret_cast<char*>(&other->source_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDownloadRateStatistics_StatsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[30]);
}

// ===================================================================

class CMsgDownloadRateStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDownloadRateStatistics>()._has_bits_);
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttling_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_realm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDownloadRateStatistics::CMsgDownloadRateStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDownloadRateStatistics)
}
CMsgDownloadRateStatistics::CMsgDownloadRateStatistics(const CMsgDownloadRateStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_id_, &from.cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_realm_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(steam_realm_));
  // @@protoc_insertion_point(copy_constructor:CMsgDownloadRateStatistics)
}

inline void CMsgDownloadRateStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steam_realm_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(steam_realm_));
}

CMsgDownloadRateStatistics::~CMsgDownloadRateStatistics() {
  // @@protoc_insertion_point(destructor:CMsgDownloadRateStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDownloadRateStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDownloadRateStatistics::ArenaDtor(void* object) {
  CMsgDownloadRateStatistics* _this = reinterpret_cast< CMsgDownloadRateStatistics* >(object);
  (void)_this;
}
void CMsgDownloadRateStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDownloadRateStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDownloadRateStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDownloadRateStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cell_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_realm_) -
        reinterpret_cast<char*>(&cell_id_)) + sizeof(steam_realm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDownloadRateStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDownloadRateStatistics.StatsInfo stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 throttling_kbps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_throttling_kbps(&has_bits);
          throttling_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_realm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_steam_realm(&has_bits);
          steam_realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDownloadRateStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDownloadRateStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cell_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_id(), target);
  }

  // repeated .CMsgDownloadRateStatistics.StatsInfo stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  // optional uint32 throttling_kbps = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_throttling_kbps(), target);
  }

  // optional uint32 steam_realm = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_steam_realm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDownloadRateStatistics)
  return target;
}

size_t CMsgDownloadRateStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDownloadRateStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDownloadRateStatistics.StatsInfo stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 cell_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id());
    }

    // optional uint32 throttling_kbps = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_throttling_kbps());
    }

    // optional uint32 steam_realm = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steam_realm());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDownloadRateStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDownloadRateStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDownloadRateStatistics::GetClassData() const { return &_class_data_; }

void CMsgDownloadRateStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDownloadRateStatistics *>(to)->MergeFrom(
      static_cast<const CMsgDownloadRateStatistics &>(from));
}


void CMsgDownloadRateStatistics::MergeFrom(const CMsgDownloadRateStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDownloadRateStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      throttling_kbps_ = from.throttling_kbps_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_realm_ = from.steam_realm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDownloadRateStatistics::CopyFrom(const CMsgDownloadRateStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDownloadRateStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDownloadRateStatistics::IsInitialized() const {
  return true;
}

void CMsgDownloadRateStatistics::InternalSwap(CMsgDownloadRateStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDownloadRateStatistics, steam_realm_)
      + sizeof(CMsgDownloadRateStatistics::steam_realm_)
      - PROTOBUF_FIELD_OFFSET(CMsgDownloadRateStatistics, cell_id_)>(
          reinterpret_cast<char*>(&cell_id_),
          reinterpret_cast<char*>(&other->cell_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDownloadRateStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[31]);
}

// ===================================================================

class CMsgClientRequestAccountData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestAccountData>()._has_bits_);
  static void set_has_account_or_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientRequestAccountData::CMsgClientRequestAccountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestAccountData)
}
CMsgClientRequestAccountData::CMsgClientRequestAccountData(const CMsgClientRequestAccountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_or_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_or_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_or_email()) {
    account_or_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_or_email(), 
      GetArenaForAllocation());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestAccountData)
}

inline void CMsgClientRequestAccountData::SharedCtor() {
account_or_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_or_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_ = 0u;
}

CMsgClientRequestAccountData::~CMsgClientRequestAccountData() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestAccountData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestAccountData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_or_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestAccountData::ArenaDtor(void* object) {
  CMsgClientRequestAccountData* _this = reinterpret_cast< CMsgClientRequestAccountData* >(object);
  (void)_this;
}
void CMsgClientRequestAccountData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestAccountData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestAccountData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestAccountData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    account_or_email_.ClearNonDefaultToEmpty();
  }
  action_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestAccountData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string account_or_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_or_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestAccountData.account_or_email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestAccountData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestAccountData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string account_or_email = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_or_email().data(), static_cast<int>(this->_internal_account_or_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestAccountData.account_or_email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_or_email(), target);
  }

  // optional uint32 action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestAccountData)
  return target;
}

size_t CMsgClientRequestAccountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestAccountData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string account_or_email = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_or_email());
    }

    // optional uint32 action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestAccountData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestAccountData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestAccountData::GetClassData() const { return &_class_data_; }

void CMsgClientRequestAccountData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestAccountData *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestAccountData &>(from));
}


void CMsgClientRequestAccountData::MergeFrom(const CMsgClientRequestAccountData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestAccountData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account_or_email(from._internal_account_or_email());
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestAccountData::CopyFrom(const CMsgClientRequestAccountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestAccountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestAccountData::IsInitialized() const {
  return true;
}

void CMsgClientRequestAccountData::InternalSwap(CMsgClientRequestAccountData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_or_email_, lhs_arena,
      &other->account_or_email_, rhs_arena
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestAccountData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[32]);
}

// ===================================================================

class CMsgClientRequestAccountDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestAccountDataResponse>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ct_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_account_name_suggestion1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_name_suggestion2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_name_suggestion3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientRequestAccountDataResponse::CMsgClientRequestAccountDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestAccountDataResponse)
}
CMsgClientRequestAccountDataResponse::CMsgClientRequestAccountDataResponse(const CMsgClientRequestAccountDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  account_name_suggestion1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_suggestion1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name_suggestion1()) {
    account_name_suggestion1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name_suggestion1(), 
      GetArenaForAllocation());
  }
  account_name_suggestion2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_suggestion2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name_suggestion2()) {
    account_name_suggestion2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name_suggestion2(), 
      GetArenaForAllocation());
  }
  account_name_suggestion3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_suggestion3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name_suggestion3()) {
    account_name_suggestion3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name_suggestion3(), 
      GetArenaForAllocation());
  }
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&ct_matches_) -
    reinterpret_cast<char*>(&action_)) + sizeof(ct_matches_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestAccountDataResponse)
}

inline void CMsgClientRequestAccountDataResponse::SharedCtor() {
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_name_suggestion1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_suggestion1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_name_suggestion2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_suggestion2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_name_suggestion3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_suggestion3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ct_matches_) -
    reinterpret_cast<char*>(&action_)) + sizeof(ct_matches_));
}

CMsgClientRequestAccountDataResponse::~CMsgClientRequestAccountDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestAccountDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestAccountDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_suggestion1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_suggestion2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_suggestion3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestAccountDataResponse::ArenaDtor(void* object) {
  CMsgClientRequestAccountDataResponse* _this = reinterpret_cast< CMsgClientRequestAccountDataResponse* >(object);
  (void)_this;
}
void CMsgClientRequestAccountDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestAccountDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestAccountDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestAccountDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      account_name_suggestion1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      account_name_suggestion2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      account_name_suggestion3_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ct_matches_) -
        reinterpret_cast<char*>(&action_)) + sizeof(ct_matches_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestAccountDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestAccountDataResponse.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ct_matches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ct_matches(&has_bits);
          ct_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name_suggestion1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_account_name_suggestion1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestAccountDataResponse.account_name_suggestion1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name_suggestion2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_account_name_suggestion2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestAccountDataResponse.account_name_suggestion2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name_suggestion3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_account_name_suggestion3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestAccountDataResponse.account_name_suggestion3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestAccountDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestAccountDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action(), target);
  }

  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  // optional string account_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestAccountDataResponse.account_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account_name(), target);
  }

  // optional uint32 ct_matches = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ct_matches(), target);
  }

  // optional string account_name_suggestion1 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name_suggestion1().data(), static_cast<int>(this->_internal_account_name_suggestion1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestAccountDataResponse.account_name_suggestion1");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_account_name_suggestion1(), target);
  }

  // optional string account_name_suggestion2 = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name_suggestion2().data(), static_cast<int>(this->_internal_account_name_suggestion2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestAccountDataResponse.account_name_suggestion2");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_account_name_suggestion2(), target);
  }

  // optional string account_name_suggestion3 = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name_suggestion3().data(), static_cast<int>(this->_internal_account_name_suggestion3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestAccountDataResponse.account_name_suggestion3");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_account_name_suggestion3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestAccountDataResponse)
  return target;
}

size_t CMsgClientRequestAccountDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestAccountDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string account_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string account_name_suggestion1 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name_suggestion1());
    }

    // optional string account_name_suggestion2 = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name_suggestion2());
    }

    // optional string account_name_suggestion3 = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name_suggestion3());
    }

    // optional uint32 action = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action());
    }

    // optional uint32 eresult = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

    // optional uint32 ct_matches = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ct_matches());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestAccountDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestAccountDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestAccountDataResponse::GetClassData() const { return &_class_data_; }

void CMsgClientRequestAccountDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestAccountDataResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestAccountDataResponse &>(from));
}


void CMsgClientRequestAccountDataResponse::MergeFrom(const CMsgClientRequestAccountDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestAccountDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_account_name_suggestion1(from._internal_account_name_suggestion1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_account_name_suggestion2(from._internal_account_name_suggestion2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_account_name_suggestion3(from._internal_account_name_suggestion3());
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000020u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000040u) {
      ct_matches_ = from.ct_matches_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestAccountDataResponse::CopyFrom(const CMsgClientRequestAccountDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestAccountDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestAccountDataResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestAccountDataResponse::InternalSwap(CMsgClientRequestAccountDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, lhs_arena,
      &other->account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_suggestion1_, lhs_arena,
      &other->account_name_suggestion1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_suggestion2_, lhs_arena,
      &other->account_name_suggestion2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_suggestion3_, lhs_arena,
      &other->account_name_suggestion3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, ct_matches_)
      + sizeof(CMsgClientRequestAccountDataResponse::ct_matches_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRequestAccountDataResponse, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestAccountDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[33]);
}

// ===================================================================

class CMsgClientUGSGetGlobalStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUGSGetGlobalStats>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_history_days_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_last_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_day_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_days_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientUGSGetGlobalStats::CMsgClientUGSGetGlobalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUGSGetGlobalStats)
}
CMsgClientUGSGetGlobalStats::CMsgClientUGSGetGlobalStats(const CMsgClientUGSGetGlobalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&days_cached_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(days_cached_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUGSGetGlobalStats)
}

inline void CMsgClientUGSGetGlobalStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&days_cached_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(days_cached_));
}

CMsgClientUGSGetGlobalStats::~CMsgClientUGSGetGlobalStats() {
  // @@protoc_insertion_point(destructor:CMsgClientUGSGetGlobalStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUGSGetGlobalStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUGSGetGlobalStats::ArenaDtor(void* object) {
  CMsgClientUGSGetGlobalStats* _this = reinterpret_cast< CMsgClientUGSGetGlobalStats* >(object);
  (void)_this;
}
void CMsgClientUGSGetGlobalStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUGSGetGlobalStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUGSGetGlobalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUGSGetGlobalStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&days_cached_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(days_cached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUGSGetGlobalStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 history_days_requested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_history_days_requested(&has_bits);
          history_days_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 time_last_requested = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_time_last_requested(&has_bits);
          time_last_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_day_cached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_first_day_cached(&has_bits);
          first_day_cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 days_cached = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_days_cached(&has_bits);
          days_cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUGSGetGlobalStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUGSGetGlobalStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gameid(), target);
  }

  // optional uint32 history_days_requested = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_history_days_requested(), target);
  }

  // optional fixed32 time_last_requested = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_time_last_requested(), target);
  }

  // optional uint32 first_day_cached = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_first_day_cached(), target);
  }

  // optional uint32 days_cached = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_days_cached(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUGSGetGlobalStats)
  return target;
}

size_t CMsgClientUGSGetGlobalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUGSGetGlobalStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 gameid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
    }

    // optional uint32 history_days_requested = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_history_days_requested());
    }

    // optional fixed32 time_last_requested = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 first_day_cached = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_day_cached());
    }

    // optional uint32 days_cached = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_days_cached());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUGSGetGlobalStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUGSGetGlobalStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUGSGetGlobalStats::GetClassData() const { return &_class_data_; }

void CMsgClientUGSGetGlobalStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUGSGetGlobalStats *>(to)->MergeFrom(
      static_cast<const CMsgClientUGSGetGlobalStats &>(from));
}


void CMsgClientUGSGetGlobalStats::MergeFrom(const CMsgClientUGSGetGlobalStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUGSGetGlobalStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      history_days_requested_ = from.history_days_requested_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_last_requested_ = from.time_last_requested_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_day_cached_ = from.first_day_cached_;
    }
    if (cached_has_bits & 0x00000010u) {
      days_cached_ = from.days_cached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUGSGetGlobalStats::CopyFrom(const CMsgClientUGSGetGlobalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUGSGetGlobalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStats::IsInitialized() const {
  return true;
}

void CMsgClientUGSGetGlobalStats::InternalSwap(CMsgClientUGSGetGlobalStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, days_cached_)
      + sizeof(CMsgClientUGSGetGlobalStats::days_cached_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUGSGetGlobalStats, gameid_)>(
          reinterpret_cast<char*>(&gameid_),
          reinterpret_cast<char*>(&other->gameid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUGSGetGlobalStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[34]);
}

// ===================================================================

class CMsgClientUGSGetGlobalStatsResponse_Day_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUGSGetGlobalStatsResponse_Day_Stat>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CMsgClientUGSGetGlobalStatsResponse_Day_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
}
CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CMsgClientUGSGetGlobalStatsResponse_Day_Stat(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_, &from.data_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_id_) -
    reinterpret_cast<char*>(&data_)) + sizeof(stat_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
}

inline void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_id_) -
    reinterpret_cast<char*>(&data_)) + sizeof(stat_id_));
}

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::~CMsgClientUGSGetGlobalStatsResponse_Day_Stat() {
  // @@protoc_insertion_point(destructor:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::ArenaDtor(void* object) {
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat* _this = reinterpret_cast< CMsgClientUGSGetGlobalStatsResponse_Day_Stat* >(object);
  (void)_this;
}
void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&data_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_id_) -
        reinterpret_cast<char*>(&data_)) + sizeof(stat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 stat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional int64 data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
  return target;
}

size_t CMsgClientUGSGetGlobalStatsResponse_Day_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_data());
    }

    // optional int32 stat_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_stat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUGSGetGlobalStatsResponse_Day_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUGSGetGlobalStatsResponse_Day_Stat::GetClassData() const { return &_class_data_; }

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUGSGetGlobalStatsResponse_Day_Stat *>(to)->MergeFrom(
      static_cast<const CMsgClientUGSGetGlobalStatsResponse_Day_Stat &>(from));
}


void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_id_ = from.stat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUGSGetGlobalStatsResponse.Day.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse_Day_Stat::IsInitialized() const {
  return true;
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::InternalSwap(CMsgClientUGSGetGlobalStatsResponse_Day_Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day_Stat, stat_id_)
      + sizeof(CMsgClientUGSGetGlobalStatsResponse_Day_Stat::stat_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse_Day_Stat, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUGSGetGlobalStatsResponse_Day_Stat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[35]);
}

// ===================================================================

class CMsgClientUGSGetGlobalStatsResponse_Day::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUGSGetGlobalStatsResponse_Day>()._has_bits_);
  static void set_has_day_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUGSGetGlobalStatsResponse_Day::CMsgClientUGSGetGlobalStatsResponse_Day(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUGSGetGlobalStatsResponse.Day)
}
CMsgClientUGSGetGlobalStatsResponse_Day::CMsgClientUGSGetGlobalStatsResponse_Day(const CMsgClientUGSGetGlobalStatsResponse_Day& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  day_id_ = from.day_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientUGSGetGlobalStatsResponse.Day)
}

inline void CMsgClientUGSGetGlobalStatsResponse_Day::SharedCtor() {
day_id_ = 0u;
}

CMsgClientUGSGetGlobalStatsResponse_Day::~CMsgClientUGSGetGlobalStatsResponse_Day() {
  // @@protoc_insertion_point(destructor:CMsgClientUGSGetGlobalStatsResponse.Day)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUGSGetGlobalStatsResponse_Day::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUGSGetGlobalStatsResponse_Day::ArenaDtor(void* object) {
  CMsgClientUGSGetGlobalStatsResponse_Day* _this = reinterpret_cast< CMsgClientUGSGetGlobalStatsResponse_Day* >(object);
  (void)_this;
}
void CMsgClientUGSGetGlobalStatsResponse_Day::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUGSGetGlobalStatsResponse_Day::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUGSGetGlobalStatsResponse_Day::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUGSGetGlobalStatsResponse.Day)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  day_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUGSGetGlobalStatsResponse_Day::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 day_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_day_id(&has_bits);
          day_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUGSGetGlobalStatsResponse_Day::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUGSGetGlobalStatsResponse.Day)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 day_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_day_id(), target);
  }

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUGSGetGlobalStatsResponse.Day)
  return target;
}

size_t CMsgClientUGSGetGlobalStatsResponse_Day::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUGSGetGlobalStatsResponse.Day)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 day_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_day_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUGSGetGlobalStatsResponse_Day::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUGSGetGlobalStatsResponse_Day::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUGSGetGlobalStatsResponse_Day::GetClassData() const { return &_class_data_; }

void CMsgClientUGSGetGlobalStatsResponse_Day::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUGSGetGlobalStatsResponse_Day *>(to)->MergeFrom(
      static_cast<const CMsgClientUGSGetGlobalStatsResponse_Day &>(from));
}


void CMsgClientUGSGetGlobalStatsResponse_Day::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse_Day& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUGSGetGlobalStatsResponse.Day)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from._internal_has_day_id()) {
    _internal_set_day_id(from._internal_day_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUGSGetGlobalStatsResponse_Day::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse_Day& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUGSGetGlobalStatsResponse.Day)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse_Day::IsInitialized() const {
  return true;
}

void CMsgClientUGSGetGlobalStatsResponse_Day::InternalSwap(CMsgClientUGSGetGlobalStatsResponse_Day* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  swap(day_id_, other->day_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUGSGetGlobalStatsResponse_Day::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[36]);
}

// ===================================================================

class CMsgClientUGSGetGlobalStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUGSGetGlobalStatsResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_day_current(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientUGSGetGlobalStatsResponse::CMsgClientUGSGetGlobalStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  days_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUGSGetGlobalStatsResponse)
}
CMsgClientUGSGetGlobalStatsResponse::CMsgClientUGSGetGlobalStatsResponse(const CMsgClientUGSGetGlobalStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      days_(from.days_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUGSGetGlobalStatsResponse)
}

inline void CMsgClientUGSGetGlobalStatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&day_current_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(day_current_));
eresult_ = 2;
}

CMsgClientUGSGetGlobalStatsResponse::~CMsgClientUGSGetGlobalStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientUGSGetGlobalStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUGSGetGlobalStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUGSGetGlobalStatsResponse::ArenaDtor(void* object) {
  CMsgClientUGSGetGlobalStatsResponse* _this = reinterpret_cast< CMsgClientUGSGetGlobalStatsResponse* >(object);
  (void)_this;
}
void CMsgClientUGSGetGlobalStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUGSGetGlobalStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUGSGetGlobalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUGSGetGlobalStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  days_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&day_current_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(day_current_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUGSGetGlobalStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 day_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_day_current(&has_bits);
          day_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_days(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUGSGetGlobalStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUGSGetGlobalStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional fixed32 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional int32 day_current = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day_current(), target);
  }

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_days_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_days(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUGSGetGlobalStatsResponse)
  return target;
}

size_t CMsgClientUGSGetGlobalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUGSGetGlobalStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
  total_size += 1UL * this->_internal_days_size();
  for (const auto& msg : this->days_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 day_current = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_day_current());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUGSGetGlobalStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUGSGetGlobalStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUGSGetGlobalStatsResponse::GetClassData() const { return &_class_data_; }

void CMsgClientUGSGetGlobalStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUGSGetGlobalStatsResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientUGSGetGlobalStatsResponse &>(from));
}


void CMsgClientUGSGetGlobalStatsResponse::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUGSGetGlobalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  days_.MergeFrom(from.days_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      day_current_ = from.day_current_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUGSGetGlobalStatsResponse::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUGSGetGlobalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse::IsInitialized() const {
  return true;
}

void CMsgClientUGSGetGlobalStatsResponse::InternalSwap(CMsgClientUGSGetGlobalStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  days_.InternalSwap(&other->days_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, day_current_)
      + sizeof(CMsgClientUGSGetGlobalStatsResponse::day_current_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUGSGetGlobalStatsResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUGSGetGlobalStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[37]);
}

// ===================================================================

class CMsgClientRedeemGuestPass::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRedeemGuestPass>()._has_bits_);
  static void set_has_guest_pass_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRedeemGuestPass::CMsgClientRedeemGuestPass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRedeemGuestPass)
}
CMsgClientRedeemGuestPass::CMsgClientRedeemGuestPass(const CMsgClientRedeemGuestPass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guest_pass_id_ = from.guest_pass_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRedeemGuestPass)
}

inline void CMsgClientRedeemGuestPass::SharedCtor() {
guest_pass_id_ = uint64_t{0u};
}

CMsgClientRedeemGuestPass::~CMsgClientRedeemGuestPass() {
  // @@protoc_insertion_point(destructor:CMsgClientRedeemGuestPass)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRedeemGuestPass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRedeemGuestPass::ArenaDtor(void* object) {
  CMsgClientRedeemGuestPass* _this = reinterpret_cast< CMsgClientRedeemGuestPass* >(object);
  (void)_this;
}
void CMsgClientRedeemGuestPass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRedeemGuestPass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRedeemGuestPass::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRedeemGuestPass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guest_pass_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRedeemGuestPass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 guest_pass_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_guest_pass_id(&has_bits);
          guest_pass_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRedeemGuestPass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRedeemGuestPass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 guest_pass_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_guest_pass_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRedeemGuestPass)
  return target;
}

size_t CMsgClientRedeemGuestPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRedeemGuestPass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 guest_pass_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRedeemGuestPass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRedeemGuestPass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRedeemGuestPass::GetClassData() const { return &_class_data_; }

void CMsgClientRedeemGuestPass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRedeemGuestPass *>(to)->MergeFrom(
      static_cast<const CMsgClientRedeemGuestPass &>(from));
}


void CMsgClientRedeemGuestPass::MergeFrom(const CMsgClientRedeemGuestPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRedeemGuestPass)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guest_pass_id()) {
    _internal_set_guest_pass_id(from._internal_guest_pass_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRedeemGuestPass::CopyFrom(const CMsgClientRedeemGuestPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRedeemGuestPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRedeemGuestPass::IsInitialized() const {
  return true;
}

void CMsgClientRedeemGuestPass::InternalSwap(CMsgClientRedeemGuestPass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guest_pass_id_, other->guest_pass_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRedeemGuestPass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[38]);
}

// ===================================================================

class CMsgClientRedeemGuestPassResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRedeemGuestPassResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_must_own_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientRedeemGuestPassResponse::CMsgClientRedeemGuestPassResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRedeemGuestPassResponse)
}
CMsgClientRedeemGuestPassResponse::CMsgClientRedeemGuestPassResponse(const CMsgClientRedeemGuestPassResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&package_id_, &from.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRedeemGuestPassResponse)
}

inline void CMsgClientRedeemGuestPassResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&package_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&must_own_appid_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(must_own_appid_));
eresult_ = 2u;
}

CMsgClientRedeemGuestPassResponse::~CMsgClientRedeemGuestPassResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRedeemGuestPassResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRedeemGuestPassResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRedeemGuestPassResponse::ArenaDtor(void* object) {
  CMsgClientRedeemGuestPassResponse* _this = reinterpret_cast< CMsgClientRedeemGuestPassResponse* >(object);
  (void)_this;
}
void CMsgClientRedeemGuestPassResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRedeemGuestPassResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRedeemGuestPassResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRedeemGuestPassResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&must_own_appid_) -
        reinterpret_cast<char*>(&package_id_)) + sizeof(must_own_appid_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRedeemGuestPassResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 package_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_package_id(&has_bits);
          package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 must_own_appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_must_own_appid(&has_bits);
          must_own_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRedeemGuestPassResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRedeemGuestPassResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 package_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_package_id(), target);
  }

  // optional uint32 must_own_appid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_must_own_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRedeemGuestPassResponse)
  return target;
}

size_t CMsgClientRedeemGuestPassResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRedeemGuestPassResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 package_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_package_id());
    }

    // optional uint32 must_own_appid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_must_own_appid());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRedeemGuestPassResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRedeemGuestPassResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRedeemGuestPassResponse::GetClassData() const { return &_class_data_; }

void CMsgClientRedeemGuestPassResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRedeemGuestPassResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientRedeemGuestPassResponse &>(from));
}


void CMsgClientRedeemGuestPassResponse::MergeFrom(const CMsgClientRedeemGuestPassResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRedeemGuestPassResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      must_own_appid_ = from.must_own_appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRedeemGuestPassResponse::CopyFrom(const CMsgClientRedeemGuestPassResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRedeemGuestPassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRedeemGuestPassResponse::IsInitialized() const {
  return true;
}

void CMsgClientRedeemGuestPassResponse::InternalSwap(CMsgClientRedeemGuestPassResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRedeemGuestPassResponse, must_own_appid_)
      + sizeof(CMsgClientRedeemGuestPassResponse::must_own_appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRedeemGuestPassResponse, package_id_)>(
          reinterpret_cast<char*>(&package_id_),
          reinterpret_cast<char*>(&other->package_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRedeemGuestPassResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[39]);
}

// ===================================================================

class CMsgClientGetClanActivityCounts::_Internal {
 public:
};

CMsgClientGetClanActivityCounts::CMsgClientGetClanActivityCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamid_clans_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClanActivityCounts)
}
CMsgClientGetClanActivityCounts::CMsgClientGetClanActivityCounts(const CMsgClientGetClanActivityCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steamid_clans_(from.steamid_clans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClanActivityCounts)
}

inline void CMsgClientGetClanActivityCounts::SharedCtor() {
}

CMsgClientGetClanActivityCounts::~CMsgClientGetClanActivityCounts() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClanActivityCounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClanActivityCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetClanActivityCounts::ArenaDtor(void* object) {
  CMsgClientGetClanActivityCounts* _this = reinterpret_cast< CMsgClientGetClanActivityCounts* >(object);
  (void)_this;
}
void CMsgClientGetClanActivityCounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClanActivityCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClanActivityCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClanActivityCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_clans_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClanActivityCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 steamid_clans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamid_clans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_steamid_clans(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClanActivityCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClanActivityCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 steamid_clans = 1;
  for (int i = 0, n = this->_internal_steamid_clans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid_clans(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClanActivityCounts)
  return target;
}

size_t CMsgClientGetClanActivityCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClanActivityCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 steamid_clans = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->steamid_clans_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamid_clans_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClanActivityCounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClanActivityCounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClanActivityCounts::GetClassData() const { return &_class_data_; }

void CMsgClientGetClanActivityCounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClanActivityCounts *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClanActivityCounts &>(from));
}


void CMsgClientGetClanActivityCounts::MergeFrom(const CMsgClientGetClanActivityCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClanActivityCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_clans_.MergeFrom(from.steamid_clans_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClanActivityCounts::CopyFrom(const CMsgClientGetClanActivityCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClanActivityCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClanActivityCounts::IsInitialized() const {
  return true;
}

void CMsgClientGetClanActivityCounts::InternalSwap(CMsgClientGetClanActivityCounts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  steamid_clans_.InternalSwap(&other->steamid_clans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClanActivityCounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[40]);
}

// ===================================================================

class CMsgClientGetClanActivityCountsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetClanActivityCountsResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetClanActivityCountsResponse::CMsgClientGetClanActivityCountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetClanActivityCountsResponse)
}
CMsgClientGetClanActivityCountsResponse::CMsgClientGetClanActivityCountsResponse(const CMsgClientGetClanActivityCountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetClanActivityCountsResponse)
}

inline void CMsgClientGetClanActivityCountsResponse::SharedCtor() {
eresult_ = 2u;
}

CMsgClientGetClanActivityCountsResponse::~CMsgClientGetClanActivityCountsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetClanActivityCountsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetClanActivityCountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetClanActivityCountsResponse::ArenaDtor(void* object) {
  CMsgClientGetClanActivityCountsResponse* _this = reinterpret_cast< CMsgClientGetClanActivityCountsResponse* >(object);
  (void)_this;
}
void CMsgClientGetClanActivityCountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetClanActivityCountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetClanActivityCountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetClanActivityCountsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetClanActivityCountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetClanActivityCountsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetClanActivityCountsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetClanActivityCountsResponse)
  return target;
}

size_t CMsgClientGetClanActivityCountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetClanActivityCountsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetClanActivityCountsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetClanActivityCountsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetClanActivityCountsResponse::GetClassData() const { return &_class_data_; }

void CMsgClientGetClanActivityCountsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetClanActivityCountsResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientGetClanActivityCountsResponse &>(from));
}


void CMsgClientGetClanActivityCountsResponse::MergeFrom(const CMsgClientGetClanActivityCountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetClanActivityCountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetClanActivityCountsResponse::CopyFrom(const CMsgClientGetClanActivityCountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetClanActivityCountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClanActivityCountsResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetClanActivityCountsResponse::InternalSwap(CMsgClientGetClanActivityCountsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetClanActivityCountsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[41]);
}

// ===================================================================

class CMsgClientOGSReportString::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientOGSReportString>()._has_bits_);
  static void set_has_accumulated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_formatter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_varargs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientOGSReportString::CMsgClientOGSReportString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientOGSReportString)
}
CMsgClientOGSReportString::CMsgClientOGSReportString(const CMsgClientOGSReportString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  formatter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    formatter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_formatter()) {
    formatter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_formatter(), 
      GetArenaForAllocation());
  }
  varargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    varargs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_varargs()) {
    varargs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_varargs(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(severity_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientOGSReportString)
}

inline void CMsgClientOGSReportString::SharedCtor() {
formatter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  formatter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
varargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  varargs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sessionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(severity_));
}

CMsgClientOGSReportString::~CMsgClientOGSReportString() {
  // @@protoc_insertion_point(destructor:CMsgClientOGSReportString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientOGSReportString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  formatter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  varargs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientOGSReportString::ArenaDtor(void* object) {
  CMsgClientOGSReportString* _this = reinterpret_cast< CMsgClientOGSReportString* >(object);
  (void)_this;
}
void CMsgClientOGSReportString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientOGSReportString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientOGSReportString::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientOGSReportString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      formatter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      varargs_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&sessionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&severity_) -
        reinterpret_cast<char*>(&sessionid_)) + sizeof(severity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientOGSReportString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool accumulated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accumulated(&has_bits);
          accumulated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sessionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 severity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string formatter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_formatter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientOGSReportString.formatter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes varargs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_varargs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientOGSReportString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientOGSReportString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool accumulated = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accumulated(), target);
  }

  // optional uint64 sessionid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_sessionid(), target);
  }

  // optional int32 severity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_severity(), target);
  }

  // optional string formatter = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_formatter().data(), static_cast<int>(this->_internal_formatter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientOGSReportString.formatter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_formatter(), target);
  }

  // optional bytes varargs = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_varargs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientOGSReportString)
  return target;
}

size_t CMsgClientOGSReportString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientOGSReportString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string formatter = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_formatter());
    }

    // optional bytes varargs = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_varargs());
    }

    // optional uint64 sessionid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
    }

    // optional bool accumulated = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 severity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_severity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientOGSReportString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientOGSReportString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientOGSReportString::GetClassData() const { return &_class_data_; }

void CMsgClientOGSReportString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientOGSReportString *>(to)->MergeFrom(
      static_cast<const CMsgClientOGSReportString &>(from));
}


void CMsgClientOGSReportString::MergeFrom(const CMsgClientOGSReportString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientOGSReportString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_formatter(from._internal_formatter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_varargs(from._internal_varargs());
    }
    if (cached_has_bits & 0x00000004u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      accumulated_ = from.accumulated_;
    }
    if (cached_has_bits & 0x00000010u) {
      severity_ = from.severity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientOGSReportString::CopyFrom(const CMsgClientOGSReportString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientOGSReportString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOGSReportString::IsInitialized() const {
  return true;
}

void CMsgClientOGSReportString::InternalSwap(CMsgClientOGSReportString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &formatter_, lhs_arena,
      &other->formatter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &varargs_, lhs_arena,
      &other->varargs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientOGSReportString, severity_)
      + sizeof(CMsgClientOGSReportString::severity_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientOGSReportString, sessionid_)>(
          reinterpret_cast<char*>(&sessionid_),
          reinterpret_cast<char*>(&other->sessionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientOGSReportString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[42]);
}

// ===================================================================

class CMsgClientOGSReportBug::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientOGSReportBug>()._has_bits_);
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bugtext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screenshot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientOGSReportBug::CMsgClientOGSReportBug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientOGSReportBug)
}
CMsgClientOGSReportBug::CMsgClientOGSReportBug(const CMsgClientOGSReportBug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bugtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bugtext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bugtext()) {
    bugtext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bugtext(), 
      GetArenaForAllocation());
  }
  screenshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    screenshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_screenshot()) {
    screenshot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_screenshot(), 
      GetArenaForAllocation());
  }
  sessionid_ = from.sessionid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientOGSReportBug)
}

inline void CMsgClientOGSReportBug::SharedCtor() {
bugtext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bugtext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
screenshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  screenshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sessionid_ = uint64_t{0u};
}

CMsgClientOGSReportBug::~CMsgClientOGSReportBug() {
  // @@protoc_insertion_point(destructor:CMsgClientOGSReportBug)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientOGSReportBug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bugtext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientOGSReportBug::ArenaDtor(void* object) {
  CMsgClientOGSReportBug* _this = reinterpret_cast< CMsgClientOGSReportBug* >(object);
  (void)_this;
}
void CMsgClientOGSReportBug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientOGSReportBug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientOGSReportBug::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientOGSReportBug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bugtext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      screenshot_.ClearNonDefaultToEmpty();
    }
  }
  sessionid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientOGSReportBug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sessionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bugtext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bugtext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientOGSReportBug.bugtext");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes screenshot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_screenshot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientOGSReportBug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientOGSReportBug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sessionid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sessionid(), target);
  }

  // optional string bugtext = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bugtext().data(), static_cast<int>(this->_internal_bugtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientOGSReportBug.bugtext");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bugtext(), target);
  }

  // optional bytes screenshot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_screenshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientOGSReportBug)
  return target;
}

size_t CMsgClientOGSReportBug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientOGSReportBug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string bugtext = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bugtext());
    }

    // optional bytes screenshot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_screenshot());
    }

    // optional uint64 sessionid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sessionid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientOGSReportBug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientOGSReportBug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientOGSReportBug::GetClassData() const { return &_class_data_; }

void CMsgClientOGSReportBug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientOGSReportBug *>(to)->MergeFrom(
      static_cast<const CMsgClientOGSReportBug &>(from));
}


void CMsgClientOGSReportBug::MergeFrom(const CMsgClientOGSReportBug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientOGSReportBug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bugtext(from._internal_bugtext());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_screenshot(from._internal_screenshot());
    }
    if (cached_has_bits & 0x00000004u) {
      sessionid_ = from.sessionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientOGSReportBug::CopyFrom(const CMsgClientOGSReportBug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientOGSReportBug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOGSReportBug::IsInitialized() const {
  return true;
}

void CMsgClientOGSReportBug::InternalSwap(CMsgClientOGSReportBug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bugtext_, lhs_arena,
      &other->bugtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &screenshot_, lhs_arena,
      &other->screenshot_, rhs_arena
  );
  swap(sessionid_, other->sessionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientOGSReportBug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[43]);
}

// ===================================================================

class CMsgClientSentLogs::_Internal {
 public:
};

CMsgClientSentLogs::CMsgClientSentLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientSentLogs)
}
CMsgClientSentLogs::CMsgClientSentLogs(const CMsgClientSentLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientSentLogs)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSentLogs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSentLogs::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSentLogs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[44]);
}

// ===================================================================

class CMsgGCClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClient>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msgtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gcname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCClient::CMsgGCClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCClient)
}
CMsgGCClient::CMsgGCClient(const CMsgGCClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  gcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gcname()) {
    gcname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gcname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCClient)
}

inline void CMsgGCClient::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(ip_));
}

CMsgGCClient::~CMsgGCClient() {
  // @@protoc_insertion_point(destructor:CMsgGCClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCClient::ArenaDtor(void* object) {
  CMsgGCClient* _this = reinterpret_cast< CMsgGCClient* >(object);
  (void)_this;
}
void CMsgGCClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gcname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ip_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 msgtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_msgtype(&has_bits);
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string gcname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClient.gcname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 msgtype = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msgtype(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid(), target);
  }

  // optional string gcname = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gcname().data(), static_cast<int>(this->_internal_gcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClient.gcname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gcname(), target);
  }

  // optional uint32 ip = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClient)
  return target;
}

size_t CMsgGCClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional string gcname = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gcname());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 msgtype = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msgtype());
    }

    // optional fixed64 steamid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 ip = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCClient::GetClassData() const { return &_class_data_; }

void CMsgGCClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCClient *>(to)->MergeFrom(
      static_cast<const CMsgGCClient &>(from));
}


void CMsgGCClient::MergeFrom(const CMsgGCClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClient)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gcname(from._internal_gcname());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      msgtype_ = from.msgtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ip_ = from.ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCClient::CopyFrom(const CMsgGCClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClient::IsInitialized() const {
  return true;
}

void CMsgGCClient::InternalSwap(CMsgGCClient* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gcname_, lhs_arena,
      &other->gcname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCClient, ip_)
      + sizeof(CMsgGCClient::ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCClient, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[45]);
}

// ===================================================================

class CMsgClientRequestFreeLicense::_Internal {
 public:
};

CMsgClientRequestFreeLicense::CMsgClientRequestFreeLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestFreeLicense)
}
CMsgClientRequestFreeLicense::CMsgClientRequestFreeLicense(const CMsgClientRequestFreeLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      appids_(from.appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestFreeLicense)
}

inline void CMsgClientRequestFreeLicense::SharedCtor() {
}

CMsgClientRequestFreeLicense::~CMsgClientRequestFreeLicense() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestFreeLicense)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestFreeLicense::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRequestFreeLicense::ArenaDtor(void* object) {
  CMsgClientRequestFreeLicense* _this = reinterpret_cast< CMsgClientRequestFreeLicense* >(object);
  (void)_this;
}
void CMsgClientRequestFreeLicense::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestFreeLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestFreeLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestFreeLicense)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestFreeLicense::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 appids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestFreeLicense::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestFreeLicense)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 appids = 2;
  for (int i = 0, n = this->_internal_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestFreeLicense)
  return target;
}

size_t CMsgClientRequestFreeLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestFreeLicense)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 appids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_appids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestFreeLicense::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestFreeLicense::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestFreeLicense::GetClassData() const { return &_class_data_; }

void CMsgClientRequestFreeLicense::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestFreeLicense *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestFreeLicense &>(from));
}


void CMsgClientRequestFreeLicense::MergeFrom(const CMsgClientRequestFreeLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestFreeLicense)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  appids_.MergeFrom(from.appids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestFreeLicense::CopyFrom(const CMsgClientRequestFreeLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestFreeLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFreeLicense::IsInitialized() const {
  return true;
}

void CMsgClientRequestFreeLicense::InternalSwap(CMsgClientRequestFreeLicense* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  appids_.InternalSwap(&other->appids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestFreeLicense::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[46]);
}

// ===================================================================

class CMsgClientRequestFreeLicenseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestFreeLicenseResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRequestFreeLicenseResponse::CMsgClientRequestFreeLicenseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  granted_packageids_(arena),
  granted_appids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestFreeLicenseResponse)
}
CMsgClientRequestFreeLicenseResponse::CMsgClientRequestFreeLicenseResponse(const CMsgClientRequestFreeLicenseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      granted_packageids_(from.granted_packageids_),
      granted_appids_(from.granted_appids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestFreeLicenseResponse)
}

inline void CMsgClientRequestFreeLicenseResponse::SharedCtor() {
eresult_ = 2u;
}

CMsgClientRequestFreeLicenseResponse::~CMsgClientRequestFreeLicenseResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestFreeLicenseResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestFreeLicenseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRequestFreeLicenseResponse::ArenaDtor(void* object) {
  CMsgClientRequestFreeLicenseResponse* _this = reinterpret_cast< CMsgClientRequestFreeLicenseResponse* >(object);
  (void)_this;
}
void CMsgClientRequestFreeLicenseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestFreeLicenseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestFreeLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestFreeLicenseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  granted_packageids_.Clear();
  granted_appids_.Clear();
  eresult_ = 2u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestFreeLicenseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 granted_packageids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_granted_packageids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_granted_packageids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 granted_appids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_granted_appids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_granted_appids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestFreeLicenseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestFreeLicenseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // repeated uint32 granted_packageids = 2;
  for (int i = 0, n = this->_internal_granted_packageids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_granted_packageids(i), target);
  }

  // repeated uint32 granted_appids = 3;
  for (int i = 0, n = this->_internal_granted_appids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_granted_appids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestFreeLicenseResponse)
  return target;
}

size_t CMsgClientRequestFreeLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestFreeLicenseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 granted_packageids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->granted_packageids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_granted_packageids_size());
    total_size += data_size;
  }

  // repeated uint32 granted_appids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->granted_appids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_granted_appids_size());
    total_size += data_size;
  }

  // optional uint32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestFreeLicenseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestFreeLicenseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestFreeLicenseResponse::GetClassData() const { return &_class_data_; }

void CMsgClientRequestFreeLicenseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestFreeLicenseResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestFreeLicenseResponse &>(from));
}


void CMsgClientRequestFreeLicenseResponse::MergeFrom(const CMsgClientRequestFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestFreeLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  granted_packageids_.MergeFrom(from.granted_packageids_);
  granted_appids_.MergeFrom(from.granted_appids_);
  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestFreeLicenseResponse::CopyFrom(const CMsgClientRequestFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestFreeLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFreeLicenseResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestFreeLicenseResponse::InternalSwap(CMsgClientRequestFreeLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  granted_packageids_.InternalSwap(&other->granted_packageids_);
  granted_appids_.InternalSwap(&other->granted_appids_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestFreeLicenseResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[47]);
}

// ===================================================================

class CMsgDRMDownloadRequestWithCrashData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDRMDownloadRequestWithCrashData>()._has_bits_);
  static void set_has_download_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_download_types_known(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_guid_drm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guid_split(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guid_merge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_module_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_module_path(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crash_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDRMDownloadRequestWithCrashData::CMsgDRMDownloadRequestWithCrashData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDRMDownloadRequestWithCrashData)
}
CMsgDRMDownloadRequestWithCrashData::CMsgDRMDownloadRequestWithCrashData(const CMsgDRMDownloadRequestWithCrashData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_drm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_drm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid_drm()) {
    guid_drm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid_drm(), 
      GetArenaForAllocation());
  }
  guid_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid_split()) {
    guid_split_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid_split(), 
      GetArenaForAllocation());
  }
  guid_merge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    guid_merge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_guid_merge()) {
    guid_merge_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid_merge(), 
      GetArenaForAllocation());
  }
  module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_name()) {
    module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_name(), 
      GetArenaForAllocation());
  }
  module_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_path()) {
    module_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_path(), 
      GetArenaForAllocation());
  }
  crash_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    crash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_crash_data()) {
    crash_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_crash_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&download_flags_, &from.download_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_types_known_) -
    reinterpret_cast<char*>(&download_flags_)) + sizeof(download_types_known_));
  // @@protoc_insertion_point(copy_constructor:CMsgDRMDownloadRequestWithCrashData)
}

inline void CMsgDRMDownloadRequestWithCrashData::SharedCtor() {
guid_drm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_drm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
guid_split_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_split_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
guid_merge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  guid_merge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
crash_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  crash_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&download_flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&download_types_known_) -
    reinterpret_cast<char*>(&download_flags_)) + sizeof(download_types_known_));
}

CMsgDRMDownloadRequestWithCrashData::~CMsgDRMDownloadRequestWithCrashData() {
  // @@protoc_insertion_point(destructor:CMsgDRMDownloadRequestWithCrashData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDRMDownloadRequestWithCrashData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_drm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guid_split_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guid_merge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crash_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDRMDownloadRequestWithCrashData::ArenaDtor(void* object) {
  CMsgDRMDownloadRequestWithCrashData* _this = reinterpret_cast< CMsgDRMDownloadRequestWithCrashData* >(object);
  (void)_this;
}
void CMsgDRMDownloadRequestWithCrashData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDRMDownloadRequestWithCrashData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDRMDownloadRequestWithCrashData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDRMDownloadRequestWithCrashData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      guid_drm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      guid_split_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      guid_merge_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      module_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      module_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      crash_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&download_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_types_known_) -
        reinterpret_cast<char*>(&download_flags_)) + sizeof(download_types_known_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDRMDownloadRequestWithCrashData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 download_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_download_flags(&has_bits);
          download_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 download_types_known = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_download_types_known(&has_bits);
          download_types_known_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes guid_drm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_guid_drm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes guid_split = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_guid_split();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes guid_merge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_guid_merge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string module_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_module_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDRMDownloadRequestWithCrashData.module_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string module_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_module_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDRMDownloadRequestWithCrashData.module_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes crash_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_crash_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDRMDownloadRequestWithCrashData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDRMDownloadRequestWithCrashData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 download_flags = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_download_flags(), target);
  }

  // optional uint32 download_types_known = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_download_types_known(), target);
  }

  // optional bytes guid_drm = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_guid_drm(), target);
  }

  // optional bytes guid_split = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_guid_split(), target);
  }

  // optional bytes guid_merge = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_guid_merge(), target);
  }

  // optional string module_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module_name().data(), static_cast<int>(this->_internal_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDRMDownloadRequestWithCrashData.module_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_module_name(), target);
  }

  // optional string module_path = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module_path().data(), static_cast<int>(this->_internal_module_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDRMDownloadRequestWithCrashData.module_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_module_path(), target);
  }

  // optional bytes crash_data = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_crash_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDRMDownloadRequestWithCrashData)
  return target;
}

size_t CMsgDRMDownloadRequestWithCrashData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDRMDownloadRequestWithCrashData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes guid_drm = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_guid_drm());
    }

    // optional bytes guid_split = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_guid_split());
    }

    // optional bytes guid_merge = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_guid_merge());
    }

    // optional string module_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module_name());
    }

    // optional string module_path = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module_path());
    }

    // optional bytes crash_data = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_crash_data());
    }

    // optional uint32 download_flags = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_download_flags());
    }

    // optional uint32 download_types_known = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_download_types_known());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDRMDownloadRequestWithCrashData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDRMDownloadRequestWithCrashData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDRMDownloadRequestWithCrashData::GetClassData() const { return &_class_data_; }

void CMsgDRMDownloadRequestWithCrashData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDRMDownloadRequestWithCrashData *>(to)->MergeFrom(
      static_cast<const CMsgDRMDownloadRequestWithCrashData &>(from));
}


void CMsgDRMDownloadRequestWithCrashData::MergeFrom(const CMsgDRMDownloadRequestWithCrashData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDRMDownloadRequestWithCrashData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guid_drm(from._internal_guid_drm());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_guid_split(from._internal_guid_split());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_guid_merge(from._internal_guid_merge());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_module_name(from._internal_module_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_module_path(from._internal_module_path());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_crash_data(from._internal_crash_data());
    }
    if (cached_has_bits & 0x00000040u) {
      download_flags_ = from.download_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      download_types_known_ = from.download_types_known_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDRMDownloadRequestWithCrashData::CopyFrom(const CMsgDRMDownloadRequestWithCrashData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDRMDownloadRequestWithCrashData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMDownloadRequestWithCrashData::IsInitialized() const {
  return true;
}

void CMsgDRMDownloadRequestWithCrashData::InternalSwap(CMsgDRMDownloadRequestWithCrashData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_drm_, lhs_arena,
      &other->guid_drm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_split_, lhs_arena,
      &other->guid_split_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_merge_, lhs_arena,
      &other->guid_merge_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_name_, lhs_arena,
      &other->module_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_path_, lhs_arena,
      &other->module_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &crash_data_, lhs_arena,
      &other->crash_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, download_types_known_)
      + sizeof(CMsgDRMDownloadRequestWithCrashData::download_types_known_)
      - PROTOBUF_FIELD_OFFSET(CMsgDRMDownloadRequestWithCrashData, download_flags_)>(
          reinterpret_cast<char*>(&download_flags_),
          reinterpret_cast<char*>(&other->download_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDRMDownloadRequestWithCrashData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[48]);
}

// ===================================================================

class CMsgDRMDownloadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDRMDownloadResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blob_download_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_merge_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_download_file_dfs_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_download_file_dfs_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_download_file_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_module_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDRMDownloadResponse::CMsgDRMDownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDRMDownloadResponse)
}
CMsgDRMDownloadResponse::CMsgDRMDownloadResponse(const CMsgDRMDownloadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merge_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merge_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merge_guid()) {
    merge_guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_merge_guid(), 
      GetArenaForAllocation());
  }
  download_file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    download_file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_download_file_url()) {
    download_file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_download_file_url(), 
      GetArenaForAllocation());
  }
  module_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_path()) {
    module_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgDRMDownloadResponse)
}

inline void CMsgDRMDownloadResponse::SharedCtor() {
merge_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merge_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
download_file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  download_file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&download_file_dfs_port_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(download_file_dfs_port_));
eresult_ = 2u;
}

CMsgDRMDownloadResponse::~CMsgDRMDownloadResponse() {
  // @@protoc_insertion_point(destructor:CMsgDRMDownloadResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDRMDownloadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  merge_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  download_file_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDRMDownloadResponse::ArenaDtor(void* object) {
  CMsgDRMDownloadResponse* _this = reinterpret_cast< CMsgDRMDownloadResponse* >(object);
  (void)_this;
}
void CMsgDRMDownloadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDRMDownloadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDRMDownloadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDRMDownloadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      merge_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      download_file_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      module_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_file_dfs_port_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(download_file_dfs_port_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDRMDownloadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 blob_download_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_blob_download_type(&has_bits);
          blob_download_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes merge_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_merge_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 download_file_dfs_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_download_file_dfs_ip(&has_bits);
          download_file_dfs_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 download_file_dfs_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_download_file_dfs_port(&has_bits);
          download_file_dfs_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string download_file_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_download_file_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDRMDownloadResponse.download_file_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string module_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_module_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDRMDownloadResponse.module_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDRMDownloadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDRMDownloadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional uint32 blob_download_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blob_download_type(), target);
  }

  // optional bytes merge_guid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_merge_guid(), target);
  }

  // optional uint32 download_file_dfs_ip = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_download_file_dfs_ip(), target);
  }

  // optional uint32 download_file_dfs_port = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_download_file_dfs_port(), target);
  }

  // optional string download_file_url = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_download_file_url().data(), static_cast<int>(this->_internal_download_file_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDRMDownloadResponse.download_file_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_download_file_url(), target);
  }

  // optional string module_path = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module_path().data(), static_cast<int>(this->_internal_module_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDRMDownloadResponse.module_path");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_module_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDRMDownloadResponse)
  return target;
}

size_t CMsgDRMDownloadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDRMDownloadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes merge_guid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merge_guid());
    }

    // optional string download_file_url = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_download_file_url());
    }

    // optional string module_path = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module_path());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 blob_download_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_blob_download_type());
    }

    // optional uint32 download_file_dfs_ip = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_download_file_dfs_ip());
    }

    // optional uint32 download_file_dfs_port = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_download_file_dfs_port());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDRMDownloadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDRMDownloadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDRMDownloadResponse::GetClassData() const { return &_class_data_; }

void CMsgDRMDownloadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDRMDownloadResponse *>(to)->MergeFrom(
      static_cast<const CMsgDRMDownloadResponse &>(from));
}


void CMsgDRMDownloadResponse::MergeFrom(const CMsgDRMDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDRMDownloadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_merge_guid(from._internal_merge_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_download_file_url(from._internal_download_file_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_module_path(from._internal_module_path());
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      blob_download_type_ = from.blob_download_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      download_file_dfs_ip_ = from.download_file_dfs_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      download_file_dfs_port_ = from.download_file_dfs_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDRMDownloadResponse::CopyFrom(const CMsgDRMDownloadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDRMDownloadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMDownloadResponse::IsInitialized() const {
  return true;
}

void CMsgDRMDownloadResponse::InternalSwap(CMsgDRMDownloadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &merge_guid_, lhs_arena,
      &other->merge_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &download_file_url_, lhs_arena,
      &other->download_file_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_path_, lhs_arena,
      &other->module_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDRMDownloadResponse, download_file_dfs_port_)
      + sizeof(CMsgDRMDownloadResponse::download_file_dfs_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgDRMDownloadResponse, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDRMDownloadResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[49]);
}

// ===================================================================

class CMsgDRMFinalResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDRMFinalResult>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blob_download_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_merge_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_download_file_dfs_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_download_file_dfs_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_download_file_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDRMFinalResult::CMsgDRMFinalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDRMFinalResult)
}
CMsgDRMFinalResult::CMsgDRMFinalResult(const CMsgDRMFinalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merge_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    merge_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merge_guid()) {
    merge_guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_merge_guid(), 
      GetArenaForAllocation());
  }
  download_file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    download_file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_download_file_url()) {
    download_file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_download_file_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgDRMFinalResult)
}

inline void CMsgDRMFinalResult::SharedCtor() {
merge_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  merge_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
download_file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  download_file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&download_file_dfs_port_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(download_file_dfs_port_));
eresult_ = 2u;
}

CMsgDRMFinalResult::~CMsgDRMFinalResult() {
  // @@protoc_insertion_point(destructor:CMsgDRMFinalResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDRMFinalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  merge_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  download_file_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDRMFinalResult::ArenaDtor(void* object) {
  CMsgDRMFinalResult* _this = reinterpret_cast< CMsgDRMFinalResult* >(object);
  (void)_this;
}
void CMsgDRMFinalResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDRMFinalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDRMFinalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDRMFinalResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      merge_guid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      download_file_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&download_file_dfs_port_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(download_file_dfs_port_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDRMFinalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eResult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 blob_download_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_blob_download_type(&has_bits);
          blob_download_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 error_detail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_error_detail(&has_bits);
          error_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes merge_guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_merge_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 download_file_dfs_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_download_file_dfs_ip(&has_bits);
          download_file_dfs_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 download_file_dfs_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_download_file_dfs_port(&has_bits);
          download_file_dfs_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string download_file_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_download_file_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDRMFinalResult.download_file_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDRMFinalResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDRMFinalResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eResult = 1 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional uint32 blob_download_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blob_download_type(), target);
  }

  // optional uint32 error_detail = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_error_detail(), target);
  }

  // optional bytes merge_guid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_merge_guid(), target);
  }

  // optional uint32 download_file_dfs_ip = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_download_file_dfs_ip(), target);
  }

  // optional uint32 download_file_dfs_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_download_file_dfs_port(), target);
  }

  // optional string download_file_url = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_download_file_url().data(), static_cast<int>(this->_internal_download_file_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDRMFinalResult.download_file_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_download_file_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDRMFinalResult)
  return target;
}

size_t CMsgDRMFinalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDRMFinalResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes merge_guid = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merge_guid());
    }

    // optional string download_file_url = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_download_file_url());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 blob_download_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_blob_download_type());
    }

    // optional uint32 error_detail = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_error_detail());
    }

    // optional uint32 download_file_dfs_ip = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_download_file_dfs_ip());
    }

    // optional uint32 download_file_dfs_port = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_download_file_dfs_port());
    }

    // optional uint32 eResult = 1 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDRMFinalResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDRMFinalResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDRMFinalResult::GetClassData() const { return &_class_data_; }

void CMsgDRMFinalResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDRMFinalResult *>(to)->MergeFrom(
      static_cast<const CMsgDRMFinalResult &>(from));
}


void CMsgDRMFinalResult::MergeFrom(const CMsgDRMFinalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDRMFinalResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_merge_guid(from._internal_merge_guid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_download_file_url(from._internal_download_file_url());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      blob_download_type_ = from.blob_download_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      error_detail_ = from.error_detail_;
    }
    if (cached_has_bits & 0x00000020u) {
      download_file_dfs_ip_ = from.download_file_dfs_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      download_file_dfs_port_ = from.download_file_dfs_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDRMFinalResult::CopyFrom(const CMsgDRMFinalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDRMFinalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMFinalResult::IsInitialized() const {
  return true;
}

void CMsgDRMFinalResult::InternalSwap(CMsgDRMFinalResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &merge_guid_, lhs_arena,
      &other->merge_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &download_file_url_, lhs_arena,
      &other->download_file_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDRMFinalResult, download_file_dfs_port_)
      + sizeof(CMsgDRMFinalResult::download_file_dfs_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgDRMFinalResult, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDRMFinalResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[50]);
}

// ===================================================================

class CMsgClientDPCheckSpecialSurvey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDPCheckSpecialSurvey>()._has_bits_);
  static void set_has_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientDPCheckSpecialSurvey::CMsgClientDPCheckSpecialSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDPCheckSpecialSurvey)
}
CMsgClientDPCheckSpecialSurvey::CMsgClientDPCheckSpecialSurvey(const CMsgClientDPCheckSpecialSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  survey_id_ = from.survey_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientDPCheckSpecialSurvey)
}

inline void CMsgClientDPCheckSpecialSurvey::SharedCtor() {
survey_id_ = 0u;
}

CMsgClientDPCheckSpecialSurvey::~CMsgClientDPCheckSpecialSurvey() {
  // @@protoc_insertion_point(destructor:CMsgClientDPCheckSpecialSurvey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDPCheckSpecialSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientDPCheckSpecialSurvey::ArenaDtor(void* object) {
  CMsgClientDPCheckSpecialSurvey* _this = reinterpret_cast< CMsgClientDPCheckSpecialSurvey* >(object);
  (void)_this;
}
void CMsgClientDPCheckSpecialSurvey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDPCheckSpecialSurvey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDPCheckSpecialSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDPCheckSpecialSurvey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  survey_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDPCheckSpecialSurvey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 survey_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_survey_id(&has_bits);
          survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDPCheckSpecialSurvey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDPCheckSpecialSurvey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 survey_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_survey_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDPCheckSpecialSurvey)
  return target;
}

size_t CMsgClientDPCheckSpecialSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDPCheckSpecialSurvey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 survey_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_survey_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDPCheckSpecialSurvey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDPCheckSpecialSurvey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDPCheckSpecialSurvey::GetClassData() const { return &_class_data_; }

void CMsgClientDPCheckSpecialSurvey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDPCheckSpecialSurvey *>(to)->MergeFrom(
      static_cast<const CMsgClientDPCheckSpecialSurvey &>(from));
}


void CMsgClientDPCheckSpecialSurvey::MergeFrom(const CMsgClientDPCheckSpecialSurvey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDPCheckSpecialSurvey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_survey_id()) {
    _internal_set_survey_id(from._internal_survey_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDPCheckSpecialSurvey::CopyFrom(const CMsgClientDPCheckSpecialSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDPCheckSpecialSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPCheckSpecialSurvey::IsInitialized() const {
  return true;
}

void CMsgClientDPCheckSpecialSurvey::InternalSwap(CMsgClientDPCheckSpecialSurvey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(survey_id_, other->survey_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDPCheckSpecialSurvey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[51]);
}

// ===================================================================

class CMsgClientDPCheckSpecialSurveyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDPCheckSpecialSurveyResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_software(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientDPCheckSpecialSurveyResponse::CMsgClientDPCheckSpecialSurveyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDPCheckSpecialSurveyResponse)
}
CMsgClientDPCheckSpecialSurveyResponse::CMsgClientDPCheckSpecialSurveyResponse(const CMsgClientDPCheckSpecialSurveyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  custom_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    custom_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_url()) {
    custom_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_url(), 
      GetArenaForAllocation());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&state_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientDPCheckSpecialSurveyResponse)
}

inline void CMsgClientDPCheckSpecialSurveyResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
custom_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  custom_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_software_) -
    reinterpret_cast<char*>(&state_)) + sizeof(include_software_));
eresult_ = 2u;
}

CMsgClientDPCheckSpecialSurveyResponse::~CMsgClientDPCheckSpecialSurveyResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientDPCheckSpecialSurveyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDPCheckSpecialSurveyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientDPCheckSpecialSurveyResponse::ArenaDtor(void* object) {
  CMsgClientDPCheckSpecialSurveyResponse* _this = reinterpret_cast< CMsgClientDPCheckSpecialSurveyResponse* >(object);
  (void)_this;
}
void CMsgClientDPCheckSpecialSurveyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDPCheckSpecialSurveyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDPCheckSpecialSurveyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDPCheckSpecialSurveyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_software_) -
        reinterpret_cast<char*>(&state_)) + sizeof(include_software_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDPCheckSpecialSurveyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eResult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientDPCheckSpecialSurveyResponse.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_custom_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientDPCheckSpecialSurveyResponse.custom_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_software = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_include_software(&has_bits);
          include_software_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDPCheckSpecialSurveyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDPCheckSpecialSurveyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eResult = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientDPCheckSpecialSurveyResponse.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string custom_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_url().data(), static_cast<int>(this->_internal_custom_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientDPCheckSpecialSurveyResponse.custom_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_custom_url(), target);
  }

  // optional bool include_software = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_include_software(), target);
  }

  // optional bytes token = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDPCheckSpecialSurveyResponse)
  return target;
}

size_t CMsgClientDPCheckSpecialSurveyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDPCheckSpecialSurveyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string custom_url = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_url());
    }

    // optional bytes token = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
    }

    // optional bool include_software = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 eResult = 1 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDPCheckSpecialSurveyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDPCheckSpecialSurveyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDPCheckSpecialSurveyResponse::GetClassData() const { return &_class_data_; }

void CMsgClientDPCheckSpecialSurveyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDPCheckSpecialSurveyResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientDPCheckSpecialSurveyResponse &>(from));
}


void CMsgClientDPCheckSpecialSurveyResponse::MergeFrom(const CMsgClientDPCheckSpecialSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDPCheckSpecialSurveyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_custom_url(from._internal_custom_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000010u) {
      include_software_ = from.include_software_;
    }
    if (cached_has_bits & 0x00000020u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDPCheckSpecialSurveyResponse::CopyFrom(const CMsgClientDPCheckSpecialSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDPCheckSpecialSurveyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPCheckSpecialSurveyResponse::IsInitialized() const {
  return true;
}

void CMsgClientDPCheckSpecialSurveyResponse::InternalSwap(CMsgClientDPCheckSpecialSurveyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_url_, lhs_arena,
      &other->custom_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, include_software_)
      + sizeof(CMsgClientDPCheckSpecialSurveyResponse::include_software_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientDPCheckSpecialSurveyResponse, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDPCheckSpecialSurveyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[52]);
}

// ===================================================================

class CMsgClientDPSendSpecialSurveyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDPSendSpecialSurveyResponse>()._has_bits_);
  static void set_has_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientDPSendSpecialSurveyResponse::CMsgClientDPSendSpecialSurveyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDPSendSpecialSurveyResponse)
}
CMsgClientDPSendSpecialSurveyResponse::CMsgClientDPSendSpecialSurveyResponse(const CMsgClientDPSendSpecialSurveyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  survey_id_ = from.survey_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientDPSendSpecialSurveyResponse)
}

inline void CMsgClientDPSendSpecialSurveyResponse::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
survey_id_ = 0u;
}

CMsgClientDPSendSpecialSurveyResponse::~CMsgClientDPSendSpecialSurveyResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientDPSendSpecialSurveyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDPSendSpecialSurveyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientDPSendSpecialSurveyResponse::ArenaDtor(void* object) {
  CMsgClientDPSendSpecialSurveyResponse* _this = reinterpret_cast< CMsgClientDPSendSpecialSurveyResponse* >(object);
  (void)_this;
}
void CMsgClientDPSendSpecialSurveyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDPSendSpecialSurveyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDPSendSpecialSurveyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDPSendSpecialSurveyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  survey_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDPSendSpecialSurveyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 survey_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_survey_id(&has_bits);
          survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDPSendSpecialSurveyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDPSendSpecialSurveyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 survey_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_survey_id(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDPSendSpecialSurveyResponse)
  return target;
}

size_t CMsgClientDPSendSpecialSurveyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDPSendSpecialSurveyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 survey_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_survey_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDPSendSpecialSurveyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDPSendSpecialSurveyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDPSendSpecialSurveyResponse::GetClassData() const { return &_class_data_; }

void CMsgClientDPSendSpecialSurveyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDPSendSpecialSurveyResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientDPSendSpecialSurveyResponse &>(from));
}


void CMsgClientDPSendSpecialSurveyResponse::MergeFrom(const CMsgClientDPSendSpecialSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDPSendSpecialSurveyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      survey_id_ = from.survey_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDPSendSpecialSurveyResponse::CopyFrom(const CMsgClientDPSendSpecialSurveyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDPSendSpecialSurveyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPSendSpecialSurveyResponse::IsInitialized() const {
  return true;
}

void CMsgClientDPSendSpecialSurveyResponse::InternalSwap(CMsgClientDPSendSpecialSurveyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(survey_id_, other->survey_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDPSendSpecialSurveyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[53]);
}

// ===================================================================

class CMsgClientDPSendSpecialSurveyResponseReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDPSendSpecialSurveyResponseReply>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientDPSendSpecialSurveyResponseReply::CMsgClientDPSendSpecialSurveyResponseReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDPSendSpecialSurveyResponseReply)
}
CMsgClientDPSendSpecialSurveyResponseReply::CMsgClientDPSendSpecialSurveyResponseReply(const CMsgClientDPSendSpecialSurveyResponseReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientDPSendSpecialSurveyResponseReply)
}

inline void CMsgClientDPSendSpecialSurveyResponseReply::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
eresult_ = 2u;
}

CMsgClientDPSendSpecialSurveyResponseReply::~CMsgClientDPSendSpecialSurveyResponseReply() {
  // @@protoc_insertion_point(destructor:CMsgClientDPSendSpecialSurveyResponseReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDPSendSpecialSurveyResponseReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientDPSendSpecialSurveyResponseReply::ArenaDtor(void* object) {
  CMsgClientDPSendSpecialSurveyResponseReply* _this = reinterpret_cast< CMsgClientDPSendSpecialSurveyResponseReply* >(object);
  (void)_this;
}
void CMsgClientDPSendSpecialSurveyResponseReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDPSendSpecialSurveyResponseReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDPSendSpecialSurveyResponseReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDPSendSpecialSurveyResponseReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDPSendSpecialSurveyResponseReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eResult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDPSendSpecialSurveyResponseReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDPSendSpecialSurveyResponseReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eResult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bytes token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDPSendSpecialSurveyResponseReply)
  return target;
}

size_t CMsgClientDPSendSpecialSurveyResponseReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDPSendSpecialSurveyResponseReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_token());
    }

    // optional uint32 eResult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDPSendSpecialSurveyResponseReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDPSendSpecialSurveyResponseReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDPSendSpecialSurveyResponseReply::GetClassData() const { return &_class_data_; }

void CMsgClientDPSendSpecialSurveyResponseReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDPSendSpecialSurveyResponseReply *>(to)->MergeFrom(
      static_cast<const CMsgClientDPSendSpecialSurveyResponseReply &>(from));
}


void CMsgClientDPSendSpecialSurveyResponseReply::MergeFrom(const CMsgClientDPSendSpecialSurveyResponseReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDPSendSpecialSurveyResponseReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDPSendSpecialSurveyResponseReply::CopyFrom(const CMsgClientDPSendSpecialSurveyResponseReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDPSendSpecialSurveyResponseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPSendSpecialSurveyResponseReply::IsInitialized() const {
  return true;
}

void CMsgClientDPSendSpecialSurveyResponseReply::InternalSwap(CMsgClientDPSendSpecialSurveyResponseReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDPSendSpecialSurveyResponseReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[54]);
}

// ===================================================================

class CMsgClientRequestForgottenPasswordEmail::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestForgottenPasswordEmail>()._has_bits_);
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password_tried(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientRequestForgottenPasswordEmail::CMsgClientRequestForgottenPasswordEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestForgottenPasswordEmail)
}
CMsgClientRequestForgottenPasswordEmail::CMsgClientRequestForgottenPasswordEmail(const CMsgClientRequestForgottenPasswordEmail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  password_tried_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_tried_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password_tried()) {
    password_tried_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password_tried(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestForgottenPasswordEmail)
}

inline void CMsgClientRequestForgottenPasswordEmail::SharedCtor() {
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_tried_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_tried_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientRequestForgottenPasswordEmail::~CMsgClientRequestForgottenPasswordEmail() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestForgottenPasswordEmail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestForgottenPasswordEmail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_tried_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestForgottenPasswordEmail::ArenaDtor(void* object) {
  CMsgClientRequestForgottenPasswordEmail* _this = reinterpret_cast< CMsgClientRequestForgottenPasswordEmail* >(object);
  (void)_this;
}
void CMsgClientRequestForgottenPasswordEmail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestForgottenPasswordEmail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestForgottenPasswordEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestForgottenPasswordEmail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_tried_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestForgottenPasswordEmail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestForgottenPasswordEmail.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string password_tried = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_tried();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestForgottenPasswordEmail.password_tried");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestForgottenPasswordEmail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestForgottenPasswordEmail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestForgottenPasswordEmail.account_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account_name(), target);
  }

  // optional string password_tried = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password_tried().data(), static_cast<int>(this->_internal_password_tried().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestForgottenPasswordEmail.password_tried");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_tried(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestForgottenPasswordEmail)
  return target;
}

size_t CMsgClientRequestForgottenPasswordEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestForgottenPasswordEmail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string account_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string password_tried = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password_tried());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestForgottenPasswordEmail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestForgottenPasswordEmail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestForgottenPasswordEmail::GetClassData() const { return &_class_data_; }

void CMsgClientRequestForgottenPasswordEmail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestForgottenPasswordEmail *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestForgottenPasswordEmail &>(from));
}


void CMsgClientRequestForgottenPasswordEmail::MergeFrom(const CMsgClientRequestForgottenPasswordEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestForgottenPasswordEmail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password_tried(from._internal_password_tried());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestForgottenPasswordEmail::CopyFrom(const CMsgClientRequestForgottenPasswordEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestForgottenPasswordEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestForgottenPasswordEmail::IsInitialized() const {
  return true;
}

void CMsgClientRequestForgottenPasswordEmail::InternalSwap(CMsgClientRequestForgottenPasswordEmail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, lhs_arena,
      &other->account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_tried_, lhs_arena,
      &other->password_tried_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestForgottenPasswordEmail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[55]);
}

// ===================================================================

class CMsgClientRequestForgottenPasswordEmailResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestForgottenPasswordEmailResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_secret_question(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientRequestForgottenPasswordEmailResponse::CMsgClientRequestForgottenPasswordEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestForgottenPasswordEmailResponse)
}
CMsgClientRequestForgottenPasswordEmailResponse::CMsgClientRequestForgottenPasswordEmailResponse(const CMsgClientRequestForgottenPasswordEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_secret_question_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(use_secret_question_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestForgottenPasswordEmailResponse)
}

inline void CMsgClientRequestForgottenPasswordEmailResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eresult_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_secret_question_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(use_secret_question_));
}

CMsgClientRequestForgottenPasswordEmailResponse::~CMsgClientRequestForgottenPasswordEmailResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestForgottenPasswordEmailResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientRequestForgottenPasswordEmailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRequestForgottenPasswordEmailResponse::ArenaDtor(void* object) {
  CMsgClientRequestForgottenPasswordEmailResponse* _this = reinterpret_cast< CMsgClientRequestForgottenPasswordEmailResponse* >(object);
  (void)_this;
}
void CMsgClientRequestForgottenPasswordEmailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestForgottenPasswordEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestForgottenPasswordEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestForgottenPasswordEmailResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&eresult_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_secret_question_) -
        reinterpret_cast<char*>(&eresult_)) + sizeof(use_secret_question_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestForgottenPasswordEmailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_secret_question = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_use_secret_question(&has_bits);
          use_secret_question_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestForgottenPasswordEmailResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestForgottenPasswordEmailResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eResult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bool use_secret_question = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_secret_question(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestForgottenPasswordEmailResponse)
  return target;
}

size_t CMsgClientRequestForgottenPasswordEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestForgottenPasswordEmailResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 eResult = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

    // optional bool use_secret_question = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestForgottenPasswordEmailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientRequestForgottenPasswordEmailResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestForgottenPasswordEmailResponse::GetClassData() const { return &_class_data_; }

void CMsgClientRequestForgottenPasswordEmailResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientRequestForgottenPasswordEmailResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientRequestForgottenPasswordEmailResponse &>(from));
}


void CMsgClientRequestForgottenPasswordEmailResponse::MergeFrom(const CMsgClientRequestForgottenPasswordEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestForgottenPasswordEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_secret_question_ = from.use_secret_question_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestForgottenPasswordEmailResponse::CopyFrom(const CMsgClientRequestForgottenPasswordEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestForgottenPasswordEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestForgottenPasswordEmailResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestForgottenPasswordEmailResponse::InternalSwap(CMsgClientRequestForgottenPasswordEmailResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmailResponse, use_secret_question_)
      + sizeof(CMsgClientRequestForgottenPasswordEmailResponse::use_secret_question_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientRequestForgottenPasswordEmailResponse, eresult_)>(
          reinterpret_cast<char*>(&eresult_),
          reinterpret_cast<char*>(&other->eresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestForgottenPasswordEmailResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[56]);
}

// ===================================================================

class CMsgClientItemAnnouncements_UnseenItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientItemAnnouncements_UnseenItem>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_context_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtime32_gained(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientItemAnnouncements_UnseenItem::CMsgClientItemAnnouncements_UnseenItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientItemAnnouncements.UnseenItem)
}
CMsgClientItemAnnouncements_UnseenItem::CMsgClientItemAnnouncements_UnseenItem(const CMsgClientItemAnnouncements_UnseenItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&context_id_, &from.context_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_appid_) -
    reinterpret_cast<char*>(&context_id_)) + sizeof(source_appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientItemAnnouncements.UnseenItem)
}

inline void CMsgClientItemAnnouncements_UnseenItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&context_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_appid_) -
    reinterpret_cast<char*>(&context_id_)) + sizeof(source_appid_));
}

CMsgClientItemAnnouncements_UnseenItem::~CMsgClientItemAnnouncements_UnseenItem() {
  // @@protoc_insertion_point(destructor:CMsgClientItemAnnouncements.UnseenItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientItemAnnouncements_UnseenItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientItemAnnouncements_UnseenItem::ArenaDtor(void* object) {
  CMsgClientItemAnnouncements_UnseenItem* _this = reinterpret_cast< CMsgClientItemAnnouncements_UnseenItem* >(object);
  (void)_this;
}
void CMsgClientItemAnnouncements_UnseenItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientItemAnnouncements_UnseenItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientItemAnnouncements_UnseenItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientItemAnnouncements.UnseenItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&context_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_appid_) -
        reinterpret_cast<char*>(&context_id_)) + sizeof(source_appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientItemAnnouncements_UnseenItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 context_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_context_id(&has_bits);
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 asset_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_asset_id(&has_bits);
          asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_gained = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_rtime32_gained(&has_bits);
          rtime32_gained_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_source_appid(&has_bits);
          source_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientItemAnnouncements_UnseenItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientItemAnnouncements.UnseenItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 context_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_context_id(), target);
  }

  // optional uint64 asset_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_asset_id(), target);
  }

  // optional uint64 amount = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  // optional fixed32 rtime32_gained = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_rtime32_gained(), target);
  }

  // optional uint32 source_appid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_source_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientItemAnnouncements.UnseenItem)
  return target;
}

size_t CMsgClientItemAnnouncements_UnseenItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientItemAnnouncements.UnseenItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 context_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_context_id());
    }

    // optional uint64 asset_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_asset_id());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional fixed32 rtime32_gained = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint64 amount = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
    }

    // optional uint32 source_appid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientItemAnnouncements_UnseenItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientItemAnnouncements_UnseenItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientItemAnnouncements_UnseenItem::GetClassData() const { return &_class_data_; }

void CMsgClientItemAnnouncements_UnseenItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientItemAnnouncements_UnseenItem *>(to)->MergeFrom(
      static_cast<const CMsgClientItemAnnouncements_UnseenItem &>(from));
}


void CMsgClientItemAnnouncements_UnseenItem::MergeFrom(const CMsgClientItemAnnouncements_UnseenItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientItemAnnouncements.UnseenItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      context_id_ = from.context_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      asset_id_ = from.asset_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime32_gained_ = from.rtime32_gained_;
    }
    if (cached_has_bits & 0x00000010u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000020u) {
      source_appid_ = from.source_appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientItemAnnouncements_UnseenItem::CopyFrom(const CMsgClientItemAnnouncements_UnseenItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientItemAnnouncements.UnseenItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientItemAnnouncements_UnseenItem::IsInitialized() const {
  return true;
}

void CMsgClientItemAnnouncements_UnseenItem::InternalSwap(CMsgClientItemAnnouncements_UnseenItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, source_appid_)
      + sizeof(CMsgClientItemAnnouncements_UnseenItem::source_appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientItemAnnouncements_UnseenItem, context_id_)>(
          reinterpret_cast<char*>(&context_id_),
          reinterpret_cast<char*>(&other->context_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientItemAnnouncements_UnseenItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[57]);
}

// ===================================================================

class CMsgClientItemAnnouncements::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientItemAnnouncements>()._has_bits_);
  static void set_has_count_new_items(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientItemAnnouncements::CMsgClientItemAnnouncements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unseen_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientItemAnnouncements)
}
CMsgClientItemAnnouncements::CMsgClientItemAnnouncements(const CMsgClientItemAnnouncements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unseen_items_(from.unseen_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_new_items_ = from.count_new_items_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientItemAnnouncements)
}

inline void CMsgClientItemAnnouncements::SharedCtor() {
count_new_items_ = 0u;
}

CMsgClientItemAnnouncements::~CMsgClientItemAnnouncements() {
  // @@protoc_insertion_point(destructor:CMsgClientItemAnnouncements)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientItemAnnouncements::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientItemAnnouncements::ArenaDtor(void* object) {
  CMsgClientItemAnnouncements* _this = reinterpret_cast< CMsgClientItemAnnouncements* >(object);
  (void)_this;
}
void CMsgClientItemAnnouncements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientItemAnnouncements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientItemAnnouncements::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientItemAnnouncements)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unseen_items_.Clear();
  count_new_items_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientItemAnnouncements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 count_new_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count_new_items(&has_bits);
          count_new_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientItemAnnouncements.UnseenItem unseen_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unseen_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientItemAnnouncements::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientItemAnnouncements)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count_new_items = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count_new_items(), target);
  }

  // repeated .CMsgClientItemAnnouncements.UnseenItem unseen_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unseen_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_unseen_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientItemAnnouncements)
  return target;
}

size_t CMsgClientItemAnnouncements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientItemAnnouncements)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientItemAnnouncements.UnseenItem unseen_items = 2;
  total_size += 1UL * this->_internal_unseen_items_size();
  for (const auto& msg : this->unseen_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 count_new_items = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count_new_items());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientItemAnnouncements::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientItemAnnouncements::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientItemAnnouncements::GetClassData() const { return &_class_data_; }

void CMsgClientItemAnnouncements::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientItemAnnouncements *>(to)->MergeFrom(
      static_cast<const CMsgClientItemAnnouncements &>(from));
}


void CMsgClientItemAnnouncements::MergeFrom(const CMsgClientItemAnnouncements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientItemAnnouncements)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unseen_items_.MergeFrom(from.unseen_items_);
  if (from._internal_has_count_new_items()) {
    _internal_set_count_new_items(from._internal_count_new_items());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientItemAnnouncements::CopyFrom(const CMsgClientItemAnnouncements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientItemAnnouncements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientItemAnnouncements::IsInitialized() const {
  return true;
}

void CMsgClientItemAnnouncements::InternalSwap(CMsgClientItemAnnouncements* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unseen_items_.InternalSwap(&other->unseen_items_);
  swap(count_new_items_, other->count_new_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientItemAnnouncements::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[58]);
}

// ===================================================================

class CMsgClientRequestItemAnnouncements::_Internal {
 public:
};

CMsgClientRequestItemAnnouncements::CMsgClientRequestItemAnnouncements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestItemAnnouncements)
}
CMsgClientRequestItemAnnouncements::CMsgClientRequestItemAnnouncements(const CMsgClientRequestItemAnnouncements& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestItemAnnouncements)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestItemAnnouncements::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestItemAnnouncements::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestItemAnnouncements::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[59]);
}

// ===================================================================

class CMsgClientUserNotifications_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUserNotifications_Notification>()._has_bits_);
  static void set_has_user_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientUserNotifications_Notification::CMsgClientUserNotifications_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUserNotifications.Notification)
}
CMsgClientUserNotifications_Notification::CMsgClientUserNotifications_Notification(const CMsgClientUserNotifications_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_notification_type_, &from.user_notification_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&user_notification_type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUserNotifications.Notification)
}

inline void CMsgClientUserNotifications_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_notification_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&user_notification_type_)) + sizeof(count_));
}

CMsgClientUserNotifications_Notification::~CMsgClientUserNotifications_Notification() {
  // @@protoc_insertion_point(destructor:CMsgClientUserNotifications.Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUserNotifications_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUserNotifications_Notification::ArenaDtor(void* object) {
  CMsgClientUserNotifications_Notification* _this = reinterpret_cast< CMsgClientUserNotifications_Notification* >(object);
  (void)_this;
}
void CMsgClientUserNotifications_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUserNotifications_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUserNotifications_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUserNotifications.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_notification_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&user_notification_type_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUserNotifications_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 user_notification_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_notification_type(&has_bits);
          user_notification_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUserNotifications_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUserNotifications.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_notification_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_notification_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUserNotifications.Notification)
  return target;
}

size_t CMsgClientUserNotifications_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUserNotifications.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 user_notification_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_notification_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUserNotifications_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUserNotifications_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUserNotifications_Notification::GetClassData() const { return &_class_data_; }

void CMsgClientUserNotifications_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUserNotifications_Notification *>(to)->MergeFrom(
      static_cast<const CMsgClientUserNotifications_Notification &>(from));
}


void CMsgClientUserNotifications_Notification::MergeFrom(const CMsgClientUserNotifications_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUserNotifications.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_notification_type_ = from.user_notification_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUserNotifications_Notification::CopyFrom(const CMsgClientUserNotifications_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUserNotifications.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUserNotifications_Notification::IsInitialized() const {
  return true;
}

void CMsgClientUserNotifications_Notification::InternalSwap(CMsgClientUserNotifications_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUserNotifications_Notification, count_)
      + sizeof(CMsgClientUserNotifications_Notification::count_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUserNotifications_Notification, user_notification_type_)>(
          reinterpret_cast<char*>(&user_notification_type_),
          reinterpret_cast<char*>(&other->user_notification_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUserNotifications_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[60]);
}

// ===================================================================

class CMsgClientUserNotifications::_Internal {
 public:
};

CMsgClientUserNotifications::CMsgClientUserNotifications(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUserNotifications)
}
CMsgClientUserNotifications::CMsgClientUserNotifications(const CMsgClientUserNotifications& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientUserNotifications)
}

inline void CMsgClientUserNotifications::SharedCtor() {
}

CMsgClientUserNotifications::~CMsgClientUserNotifications() {
  // @@protoc_insertion_point(destructor:CMsgClientUserNotifications)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUserNotifications::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUserNotifications::ArenaDtor(void* object) {
  CMsgClientUserNotifications* _this = reinterpret_cast< CMsgClientUserNotifications* >(object);
  (void)_this;
}
void CMsgClientUserNotifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUserNotifications::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUserNotifications::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUserNotifications)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUserNotifications::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientUserNotifications.Notification notifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUserNotifications::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUserNotifications)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientUserNotifications.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notifications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUserNotifications)
  return target;
}

size_t CMsgClientUserNotifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUserNotifications)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientUserNotifications.Notification notifications = 1;
  total_size += 1UL * this->_internal_notifications_size();
  for (const auto& msg : this->notifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUserNotifications::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUserNotifications::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUserNotifications::GetClassData() const { return &_class_data_; }

void CMsgClientUserNotifications::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUserNotifications *>(to)->MergeFrom(
      static_cast<const CMsgClientUserNotifications &>(from));
}


void CMsgClientUserNotifications::MergeFrom(const CMsgClientUserNotifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUserNotifications)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUserNotifications::CopyFrom(const CMsgClientUserNotifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUserNotifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUserNotifications::IsInitialized() const {
  return true;
}

void CMsgClientUserNotifications::InternalSwap(CMsgClientUserNotifications* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notifications_.InternalSwap(&other->notifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUserNotifications::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[61]);
}

// ===================================================================

class CMsgClientCommentNotifications::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientCommentNotifications>()._has_bits_);
  static void set_has_count_new_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count_new_comments_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count_new_comments_subscriptions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientCommentNotifications::CMsgClientCommentNotifications(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientCommentNotifications)
}
CMsgClientCommentNotifications::CMsgClientCommentNotifications(const CMsgClientCommentNotifications& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_new_comments_, &from.count_new_comments_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_new_comments_subscriptions_) -
    reinterpret_cast<char*>(&count_new_comments_)) + sizeof(count_new_comments_subscriptions_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientCommentNotifications)
}

inline void CMsgClientCommentNotifications::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_new_comments_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_new_comments_subscriptions_) -
    reinterpret_cast<char*>(&count_new_comments_)) + sizeof(count_new_comments_subscriptions_));
}

CMsgClientCommentNotifications::~CMsgClientCommentNotifications() {
  // @@protoc_insertion_point(destructor:CMsgClientCommentNotifications)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientCommentNotifications::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientCommentNotifications::ArenaDtor(void* object) {
  CMsgClientCommentNotifications* _this = reinterpret_cast< CMsgClientCommentNotifications* >(object);
  (void)_this;
}
void CMsgClientCommentNotifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientCommentNotifications::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientCommentNotifications::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientCommentNotifications)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&count_new_comments_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_new_comments_subscriptions_) -
        reinterpret_cast<char*>(&count_new_comments_)) + sizeof(count_new_comments_subscriptions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientCommentNotifications::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 count_new_comments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count_new_comments(&has_bits);
          count_new_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count_new_comments_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count_new_comments_owner(&has_bits);
          count_new_comments_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count_new_comments_subscriptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count_new_comments_subscriptions(&has_bits);
          count_new_comments_subscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientCommentNotifications::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientCommentNotifications)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count_new_comments = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count_new_comments(), target);
  }

  // optional uint32 count_new_comments_owner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_new_comments_owner(), target);
  }

  // optional uint32 count_new_comments_subscriptions = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count_new_comments_subscriptions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientCommentNotifications)
  return target;
}

size_t CMsgClientCommentNotifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientCommentNotifications)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 count_new_comments = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count_new_comments());
    }

    // optional uint32 count_new_comments_owner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count_new_comments_owner());
    }

    // optional uint32 count_new_comments_subscriptions = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count_new_comments_subscriptions());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientCommentNotifications::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientCommentNotifications::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientCommentNotifications::GetClassData() const { return &_class_data_; }

void CMsgClientCommentNotifications::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientCommentNotifications *>(to)->MergeFrom(
      static_cast<const CMsgClientCommentNotifications &>(from));
}


void CMsgClientCommentNotifications::MergeFrom(const CMsgClientCommentNotifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientCommentNotifications)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      count_new_comments_ = from.count_new_comments_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_new_comments_owner_ = from.count_new_comments_owner_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_new_comments_subscriptions_ = from.count_new_comments_subscriptions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientCommentNotifications::CopyFrom(const CMsgClientCommentNotifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientCommentNotifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCommentNotifications::IsInitialized() const {
  return true;
}

void CMsgClientCommentNotifications::InternalSwap(CMsgClientCommentNotifications* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientCommentNotifications, count_new_comments_subscriptions_)
      + sizeof(CMsgClientCommentNotifications::count_new_comments_subscriptions_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientCommentNotifications, count_new_comments_)>(
          reinterpret_cast<char*>(&count_new_comments_),
          reinterpret_cast<char*>(&other->count_new_comments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientCommentNotifications::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[62]);
}

// ===================================================================

class CMsgClientRequestCommentNotifications::_Internal {
 public:
};

CMsgClientRequestCommentNotifications::CMsgClientRequestCommentNotifications(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestCommentNotifications)
}
CMsgClientRequestCommentNotifications::CMsgClientRequestCommentNotifications(const CMsgClientRequestCommentNotifications& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestCommentNotifications)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestCommentNotifications::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestCommentNotifications::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestCommentNotifications::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[63]);
}

// ===================================================================

class CMsgClientOfflineMessageNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientOfflineMessageNotification>()._has_bits_);
  static void set_has_offline_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientOfflineMessageNotification::CMsgClientOfflineMessageNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friends_with_offline_messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientOfflineMessageNotification)
}
CMsgClientOfflineMessageNotification::CMsgClientOfflineMessageNotification(const CMsgClientOfflineMessageNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      friends_with_offline_messages_(from.friends_with_offline_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offline_messages_ = from.offline_messages_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientOfflineMessageNotification)
}

inline void CMsgClientOfflineMessageNotification::SharedCtor() {
offline_messages_ = 0u;
}

CMsgClientOfflineMessageNotification::~CMsgClientOfflineMessageNotification() {
  // @@protoc_insertion_point(destructor:CMsgClientOfflineMessageNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientOfflineMessageNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientOfflineMessageNotification::ArenaDtor(void* object) {
  CMsgClientOfflineMessageNotification* _this = reinterpret_cast< CMsgClientOfflineMessageNotification* >(object);
  (void)_this;
}
void CMsgClientOfflineMessageNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientOfflineMessageNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientOfflineMessageNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientOfflineMessageNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_with_offline_messages_.Clear();
  offline_messages_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientOfflineMessageNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 offline_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_offline_messages(&has_bits);
          offline_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 friends_with_offline_messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_friends_with_offline_messages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_friends_with_offline_messages(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientOfflineMessageNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientOfflineMessageNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 offline_messages = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_offline_messages(), target);
  }

  // repeated uint32 friends_with_offline_messages = 2;
  for (int i = 0, n = this->_internal_friends_with_offline_messages_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_friends_with_offline_messages(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientOfflineMessageNotification)
  return target;
}

size_t CMsgClientOfflineMessageNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientOfflineMessageNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 friends_with_offline_messages = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->friends_with_offline_messages_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_friends_with_offline_messages_size());
    total_size += data_size;
  }

  // optional uint32 offline_messages = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offline_messages());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientOfflineMessageNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientOfflineMessageNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientOfflineMessageNotification::GetClassData() const { return &_class_data_; }

void CMsgClientOfflineMessageNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientOfflineMessageNotification *>(to)->MergeFrom(
      static_cast<const CMsgClientOfflineMessageNotification &>(from));
}


void CMsgClientOfflineMessageNotification::MergeFrom(const CMsgClientOfflineMessageNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientOfflineMessageNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friends_with_offline_messages_.MergeFrom(from.friends_with_offline_messages_);
  if (from._internal_has_offline_messages()) {
    _internal_set_offline_messages(from._internal_offline_messages());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientOfflineMessageNotification::CopyFrom(const CMsgClientOfflineMessageNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientOfflineMessageNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOfflineMessageNotification::IsInitialized() const {
  return true;
}

void CMsgClientOfflineMessageNotification::InternalSwap(CMsgClientOfflineMessageNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friends_with_offline_messages_.InternalSwap(&other->friends_with_offline_messages_);
  swap(offline_messages_, other->offline_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientOfflineMessageNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[64]);
}

// ===================================================================

class CMsgClientRequestOfflineMessageCount::_Internal {
 public:
};

CMsgClientRequestOfflineMessageCount::CMsgClientRequestOfflineMessageCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestOfflineMessageCount)
}
CMsgClientRequestOfflineMessageCount::CMsgClientRequestOfflineMessageCount(const CMsgClientRequestOfflineMessageCount& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestOfflineMessageCount)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestOfflineMessageCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestOfflineMessageCount::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestOfflineMessageCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[65]);
}

// ===================================================================

class CMsgClientChatGetFriendMessageHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChatGetFriendMessageHistory>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientChatGetFriendMessageHistory::CMsgClientChatGetFriendMessageHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientChatGetFriendMessageHistory)
}
CMsgClientChatGetFriendMessageHistory::CMsgClientChatGetFriendMessageHistory(const CMsgClientChatGetFriendMessageHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientChatGetFriendMessageHistory)
}

inline void CMsgClientChatGetFriendMessageHistory::SharedCtor() {
steamid_ = uint64_t{0u};
}

CMsgClientChatGetFriendMessageHistory::~CMsgClientChatGetFriendMessageHistory() {
  // @@protoc_insertion_point(destructor:CMsgClientChatGetFriendMessageHistory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientChatGetFriendMessageHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientChatGetFriendMessageHistory::ArenaDtor(void* object) {
  CMsgClientChatGetFriendMessageHistory* _this = reinterpret_cast< CMsgClientChatGetFriendMessageHistory* >(object);
  (void)_this;
}
void CMsgClientChatGetFriendMessageHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientChatGetFriendMessageHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientChatGetFriendMessageHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChatGetFriendMessageHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChatGetFriendMessageHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientChatGetFriendMessageHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChatGetFriendMessageHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChatGetFriendMessageHistory)
  return target;
}

size_t CMsgClientChatGetFriendMessageHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChatGetFriendMessageHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientChatGetFriendMessageHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientChatGetFriendMessageHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientChatGetFriendMessageHistory::GetClassData() const { return &_class_data_; }

void CMsgClientChatGetFriendMessageHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientChatGetFriendMessageHistory *>(to)->MergeFrom(
      static_cast<const CMsgClientChatGetFriendMessageHistory &>(from));
}


void CMsgClientChatGetFriendMessageHistory::MergeFrom(const CMsgClientChatGetFriendMessageHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChatGetFriendMessageHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientChatGetFriendMessageHistory::CopyFrom(const CMsgClientChatGetFriendMessageHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChatGetFriendMessageHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatGetFriendMessageHistory::IsInitialized() const {
  return true;
}

void CMsgClientChatGetFriendMessageHistory::InternalSwap(CMsgClientChatGetFriendMessageHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChatGetFriendMessageHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[66]);
}

// ===================================================================

class CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unread(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
}
CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage(const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(unread_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
}

inline void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unread_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(unread_));
}

CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::~CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage() {
  // @@protoc_insertion_point(destructor:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::ArenaDtor(void* object) {
  CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* _this = reinterpret_cast< CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* >(object);
  (void)_this;
}
void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(unread_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_unread(&has_bits);
          unread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional bool unread = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_unread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
  return target;
}

size_t CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional bool unread = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::GetClassData() const { return &_class_data_; }

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage *>(to)->MergeFrom(
      static_cast<const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage &>(from));
}


void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::MergeFrom(const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      unread_ = from.unread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::CopyFrom(const CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::IsInitialized() const {
  return true;
}

void CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::InternalSwap(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, unread_)
      + sizeof(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::unread_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[67]);
}

// ===================================================================

class CMsgClientChatGetFriendMessageHistoryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChatGetFriendMessageHistoryResponse>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientChatGetFriendMessageHistoryResponse::CMsgClientChatGetFriendMessageHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientChatGetFriendMessageHistoryResponse)
}
CMsgClientChatGetFriendMessageHistoryResponse::CMsgClientChatGetFriendMessageHistoryResponse(const CMsgClientChatGetFriendMessageHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientChatGetFriendMessageHistoryResponse)
}

inline void CMsgClientChatGetFriendMessageHistoryResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(success_));
}

CMsgClientChatGetFriendMessageHistoryResponse::~CMsgClientChatGetFriendMessageHistoryResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientChatGetFriendMessageHistoryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientChatGetFriendMessageHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientChatGetFriendMessageHistoryResponse::ArenaDtor(void* object) {
  CMsgClientChatGetFriendMessageHistoryResponse* _this = reinterpret_cast< CMsgClientChatGetFriendMessageHistoryResponse* >(object);
  (void)_this;
}
void CMsgClientChatGetFriendMessageHistoryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientChatGetFriendMessageHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientChatGetFriendMessageHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChatGetFriendMessageHistoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChatGetFriendMessageHistoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientChatGetFriendMessageHistoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChatGetFriendMessageHistoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 success = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_success(), target);
  }

  // repeated .CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChatGetFriendMessageHistoryResponse)
  return target;
}

size_t CMsgClientChatGetFriendMessageHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChatGetFriendMessageHistoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientChatGetFriendMessageHistoryResponse.FriendMessage messages = 3;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 success = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_success());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientChatGetFriendMessageHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientChatGetFriendMessageHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientChatGetFriendMessageHistoryResponse::GetClassData() const { return &_class_data_; }

void CMsgClientChatGetFriendMessageHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientChatGetFriendMessageHistoryResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientChatGetFriendMessageHistoryResponse &>(from));
}


void CMsgClientChatGetFriendMessageHistoryResponse::MergeFrom(const CMsgClientChatGetFriendMessageHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChatGetFriendMessageHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientChatGetFriendMessageHistoryResponse::CopyFrom(const CMsgClientChatGetFriendMessageHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChatGetFriendMessageHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatGetFriendMessageHistoryResponse::IsInitialized() const {
  return true;
}

void CMsgClientChatGetFriendMessageHistoryResponse::InternalSwap(CMsgClientChatGetFriendMessageHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse, success_)
      + sizeof(CMsgClientChatGetFriendMessageHistoryResponse::success_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientChatGetFriendMessageHistoryResponse, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChatGetFriendMessageHistoryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[68]);
}

// ===================================================================

class CMsgClientChatGetFriendMessageHistoryForOfflineMessages::_Internal {
 public:
};

CMsgClientChatGetFriendMessageHistoryForOfflineMessages::CMsgClientChatGetFriendMessageHistoryForOfflineMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientChatGetFriendMessageHistoryForOfflineMessages)
}
CMsgClientChatGetFriendMessageHistoryForOfflineMessages::CMsgClientChatGetFriendMessageHistoryForOfflineMessages(const CMsgClientChatGetFriendMessageHistoryForOfflineMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientChatGetFriendMessageHistoryForOfflineMessages)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientChatGetFriendMessageHistoryForOfflineMessages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientChatGetFriendMessageHistoryForOfflineMessages::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChatGetFriendMessageHistoryForOfflineMessages::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[69]);
}

// ===================================================================

class CMsgClientFSGetFriendsSteamLevels::_Internal {
 public:
};

CMsgClientFSGetFriendsSteamLevels::CMsgClientFSGetFriendsSteamLevels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  accountids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFSGetFriendsSteamLevels)
}
CMsgClientFSGetFriendsSteamLevels::CMsgClientFSGetFriendsSteamLevels(const CMsgClientFSGetFriendsSteamLevels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accountids_(from.accountids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientFSGetFriendsSteamLevels)
}

inline void CMsgClientFSGetFriendsSteamLevels::SharedCtor() {
}

CMsgClientFSGetFriendsSteamLevels::~CMsgClientFSGetFriendsSteamLevels() {
  // @@protoc_insertion_point(destructor:CMsgClientFSGetFriendsSteamLevels)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFSGetFriendsSteamLevels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFSGetFriendsSteamLevels::ArenaDtor(void* object) {
  CMsgClientFSGetFriendsSteamLevels* _this = reinterpret_cast< CMsgClientFSGetFriendsSteamLevels* >(object);
  (void)_this;
}
void CMsgClientFSGetFriendsSteamLevels::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFSGetFriendsSteamLevels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFSGetFriendsSteamLevels::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFSGetFriendsSteamLevels)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFSGetFriendsSteamLevels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 accountids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_accountids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_accountids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFSGetFriendsSteamLevels::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFSGetFriendsSteamLevels)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 accountids = 1;
  for (int i = 0, n = this->_internal_accountids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFSGetFriendsSteamLevels)
  return target;
}

size_t CMsgClientFSGetFriendsSteamLevels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFSGetFriendsSteamLevels)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 accountids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->accountids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_accountids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFSGetFriendsSteamLevels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFSGetFriendsSteamLevels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFSGetFriendsSteamLevels::GetClassData() const { return &_class_data_; }

void CMsgClientFSGetFriendsSteamLevels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFSGetFriendsSteamLevels *>(to)->MergeFrom(
      static_cast<const CMsgClientFSGetFriendsSteamLevels &>(from));
}


void CMsgClientFSGetFriendsSteamLevels::MergeFrom(const CMsgClientFSGetFriendsSteamLevels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFSGetFriendsSteamLevels)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  accountids_.MergeFrom(from.accountids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFSGetFriendsSteamLevels::CopyFrom(const CMsgClientFSGetFriendsSteamLevels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFSGetFriendsSteamLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevels::IsInitialized() const {
  return true;
}

void CMsgClientFSGetFriendsSteamLevels::InternalSwap(CMsgClientFSGetFriendsSteamLevels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  accountids_.InternalSwap(&other->accountids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFSGetFriendsSteamLevels::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[70]);
}

// ===================================================================

class CMsgClientFSGetFriendsSteamLevelsResponse_Friend::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFSGetFriendsSteamLevelsResponse_Friend>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CMsgClientFSGetFriendsSteamLevelsResponse_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
}
CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CMsgClientFSGetFriendsSteamLevelsResponse_Friend(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
}

inline void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(level_));
}

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::~CMsgClientFSGetFriendsSteamLevelsResponse_Friend() {
  // @@protoc_insertion_point(destructor:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::ArenaDtor(void* object) {
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend* _this = reinterpret_cast< CMsgClientFSGetFriendsSteamLevelsResponse_Friend* >(object);
  (void)_this;
}
void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
  return target;
}

size_t CMsgClientFSGetFriendsSteamLevelsResponse_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFSGetFriendsSteamLevelsResponse_Friend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFSGetFriendsSteamLevelsResponse_Friend::GetClassData() const { return &_class_data_; }

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFSGetFriendsSteamLevelsResponse_Friend *>(to)->MergeFrom(
      static_cast<const CMsgClientFSGetFriendsSteamLevelsResponse_Friend &>(from));
}


void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergeFrom(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CopyFrom(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFSGetFriendsSteamLevelsResponse.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevelsResponse_Friend::IsInitialized() const {
  return true;
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::InternalSwap(CMsgClientFSGetFriendsSteamLevelsResponse_Friend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse_Friend, level_)
      + sizeof(CMsgClientFSGetFriendsSteamLevelsResponse_Friend::level_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFSGetFriendsSteamLevelsResponse_Friend, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFSGetFriendsSteamLevelsResponse_Friend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[71]);
}

// ===================================================================

class CMsgClientFSGetFriendsSteamLevelsResponse::_Internal {
 public:
};

CMsgClientFSGetFriendsSteamLevelsResponse::CMsgClientFSGetFriendsSteamLevelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFSGetFriendsSteamLevelsResponse)
}
CMsgClientFSGetFriendsSteamLevelsResponse::CMsgClientFSGetFriendsSteamLevelsResponse(const CMsgClientFSGetFriendsSteamLevelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientFSGetFriendsSteamLevelsResponse)
}

inline void CMsgClientFSGetFriendsSteamLevelsResponse::SharedCtor() {
}

CMsgClientFSGetFriendsSteamLevelsResponse::~CMsgClientFSGetFriendsSteamLevelsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientFSGetFriendsSteamLevelsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFSGetFriendsSteamLevelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFSGetFriendsSteamLevelsResponse::ArenaDtor(void* object) {
  CMsgClientFSGetFriendsSteamLevelsResponse* _this = reinterpret_cast< CMsgClientFSGetFriendsSteamLevelsResponse* >(object);
  (void)_this;
}
void CMsgClientFSGetFriendsSteamLevelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFSGetFriendsSteamLevelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFSGetFriendsSteamLevelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFSGetFriendsSteamLevelsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFSGetFriendsSteamLevelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFSGetFriendsSteamLevelsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFSGetFriendsSteamLevelsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFSGetFriendsSteamLevelsResponse)
  return target;
}

size_t CMsgClientFSGetFriendsSteamLevelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFSGetFriendsSteamLevelsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFSGetFriendsSteamLevelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFSGetFriendsSteamLevelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFSGetFriendsSteamLevelsResponse::GetClassData() const { return &_class_data_; }

void CMsgClientFSGetFriendsSteamLevelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFSGetFriendsSteamLevelsResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientFSGetFriendsSteamLevelsResponse &>(from));
}


void CMsgClientFSGetFriendsSteamLevelsResponse::MergeFrom(const CMsgClientFSGetFriendsSteamLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFSGetFriendsSteamLevelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFSGetFriendsSteamLevelsResponse::CopyFrom(const CMsgClientFSGetFriendsSteamLevelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFSGetFriendsSteamLevelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevelsResponse::IsInitialized() const {
  return true;
}

void CMsgClientFSGetFriendsSteamLevelsResponse::InternalSwap(CMsgClientFSGetFriendsSteamLevelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFSGetFriendsSteamLevelsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[72]);
}

// ===================================================================

class CMsgClientEmailAddrInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientEmailAddrInfo>()._has_bits_);
  static void set_has_email_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_is_validated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_email_validation_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_credential_change_requires_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_password_or_secretqa_change_requires_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientEmailAddrInfo::CMsgClientEmailAddrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientEmailAddrInfo)
}
CMsgClientEmailAddrInfo::CMsgClientEmailAddrInfo(const CMsgClientEmailAddrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email_address()) {
    email_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&email_is_validated_, &from.email_is_validated_,
    static_cast<size_t>(reinterpret_cast<char*>(&password_or_secretqa_change_requires_code_) -
    reinterpret_cast<char*>(&email_is_validated_)) + sizeof(password_or_secretqa_change_requires_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientEmailAddrInfo)
}

inline void CMsgClientEmailAddrInfo::SharedCtor() {
email_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&email_is_validated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&password_or_secretqa_change_requires_code_) -
    reinterpret_cast<char*>(&email_is_validated_)) + sizeof(password_or_secretqa_change_requires_code_));
}

CMsgClientEmailAddrInfo::~CMsgClientEmailAddrInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientEmailAddrInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientEmailAddrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  email_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientEmailAddrInfo::ArenaDtor(void* object) {
  CMsgClientEmailAddrInfo* _this = reinterpret_cast< CMsgClientEmailAddrInfo* >(object);
  (void)_this;
}
void CMsgClientEmailAddrInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientEmailAddrInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientEmailAddrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientEmailAddrInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    email_address_.ClearNonDefaultToEmpty();
  }
  ::memset(&email_is_validated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_or_secretqa_change_requires_code_) -
      reinterpret_cast<char*>(&email_is_validated_)) + sizeof(password_or_secretqa_change_requires_code_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientEmailAddrInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string email_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientEmailAddrInfo.email_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool email_is_validated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_email_is_validated(&has_bits);
          email_is_validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool email_validation_changed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_email_validation_changed(&has_bits);
          email_validation_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool credential_change_requires_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_credential_change_requires_code(&has_bits);
          credential_change_requires_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool password_or_secretqa_change_requires_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_password_or_secretqa_change_requires_code(&has_bits);
          password_or_secretqa_change_requires_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientEmailAddrInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientEmailAddrInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string email_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email_address().data(), static_cast<int>(this->_internal_email_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientEmailAddrInfo.email_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email_address(), target);
  }

  // optional bool email_is_validated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_email_is_validated(), target);
  }

  // optional bool email_validation_changed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_email_validation_changed(), target);
  }

  // optional bool credential_change_requires_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_credential_change_requires_code(), target);
  }

  // optional bool password_or_secretqa_change_requires_code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_password_or_secretqa_change_requires_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientEmailAddrInfo)
  return target;
}

size_t CMsgClientEmailAddrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientEmailAddrInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string email_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_address());
    }

    // optional bool email_is_validated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool email_validation_changed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool credential_change_requires_code = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool password_or_secretqa_change_requires_code = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientEmailAddrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientEmailAddrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientEmailAddrInfo::GetClassData() const { return &_class_data_; }

void CMsgClientEmailAddrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientEmailAddrInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientEmailAddrInfo &>(from));
}


void CMsgClientEmailAddrInfo::MergeFrom(const CMsgClientEmailAddrInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientEmailAddrInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email_address(from._internal_email_address());
    }
    if (cached_has_bits & 0x00000002u) {
      email_is_validated_ = from.email_is_validated_;
    }
    if (cached_has_bits & 0x00000004u) {
      email_validation_changed_ = from.email_validation_changed_;
    }
    if (cached_has_bits & 0x00000008u) {
      credential_change_requires_code_ = from.credential_change_requires_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      password_or_secretqa_change_requires_code_ = from.password_or_secretqa_change_requires_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientEmailAddrInfo::CopyFrom(const CMsgClientEmailAddrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientEmailAddrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmailAddrInfo::IsInitialized() const {
  return true;
}

void CMsgClientEmailAddrInfo::InternalSwap(CMsgClientEmailAddrInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_address_, lhs_arena,
      &other->email_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientEmailAddrInfo, password_or_secretqa_change_requires_code_)
      + sizeof(CMsgClientEmailAddrInfo::password_or_secretqa_change_requires_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientEmailAddrInfo, email_is_validated_)>(
          reinterpret_cast<char*>(&email_is_validated_),
          reinterpret_cast<char*>(&other->email_is_validated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientEmailAddrInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[73]);
}

// ===================================================================

class CMsgCREItemVoteSummary_PublishedFileId::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREItemVoteSummary_PublishedFileId>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCREItemVoteSummary_PublishedFileId::CMsgCREItemVoteSummary_PublishedFileId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREItemVoteSummary.PublishedFileId)
}
CMsgCREItemVoteSummary_PublishedFileId::CMsgCREItemVoteSummary_PublishedFileId(const CMsgCREItemVoteSummary_PublishedFileId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  published_file_id_ = from.published_file_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgCREItemVoteSummary.PublishedFileId)
}

inline void CMsgCREItemVoteSummary_PublishedFileId::SharedCtor() {
published_file_id_ = uint64_t{0u};
}

CMsgCREItemVoteSummary_PublishedFileId::~CMsgCREItemVoteSummary_PublishedFileId() {
  // @@protoc_insertion_point(destructor:CMsgCREItemVoteSummary.PublishedFileId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREItemVoteSummary_PublishedFileId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREItemVoteSummary_PublishedFileId::ArenaDtor(void* object) {
  CMsgCREItemVoteSummary_PublishedFileId* _this = reinterpret_cast< CMsgCREItemVoteSummary_PublishedFileId* >(object);
  (void)_this;
}
void CMsgCREItemVoteSummary_PublishedFileId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREItemVoteSummary_PublishedFileId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREItemVoteSummary_PublishedFileId::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREItemVoteSummary.PublishedFileId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  published_file_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREItemVoteSummary_PublishedFileId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREItemVoteSummary_PublishedFileId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREItemVoteSummary.PublishedFileId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREItemVoteSummary.PublishedFileId)
  return target;
}

size_t CMsgCREItemVoteSummary_PublishedFileId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREItemVoteSummary.PublishedFileId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 published_file_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREItemVoteSummary_PublishedFileId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREItemVoteSummary_PublishedFileId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREItemVoteSummary_PublishedFileId::GetClassData() const { return &_class_data_; }

void CMsgCREItemVoteSummary_PublishedFileId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREItemVoteSummary_PublishedFileId *>(to)->MergeFrom(
      static_cast<const CMsgCREItemVoteSummary_PublishedFileId &>(from));
}


void CMsgCREItemVoteSummary_PublishedFileId::MergeFrom(const CMsgCREItemVoteSummary_PublishedFileId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREItemVoteSummary.PublishedFileId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_published_file_id()) {
    _internal_set_published_file_id(from._internal_published_file_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREItemVoteSummary_PublishedFileId::CopyFrom(const CMsgCREItemVoteSummary_PublishedFileId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREItemVoteSummary.PublishedFileId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummary_PublishedFileId::IsInitialized() const {
  return true;
}

void CMsgCREItemVoteSummary_PublishedFileId::InternalSwap(CMsgCREItemVoteSummary_PublishedFileId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(published_file_id_, other->published_file_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREItemVoteSummary_PublishedFileId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[74]);
}

// ===================================================================

class CMsgCREItemVoteSummary::_Internal {
 public:
};

CMsgCREItemVoteSummary::CMsgCREItemVoteSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  published_file_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREItemVoteSummary)
}
CMsgCREItemVoteSummary::CMsgCREItemVoteSummary(const CMsgCREItemVoteSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      published_file_ids_(from.published_file_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCREItemVoteSummary)
}

inline void CMsgCREItemVoteSummary::SharedCtor() {
}

CMsgCREItemVoteSummary::~CMsgCREItemVoteSummary() {
  // @@protoc_insertion_point(destructor:CMsgCREItemVoteSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREItemVoteSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREItemVoteSummary::ArenaDtor(void* object) {
  CMsgCREItemVoteSummary* _this = reinterpret_cast< CMsgCREItemVoteSummary* >(object);
  (void)_this;
}
void CMsgCREItemVoteSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREItemVoteSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREItemVoteSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREItemVoteSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  published_file_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREItemVoteSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_published_file_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREItemVoteSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREItemVoteSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_published_file_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_published_file_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREItemVoteSummary)
  return target;
}

size_t CMsgCREItemVoteSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREItemVoteSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
  total_size += 1UL * this->_internal_published_file_ids_size();
  for (const auto& msg : this->published_file_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREItemVoteSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREItemVoteSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREItemVoteSummary::GetClassData() const { return &_class_data_; }

void CMsgCREItemVoteSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREItemVoteSummary *>(to)->MergeFrom(
      static_cast<const CMsgCREItemVoteSummary &>(from));
}


void CMsgCREItemVoteSummary::MergeFrom(const CMsgCREItemVoteSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREItemVoteSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  published_file_ids_.MergeFrom(from.published_file_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREItemVoteSummary::CopyFrom(const CMsgCREItemVoteSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREItemVoteSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummary::IsInitialized() const {
  return true;
}

void CMsgCREItemVoteSummary::InternalSwap(CMsgCREItemVoteSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  published_file_ids_.InternalSwap(&other->published_file_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREItemVoteSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[75]);
}

// ===================================================================

class CMsgCREItemVoteSummaryResponse_ItemVoteSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREItemVoteSummaryResponse_ItemVoteSummary>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votes_for(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_votes_against(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reports(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CMsgCREItemVoteSummaryResponse_ItemVoteSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
}
CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CMsgCREItemVoteSummaryResponse_ItemVoteSummary(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
}

inline void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(score_));
}

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::~CMsgCREItemVoteSummaryResponse_ItemVoteSummary() {
  // @@protoc_insertion_point(destructor:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::ArenaDtor(void* object) {
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary* _this = reinterpret_cast< CMsgCREItemVoteSummaryResponse_ItemVoteSummary* >(object);
  (void)_this;
}
void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 votes_for = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_votes_for(&has_bits);
          votes_for_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 votes_against = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_votes_against(&has_bits);
          votes_against_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reports(&has_bits);
          reports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional int32 votes_for = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_votes_for(), target);
  }

  // optional int32 votes_against = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_votes_against(), target);
  }

  // optional int32 reports = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reports(), target);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
  return target;
}

size_t CMsgCREItemVoteSummaryResponse_ItemVoteSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 published_file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 votes_for = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_votes_for());
    }

    // optional int32 votes_against = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_votes_against());
    }

    // optional int32 reports = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reports());
    }

    // optional float score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREItemVoteSummaryResponse_ItemVoteSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREItemVoteSummaryResponse_ItemVoteSummary::GetClassData() const { return &_class_data_; }

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREItemVoteSummaryResponse_ItemVoteSummary *>(to)->MergeFrom(
      static_cast<const CMsgCREItemVoteSummaryResponse_ItemVoteSummary &>(from));
}


void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergeFrom(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      votes_for_ = from.votes_for_;
    }
    if (cached_has_bits & 0x00000004u) {
      votes_against_ = from.votes_against_;
    }
    if (cached_has_bits & 0x00000008u) {
      reports_ = from.reports_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CopyFrom(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREItemVoteSummaryResponse.ItemVoteSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummaryResponse_ItemVoteSummary::IsInitialized() const {
  return true;
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::InternalSwap(CMsgCREItemVoteSummaryResponse_ItemVoteSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, score_)
      + sizeof(CMsgCREItemVoteSummaryResponse_ItemVoteSummary::score_)
      - PROTOBUF_FIELD_OFFSET(CMsgCREItemVoteSummaryResponse_ItemVoteSummary, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREItemVoteSummaryResponse_ItemVoteSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[76]);
}

// ===================================================================

class CMsgCREItemVoteSummaryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREItemVoteSummaryResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCREItemVoteSummaryResponse::CMsgCREItemVoteSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_vote_summaries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREItemVoteSummaryResponse)
}
CMsgCREItemVoteSummaryResponse::CMsgCREItemVoteSummaryResponse(const CMsgCREItemVoteSummaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_vote_summaries_(from.item_vote_summaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgCREItemVoteSummaryResponse)
}

inline void CMsgCREItemVoteSummaryResponse::SharedCtor() {
eresult_ = 2;
}

CMsgCREItemVoteSummaryResponse::~CMsgCREItemVoteSummaryResponse() {
  // @@protoc_insertion_point(destructor:CMsgCREItemVoteSummaryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREItemVoteSummaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREItemVoteSummaryResponse::ArenaDtor(void* object) {
  CMsgCREItemVoteSummaryResponse* _this = reinterpret_cast< CMsgCREItemVoteSummaryResponse* >(object);
  (void)_this;
}
void CMsgCREItemVoteSummaryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREItemVoteSummaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREItemVoteSummaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREItemVoteSummaryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_vote_summaries_.Clear();
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREItemVoteSummaryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_vote_summaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREItemVoteSummaryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREItemVoteSummaryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // repeated .CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_vote_summaries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item_vote_summaries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREItemVoteSummaryResponse)
  return target;
}

size_t CMsgCREItemVoteSummaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREItemVoteSummaryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
  total_size += 1UL * this->_internal_item_vote_summaries_size();
  for (const auto& msg : this->item_vote_summaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREItemVoteSummaryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREItemVoteSummaryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREItemVoteSummaryResponse::GetClassData() const { return &_class_data_; }

void CMsgCREItemVoteSummaryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREItemVoteSummaryResponse *>(to)->MergeFrom(
      static_cast<const CMsgCREItemVoteSummaryResponse &>(from));
}


void CMsgCREItemVoteSummaryResponse::MergeFrom(const CMsgCREItemVoteSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREItemVoteSummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  item_vote_summaries_.MergeFrom(from.item_vote_summaries_);
  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREItemVoteSummaryResponse::CopyFrom(const CMsgCREItemVoteSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREItemVoteSummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummaryResponse::IsInitialized() const {
  return true;
}

void CMsgCREItemVoteSummaryResponse::InternalSwap(CMsgCREItemVoteSummaryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_vote_summaries_.InternalSwap(&other->item_vote_summaries_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREItemVoteSummaryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[77]);
}

// ===================================================================

class CMsgCREUpdateUserPublishedItemVote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREUpdateUserPublishedItemVote>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgCREUpdateUserPublishedItemVote::CMsgCREUpdateUserPublishedItemVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREUpdateUserPublishedItemVote)
}
CMsgCREUpdateUserPublishedItemVote::CMsgCREUpdateUserPublishedItemVote(const CMsgCREUpdateUserPublishedItemVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_up_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(vote_up_));
  // @@protoc_insertion_point(copy_constructor:CMsgCREUpdateUserPublishedItemVote)
}

inline void CMsgCREUpdateUserPublishedItemVote::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vote_up_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(vote_up_));
}

CMsgCREUpdateUserPublishedItemVote::~CMsgCREUpdateUserPublishedItemVote() {
  // @@protoc_insertion_point(destructor:CMsgCREUpdateUserPublishedItemVote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREUpdateUserPublishedItemVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREUpdateUserPublishedItemVote::ArenaDtor(void* object) {
  CMsgCREUpdateUserPublishedItemVote* _this = reinterpret_cast< CMsgCREUpdateUserPublishedItemVote* >(object);
  (void)_this;
}
void CMsgCREUpdateUserPublishedItemVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREUpdateUserPublishedItemVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREUpdateUserPublishedItemVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREUpdateUserPublishedItemVote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_up_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(vote_up_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREUpdateUserPublishedItemVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool vote_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vote_up(&has_bits);
          vote_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREUpdateUserPublishedItemVote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREUpdateUserPublishedItemVote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional bool vote_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_up(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREUpdateUserPublishedItemVote)
  return target;
}

size_t CMsgCREUpdateUserPublishedItemVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREUpdateUserPublishedItemVote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 published_file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool vote_up = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREUpdateUserPublishedItemVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREUpdateUserPublishedItemVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREUpdateUserPublishedItemVote::GetClassData() const { return &_class_data_; }

void CMsgCREUpdateUserPublishedItemVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREUpdateUserPublishedItemVote *>(to)->MergeFrom(
      static_cast<const CMsgCREUpdateUserPublishedItemVote &>(from));
}


void CMsgCREUpdateUserPublishedItemVote::MergeFrom(const CMsgCREUpdateUserPublishedItemVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREUpdateUserPublishedItemVote)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_up_ = from.vote_up_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREUpdateUserPublishedItemVote::CopyFrom(const CMsgCREUpdateUserPublishedItemVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREUpdateUserPublishedItemVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREUpdateUserPublishedItemVote::IsInitialized() const {
  return true;
}

void CMsgCREUpdateUserPublishedItemVote::InternalSwap(CMsgCREUpdateUserPublishedItemVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVote, vote_up_)
      + sizeof(CMsgCREUpdateUserPublishedItemVote::vote_up_)
      - PROTOBUF_FIELD_OFFSET(CMsgCREUpdateUserPublishedItemVote, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREUpdateUserPublishedItemVote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[78]);
}

// ===================================================================

class CMsgCREUpdateUserPublishedItemVoteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREUpdateUserPublishedItemVoteResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCREUpdateUserPublishedItemVoteResponse::CMsgCREUpdateUserPublishedItemVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREUpdateUserPublishedItemVoteResponse)
}
CMsgCREUpdateUserPublishedItemVoteResponse::CMsgCREUpdateUserPublishedItemVoteResponse(const CMsgCREUpdateUserPublishedItemVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgCREUpdateUserPublishedItemVoteResponse)
}

inline void CMsgCREUpdateUserPublishedItemVoteResponse::SharedCtor() {
eresult_ = 2;
}

CMsgCREUpdateUserPublishedItemVoteResponse::~CMsgCREUpdateUserPublishedItemVoteResponse() {
  // @@protoc_insertion_point(destructor:CMsgCREUpdateUserPublishedItemVoteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREUpdateUserPublishedItemVoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREUpdateUserPublishedItemVoteResponse::ArenaDtor(void* object) {
  CMsgCREUpdateUserPublishedItemVoteResponse* _this = reinterpret_cast< CMsgCREUpdateUserPublishedItemVoteResponse* >(object);
  (void)_this;
}
void CMsgCREUpdateUserPublishedItemVoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREUpdateUserPublishedItemVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREUpdateUserPublishedItemVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREUpdateUserPublishedItemVoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREUpdateUserPublishedItemVoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREUpdateUserPublishedItemVoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREUpdateUserPublishedItemVoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREUpdateUserPublishedItemVoteResponse)
  return target;
}

size_t CMsgCREUpdateUserPublishedItemVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREUpdateUserPublishedItemVoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREUpdateUserPublishedItemVoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREUpdateUserPublishedItemVoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREUpdateUserPublishedItemVoteResponse::GetClassData() const { return &_class_data_; }

void CMsgCREUpdateUserPublishedItemVoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREUpdateUserPublishedItemVoteResponse *>(to)->MergeFrom(
      static_cast<const CMsgCREUpdateUserPublishedItemVoteResponse &>(from));
}


void CMsgCREUpdateUserPublishedItemVoteResponse::MergeFrom(const CMsgCREUpdateUserPublishedItemVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREUpdateUserPublishedItemVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREUpdateUserPublishedItemVoteResponse::CopyFrom(const CMsgCREUpdateUserPublishedItemVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREUpdateUserPublishedItemVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREUpdateUserPublishedItemVoteResponse::IsInitialized() const {
  return true;
}

void CMsgCREUpdateUserPublishedItemVoteResponse::InternalSwap(CMsgCREUpdateUserPublishedItemVoteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREUpdateUserPublishedItemVoteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[79]);
}

// ===================================================================

class CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
}
CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  published_file_id_ = from.published_file_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
}

inline void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SharedCtor() {
published_file_id_ = uint64_t{0u};
}

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::~CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId() {
  // @@protoc_insertion_point(destructor:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::ArenaDtor(void* object) {
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* _this = reinterpret_cast< CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* >(object);
  (void)_this;
}
void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  published_file_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
  return target;
}

size_t CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 published_file_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::GetClassData() const { return &_class_data_; }

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId *>(to)->MergeFrom(
      static_cast<const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId &>(from));
}


void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_published_file_id()) {
    _internal_set_published_file_id(from._internal_published_file_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::IsInitialized() const {
  return true;
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::InternalSwap(CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(published_file_id_, other->published_file_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[80]);
}

// ===================================================================

class CMsgCREGetUserPublishedItemVoteDetails::_Internal {
 public:
};

CMsgCREGetUserPublishedItemVoteDetails::CMsgCREGetUserPublishedItemVoteDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  published_file_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREGetUserPublishedItemVoteDetails)
}
CMsgCREGetUserPublishedItemVoteDetails::CMsgCREGetUserPublishedItemVoteDetails(const CMsgCREGetUserPublishedItemVoteDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      published_file_ids_(from.published_file_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCREGetUserPublishedItemVoteDetails)
}

inline void CMsgCREGetUserPublishedItemVoteDetails::SharedCtor() {
}

CMsgCREGetUserPublishedItemVoteDetails::~CMsgCREGetUserPublishedItemVoteDetails() {
  // @@protoc_insertion_point(destructor:CMsgCREGetUserPublishedItemVoteDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREGetUserPublishedItemVoteDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREGetUserPublishedItemVoteDetails::ArenaDtor(void* object) {
  CMsgCREGetUserPublishedItemVoteDetails* _this = reinterpret_cast< CMsgCREGetUserPublishedItemVoteDetails* >(object);
  (void)_this;
}
void CMsgCREGetUserPublishedItemVoteDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREGetUserPublishedItemVoteDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREGetUserPublishedItemVoteDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREGetUserPublishedItemVoteDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  published_file_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREGetUserPublishedItemVoteDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_published_file_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREGetUserPublishedItemVoteDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREGetUserPublishedItemVoteDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_published_file_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_published_file_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREGetUserPublishedItemVoteDetails)
  return target;
}

size_t CMsgCREGetUserPublishedItemVoteDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREGetUserPublishedItemVoteDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
  total_size += 1UL * this->_internal_published_file_ids_size();
  for (const auto& msg : this->published_file_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREGetUserPublishedItemVoteDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREGetUserPublishedItemVoteDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREGetUserPublishedItemVoteDetails::GetClassData() const { return &_class_data_; }

void CMsgCREGetUserPublishedItemVoteDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREGetUserPublishedItemVoteDetails *>(to)->MergeFrom(
      static_cast<const CMsgCREGetUserPublishedItemVoteDetails &>(from));
}


void CMsgCREGetUserPublishedItemVoteDetails::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREGetUserPublishedItemVoteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  published_file_ids_.MergeFrom(from.published_file_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREGetUserPublishedItemVoteDetails::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREGetUserPublishedItemVoteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetails::IsInitialized() const {
  return true;
}

void CMsgCREGetUserPublishedItemVoteDetails::InternalSwap(CMsgCREGetUserPublishedItemVoteDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  published_file_ids_.InternalSwap(&other->published_file_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREGetUserPublishedItemVoteDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[81]);
}

// ===================================================================

class CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
}
CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(vote_));
  // @@protoc_insertion_point(copy_constructor:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
}

inline void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vote_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(vote_));
}

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::~CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail() {
  // @@protoc_insertion_point(destructor:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::ArenaDtor(void* object) {
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* _this = reinterpret_cast< CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* >(object);
  (void)_this;
}
void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(vote_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vote = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vote(&has_bits);
          vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional int32 vote = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
  return target;
}

size_t CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 published_file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 vote = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vote());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::GetClassData() const { return &_class_data_; }

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail *>(to)->MergeFrom(
      static_cast<const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail &>(from));
}


void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_ = from.vote_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::IsInitialized() const {
  return true;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::InternalSwap(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, vote_)
      + sizeof(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::vote_)
      - PROTOBUF_FIELD_OFFSET(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[82]);
}

// ===================================================================

class CMsgCREGetUserPublishedItemVoteDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCREGetUserPublishedItemVoteDetailsResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCREGetUserPublishedItemVoteDetailsResponse::CMsgCREGetUserPublishedItemVoteDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_item_vote_details_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgCREGetUserPublishedItemVoteDetailsResponse)
}
CMsgCREGetUserPublishedItemVoteDetailsResponse::CMsgCREGetUserPublishedItemVoteDetailsResponse(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      user_item_vote_details_(from.user_item_vote_details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgCREGetUserPublishedItemVoteDetailsResponse)
}

inline void CMsgCREGetUserPublishedItemVoteDetailsResponse::SharedCtor() {
eresult_ = 2;
}

CMsgCREGetUserPublishedItemVoteDetailsResponse::~CMsgCREGetUserPublishedItemVoteDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgCREGetUserPublishedItemVoteDetailsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgCREGetUserPublishedItemVoteDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::ArenaDtor(void* object) {
  CMsgCREGetUserPublishedItemVoteDetailsResponse* _this = reinterpret_cast< CMsgCREGetUserPublishedItemVoteDetailsResponse* >(object);
  (void)_this;
}
void CMsgCREGetUserPublishedItemVoteDetailsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCREGetUserPublishedItemVoteDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCREGetUserPublishedItemVoteDetailsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_item_vote_details_.Clear();
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCREGetUserPublishedItemVoteDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_item_vote_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCREGetUserPublishedItemVoteDetailsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCREGetUserPublishedItemVoteDetailsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_item_vote_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_user_item_vote_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCREGetUserPublishedItemVoteDetailsResponse)
  return target;
}

size_t CMsgCREGetUserPublishedItemVoteDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCREGetUserPublishedItemVoteDetailsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
  total_size += 1UL * this->_internal_user_item_vote_details_size();
  for (const auto& msg : this->user_item_vote_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCREGetUserPublishedItemVoteDetailsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgCREGetUserPublishedItemVoteDetailsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCREGetUserPublishedItemVoteDetailsResponse::GetClassData() const { return &_class_data_; }

void CMsgCREGetUserPublishedItemVoteDetailsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgCREGetUserPublishedItemVoteDetailsResponse *>(to)->MergeFrom(
      static_cast<const CMsgCREGetUserPublishedItemVoteDetailsResponse &>(from));
}


void CMsgCREGetUserPublishedItemVoteDetailsResponse::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCREGetUserPublishedItemVoteDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_item_vote_details_.MergeFrom(from.user_item_vote_details_);
  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCREGetUserPublishedItemVoteDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::InternalSwap(CMsgCREGetUserPublishedItemVoteDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_item_vote_details_.InternalSwap(&other->user_item_vote_details_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCREGetUserPublishedItemVoteDetailsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[83]);
}

// ===================================================================

class CMsgFSGetFollowerCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFSGetFollowerCount>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFSGetFollowerCount::CMsgFSGetFollowerCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgFSGetFollowerCount)
}
CMsgFSGetFollowerCount::CMsgFSGetFollowerCount(const CMsgFSGetFollowerCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgFSGetFollowerCount)
}

inline void CMsgFSGetFollowerCount::SharedCtor() {
steam_id_ = uint64_t{0u};
}

CMsgFSGetFollowerCount::~CMsgFSGetFollowerCount() {
  // @@protoc_insertion_point(destructor:CMsgFSGetFollowerCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgFSGetFollowerCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFSGetFollowerCount::ArenaDtor(void* object) {
  CMsgFSGetFollowerCount* _this = reinterpret_cast< CMsgFSGetFollowerCount* >(object);
  (void)_this;
}
void CMsgFSGetFollowerCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFSGetFollowerCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFSGetFollowerCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFSGetFollowerCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFSGetFollowerCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFSGetFollowerCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFSGetFollowerCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFSGetFollowerCount)
  return target;
}

size_t CMsgFSGetFollowerCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFSGetFollowerCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFSGetFollowerCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgFSGetFollowerCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFSGetFollowerCount::GetClassData() const { return &_class_data_; }

void CMsgFSGetFollowerCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgFSGetFollowerCount *>(to)->MergeFrom(
      static_cast<const CMsgFSGetFollowerCount &>(from));
}


void CMsgFSGetFollowerCount::MergeFrom(const CMsgFSGetFollowerCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFSGetFollowerCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFSGetFollowerCount::CopyFrom(const CMsgFSGetFollowerCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFSGetFollowerCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetFollowerCount::IsInitialized() const {
  return true;
}

void CMsgFSGetFollowerCount::InternalSwap(CMsgFSGetFollowerCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFSGetFollowerCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[84]);
}

// ===================================================================

class CMsgFSGetFollowerCountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFSGetFollowerCountResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFSGetFollowerCountResponse::CMsgFSGetFollowerCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgFSGetFollowerCountResponse)
}
CMsgFSGetFollowerCountResponse::CMsgFSGetFollowerCountResponse(const CMsgFSGetFollowerCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&count_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgFSGetFollowerCountResponse)
}

inline void CMsgFSGetFollowerCountResponse::SharedCtor() {
count_ = 0;
eresult_ = 2;
}

CMsgFSGetFollowerCountResponse::~CMsgFSGetFollowerCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgFSGetFollowerCountResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgFSGetFollowerCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFSGetFollowerCountResponse::ArenaDtor(void* object) {
  CMsgFSGetFollowerCountResponse* _this = reinterpret_cast< CMsgFSGetFollowerCountResponse* >(object);
  (void)_this;
}
void CMsgFSGetFollowerCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFSGetFollowerCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFSGetFollowerCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFSGetFollowerCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    count_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFSGetFollowerCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFSGetFollowerCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFSGetFollowerCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 count = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFSGetFollowerCountResponse)
  return target;
}

size_t CMsgFSGetFollowerCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFSGetFollowerCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 count = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFSGetFollowerCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgFSGetFollowerCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFSGetFollowerCountResponse::GetClassData() const { return &_class_data_; }

void CMsgFSGetFollowerCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgFSGetFollowerCountResponse *>(to)->MergeFrom(
      static_cast<const CMsgFSGetFollowerCountResponse &>(from));
}


void CMsgFSGetFollowerCountResponse::MergeFrom(const CMsgFSGetFollowerCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFSGetFollowerCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFSGetFollowerCountResponse::CopyFrom(const CMsgFSGetFollowerCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFSGetFollowerCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetFollowerCountResponse::IsInitialized() const {
  return true;
}

void CMsgFSGetFollowerCountResponse::InternalSwap(CMsgFSGetFollowerCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFSGetFollowerCountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[85]);
}

// ===================================================================

class CMsgFSGetIsFollowing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFSGetIsFollowing>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFSGetIsFollowing::CMsgFSGetIsFollowing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgFSGetIsFollowing)
}
CMsgFSGetIsFollowing::CMsgFSGetIsFollowing(const CMsgFSGetIsFollowing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgFSGetIsFollowing)
}

inline void CMsgFSGetIsFollowing::SharedCtor() {
steam_id_ = uint64_t{0u};
}

CMsgFSGetIsFollowing::~CMsgFSGetIsFollowing() {
  // @@protoc_insertion_point(destructor:CMsgFSGetIsFollowing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgFSGetIsFollowing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFSGetIsFollowing::ArenaDtor(void* object) {
  CMsgFSGetIsFollowing* _this = reinterpret_cast< CMsgFSGetIsFollowing* >(object);
  (void)_this;
}
void CMsgFSGetIsFollowing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFSGetIsFollowing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFSGetIsFollowing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFSGetIsFollowing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFSGetIsFollowing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFSGetIsFollowing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFSGetIsFollowing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFSGetIsFollowing)
  return target;
}

size_t CMsgFSGetIsFollowing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFSGetIsFollowing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFSGetIsFollowing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgFSGetIsFollowing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFSGetIsFollowing::GetClassData() const { return &_class_data_; }

void CMsgFSGetIsFollowing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgFSGetIsFollowing *>(to)->MergeFrom(
      static_cast<const CMsgFSGetIsFollowing &>(from));
}


void CMsgFSGetIsFollowing::MergeFrom(const CMsgFSGetIsFollowing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFSGetIsFollowing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFSGetIsFollowing::CopyFrom(const CMsgFSGetIsFollowing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFSGetIsFollowing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetIsFollowing::IsInitialized() const {
  return true;
}

void CMsgFSGetIsFollowing::InternalSwap(CMsgFSGetIsFollowing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFSGetIsFollowing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[86]);
}

// ===================================================================

class CMsgFSGetIsFollowingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFSGetIsFollowingResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_following(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFSGetIsFollowingResponse::CMsgFSGetIsFollowingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgFSGetIsFollowingResponse)
}
CMsgFSGetIsFollowingResponse::CMsgFSGetIsFollowingResponse(const CMsgFSGetIsFollowingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_following_, &from.is_following_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&is_following_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgFSGetIsFollowingResponse)
}

inline void CMsgFSGetIsFollowingResponse::SharedCtor() {
is_following_ = false;
eresult_ = 2;
}

CMsgFSGetIsFollowingResponse::~CMsgFSGetIsFollowingResponse() {
  // @@protoc_insertion_point(destructor:CMsgFSGetIsFollowingResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgFSGetIsFollowingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFSGetIsFollowingResponse::ArenaDtor(void* object) {
  CMsgFSGetIsFollowingResponse* _this = reinterpret_cast< CMsgFSGetIsFollowingResponse* >(object);
  (void)_this;
}
void CMsgFSGetIsFollowingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFSGetIsFollowingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFSGetIsFollowingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFSGetIsFollowingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    is_following_ = false;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFSGetIsFollowingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_following = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_following(&has_bits);
          is_following_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFSGetIsFollowingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFSGetIsFollowingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bool is_following = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_following(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFSGetIsFollowingResponse)
  return target;
}

size_t CMsgFSGetIsFollowingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFSGetIsFollowingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_following = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFSGetIsFollowingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgFSGetIsFollowingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFSGetIsFollowingResponse::GetClassData() const { return &_class_data_; }

void CMsgFSGetIsFollowingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgFSGetIsFollowingResponse *>(to)->MergeFrom(
      static_cast<const CMsgFSGetIsFollowingResponse &>(from));
}


void CMsgFSGetIsFollowingResponse::MergeFrom(const CMsgFSGetIsFollowingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFSGetIsFollowingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_following_ = from.is_following_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFSGetIsFollowingResponse::CopyFrom(const CMsgFSGetIsFollowingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFSGetIsFollowingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetIsFollowingResponse::IsInitialized() const {
  return true;
}

void CMsgFSGetIsFollowingResponse::InternalSwap(CMsgFSGetIsFollowingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_following_, other->is_following_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFSGetIsFollowingResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[87]);
}

// ===================================================================

class CMsgFSEnumerateFollowingList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFSEnumerateFollowingList>()._has_bits_);
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFSEnumerateFollowingList::CMsgFSEnumerateFollowingList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgFSEnumerateFollowingList)
}
CMsgFSEnumerateFollowingList::CMsgFSEnumerateFollowingList(const CMsgFSEnumerateFollowingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_index_ = from.start_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgFSEnumerateFollowingList)
}

inline void CMsgFSEnumerateFollowingList::SharedCtor() {
start_index_ = 0u;
}

CMsgFSEnumerateFollowingList::~CMsgFSEnumerateFollowingList() {
  // @@protoc_insertion_point(destructor:CMsgFSEnumerateFollowingList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgFSEnumerateFollowingList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFSEnumerateFollowingList::ArenaDtor(void* object) {
  CMsgFSEnumerateFollowingList* _this = reinterpret_cast< CMsgFSEnumerateFollowingList* >(object);
  (void)_this;
}
void CMsgFSEnumerateFollowingList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFSEnumerateFollowingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFSEnumerateFollowingList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFSEnumerateFollowingList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFSEnumerateFollowingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_index(&has_bits);
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFSEnumerateFollowingList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFSEnumerateFollowingList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFSEnumerateFollowingList)
  return target;
}

size_t CMsgFSEnumerateFollowingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFSEnumerateFollowingList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 start_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFSEnumerateFollowingList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgFSEnumerateFollowingList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFSEnumerateFollowingList::GetClassData() const { return &_class_data_; }

void CMsgFSEnumerateFollowingList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgFSEnumerateFollowingList *>(to)->MergeFrom(
      static_cast<const CMsgFSEnumerateFollowingList &>(from));
}


void CMsgFSEnumerateFollowingList::MergeFrom(const CMsgFSEnumerateFollowingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFSEnumerateFollowingList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_index()) {
    _internal_set_start_index(from._internal_start_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFSEnumerateFollowingList::CopyFrom(const CMsgFSEnumerateFollowingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFSEnumerateFollowingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSEnumerateFollowingList::IsInitialized() const {
  return true;
}

void CMsgFSEnumerateFollowingList::InternalSwap(CMsgFSEnumerateFollowingList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_index_, other->start_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFSEnumerateFollowingList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[88]);
}

// ===================================================================

class CMsgFSEnumerateFollowingListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFSEnumerateFollowingListResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFSEnumerateFollowingListResponse::CMsgFSEnumerateFollowingListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steam_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgFSEnumerateFollowingListResponse)
}
CMsgFSEnumerateFollowingListResponse::CMsgFSEnumerateFollowingListResponse(const CMsgFSEnumerateFollowingListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_results_, &from.total_results_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&total_results_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgFSEnumerateFollowingListResponse)
}

inline void CMsgFSEnumerateFollowingListResponse::SharedCtor() {
total_results_ = 0;
eresult_ = 2;
}

CMsgFSEnumerateFollowingListResponse::~CMsgFSEnumerateFollowingListResponse() {
  // @@protoc_insertion_point(destructor:CMsgFSEnumerateFollowingListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgFSEnumerateFollowingListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFSEnumerateFollowingListResponse::ArenaDtor(void* object) {
  CMsgFSEnumerateFollowingListResponse* _this = reinterpret_cast< CMsgFSEnumerateFollowingListResponse* >(object);
  (void)_this;
}
void CMsgFSEnumerateFollowingListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFSEnumerateFollowingListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFSEnumerateFollowingListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFSEnumerateFollowingListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    total_results_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFSEnumerateFollowingListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_results(&has_bits);
          total_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 steam_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steam_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFSEnumerateFollowingListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFSEnumerateFollowingListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 total_results = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_results(), target);
  }

  // repeated fixed64 steam_ids = 3;
  for (int i = 0, n = this->_internal_steam_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFSEnumerateFollowingListResponse)
  return target;
}

size_t CMsgFSEnumerateFollowingListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFSEnumerateFollowingListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steam_ids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 total_results = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_results());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFSEnumerateFollowingListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgFSEnumerateFollowingListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFSEnumerateFollowingListResponse::GetClassData() const { return &_class_data_; }

void CMsgFSEnumerateFollowingListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgFSEnumerateFollowingListResponse *>(to)->MergeFrom(
      static_cast<const CMsgFSEnumerateFollowingListResponse &>(from));
}


void CMsgFSEnumerateFollowingListResponse::MergeFrom(const CMsgFSEnumerateFollowingListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFSEnumerateFollowingListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steam_ids_.MergeFrom(from.steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_results_ = from.total_results_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFSEnumerateFollowingListResponse::CopyFrom(const CMsgFSEnumerateFollowingListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFSEnumerateFollowingListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSEnumerateFollowingListResponse::IsInitialized() const {
  return true;
}

void CMsgFSEnumerateFollowingListResponse::InternalSwap(CMsgFSEnumerateFollowingListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steam_ids_.InternalSwap(&other->steam_ids_);
  swap(total_results_, other->total_results_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFSEnumerateFollowingListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[89]);
}

// ===================================================================

class CMsgDPGetNumberOfCurrentPlayers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPGetNumberOfCurrentPlayers>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDPGetNumberOfCurrentPlayers::CMsgDPGetNumberOfCurrentPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDPGetNumberOfCurrentPlayers)
}
CMsgDPGetNumberOfCurrentPlayers::CMsgDPGetNumberOfCurrentPlayers(const CMsgDPGetNumberOfCurrentPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgDPGetNumberOfCurrentPlayers)
}

inline void CMsgDPGetNumberOfCurrentPlayers::SharedCtor() {
appid_ = 0u;
}

CMsgDPGetNumberOfCurrentPlayers::~CMsgDPGetNumberOfCurrentPlayers() {
  // @@protoc_insertion_point(destructor:CMsgDPGetNumberOfCurrentPlayers)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDPGetNumberOfCurrentPlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDPGetNumberOfCurrentPlayers::ArenaDtor(void* object) {
  CMsgDPGetNumberOfCurrentPlayers* _this = reinterpret_cast< CMsgDPGetNumberOfCurrentPlayers* >(object);
  (void)_this;
}
void CMsgDPGetNumberOfCurrentPlayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDPGetNumberOfCurrentPlayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDPGetNumberOfCurrentPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPGetNumberOfCurrentPlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPGetNumberOfCurrentPlayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPGetNumberOfCurrentPlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPGetNumberOfCurrentPlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPGetNumberOfCurrentPlayers)
  return target;
}

size_t CMsgDPGetNumberOfCurrentPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPGetNumberOfCurrentPlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPGetNumberOfCurrentPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDPGetNumberOfCurrentPlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPGetNumberOfCurrentPlayers::GetClassData() const { return &_class_data_; }

void CMsgDPGetNumberOfCurrentPlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDPGetNumberOfCurrentPlayers *>(to)->MergeFrom(
      static_cast<const CMsgDPGetNumberOfCurrentPlayers &>(from));
}


void CMsgDPGetNumberOfCurrentPlayers::MergeFrom(const CMsgDPGetNumberOfCurrentPlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPGetNumberOfCurrentPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPGetNumberOfCurrentPlayers::CopyFrom(const CMsgDPGetNumberOfCurrentPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPGetNumberOfCurrentPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPGetNumberOfCurrentPlayers::IsInitialized() const {
  return true;
}

void CMsgDPGetNumberOfCurrentPlayers::InternalSwap(CMsgDPGetNumberOfCurrentPlayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPGetNumberOfCurrentPlayers::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[90]);
}

// ===================================================================

class CMsgDPGetNumberOfCurrentPlayersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPGetNumberOfCurrentPlayersResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDPGetNumberOfCurrentPlayersResponse::CMsgDPGetNumberOfCurrentPlayersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDPGetNumberOfCurrentPlayersResponse)
}
CMsgDPGetNumberOfCurrentPlayersResponse::CMsgDPGetNumberOfCurrentPlayersResponse(const CMsgDPGetNumberOfCurrentPlayersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_count_, &from.player_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&player_count_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgDPGetNumberOfCurrentPlayersResponse)
}

inline void CMsgDPGetNumberOfCurrentPlayersResponse::SharedCtor() {
player_count_ = 0;
eresult_ = 2;
}

CMsgDPGetNumberOfCurrentPlayersResponse::~CMsgDPGetNumberOfCurrentPlayersResponse() {
  // @@protoc_insertion_point(destructor:CMsgDPGetNumberOfCurrentPlayersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDPGetNumberOfCurrentPlayersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDPGetNumberOfCurrentPlayersResponse::ArenaDtor(void* object) {
  CMsgDPGetNumberOfCurrentPlayersResponse* _this = reinterpret_cast< CMsgDPGetNumberOfCurrentPlayersResponse* >(object);
  (void)_this;
}
void CMsgDPGetNumberOfCurrentPlayersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDPGetNumberOfCurrentPlayersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDPGetNumberOfCurrentPlayersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPGetNumberOfCurrentPlayersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    player_count_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPGetNumberOfCurrentPlayersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_count(&has_bits);
          player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPGetNumberOfCurrentPlayersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPGetNumberOfCurrentPlayersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 player_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPGetNumberOfCurrentPlayersResponse)
  return target;
}

size_t CMsgDPGetNumberOfCurrentPlayersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPGetNumberOfCurrentPlayersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_count());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPGetNumberOfCurrentPlayersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDPGetNumberOfCurrentPlayersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPGetNumberOfCurrentPlayersResponse::GetClassData() const { return &_class_data_; }

void CMsgDPGetNumberOfCurrentPlayersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDPGetNumberOfCurrentPlayersResponse *>(to)->MergeFrom(
      static_cast<const CMsgDPGetNumberOfCurrentPlayersResponse &>(from));
}


void CMsgDPGetNumberOfCurrentPlayersResponse::MergeFrom(const CMsgDPGetNumberOfCurrentPlayersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPGetNumberOfCurrentPlayersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_count_ = from.player_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPGetNumberOfCurrentPlayersResponse::CopyFrom(const CMsgDPGetNumberOfCurrentPlayersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPGetNumberOfCurrentPlayersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPGetNumberOfCurrentPlayersResponse::IsInitialized() const {
  return true;
}

void CMsgDPGetNumberOfCurrentPlayersResponse::InternalSwap(CMsgDPGetNumberOfCurrentPlayersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_count_, other->player_count_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPGetNumberOfCurrentPlayersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[91]);
}

// ===================================================================

class CMsgClientFriendUserStatusPublished::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFriendUserStatusPublished>()._has_bits_);
  static void set_has_friend_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientFriendUserStatusPublished::CMsgClientFriendUserStatusPublished(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFriendUserStatusPublished)
}
CMsgClientFriendUserStatusPublished::CMsgClientFriendUserStatusPublished(const CMsgClientFriendUserStatusPublished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_status_text()) {
    status_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&friend_steamid_, &from.friend_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&friend_steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientFriendUserStatusPublished)
}

inline void CMsgClientFriendUserStatusPublished::SharedCtor() {
status_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&friend_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&friend_steamid_)) + sizeof(appid_));
}

CMsgClientFriendUserStatusPublished::~CMsgClientFriendUserStatusPublished() {
  // @@protoc_insertion_point(destructor:CMsgClientFriendUserStatusPublished)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFriendUserStatusPublished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientFriendUserStatusPublished::ArenaDtor(void* object) {
  CMsgClientFriendUserStatusPublished* _this = reinterpret_cast< CMsgClientFriendUserStatusPublished* >(object);
  (void)_this;
}
void CMsgClientFriendUserStatusPublished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFriendUserStatusPublished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFriendUserStatusPublished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFriendUserStatusPublished)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&friend_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&friend_steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFriendUserStatusPublished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 friend_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_friend_steamid(&has_bits);
          friend_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string status_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientFriendUserStatusPublished.status_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFriendUserStatusPublished::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFriendUserStatusPublished)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 friend_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_friend_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional string status_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_text().data(), static_cast<int>(this->_internal_status_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientFriendUserStatusPublished.status_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFriendUserStatusPublished)
  return target;
}

size_t CMsgClientFriendUserStatusPublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFriendUserStatusPublished)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string status_text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status_text());
    }

    // optional fixed64 friend_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFriendUserStatusPublished::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFriendUserStatusPublished::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFriendUserStatusPublished::GetClassData() const { return &_class_data_; }

void CMsgClientFriendUserStatusPublished::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFriendUserStatusPublished *>(to)->MergeFrom(
      static_cast<const CMsgClientFriendUserStatusPublished &>(from));
}


void CMsgClientFriendUserStatusPublished::MergeFrom(const CMsgClientFriendUserStatusPublished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFriendUserStatusPublished)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_status_text(from._internal_status_text());
    }
    if (cached_has_bits & 0x00000002u) {
      friend_steamid_ = from.friend_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFriendUserStatusPublished::CopyFrom(const CMsgClientFriendUserStatusPublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFriendUserStatusPublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendUserStatusPublished::IsInitialized() const {
  return true;
}

void CMsgClientFriendUserStatusPublished::InternalSwap(CMsgClientFriendUserStatusPublished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_text_, lhs_arena,
      &other->status_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientFriendUserStatusPublished, appid_)
      + sizeof(CMsgClientFriendUserStatusPublished::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientFriendUserStatusPublished, friend_steamid_)>(
          reinterpret_cast<char*>(&friend_steamid_),
          reinterpret_cast<char*>(&other->friend_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFriendUserStatusPublished::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[92]);
}

// ===================================================================

class CMsgClientServiceMethodLegacy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServiceMethodLegacy>()._has_bits_);
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialized_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientServiceMethodLegacy::CMsgClientServiceMethodLegacy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientServiceMethodLegacy)
}
CMsgClientServiceMethodLegacy::CMsgClientServiceMethodLegacy(const CMsgClientServiceMethodLegacy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method_name(), 
      GetArenaForAllocation());
  }
  serialized_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_method()) {
    serialized_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_method(), 
      GetArenaForAllocation());
  }
  is_notification_ = from.is_notification_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientServiceMethodLegacy)
}

inline void CMsgClientServiceMethodLegacy::SharedCtor() {
method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serialized_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
is_notification_ = false;
}

CMsgClientServiceMethodLegacy::~CMsgClientServiceMethodLegacy() {
  // @@protoc_insertion_point(destructor:CMsgClientServiceMethodLegacy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientServiceMethodLegacy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientServiceMethodLegacy::ArenaDtor(void* object) {
  CMsgClientServiceMethodLegacy* _this = reinterpret_cast< CMsgClientServiceMethodLegacy* >(object);
  (void)_this;
}
void CMsgClientServiceMethodLegacy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServiceMethodLegacy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServiceMethodLegacy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServiceMethodLegacy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_method_.ClearNonDefaultToEmpty();
    }
  }
  is_notification_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServiceMethodLegacy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string method_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientServiceMethodLegacy.method_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serialized_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serialized_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_notification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_notification(&has_bits);
          is_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServiceMethodLegacy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServiceMethodLegacy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string method_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientServiceMethodLegacy.method_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method_name(), target);
  }

  // optional bytes serialized_method = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serialized_method(), target);
  }

  // optional bool is_notification = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_notification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServiceMethodLegacy)
  return target;
}

size_t CMsgClientServiceMethodLegacy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServiceMethodLegacy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string method_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional bytes serialized_method = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_method());
    }

    // optional bool is_notification = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServiceMethodLegacy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientServiceMethodLegacy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServiceMethodLegacy::GetClassData() const { return &_class_data_; }

void CMsgClientServiceMethodLegacy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientServiceMethodLegacy *>(to)->MergeFrom(
      static_cast<const CMsgClientServiceMethodLegacy &>(from));
}


void CMsgClientServiceMethodLegacy::MergeFrom(const CMsgClientServiceMethodLegacy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServiceMethodLegacy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_method(from._internal_serialized_method());
    }
    if (cached_has_bits & 0x00000004u) {
      is_notification_ = from.is_notification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServiceMethodLegacy::CopyFrom(const CMsgClientServiceMethodLegacy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServiceMethodLegacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceMethodLegacy::IsInitialized() const {
  return true;
}

void CMsgClientServiceMethodLegacy::InternalSwap(CMsgClientServiceMethodLegacy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_method_, lhs_arena,
      &other->serialized_method_, rhs_arena
  );
  swap(is_notification_, other->is_notification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServiceMethodLegacy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[93]);
}

// ===================================================================

class CMsgClientServiceMethodLegacyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServiceMethodLegacyResponse>()._has_bits_);
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialized_method_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientServiceMethodLegacyResponse::CMsgClientServiceMethodLegacyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientServiceMethodLegacyResponse)
}
CMsgClientServiceMethodLegacyResponse::CMsgClientServiceMethodLegacyResponse(const CMsgClientServiceMethodLegacyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method_name(), 
      GetArenaForAllocation());
  }
  serialized_method_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_method_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_method_response()) {
    serialized_method_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_method_response(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientServiceMethodLegacyResponse)
}

inline void CMsgClientServiceMethodLegacyResponse::SharedCtor() {
method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serialized_method_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_method_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientServiceMethodLegacyResponse::~CMsgClientServiceMethodLegacyResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientServiceMethodLegacyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientServiceMethodLegacyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_method_response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientServiceMethodLegacyResponse::ArenaDtor(void* object) {
  CMsgClientServiceMethodLegacyResponse* _this = reinterpret_cast< CMsgClientServiceMethodLegacyResponse* >(object);
  (void)_this;
}
void CMsgClientServiceMethodLegacyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServiceMethodLegacyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServiceMethodLegacyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServiceMethodLegacyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_method_response_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServiceMethodLegacyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string method_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientServiceMethodLegacyResponse.method_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes serialized_method_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serialized_method_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServiceMethodLegacyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServiceMethodLegacyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string method_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientServiceMethodLegacyResponse.method_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method_name(), target);
  }

  // optional bytes serialized_method_response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serialized_method_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServiceMethodLegacyResponse)
  return target;
}

size_t CMsgClientServiceMethodLegacyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServiceMethodLegacyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string method_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional bytes serialized_method_response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_method_response());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServiceMethodLegacyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientServiceMethodLegacyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServiceMethodLegacyResponse::GetClassData() const { return &_class_data_; }

void CMsgClientServiceMethodLegacyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientServiceMethodLegacyResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientServiceMethodLegacyResponse &>(from));
}


void CMsgClientServiceMethodLegacyResponse::MergeFrom(const CMsgClientServiceMethodLegacyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServiceMethodLegacyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_method_response(from._internal_serialized_method_response());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServiceMethodLegacyResponse::CopyFrom(const CMsgClientServiceMethodLegacyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServiceMethodLegacyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceMethodLegacyResponse::IsInitialized() const {
  return true;
}

void CMsgClientServiceMethodLegacyResponse::InternalSwap(CMsgClientServiceMethodLegacyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_method_response_, lhs_arena,
      &other->serialized_method_response_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServiceMethodLegacyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[94]);
}

// ===================================================================

class CMsgClientUIMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUIMode>()._has_bits_);
  static void set_has_uimode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientUIMode::CMsgClientUIMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUIMode)
}
CMsgClientUIMode::CMsgClientUIMode(const CMsgClientUIMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uimode_, &from.uimode_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_mode_) -
    reinterpret_cast<char*>(&uimode_)) + sizeof(chat_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUIMode)
}

inline void CMsgClientUIMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uimode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_mode_) -
    reinterpret_cast<char*>(&uimode_)) + sizeof(chat_mode_));
}

CMsgClientUIMode::~CMsgClientUIMode() {
  // @@protoc_insertion_point(destructor:CMsgClientUIMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUIMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUIMode::ArenaDtor(void* object) {
  CMsgClientUIMode* _this = reinterpret_cast< CMsgClientUIMode* >(object);
  (void)_this;
}
void CMsgClientUIMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUIMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUIMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUIMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uimode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_mode_) -
        reinterpret_cast<char*>(&uimode_)) + sizeof(chat_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUIMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 uimode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uimode(&has_bits);
          uimode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_mode(&has_bits);
          chat_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUIMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUIMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uimode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uimode(), target);
  }

  // optional uint32 chat_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chat_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUIMode)
  return target;
}

size_t CMsgClientUIMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUIMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 uimode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uimode());
    }

    // optional uint32 chat_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUIMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUIMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUIMode::GetClassData() const { return &_class_data_; }

void CMsgClientUIMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUIMode *>(to)->MergeFrom(
      static_cast<const CMsgClientUIMode &>(from));
}


void CMsgClientUIMode::MergeFrom(const CMsgClientUIMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUIMode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uimode_ = from.uimode_;
    }
    if (cached_has_bits & 0x00000002u) {
      chat_mode_ = from.chat_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUIMode::CopyFrom(const CMsgClientUIMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUIMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUIMode::IsInitialized() const {
  return true;
}

void CMsgClientUIMode::InternalSwap(CMsgClientUIMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUIMode, chat_mode_)
      + sizeof(CMsgClientUIMode::chat_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUIMode, uimode_)>(
          reinterpret_cast<char*>(&uimode_),
          reinterpret_cast<char*>(&other->uimode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUIMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[95]);
}

// ===================================================================

class CMsgClientVanityURLChangedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientVanityURLChangedNotification>()._has_bits_);
  static void set_has_vanity_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientVanityURLChangedNotification::CMsgClientVanityURLChangedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientVanityURLChangedNotification)
}
CMsgClientVanityURLChangedNotification::CMsgClientVanityURLChangedNotification(const CMsgClientVanityURLChangedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vanity_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vanity_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vanity_url()) {
    vanity_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vanity_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientVanityURLChangedNotification)
}

inline void CMsgClientVanityURLChangedNotification::SharedCtor() {
vanity_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vanity_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientVanityURLChangedNotification::~CMsgClientVanityURLChangedNotification() {
  // @@protoc_insertion_point(destructor:CMsgClientVanityURLChangedNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientVanityURLChangedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vanity_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientVanityURLChangedNotification::ArenaDtor(void* object) {
  CMsgClientVanityURLChangedNotification* _this = reinterpret_cast< CMsgClientVanityURLChangedNotification* >(object);
  (void)_this;
}
void CMsgClientVanityURLChangedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientVanityURLChangedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientVanityURLChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientVanityURLChangedNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vanity_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientVanityURLChangedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string vanity_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vanity_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientVanityURLChangedNotification.vanity_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientVanityURLChangedNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientVanityURLChangedNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vanity_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vanity_url().data(), static_cast<int>(this->_internal_vanity_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientVanityURLChangedNotification.vanity_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vanity_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientVanityURLChangedNotification)
  return target;
}

size_t CMsgClientVanityURLChangedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientVanityURLChangedNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string vanity_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vanity_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientVanityURLChangedNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientVanityURLChangedNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientVanityURLChangedNotification::GetClassData() const { return &_class_data_; }

void CMsgClientVanityURLChangedNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientVanityURLChangedNotification *>(to)->MergeFrom(
      static_cast<const CMsgClientVanityURLChangedNotification &>(from));
}


void CMsgClientVanityURLChangedNotification::MergeFrom(const CMsgClientVanityURLChangedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientVanityURLChangedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vanity_url()) {
    _internal_set_vanity_url(from._internal_vanity_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientVanityURLChangedNotification::CopyFrom(const CMsgClientVanityURLChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientVanityURLChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientVanityURLChangedNotification::IsInitialized() const {
  return true;
}

void CMsgClientVanityURLChangedNotification::InternalSwap(CMsgClientVanityURLChangedNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vanity_url_, lhs_arena,
      &other->vanity_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientVanityURLChangedNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[96]);
}

// ===================================================================

class CMsgClientAuthorizeLocalDeviceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAuthorizeLocalDeviceRequest>()._has_bits_);
  static void set_has_device_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_local_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientAuthorizeLocalDeviceRequest::CMsgClientAuthorizeLocalDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAuthorizeLocalDeviceRequest)
}
CMsgClientAuthorizeLocalDeviceRequest::CMsgClientAuthorizeLocalDeviceRequest(const CMsgClientAuthorizeLocalDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_description()) {
    device_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&local_device_token_, &from.local_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_account_id_) -
    reinterpret_cast<char*>(&local_device_token_)) + sizeof(owner_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAuthorizeLocalDeviceRequest)
}

inline void CMsgClientAuthorizeLocalDeviceRequest::SharedCtor() {
device_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_device_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_account_id_) -
    reinterpret_cast<char*>(&local_device_token_)) + sizeof(owner_account_id_));
}

CMsgClientAuthorizeLocalDeviceRequest::~CMsgClientAuthorizeLocalDeviceRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientAuthorizeLocalDeviceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAuthorizeLocalDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAuthorizeLocalDeviceRequest::ArenaDtor(void* object) {
  CMsgClientAuthorizeLocalDeviceRequest* _this = reinterpret_cast< CMsgClientAuthorizeLocalDeviceRequest* >(object);
  (void)_this;
}
void CMsgClientAuthorizeLocalDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAuthorizeLocalDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAuthorizeLocalDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAuthorizeLocalDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&local_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_account_id_) -
        reinterpret_cast<char*>(&local_device_token_)) + sizeof(owner_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAuthorizeLocalDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string device_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAuthorizeLocalDeviceRequest.device_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 local_device_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_local_device_token(&has_bits);
          local_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAuthorizeLocalDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAuthorizeLocalDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_description().data(), static_cast<int>(this->_internal_device_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAuthorizeLocalDeviceRequest.device_description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_description(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id(), target);
  }

  // optional uint64 local_device_token = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_local_device_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAuthorizeLocalDeviceRequest)
  return target;
}

size_t CMsgClientAuthorizeLocalDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAuthorizeLocalDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string device_description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_description());
    }

    // optional uint64 local_device_token = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_local_device_token());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAuthorizeLocalDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAuthorizeLocalDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAuthorizeLocalDeviceRequest::GetClassData() const { return &_class_data_; }

void CMsgClientAuthorizeLocalDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAuthorizeLocalDeviceRequest *>(to)->MergeFrom(
      static_cast<const CMsgClientAuthorizeLocalDeviceRequest &>(from));
}


void CMsgClientAuthorizeLocalDeviceRequest::MergeFrom(const CMsgClientAuthorizeLocalDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAuthorizeLocalDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_description(from._internal_device_description());
    }
    if (cached_has_bits & 0x00000002u) {
      local_device_token_ = from.local_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_ = from.owner_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAuthorizeLocalDeviceRequest::CopyFrom(const CMsgClientAuthorizeLocalDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAuthorizeLocalDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthorizeLocalDeviceRequest::IsInitialized() const {
  return true;
}

void CMsgClientAuthorizeLocalDeviceRequest::InternalSwap(CMsgClientAuthorizeLocalDeviceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_description_, lhs_arena,
      &other->device_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceRequest, owner_account_id_)
      + sizeof(CMsgClientAuthorizeLocalDeviceRequest::owner_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceRequest, local_device_token_)>(
          reinterpret_cast<char*>(&local_device_token_),
          reinterpret_cast<char*>(&other->local_device_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAuthorizeLocalDeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[97]);
}

// ===================================================================

class CMsgClientAuthorizeLocalDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAuthorizeLocalDevice>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_authed_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAuthorizeLocalDevice::CMsgClientAuthorizeLocalDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAuthorizeLocalDevice)
}
CMsgClientAuthorizeLocalDevice::CMsgClientAuthorizeLocalDevice(const CMsgClientAuthorizeLocalDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&authed_device_token_, &from.authed_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&authed_device_token_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAuthorizeLocalDevice)
}

inline void CMsgClientAuthorizeLocalDevice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&authed_device_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_account_id_) -
    reinterpret_cast<char*>(&authed_device_token_)) + sizeof(owner_account_id_));
eresult_ = 2;
}

CMsgClientAuthorizeLocalDevice::~CMsgClientAuthorizeLocalDevice() {
  // @@protoc_insertion_point(destructor:CMsgClientAuthorizeLocalDevice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAuthorizeLocalDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAuthorizeLocalDevice::ArenaDtor(void* object) {
  CMsgClientAuthorizeLocalDevice* _this = reinterpret_cast< CMsgClientAuthorizeLocalDevice* >(object);
  (void)_this;
}
void CMsgClientAuthorizeLocalDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAuthorizeLocalDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAuthorizeLocalDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAuthorizeLocalDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&authed_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_account_id_) -
        reinterpret_cast<char*>(&authed_device_token_)) + sizeof(owner_account_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAuthorizeLocalDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 authed_device_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_authed_device_token(&has_bits);
          authed_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAuthorizeLocalDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAuthorizeLocalDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id(), target);
  }

  // optional uint64 authed_device_token = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_authed_device_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAuthorizeLocalDevice)
  return target;
}

size_t CMsgClientAuthorizeLocalDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAuthorizeLocalDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 authed_device_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_authed_device_token());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_account_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAuthorizeLocalDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAuthorizeLocalDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAuthorizeLocalDevice::GetClassData() const { return &_class_data_; }

void CMsgClientAuthorizeLocalDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAuthorizeLocalDevice *>(to)->MergeFrom(
      static_cast<const CMsgClientAuthorizeLocalDevice &>(from));
}


void CMsgClientAuthorizeLocalDevice::MergeFrom(const CMsgClientAuthorizeLocalDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAuthorizeLocalDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      authed_device_token_ = from.authed_device_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAuthorizeLocalDevice::CopyFrom(const CMsgClientAuthorizeLocalDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAuthorizeLocalDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthorizeLocalDevice::IsInitialized() const {
  return true;
}

void CMsgClientAuthorizeLocalDevice::InternalSwap(CMsgClientAuthorizeLocalDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAuthorizeLocalDevice, owner_account_id_)
      + sizeof(CMsgClientAuthorizeLocalDevice::owner_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAuthorizeLocalDevice, authed_device_token_)>(
          reinterpret_cast<char*>(&authed_device_token_),
          reinterpret_cast<char*>(&other->authed_device_token_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAuthorizeLocalDevice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[98]);
}

// ===================================================================

class CMsgClientAuthorizeLocalDeviceNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAuthorizeLocalDeviceNotification>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_local_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAuthorizeLocalDeviceNotification::CMsgClientAuthorizeLocalDeviceNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientAuthorizeLocalDeviceNotification)
}
CMsgClientAuthorizeLocalDeviceNotification::CMsgClientAuthorizeLocalDeviceNotification(const CMsgClientAuthorizeLocalDeviceNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&local_device_token_, &from.local_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&local_device_token_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAuthorizeLocalDeviceNotification)
}

inline void CMsgClientAuthorizeLocalDeviceNotification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_device_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_account_id_) -
    reinterpret_cast<char*>(&local_device_token_)) + sizeof(owner_account_id_));
eresult_ = 2;
}

CMsgClientAuthorizeLocalDeviceNotification::~CMsgClientAuthorizeLocalDeviceNotification() {
  // @@protoc_insertion_point(destructor:CMsgClientAuthorizeLocalDeviceNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientAuthorizeLocalDeviceNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientAuthorizeLocalDeviceNotification::ArenaDtor(void* object) {
  CMsgClientAuthorizeLocalDeviceNotification* _this = reinterpret_cast< CMsgClientAuthorizeLocalDeviceNotification* >(object);
  (void)_this;
}
void CMsgClientAuthorizeLocalDeviceNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAuthorizeLocalDeviceNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAuthorizeLocalDeviceNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAuthorizeLocalDeviceNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&local_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_account_id_) -
        reinterpret_cast<char*>(&local_device_token_)) + sizeof(owner_account_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAuthorizeLocalDeviceNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 local_device_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_local_device_token(&has_bits);
          local_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAuthorizeLocalDeviceNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAuthorizeLocalDeviceNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_account_id(), target);
  }

  // optional uint64 local_device_token = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_local_device_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAuthorizeLocalDeviceNotification)
  return target;
}

size_t CMsgClientAuthorizeLocalDeviceNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAuthorizeLocalDeviceNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 local_device_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_local_device_token());
    }

    // optional uint32 owner_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_account_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAuthorizeLocalDeviceNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientAuthorizeLocalDeviceNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAuthorizeLocalDeviceNotification::GetClassData() const { return &_class_data_; }

void CMsgClientAuthorizeLocalDeviceNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientAuthorizeLocalDeviceNotification *>(to)->MergeFrom(
      static_cast<const CMsgClientAuthorizeLocalDeviceNotification &>(from));
}


void CMsgClientAuthorizeLocalDeviceNotification::MergeFrom(const CMsgClientAuthorizeLocalDeviceNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAuthorizeLocalDeviceNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      local_device_token_ = from.local_device_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAuthorizeLocalDeviceNotification::CopyFrom(const CMsgClientAuthorizeLocalDeviceNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAuthorizeLocalDeviceNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthorizeLocalDeviceNotification::IsInitialized() const {
  return true;
}

void CMsgClientAuthorizeLocalDeviceNotification::InternalSwap(CMsgClientAuthorizeLocalDeviceNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceNotification, owner_account_id_)
      + sizeof(CMsgClientAuthorizeLocalDeviceNotification::owner_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAuthorizeLocalDeviceNotification, local_device_token_)>(
          reinterpret_cast<char*>(&local_device_token_),
          reinterpret_cast<char*>(&other->local_device_token_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAuthorizeLocalDeviceNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[99]);
}

// ===================================================================

class CMsgClientDeauthorizeDeviceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDeauthorizeDeviceRequest>()._has_bits_);
  static void set_has_deauthorization_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deauthorization_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientDeauthorizeDeviceRequest::CMsgClientDeauthorizeDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDeauthorizeDeviceRequest)
}
CMsgClientDeauthorizeDeviceRequest::CMsgClientDeauthorizeDeviceRequest(const CMsgClientDeauthorizeDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&deauthorization_device_token_, &from.deauthorization_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&deauthorization_account_id_) -
    reinterpret_cast<char*>(&deauthorization_device_token_)) + sizeof(deauthorization_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientDeauthorizeDeviceRequest)
}

inline void CMsgClientDeauthorizeDeviceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deauthorization_device_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deauthorization_account_id_) -
    reinterpret_cast<char*>(&deauthorization_device_token_)) + sizeof(deauthorization_account_id_));
}

CMsgClientDeauthorizeDeviceRequest::~CMsgClientDeauthorizeDeviceRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientDeauthorizeDeviceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDeauthorizeDeviceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientDeauthorizeDeviceRequest::ArenaDtor(void* object) {
  CMsgClientDeauthorizeDeviceRequest* _this = reinterpret_cast< CMsgClientDeauthorizeDeviceRequest* >(object);
  (void)_this;
}
void CMsgClientDeauthorizeDeviceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDeauthorizeDeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDeauthorizeDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDeauthorizeDeviceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&deauthorization_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deauthorization_account_id_) -
        reinterpret_cast<char*>(&deauthorization_device_token_)) + sizeof(deauthorization_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDeauthorizeDeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 deauthorization_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_deauthorization_account_id(&has_bits);
          deauthorization_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 deauthorization_device_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deauthorization_device_token(&has_bits);
          deauthorization_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDeauthorizeDeviceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDeauthorizeDeviceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 deauthorization_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deauthorization_account_id(), target);
  }

  // optional uint64 deauthorization_device_token = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_deauthorization_device_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDeauthorizeDeviceRequest)
  return target;
}

size_t CMsgClientDeauthorizeDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDeauthorizeDeviceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 deauthorization_device_token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_deauthorization_device_token());
    }

    // optional uint32 deauthorization_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deauthorization_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDeauthorizeDeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDeauthorizeDeviceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDeauthorizeDeviceRequest::GetClassData() const { return &_class_data_; }

void CMsgClientDeauthorizeDeviceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDeauthorizeDeviceRequest *>(to)->MergeFrom(
      static_cast<const CMsgClientDeauthorizeDeviceRequest &>(from));
}


void CMsgClientDeauthorizeDeviceRequest::MergeFrom(const CMsgClientDeauthorizeDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDeauthorizeDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      deauthorization_device_token_ = from.deauthorization_device_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      deauthorization_account_id_ = from.deauthorization_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDeauthorizeDeviceRequest::CopyFrom(const CMsgClientDeauthorizeDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDeauthorizeDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeauthorizeDeviceRequest::IsInitialized() const {
  return true;
}

void CMsgClientDeauthorizeDeviceRequest::InternalSwap(CMsgClientDeauthorizeDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientDeauthorizeDeviceRequest, deauthorization_account_id_)
      + sizeof(CMsgClientDeauthorizeDeviceRequest::deauthorization_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientDeauthorizeDeviceRequest, deauthorization_device_token_)>(
          reinterpret_cast<char*>(&deauthorization_device_token_),
          reinterpret_cast<char*>(&other->deauthorization_device_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDeauthorizeDeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[100]);
}

// ===================================================================

class CMsgClientDeauthorizeDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientDeauthorizeDevice>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deauthorization_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientDeauthorizeDevice::CMsgClientDeauthorizeDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientDeauthorizeDevice)
}
CMsgClientDeauthorizeDevice::CMsgClientDeauthorizeDevice(const CMsgClientDeauthorizeDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&deauthorization_account_id_, &from.deauthorization_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&deauthorization_account_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientDeauthorizeDevice)
}

inline void CMsgClientDeauthorizeDevice::SharedCtor() {
deauthorization_account_id_ = 0u;
eresult_ = 2;
}

CMsgClientDeauthorizeDevice::~CMsgClientDeauthorizeDevice() {
  // @@protoc_insertion_point(destructor:CMsgClientDeauthorizeDevice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientDeauthorizeDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientDeauthorizeDevice::ArenaDtor(void* object) {
  CMsgClientDeauthorizeDevice* _this = reinterpret_cast< CMsgClientDeauthorizeDevice* >(object);
  (void)_this;
}
void CMsgClientDeauthorizeDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientDeauthorizeDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientDeauthorizeDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientDeauthorizeDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    deauthorization_account_id_ = 0u;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientDeauthorizeDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deauthorization_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deauthorization_account_id(&has_bits);
          deauthorization_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientDeauthorizeDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientDeauthorizeDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional uint32 deauthorization_account_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deauthorization_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientDeauthorizeDevice)
  return target;
}

size_t CMsgClientDeauthorizeDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientDeauthorizeDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 deauthorization_account_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deauthorization_account_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientDeauthorizeDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientDeauthorizeDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientDeauthorizeDevice::GetClassData() const { return &_class_data_; }

void CMsgClientDeauthorizeDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientDeauthorizeDevice *>(to)->MergeFrom(
      static_cast<const CMsgClientDeauthorizeDevice &>(from));
}


void CMsgClientDeauthorizeDevice::MergeFrom(const CMsgClientDeauthorizeDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientDeauthorizeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      deauthorization_account_id_ = from.deauthorization_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientDeauthorizeDevice::CopyFrom(const CMsgClientDeauthorizeDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientDeauthorizeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeauthorizeDevice::IsInitialized() const {
  return true;
}

void CMsgClientDeauthorizeDevice::InternalSwap(CMsgClientDeauthorizeDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(deauthorization_account_id_, other->deauthorization_account_id_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientDeauthorizeDevice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[101]);
}

// ===================================================================

class CMsgClientUseLocalDeviceAuthorizations_DeviceToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientUseLocalDeviceAuthorizations_DeviceToken>()._has_bits_);
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CMsgClientUseLocalDeviceAuthorizations_DeviceToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
}
CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CMsgClientUseLocalDeviceAuthorizations_DeviceToken(const CMsgClientUseLocalDeviceAuthorizations_DeviceToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&token_id_, &from.token_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_account_id_) -
    reinterpret_cast<char*>(&token_id_)) + sizeof(owner_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
}

inline void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_account_id_) -
    reinterpret_cast<char*>(&token_id_)) + sizeof(owner_account_id_));
}

CMsgClientUseLocalDeviceAuthorizations_DeviceToken::~CMsgClientUseLocalDeviceAuthorizations_DeviceToken() {
  // @@protoc_insertion_point(destructor:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::ArenaDtor(void* object) {
  CMsgClientUseLocalDeviceAuthorizations_DeviceToken* _this = reinterpret_cast< CMsgClientUseLocalDeviceAuthorizations_DeviceToken* >(object);
  (void)_this;
}
void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&token_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_account_id_) -
        reinterpret_cast<char*>(&token_id_)) + sizeof(owner_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUseLocalDeviceAuthorizations_DeviceToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_token_id(&has_bits);
          token_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUseLocalDeviceAuthorizations_DeviceToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_account_id(), target);
  }

  // optional uint64 token_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
  return target;
}

size_t CMsgClientUseLocalDeviceAuthorizations_DeviceToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 token_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_token_id());
    }

    // optional uint32 owner_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUseLocalDeviceAuthorizations_DeviceToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUseLocalDeviceAuthorizations_DeviceToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUseLocalDeviceAuthorizations_DeviceToken::GetClassData() const { return &_class_data_; }

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUseLocalDeviceAuthorizations_DeviceToken *>(to)->MergeFrom(
      static_cast<const CMsgClientUseLocalDeviceAuthorizations_DeviceToken &>(from));
}


void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::MergeFrom(const CMsgClientUseLocalDeviceAuthorizations_DeviceToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_id_ = from.token_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::CopyFrom(const CMsgClientUseLocalDeviceAuthorizations_DeviceToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUseLocalDeviceAuthorizations.DeviceToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUseLocalDeviceAuthorizations_DeviceToken::IsInitialized() const {
  return true;
}

void CMsgClientUseLocalDeviceAuthorizations_DeviceToken::InternalSwap(CMsgClientUseLocalDeviceAuthorizations_DeviceToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations_DeviceToken, owner_account_id_)
      + sizeof(CMsgClientUseLocalDeviceAuthorizations_DeviceToken::owner_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientUseLocalDeviceAuthorizations_DeviceToken, token_id_)>(
          reinterpret_cast<char*>(&token_id_),
          reinterpret_cast<char*>(&other->token_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUseLocalDeviceAuthorizations_DeviceToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[102]);
}

// ===================================================================

class CMsgClientUseLocalDeviceAuthorizations::_Internal {
 public:
};

CMsgClientUseLocalDeviceAuthorizations::CMsgClientUseLocalDeviceAuthorizations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  authorization_account_id_(arena),
  device_tokens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientUseLocalDeviceAuthorizations)
}
CMsgClientUseLocalDeviceAuthorizations::CMsgClientUseLocalDeviceAuthorizations(const CMsgClientUseLocalDeviceAuthorizations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      authorization_account_id_(from.authorization_account_id_),
      device_tokens_(from.device_tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientUseLocalDeviceAuthorizations)
}

inline void CMsgClientUseLocalDeviceAuthorizations::SharedCtor() {
}

CMsgClientUseLocalDeviceAuthorizations::~CMsgClientUseLocalDeviceAuthorizations() {
  // @@protoc_insertion_point(destructor:CMsgClientUseLocalDeviceAuthorizations)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientUseLocalDeviceAuthorizations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientUseLocalDeviceAuthorizations::ArenaDtor(void* object) {
  CMsgClientUseLocalDeviceAuthorizations* _this = reinterpret_cast< CMsgClientUseLocalDeviceAuthorizations* >(object);
  (void)_this;
}
void CMsgClientUseLocalDeviceAuthorizations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientUseLocalDeviceAuthorizations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientUseLocalDeviceAuthorizations::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientUseLocalDeviceAuthorizations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authorization_account_id_.Clear();
  device_tokens_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientUseLocalDeviceAuthorizations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 authorization_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_authorization_account_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_authorization_account_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientUseLocalDeviceAuthorizations.DeviceToken device_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientUseLocalDeviceAuthorizations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientUseLocalDeviceAuthorizations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 authorization_account_id = 1;
  for (int i = 0, n = this->_internal_authorization_account_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_authorization_account_id(i), target);
  }

  // repeated .CMsgClientUseLocalDeviceAuthorizations.DeviceToken device_tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_device_tokens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientUseLocalDeviceAuthorizations)
  return target;
}

size_t CMsgClientUseLocalDeviceAuthorizations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientUseLocalDeviceAuthorizations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 authorization_account_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->authorization_account_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_authorization_account_id_size());
    total_size += data_size;
  }

  // repeated .CMsgClientUseLocalDeviceAuthorizations.DeviceToken device_tokens = 2;
  total_size += 1UL * this->_internal_device_tokens_size();
  for (const auto& msg : this->device_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientUseLocalDeviceAuthorizations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientUseLocalDeviceAuthorizations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientUseLocalDeviceAuthorizations::GetClassData() const { return &_class_data_; }

void CMsgClientUseLocalDeviceAuthorizations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientUseLocalDeviceAuthorizations *>(to)->MergeFrom(
      static_cast<const CMsgClientUseLocalDeviceAuthorizations &>(from));
}


void CMsgClientUseLocalDeviceAuthorizations::MergeFrom(const CMsgClientUseLocalDeviceAuthorizations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientUseLocalDeviceAuthorizations)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  authorization_account_id_.MergeFrom(from.authorization_account_id_);
  device_tokens_.MergeFrom(from.device_tokens_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientUseLocalDeviceAuthorizations::CopyFrom(const CMsgClientUseLocalDeviceAuthorizations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientUseLocalDeviceAuthorizations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUseLocalDeviceAuthorizations::IsInitialized() const {
  return true;
}

void CMsgClientUseLocalDeviceAuthorizations::InternalSwap(CMsgClientUseLocalDeviceAuthorizations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  authorization_account_id_.InternalSwap(&other->authorization_account_id_);
  device_tokens_.InternalSwap(&other->device_tokens_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientUseLocalDeviceAuthorizations::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[103]);
}

// ===================================================================

class CMsgClientGetAuthorizedDevices::_Internal {
 public:
};

CMsgClientGetAuthorizedDevices::CMsgClientGetAuthorizedDevices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetAuthorizedDevices)
}
CMsgClientGetAuthorizedDevices::CMsgClientGetAuthorizedDevices(const CMsgClientGetAuthorizedDevices& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetAuthorizedDevices)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetAuthorizedDevices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetAuthorizedDevices::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetAuthorizedDevices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[104]);
}

// ===================================================================

class CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice>()._has_bits_);
  static void set_has_auth_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_access_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_borrower_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_app_played(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
}
CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice(const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_name()) {
    device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&auth_device_token_, &from.auth_device_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(app_played_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
}

inline void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SharedCtor() {
device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auth_device_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_played_) -
    reinterpret_cast<char*>(&auth_device_token_)) + sizeof(app_played_));
}

CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::~CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice() {
  // @@protoc_insertion_point(destructor:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::ArenaDtor(void* object) {
  CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* _this = reinterpret_cast< CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* >(object);
  (void)_this;
}
void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&auth_device_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_played_) -
        reinterpret_cast<char*>(&auth_device_token_)) + sizeof(app_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 auth_device_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_auth_device_token(&has_bits);
          auth_device_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice.device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_access_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_access_time(&has_bits);
          last_access_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 borrower_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_borrower_id(&has_bits);
          borrower_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_pending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_pending(&has_bits);
          is_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_played = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_app_played(&has_bits);
          app_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice.device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_name(), target);
  }

  // optional uint32 last_access_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_access_time(), target);
  }

  // optional uint32 borrower_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_borrower_id(), target);
  }

  // optional bool is_pending = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_pending(), target);
  }

  // optional uint32 app_played = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_app_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
  return target;
}

size_t CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string device_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_name());
    }

    // optional uint64 auth_device_token = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_auth_device_token());
    }

    // optional uint32 last_access_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_access_time());
    }

    // optional uint32 borrower_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_borrower_id());
    }

    // optional bool is_pending = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 app_played = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_played());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::GetClassData() const { return &_class_data_; }

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice *>(to)->MergeFrom(
      static_cast<const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice &>(from));
}


void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::MergeFrom(const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_access_time_ = from.last_access_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      borrower_id_ = from.borrower_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000020u) {
      app_played_ = from.app_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::CopyFrom(const CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::IsInitialized() const {
  return true;
}

void CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::InternalSwap(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_name_, lhs_arena,
      &other->device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, app_played_)
      + sizeof(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::app_played_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice, auth_device_token_)>(
          reinterpret_cast<char*>(&auth_device_token_),
          reinterpret_cast<char*>(&other->auth_device_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[105]);
}

// ===================================================================

class CMsgClientGetAuthorizedDevicesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetAuthorizedDevicesResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetAuthorizedDevicesResponse::CMsgClientGetAuthorizedDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  authorized_device_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetAuthorizedDevicesResponse)
}
CMsgClientGetAuthorizedDevicesResponse::CMsgClientGetAuthorizedDevicesResponse(const CMsgClientGetAuthorizedDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      authorized_device_(from.authorized_device_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetAuthorizedDevicesResponse)
}

inline void CMsgClientGetAuthorizedDevicesResponse::SharedCtor() {
eresult_ = 2;
}

CMsgClientGetAuthorizedDevicesResponse::~CMsgClientGetAuthorizedDevicesResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetAuthorizedDevicesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetAuthorizedDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetAuthorizedDevicesResponse::ArenaDtor(void* object) {
  CMsgClientGetAuthorizedDevicesResponse* _this = reinterpret_cast< CMsgClientGetAuthorizedDevicesResponse* >(object);
  (void)_this;
}
void CMsgClientGetAuthorizedDevicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetAuthorizedDevicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetAuthorizedDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetAuthorizedDevicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authorized_device_.Clear();
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetAuthorizedDevicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice authorized_device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_authorized_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetAuthorizedDevicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetAuthorizedDevicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // repeated .CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice authorized_device = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_authorized_device_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_authorized_device(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetAuthorizedDevicesResponse)
  return target;
}

size_t CMsgClientGetAuthorizedDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetAuthorizedDevicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientGetAuthorizedDevicesResponse.AuthorizedDevice authorized_device = 2;
  total_size += 1UL * this->_internal_authorized_device_size();
  for (const auto& msg : this->authorized_device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetAuthorizedDevicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetAuthorizedDevicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetAuthorizedDevicesResponse::GetClassData() const { return &_class_data_; }

void CMsgClientGetAuthorizedDevicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetAuthorizedDevicesResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientGetAuthorizedDevicesResponse &>(from));
}


void CMsgClientGetAuthorizedDevicesResponse::MergeFrom(const CMsgClientGetAuthorizedDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetAuthorizedDevicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  authorized_device_.MergeFrom(from.authorized_device_);
  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetAuthorizedDevicesResponse::CopyFrom(const CMsgClientGetAuthorizedDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetAuthorizedDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAuthorizedDevicesResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetAuthorizedDevicesResponse::InternalSwap(CMsgClientGetAuthorizedDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  authorized_device_.InternalSwap(&other->authorized_device_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetAuthorizedDevicesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[106]);
}

// ===================================================================

class CMsgClientSharedLibraryLockStatus_LockedLibrary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSharedLibraryLockStatus_LockedLibrary>()._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locked_by(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientSharedLibraryLockStatus_LockedLibrary::CMsgClientSharedLibraryLockStatus_LockedLibrary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSharedLibraryLockStatus.LockedLibrary)
}
CMsgClientSharedLibraryLockStatus_LockedLibrary::CMsgClientSharedLibraryLockStatus_LockedLibrary(const CMsgClientSharedLibraryLockStatus_LockedLibrary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_by_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(locked_by_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSharedLibraryLockStatus.LockedLibrary)
}

inline void CMsgClientSharedLibraryLockStatus_LockedLibrary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locked_by_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(locked_by_));
}

CMsgClientSharedLibraryLockStatus_LockedLibrary::~CMsgClientSharedLibraryLockStatus_LockedLibrary() {
  // @@protoc_insertion_point(destructor:CMsgClientSharedLibraryLockStatus.LockedLibrary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSharedLibraryLockStatus_LockedLibrary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::ArenaDtor(void* object) {
  CMsgClientSharedLibraryLockStatus_LockedLibrary* _this = reinterpret_cast< CMsgClientSharedLibraryLockStatus_LockedLibrary* >(object);
  (void)_this;
}
void CMsgClientSharedLibraryLockStatus_LockedLibrary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSharedLibraryLockStatus_LockedLibrary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSharedLibraryLockStatus.LockedLibrary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&locked_by_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(locked_by_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSharedLibraryLockStatus_LockedLibrary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 locked_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_locked_by(&has_bits);
          locked_by_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSharedLibraryLockStatus_LockedLibrary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSharedLibraryLockStatus.LockedLibrary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // optional uint32 locked_by = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_locked_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSharedLibraryLockStatus.LockedLibrary)
  return target;
}

size_t CMsgClientSharedLibraryLockStatus_LockedLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSharedLibraryLockStatus.LockedLibrary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 owner_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
    }

    // optional uint32 locked_by = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_locked_by());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSharedLibraryLockStatus_LockedLibrary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSharedLibraryLockStatus_LockedLibrary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSharedLibraryLockStatus_LockedLibrary::GetClassData() const { return &_class_data_; }

void CMsgClientSharedLibraryLockStatus_LockedLibrary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSharedLibraryLockStatus_LockedLibrary *>(to)->MergeFrom(
      static_cast<const CMsgClientSharedLibraryLockStatus_LockedLibrary &>(from));
}


void CMsgClientSharedLibraryLockStatus_LockedLibrary::MergeFrom(const CMsgClientSharedLibraryLockStatus_LockedLibrary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSharedLibraryLockStatus.LockedLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      locked_by_ = from.locked_by_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::CopyFrom(const CMsgClientSharedLibraryLockStatus_LockedLibrary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSharedLibraryLockStatus.LockedLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryLockStatus_LockedLibrary::IsInitialized() const {
  return true;
}

void CMsgClientSharedLibraryLockStatus_LockedLibrary::InternalSwap(CMsgClientSharedLibraryLockStatus_LockedLibrary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus_LockedLibrary, locked_by_)
      + sizeof(CMsgClientSharedLibraryLockStatus_LockedLibrary::locked_by_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSharedLibraryLockStatus_LockedLibrary, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSharedLibraryLockStatus_LockedLibrary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[107]);
}

// ===================================================================

class CMsgClientSharedLibraryLockStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSharedLibraryLockStatus>()._has_bits_);
  static void set_has_own_library_locked_by(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSharedLibraryLockStatus::CMsgClientSharedLibraryLockStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  locked_library_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSharedLibraryLockStatus)
}
CMsgClientSharedLibraryLockStatus::CMsgClientSharedLibraryLockStatus(const CMsgClientSharedLibraryLockStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      locked_library_(from.locked_library_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  own_library_locked_by_ = from.own_library_locked_by_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSharedLibraryLockStatus)
}

inline void CMsgClientSharedLibraryLockStatus::SharedCtor() {
own_library_locked_by_ = 0u;
}

CMsgClientSharedLibraryLockStatus::~CMsgClientSharedLibraryLockStatus() {
  // @@protoc_insertion_point(destructor:CMsgClientSharedLibraryLockStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSharedLibraryLockStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSharedLibraryLockStatus::ArenaDtor(void* object) {
  CMsgClientSharedLibraryLockStatus* _this = reinterpret_cast< CMsgClientSharedLibraryLockStatus* >(object);
  (void)_this;
}
void CMsgClientSharedLibraryLockStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSharedLibraryLockStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSharedLibraryLockStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSharedLibraryLockStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locked_library_.Clear();
  own_library_locked_by_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSharedLibraryLockStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgClientSharedLibraryLockStatus.LockedLibrary locked_library = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locked_library(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 own_library_locked_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_own_library_locked_by(&has_bits);
          own_library_locked_by_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSharedLibraryLockStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSharedLibraryLockStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientSharedLibraryLockStatus.LockedLibrary locked_library = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locked_library_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_locked_library(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 own_library_locked_by = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_own_library_locked_by(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSharedLibraryLockStatus)
  return target;
}

size_t CMsgClientSharedLibraryLockStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSharedLibraryLockStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientSharedLibraryLockStatus.LockedLibrary locked_library = 1;
  total_size += 1UL * this->_internal_locked_library_size();
  for (const auto& msg : this->locked_library_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 own_library_locked_by = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_own_library_locked_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSharedLibraryLockStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSharedLibraryLockStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSharedLibraryLockStatus::GetClassData() const { return &_class_data_; }

void CMsgClientSharedLibraryLockStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSharedLibraryLockStatus *>(to)->MergeFrom(
      static_cast<const CMsgClientSharedLibraryLockStatus &>(from));
}


void CMsgClientSharedLibraryLockStatus::MergeFrom(const CMsgClientSharedLibraryLockStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSharedLibraryLockStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  locked_library_.MergeFrom(from.locked_library_);
  if (from._internal_has_own_library_locked_by()) {
    _internal_set_own_library_locked_by(from._internal_own_library_locked_by());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSharedLibraryLockStatus::CopyFrom(const CMsgClientSharedLibraryLockStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSharedLibraryLockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryLockStatus::IsInitialized() const {
  return true;
}

void CMsgClientSharedLibraryLockStatus::InternalSwap(CMsgClientSharedLibraryLockStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  locked_library_.InternalSwap(&other->locked_library_);
  swap(own_library_locked_by_, other->own_library_locked_by_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSharedLibraryLockStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[108]);
}

// ===================================================================

class CMsgClientSharedLibraryStopPlaying_StopApp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSharedLibraryStopPlaying_StopApp>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientSharedLibraryStopPlaying_StopApp::CMsgClientSharedLibraryStopPlaying_StopApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSharedLibraryStopPlaying.StopApp)
}
CMsgClientSharedLibraryStopPlaying_StopApp::CMsgClientSharedLibraryStopPlaying_StopApp(const CMsgClientSharedLibraryStopPlaying_StopApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSharedLibraryStopPlaying.StopApp)
}

inline void CMsgClientSharedLibraryStopPlaying_StopApp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(owner_id_));
}

CMsgClientSharedLibraryStopPlaying_StopApp::~CMsgClientSharedLibraryStopPlaying_StopApp() {
  // @@protoc_insertion_point(destructor:CMsgClientSharedLibraryStopPlaying.StopApp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSharedLibraryStopPlaying_StopApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSharedLibraryStopPlaying_StopApp::ArenaDtor(void* object) {
  CMsgClientSharedLibraryStopPlaying_StopApp* _this = reinterpret_cast< CMsgClientSharedLibraryStopPlaying_StopApp* >(object);
  (void)_this;
}
void CMsgClientSharedLibraryStopPlaying_StopApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSharedLibraryStopPlaying_StopApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSharedLibraryStopPlaying_StopApp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSharedLibraryStopPlaying.StopApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_id_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(owner_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSharedLibraryStopPlaying_StopApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSharedLibraryStopPlaying_StopApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSharedLibraryStopPlaying.StopApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 owner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSharedLibraryStopPlaying.StopApp)
  return target;
}

size_t CMsgClientSharedLibraryStopPlaying_StopApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSharedLibraryStopPlaying.StopApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 owner_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSharedLibraryStopPlaying_StopApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSharedLibraryStopPlaying_StopApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSharedLibraryStopPlaying_StopApp::GetClassData() const { return &_class_data_; }

void CMsgClientSharedLibraryStopPlaying_StopApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSharedLibraryStopPlaying_StopApp *>(to)->MergeFrom(
      static_cast<const CMsgClientSharedLibraryStopPlaying_StopApp &>(from));
}


void CMsgClientSharedLibraryStopPlaying_StopApp::MergeFrom(const CMsgClientSharedLibraryStopPlaying_StopApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSharedLibraryStopPlaying.StopApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_id_ = from.owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSharedLibraryStopPlaying_StopApp::CopyFrom(const CMsgClientSharedLibraryStopPlaying_StopApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSharedLibraryStopPlaying.StopApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryStopPlaying_StopApp::IsInitialized() const {
  return true;
}

void CMsgClientSharedLibraryStopPlaying_StopApp::InternalSwap(CMsgClientSharedLibraryStopPlaying_StopApp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying_StopApp, owner_id_)
      + sizeof(CMsgClientSharedLibraryStopPlaying_StopApp::owner_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSharedLibraryStopPlaying_StopApp, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSharedLibraryStopPlaying_StopApp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[109]);
}

// ===================================================================

class CMsgClientSharedLibraryStopPlaying::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSharedLibraryStopPlaying>()._has_bits_);
  static void set_has_seconds_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSharedLibraryStopPlaying::CMsgClientSharedLibraryStopPlaying(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stop_apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientSharedLibraryStopPlaying)
}
CMsgClientSharedLibraryStopPlaying::CMsgClientSharedLibraryStopPlaying(const CMsgClientSharedLibraryStopPlaying& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stop_apps_(from.stop_apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seconds_left_ = from.seconds_left_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientSharedLibraryStopPlaying)
}

inline void CMsgClientSharedLibraryStopPlaying::SharedCtor() {
seconds_left_ = 0;
}

CMsgClientSharedLibraryStopPlaying::~CMsgClientSharedLibraryStopPlaying() {
  // @@protoc_insertion_point(destructor:CMsgClientSharedLibraryStopPlaying)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientSharedLibraryStopPlaying::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientSharedLibraryStopPlaying::ArenaDtor(void* object) {
  CMsgClientSharedLibraryStopPlaying* _this = reinterpret_cast< CMsgClientSharedLibraryStopPlaying* >(object);
  (void)_this;
}
void CMsgClientSharedLibraryStopPlaying::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSharedLibraryStopPlaying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSharedLibraryStopPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSharedLibraryStopPlaying)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_apps_.Clear();
  seconds_left_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSharedLibraryStopPlaying::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 seconds_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seconds_left(&has_bits);
          seconds_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientSharedLibraryStopPlaying.StopApp stop_apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSharedLibraryStopPlaying::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSharedLibraryStopPlaying)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seconds_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seconds_left(), target);
  }

  // repeated .CMsgClientSharedLibraryStopPlaying.StopApp stop_apps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stop_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSharedLibraryStopPlaying)
  return target;
}

size_t CMsgClientSharedLibraryStopPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSharedLibraryStopPlaying)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientSharedLibraryStopPlaying.StopApp stop_apps = 2;
  total_size += 1UL * this->_internal_stop_apps_size();
  for (const auto& msg : this->stop_apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 seconds_left = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seconds_left());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSharedLibraryStopPlaying::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientSharedLibraryStopPlaying::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSharedLibraryStopPlaying::GetClassData() const { return &_class_data_; }

void CMsgClientSharedLibraryStopPlaying::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientSharedLibraryStopPlaying *>(to)->MergeFrom(
      static_cast<const CMsgClientSharedLibraryStopPlaying &>(from));
}


void CMsgClientSharedLibraryStopPlaying::MergeFrom(const CMsgClientSharedLibraryStopPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSharedLibraryStopPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stop_apps_.MergeFrom(from.stop_apps_);
  if (from._internal_has_seconds_left()) {
    _internal_set_seconds_left(from._internal_seconds_left());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSharedLibraryStopPlaying::CopyFrom(const CMsgClientSharedLibraryStopPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSharedLibraryStopPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSharedLibraryStopPlaying::IsInitialized() const {
  return true;
}

void CMsgClientSharedLibraryStopPlaying::InternalSwap(CMsgClientSharedLibraryStopPlaying* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stop_apps_.InternalSwap(&other->stop_apps_);
  swap(seconds_left_, other->seconds_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSharedLibraryStopPlaying::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[110]);
}

// ===================================================================

class CMsgClientServiceCall::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServiceCall>()._has_bits_);
  static void set_has_sysid_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_call_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_module_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_module_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_function_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cub_output_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_callparameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ping_only(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_outstanding_calls(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgClientServiceCall::CMsgClientServiceCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientServiceCall)
}
CMsgClientServiceCall::CMsgClientServiceCall(const CMsgClientServiceCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sysid_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sysid_routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sysid_routing()) {
    sysid_routing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sysid_routing(), 
      GetArenaForAllocation());
  }
  module_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_hash()) {
    module_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_hash(), 
      GetArenaForAllocation());
  }
  callparameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    callparameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_callparameter()) {
    callparameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callparameter(), 
      GetArenaForAllocation());
  }
  ::memcpy(&call_handle_, &from.call_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&call_handle_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientServiceCall)
}

inline void CMsgClientServiceCall::SharedCtor() {
sysid_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sysid_routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
callparameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  callparameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&call_handle_)) + sizeof(app_id_));
}

CMsgClientServiceCall::~CMsgClientServiceCall() {
  // @@protoc_insertion_point(destructor:CMsgClientServiceCall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientServiceCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sysid_routing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callparameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientServiceCall::ArenaDtor(void* object) {
  CMsgClientServiceCall* _this = reinterpret_cast< CMsgClientServiceCall* >(object);
  (void)_this;
}
void CMsgClientServiceCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServiceCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServiceCall::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServiceCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sysid_routing_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      module_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      callparameter_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&call_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&call_handle_)) + sizeof(flags_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&ping_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&ping_only_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServiceCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sysid_routing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sysid_routing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 call_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_call_handle(&has_bits);
          call_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 module_crc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_module_crc(&has_bits);
          module_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes module_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_module_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 function_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_function_id(&has_bits);
          function_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cub_output_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cub_output_max(&has_bits);
          cub_output_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes callparameter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_callparameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ping_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ping_only(&has_bits);
          ping_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_outstanding_calls = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_max_outstanding_calls(&has_bits);
          max_outstanding_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServiceCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServiceCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sysid_routing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sysid_routing(), target);
  }

  // optional uint32 call_handle = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_call_handle(), target);
  }

  // optional uint32 module_crc = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_module_crc(), target);
  }

  // optional bytes module_hash = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_module_hash(), target);
  }

  // optional uint32 function_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_function_id(), target);
  }

  // optional uint32 cub_output_max = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cub_output_max(), target);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags(), target);
  }

  // optional bytes callparameter = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_callparameter(), target);
  }

  // optional bool ping_only = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ping_only(), target);
  }

  // optional uint32 max_outstanding_calls = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_max_outstanding_calls(), target);
  }

  // optional uint32 app_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServiceCall)
  return target;
}

size_t CMsgClientServiceCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServiceCall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sysid_routing = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sysid_routing());
    }

    // optional bytes module_hash = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_module_hash());
    }

    // optional bytes callparameter = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_callparameter());
    }

    // optional uint32 call_handle = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_call_handle());
    }

    // optional uint32 module_crc = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_module_crc());
    }

    // optional uint32 function_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_function_id());
    }

    // optional uint32 cub_output_max = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cub_output_max());
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool ping_only = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 max_outstanding_calls = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_outstanding_calls());
    }

    // optional uint32 app_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServiceCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientServiceCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServiceCall::GetClassData() const { return &_class_data_; }

void CMsgClientServiceCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientServiceCall *>(to)->MergeFrom(
      static_cast<const CMsgClientServiceCall &>(from));
}


void CMsgClientServiceCall::MergeFrom(const CMsgClientServiceCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServiceCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sysid_routing(from._internal_sysid_routing());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_module_hash(from._internal_module_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_callparameter(from._internal_callparameter());
    }
    if (cached_has_bits & 0x00000008u) {
      call_handle_ = from.call_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      module_crc_ = from.module_crc_;
    }
    if (cached_has_bits & 0x00000020u) {
      function_id_ = from.function_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      cub_output_max_ = from.cub_output_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ping_only_ = from.ping_only_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_outstanding_calls_ = from.max_outstanding_calls_;
    }
    if (cached_has_bits & 0x00000400u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServiceCall::CopyFrom(const CMsgClientServiceCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServiceCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceCall::IsInitialized() const {
  return true;
}

void CMsgClientServiceCall::InternalSwap(CMsgClientServiceCall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sysid_routing_, lhs_arena,
      &other->sysid_routing_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_hash_, lhs_arena,
      &other->module_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &callparameter_, lhs_arena,
      &other->callparameter_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientServiceCall, app_id_)
      + sizeof(CMsgClientServiceCall::app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientServiceCall, call_handle_)>(
          reinterpret_cast<char*>(&call_handle_),
          reinterpret_cast<char*>(&other->call_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServiceCall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[111]);
}

// ===================================================================

class CMsgClientServiceModule::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServiceModule>()._has_bits_);
  static void set_has_module_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_module_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_module_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientServiceModule::CMsgClientServiceModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientServiceModule)
}
CMsgClientServiceModule::CMsgClientServiceModule(const CMsgClientServiceModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_hash()) {
    module_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_hash(), 
      GetArenaForAllocation());
  }
  module_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_content()) {
    module_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_content(), 
      GetArenaForAllocation());
  }
  module_crc_ = from.module_crc_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientServiceModule)
}

inline void CMsgClientServiceModule::SharedCtor() {
module_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_crc_ = 0u;
}

CMsgClientServiceModule::~CMsgClientServiceModule() {
  // @@protoc_insertion_point(destructor:CMsgClientServiceModule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientServiceModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientServiceModule::ArenaDtor(void* object) {
  CMsgClientServiceModule* _this = reinterpret_cast< CMsgClientServiceModule* >(object);
  (void)_this;
}
void CMsgClientServiceModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServiceModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServiceModule::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServiceModule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      module_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      module_content_.ClearNonDefaultToEmpty();
    }
  }
  module_crc_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServiceModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 module_crc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_module_crc(&has_bits);
          module_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes module_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes module_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_module_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServiceModule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServiceModule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 module_crc = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_module_crc(), target);
  }

  // optional bytes module_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_module_hash(), target);
  }

  // optional bytes module_content = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_module_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServiceModule)
  return target;
}

size_t CMsgClientServiceModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServiceModule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes module_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_module_hash());
    }

    // optional bytes module_content = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_module_content());
    }

    // optional uint32 module_crc = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_module_crc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServiceModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientServiceModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServiceModule::GetClassData() const { return &_class_data_; }

void CMsgClientServiceModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientServiceModule *>(to)->MergeFrom(
      static_cast<const CMsgClientServiceModule &>(from));
}


void CMsgClientServiceModule::MergeFrom(const CMsgClientServiceModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServiceModule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_module_hash(from._internal_module_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_module_content(from._internal_module_content());
    }
    if (cached_has_bits & 0x00000004u) {
      module_crc_ = from.module_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServiceModule::CopyFrom(const CMsgClientServiceModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServiceModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceModule::IsInitialized() const {
  return true;
}

void CMsgClientServiceModule::InternalSwap(CMsgClientServiceModule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_hash_, lhs_arena,
      &other->module_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_content_, lhs_arena,
      &other->module_content_, rhs_arena
  );
  swap(module_crc_, other->module_crc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServiceModule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[112]);
}

// ===================================================================

class CMsgClientServiceCallResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServiceCallResponse>()._has_bits_);
  static void set_has_sysid_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_call_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_module_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_module_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ecallresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_result_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_os_version_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_system_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_load_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_exception_record(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_portable_os_version_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_portable_system_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_was_converted(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_internal_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_current_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_last_call_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_last_call_module_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_last_call_sysid_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_ecallresult(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_callissue_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_last_callcomplete_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

CMsgClientServiceCallResponse::CMsgClientServiceCallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientServiceCallResponse)
}
CMsgClientServiceCallResponse::CMsgClientServiceCallResponse(const CMsgClientServiceCallResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sysid_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sysid_routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sysid_routing()) {
    sysid_routing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sysid_routing(), 
      GetArenaForAllocation());
  }
  module_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    module_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module_hash()) {
    module_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_hash(), 
      GetArenaForAllocation());
  }
  result_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_result_content()) {
    result_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_content(), 
      GetArenaForAllocation());
  }
  os_version_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_version_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_os_version_info()) {
    os_version_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os_version_info(), 
      GetArenaForAllocation());
  }
  system_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    system_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_system_info()) {
    system_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_system_info(), 
      GetArenaForAllocation());
  }
  exception_record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exception_record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_exception_record()) {
    exception_record_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exception_record(), 
      GetArenaForAllocation());
  }
  portable_os_version_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    portable_os_version_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_portable_os_version_info()) {
    portable_os_version_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_portable_os_version_info(), 
      GetArenaForAllocation());
  }
  portable_system_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    portable_system_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_portable_system_info()) {
    portable_system_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_portable_system_info(), 
      GetArenaForAllocation());
  }
  last_call_sysid_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_call_sysid_routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_call_sysid_routing()) {
    last_call_sysid_routing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_call_sysid_routing(), 
      GetArenaForAllocation());
  }
  ::memcpy(&call_handle_, &from.call_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_callcomplete_delta_) -
    reinterpret_cast<char*>(&call_handle_)) + sizeof(last_callcomplete_delta_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientServiceCallResponse)
}

inline void CMsgClientServiceCallResponse::SharedCtor() {
sysid_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sysid_routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
module_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  module_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_version_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_version_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
system_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  system_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exception_record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exception_record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
portable_os_version_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  portable_os_version_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
portable_system_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  portable_system_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_call_sysid_routing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_call_sysid_routing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&call_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_callcomplete_delta_) -
    reinterpret_cast<char*>(&call_handle_)) + sizeof(last_callcomplete_delta_));
}

CMsgClientServiceCallResponse::~CMsgClientServiceCallResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientServiceCallResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientServiceCallResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sysid_routing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exception_record_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  portable_os_version_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  portable_system_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_call_sysid_routing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientServiceCallResponse::ArenaDtor(void* object) {
  CMsgClientServiceCallResponse* _this = reinterpret_cast< CMsgClientServiceCallResponse* >(object);
  (void)_this;
}
void CMsgClientServiceCallResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServiceCallResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServiceCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServiceCallResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sysid_routing_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      module_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      result_content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      os_version_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      system_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      exception_record_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      portable_os_version_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      portable_system_info_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    last_call_sysid_routing_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&call_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_count_) -
        reinterpret_cast<char*>(&call_handle_)) + sizeof(current_count_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&last_call_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_callcomplete_delta_) -
        reinterpret_cast<char*>(&last_call_handle_)) + sizeof(last_callcomplete_delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServiceCallResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes sysid_routing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sysid_routing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 call_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_call_handle(&has_bits);
          call_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 module_crc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_module_crc(&has_bits);
          module_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes module_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_module_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ecallresult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ecallresult(&has_bits);
          ecallresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes result_content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_result_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes os_version_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_os_version_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes system_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_system_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 load_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_load_address(&has_bits);
          load_address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes exception_record = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_exception_record();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes portable_os_version_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_portable_os_version_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes portable_system_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_portable_system_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_converted = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_was_converted(&has_bits);
          was_converted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 internal_result = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_internal_result(&has_bits);
          internal_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_current_count(&has_bits);
          current_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_call_handle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_last_call_handle(&has_bits);
          last_call_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_call_module_crc = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_last_call_module_crc(&has_bits);
          last_call_module_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes last_call_sysid_routing = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_last_call_sysid_routing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_ecallresult = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_last_ecallresult(&has_bits);
          last_ecallresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_callissue_delta = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_last_callissue_delta(&has_bits);
          last_callissue_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_callcomplete_delta = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_last_callcomplete_delta(&has_bits);
          last_callcomplete_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServiceCallResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServiceCallResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sysid_routing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sysid_routing(), target);
  }

  // optional uint32 call_handle = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_call_handle(), target);
  }

  // optional uint32 module_crc = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_module_crc(), target);
  }

  // optional bytes module_hash = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_module_hash(), target);
  }

  // optional uint32 ecallresult = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ecallresult(), target);
  }

  // optional bytes result_content = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_result_content(), target);
  }

  // optional bytes os_version_info = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_os_version_info(), target);
  }

  // optional bytes system_info = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_system_info(), target);
  }

  // optional fixed64 load_address = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(9, this->_internal_load_address(), target);
  }

  // optional bytes exception_record = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_exception_record(), target);
  }

  // optional bytes portable_os_version_info = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_portable_os_version_info(), target);
  }

  // optional bytes portable_system_info = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_portable_system_info(), target);
  }

  // optional bool was_converted = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_was_converted(), target);
  }

  // optional uint32 internal_result = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_internal_result(), target);
  }

  // optional uint32 current_count = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_current_count(), target);
  }

  // optional uint32 last_call_handle = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_last_call_handle(), target);
  }

  // optional uint32 last_call_module_crc = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_last_call_module_crc(), target);
  }

  // optional bytes last_call_sysid_routing = 18;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_last_call_sysid_routing(), target);
  }

  // optional uint32 last_ecallresult = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_last_ecallresult(), target);
  }

  // optional uint32 last_callissue_delta = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_last_callissue_delta(), target);
  }

  // optional uint32 last_callcomplete_delta = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_last_callcomplete_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServiceCallResponse)
  return target;
}

size_t CMsgClientServiceCallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServiceCallResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes sysid_routing = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sysid_routing());
    }

    // optional bytes module_hash = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_module_hash());
    }

    // optional bytes result_content = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_result_content());
    }

    // optional bytes os_version_info = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_os_version_info());
    }

    // optional bytes system_info = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_system_info());
    }

    // optional bytes exception_record = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_exception_record());
    }

    // optional bytes portable_os_version_info = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_portable_os_version_info());
    }

    // optional bytes portable_system_info = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_portable_system_info());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bytes last_call_sysid_routing = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_call_sysid_routing());
    }

    // optional uint32 call_handle = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_call_handle());
    }

    // optional uint32 module_crc = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_module_crc());
    }

    // optional fixed64 load_address = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional uint32 ecallresult = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ecallresult());
    }

    // optional bool was_converted = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint32 internal_result = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_result());
    }

    // optional uint32 current_count = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_count());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 last_call_handle = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_call_handle());
    }

    // optional uint32 last_call_module_crc = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_call_module_crc());
    }

    // optional uint32 last_ecallresult = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_ecallresult());
    }

    // optional uint32 last_callissue_delta = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_callissue_delta());
    }

    // optional uint32 last_callcomplete_delta = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_callcomplete_delta());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServiceCallResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientServiceCallResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServiceCallResponse::GetClassData() const { return &_class_data_; }

void CMsgClientServiceCallResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientServiceCallResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientServiceCallResponse &>(from));
}


void CMsgClientServiceCallResponse::MergeFrom(const CMsgClientServiceCallResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServiceCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sysid_routing(from._internal_sysid_routing());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_module_hash(from._internal_module_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_result_content(from._internal_result_content());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_os_version_info(from._internal_os_version_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_system_info(from._internal_system_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_exception_record(from._internal_exception_record());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_portable_os_version_info(from._internal_portable_os_version_info());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_portable_system_info(from._internal_portable_system_info());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_last_call_sysid_routing(from._internal_last_call_sysid_routing());
    }
    if (cached_has_bits & 0x00000200u) {
      call_handle_ = from.call_handle_;
    }
    if (cached_has_bits & 0x00000400u) {
      module_crc_ = from.module_crc_;
    }
    if (cached_has_bits & 0x00000800u) {
      load_address_ = from.load_address_;
    }
    if (cached_has_bits & 0x00001000u) {
      ecallresult_ = from.ecallresult_;
    }
    if (cached_has_bits & 0x00002000u) {
      was_converted_ = from.was_converted_;
    }
    if (cached_has_bits & 0x00004000u) {
      internal_result_ = from.internal_result_;
    }
    if (cached_has_bits & 0x00008000u) {
      current_count_ = from.current_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      last_call_handle_ = from.last_call_handle_;
    }
    if (cached_has_bits & 0x00020000u) {
      last_call_module_crc_ = from.last_call_module_crc_;
    }
    if (cached_has_bits & 0x00040000u) {
      last_ecallresult_ = from.last_ecallresult_;
    }
    if (cached_has_bits & 0x00080000u) {
      last_callissue_delta_ = from.last_callissue_delta_;
    }
    if (cached_has_bits & 0x00100000u) {
      last_callcomplete_delta_ = from.last_callcomplete_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServiceCallResponse::CopyFrom(const CMsgClientServiceCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServiceCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceCallResponse::IsInitialized() const {
  return true;
}

void CMsgClientServiceCallResponse::InternalSwap(CMsgClientServiceCallResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sysid_routing_, lhs_arena,
      &other->sysid_routing_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_hash_, lhs_arena,
      &other->module_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_content_, lhs_arena,
      &other->result_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_version_info_, lhs_arena,
      &other->os_version_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &system_info_, lhs_arena,
      &other->system_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exception_record_, lhs_arena,
      &other->exception_record_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &portable_os_version_info_, lhs_arena,
      &other->portable_os_version_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &portable_system_info_, lhs_arena,
      &other->portable_system_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_call_sysid_routing_, lhs_arena,
      &other->last_call_sysid_routing_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientServiceCallResponse, last_callcomplete_delta_)
      + sizeof(CMsgClientServiceCallResponse::last_callcomplete_delta_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientServiceCallResponse, call_handle_)>(
          reinterpret_cast<char*>(&call_handle_),
          reinterpret_cast<char*>(&other->call_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServiceCallResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[113]);
}

// ===================================================================

class CMsgAMUnlockH264::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMUnlockH264>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAMUnlockH264::CMsgAMUnlockH264(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMUnlockH264)
}
CMsgAMUnlockH264::CMsgAMUnlockH264(const CMsgAMUnlockH264& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMUnlockH264)
}

inline void CMsgAMUnlockH264::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(reason_));
}

CMsgAMUnlockH264::~CMsgAMUnlockH264() {
  // @@protoc_insertion_point(destructor:CMsgAMUnlockH264)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMUnlockH264::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMUnlockH264::ArenaDtor(void* object) {
  CMsgAMUnlockH264* _this = reinterpret_cast< CMsgAMUnlockH264* >(object);
  (void)_this;
}
void CMsgAMUnlockH264::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMUnlockH264::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMUnlockH264::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMUnlockH264)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMUnlockH264::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_platform(&has_bits);
          platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMUnlockH264::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMUnlockH264)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional int32 platform = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_platform(), target);
  }

  // optional int32 reason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMUnlockH264)
  return target;
}

size_t CMsgAMUnlockH264::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMUnlockH264)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional int32 platform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_platform());
    }

    // optional int32 reason = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMUnlockH264::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMUnlockH264::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMUnlockH264::GetClassData() const { return &_class_data_; }

void CMsgAMUnlockH264::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMUnlockH264 *>(to)->MergeFrom(
      static_cast<const CMsgAMUnlockH264 &>(from));
}


void CMsgAMUnlockH264::MergeFrom(const CMsgAMUnlockH264& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMUnlockH264)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000004u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMUnlockH264::CopyFrom(const CMsgAMUnlockH264& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMUnlockH264)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMUnlockH264::IsInitialized() const {
  return true;
}

void CMsgAMUnlockH264::InternalSwap(CMsgAMUnlockH264* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMUnlockH264, reason_)
      + sizeof(CMsgAMUnlockH264::reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMUnlockH264, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMUnlockH264::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[114]);
}

// ===================================================================

class CMsgAMUnlockH264Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMUnlockH264Response>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMUnlockH264Response::CMsgAMUnlockH264Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMUnlockH264Response)
}
CMsgAMUnlockH264Response::CMsgAMUnlockH264Response(const CMsgAMUnlockH264Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encryption_key()) {
    encryption_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encryption_key(), 
      GetArenaForAllocation());
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMUnlockH264Response)
}

inline void CMsgAMUnlockH264Response::SharedCtor() {
encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
eresult_ = 2;
}

CMsgAMUnlockH264Response::~CMsgAMUnlockH264Response() {
  // @@protoc_insertion_point(destructor:CMsgAMUnlockH264Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMUnlockH264Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMUnlockH264Response::ArenaDtor(void* object) {
  CMsgAMUnlockH264Response* _this = reinterpret_cast< CMsgAMUnlockH264Response* >(object);
  (void)_this;
}
void CMsgAMUnlockH264Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMUnlockH264Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMUnlockH264Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMUnlockH264Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encryption_key_.ClearNonDefaultToEmpty();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMUnlockH264Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes encryption_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encryption_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMUnlockH264Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMUnlockH264Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bytes encryption_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encryption_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMUnlockH264Response)
  return target;
}

size_t CMsgAMUnlockH264Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMUnlockH264Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encryption_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encryption_key());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMUnlockH264Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMUnlockH264Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMUnlockH264Response::GetClassData() const { return &_class_data_; }

void CMsgAMUnlockH264Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMUnlockH264Response *>(to)->MergeFrom(
      static_cast<const CMsgAMUnlockH264Response &>(from));
}


void CMsgAMUnlockH264Response::MergeFrom(const CMsgAMUnlockH264Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMUnlockH264Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encryption_key(from._internal_encryption_key());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMUnlockH264Response::CopyFrom(const CMsgAMUnlockH264Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMUnlockH264Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMUnlockH264Response::IsInitialized() const {
  return true;
}

void CMsgAMUnlockH264Response::InternalSwap(CMsgAMUnlockH264Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encryption_key_, lhs_arena,
      &other->encryption_key_, rhs_arena
  );
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMUnlockH264Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[115]);
}

// ===================================================================

class CMsgClientPlayingSessionState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPlayingSessionState>()._has_bits_);
  static void set_has_playing_blocked(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playing_app(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientPlayingSessionState::CMsgClientPlayingSessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientPlayingSessionState)
}
CMsgClientPlayingSessionState::CMsgClientPlayingSessionState(const CMsgClientPlayingSessionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playing_blocked_, &from.playing_blocked_,
    static_cast<size_t>(reinterpret_cast<char*>(&playing_app_) -
    reinterpret_cast<char*>(&playing_blocked_)) + sizeof(playing_app_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientPlayingSessionState)
}

inline void CMsgClientPlayingSessionState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playing_blocked_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playing_app_) -
    reinterpret_cast<char*>(&playing_blocked_)) + sizeof(playing_app_));
}

CMsgClientPlayingSessionState::~CMsgClientPlayingSessionState() {
  // @@protoc_insertion_point(destructor:CMsgClientPlayingSessionState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientPlayingSessionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientPlayingSessionState::ArenaDtor(void* object) {
  CMsgClientPlayingSessionState* _this = reinterpret_cast< CMsgClientPlayingSessionState* >(object);
  (void)_this;
}
void CMsgClientPlayingSessionState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPlayingSessionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPlayingSessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPlayingSessionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playing_blocked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playing_app_) -
        reinterpret_cast<char*>(&playing_blocked_)) + sizeof(playing_app_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPlayingSessionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool playing_blocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playing_blocked(&has_bits);
          playing_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 playing_app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_playing_app(&has_bits);
          playing_app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientPlayingSessionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPlayingSessionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool playing_blocked = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_playing_blocked(), target);
  }

  // optional uint32 playing_app = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playing_app(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPlayingSessionState)
  return target;
}

size_t CMsgClientPlayingSessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPlayingSessionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool playing_blocked = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 playing_app = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playing_app());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientPlayingSessionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientPlayingSessionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientPlayingSessionState::GetClassData() const { return &_class_data_; }

void CMsgClientPlayingSessionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientPlayingSessionState *>(to)->MergeFrom(
      static_cast<const CMsgClientPlayingSessionState &>(from));
}


void CMsgClientPlayingSessionState::MergeFrom(const CMsgClientPlayingSessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPlayingSessionState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playing_blocked_ = from.playing_blocked_;
    }
    if (cached_has_bits & 0x00000002u) {
      playing_app_ = from.playing_app_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientPlayingSessionState::CopyFrom(const CMsgClientPlayingSessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPlayingSessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayingSessionState::IsInitialized() const {
  return true;
}

void CMsgClientPlayingSessionState::InternalSwap(CMsgClientPlayingSessionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientPlayingSessionState, playing_app_)
      + sizeof(CMsgClientPlayingSessionState::playing_app_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientPlayingSessionState, playing_blocked_)>(
          reinterpret_cast<char*>(&playing_blocked_),
          reinterpret_cast<char*>(&other->playing_blocked_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPlayingSessionState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[116]);
}

// ===================================================================

class CMsgClientKickPlayingSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientKickPlayingSession>()._has_bits_);
  static void set_has_only_stop_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientKickPlayingSession::CMsgClientKickPlayingSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientKickPlayingSession)
}
CMsgClientKickPlayingSession::CMsgClientKickPlayingSession(const CMsgClientKickPlayingSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  only_stop_game_ = from.only_stop_game_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientKickPlayingSession)
}

inline void CMsgClientKickPlayingSession::SharedCtor() {
only_stop_game_ = false;
}

CMsgClientKickPlayingSession::~CMsgClientKickPlayingSession() {
  // @@protoc_insertion_point(destructor:CMsgClientKickPlayingSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientKickPlayingSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientKickPlayingSession::ArenaDtor(void* object) {
  CMsgClientKickPlayingSession* _this = reinterpret_cast< CMsgClientKickPlayingSession* >(object);
  (void)_this;
}
void CMsgClientKickPlayingSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientKickPlayingSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientKickPlayingSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientKickPlayingSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  only_stop_game_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientKickPlayingSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool only_stop_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_only_stop_game(&has_bits);
          only_stop_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientKickPlayingSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientKickPlayingSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool only_stop_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_only_stop_game(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientKickPlayingSession)
  return target;
}

size_t CMsgClientKickPlayingSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientKickPlayingSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool only_stop_game = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientKickPlayingSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientKickPlayingSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientKickPlayingSession::GetClassData() const { return &_class_data_; }

void CMsgClientKickPlayingSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientKickPlayingSession *>(to)->MergeFrom(
      static_cast<const CMsgClientKickPlayingSession &>(from));
}


void CMsgClientKickPlayingSession::MergeFrom(const CMsgClientKickPlayingSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientKickPlayingSession)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_only_stop_game()) {
    _internal_set_only_stop_game(from._internal_only_stop_game());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientKickPlayingSession::CopyFrom(const CMsgClientKickPlayingSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientKickPlayingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientKickPlayingSession::IsInitialized() const {
  return true;
}

void CMsgClientKickPlayingSession::InternalSwap(CMsgClientKickPlayingSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(only_stop_game_, other->only_stop_game_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientKickPlayingSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[117]);
}

// ===================================================================

class CMsgClientVoiceCallPreAuthorize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientVoiceCallPreAuthorize>()._has_bits_);
  static void set_has_caller_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caller_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hangup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientVoiceCallPreAuthorize::CMsgClientVoiceCallPreAuthorize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientVoiceCallPreAuthorize)
}
CMsgClientVoiceCallPreAuthorize::CMsgClientVoiceCallPreAuthorize(const CMsgClientVoiceCallPreAuthorize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&caller_steamid_, &from.caller_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hangup_) -
    reinterpret_cast<char*>(&caller_steamid_)) + sizeof(hangup_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientVoiceCallPreAuthorize)
}

inline void CMsgClientVoiceCallPreAuthorize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&caller_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hangup_) -
    reinterpret_cast<char*>(&caller_steamid_)) + sizeof(hangup_));
}

CMsgClientVoiceCallPreAuthorize::~CMsgClientVoiceCallPreAuthorize() {
  // @@protoc_insertion_point(destructor:CMsgClientVoiceCallPreAuthorize)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientVoiceCallPreAuthorize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientVoiceCallPreAuthorize::ArenaDtor(void* object) {
  CMsgClientVoiceCallPreAuthorize* _this = reinterpret_cast< CMsgClientVoiceCallPreAuthorize* >(object);
  (void)_this;
}
void CMsgClientVoiceCallPreAuthorize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientVoiceCallPreAuthorize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientVoiceCallPreAuthorize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientVoiceCallPreAuthorize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&caller_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hangup_) -
        reinterpret_cast<char*>(&caller_steamid_)) + sizeof(hangup_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientVoiceCallPreAuthorize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 caller_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_caller_steamid(&has_bits);
          caller_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 receiver_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_receiver_steamid(&has_bits);
          receiver_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 caller_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_caller_id(&has_bits);
          caller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hangup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hangup(&has_bits);
          hangup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientVoiceCallPreAuthorize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientVoiceCallPreAuthorize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 caller_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_caller_steamid(), target);
  }

  // optional fixed64 receiver_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_receiver_steamid(), target);
  }

  // optional int32 caller_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_caller_id(), target);
  }

  // optional bool hangup = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hangup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientVoiceCallPreAuthorize)
  return target;
}

size_t CMsgClientVoiceCallPreAuthorize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientVoiceCallPreAuthorize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 caller_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 receiver_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 caller_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_caller_id());
    }

    // optional bool hangup = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientVoiceCallPreAuthorize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientVoiceCallPreAuthorize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientVoiceCallPreAuthorize::GetClassData() const { return &_class_data_; }

void CMsgClientVoiceCallPreAuthorize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientVoiceCallPreAuthorize *>(to)->MergeFrom(
      static_cast<const CMsgClientVoiceCallPreAuthorize &>(from));
}


void CMsgClientVoiceCallPreAuthorize::MergeFrom(const CMsgClientVoiceCallPreAuthorize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientVoiceCallPreAuthorize)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      caller_steamid_ = from.caller_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_steamid_ = from.receiver_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      caller_id_ = from.caller_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hangup_ = from.hangup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientVoiceCallPreAuthorize::CopyFrom(const CMsgClientVoiceCallPreAuthorize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientVoiceCallPreAuthorize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientVoiceCallPreAuthorize::IsInitialized() const {
  return true;
}

void CMsgClientVoiceCallPreAuthorize::InternalSwap(CMsgClientVoiceCallPreAuthorize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, hangup_)
      + sizeof(CMsgClientVoiceCallPreAuthorize::hangup_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorize, caller_steamid_)>(
          reinterpret_cast<char*>(&caller_steamid_),
          reinterpret_cast<char*>(&other->caller_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientVoiceCallPreAuthorize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[118]);
}

// ===================================================================

class CMsgClientVoiceCallPreAuthorizeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientVoiceCallPreAuthorizeResponse>()._has_bits_);
  static void set_has_caller_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caller_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientVoiceCallPreAuthorizeResponse::CMsgClientVoiceCallPreAuthorizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientVoiceCallPreAuthorizeResponse)
}
CMsgClientVoiceCallPreAuthorizeResponse::CMsgClientVoiceCallPreAuthorizeResponse(const CMsgClientVoiceCallPreAuthorizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&caller_steamid_, &from.caller_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&caller_steamid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientVoiceCallPreAuthorizeResponse)
}

inline void CMsgClientVoiceCallPreAuthorizeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&caller_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&caller_id_) -
    reinterpret_cast<char*>(&caller_steamid_)) + sizeof(caller_id_));
eresult_ = 2;
}

CMsgClientVoiceCallPreAuthorizeResponse::~CMsgClientVoiceCallPreAuthorizeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientVoiceCallPreAuthorizeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientVoiceCallPreAuthorizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientVoiceCallPreAuthorizeResponse::ArenaDtor(void* object) {
  CMsgClientVoiceCallPreAuthorizeResponse* _this = reinterpret_cast< CMsgClientVoiceCallPreAuthorizeResponse* >(object);
  (void)_this;
}
void CMsgClientVoiceCallPreAuthorizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientVoiceCallPreAuthorizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientVoiceCallPreAuthorizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientVoiceCallPreAuthorizeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&caller_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&caller_id_) -
        reinterpret_cast<char*>(&caller_steamid_)) + sizeof(caller_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientVoiceCallPreAuthorizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 caller_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_caller_steamid(&has_bits);
          caller_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 receiver_steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_receiver_steamid(&has_bits);
          receiver_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 caller_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_caller_id(&has_bits);
          caller_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientVoiceCallPreAuthorizeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientVoiceCallPreAuthorizeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 caller_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_caller_steamid(), target);
  }

  // optional fixed64 receiver_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_receiver_steamid(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  // optional int32 caller_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_caller_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientVoiceCallPreAuthorizeResponse)
  return target;
}

size_t CMsgClientVoiceCallPreAuthorizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientVoiceCallPreAuthorizeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 caller_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 receiver_steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 caller_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_caller_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientVoiceCallPreAuthorizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientVoiceCallPreAuthorizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientVoiceCallPreAuthorizeResponse::GetClassData() const { return &_class_data_; }

void CMsgClientVoiceCallPreAuthorizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientVoiceCallPreAuthorizeResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientVoiceCallPreAuthorizeResponse &>(from));
}


void CMsgClientVoiceCallPreAuthorizeResponse::MergeFrom(const CMsgClientVoiceCallPreAuthorizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientVoiceCallPreAuthorizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      caller_steamid_ = from.caller_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_steamid_ = from.receiver_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      caller_id_ = from.caller_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientVoiceCallPreAuthorizeResponse::CopyFrom(const CMsgClientVoiceCallPreAuthorizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientVoiceCallPreAuthorizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientVoiceCallPreAuthorizeResponse::IsInitialized() const {
  return true;
}

void CMsgClientVoiceCallPreAuthorizeResponse::InternalSwap(CMsgClientVoiceCallPreAuthorizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, caller_id_)
      + sizeof(CMsgClientVoiceCallPreAuthorizeResponse::caller_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientVoiceCallPreAuthorizeResponse, caller_steamid_)>(
          reinterpret_cast<char*>(&caller_steamid_),
          reinterpret_cast<char*>(&other->caller_steamid_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientVoiceCallPreAuthorizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[119]);
}

// ===================================================================

class CMsgBadgeCraftedNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBadgeCraftedNotification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_badge_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBadgeCraftedNotification::CMsgBadgeCraftedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgBadgeCraftedNotification)
}
CMsgBadgeCraftedNotification::CMsgBadgeCraftedNotification(const CMsgBadgeCraftedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&badge_level_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(badge_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgBadgeCraftedNotification)
}

inline void CMsgBadgeCraftedNotification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&badge_level_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(badge_level_));
}

CMsgBadgeCraftedNotification::~CMsgBadgeCraftedNotification() {
  // @@protoc_insertion_point(destructor:CMsgBadgeCraftedNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgBadgeCraftedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBadgeCraftedNotification::ArenaDtor(void* object) {
  CMsgBadgeCraftedNotification* _this = reinterpret_cast< CMsgBadgeCraftedNotification* >(object);
  (void)_this;
}
void CMsgBadgeCraftedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBadgeCraftedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBadgeCraftedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBadgeCraftedNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&badge_level_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(badge_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBadgeCraftedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 badge_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_badge_level(&has_bits);
          badge_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBadgeCraftedNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBadgeCraftedNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 badge_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_badge_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBadgeCraftedNotification)
  return target;
}

size_t CMsgBadgeCraftedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBadgeCraftedNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 badge_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_badge_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBadgeCraftedNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgBadgeCraftedNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBadgeCraftedNotification::GetClassData() const { return &_class_data_; }

void CMsgBadgeCraftedNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgBadgeCraftedNotification *>(to)->MergeFrom(
      static_cast<const CMsgBadgeCraftedNotification &>(from));
}


void CMsgBadgeCraftedNotification::MergeFrom(const CMsgBadgeCraftedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBadgeCraftedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      badge_level_ = from.badge_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBadgeCraftedNotification::CopyFrom(const CMsgBadgeCraftedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBadgeCraftedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBadgeCraftedNotification::IsInitialized() const {
  return true;
}

void CMsgBadgeCraftedNotification::InternalSwap(CMsgBadgeCraftedNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBadgeCraftedNotification, badge_level_)
      + sizeof(CMsgBadgeCraftedNotification::badge_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgBadgeCraftedNotification, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBadgeCraftedNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[120]);
}

// ===================================================================

class CMsgClientStartPeerContentServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStartPeerContentServer>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_remote_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientStartPeerContentServer::CMsgClientStartPeerContentServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientStartPeerContentServer)
}
CMsgClientStartPeerContentServer::CMsgClientStartPeerContentServer(const CMsgClientStartPeerContentServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_build_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(current_build_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStartPeerContentServer)
}

inline void CMsgClientStartPeerContentServer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_build_id_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(current_build_id_));
}

CMsgClientStartPeerContentServer::~CMsgClientStartPeerContentServer() {
  // @@protoc_insertion_point(destructor:CMsgClientStartPeerContentServer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientStartPeerContentServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientStartPeerContentServer::ArenaDtor(void* object) {
  CMsgClientStartPeerContentServer* _this = reinterpret_cast< CMsgClientStartPeerContentServer* >(object);
  (void)_this;
}
void CMsgClientStartPeerContentServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStartPeerContentServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStartPeerContentServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStartPeerContentServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_build_id_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(current_build_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStartPeerContentServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 client_remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_client_remote_id(&has_bits);
          client_remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_build_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_current_build_id(&has_bits);
          current_build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientStartPeerContentServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStartPeerContentServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 client_remote_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_client_remote_id(), target);
  }

  // optional uint32 app_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_app_id(), target);
  }

  // optional uint32 current_build_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_current_build_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStartPeerContentServer)
  return target;
}

size_t CMsgClientStartPeerContentServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStartPeerContentServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 client_remote_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 current_build_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_build_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientStartPeerContentServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientStartPeerContentServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientStartPeerContentServer::GetClassData() const { return &_class_data_; }

void CMsgClientStartPeerContentServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientStartPeerContentServer *>(to)->MergeFrom(
      static_cast<const CMsgClientStartPeerContentServer &>(from));
}


void CMsgClientStartPeerContentServer::MergeFrom(const CMsgClientStartPeerContentServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStartPeerContentServer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_remote_id_ = from.client_remote_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_build_id_ = from.current_build_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientStartPeerContentServer::CopyFrom(const CMsgClientStartPeerContentServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStartPeerContentServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStartPeerContentServer::IsInitialized() const {
  return true;
}

void CMsgClientStartPeerContentServer::InternalSwap(CMsgClientStartPeerContentServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStartPeerContentServer, current_build_id_)
      + sizeof(CMsgClientStartPeerContentServer::current_build_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStartPeerContentServer, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStartPeerContentServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[121]);
}

// ===================================================================

class CMsgClientStartPeerContentServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientStartPeerContentServerResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientStartPeerContentServerResponse::CMsgClientStartPeerContentServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  installed_depots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientStartPeerContentServerResponse)
}
CMsgClientStartPeerContentServerResponse::CMsgClientStartPeerContentServerResponse(const CMsgClientStartPeerContentServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      installed_depots_(from.installed_depots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&result_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientStartPeerContentServerResponse)
}

inline void CMsgClientStartPeerContentServerResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&result_)) + sizeof(server_port_));
}

CMsgClientStartPeerContentServerResponse::~CMsgClientStartPeerContentServerResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientStartPeerContentServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientStartPeerContentServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientStartPeerContentServerResponse::ArenaDtor(void* object) {
  CMsgClientStartPeerContentServerResponse* _this = reinterpret_cast< CMsgClientStartPeerContentServerResponse* >(object);
  (void)_this;
}
void CMsgClientStartPeerContentServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientStartPeerContentServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientStartPeerContentServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientStartPeerContentServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  installed_depots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_port_) -
        reinterpret_cast<char*>(&result_)) + sizeof(server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientStartPeerContentServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 installed_depots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_installed_depots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_installed_depots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientStartPeerContentServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientStartPeerContentServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_port(), target);
  }

  // repeated uint32 installed_depots = 3;
  for (int i = 0, n = this->_internal_installed_depots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_installed_depots(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientStartPeerContentServerResponse)
  return target;
}

size_t CMsgClientStartPeerContentServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientStartPeerContentServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 installed_depots = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->installed_depots_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_installed_depots_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

    // optional uint32 server_port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientStartPeerContentServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientStartPeerContentServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientStartPeerContentServerResponse::GetClassData() const { return &_class_data_; }

void CMsgClientStartPeerContentServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientStartPeerContentServerResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientStartPeerContentServerResponse &>(from));
}


void CMsgClientStartPeerContentServerResponse::MergeFrom(const CMsgClientStartPeerContentServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientStartPeerContentServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  installed_depots_.MergeFrom(from.installed_depots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_port_ = from.server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientStartPeerContentServerResponse::CopyFrom(const CMsgClientStartPeerContentServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientStartPeerContentServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStartPeerContentServerResponse::IsInitialized() const {
  return true;
}

void CMsgClientStartPeerContentServerResponse::InternalSwap(CMsgClientStartPeerContentServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  installed_depots_.InternalSwap(&other->installed_depots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientStartPeerContentServerResponse, server_port_)
      + sizeof(CMsgClientStartPeerContentServerResponse::server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientStartPeerContentServerResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientStartPeerContentServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[122]);
}

// ===================================================================

class CMsgClientGetPeerContentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetPeerContentInfo>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_remote_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owned_games_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientGetPeerContentInfo::CMsgClientGetPeerContentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetPeerContentInfo)
}
CMsgClientGetPeerContentInfo::CMsgClientGetPeerContentInfo(const CMsgClientGetPeerContentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&owned_games_visible_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(owned_games_visible_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetPeerContentInfo)
}

inline void CMsgClientGetPeerContentInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owned_games_visible_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(owned_games_visible_));
}

CMsgClientGetPeerContentInfo::~CMsgClientGetPeerContentInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientGetPeerContentInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetPeerContentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetPeerContentInfo::ArenaDtor(void* object) {
  CMsgClientGetPeerContentInfo* _this = reinterpret_cast< CMsgClientGetPeerContentInfo* >(object);
  (void)_this;
}
void CMsgClientGetPeerContentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetPeerContentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetPeerContentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetPeerContentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owned_games_visible_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(owned_games_visible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetPeerContentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 client_remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_client_remote_id(&has_bits);
          client_remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool owned_games_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_owned_games_visible(&has_bits);
          owned_games_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetPeerContentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetPeerContentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed64 client_remote_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_client_remote_id(), target);
  }

  // optional bool owned_games_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_owned_games_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetPeerContentInfo)
  return target;
}

size_t CMsgClientGetPeerContentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetPeerContentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 client_remote_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool owned_games_visible = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetPeerContentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetPeerContentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetPeerContentInfo::GetClassData() const { return &_class_data_; }

void CMsgClientGetPeerContentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetPeerContentInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientGetPeerContentInfo &>(from));
}


void CMsgClientGetPeerContentInfo::MergeFrom(const CMsgClientGetPeerContentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetPeerContentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_remote_id_ = from.client_remote_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      owned_games_visible_ = from.owned_games_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetPeerContentInfo::CopyFrom(const CMsgClientGetPeerContentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetPeerContentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetPeerContentInfo::IsInitialized() const {
  return true;
}

void CMsgClientGetPeerContentInfo::InternalSwap(CMsgClientGetPeerContentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientGetPeerContentInfo, owned_games_visible_)
      + sizeof(CMsgClientGetPeerContentInfo::owned_games_visible_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientGetPeerContentInfo, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetPeerContentInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[123]);
}

// ===================================================================

class CMsgClientGetPeerContentInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientGetPeerContentInfoResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientGetPeerContentInfoResponse::CMsgClientGetPeerContentInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientGetPeerContentInfoResponse)
}
CMsgClientGetPeerContentInfoResponse::CMsgClientGetPeerContentInfoResponse(const CMsgClientGetPeerContentInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientGetPeerContentInfoResponse)
}

inline void CMsgClientGetPeerContentInfoResponse::SharedCtor() {
result_ = 0u;
}

CMsgClientGetPeerContentInfoResponse::~CMsgClientGetPeerContentInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientGetPeerContentInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientGetPeerContentInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientGetPeerContentInfoResponse::ArenaDtor(void* object) {
  CMsgClientGetPeerContentInfoResponse* _this = reinterpret_cast< CMsgClientGetPeerContentInfoResponse* >(object);
  (void)_this;
}
void CMsgClientGetPeerContentInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientGetPeerContentInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientGetPeerContentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientGetPeerContentInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientGetPeerContentInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 apps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_apps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_apps(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientGetPeerContentInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientGetPeerContentInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated uint32 apps = 2;
  for (int i = 0, n = this->_internal_apps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apps(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientGetPeerContentInfoResponse)
  return target;
}

size_t CMsgClientGetPeerContentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientGetPeerContentInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 apps = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->apps_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_apps_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientGetPeerContentInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientGetPeerContentInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientGetPeerContentInfoResponse::GetClassData() const { return &_class_data_; }

void CMsgClientGetPeerContentInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientGetPeerContentInfoResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientGetPeerContentInfoResponse &>(from));
}


void CMsgClientGetPeerContentInfoResponse::MergeFrom(const CMsgClientGetPeerContentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientGetPeerContentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientGetPeerContentInfoResponse::CopyFrom(const CMsgClientGetPeerContentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientGetPeerContentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetPeerContentInfoResponse::IsInitialized() const {
  return true;
}

void CMsgClientGetPeerContentInfoResponse::InternalSwap(CMsgClientGetPeerContentInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apps_.InternalSwap(&other->apps_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientGetPeerContentInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[124]);
}

// ===================================================================

class CMsgClientFeatureGroupInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientFeatureGroupInfo>()._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientFeatureGroupInfo::CMsgClientFeatureGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientFeatureGroupInfo)
}
CMsgClientFeatureGroupInfo::CMsgClientFeatureGroupInfo(const CMsgClientFeatureGroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientFeatureGroupInfo)
}

inline void CMsgClientFeatureGroupInfo::SharedCtor() {
groupid_ = uint64_t{0u};
}

CMsgClientFeatureGroupInfo::~CMsgClientFeatureGroupInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientFeatureGroupInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientFeatureGroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientFeatureGroupInfo::ArenaDtor(void* object) {
  CMsgClientFeatureGroupInfo* _this = reinterpret_cast< CMsgClientFeatureGroupInfo* >(object);
  (void)_this;
}
void CMsgClientFeatureGroupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientFeatureGroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientFeatureGroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientFeatureGroupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  groupid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientFeatureGroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_members(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_members(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientFeatureGroupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientFeatureGroupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 groupid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_groupid(), target);
  }

  // repeated uint32 members = 2;
  for (int i = 0, n = this->_internal_members_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_members(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientFeatureGroupInfo)
  return target;
}

size_t CMsgClientFeatureGroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientFeatureGroupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 members = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->members_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_members_size());
    total_size += data_size;
  }

  // optional uint64 groupid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientFeatureGroupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientFeatureGroupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientFeatureGroupInfo::GetClassData() const { return &_class_data_; }

void CMsgClientFeatureGroupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientFeatureGroupInfo *>(to)->MergeFrom(
      static_cast<const CMsgClientFeatureGroupInfo &>(from));
}


void CMsgClientFeatureGroupInfo::MergeFrom(const CMsgClientFeatureGroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientFeatureGroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_groupid()) {
    _internal_set_groupid(from._internal_groupid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientFeatureGroupInfo::CopyFrom(const CMsgClientFeatureGroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientFeatureGroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFeatureGroupInfo::IsInitialized() const {
  return true;
}

void CMsgClientFeatureGroupInfo::InternalSwap(CMsgClientFeatureGroupInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientFeatureGroupInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5f2_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5f2_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5f2_2eproto[125]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientUpdateUserGameInfo* Arena::CreateMaybeMessage< ::CMsgClientUpdateUserGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUpdateUserGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRichPresenceUpload* Arena::CreateMaybeMessage< ::CMsgClientRichPresenceUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRichPresenceUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRichPresenceRequest* Arena::CreateMaybeMessage< ::CMsgClientRichPresenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRichPresenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRichPresenceInfo_RichPresence* Arena::CreateMaybeMessage< ::CMsgClientRichPresenceInfo_RichPresence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRichPresenceInfo_RichPresence >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRichPresenceInfo* Arena::CreateMaybeMessage< ::CMsgClientRichPresenceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRichPresenceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCheckFileSignature* Arena::CreateMaybeMessage< ::CMsgClientCheckFileSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCheckFileSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCheckFileSignatureResponse* Arena::CreateMaybeMessage< ::CMsgClientCheckFileSignatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCheckFileSignatureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientReadMachineAuth* Arena::CreateMaybeMessage< ::CMsgClientReadMachineAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientReadMachineAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientReadMachineAuthResponse* Arena::CreateMaybeMessage< ::CMsgClientReadMachineAuthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientReadMachineAuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUpdateMachineAuth* Arena::CreateMaybeMessage< ::CMsgClientUpdateMachineAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUpdateMachineAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUpdateMachineAuthResponse* Arena::CreateMaybeMessage< ::CMsgClientUpdateMachineAuthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUpdateMachineAuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestMachineAuth* Arena::CreateMaybeMessage< ::CMsgClientRequestMachineAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestMachineAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestMachineAuthResponse* Arena::CreateMaybeMessage< ::CMsgClientRequestMachineAuthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestMachineAuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRegisterKey* Arena::CreateMaybeMessage< ::CMsgClientRegisterKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRegisterKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPurchaseResponse* Arena::CreateMaybeMessage< ::CMsgClientPurchaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPurchaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientActivateOEMLicense* Arena::CreateMaybeMessage< ::CMsgClientActivateOEMLicense >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientActivateOEMLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRegisterOEMMachine* Arena::CreateMaybeMessage< ::CMsgClientRegisterOEMMachine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRegisterOEMMachine >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRegisterOEMMachineResponse* Arena::CreateMaybeMessage< ::CMsgClientRegisterOEMMachineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRegisterOEMMachineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPurchaseWithMachineID* Arena::CreateMaybeMessage< ::CMsgClientPurchaseWithMachineID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPurchaseWithMachineID >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTrading_InitiateTradeRequest* Arena::CreateMaybeMessage< ::CMsgTrading_InitiateTradeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTrading_InitiateTradeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTrading_InitiateTradeResponse* Arena::CreateMaybeMessage< ::CMsgTrading_InitiateTradeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTrading_InitiateTradeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTrading_CancelTradeRequest* Arena::CreateMaybeMessage< ::CMsgTrading_CancelTradeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTrading_CancelTradeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTrading_StartSession* Arena::CreateMaybeMessage< ::CMsgTrading_StartSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTrading_StartSession >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetCDNAuthToken* Arena::CreateMaybeMessage< ::CMsgClientGetCDNAuthToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetCDNAuthToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetDepotDecryptionKey* Arena::CreateMaybeMessage< ::CMsgClientGetDepotDecryptionKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetDepotDecryptionKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetDepotDecryptionKeyResponse* Arena::CreateMaybeMessage< ::CMsgClientGetDepotDecryptionKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetDepotDecryptionKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCheckAppBetaPassword* Arena::CreateMaybeMessage< ::CMsgClientCheckAppBetaPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCheckAppBetaPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCheckAppBetaPasswordResponse_BetaPassword* Arena::CreateMaybeMessage< ::CMsgClientCheckAppBetaPasswordResponse_BetaPassword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCheckAppBetaPasswordResponse_BetaPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCheckAppBetaPasswordResponse* Arena::CreateMaybeMessage< ::CMsgClientCheckAppBetaPasswordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCheckAppBetaPasswordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetCDNAuthTokenResponse* Arena::CreateMaybeMessage< ::CMsgClientGetCDNAuthTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetCDNAuthTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDownloadRateStatistics_StatsInfo* Arena::CreateMaybeMessage< ::CMsgDownloadRateStatistics_StatsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDownloadRateStatistics_StatsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDownloadRateStatistics* Arena::CreateMaybeMessage< ::CMsgDownloadRateStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDownloadRateStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestAccountData* Arena::CreateMaybeMessage< ::CMsgClientRequestAccountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestAccountData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestAccountDataResponse* Arena::CreateMaybeMessage< ::CMsgClientRequestAccountDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestAccountDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUGSGetGlobalStats* Arena::CreateMaybeMessage< ::CMsgClientUGSGetGlobalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUGSGetGlobalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUGSGetGlobalStatsResponse_Day_Stat* Arena::CreateMaybeMessage< ::CMsgClientUGSGetGlobalStatsResponse_Day_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUGSGetGlobalStatsResponse_Day_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUGSGetGlobalStatsResponse_Day* Arena::CreateMaybeMessage< ::CMsgClientUGSGetGlobalStatsResponse_Day >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUGSGetGlobalStatsResponse_Day >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUGSGetGlobalStatsResponse* Arena::CreateMaybeMessage< ::CMsgClientUGSGetGlobalStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUGSGetGlobalStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRedeemGuestPass* Arena::CreateMaybeMessage< ::CMsgClientRedeemGuestPass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRedeemGuestPass >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRedeemGuestPassResponse* Arena::CreateMaybeMessage< ::CMsgClientRedeemGuestPassResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRedeemGuestPassResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClanActivityCounts* Arena::CreateMaybeMessage< ::CMsgClientGetClanActivityCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClanActivityCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetClanActivityCountsResponse* Arena::CreateMaybeMessage< ::CMsgClientGetClanActivityCountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetClanActivityCountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientOGSReportString* Arena::CreateMaybeMessage< ::CMsgClientOGSReportString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientOGSReportString >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientOGSReportBug* Arena::CreateMaybeMessage< ::CMsgClientOGSReportBug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientOGSReportBug >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSentLogs* Arena::CreateMaybeMessage< ::CMsgClientSentLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSentLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClient* Arena::CreateMaybeMessage< ::CMsgGCClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestFreeLicense* Arena::CreateMaybeMessage< ::CMsgClientRequestFreeLicense >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestFreeLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestFreeLicenseResponse* Arena::CreateMaybeMessage< ::CMsgClientRequestFreeLicenseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestFreeLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDRMDownloadRequestWithCrashData* Arena::CreateMaybeMessage< ::CMsgDRMDownloadRequestWithCrashData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDRMDownloadRequestWithCrashData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDRMDownloadResponse* Arena::CreateMaybeMessage< ::CMsgDRMDownloadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDRMDownloadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDRMFinalResult* Arena::CreateMaybeMessage< ::CMsgDRMFinalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDRMFinalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDPCheckSpecialSurvey* Arena::CreateMaybeMessage< ::CMsgClientDPCheckSpecialSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDPCheckSpecialSurvey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDPCheckSpecialSurveyResponse* Arena::CreateMaybeMessage< ::CMsgClientDPCheckSpecialSurveyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDPCheckSpecialSurveyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDPSendSpecialSurveyResponse* Arena::CreateMaybeMessage< ::CMsgClientDPSendSpecialSurveyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDPSendSpecialSurveyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDPSendSpecialSurveyResponseReply* Arena::CreateMaybeMessage< ::CMsgClientDPSendSpecialSurveyResponseReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDPSendSpecialSurveyResponseReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestForgottenPasswordEmail* Arena::CreateMaybeMessage< ::CMsgClientRequestForgottenPasswordEmail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestForgottenPasswordEmail >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestForgottenPasswordEmailResponse* Arena::CreateMaybeMessage< ::CMsgClientRequestForgottenPasswordEmailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestForgottenPasswordEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientItemAnnouncements_UnseenItem* Arena::CreateMaybeMessage< ::CMsgClientItemAnnouncements_UnseenItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientItemAnnouncements_UnseenItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientItemAnnouncements* Arena::CreateMaybeMessage< ::CMsgClientItemAnnouncements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientItemAnnouncements >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestItemAnnouncements* Arena::CreateMaybeMessage< ::CMsgClientRequestItemAnnouncements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestItemAnnouncements >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUserNotifications_Notification* Arena::CreateMaybeMessage< ::CMsgClientUserNotifications_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUserNotifications_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUserNotifications* Arena::CreateMaybeMessage< ::CMsgClientUserNotifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUserNotifications >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientCommentNotifications* Arena::CreateMaybeMessage< ::CMsgClientCommentNotifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientCommentNotifications >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestCommentNotifications* Arena::CreateMaybeMessage< ::CMsgClientRequestCommentNotifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestCommentNotifications >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientOfflineMessageNotification* Arena::CreateMaybeMessage< ::CMsgClientOfflineMessageNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientOfflineMessageNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestOfflineMessageCount* Arena::CreateMaybeMessage< ::CMsgClientRequestOfflineMessageCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestOfflineMessageCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChatGetFriendMessageHistory* Arena::CreateMaybeMessage< ::CMsgClientChatGetFriendMessageHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChatGetFriendMessageHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage* Arena::CreateMaybeMessage< ::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChatGetFriendMessageHistoryResponse* Arena::CreateMaybeMessage< ::CMsgClientChatGetFriendMessageHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChatGetFriendMessageHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChatGetFriendMessageHistoryForOfflineMessages* Arena::CreateMaybeMessage< ::CMsgClientChatGetFriendMessageHistoryForOfflineMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChatGetFriendMessageHistoryForOfflineMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFSGetFriendsSteamLevels* Arena::CreateMaybeMessage< ::CMsgClientFSGetFriendsSteamLevels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFSGetFriendsSteamLevels >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFSGetFriendsSteamLevelsResponse_Friend* Arena::CreateMaybeMessage< ::CMsgClientFSGetFriendsSteamLevelsResponse_Friend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFSGetFriendsSteamLevelsResponse_Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFSGetFriendsSteamLevelsResponse* Arena::CreateMaybeMessage< ::CMsgClientFSGetFriendsSteamLevelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFSGetFriendsSteamLevelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientEmailAddrInfo* Arena::CreateMaybeMessage< ::CMsgClientEmailAddrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientEmailAddrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREItemVoteSummary_PublishedFileId* Arena::CreateMaybeMessage< ::CMsgCREItemVoteSummary_PublishedFileId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREItemVoteSummary_PublishedFileId >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREItemVoteSummary* Arena::CreateMaybeMessage< ::CMsgCREItemVoteSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREItemVoteSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREItemVoteSummaryResponse_ItemVoteSummary* Arena::CreateMaybeMessage< ::CMsgCREItemVoteSummaryResponse_ItemVoteSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREItemVoteSummaryResponse_ItemVoteSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREItemVoteSummaryResponse* Arena::CreateMaybeMessage< ::CMsgCREItemVoteSummaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREItemVoteSummaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREUpdateUserPublishedItemVote* Arena::CreateMaybeMessage< ::CMsgCREUpdateUserPublishedItemVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREUpdateUserPublishedItemVote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREUpdateUserPublishedItemVoteResponse* Arena::CreateMaybeMessage< ::CMsgCREUpdateUserPublishedItemVoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREUpdateUserPublishedItemVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* Arena::CreateMaybeMessage< ::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREGetUserPublishedItemVoteDetails* Arena::CreateMaybeMessage< ::CMsgCREGetUserPublishedItemVoteDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREGetUserPublishedItemVoteDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* Arena::CreateMaybeMessage< ::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCREGetUserPublishedItemVoteDetailsResponse* Arena::CreateMaybeMessage< ::CMsgCREGetUserPublishedItemVoteDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCREGetUserPublishedItemVoteDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFSGetFollowerCount* Arena::CreateMaybeMessage< ::CMsgFSGetFollowerCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFSGetFollowerCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFSGetFollowerCountResponse* Arena::CreateMaybeMessage< ::CMsgFSGetFollowerCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFSGetFollowerCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFSGetIsFollowing* Arena::CreateMaybeMessage< ::CMsgFSGetIsFollowing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFSGetIsFollowing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFSGetIsFollowingResponse* Arena::CreateMaybeMessage< ::CMsgFSGetIsFollowingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFSGetIsFollowingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFSEnumerateFollowingList* Arena::CreateMaybeMessage< ::CMsgFSEnumerateFollowingList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFSEnumerateFollowingList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFSEnumerateFollowingListResponse* Arena::CreateMaybeMessage< ::CMsgFSEnumerateFollowingListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFSEnumerateFollowingListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPGetNumberOfCurrentPlayers* Arena::CreateMaybeMessage< ::CMsgDPGetNumberOfCurrentPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPGetNumberOfCurrentPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPGetNumberOfCurrentPlayersResponse* Arena::CreateMaybeMessage< ::CMsgDPGetNumberOfCurrentPlayersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPGetNumberOfCurrentPlayersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFriendUserStatusPublished* Arena::CreateMaybeMessage< ::CMsgClientFriendUserStatusPublished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFriendUserStatusPublished >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServiceMethodLegacy* Arena::CreateMaybeMessage< ::CMsgClientServiceMethodLegacy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServiceMethodLegacy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServiceMethodLegacyResponse* Arena::CreateMaybeMessage< ::CMsgClientServiceMethodLegacyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServiceMethodLegacyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUIMode* Arena::CreateMaybeMessage< ::CMsgClientUIMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUIMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientVanityURLChangedNotification* Arena::CreateMaybeMessage< ::CMsgClientVanityURLChangedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientVanityURLChangedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAuthorizeLocalDeviceRequest* Arena::CreateMaybeMessage< ::CMsgClientAuthorizeLocalDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAuthorizeLocalDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAuthorizeLocalDevice* Arena::CreateMaybeMessage< ::CMsgClientAuthorizeLocalDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAuthorizeLocalDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAuthorizeLocalDeviceNotification* Arena::CreateMaybeMessage< ::CMsgClientAuthorizeLocalDeviceNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAuthorizeLocalDeviceNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDeauthorizeDeviceRequest* Arena::CreateMaybeMessage< ::CMsgClientDeauthorizeDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDeauthorizeDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientDeauthorizeDevice* Arena::CreateMaybeMessage< ::CMsgClientDeauthorizeDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientDeauthorizeDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUseLocalDeviceAuthorizations_DeviceToken* Arena::CreateMaybeMessage< ::CMsgClientUseLocalDeviceAuthorizations_DeviceToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUseLocalDeviceAuthorizations_DeviceToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientUseLocalDeviceAuthorizations* Arena::CreateMaybeMessage< ::CMsgClientUseLocalDeviceAuthorizations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientUseLocalDeviceAuthorizations >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetAuthorizedDevices* Arena::CreateMaybeMessage< ::CMsgClientGetAuthorizedDevices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetAuthorizedDevices >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice* Arena::CreateMaybeMessage< ::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetAuthorizedDevicesResponse* Arena::CreateMaybeMessage< ::CMsgClientGetAuthorizedDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetAuthorizedDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSharedLibraryLockStatus_LockedLibrary* Arena::CreateMaybeMessage< ::CMsgClientSharedLibraryLockStatus_LockedLibrary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSharedLibraryLockStatus_LockedLibrary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSharedLibraryLockStatus* Arena::CreateMaybeMessage< ::CMsgClientSharedLibraryLockStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSharedLibraryLockStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSharedLibraryStopPlaying_StopApp* Arena::CreateMaybeMessage< ::CMsgClientSharedLibraryStopPlaying_StopApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSharedLibraryStopPlaying_StopApp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSharedLibraryStopPlaying* Arena::CreateMaybeMessage< ::CMsgClientSharedLibraryStopPlaying >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSharedLibraryStopPlaying >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServiceCall* Arena::CreateMaybeMessage< ::CMsgClientServiceCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServiceCall >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServiceModule* Arena::CreateMaybeMessage< ::CMsgClientServiceModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServiceModule >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServiceCallResponse* Arena::CreateMaybeMessage< ::CMsgClientServiceCallResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServiceCallResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMUnlockH264* Arena::CreateMaybeMessage< ::CMsgAMUnlockH264 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMUnlockH264 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMUnlockH264Response* Arena::CreateMaybeMessage< ::CMsgAMUnlockH264Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMUnlockH264Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPlayingSessionState* Arena::CreateMaybeMessage< ::CMsgClientPlayingSessionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPlayingSessionState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientKickPlayingSession* Arena::CreateMaybeMessage< ::CMsgClientKickPlayingSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientKickPlayingSession >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientVoiceCallPreAuthorize* Arena::CreateMaybeMessage< ::CMsgClientVoiceCallPreAuthorize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientVoiceCallPreAuthorize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientVoiceCallPreAuthorizeResponse* Arena::CreateMaybeMessage< ::CMsgClientVoiceCallPreAuthorizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientVoiceCallPreAuthorizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBadgeCraftedNotification* Arena::CreateMaybeMessage< ::CMsgBadgeCraftedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBadgeCraftedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStartPeerContentServer* Arena::CreateMaybeMessage< ::CMsgClientStartPeerContentServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStartPeerContentServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientStartPeerContentServerResponse* Arena::CreateMaybeMessage< ::CMsgClientStartPeerContentServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientStartPeerContentServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetPeerContentInfo* Arena::CreateMaybeMessage< ::CMsgClientGetPeerContentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetPeerContentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientGetPeerContentInfoResponse* Arena::CreateMaybeMessage< ::CMsgClientGetPeerContentInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientGetPeerContentInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientFeatureGroupInfo* Arena::CreateMaybeMessage< ::CMsgClientFeatureGroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientFeatureGroupInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
